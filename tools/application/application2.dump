
application/application2:     file format elf64-x86-64

Disassembly of section .text:

0000000000400078 <_Dmain>:
(effectively, passing the kernel an input variable) and calls a system call (inbterrupt 128).
*/

import user.syscall;

void main()
  400078:	55                   	push   %rbp
  400079:	48 89 e5             	mov    %rsp,%rbp
  40007c:	48 83 ec 10          	sub    $0x10,%rsp
{

	// 1st parameter is the CPU id from 0 to numCpus - 1

	int cpuID;
  400080:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	asm {

		"movq %%rsi, %0" :: "m" cpuID : "rax";

	}
  400087:	48 89 75 fc          	mov    %rsi,-0x4(%rbp)

 for (;;)
  40008b:	b8 00 00 00 00       	mov    $0x0,%eax
  400090:	84 c0                	test   %al,%al
  400092:	75 07                	jne    40009b <_Dmain+0x23>
 {
	//grabch();
	yield();
  400094:	e8 ef d5 00 00       	callq  40d688 <_D4user7syscall5yieldFZv>
  400099:	eb f0                	jmp    40008b <_Dmain+0x13>
 }

 return;
  40009b:	b8 00 00 00 00       	mov    $0x0,%eax
}
  4000a0:	c9                   	leaveq 
  4000a1:	c3                   	retq   
  4000a2:	90                   	nop    
  4000a3:	90                   	nop    

00000000004000a4 <_D3std8typeinfo5ti_AC11TypeInfo_AC7getHashMFPvZm>:

// Object[]

class TypeInfo_AC : TypeInfo
{
    hash_t getHash(void *p)
  4000a4:	55                   	push   %rbp
  4000a5:	48 89 e5             	mov    %rsp,%rbp
  4000a8:	48 83 ec 50          	sub    $0x50,%rsp
  4000ac:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  4000b0:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  4000b4:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4000b8:	e8 ff 8d 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {	Object[] s = *cast(Object[]*)p;
  4000bd:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4000c1:	48 8b 02             	mov    (%rdx),%rax
  4000c4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4000c8:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4000cc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	hash_t hash = 0;
  4000d0:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4000d7:	00 

	foreach (Object o; s)
  4000d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4000dc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  4000e0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4000e4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4000e8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4000ec:	48 c1 e0 03          	shl    $0x3,%rax
  4000f0:	48 03 45 b8          	add    -0x48(%rbp),%rax
  4000f4:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4000f8:	0f 95 c0             	setne  %al
  4000fb:	83 f0 01             	xor    $0x1,%eax
  4000fe:	84 c0                	test   %al,%al
  400100:	75 31                	jne    400133 <_D3std8typeinfo5ti_AC11TypeInfo_AC7getHashMFPvZm+0x8f>
  400102:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400106:	48 8b 00             	mov    (%rax),%rax
  400109:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	{
	    if (o)
  40010d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  400112:	74 18                	je     40012c <_D3std8typeinfo5ti_AC11TypeInfo_AC7getHashMFPvZm+0x88>
		hash += o.toHash();
  400114:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400118:	48 8b 00             	mov    (%rax),%rax
  40011b:	48 83 c0 10          	add    $0x10,%rax
  40011f:	48 8b 00             	mov    (%rax),%rax
  400122:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  400126:	ff d0                	callq  *%rax
  400128:	48 01 45 e8          	add    %rax,-0x18(%rbp)
    {	Object[] s = *cast(Object[]*)p;
	hash_t hash = 0;

	foreach (Object o; s)
	{
	    if (o)
  40012c:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
  400131:	eb b5                	jmp    4000e8 <_D3std8typeinfo5ti_AC11TypeInfo_AC7getHashMFPvZm+0x44>
		hash += o.toHash();
	}
	return hash;
  400133:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  400137:	c9                   	leaveq 
  400138:	c3                   	retq   

0000000000400139 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  400139:	55                   	push   %rbp
  40013a:	48 89 e5             	mov    %rsp,%rbp
  40013d:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  400144:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  400148:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  40014c:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  400150:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  400154:	e8 63 8d 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	Object[] s1 = *cast(Object[]*)p1;
  400159:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40015d:	48 8b 02             	mov    (%rdx),%rax
  400160:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  400164:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400168:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	Object[] s2 = *cast(Object[]*)p2;
  40016c:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  400170:	48 8b 02             	mov    (%rdx),%rax
  400173:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  400177:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40017b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

	if (s1.length == s2.length)
  40017f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  400183:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400187:	48 39 c2             	cmp    %rax,%rdx
  40018a:	0f 85 3d 01 00 00    	jne    4002cd <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x194>
	{
	    for (size_t u = 0; u < s1.length; u++)
  400190:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  400197:	00 
  400198:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40019c:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  4001a0:	0f 92 c0             	setb   %al
  4001a3:	83 f0 01             	xor    $0x1,%eax
  4001a6:	84 c0                	test   %al,%al
  4001a8:	0f 85 16 01 00 00    	jne    4002c4 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x18b>
	    {	Object o1 = s1[u];
  4001ae:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4001b2:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  4001b9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4001bd:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  4001c1:	73 0d                	jae    4001d0 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x97>
  4001c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4001c7:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  4001ce:	eb 22                	jmp    4001f2 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0xb9>
  4001d0:	48 c7 45 c0 14 00 00 	movq   $0x14,-0x40(%rbp)
  4001d7:	00 
  4001d8:	48 c7 45 c8 00 f0 40 	movq   $0x40f000,-0x38(%rbp)
  4001df:	00 
  4001e0:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4001e4:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4001e8:	ba 1b 00 00 00       	mov    $0x1b,%edx
  4001ed:	e8 93 a7 00 00       	callq  40a985 <_d_array_bounds>
  4001f2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  4001f9:	48 c1 e0 03          	shl    $0x3,%rax
  4001fd:	48 03 85 60 ff ff ff 	add    -0xa0(%rbp),%rax
  400204:	48 8b 00             	mov    (%rax),%rax
  400207:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = s2[u];
  40020b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40020f:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  400216:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40021a:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40021e:	73 0d                	jae    40022d <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0xf4>
  400220:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400224:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  40022b:	eb 22                	jmp    40024f <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x116>
  40022d:	48 c7 45 d0 14 00 00 	movq   $0x14,-0x30(%rbp)
  400234:	00 
  400235:	48 c7 45 d8 00 f0 40 	movq   $0x40f000,-0x28(%rbp)
  40023c:	00 
  40023d:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  400241:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  400245:	ba 1c 00 00 00       	mov    $0x1c,%edx
  40024a:	e8 36 a7 00 00       	callq  40a985 <_d_array_bounds>
  40024f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  400256:	48 c1 e0 03          	shl    $0x3,%rax
  40025a:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  400261:	48 8b 00             	mov    (%rax),%rax
  400264:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		// Do not pass null's to Object.opEquals()
		if (o1 is o2 ||
  400268:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40026c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  400270:	74 49                	je     4002bb <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x182>
  400272:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  400277:	0f 94 c0             	sete   %al
  40027a:	83 f0 01             	xor    $0x1,%eax
  40027d:	83 f0 01             	xor    $0x1,%eax
  400280:	84 c0                	test   %al,%al
  400282:	75 2e                	jne    4002b2 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x179>
  400284:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  400289:	0f 94 c0             	sete   %al
  40028c:	83 f0 01             	xor    $0x1,%eax
  40028f:	83 f0 01             	xor    $0x1,%eax
  400292:	84 c0                	test   %al,%al
  400294:	75 1c                	jne    4002b2 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x179>
  400296:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40029a:	48 8b 00             	mov    (%rax),%rax
  40029d:	48 83 c0 20          	add    $0x20,%rax
  4002a1:	48 8b 00             	mov    (%rax),%rax
  4002a4:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  4002a8:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4002ac:	ff d0                	callq  *%rax
  4002ae:	85 c0                	test   %eax,%eax
  4002b0:	75 09                	jne    4002bb <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x182>
		    (!(o1 is null) && !(o2 is null) && o1.opEquals(o2)))
		    continue;
		return 0;
  4002b2:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  4002b9:	eb 19                	jmp    4002d4 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x19b>
  4002bb:	48 ff 45 e8          	incq   -0x18(%rbp)
  4002bf:	e9 d4 fe ff ff       	jmpq   400198 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x5f>
	    }
	    return 1;
  4002c4:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  4002cb:	eb 07                	jmp    4002d4 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x19b>
	}
	return 0;
  4002cd:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  4002d4:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  4002d7:	c9                   	leaveq 
  4002d8:	c3                   	retq   

00000000004002d9 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4002d9:	55                   	push   %rbp
  4002da:	48 89 e5             	mov    %rsp,%rbp
  4002dd:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  4002e4:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  4002e8:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  4002ec:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  4002f0:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  4002f4:	e8 c3 8b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	Object[] s1 = *cast(Object[]*)p1;
  4002f9:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4002fd:	48 8b 02             	mov    (%rdx),%rax
  400300:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  400304:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400308:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	Object[] s2 = *cast(Object[]*)p2;
  40030c:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  400310:	48 8b 02             	mov    (%rdx),%rax
  400313:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  400317:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40031b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	ptrdiff_t c;
  40031f:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  400326:	00 

	c = cast(ptrdiff_t)s1.length - cast(ptrdiff_t)s2.length;
  400327:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40032b:	48 89 c2             	mov    %rax,%rdx
  40032e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400332:	48 89 d1             	mov    %rdx,%rcx
  400335:	48 29 c1             	sub    %rax,%rcx
  400338:	48 89 c8             	mov    %rcx,%rax
  40033b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (c == 0)
  40033f:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  400344:	0f 85 36 01 00 00    	jne    400480 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1a7>
	{
	    for (size_t u = 0; u < s1.length; u++)
  40034a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  400351:	00 
  400352:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400356:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40035a:	0f 92 c0             	setb   %al
  40035d:	83 f0 01             	xor    $0x1,%eax
  400360:	84 c0                	test   %al,%al
  400362:	0f 85 18 01 00 00    	jne    400480 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1a7>
	    {	Object o1 = s1[u];
  400368:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40036c:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  400373:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400377:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40037b:	73 0d                	jae    40038a <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0xb1>
  40037d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  400381:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
  400388:	eb 22                	jmp    4003ac <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0xd3>
  40038a:	48 c7 45 c0 14 00 00 	movq   $0x14,-0x40(%rbp)
  400391:	00 
  400392:	48 c7 45 c8 00 f0 40 	movq   $0x40f000,-0x38(%rbp)
  400399:	00 
  40039a:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40039e:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4003a2:	ba 33 00 00 00       	mov    $0x33,%edx
  4003a7:	e8 d9 a5 00 00       	callq  40a985 <_d_array_bounds>
  4003ac:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  4003b3:	48 c1 e0 03          	shl    $0x3,%rax
  4003b7:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  4003be:	48 8b 00             	mov    (%rax),%rax
  4003c1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = s2[u];
  4003c5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4003c9:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4003d0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4003d4:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  4003d8:	73 0a                	jae    4003e4 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x10b>
  4003da:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4003de:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  4003e2:	eb 22                	jmp    400406 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x12d>
  4003e4:	48 c7 45 d0 14 00 00 	movq   $0x14,-0x30(%rbp)
  4003eb:	00 
  4003ec:	48 c7 45 d8 00 f0 40 	movq   $0x40f000,-0x28(%rbp)
  4003f3:	00 
  4003f4:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4003f8:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4003fc:	ba 34 00 00 00       	mov    $0x34,%edx
  400401:	e8 7f a5 00 00       	callq  40a985 <_d_array_bounds>
  400406:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40040a:	48 c1 e0 03          	shl    $0x3,%rax
  40040e:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  400415:	48 8b 00             	mov    (%rax),%rax
  400418:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		if (o1 is o2)
  40041c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400420:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  400424:	74 51                	je     400477 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x19e>
		    continue;

		// Regard null references as always being "less than"
		if (o1)
  400426:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40042b:	74 40                	je     40046d <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x194>
		{
		    if (!o2)
  40042d:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  400432:	0f 95 c0             	setne  %al
  400435:	83 f0 01             	xor    $0x1,%eax
  400438:	84 c0                	test   %al,%al
  40043a:	74 0a                	je     400446 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x16d>
		    {	c = 1;
  40043c:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  400443:	00 
			break;
  400444:	eb 3a                	jmp    400480 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1a7>
		    }
		    c = o1.opCmp(o2);
  400446:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40044a:	48 8b 00             	mov    (%rax),%rax
  40044d:	48 83 c0 18          	add    $0x18,%rax
  400451:	48 8b 00             	mov    (%rax),%rax
  400454:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  400458:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40045c:	ff d0                	callq  *%rax
  40045e:	48 98                	cltq   
  400460:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		    if (c)
  400464:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  400469:	75 15                	jne    400480 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1a7>
			break;
  40046b:	eb 0a                	jmp    400477 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x19e>
		}
		else
		{   c = -1;
  40046d:	48 c7 45 e0 ff ff ff 	movq   $0xffffffffffffffff,-0x20(%rbp)
  400474:	ff 
		    break;
  400475:	eb 09                	jmp    400480 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1a7>

		if (o1 is o2)
		    continue;

		// Regard null references as always being "less than"
		if (o1)
  400477:	48 ff 45 e8          	incq   -0x18(%rbp)
  40047b:	e9 d2 fe ff ff       	jmpq   400352 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x79>
		{   c = -1;
		    break;
		}
	    }
	}
	if (c < 0)
  400480:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  400485:	79 0a                	jns    400491 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1b8>
	    c = -1;
  400487:	48 c7 45 e0 ff ff ff 	movq   $0xffffffffffffffff,-0x20(%rbp)
  40048e:	ff 
  40048f:	eb 0f                	jmp    4004a0 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1c7>
	else if (c > 0)
  400491:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  400496:	7e 08                	jle    4004a0 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1c7>
	    c = 1;
  400498:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  40049f:	00 
	return c;
  4004a0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    }
  4004a4:	c9                   	leaveq 
  4004a5:	c3                   	retq   

00000000004004a6 <_D3std8typeinfo5ti_AC11TypeInfo_AC5tsizeMFZm>:

    size_t tsize()
  4004a6:	55                   	push   %rbp
  4004a7:	48 89 e5             	mov    %rsp,%rbp
  4004aa:	48 83 ec 10          	sub    $0x10,%rsp
  4004ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4004b2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4004b6:	e8 01 8a 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (Object[]).sizeof;
  4004bb:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  4004c0:	c9                   	leaveq 
  4004c1:	c3                   	retq   

00000000004004c2 <_D3std8typeinfo5ti_AC11TypeInfo_AC5flagsMFZk>:

    uint flags()
  4004c2:	55                   	push   %rbp
  4004c3:	48 89 e5             	mov    %rsp,%rbp
  4004c6:	48 83 ec 10          	sub    $0x10,%rsp
  4004ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4004ce:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4004d2:	e8 e5 89 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  4004d7:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  4004dc:	c9                   	leaveq 
  4004dd:	c3                   	retq   

00000000004004de <_D3std8typeinfo5ti_AC11TypeInfo_AC4nextMFZC8TypeInfo>:

    TypeInfo next()
  4004de:	55                   	push   %rbp
  4004df:	48 89 e5             	mov    %rsp,%rbp
  4004e2:	48 83 ec 10          	sub    $0x10,%rsp
  4004e6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4004ea:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4004ee:	e8 c9 89 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(Object);
  4004f3:	48 c7 c0 10 98 41 00 	mov    $0x419810,%rax
    }
  4004fa:	c9                   	leaveq 
  4004fb:	c3                   	retq   

00000000004004fc <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar8toStringMFZAa>:

// cdouble[]

class TypeInfo_Ar : TypeInfo
{
    char[] toString() { return "cdouble[]"; }
  4004fc:	55                   	push   %rbp
  4004fd:	48 89 e5             	mov    %rsp,%rbp
  400500:	53                   	push   %rbx
  400501:	48 83 ec 08          	sub    $0x8,%rsp
  400505:	48 89 fb             	mov    %rdi,%rbx
  400508:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40050c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  400510:	e8 a7 89 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  400515:	48 c7 03 09 00 00 00 	movq   $0x9,(%rbx)
  40051c:	48 c7 43 08 c0 f0 40 	movq   $0x40f0c0,0x8(%rbx)
  400523:	00 
  400524:	48 89 d8             	mov    %rbx,%rax
  400527:	48 83 c4 08          	add    $0x8,%rsp
  40052b:	5b                   	pop    %rbx
  40052c:	c9                   	leaveq 
  40052d:	c3                   	retq   

000000000040052e <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7getHashMFPvZm>:

    hash_t getHash(void *p)
  40052e:	55                   	push   %rbp
  40052f:	48 89 e5             	mov    %rsp,%rbp
  400532:	48 83 ec 40          	sub    $0x40,%rsp
  400536:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40053a:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  40053e:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  400542:	e8 75 89 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {	cdouble[] s = *cast(cdouble[]*)p;
  400547:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40054b:	48 8b 02             	mov    (%rdx),%rax
  40054e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  400552:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400556:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  40055a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40055e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	cdouble *str = s.ptr;
  400562:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400566:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  40056a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  400571:	00 

	while (len)
  400572:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  400577:	0f 95 c0             	setne  %al
  40057a:	83 f0 01             	xor    $0x1,%eax
  40057d:	84 c0                	test   %al,%al
  40057f:	75 71                	jne    4005f2 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7getHashMFPvZm+0xc4>
	{
	    hash *= 9;
  400581:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  400585:	48 89 d0             	mov    %rdx,%rax
  400588:	48 c1 e0 03          	shl    $0x3,%rax
  40058c:	48 01 d0             	add    %rdx,%rax
  40058f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[0];
  400593:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400597:	b8 00 00 00 00       	mov    $0x0,%eax
  40059c:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4005a0:	8b 00                	mov    (%rax),%eax
  4005a2:	89 c0                	mov    %eax,%eax
  4005a4:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[1];
  4005a8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4005ac:	b8 04 00 00 00       	mov    $0x4,%eax
  4005b1:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4005b5:	8b 00                	mov    (%rax),%eax
  4005b7:	89 c0                	mov    %eax,%eax
  4005b9:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[2];
  4005bd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4005c1:	b8 08 00 00 00       	mov    $0x8,%eax
  4005c6:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4005ca:	8b 00                	mov    (%rax),%eax
  4005cc:	89 c0                	mov    %eax,%eax
  4005ce:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[3];
  4005d2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4005d6:	b8 0c 00 00 00       	mov    $0xc,%eax
  4005db:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4005df:	8b 00                	mov    (%rax),%eax
  4005e1:	89 c0                	mov    %eax,%eax
  4005e3:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  4005e7:	48 83 45 f0 10       	addq   $0x10,-0x10(%rbp)
	    len--;
  4005ec:	48 ff 4d f8          	decq   -0x8(%rbp)
  4005f0:	eb 80                	jmp    400572 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7getHashMFPvZm+0x44>
	}

	return hash;
  4005f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  4005f6:	c9                   	leaveq 
  4005f7:	c3                   	retq   

00000000004005f8 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4005f8:	55                   	push   %rbp
  4005f9:	48 89 e5             	mov    %rsp,%rbp
  4005fc:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  400603:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  400607:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  40060b:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40060f:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  400613:	e8 a4 88 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cdouble[] s1 = *cast(cdouble[]*)p1;
  400618:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40061c:	48 8b 02             	mov    (%rdx),%rax
  40061f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  400623:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400627:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	cdouble[] s2 = *cast(cdouble[]*)p2;
  40062b:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40062f:	48 8b 02             	mov    (%rdx),%rax
  400632:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  400636:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40063a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  40063e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400642:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  400646:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40064a:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40064e:	74 0f                	je     40065f <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x67>
	    return 0;
  400650:	c7 85 54 ff ff ff 00 	movl   $0x0,-0xac(%rbp)
  400657:	00 00 00 
  40065a:	e9 53 01 00 00       	jmpq   4007b2 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x1ba>
	for (size_t u = 0; u < len; u++)
  40065f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  400666:	00 
  400667:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40066b:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40066f:	0f 92 c0             	setb   %al
  400672:	83 f0 01             	xor    $0x1,%eax
  400675:	84 c0                	test   %al,%al
  400677:	0f 85 2b 01 00 00    	jne    4007a8 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x1b0>
	{
	    int c = TypeInfo_r._equals(s1[u], s2[u]);
  40067d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  400681:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  400688:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40068c:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  400690:	73 0d                	jae    40069f <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0xa7>
  400692:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400696:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40069d:	eb 22                	jmp    4006c1 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0xc9>
  40069f:	48 c7 45 c0 1a 00 00 	movq   $0x1a,-0x40(%rbp)
  4006a6:	00 
  4006a7:	48 c7 45 c8 ca f0 40 	movq   $0x40f0ca,-0x38(%rbp)
  4006ae:	00 
  4006af:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4006b3:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4006b7:	ba 40 00 00 00       	mov    $0x40,%edx
  4006bc:	e8 c4 a2 00 00       	callq  40a985 <_d_array_bounds>
  4006c1:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4006c8:	48 c1 e0 04          	shl    $0x4,%rax
  4006cc:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  4006d3:	dd 00                	fldl   (%rax)
  4006d5:	dd 9d 70 ff ff ff    	fstpl  -0x90(%rbp)
  4006db:	dd 40 08             	fldl   0x8(%rax)
  4006de:	dd 9d 68 ff ff ff    	fstpl  -0x98(%rbp)
  4006e4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4006e8:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4006ef:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4006f3:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4006f7:	73 0a                	jae    400703 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x10b>
  4006f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4006fd:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  400701:	eb 22                	jmp    400725 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x12d>
  400703:	48 c7 45 d0 1a 00 00 	movq   $0x1a,-0x30(%rbp)
  40070a:	00 
  40070b:	48 c7 45 d8 ca f0 40 	movq   $0x40f0ca,-0x28(%rbp)
  400712:	00 
  400713:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  400717:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40071b:	ba 40 00 00 00       	mov    $0x40,%edx
  400720:	e8 60 a2 00 00       	callq  40a985 <_d_array_bounds>
  400725:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  400729:	48 c1 e0 04          	shl    $0x4,%rax
  40072d:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  400734:	48 8b 10             	mov    (%rax),%rdx
  400737:	48 8b 40 08          	mov    0x8(%rax),%rax
  40073b:	48 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%rcx
  400742:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
  400749:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
  400750:	66 0f 12 95 48 ff ff 	movlpd -0xb8(%rbp),%xmm2
  400757:	ff 
  400758:	48 89 b5 48 ff ff ff 	mov    %rsi,-0xb8(%rbp)
  40075f:	66 0f 12 9d 48 ff ff 	movlpd -0xb8(%rbp),%xmm3
  400766:	ff 
  400767:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  40076e:	66 0f 12 85 48 ff ff 	movlpd -0xb8(%rbp),%xmm0
  400775:	ff 
  400776:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  40077d:	66 0f 12 8d 48 ff ff 	movlpd -0xb8(%rbp),%xmm1
  400784:	ff 
  400785:	e8 bc 34 00 00       	callq  403c46 <_D3std8typeinfo10ti_cdouble10TypeInfo_r7_equalsFrrZi>
  40078a:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  40078d:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  400791:	75 0c                	jne    40079f <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x1a7>
		return 0;
  400793:	c7 85 54 ff ff ff 00 	movl   $0x0,-0xac(%rbp)
  40079a:	00 00 00 
  40079d:	eb 13                	jmp    4007b2 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x1ba>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_r._equals(s1[u], s2[u]);
	    if (c == 0)
  40079f:	48 ff 45 f0          	incq   -0x10(%rbp)
  4007a3:	e9 bf fe ff ff       	jmpq   400667 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  4007a8:	c7 85 54 ff ff ff 01 	movl   $0x1,-0xac(%rbp)
  4007af:	00 00 00 
  4007b2:	8b 85 54 ff ff ff    	mov    -0xac(%rbp),%eax
    }
  4007b8:	c9                   	leaveq 
  4007b9:	c3                   	retq   

00000000004007ba <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4007ba:	55                   	push   %rbp
  4007bb:	48 89 e5             	mov    %rsp,%rbp
  4007be:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  4007c5:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  4007c9:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  4007cd:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  4007d1:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  4007d5:	e8 e2 86 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cdouble[] s1 = *cast(cdouble[]*)p1;
  4007da:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4007de:	48 8b 02             	mov    (%rdx),%rax
  4007e1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  4007e5:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4007e9:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	cdouble[] s2 = *cast(cdouble[]*)p2;
  4007ed:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4007f1:	48 8b 02             	mov    (%rdx),%rax
  4007f4:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4007f8:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4007fc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  400800:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400804:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  400808:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40080c:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  400810:	73 08                	jae    40081a <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x60>
	    len = s2.length;
  400812:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400816:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  40081a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  400821:	00 
  400822:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400826:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40082a:	0f 92 c0             	setb   %al
  40082d:	83 f0 01             	xor    $0x1,%eax
  400830:	84 c0                	test   %al,%al
  400832:	0f 85 2d 01 00 00    	jne    400965 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1ab>
	{
	    int c = TypeInfo_r._compare(s1[u], s2[u]);
  400838:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40083c:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  400843:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400847:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40084b:	73 0d                	jae    40085a <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0xa0>
  40084d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400851:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  400858:	eb 22                	jmp    40087c <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0xc2>
  40085a:	48 c7 45 c0 1a 00 00 	movq   $0x1a,-0x40(%rbp)
  400861:	00 
  400862:	48 c7 45 c8 ca f0 40 	movq   $0x40f0ca,-0x38(%rbp)
  400869:	00 
  40086a:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40086e:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  400872:	ba 51 00 00 00       	mov    $0x51,%edx
  400877:	e8 09 a1 00 00       	callq  40a985 <_d_array_bounds>
  40087c:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  400883:	48 c1 e0 04          	shl    $0x4,%rax
  400887:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  40088e:	dd 00                	fldl   (%rax)
  400890:	dd 9d 68 ff ff ff    	fstpl  -0x98(%rbp)
  400896:	dd 40 08             	fldl   0x8(%rax)
  400899:	dd 9d 60 ff ff ff    	fstpl  -0xa0(%rbp)
  40089f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4008a3:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  4008aa:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4008ae:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4008b2:	73 0d                	jae    4008c1 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x107>
  4008b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4008b8:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4008bf:	eb 22                	jmp    4008e3 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x129>
  4008c1:	48 c7 45 d0 1a 00 00 	movq   $0x1a,-0x30(%rbp)
  4008c8:	00 
  4008c9:	48 c7 45 d8 ca f0 40 	movq   $0x40f0ca,-0x28(%rbp)
  4008d0:	00 
  4008d1:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4008d5:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4008d9:	ba 51 00 00 00       	mov    $0x51,%edx
  4008de:	e8 a2 a0 00 00       	callq  40a985 <_d_array_bounds>
  4008e3:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4008ea:	48 c1 e0 04          	shl    $0x4,%rax
  4008ee:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  4008f5:	48 8b 10             	mov    (%rax),%rdx
  4008f8:	48 8b 40 08          	mov    0x8(%rax),%rax
  4008fc:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
  400903:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  40090a:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
  400911:	66 0f 12 95 48 ff ff 	movlpd -0xb8(%rbp),%xmm2
  400918:	ff 
  400919:	48 89 b5 48 ff ff ff 	mov    %rsi,-0xb8(%rbp)
  400920:	66 0f 12 9d 48 ff ff 	movlpd -0xb8(%rbp),%xmm3
  400927:	ff 
  400928:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  40092f:	66 0f 12 85 48 ff ff 	movlpd -0xb8(%rbp),%xmm0
  400936:	ff 
  400937:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  40093e:	66 0f 12 8d 48 ff ff 	movlpd -0xb8(%rbp),%xmm1
  400945:	ff 
  400946:	e8 6c 33 00 00       	callq  403cb7 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi>
  40094b:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  40094e:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  400952:	74 08                	je     40095c <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1a2>
		return c;
  400954:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400957:	89 45 84             	mov    %eax,-0x7c(%rbp)
  40095a:	eb 3c                	jmp    400998 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1de>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_r._compare(s1[u], s2[u]);
	    if (c)
  40095c:	48 ff 45 f0          	incq   -0x10(%rbp)
  400960:	e9 bd fe ff ff       	jmpq   400822 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  400965:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  400969:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40096d:	48 39 c2             	cmp    %rax,%rdx
  400970:	73 09                	jae    40097b <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1c1>
	    return -1;
  400972:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  400979:	eb 1d                	jmp    400998 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1de>
	else if (s1.length > s2.length)
  40097b:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40097f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400983:	48 39 c2             	cmp    %rax,%rdx
  400986:	76 09                	jbe    400991 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1d7>
	    return 1;
  400988:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  40098f:	eb 07                	jmp    400998 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1de>
	return 0;
  400991:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  400998:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  40099b:	c9                   	leaveq 
  40099c:	c3                   	retq   

000000000040099d <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar5tsizeMFZm>:

    size_t tsize()
  40099d:	55                   	push   %rbp
  40099e:	48 89 e5             	mov    %rsp,%rbp
  4009a1:	48 83 ec 10          	sub    $0x10,%rsp
  4009a5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4009a9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4009ad:	e8 0a 85 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cdouble[]).sizeof;
  4009b2:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  4009b7:	c9                   	leaveq 
  4009b8:	c3                   	retq   

00000000004009b9 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar5flagsMFZk>:

    uint flags()
  4009b9:	55                   	push   %rbp
  4009ba:	48 89 e5             	mov    %rsp,%rbp
  4009bd:	48 83 ec 10          	sub    $0x10,%rsp
  4009c1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4009c5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4009c9:	e8 ee 84 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  4009ce:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  4009d3:	c9                   	leaveq 
  4009d4:	c3                   	retq   

00000000004009d5 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar4nextMFZC8TypeInfo>:

    TypeInfo next()
  4009d5:	55                   	push   %rbp
  4009d6:	48 89 e5             	mov    %rsp,%rbp
  4009d9:	48 83 ec 10          	sub    $0x10,%rsp
  4009dd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4009e1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4009e5:	e8 d2 84 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(cdouble);
  4009ea:	48 c7 c0 f0 01 41 00 	mov    $0x4101f0,%rax
    }
  4009f1:	c9                   	leaveq 
  4009f2:	c3                   	retq   
  4009f3:	90                   	nop    

00000000004009f4 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq8toStringMFZAa>:

// cfloat[]

class TypeInfo_Aq : TypeInfo
{
    char[] toString() { return "cfloat[]"; }
  4009f4:	55                   	push   %rbp
  4009f5:	48 89 e5             	mov    %rsp,%rbp
  4009f8:	53                   	push   %rbx
  4009f9:	48 83 ec 08          	sub    $0x8,%rsp
  4009fd:	48 89 fb             	mov    %rdi,%rbx
  400a00:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  400a04:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  400a08:	e8 af 84 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  400a0d:	48 c7 03 08 00 00 00 	movq   $0x8,(%rbx)
  400a14:	48 c7 43 08 a0 f1 40 	movq   $0x40f1a0,0x8(%rbx)
  400a1b:	00 
  400a1c:	48 89 d8             	mov    %rbx,%rax
  400a1f:	48 83 c4 08          	add    $0x8,%rsp
  400a23:	5b                   	pop    %rbx
  400a24:	c9                   	leaveq 
  400a25:	c3                   	retq   

0000000000400a26 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7getHashMFPvZm>:

    hash_t getHash(void *p)
  400a26:	55                   	push   %rbp
  400a27:	48 89 e5             	mov    %rsp,%rbp
  400a2a:	48 83 ec 40          	sub    $0x40,%rsp
  400a2e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  400a32:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  400a36:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  400a3a:	e8 7d 84 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {	cfloat[] s = *cast(cfloat[]*)p;
  400a3f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  400a43:	48 8b 02             	mov    (%rdx),%rax
  400a46:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  400a4a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400a4e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  400a52:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  400a56:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	cfloat *str = s.ptr;
  400a5a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400a5e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  400a62:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  400a69:	00 

	while (len)
  400a6a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  400a6f:	0f 95 c0             	setne  %al
  400a72:	83 f0 01             	xor    $0x1,%eax
  400a75:	84 c0                	test   %al,%al
  400a77:	75 47                	jne    400ac0 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7getHashMFPvZm+0x9a>
	{
	    hash *= 9;
  400a79:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  400a7d:	48 89 d0             	mov    %rdx,%rax
  400a80:	48 c1 e0 03          	shl    $0x3,%rax
  400a84:	48 01 d0             	add    %rdx,%rax
  400a87:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[0];
  400a8b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400a8f:	b8 00 00 00 00       	mov    $0x0,%eax
  400a94:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  400a98:	8b 00                	mov    (%rax),%eax
  400a9a:	89 c0                	mov    %eax,%eax
  400a9c:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[1];
  400aa0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400aa4:	b8 04 00 00 00       	mov    $0x4,%eax
  400aa9:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  400aad:	8b 00                	mov    (%rax),%eax
  400aaf:	89 c0                	mov    %eax,%eax
  400ab1:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  400ab5:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
	    len--;
  400aba:	48 ff 4d f8          	decq   -0x8(%rbp)
  400abe:	eb aa                	jmp    400a6a <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7getHashMFPvZm+0x44>
	}

	return hash;
  400ac0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  400ac4:	c9                   	leaveq 
  400ac5:	c3                   	retq   

0000000000400ac6 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  400ac6:	55                   	push   %rbp
  400ac7:	48 89 e5             	mov    %rsp,%rbp
  400aca:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  400ad1:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  400ad5:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  400ad9:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  400add:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  400ae1:	e8 d6 83 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cfloat[] s1 = *cast(cfloat[]*)p1;
  400ae6:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  400aea:	48 8b 02             	mov    (%rdx),%rax
  400aed:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  400af1:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400af5:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	cfloat[] s2 = *cast(cfloat[]*)p2;
  400af9:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  400afd:	48 8b 02             	mov    (%rdx),%rax
  400b00:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  400b04:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400b08:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  400b0c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400b10:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  400b14:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400b18:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  400b1c:	74 0f                	je     400b2d <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x67>
	    return 0;
  400b1e:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  400b25:	00 00 00 
  400b28:	e9 44 01 00 00       	jmpq   400c71 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x1ab>
	for (size_t u = 0; u < len; u++)
  400b2d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  400b34:	00 
  400b35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400b39:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  400b3d:	0f 92 c0             	setb   %al
  400b40:	83 f0 01             	xor    $0x1,%eax
  400b43:	84 c0                	test   %al,%al
  400b45:	0f 85 1c 01 00 00    	jne    400c67 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x1a1>
	{
	    int c = TypeInfo_q._equals(s1[u], s2[u]);
  400b4b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  400b4f:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  400b56:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400b5a:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  400b5e:	73 0d                	jae    400b6d <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0xa7>
  400b60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400b64:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  400b6b:	eb 22                	jmp    400b8f <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0xc9>
  400b6d:	48 c7 45 c0 19 00 00 	movq   $0x19,-0x40(%rbp)
  400b74:	00 
  400b75:	48 c7 45 c8 a9 f1 40 	movq   $0x40f1a9,-0x38(%rbp)
  400b7c:	00 
  400b7d:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  400b81:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  400b85:	ba 3e 00 00 00       	mov    $0x3e,%edx
  400b8a:	e8 f6 9d 00 00       	callq  40a985 <_d_array_bounds>
  400b8f:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  400b96:	48 c1 e0 03          	shl    $0x3,%rax
  400b9a:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  400ba1:	d9 00                	flds   (%rax)
  400ba3:	d9 9d 64 ff ff ff    	fstps  -0x9c(%rbp)
  400ba9:	d9 40 04             	flds   0x4(%rax)
  400bac:	d9 9d 60 ff ff ff    	fstps  -0xa0(%rbp)
  400bb2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  400bb6:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  400bbd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400bc1:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  400bc5:	73 0d                	jae    400bd4 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x10e>
  400bc7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400bcb:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  400bd2:	eb 22                	jmp    400bf6 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x130>
  400bd4:	48 c7 45 d0 19 00 00 	movq   $0x19,-0x30(%rbp)
  400bdb:	00 
  400bdc:	48 c7 45 d8 a9 f1 40 	movq   $0x40f1a9,-0x28(%rbp)
  400be3:	00 
  400be4:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  400be8:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  400bec:	ba 3e 00 00 00       	mov    $0x3e,%edx
  400bf1:	e8 8f 9d 00 00       	callq  40a985 <_d_array_bounds>
  400bf6:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  400bfd:	48 c1 e0 03          	shl    $0x3,%rax
  400c01:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  400c08:	8b 08                	mov    (%rax),%ecx
  400c0a:	8b 70 04             	mov    0x4(%rax),%esi
  400c0d:	8b 85 64 ff ff ff    	mov    -0x9c(%rbp),%eax
  400c13:	8b 95 60 ff ff ff    	mov    -0xa0(%rbp),%edx
  400c19:	89 45 80             	mov    %eax,-0x80(%rbp)
  400c1c:	89 55 84             	mov    %edx,-0x7c(%rbp)
  400c1f:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  400c23:	89 c8                	mov    %ecx,%eax
  400c25:	89 f2                	mov    %esi,%edx
  400c27:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  400c2d:	89 95 7c ff ff ff    	mov    %edx,-0x84(%rbp)
  400c33:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  400c3a:	66 48 0f 6e cf       	movq   %rdi,%xmm1
  400c3f:	66 48 0f 6e c0       	movq   %rax,%xmm0
  400c44:	e8 3b 33 00 00       	callq  403f84 <_D3std8typeinfo9ti_cfloat10TypeInfo_q7_equalsFqqZi>
  400c49:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  400c4c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  400c50:	75 0c                	jne    400c5e <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x198>
		return 0;
  400c52:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  400c59:	00 00 00 
  400c5c:	eb 13                	jmp    400c71 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x1ab>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_q._equals(s1[u], s2[u]);
	    if (c == 0)
  400c5e:	48 ff 45 f0          	incq   -0x10(%rbp)
  400c62:	e9 ce fe ff ff       	jmpq   400b35 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  400c67:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  400c6e:	00 00 00 
  400c71:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
    }
  400c77:	c9                   	leaveq 
  400c78:	c3                   	retq   

0000000000400c79 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  400c79:	55                   	push   %rbp
  400c7a:	48 89 e5             	mov    %rsp,%rbp
  400c7d:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  400c84:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  400c88:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  400c8c:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  400c90:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  400c94:	e8 23 82 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cfloat[] s1 = *cast(cfloat[]*)p1;
  400c99:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  400c9d:	48 8b 02             	mov    (%rdx),%rax
  400ca0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  400ca4:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400ca8:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	cfloat[] s2 = *cast(cfloat[]*)p2;
  400cac:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  400cb0:	48 8b 02             	mov    (%rdx),%rax
  400cb3:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  400cb7:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400cbb:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  400cbf:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400cc3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  400cc7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400ccb:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  400ccf:	73 08                	jae    400cd9 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x60>
	    len = s2.length;
  400cd1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400cd5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  400cd9:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  400ce0:	00 
  400ce1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400ce5:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  400ce9:	0f 92 c0             	setb   %al
  400cec:	83 f0 01             	xor    $0x1,%eax
  400cef:	84 c0                	test   %al,%al
  400cf1:	0f 85 1b 01 00 00    	jne    400e12 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x199>
	{
	    int c = TypeInfo_q._compare(s1[u], s2[u]);
  400cf7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  400cfb:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  400d02:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400d06:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  400d0a:	73 0d                	jae    400d19 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0xa0>
  400d0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400d10:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  400d17:	eb 22                	jmp    400d3b <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0xc2>
  400d19:	48 c7 45 c0 19 00 00 	movq   $0x19,-0x40(%rbp)
  400d20:	00 
  400d21:	48 c7 45 c8 a9 f1 40 	movq   $0x40f1a9,-0x38(%rbp)
  400d28:	00 
  400d29:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  400d2d:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  400d31:	ba 4f 00 00 00       	mov    $0x4f,%edx
  400d36:	e8 4a 9c 00 00       	callq  40a985 <_d_array_bounds>
  400d3b:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  400d42:	48 c1 e0 03          	shl    $0x3,%rax
  400d46:	48 03 85 48 ff ff ff 	add    -0xb8(%rbp),%rax
  400d4d:	d9 00                	flds   (%rax)
  400d4f:	d9 9d 5c ff ff ff    	fstps  -0xa4(%rbp)
  400d55:	d9 40 04             	flds   0x4(%rax)
  400d58:	d9 9d 58 ff ff ff    	fstps  -0xa8(%rbp)
  400d5e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  400d62:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  400d69:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400d6d:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  400d71:	73 0d                	jae    400d80 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x107>
  400d73:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400d77:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  400d7e:	eb 22                	jmp    400da2 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x129>
  400d80:	48 c7 45 d0 19 00 00 	movq   $0x19,-0x30(%rbp)
  400d87:	00 
  400d88:	48 c7 45 d8 a9 f1 40 	movq   $0x40f1a9,-0x28(%rbp)
  400d8f:	00 
  400d90:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  400d94:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  400d98:	ba 4f 00 00 00       	mov    $0x4f,%edx
  400d9d:	e8 e3 9b 00 00       	callq  40a985 <_d_array_bounds>
  400da2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  400da9:	48 c1 e0 03          	shl    $0x3,%rax
  400dad:	48 03 85 60 ff ff ff 	add    -0xa0(%rbp),%rax
  400db4:	8b 08                	mov    (%rax),%ecx
  400db6:	8b 70 04             	mov    0x4(%rax),%esi
  400db9:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  400dbf:	8b 95 58 ff ff ff    	mov    -0xa8(%rbp),%edx
  400dc5:	89 45 80             	mov    %eax,-0x80(%rbp)
  400dc8:	89 55 84             	mov    %edx,-0x7c(%rbp)
  400dcb:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  400dcf:	89 c8                	mov    %ecx,%eax
  400dd1:	89 f2                	mov    %esi,%edx
  400dd3:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  400dd9:	89 95 7c ff ff ff    	mov    %edx,-0x84(%rbp)
  400ddf:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  400de6:	66 48 0f 6e cf       	movq   %rdi,%xmm1
  400deb:	66 48 0f 6e c0       	movq   %rax,%xmm0
  400df0:	e8 d9 31 00 00       	callq  403fce <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi>
  400df5:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  400df8:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  400dfc:	74 0b                	je     400e09 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x190>
		return c;
  400dfe:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400e01:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
  400e07:	eb 45                	jmp    400e4e <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x1d5>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_q._compare(s1[u], s2[u]);
	    if (c)
  400e09:	48 ff 45 f0          	incq   -0x10(%rbp)
  400e0d:	e9 cf fe ff ff       	jmpq   400ce1 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  400e12:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  400e16:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400e1a:	48 39 c2             	cmp    %rax,%rdx
  400e1d:	73 0c                	jae    400e2b <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x1b2>
	    return -1;
  400e1f:	c7 85 74 ff ff ff ff 	movl   $0xffffffff,-0x8c(%rbp)
  400e26:	ff ff ff 
  400e29:	eb 23                	jmp    400e4e <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x1d5>
	else if (s1.length > s2.length)
  400e2b:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  400e2f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400e33:	48 39 c2             	cmp    %rax,%rdx
  400e36:	76 0c                	jbe    400e44 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x1cb>
	    return 1;
  400e38:	c7 85 74 ff ff ff 01 	movl   $0x1,-0x8c(%rbp)
  400e3f:	00 00 00 
  400e42:	eb 0a                	jmp    400e4e <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x1d5>
	return 0;
  400e44:	c7 85 74 ff ff ff 00 	movl   $0x0,-0x8c(%rbp)
  400e4b:	00 00 00 
  400e4e:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
    }
  400e54:	c9                   	leaveq 
  400e55:	c3                   	retq   

0000000000400e56 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq5tsizeMFZm>:

    size_t tsize()
  400e56:	55                   	push   %rbp
  400e57:	48 89 e5             	mov    %rsp,%rbp
  400e5a:	48 83 ec 10          	sub    $0x10,%rsp
  400e5e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400e62:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  400e66:	e8 51 80 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cfloat[]).sizeof;
  400e6b:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  400e70:	c9                   	leaveq 
  400e71:	c3                   	retq   

0000000000400e72 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq5flagsMFZk>:

    uint flags()
  400e72:	55                   	push   %rbp
  400e73:	48 89 e5             	mov    %rsp,%rbp
  400e76:	48 83 ec 10          	sub    $0x10,%rsp
  400e7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400e7e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  400e82:	e8 35 80 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  400e87:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  400e8c:	c9                   	leaveq 
  400e8d:	c3                   	retq   

0000000000400e8e <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq4nextMFZC8TypeInfo>:

    TypeInfo next()
  400e8e:	55                   	push   %rbp
  400e8f:	48 89 e5             	mov    %rsp,%rbp
  400e92:	48 83 ec 10          	sub    $0x10,%rsp
  400e96:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400e9a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  400e9e:	e8 19 80 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(cfloat);
  400ea3:	48 c7 c0 b0 02 41 00 	mov    $0x4102b0,%rax
    }
  400eaa:	c9                   	leaveq 
  400eab:	c3                   	retq   

0000000000400eac <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac8toStringMFZAa>:

// creal[]

class TypeInfo_Ac : TypeInfo
{
    char[] toString() { return "creal[]"; }
  400eac:	55                   	push   %rbp
  400ead:	48 89 e5             	mov    %rsp,%rbp
  400eb0:	53                   	push   %rbx
  400eb1:	48 83 ec 08          	sub    $0x8,%rsp
  400eb5:	48 89 fb             	mov    %rdi,%rbx
  400eb8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  400ebc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  400ec0:	e8 f7 7f 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  400ec5:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  400ecc:	48 c7 43 08 80 f2 40 	movq   $0x40f280,0x8(%rbx)
  400ed3:	00 
  400ed4:	48 89 d8             	mov    %rbx,%rax
  400ed7:	48 83 c4 08          	add    $0x8,%rsp
  400edb:	5b                   	pop    %rbx
  400edc:	c9                   	leaveq 
  400edd:	c3                   	retq   

0000000000400ede <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7getHashMFPvZm>:

    hash_t getHash(void *p)
  400ede:	55                   	push   %rbp
  400edf:	48 89 e5             	mov    %rsp,%rbp
  400ee2:	48 83 ec 40          	sub    $0x40,%rsp
  400ee6:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  400eea:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  400eee:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  400ef2:	e8 c5 7f 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {	creal[] s = *cast(creal[]*)p;
  400ef7:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  400efb:	48 8b 02             	mov    (%rdx),%rax
  400efe:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  400f02:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400f06:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  400f0a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  400f0e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	creal *str = s.ptr;
  400f12:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400f16:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  400f1a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  400f21:	00 

	while (len)
  400f22:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  400f27:	0f 95 c0             	setne  %al
  400f2a:	83 f0 01             	xor    $0x1,%eax
  400f2d:	84 c0                	test   %al,%al
  400f2f:	0f 85 89 00 00 00    	jne    400fbe <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7getHashMFPvZm+0xe0>
	{
	    hash *= 9;
  400f35:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  400f39:	48 89 d0             	mov    %rdx,%rax
  400f3c:	48 c1 e0 03          	shl    $0x3,%rax
  400f40:	48 01 d0             	add    %rdx,%rax
  400f43:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[0];
  400f47:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400f4b:	b8 00 00 00 00       	mov    $0x0,%eax
  400f50:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  400f54:	8b 00                	mov    (%rax),%eax
  400f56:	89 c0                	mov    %eax,%eax
  400f58:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[1];
  400f5c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400f60:	b8 04 00 00 00       	mov    $0x4,%eax
  400f65:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  400f69:	8b 00                	mov    (%rax),%eax
  400f6b:	89 c0                	mov    %eax,%eax
  400f6d:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[2];
  400f71:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400f75:	b8 08 00 00 00       	mov    $0x8,%eax
  400f7a:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  400f7e:	8b 00                	mov    (%rax),%eax
  400f80:	89 c0                	mov    %eax,%eax
  400f82:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[3];
  400f86:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400f8a:	b8 0c 00 00 00       	mov    $0xc,%eax
  400f8f:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  400f93:	8b 00                	mov    (%rax),%eax
  400f95:	89 c0                	mov    %eax,%eax
  400f97:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[4];
  400f9b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400f9f:	b8 10 00 00 00       	mov    $0x10,%eax
  400fa4:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  400fa8:	8b 00                	mov    (%rax),%eax
  400faa:	89 c0                	mov    %eax,%eax
  400fac:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  400fb0:	48 83 45 f0 20       	addq   $0x20,-0x10(%rbp)
	    len--;
  400fb5:	48 ff 4d f8          	decq   -0x8(%rbp)
  400fb9:	e9 64 ff ff ff       	jmpq   400f22 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7getHashMFPvZm+0x44>
	}

	return hash;
  400fbe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  400fc2:	c9                   	leaveq 
  400fc3:	c3                   	retq   

0000000000400fc4 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  400fc4:	55                   	push   %rbp
  400fc5:	48 89 e5             	mov    %rsp,%rbp
  400fc8:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  400fcf:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  400fd3:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  400fd7:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  400fdb:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  400fdf:	e8 d8 7e 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	creal[] s1 = *cast(creal[]*)p1;
  400fe4:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  400fe8:	48 8b 02             	mov    (%rdx),%rax
  400feb:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  400fef:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400ff3:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	creal[] s2 = *cast(creal[]*)p2;
  400ff7:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  400ffb:	48 8b 02             	mov    (%rdx),%rax
  400ffe:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  401002:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401006:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  40100a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40100e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  401012:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401016:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40101a:	74 0f                	je     40102b <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x67>
	    return 0;
  40101c:	c7 85 3c ff ff ff 00 	movl   $0x0,-0xc4(%rbp)
  401023:	00 00 00 
  401026:	e9 34 01 00 00       	jmpq   40115f <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x19b>
	for (size_t u = 0; u < len; u++)
  40102b:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  401032:	00 
  401033:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401037:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40103b:	0f 92 c0             	setb   %al
  40103e:	83 f0 01             	xor    $0x1,%eax
  401041:	84 c0                	test   %al,%al
  401043:	0f 85 0c 01 00 00    	jne    401155 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x191>
	{
	    int c = TypeInfo_c._equals(s1[u], s2[u]);
  401049:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40104d:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  401054:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401058:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40105c:	73 0d                	jae    40106b <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0xa7>
  40105e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401062:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  401069:	eb 22                	jmp    40108d <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0xc9>
  40106b:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  401072:	00 
  401073:	48 c7 45 c8 88 f2 40 	movq   $0x40f288,-0x38(%rbp)
  40107a:	00 
  40107b:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40107f:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  401083:	ba 41 00 00 00       	mov    $0x41,%edx
  401088:	e8 f8 98 00 00       	callq  40a985 <_d_array_bounds>
  40108d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  401094:	48 c1 e0 05          	shl    $0x5,%rax
  401098:	48 03 85 40 ff ff ff 	add    -0xc0(%rbp),%rax
  40109f:	db 28                	fldt   (%rax)
  4010a1:	db bd 60 ff ff ff    	fstpt  -0xa0(%rbp)
  4010a7:	db 68 10             	fldt   0x10(%rax)
  4010aa:	db bd 50 ff ff ff    	fstpt  -0xb0(%rbp)
  4010b0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4010b4:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4010bb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4010bf:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4010c3:	73 0a                	jae    4010cf <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x10b>
  4010c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4010c9:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  4010cd:	eb 22                	jmp    4010f1 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x12d>
  4010cf:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  4010d6:	00 
  4010d7:	48 c7 45 d8 88 f2 40 	movq   $0x40f288,-0x28(%rbp)
  4010de:	00 
  4010df:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4010e3:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4010e7:	ba 41 00 00 00       	mov    $0x41,%edx
  4010ec:	e8 94 98 00 00       	callq  40a985 <_d_array_bounds>
  4010f1:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  4010f5:	48 c1 e0 05          	shl    $0x5,%rax
  4010f9:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  401100:	48 8b 10             	mov    (%rax),%rdx
  401103:	8b 48 08             	mov    0x8(%rax),%ecx
  401106:	48 8b 70 10          	mov    0x10(%rax),%rsi
  40110a:	8b 78 18             	mov    0x18(%rax),%edi
  40110d:	db ad 60 ff ff ff    	fldt   -0xa0(%rbp)
  401113:	db 7c 24 20          	fstpt  0x20(%rsp)
  401117:	db ad 50 ff ff ff    	fldt   -0xb0(%rbp)
  40111d:	db 7c 24 30          	fstpt  0x30(%rsp)
  401121:	48 89 14 24          	mov    %rdx,(%rsp)
  401125:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
  401129:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  40112e:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  401132:	e8 bc 32 00 00       	callq  4043f3 <_D3std8typeinfo8ti_creal10TypeInfo_c7_equalsFccZi>
  401137:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  40113a:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40113e:	75 0c                	jne    40114c <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x188>
		return 0;
  401140:	c7 85 3c ff ff ff 00 	movl   $0x0,-0xc4(%rbp)
  401147:	00 00 00 
  40114a:	eb 13                	jmp    40115f <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x19b>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_c._equals(s1[u], s2[u]);
	    if (c == 0)
  40114c:	48 ff 45 f0          	incq   -0x10(%rbp)
  401150:	e9 de fe ff ff       	jmpq   401033 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  401155:	c7 85 3c ff ff ff 01 	movl   $0x1,-0xc4(%rbp)
  40115c:	00 00 00 
  40115f:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
    }
  401165:	c9                   	leaveq 
  401166:	c3                   	retq   

0000000000401167 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  401167:	55                   	push   %rbp
  401168:	48 89 e5             	mov    %rsp,%rbp
  40116b:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
  401172:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  401176:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  40117a:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40117e:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  401182:	e8 35 7d 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	creal[] s1 = *cast(creal[]*)p1;
  401187:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40118b:	48 8b 02             	mov    (%rdx),%rax
  40118e:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  401192:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401196:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	creal[] s2 = *cast(creal[]*)p2;
  40119a:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40119e:	48 8b 02             	mov    (%rdx),%rax
  4011a1:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4011a5:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4011a9:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  4011ad:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4011b1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  4011b5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4011b9:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4011bd:	73 08                	jae    4011c7 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x60>
	    len = s2.length;
  4011bf:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4011c3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  4011c7:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4011ce:	00 
  4011cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4011d3:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4011d7:	0f 92 c0             	setb   %al
  4011da:	83 f0 01             	xor    $0x1,%eax
  4011dd:	84 c0                	test   %al,%al
  4011df:	0f 85 0e 01 00 00    	jne    4012f3 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x18c>
	{
	    int c = TypeInfo_c._compare(s1[u], s2[u]);
  4011e5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4011e9:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  4011f0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4011f4:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4011f8:	73 0d                	jae    401207 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0xa0>
  4011fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4011fe:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  401205:	eb 22                	jmp    401229 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0xc2>
  401207:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  40120e:	00 
  40120f:	48 c7 45 c8 88 f2 40 	movq   $0x40f288,-0x38(%rbp)
  401216:	00 
  401217:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40121b:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40121f:	ba 52 00 00 00       	mov    $0x52,%edx
  401224:	e8 5c 97 00 00       	callq  40a985 <_d_array_bounds>
  401229:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  401230:	48 c1 e0 05          	shl    $0x5,%rax
  401234:	48 03 85 40 ff ff ff 	add    -0xc0(%rbp),%rax
  40123b:	db 28                	fldt   (%rax)
  40123d:	db bd 60 ff ff ff    	fstpt  -0xa0(%rbp)
  401243:	db 68 10             	fldt   0x10(%rax)
  401246:	db bd 50 ff ff ff    	fstpt  -0xb0(%rbp)
  40124c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401250:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  401257:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40125b:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40125f:	73 0d                	jae    40126e <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x107>
  401261:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401265:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  40126c:	eb 22                	jmp    401290 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x129>
  40126e:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  401275:	00 
  401276:	48 c7 45 d8 88 f2 40 	movq   $0x40f288,-0x28(%rbp)
  40127d:	00 
  40127e:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  401282:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  401286:	ba 52 00 00 00       	mov    $0x52,%edx
  40128b:	e8 f5 96 00 00       	callq  40a985 <_d_array_bounds>
  401290:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  401297:	48 c1 e0 05          	shl    $0x5,%rax
  40129b:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  4012a2:	48 8b 10             	mov    (%rax),%rdx
  4012a5:	8b 48 08             	mov    0x8(%rax),%ecx
  4012a8:	48 8b 70 10          	mov    0x10(%rax),%rsi
  4012ac:	8b 78 18             	mov    0x18(%rax),%edi
  4012af:	db ad 60 ff ff ff    	fldt   -0xa0(%rbp)
  4012b5:	db 7c 24 20          	fstpt  0x20(%rsp)
  4012b9:	db ad 50 ff ff ff    	fldt   -0xb0(%rbp)
  4012bf:	db 7c 24 30          	fstpt  0x30(%rsp)
  4012c3:	48 89 14 24          	mov    %rdx,(%rsp)
  4012c7:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
  4012cb:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  4012d0:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  4012d4:	e8 4b 31 00 00       	callq  404424 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi>
  4012d9:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  4012dc:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  4012e0:	74 08                	je     4012ea <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x183>
		return c;
  4012e2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4012e5:	89 45 84             	mov    %eax,-0x7c(%rbp)
  4012e8:	eb 3c                	jmp    401326 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x1bf>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_c._compare(s1[u], s2[u]);
	    if (c)
  4012ea:	48 ff 45 f0          	incq   -0x10(%rbp)
  4012ee:	e9 dc fe ff ff       	jmpq   4011cf <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  4012f3:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4012f7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4012fb:	48 39 c2             	cmp    %rax,%rdx
  4012fe:	73 09                	jae    401309 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x1a2>
	    return -1;
  401300:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  401307:	eb 1d                	jmp    401326 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x1bf>
	else if (s1.length > s2.length)
  401309:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40130d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401311:	48 39 c2             	cmp    %rax,%rdx
  401314:	76 09                	jbe    40131f <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x1b8>
	    return 1;
  401316:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  40131d:	eb 07                	jmp    401326 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x1bf>
	return 0;
  40131f:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  401326:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  401329:	c9                   	leaveq 
  40132a:	c3                   	retq   

000000000040132b <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac5tsizeMFZm>:

    size_t tsize()
  40132b:	55                   	push   %rbp
  40132c:	48 89 e5             	mov    %rsp,%rbp
  40132f:	48 83 ec 10          	sub    $0x10,%rsp
  401333:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401337:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40133b:	e8 7c 7b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (creal[]).sizeof;
  401340:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  401345:	c9                   	leaveq 
  401346:	c3                   	retq   

0000000000401347 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac5flagsMFZk>:

    uint flags()
  401347:	55                   	push   %rbp
  401348:	48 89 e5             	mov    %rsp,%rbp
  40134b:	48 83 ec 10          	sub    $0x10,%rsp
  40134f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401353:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401357:	e8 60 7b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  40135c:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  401361:	c9                   	leaveq 
  401362:	c3                   	retq   

0000000000401363 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac4nextMFZC8TypeInfo>:

    TypeInfo next()
  401363:	55                   	push   %rbp
  401364:	48 89 e5             	mov    %rsp,%rbp
  401367:	48 83 ec 10          	sub    $0x10,%rsp
  40136b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40136f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401373:	e8 44 7b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(creal);
  401378:	48 c7 c0 30 04 41 00 	mov    $0x410430,%rax
    }
  40137f:	c9                   	leaveq 
  401380:	c3                   	retq   
  401381:	90                   	nop    
  401382:	90                   	nop    
  401383:	90                   	nop    

0000000000401384 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad8toStringMFZAa>:

// double[]

class TypeInfo_Ad : TypeInfo
{
    char[] toString() { return "double[]"; }
  401384:	55                   	push   %rbp
  401385:	48 89 e5             	mov    %rsp,%rbp
  401388:	53                   	push   %rbx
  401389:	48 83 ec 08          	sub    $0x8,%rsp
  40138d:	48 89 fb             	mov    %rdi,%rbx
  401390:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  401394:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  401398:	e8 1f 7b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  40139d:	48 c7 03 08 00 00 00 	movq   $0x8,(%rbx)
  4013a4:	48 c7 43 08 60 f3 40 	movq   $0x40f360,0x8(%rbx)
  4013ab:	00 
  4013ac:	48 89 d8             	mov    %rbx,%rax
  4013af:	48 83 c4 08          	add    $0x8,%rsp
  4013b3:	5b                   	pop    %rbx
  4013b4:	c9                   	leaveq 
  4013b5:	c3                   	retq   

00000000004013b6 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7getHashMFPvZm>:

    hash_t getHash(void *p)
  4013b6:	55                   	push   %rbp
  4013b7:	48 89 e5             	mov    %rsp,%rbp
  4013ba:	48 83 ec 40          	sub    $0x40,%rsp
  4013be:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  4013c2:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  4013c6:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4013ca:	e8 ed 7a 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {	double[] s = *cast(double[]*)p;
  4013cf:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4013d3:	48 8b 02             	mov    (%rdx),%rax
  4013d6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4013da:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4013de:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  4013e2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4013e6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto str = s.ptr;
  4013ea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4013ee:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  4013f2:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4013f9:	00 

	while (len)
  4013fa:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4013ff:	0f 95 c0             	setne  %al
  401402:	83 f0 01             	xor    $0x1,%eax
  401405:	84 c0                	test   %al,%al
  401407:	75 47                	jne    401450 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7getHashMFPvZm+0x9a>
	{
	    hash *= 9;
  401409:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40140d:	48 89 d0             	mov    %rdx,%rax
  401410:	48 c1 e0 03          	shl    $0x3,%rax
  401414:	48 01 d0             	add    %rdx,%rax
  401417:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[0];
  40141b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40141f:	b8 00 00 00 00       	mov    $0x0,%eax
  401424:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  401428:	8b 00                	mov    (%rax),%eax
  40142a:	89 c0                	mov    %eax,%eax
  40142c:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[1];
  401430:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  401434:	b8 04 00 00 00       	mov    $0x4,%eax
  401439:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40143d:	8b 00                	mov    (%rax),%eax
  40143f:	89 c0                	mov    %eax,%eax
  401441:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  401445:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
	    len--;
  40144a:	48 ff 4d f8          	decq   -0x8(%rbp)
  40144e:	eb aa                	jmp    4013fa <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7getHashMFPvZm+0x44>
	}

	return hash;
  401450:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  401454:	c9                   	leaveq 
  401455:	c3                   	retq   

0000000000401456 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  401456:	55                   	push   %rbp
  401457:	48 89 e5             	mov    %rsp,%rbp
  40145a:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  401461:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  401465:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  401469:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40146d:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  401471:	e8 46 7a 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	double[] s1 = *cast(double[]*)p1;
  401476:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40147a:	48 8b 02             	mov    (%rdx),%rax
  40147d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  401481:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401485:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	double[] s2 = *cast(double[]*)p2;
  401489:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40148d:	48 8b 02             	mov    (%rdx),%rax
  401490:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  401494:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401498:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  40149c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4014a0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  4014a4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4014a8:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  4014ac:	74 0f                	je     4014bd <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x67>
	    return 0;
  4014ae:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
  4014b5:	00 00 00 
  4014b8:	e9 13 01 00 00       	jmpq   4015d0 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x17a>
	for (size_t u = 0; u < len; u++)
  4014bd:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4014c4:	00 
  4014c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4014c9:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4014cd:	0f 92 c0             	setb   %al
  4014d0:	83 f0 01             	xor    $0x1,%eax
  4014d3:	84 c0                	test   %al,%al
  4014d5:	0f 85 eb 00 00 00    	jne    4015c6 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x170>
	{
	    int c = TypeInfo_d._equals(s1[u], s2[u]);
  4014db:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4014df:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  4014e6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4014ea:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4014ee:	73 0d                	jae    4014fd <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0xa7>
  4014f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4014f4:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  4014fb:	eb 22                	jmp    40151f <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0xc9>
  4014fd:	48 c7 45 c0 19 00 00 	movq   $0x19,-0x40(%rbp)
  401504:	00 
  401505:	48 c7 45 c8 69 f3 40 	movq   $0x40f369,-0x38(%rbp)
  40150c:	00 
  40150d:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  401511:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  401515:	ba 3e 00 00 00       	mov    $0x3e,%edx
  40151a:	e8 66 94 00 00       	callq  40a985 <_d_array_bounds>
  40151f:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  401526:	48 c1 e0 03          	shl    $0x3,%rax
  40152a:	48 03 85 60 ff ff ff 	add    -0xa0(%rbp),%rax
  401531:	dd 00                	fldl   (%rax)
  401533:	dd 9d 70 ff ff ff    	fstpl  -0x90(%rbp)
  401539:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40153d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  401544:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401548:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40154c:	73 0a                	jae    401558 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x102>
  40154e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401552:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  401556:	eb 22                	jmp    40157a <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x124>
  401558:	48 c7 45 d0 19 00 00 	movq   $0x19,-0x30(%rbp)
  40155f:	00 
  401560:	48 c7 45 d8 69 f3 40 	movq   $0x40f369,-0x28(%rbp)
  401567:	00 
  401568:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40156c:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  401570:	ba 3e 00 00 00       	mov    $0x3e,%edx
  401575:	e8 0b 94 00 00       	callq  40a985 <_d_array_bounds>
  40157a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40157e:	48 c1 e0 03          	shl    $0x3,%rax
  401582:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  401589:	48 8b 00             	mov    (%rax),%rax
  40158c:	66 0f 12 8d 70 ff ff 	movlpd -0x90(%rbp),%xmm1
  401593:	ff 
  401594:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  40159b:	66 0f 12 85 48 ff ff 	movlpd -0xb8(%rbp),%xmm0
  4015a2:	ff 
  4015a3:	e8 04 34 00 00       	callq  4049ac <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi>
  4015a8:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  4015ab:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  4015af:	75 0c                	jne    4015bd <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x167>
		return 0;
  4015b1:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
  4015b8:	00 00 00 
  4015bb:	eb 13                	jmp    4015d0 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x17a>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_d._equals(s1[u], s2[u]);
	    if (c == 0)
  4015bd:	48 ff 45 f0          	incq   -0x10(%rbp)
  4015c1:	e9 ff fe ff ff       	jmpq   4014c5 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  4015c6:	c7 85 5c ff ff ff 01 	movl   $0x1,-0xa4(%rbp)
  4015cd:	00 00 00 
  4015d0:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
    }
  4015d6:	c9                   	leaveq 
  4015d7:	c3                   	retq   

00000000004015d8 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4015d8:	55                   	push   %rbp
  4015d9:	48 89 e5             	mov    %rsp,%rbp
  4015dc:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  4015e3:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  4015e7:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  4015eb:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  4015ef:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  4015f3:	e8 c4 78 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	double[] s1 = *cast(double[]*)p1;
  4015f8:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4015fc:	48 8b 02             	mov    (%rdx),%rax
  4015ff:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  401603:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401607:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	double[] s2 = *cast(double[]*)p2;
  40160b:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40160f:	48 8b 02             	mov    (%rdx),%rax
  401612:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  401616:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40161a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  40161e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401622:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  401626:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40162a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40162e:	73 08                	jae    401638 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x60>
	    len = s2.length;
  401630:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401634:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  401638:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40163f:	00 
  401640:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401644:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  401648:	0f 92 c0             	setb   %al
  40164b:	83 f0 01             	xor    $0x1,%eax
  40164e:	84 c0                	test   %al,%al
  401650:	0f 85 ed 00 00 00    	jne    401743 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x16b>
	{
	    int c = TypeInfo_d._compare(s1[u], s2[u]);
  401656:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40165a:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  401661:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401665:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401669:	73 0d                	jae    401678 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0xa0>
  40166b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40166f:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  401676:	eb 22                	jmp    40169a <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0xc2>
  401678:	48 c7 45 c0 19 00 00 	movq   $0x19,-0x40(%rbp)
  40167f:	00 
  401680:	48 c7 45 c8 69 f3 40 	movq   $0x40f369,-0x38(%rbp)
  401687:	00 
  401688:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40168c:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  401690:	ba 4f 00 00 00       	mov    $0x4f,%edx
  401695:	e8 eb 92 00 00       	callq  40a985 <_d_array_bounds>
  40169a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4016a1:	48 c1 e0 03          	shl    $0x3,%rax
  4016a5:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  4016ac:	dd 00                	fldl   (%rax)
  4016ae:	dd 9d 68 ff ff ff    	fstpl  -0x98(%rbp)
  4016b4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4016b8:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  4016bf:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4016c3:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4016c7:	73 0d                	jae    4016d6 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0xfe>
  4016c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4016cd:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4016d4:	eb 22                	jmp    4016f8 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x120>
  4016d6:	48 c7 45 d0 19 00 00 	movq   $0x19,-0x30(%rbp)
  4016dd:	00 
  4016de:	48 c7 45 d8 69 f3 40 	movq   $0x40f369,-0x28(%rbp)
  4016e5:	00 
  4016e6:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4016ea:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4016ee:	ba 4f 00 00 00       	mov    $0x4f,%edx
  4016f3:	e8 8d 92 00 00       	callq  40a985 <_d_array_bounds>
  4016f8:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4016ff:	48 c1 e0 03          	shl    $0x3,%rax
  401703:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  40170a:	48 8b 00             	mov    (%rax),%rax
  40170d:	66 0f 12 8d 68 ff ff 	movlpd -0x98(%rbp),%xmm1
  401714:	ff 
  401715:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  40171c:	66 0f 12 85 48 ff ff 	movlpd -0xb8(%rbp),%xmm0
  401723:	ff 
  401724:	e8 d1 32 00 00       	callq  4049fa <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi>
  401729:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  40172c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  401730:	74 08                	je     40173a <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x162>
		return c;
  401732:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401735:	89 45 84             	mov    %eax,-0x7c(%rbp)
  401738:	eb 3c                	jmp    401776 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x19e>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_d._compare(s1[u], s2[u]);
	    if (c)
  40173a:	48 ff 45 f0          	incq   -0x10(%rbp)
  40173e:	e9 fd fe ff ff       	jmpq   401640 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  401743:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  401747:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40174b:	48 39 c2             	cmp    %rax,%rdx
  40174e:	73 09                	jae    401759 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x181>
	    return -1;
  401750:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  401757:	eb 1d                	jmp    401776 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x19e>
	else if (s1.length > s2.length)
  401759:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40175d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401761:	48 39 c2             	cmp    %rax,%rdx
  401764:	76 09                	jbe    40176f <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x197>
	    return 1;
  401766:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  40176d:	eb 07                	jmp    401776 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x19e>
	return 0;
  40176f:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  401776:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  401779:	c9                   	leaveq 
  40177a:	c3                   	retq   

000000000040177b <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad5tsizeMFZm>:

    size_t tsize()
  40177b:	55                   	push   %rbp
  40177c:	48 89 e5             	mov    %rsp,%rbp
  40177f:	48 83 ec 10          	sub    $0x10,%rsp
  401783:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401787:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40178b:	e8 2c 77 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (double[]).sizeof;
  401790:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  401795:	c9                   	leaveq 
  401796:	c3                   	retq   

0000000000401797 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad5flagsMFZk>:

    uint flags()
  401797:	55                   	push   %rbp
  401798:	48 89 e5             	mov    %rsp,%rbp
  40179b:	48 83 ec 10          	sub    $0x10,%rsp
  40179f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4017a3:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4017a7:	e8 10 77 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  4017ac:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  4017b1:	c9                   	leaveq 
  4017b2:	c3                   	retq   

00000000004017b3 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad4nextMFZC8TypeInfo>:

    TypeInfo next()
  4017b3:	55                   	push   %rbp
  4017b4:	48 89 e5             	mov    %rsp,%rbp
  4017b7:	48 83 ec 10          	sub    $0x10,%rsp
  4017bb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4017bf:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4017c3:	e8 f4 76 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(double);
  4017c8:	48 c7 c0 50 06 41 00 	mov    $0x410650,%rax
    }
  4017cf:	c9                   	leaveq 
  4017d0:	c3                   	retq   

00000000004017d1 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ap8toStringMFZAa>:

// idouble[]

class TypeInfo_Ap : TypeInfo_Ad
{
    char[] toString() { return "idouble[]"; }
  4017d1:	55                   	push   %rbp
  4017d2:	48 89 e5             	mov    %rsp,%rbp
  4017d5:	53                   	push   %rbx
  4017d6:	48 83 ec 08          	sub    $0x8,%rsp
  4017da:	48 89 fb             	mov    %rdi,%rbx
  4017dd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4017e1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4017e5:	e8 d2 76 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  4017ea:	48 c7 03 09 00 00 00 	movq   $0x9,(%rbx)
  4017f1:	48 c7 43 08 30 f4 40 	movq   $0x40f430,0x8(%rbx)
  4017f8:	00 
  4017f9:	48 89 d8             	mov    %rbx,%rax
  4017fc:	48 83 c4 08          	add    $0x8,%rsp
  401800:	5b                   	pop    %rbx
  401801:	c9                   	leaveq 
  401802:	c3                   	retq   

0000000000401803 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ap4nextMFZC8TypeInfo>:

    TypeInfo next()
  401803:	55                   	push   %rbp
  401804:	48 89 e5             	mov    %rsp,%rbp
  401807:	48 83 ec 10          	sub    $0x10,%rsp
  40180b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40180f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401813:	e8 a4 76 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(idouble);
  401818:	48 c7 c0 d0 07 41 00 	mov    $0x4107d0,%rax
    }
  40181f:	c9                   	leaveq 
  401820:	c3                   	retq   
  401821:	90                   	nop    
  401822:	90                   	nop    
  401823:	90                   	nop    

0000000000401824 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af8toStringMFZAa>:

// float[]

class TypeInfo_Af : TypeInfo
{
    char[] toString() { return "float[]"; }
  401824:	55                   	push   %rbp
  401825:	48 89 e5             	mov    %rsp,%rbp
  401828:	53                   	push   %rbx
  401829:	48 83 ec 08          	sub    $0x8,%rsp
  40182d:	48 89 fb             	mov    %rdi,%rbx
  401830:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  401834:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  401838:	e8 7f 76 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  40183d:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  401844:	48 c7 43 08 e0 f4 40 	movq   $0x40f4e0,0x8(%rbx)
  40184b:	00 
  40184c:	48 89 d8             	mov    %rbx,%rax
  40184f:	48 83 c4 08          	add    $0x8,%rsp
  401853:	5b                   	pop    %rbx
  401854:	c9                   	leaveq 
  401855:	c3                   	retq   

0000000000401856 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7getHashMFPvZm>:

    hash_t getHash(void *p)
  401856:	55                   	push   %rbp
  401857:	48 89 e5             	mov    %rsp,%rbp
  40185a:	48 83 ec 40          	sub    $0x40,%rsp
  40185e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  401862:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  401866:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  40186a:	e8 4d 76 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {	float[] s = *cast(float[]*)p;
  40186f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  401873:	48 8b 02             	mov    (%rdx),%rax
  401876:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40187a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40187e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  401882:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  401886:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto str = s.ptr;
  40188a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40188e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  401892:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  401899:	00 

	while (len)
  40189a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40189f:	0f 95 c0             	setne  %al
  4018a2:	83 f0 01             	xor    $0x1,%eax
  4018a5:	84 c0                	test   %al,%al
  4018a7:	75 29                	jne    4018d2 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7getHashMFPvZm+0x7c>
	{
	    hash *= 9;
  4018a9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4018ad:	48 89 d0             	mov    %rdx,%rax
  4018b0:	48 c1 e0 03          	shl    $0x3,%rax
  4018b4:	48 01 d0             	add    %rdx,%rax
  4018b7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += *cast(uint *)str;
  4018bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4018bf:	8b 00                	mov    (%rax),%eax
  4018c1:	89 c0                	mov    %eax,%eax
  4018c3:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  4018c7:	48 83 45 f0 04       	addq   $0x4,-0x10(%rbp)
	    len--;
  4018cc:	48 ff 4d f8          	decq   -0x8(%rbp)
  4018d0:	eb c8                	jmp    40189a <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7getHashMFPvZm+0x44>
	}

	return hash;
  4018d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  4018d6:	c9                   	leaveq 
  4018d7:	c3                   	retq   

00000000004018d8 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4018d8:	55                   	push   %rbp
  4018d9:	48 89 e5             	mov    %rsp,%rbp
  4018dc:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  4018e3:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  4018e7:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  4018eb:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  4018ef:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  4018f3:	e8 c4 75 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	float[] s1 = *cast(float[]*)p1;
  4018f8:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4018fc:	48 8b 02             	mov    (%rdx),%rax
  4018ff:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  401903:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401907:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	float[] s2 = *cast(float[]*)p2;
  40190b:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40190f:	48 8b 02             	mov    (%rdx),%rax
  401912:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  401916:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40191a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  40191e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401922:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  401926:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40192a:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40192e:	74 0f                	je     40193f <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x67>
	    return 0;
  401930:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
  401937:	00 00 00 
  40193a:	e9 11 01 00 00       	jmpq   401a50 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x178>
	for (size_t u = 0; u < len; u++)
  40193f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  401946:	00 
  401947:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40194b:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40194f:	0f 92 c0             	setb   %al
  401952:	83 f0 01             	xor    $0x1,%eax
  401955:	84 c0                	test   %al,%al
  401957:	0f 85 e9 00 00 00    	jne    401a46 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x16e>
	{
	    int c = TypeInfo_f._equals(s1[u], s2[u]);
  40195d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401961:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  401968:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40196c:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401970:	73 0d                	jae    40197f <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0xa7>
  401972:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401976:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  40197d:	eb 22                	jmp    4019a1 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0xc9>
  40197f:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  401986:	00 
  401987:	48 c7 45 c8 e8 f4 40 	movq   $0x40f4e8,-0x38(%rbp)
  40198e:	00 
  40198f:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  401993:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  401997:	ba 3d 00 00 00       	mov    $0x3d,%edx
  40199c:	e8 e4 8f 00 00       	callq  40a985 <_d_array_bounds>
  4019a1:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  4019a8:	48 c1 e0 02          	shl    $0x2,%rax
  4019ac:	48 03 85 60 ff ff ff 	add    -0xa0(%rbp),%rax
  4019b3:	d9 00                	flds   (%rax)
  4019b5:	d9 9d 74 ff ff ff    	fstps  -0x8c(%rbp)
  4019bb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4019bf:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4019c6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4019ca:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4019ce:	73 0a                	jae    4019da <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x102>
  4019d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4019d4:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  4019d8:	eb 22                	jmp    4019fc <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x124>
  4019da:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  4019e1:	00 
  4019e2:	48 c7 45 d8 e8 f4 40 	movq   $0x40f4e8,-0x28(%rbp)
  4019e9:	00 
  4019ea:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4019ee:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4019f2:	ba 3d 00 00 00       	mov    $0x3d,%edx
  4019f7:	e8 89 8f 00 00       	callq  40a985 <_d_array_bounds>
  4019fc:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  401a00:	48 c1 e0 02          	shl    $0x2,%rax
  401a04:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  401a0b:	8b 00                	mov    (%rax),%eax
  401a0d:	f3 0f 10 8d 74 ff ff 	movss  -0x8c(%rbp),%xmm1
  401a14:	ff 
  401a15:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  401a1b:	f3 0f 10 85 4c ff ff 	movss  -0xb4(%rbp),%xmm0
  401a22:	ff 
  401a23:	e8 15 32 00 00       	callq  404c3d <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi>
  401a28:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  401a2b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  401a2f:	75 0c                	jne    401a3d <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x165>
		return 0;
  401a31:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
  401a38:	00 00 00 
  401a3b:	eb 13                	jmp    401a50 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x178>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_f._equals(s1[u], s2[u]);
	    if (c == 0)
  401a3d:	48 ff 45 f0          	incq   -0x10(%rbp)
  401a41:	e9 01 ff ff ff       	jmpq   401947 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  401a46:	c7 85 5c ff ff ff 01 	movl   $0x1,-0xa4(%rbp)
  401a4d:	00 00 00 
  401a50:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
    }
  401a56:	c9                   	leaveq 
  401a57:	c3                   	retq   

0000000000401a58 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  401a58:	55                   	push   %rbp
  401a59:	48 89 e5             	mov    %rsp,%rbp
  401a5c:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  401a63:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  401a67:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  401a6b:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  401a6f:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  401a73:	e8 44 74 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	float[] s1 = *cast(float[]*)p1;
  401a78:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  401a7c:	48 8b 02             	mov    (%rdx),%rax
  401a7f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  401a83:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401a87:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	float[] s2 = *cast(float[]*)p2;
  401a8b:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  401a8f:	48 8b 02             	mov    (%rdx),%rax
  401a92:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  401a96:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401a9a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  401a9e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401aa2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  401aa6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401aaa:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  401aae:	73 08                	jae    401ab8 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x60>
	    len = s2.length;
  401ab0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401ab4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  401ab8:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  401abf:	00 
  401ac0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401ac4:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  401ac8:	0f 92 c0             	setb   %al
  401acb:	83 f0 01             	xor    $0x1,%eax
  401ace:	84 c0                	test   %al,%al
  401ad0:	0f 85 eb 00 00 00    	jne    401bc1 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x169>
	{
	    int c = TypeInfo_f._compare(s1[u], s2[u]);
  401ad6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401ada:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  401ae1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401ae5:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401ae9:	73 0d                	jae    401af8 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0xa0>
  401aeb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401aef:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  401af6:	eb 22                	jmp    401b1a <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0xc2>
  401af8:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  401aff:	00 
  401b00:	48 c7 45 c8 e8 f4 40 	movq   $0x40f4e8,-0x38(%rbp)
  401b07:	00 
  401b08:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  401b0c:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  401b10:	ba 4e 00 00 00       	mov    $0x4e,%edx
  401b15:	e8 6b 8e 00 00       	callq  40a985 <_d_array_bounds>
  401b1a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  401b21:	48 c1 e0 02          	shl    $0x2,%rax
  401b25:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  401b2c:	d9 00                	flds   (%rax)
  401b2e:	d9 9d 6c ff ff ff    	fstps  -0x94(%rbp)
  401b34:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401b38:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  401b3f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401b43:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401b47:	73 0d                	jae    401b56 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0xfe>
  401b49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401b4d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  401b54:	eb 22                	jmp    401b78 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x120>
  401b56:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  401b5d:	00 
  401b5e:	48 c7 45 d8 e8 f4 40 	movq   $0x40f4e8,-0x28(%rbp)
  401b65:	00 
  401b66:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  401b6a:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  401b6e:	ba 4e 00 00 00       	mov    $0x4e,%edx
  401b73:	e8 0d 8e 00 00       	callq  40a985 <_d_array_bounds>
  401b78:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  401b7f:	48 c1 e0 02          	shl    $0x2,%rax
  401b83:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  401b8a:	8b 00                	mov    (%rax),%eax
  401b8c:	f3 0f 10 8d 6c ff ff 	movss  -0x94(%rbp),%xmm1
  401b93:	ff 
  401b94:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  401b9a:	f3 0f 10 85 4c ff ff 	movss  -0xb4(%rbp),%xmm0
  401ba1:	ff 
  401ba2:	e8 e3 30 00 00       	callq  404c8a <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi>
  401ba7:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  401baa:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  401bae:	74 08                	je     401bb8 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x160>
		return c;
  401bb0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401bb3:	89 45 84             	mov    %eax,-0x7c(%rbp)
  401bb6:	eb 3c                	jmp    401bf4 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x19c>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_f._compare(s1[u], s2[u]);
	    if (c)
  401bb8:	48 ff 45 f0          	incq   -0x10(%rbp)
  401bbc:	e9 ff fe ff ff       	jmpq   401ac0 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  401bc1:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  401bc5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401bc9:	48 39 c2             	cmp    %rax,%rdx
  401bcc:	73 09                	jae    401bd7 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x17f>
	    return -1;
  401bce:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  401bd5:	eb 1d                	jmp    401bf4 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x19c>
	else if (s1.length > s2.length)
  401bd7:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  401bdb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401bdf:	48 39 c2             	cmp    %rax,%rdx
  401be2:	76 09                	jbe    401bed <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x195>
	    return 1;
  401be4:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  401beb:	eb 07                	jmp    401bf4 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x19c>
	return 0;
  401bed:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  401bf4:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  401bf7:	c9                   	leaveq 
  401bf8:	c3                   	retq   

0000000000401bf9 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af5tsizeMFZm>:

    size_t tsize()
  401bf9:	55                   	push   %rbp
  401bfa:	48 89 e5             	mov    %rsp,%rbp
  401bfd:	48 83 ec 10          	sub    $0x10,%rsp
  401c01:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401c05:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401c09:	e8 ae 72 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (float[]).sizeof;
  401c0e:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  401c13:	c9                   	leaveq 
  401c14:	c3                   	retq   

0000000000401c15 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af5flagsMFZk>:

    uint flags()
  401c15:	55                   	push   %rbp
  401c16:	48 89 e5             	mov    %rsp,%rbp
  401c19:	48 83 ec 10          	sub    $0x10,%rsp
  401c1d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401c21:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401c25:	e8 92 72 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  401c2a:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  401c2f:	c9                   	leaveq 
  401c30:	c3                   	retq   

0000000000401c31 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af4nextMFZC8TypeInfo>:

    TypeInfo next()
  401c31:	55                   	push   %rbp
  401c32:	48 89 e5             	mov    %rsp,%rbp
  401c35:	48 83 ec 10          	sub    $0x10,%rsp
  401c39:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401c3d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401c41:	e8 76 72 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(float);
  401c46:	48 c7 c0 10 07 41 00 	mov    $0x410710,%rax
    }
  401c4d:	c9                   	leaveq 
  401c4e:	c3                   	retq   

0000000000401c4f <_D3std8typeinfo9ti_Afloat11TypeInfo_Ao8toStringMFZAa>:

// ifloat[]

class TypeInfo_Ao : TypeInfo_Af
{
    char[] toString() { return "ifloat[]"; }
  401c4f:	55                   	push   %rbp
  401c50:	48 89 e5             	mov    %rsp,%rbp
  401c53:	53                   	push   %rbx
  401c54:	48 83 ec 08          	sub    $0x8,%rsp
  401c58:	48 89 fb             	mov    %rdi,%rbx
  401c5b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  401c5f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  401c63:	e8 54 72 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  401c68:	48 c7 03 08 00 00 00 	movq   $0x8,(%rbx)
  401c6f:	48 c7 43 08 b0 f5 40 	movq   $0x40f5b0,0x8(%rbx)
  401c76:	00 
  401c77:	48 89 d8             	mov    %rbx,%rax
  401c7a:	48 83 c4 08          	add    $0x8,%rsp
  401c7e:	5b                   	pop    %rbx
  401c7f:	c9                   	leaveq 
  401c80:	c3                   	retq   

0000000000401c81 <_D3std8typeinfo9ti_Afloat11TypeInfo_Ao4nextMFZC8TypeInfo>:

    TypeInfo next()
  401c81:	55                   	push   %rbp
  401c82:	48 89 e5             	mov    %rsp,%rbp
  401c85:	48 83 ec 10          	sub    $0x10,%rsp
  401c89:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401c8d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401c91:	e8 26 72 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(ifloat);
  401c96:	48 c7 c0 90 08 41 00 	mov    $0x410890,%rax
    }
  401c9d:	c9                   	leaveq 
  401c9e:	c3                   	retq   
  401c9f:	90                   	nop    

0000000000401ca0 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag8toStringMFZAa>:
import kernel.core.system;
// byte[]

class TypeInfo_Ag : TypeInfo
{
    char[] toString() { return "byte[]"; }
  401ca0:	55                   	push   %rbp
  401ca1:	48 89 e5             	mov    %rsp,%rbp
  401ca4:	53                   	push   %rbx
  401ca5:	48 83 ec 08          	sub    $0x8,%rsp
  401ca9:	48 89 fb             	mov    %rdi,%rbx
  401cac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  401cb0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  401cb4:	e8 03 72 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  401cb9:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  401cc0:	48 c7 43 08 60 f6 40 	movq   $0x40f660,0x8(%rbx)
  401cc7:	00 
  401cc8:	48 89 d8             	mov    %rbx,%rax
  401ccb:	48 83 c4 08          	add    $0x8,%rsp
  401ccf:	5b                   	pop    %rbx
  401cd0:	c9                   	leaveq 
  401cd1:	c3                   	retq   

0000000000401cd2 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm>:

    hash_t getHash(void *p)
  401cd2:	55                   	push   %rbp
  401cd3:	48 89 e5             	mov    %rsp,%rbp
  401cd6:	48 83 ec 50          	sub    $0x50,%rsp
  401cda:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  401cde:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  401ce2:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  401ce6:	e8 d1 71 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {	byte[] s = *cast(byte[]*)p;
  401ceb:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  401cef:	48 8b 02             	mov    (%rdx),%rax
  401cf2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  401cf6:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401cfa:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  401cfe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  401d02:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	byte *str = s.ptr;
  401d06:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  401d0a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  401d0e:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  401d15:	00 

	while (1)
  401d16:	b8 00 00 00 00       	mov    $0x0,%eax
  401d1b:	84 c0                	test   %al,%al
  401d1d:	0f 85 01 01 00 00    	jne    401e24 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x152>
		default:
		    hash *= 9;
		    hash += *cast(uint *)str;
		    str += 4;
		    len -= 4;
		    break;
  401d23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401d27:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  401d2b:	48 83 7d b0 01       	cmpq   $0x1,-0x50(%rbp)
  401d30:	74 27                	je     401d59 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x87>
  401d32:	48 83 7d b0 01       	cmpq   $0x1,-0x50(%rbp)
  401d37:	72 13                	jb     401d4c <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x7a>
  401d39:	48 83 7d b0 02       	cmpq   $0x2,-0x50(%rbp)
  401d3e:	74 46                	je     401d86 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0xb4>
  401d40:	48 83 7d b0 03       	cmpq   $0x3,-0x50(%rbp)
  401d45:	74 69                	je     401db0 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0xde>
  401d47:	e9 ab 00 00 00       	jmpq   401df7 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x125>
	while (1)
	{
	    switch (len)
	    {
		case 0:
		    return hash;
  401d4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401d50:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  401d54:	e9 d3 00 00 00       	jmpq   401e2c <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x15a>

		case 1:
		    hash *= 9;
  401d59:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  401d5d:	48 89 d0             	mov    %rdx,%rax
  401d60:	48 c1 e0 03          	shl    $0x3,%rax
  401d64:	48 01 d0             	add    %rdx,%rax
  401d67:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += *cast(ubyte *)str;
  401d6b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401d6f:	0f b6 00             	movzbl (%rax),%eax
  401d72:	0f b6 c0             	movzbl %al,%eax
  401d75:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		    return hash;
  401d79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401d7d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  401d81:	e9 a6 00 00 00       	jmpq   401e2c <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x15a>

		case 2:
		    hash *= 9;
  401d86:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  401d8a:	48 89 d0             	mov    %rdx,%rax
  401d8d:	48 c1 e0 03          	shl    $0x3,%rax
  401d91:	48 01 d0             	add    %rdx,%rax
  401d94:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += *cast(ushort *)str;
  401d98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401d9c:	0f b7 00             	movzwl (%rax),%eax
  401d9f:	0f b7 c0             	movzwl %ax,%eax
  401da2:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		    return hash;
  401da6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401daa:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  401dae:	eb 7c                	jmp    401e2c <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x15a>

		case 3:
		    hash *= 9;
  401db0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  401db4:	48 89 d0             	mov    %rdx,%rax
  401db7:	48 c1 e0 03          	shl    $0x3,%rax
  401dbb:	48 01 d0             	add    %rdx,%rax
  401dbe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += (*cast(ushort *)str << 8) +
  401dc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401dc6:	0f b7 00             	movzwl (%rax),%eax
  401dc9:	0f b7 c0             	movzwl %ax,%eax
  401dcc:	89 c1                	mov    %eax,%ecx
  401dce:	c1 e1 08             	shl    $0x8,%ecx
  401dd1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  401dd5:	b8 02 00 00 00       	mov    $0x2,%eax
  401dda:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  401dde:	0f b6 00             	movzbl (%rax),%eax
  401de1:	0f b6 c0             	movzbl %al,%eax
  401de4:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  401de7:	48 98                	cltq   
  401de9:	48 01 45 e8          	add    %rax,-0x18(%rbp)
			    (cast(ubyte *)str)[2];
		    return hash;
  401ded:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401df1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  401df5:	eb 35                	jmp    401e2c <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x15a>

		default:
		    hash *= 9;
  401df7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  401dfb:	48 89 d0             	mov    %rdx,%rax
  401dfe:	48 c1 e0 03          	shl    $0x3,%rax
  401e02:	48 01 d0             	add    %rdx,%rax
  401e05:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += *cast(uint *)str;
  401e09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401e0d:	8b 00                	mov    (%rax),%eax
  401e0f:	89 c0                	mov    %eax,%eax
  401e11:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		    str += 4;
  401e15:	48 83 45 f0 04       	addq   $0x4,-0x10(%rbp)
		    len -= 4;
  401e1a:	48 83 6d f8 04       	subq   $0x4,-0x8(%rbp)
		    break;
  401e1f:	e9 f2 fe ff ff       	jmpq   401d16 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x44>
	    }
	}

	return hash;
  401e24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401e28:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  401e2c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    }
  401e30:	c9                   	leaveq 
  401e31:	c3                   	retq   

0000000000401e32 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  401e32:	55                   	push   %rbp
  401e33:	48 89 e5             	mov    %rsp,%rbp
  401e36:	48 83 ec 40          	sub    $0x40,%rsp
  401e3a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  401e3e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  401e42:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  401e46:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  401e4a:	e8 6d 70 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ubyte[] s1 = *cast(ubyte[]*)p1;
  401e4f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  401e53:	48 8b 02             	mov    (%rdx),%rax
  401e56:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  401e5a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401e5e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	ubyte[] s2 = *cast(ubyte[]*)p2;
  401e62:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  401e66:	48 8b 02             	mov    (%rdx),%rax
  401e69:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  401e6d:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401e71:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return s1.length == s2.length &&
  401e75:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  401e79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401e7d:	48 39 c2             	cmp    %rax,%rdx
  401e80:	75 1c                	jne    401e9e <_D3std8typeinfo5ti_Ag11TypeInfo_Ag6equalsMFPvPvZi+0x6c>
  401e82:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  401e86:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  401e8a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  401e8e:	e8 61 b5 00 00       	callq  40d3f4 <_D6kernel4core6system6memcmpFPvPvmZl>
  401e93:	48 85 c0             	test   %rax,%rax
  401e96:	75 06                	jne    401e9e <_D3std8typeinfo5ti_Ag11TypeInfo_Ag6equalsMFPvPvZi+0x6c>
  401e98:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
  401e9c:	eb 04                	jmp    401ea2 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag6equalsMFPvPvZi+0x70>
  401e9e:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  401ea2:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
	       memcmp(s1.ptr, s2.ptr, s1.length) == 0;
    }
  401ea6:	c9                   	leaveq 
  401ea7:	c3                   	retq   

0000000000401ea8 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  401ea8:	55                   	push   %rbp
  401ea9:	48 89 e5             	mov    %rsp,%rbp
  401eac:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  401eb3:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  401eb7:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  401ebb:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  401ebf:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  401ec3:	e8 f4 6f 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	byte[] s1 = *cast(byte[]*)p1;
  401ec8:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  401ecc:	48 8b 02             	mov    (%rdx),%rax
  401ecf:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  401ed3:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401ed7:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	byte[] s2 = *cast(byte[]*)p2;
  401edb:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  401edf:	48 8b 02             	mov    (%rdx),%rax
  401ee2:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  401ee6:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401eea:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  401eee:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401ef2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  401ef6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401efa:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  401efe:	73 08                	jae    401f08 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x60>
	    len = s2.length;
  401f00:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401f04:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  401f08:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  401f0f:	00 
  401f10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401f14:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  401f18:	0f 92 c0             	setb   %al
  401f1b:	83 f0 01             	xor    $0x1,%eax
  401f1e:	84 c0                	test   %al,%al
  401f20:	0f 85 da 00 00 00    	jne    402000 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x158>
	{
	    int result = s1[u] - s2[u];
  401f26:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401f2a:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  401f31:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401f35:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401f39:	73 0d                	jae    401f48 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0xa0>
  401f3b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  401f3f:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  401f46:	eb 22                	jmp    401f6a <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0xc2>
  401f48:	48 c7 45 c0 14 00 00 	movq   $0x14,-0x40(%rbp)
  401f4f:	00 
  401f50:	48 c7 45 c8 67 f6 40 	movq   $0x40f667,-0x38(%rbp)
  401f57:	00 
  401f58:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  401f5c:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  401f60:	ba 46 00 00 00       	mov    $0x46,%edx
  401f65:	e8 1b 8a 00 00       	callq  40a985 <_d_array_bounds>
  401f6a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  401f71:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  401f78:	0f b6 00             	movzbl (%rax),%eax
  401f7b:	0f be c0             	movsbl %al,%eax
  401f7e:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  401f84:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401f88:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  401f8f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401f93:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401f97:	73 0d                	jae    401fa6 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0xfe>
  401f99:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  401f9d:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  401fa4:	eb 22                	jmp    401fc8 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x120>
  401fa6:	48 c7 45 d0 14 00 00 	movq   $0x14,-0x30(%rbp)
  401fad:	00 
  401fae:	48 c7 45 d8 67 f6 40 	movq   $0x40f667,-0x28(%rbp)
  401fb5:	00 
  401fb6:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  401fba:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  401fbe:	ba 46 00 00 00       	mov    $0x46,%edx
  401fc3:	e8 bd 89 00 00       	callq  40a985 <_d_array_bounds>
  401fc8:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  401fcf:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  401fd6:	0f b6 00             	movzbl (%rax),%eax
  401fd9:	0f be c0             	movsbl %al,%eax
  401fdc:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  401fe2:	29 c2                	sub    %eax,%edx
  401fe4:	89 d0                	mov    %edx,%eax
  401fe6:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (result)
  401fe9:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  401fed:	74 08                	je     401ff7 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x14f>
		return result;
  401fef:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401ff2:	89 45 84             	mov    %eax,-0x7c(%rbp)
  401ff5:	eb 3c                	jmp    402033 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x18b>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int result = s1[u] - s2[u];
	    if (result)
  401ff7:	48 ff 45 f0          	incq   -0x10(%rbp)
  401ffb:	e9 10 ff ff ff       	jmpq   401f10 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x68>
		return result;
	}
	if (s1.length < s2.length)
  402000:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  402004:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402008:	48 39 c2             	cmp    %rax,%rdx
  40200b:	73 09                	jae    402016 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x16e>
	    return -1;
  40200d:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  402014:	eb 1d                	jmp    402033 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x18b>
	else if (s1.length > s2.length)
  402016:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40201a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40201e:	48 39 c2             	cmp    %rax,%rdx
  402021:	76 09                	jbe    40202c <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x184>
	    return 1;
  402023:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  40202a:	eb 07                	jmp    402033 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x18b>
	return 0;
  40202c:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  402033:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  402036:	c9                   	leaveq 
  402037:	c3                   	retq   

0000000000402038 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag5tsizeMFZm>:

    size_t tsize()
  402038:	55                   	push   %rbp
  402039:	48 89 e5             	mov    %rsp,%rbp
  40203c:	48 83 ec 10          	sub    $0x10,%rsp
  402040:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402044:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402048:	e8 6f 6e 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (byte[]).sizeof;
  40204d:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  402052:	c9                   	leaveq 
  402053:	c3                   	retq   

0000000000402054 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag5flagsMFZk>:

    uint flags()
  402054:	55                   	push   %rbp
  402055:	48 89 e5             	mov    %rsp,%rbp
  402058:	48 83 ec 10          	sub    $0x10,%rsp
  40205c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402060:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402064:	e8 53 6e 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  402069:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  40206e:	c9                   	leaveq 
  40206f:	c3                   	retq   

0000000000402070 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag4nextMFZC8TypeInfo>:

    TypeInfo next()
  402070:	55                   	push   %rbp
  402071:	48 89 e5             	mov    %rsp,%rbp
  402074:	48 83 ec 10          	sub    $0x10,%rsp
  402078:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40207c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402080:	e8 37 6e 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(byte);
  402085:	48 c7 c0 90 00 41 00 	mov    $0x410090,%rax
    }
  40208c:	c9                   	leaveq 
  40208d:	c3                   	retq   

000000000040208e <_D3std8typeinfo5ti_Ag11TypeInfo_Ah8toStringMFZAa>:

// ubyte[]

class TypeInfo_Ah : TypeInfo_Ag
{
    char[] toString() { return "ubyte[]"; }
  40208e:	55                   	push   %rbp
  40208f:	48 89 e5             	mov    %rsp,%rbp
  402092:	53                   	push   %rbx
  402093:	48 83 ec 08          	sub    $0x8,%rsp
  402097:	48 89 fb             	mov    %rdi,%rbx
  40209a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40209e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4020a2:	e8 15 6e 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  4020a7:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  4020ae:	48 c7 43 08 10 f7 40 	movq   $0x40f710,0x8(%rbx)
  4020b5:	00 
  4020b6:	48 89 d8             	mov    %rbx,%rax
  4020b9:	48 83 c4 08          	add    $0x8,%rsp
  4020bd:	5b                   	pop    %rbx
  4020be:	c9                   	leaveq 
  4020bf:	c3                   	retq   

00000000004020c0 <_D3std8typeinfo5ti_Ag11TypeInfo_Ah7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4020c0:	55                   	push   %rbp
  4020c1:	48 89 e5             	mov    %rsp,%rbp
  4020c4:	48 83 ec 40          	sub    $0x40,%rsp
  4020c8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4020cc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4020d0:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4020d4:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4020d8:	e8 df 6d 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ubyte[] s1 = *cast(ubyte[]*)p1;
  4020dd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4020e1:	48 8b 02             	mov    (%rdx),%rax
  4020e4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4020e8:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4020ec:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	ubyte[] s2 = *cast(ubyte[]*)p2;
  4020f0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4020f4:	48 8b 02             	mov    (%rdx),%rax
  4020f7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4020fb:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4020ff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return memcmp(s1.ptr, s2.ptr, s1.length);
  402103:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  402107:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40210b:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40210f:	e8 e0 b2 00 00       	callq  40d3f4 <_D6kernel4core6system6memcmpFPvPvmZl>
    }
  402114:	c9                   	leaveq 
  402115:	c3                   	retq   

0000000000402116 <_D3std8typeinfo5ti_Ag11TypeInfo_Ah4nextMFZC8TypeInfo>:

    TypeInfo next()
  402116:	55                   	push   %rbp
  402117:	48 89 e5             	mov    %rsp,%rbp
  40211a:	48 83 ec 10          	sub    $0x10,%rsp
  40211e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402122:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402126:	e8 91 6d 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(ubyte);
  40212b:	48 c7 c0 b0 0d 41 00 	mov    $0x410db0,%rax
    }
  402132:	c9                   	leaveq 
  402133:	c3                   	retq   

0000000000402134 <_D3std8typeinfo5ti_Ag11TypeInfo_Av8toStringMFZAa>:

// void[]

class TypeInfo_Av : TypeInfo_Ah
{
    char[] toString() { return "void[]"; }
  402134:	55                   	push   %rbp
  402135:	48 89 e5             	mov    %rsp,%rbp
  402138:	53                   	push   %rbx
  402139:	48 83 ec 08          	sub    $0x8,%rsp
  40213d:	48 89 fb             	mov    %rdi,%rbx
  402140:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402144:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402148:	e8 6f 6d 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  40214d:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  402154:	48 c7 43 08 b0 f7 40 	movq   $0x40f7b0,0x8(%rbx)
  40215b:	00 
  40215c:	48 89 d8             	mov    %rbx,%rax
  40215f:	48 83 c4 08          	add    $0x8,%rsp
  402163:	5b                   	pop    %rbx
  402164:	c9                   	leaveq 
  402165:	c3                   	retq   

0000000000402166 <_D3std8typeinfo5ti_Ag11TypeInfo_Av4nextMFZC8TypeInfo>:

    TypeInfo next()
  402166:	55                   	push   %rbp
  402167:	48 89 e5             	mov    %rsp,%rbp
  40216a:	48 83 ec 10          	sub    $0x10,%rsp
  40216e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402172:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402176:	e8 41 6d 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(void);
  40217b:	48 c7 c0 60 11 41 00 	mov    $0x411160,%rax
    }
  402182:	c9                   	leaveq 
  402183:	c3                   	retq   

0000000000402184 <_D3std8typeinfo5ti_Ag11TypeInfo_Ab8toStringMFZAa>:

// bool[]

class TypeInfo_Ab : TypeInfo_Ah
{
    char[] toString() { return "bool[]"; }
  402184:	55                   	push   %rbp
  402185:	48 89 e5             	mov    %rsp,%rbp
  402188:	53                   	push   %rbx
  402189:	48 83 ec 08          	sub    $0x8,%rsp
  40218d:	48 89 fb             	mov    %rdi,%rbx
  402190:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402194:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402198:	e8 1f 6d 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  40219d:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  4021a4:	48 c7 43 08 50 f8 40 	movq   $0x40f850,0x8(%rbx)
  4021ab:	00 
  4021ac:	48 89 d8             	mov    %rbx,%rax
  4021af:	48 83 c4 08          	add    $0x8,%rsp
  4021b3:	5b                   	pop    %rbx
  4021b4:	c9                   	leaveq 
  4021b5:	c3                   	retq   

00000000004021b6 <_D3std8typeinfo5ti_Ag11TypeInfo_Ab4nextMFZC8TypeInfo>:

    TypeInfo next()
  4021b6:	55                   	push   %rbp
  4021b7:	48 89 e5             	mov    %rsp,%rbp
  4021ba:	48 83 ec 10          	sub    $0x10,%rsp
  4021be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4021c2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4021c6:	e8 f1 6c 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(bool);
  4021cb:	48 c7 c0 60 0e 41 00 	mov    $0x410e60,%rax
    }
  4021d2:	c9                   	leaveq 
  4021d3:	c3                   	retq   

00000000004021d4 <_D3std8typeinfo5ti_Ag11TypeInfo_Aa8toStringMFZAa>:

// char[]

class TypeInfo_Aa : TypeInfo_Ag
{
    char[] toString() { return "char[]"; }
  4021d4:	55                   	push   %rbp
  4021d5:	48 89 e5             	mov    %rsp,%rbp
  4021d8:	53                   	push   %rbx
  4021d9:	48 83 ec 08          	sub    $0x8,%rsp
  4021dd:	48 89 fb             	mov    %rdi,%rbx
  4021e0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4021e4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4021e8:	e8 cf 6c 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  4021ed:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  4021f4:	48 c7 43 08 f0 f8 40 	movq   $0x40f8f0,0x8(%rbx)
  4021fb:	00 
  4021fc:	48 89 d8             	mov    %rbx,%rax
  4021ff:	48 83 c4 08          	add    $0x8,%rsp
  402203:	5b                   	pop    %rbx
  402204:	c9                   	leaveq 
  402205:	c3                   	retq   

0000000000402206 <_D3std8typeinfo5ti_Ag11TypeInfo_Aa7getHashMFPvZm>:

    hash_t getHash(void *p)
  402206:	55                   	push   %rbp
  402207:	48 89 e5             	mov    %rsp,%rbp
  40220a:	48 83 ec 50          	sub    $0x50,%rsp
  40220e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  402212:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  402216:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  40221a:	e8 9d 6c 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {	char[] s = *cast(char[]*)p;
  40221f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  402223:	48 8b 02             	mov    (%rdx),%rax
  402226:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40222a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40222e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	hash_t hash = 0;
  402232:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  402239:	00 

version (all)
{
	foreach (char c; s)
  40223a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40223e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  402242:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402246:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40224a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40224e:	48 03 45 b8          	add    -0x48(%rbp),%rax
  402252:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  402256:	0f 95 c0             	setne  %al
  402259:	83 f0 01             	xor    $0x1,%eax
  40225c:	84 c0                	test   %al,%al
  40225e:	75 3c                	jne    40229c <_D3std8typeinfo5ti_Ag11TypeInfo_Aa7getHashMFPvZm+0x96>
  402260:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402264:	0f b6 00             	movzbl (%rax),%eax
  402267:	88 45 ff             	mov    %al,-0x1(%rbp)
	    hash = hash * 11 + c;
  40226a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40226e:	48 89 c8             	mov    %rcx,%rax
  402271:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  402278:	00 
  402279:	48 8d 04 95 00 00 00 	lea    0x0(,%rdx,4),%rax
  402280:	00 
  402281:	48 29 d0             	sub    %rdx,%rax
  402284:	48 89 c2             	mov    %rax,%rdx
  402287:	48 29 ca             	sub    %rcx,%rdx
  40228a:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40228e:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  402292:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  402296:	48 ff 45 f0          	incq   -0x10(%rbp)
  40229a:	eb ae                	jmp    40224a <_D3std8typeinfo5ti_Ag11TypeInfo_Aa7getHashMFPvZm+0x44>
		    len -= 4;
		    break;
	    }
	}
}
	return hash;
  40229c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  4022a0:	c9                   	leaveq 
  4022a1:	c3                   	retq   

00000000004022a2 <_D3std8typeinfo5ti_Ag11TypeInfo_Aa4nextMFZC8TypeInfo>:

    TypeInfo next()
  4022a2:	55                   	push   %rbp
  4022a3:	48 89 e5             	mov    %rsp,%rbp
  4022a6:	48 83 ec 10          	sub    $0x10,%rsp
  4022aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4022ae:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4022b2:	e8 05 6c 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(char);
  4022b7:	48 c7 c0 70 03 41 00 	mov    $0x410370,%rax
    }
  4022be:	c9                   	leaveq 
  4022bf:	c3                   	retq   

00000000004022c0 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai8toStringMFZAa>:

// int[]

class TypeInfo_Ai : TypeInfo
{
    char[] toString() { return "int[]"; }
  4022c0:	55                   	push   %rbp
  4022c1:	48 89 e5             	mov    %rsp,%rbp
  4022c4:	53                   	push   %rbx
  4022c5:	48 83 ec 08          	sub    $0x8,%rsp
  4022c9:	48 89 fb             	mov    %rdi,%rbx
  4022cc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4022d0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4022d4:	e8 e3 6b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  4022d9:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  4022e0:	48 c7 43 08 a0 f9 40 	movq   $0x40f9a0,0x8(%rbx)
  4022e7:	00 
  4022e8:	48 89 d8             	mov    %rbx,%rax
  4022eb:	48 83 c4 08          	add    $0x8,%rsp
  4022ef:	5b                   	pop    %rbx
  4022f0:	c9                   	leaveq 
  4022f1:	c3                   	retq   

00000000004022f2 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7getHashMFPvZm>:

    hash_t getHash(void *p)
  4022f2:	55                   	push   %rbp
  4022f3:	48 89 e5             	mov    %rsp,%rbp
  4022f6:	48 83 ec 40          	sub    $0x40,%rsp
  4022fa:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  4022fe:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  402302:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  402306:	e8 b1 6b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {	int[] s = *cast(int[]*)p;
  40230b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40230f:	48 8b 02             	mov    (%rdx),%rax
  402312:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  402316:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40231a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	auto len = s.length;
  40231e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  402322:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto str = s.ptr;
  402326:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40232a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  40232e:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  402335:	00 

	while (len)
  402336:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40233b:	0f 95 c0             	setne  %al
  40233e:	83 f0 01             	xor    $0x1,%eax
  402341:	84 c0                	test   %al,%al
  402343:	75 29                	jne    40236e <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7getHashMFPvZm+0x7c>
	{
	    hash *= 9;
  402345:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  402349:	48 89 d0             	mov    %rdx,%rax
  40234c:	48 c1 e0 03          	shl    $0x3,%rax
  402350:	48 01 d0             	add    %rdx,%rax
  402353:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += *cast(uint *)str;
  402357:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40235b:	8b 00                	mov    (%rax),%eax
  40235d:	89 c0                	mov    %eax,%eax
  40235f:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  402363:	48 83 45 f0 04       	addq   $0x4,-0x10(%rbp)
	    len--;
  402368:	48 ff 4d f8          	decq   -0x8(%rbp)
  40236c:	eb c8                	jmp    402336 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7getHashMFPvZm+0x44>
	}

	return hash;
  40236e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  402372:	c9                   	leaveq 
  402373:	c3                   	retq   

0000000000402374 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  402374:	55                   	push   %rbp
  402375:	48 89 e5             	mov    %rsp,%rbp
  402378:	48 83 ec 40          	sub    $0x40,%rsp
  40237c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  402380:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  402384:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  402388:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  40238c:	e8 2b 6b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	int[] s1 = *cast(int[]*)p1;
  402391:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  402395:	48 8b 02             	mov    (%rdx),%rax
  402398:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40239c:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4023a0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	int[] s2 = *cast(int[]*)p2;
  4023a4:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4023a8:	48 8b 02             	mov    (%rdx),%rax
  4023ab:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4023af:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4023b3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return s1.length == s2.length &&
  4023b7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4023bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4023bf:	48 39 c2             	cmp    %rax,%rdx
  4023c2:	75 2a                	jne    4023ee <_D3std8typeinfo7ti_Aint11TypeInfo_Ai6equalsMFPvPvZi+0x7a>
  4023c4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4023c8:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  4023cf:	00 
  4023d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4023d4:	48 89 c6             	mov    %rax,%rsi
  4023d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4023db:	48 89 c7             	mov    %rax,%rdi
  4023de:	e8 11 b0 00 00       	callq  40d3f4 <_D6kernel4core6system6memcmpFPvPvmZl>
  4023e3:	48 85 c0             	test   %rax,%rax
  4023e6:	75 06                	jne    4023ee <_D3std8typeinfo7ti_Aint11TypeInfo_Ai6equalsMFPvPvZi+0x7a>
  4023e8:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
  4023ec:	eb 04                	jmp    4023f2 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai6equalsMFPvPvZi+0x7e>
  4023ee:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  4023f2:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
	       memcmp(cast(ubyte*)s1.ptr, cast(ubyte*)s2.ptr, s1.length * int.sizeof) == 0;
    }
  4023f6:	c9                   	leaveq 
  4023f7:	c3                   	retq   

00000000004023f8 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4023f8:	55                   	push   %rbp
  4023f9:	48 89 e5             	mov    %rsp,%rbp
  4023fc:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  402403:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  402407:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  40240b:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40240f:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  402413:	e8 a4 6a 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	int[] s1 = *cast(int[]*)p1;
  402418:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40241c:	48 8b 02             	mov    (%rdx),%rax
  40241f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  402423:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402427:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	int[] s2 = *cast(int[]*)p2;
  40242b:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40242f:	48 8b 02             	mov    (%rdx),%rax
  402432:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  402436:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40243a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  40243e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402442:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  402446:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40244a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40244e:	73 08                	jae    402458 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x60>
	    len = s2.length;
  402450:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402454:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  402458:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40245f:	00 
  402460:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402464:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  402468:	0f 92 c0             	setb   %al
  40246b:	83 f0 01             	xor    $0x1,%eax
  40246e:	84 c0                	test   %al,%al
  402470:	0f 85 da 00 00 00    	jne    402550 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x158>
	{
	    int result = s1[u] - s2[u];
  402476:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40247a:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  402481:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402485:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  402489:	73 0d                	jae    402498 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0xa0>
  40248b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40248f:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  402496:	eb 22                	jmp    4024ba <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0xc2>
  402498:	48 c7 45 c0 16 00 00 	movq   $0x16,-0x40(%rbp)
  40249f:	00 
  4024a0:	48 c7 45 c8 a6 f9 40 	movq   $0x40f9a6,-0x38(%rbp)
  4024a7:	00 
  4024a8:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4024ac:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4024b0:	ba 30 00 00 00       	mov    $0x30,%edx
  4024b5:	e8 cb 84 00 00       	callq  40a985 <_d_array_bounds>
  4024ba:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4024c1:	48 c1 e0 02          	shl    $0x2,%rax
  4024c5:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  4024cc:	8b 00                	mov    (%rax),%eax
  4024ce:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  4024d4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4024d8:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  4024df:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4024e3:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4024e7:	73 0d                	jae    4024f6 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0xfe>
  4024e9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4024ed:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  4024f4:	eb 22                	jmp    402518 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x120>
  4024f6:	48 c7 45 d0 16 00 00 	movq   $0x16,-0x30(%rbp)
  4024fd:	00 
  4024fe:	48 c7 45 d8 a6 f9 40 	movq   $0x40f9a6,-0x28(%rbp)
  402505:	00 
  402506:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40250a:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40250e:	ba 30 00 00 00       	mov    $0x30,%edx
  402513:	e8 6d 84 00 00       	callq  40a985 <_d_array_bounds>
  402518:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40251f:	48 c1 e0 02          	shl    $0x2,%rax
  402523:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  40252a:	8b 00                	mov    (%rax),%eax
  40252c:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  402532:	29 c2                	sub    %eax,%edx
  402534:	89 d0                	mov    %edx,%eax
  402536:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (result)
  402539:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40253d:	74 08                	je     402547 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x14f>
		return result;
  40253f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  402542:	89 45 84             	mov    %eax,-0x7c(%rbp)
  402545:	eb 3c                	jmp    402583 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x18b>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int result = s1[u] - s2[u];
	    if (result)
  402547:	48 ff 45 f0          	incq   -0x10(%rbp)
  40254b:	e9 10 ff ff ff       	jmpq   402460 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x68>
		return result;
	}
	if (s1.length < s2.length)
  402550:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  402554:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402558:	48 39 c2             	cmp    %rax,%rdx
  40255b:	73 09                	jae    402566 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x16e>
	    return -1;
  40255d:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  402564:	eb 1d                	jmp    402583 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x18b>
	else if (s1.length > s2.length)
  402566:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40256a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40256e:	48 39 c2             	cmp    %rax,%rdx
  402571:	76 09                	jbe    40257c <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x184>
	    return 1;
  402573:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  40257a:	eb 07                	jmp    402583 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x18b>
	return 0;
  40257c:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  402583:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  402586:	c9                   	leaveq 
  402587:	c3                   	retq   

0000000000402588 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai5tsizeMFZm>:

    size_t tsize()
  402588:	55                   	push   %rbp
  402589:	48 89 e5             	mov    %rsp,%rbp
  40258c:	48 83 ec 10          	sub    $0x10,%rsp
  402590:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402594:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402598:	e8 1f 69 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (int[]).sizeof;
  40259d:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  4025a2:	c9                   	leaveq 
  4025a3:	c3                   	retq   

00000000004025a4 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai5flagsMFZk>:

    uint flags()
  4025a4:	55                   	push   %rbp
  4025a5:	48 89 e5             	mov    %rsp,%rbp
  4025a8:	48 83 ec 10          	sub    $0x10,%rsp
  4025ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4025b0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4025b4:	e8 03 69 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  4025b9:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  4025be:	c9                   	leaveq 
  4025bf:	c3                   	retq   

00000000004025c0 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai4nextMFZC8TypeInfo>:

    TypeInfo next()
  4025c0:	55                   	push   %rbp
  4025c1:	48 89 e5             	mov    %rsp,%rbp
  4025c4:	48 83 ec 10          	sub    $0x10,%rsp
  4025c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4025cc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4025d0:	e8 e7 68 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(int);
  4025d5:	48 c7 c0 50 09 41 00 	mov    $0x410950,%rax
    }
  4025dc:	c9                   	leaveq 
  4025dd:	c3                   	retq   

00000000004025de <_D3std8typeinfo7ti_Aint11TypeInfo_Ak8toStringMFZAa>:

// uint[]

class TypeInfo_Ak : TypeInfo_Ai
{
    char[] toString() { return "uint[]"; }
  4025de:	55                   	push   %rbp
  4025df:	48 89 e5             	mov    %rsp,%rbp
  4025e2:	53                   	push   %rbx
  4025e3:	48 83 ec 08          	sub    $0x8,%rsp
  4025e7:	48 89 fb             	mov    %rdi,%rbx
  4025ea:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4025ee:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4025f2:	e8 c5 68 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  4025f7:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  4025fe:	48 c7 43 08 50 fa 40 	movq   $0x40fa50,0x8(%rbx)
  402605:	00 
  402606:	48 89 d8             	mov    %rbx,%rax
  402609:	48 83 c4 08          	add    $0x8,%rsp
  40260d:	5b                   	pop    %rbx
  40260e:	c9                   	leaveq 
  40260f:	c3                   	retq   

0000000000402610 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  402610:	55                   	push   %rbp
  402611:	48 89 e5             	mov    %rsp,%rbp
  402614:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  40261b:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40261f:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  402623:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  402627:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40262b:	e8 8c 68 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	uint[] s1 = *cast(uint[]*)p1;
  402630:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  402634:	48 8b 02             	mov    (%rdx),%rax
  402637:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40263b:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40263f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	uint[] s2 = *cast(uint[]*)p2;
  402643:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  402647:	48 8b 02             	mov    (%rdx),%rax
  40264a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40264e:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402652:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  402656:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40265a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  40265e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402662:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  402666:	73 08                	jae    402670 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x60>
	    len = s2.length;
  402668:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40266c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  402670:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  402677:	00 
  402678:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40267c:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  402680:	0f 92 c0             	setb   %al
  402683:	83 f0 01             	xor    $0x1,%eax
  402686:	84 c0                	test   %al,%al
  402688:	0f 85 da 00 00 00    	jne    402768 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x158>
	{
	    int result = s1[u] - s2[u];
  40268e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  402692:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  402699:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40269d:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4026a1:	73 0d                	jae    4026b0 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0xa0>
  4026a3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4026a7:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  4026ae:	eb 22                	jmp    4026d2 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0xc2>
  4026b0:	48 c7 45 c0 16 00 00 	movq   $0x16,-0x40(%rbp)
  4026b7:	00 
  4026b8:	48 c7 45 c8 a6 f9 40 	movq   $0x40f9a6,-0x38(%rbp)
  4026bf:	00 
  4026c0:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4026c4:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4026c8:	ba 5b 00 00 00       	mov    $0x5b,%edx
  4026cd:	e8 b3 82 00 00       	callq  40a985 <_d_array_bounds>
  4026d2:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4026d9:	48 c1 e0 02          	shl    $0x2,%rax
  4026dd:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  4026e4:	8b 00                	mov    (%rax),%eax
  4026e6:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  4026ec:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4026f0:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  4026f7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4026fb:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4026ff:	73 0d                	jae    40270e <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0xfe>
  402701:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  402705:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  40270c:	eb 22                	jmp    402730 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x120>
  40270e:	48 c7 45 d0 16 00 00 	movq   $0x16,-0x30(%rbp)
  402715:	00 
  402716:	48 c7 45 d8 a6 f9 40 	movq   $0x40f9a6,-0x28(%rbp)
  40271d:	00 
  40271e:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  402722:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  402726:	ba 5b 00 00 00       	mov    $0x5b,%edx
  40272b:	e8 55 82 00 00       	callq  40a985 <_d_array_bounds>
  402730:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  402737:	48 c1 e0 02          	shl    $0x2,%rax
  40273b:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  402742:	8b 00                	mov    (%rax),%eax
  402744:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  40274a:	29 c2                	sub    %eax,%edx
  40274c:	89 d0                	mov    %edx,%eax
  40274e:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (result)
  402751:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  402755:	74 08                	je     40275f <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x14f>
		return result;
  402757:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40275a:	89 45 84             	mov    %eax,-0x7c(%rbp)
  40275d:	eb 3c                	jmp    40279b <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x18b>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int result = s1[u] - s2[u];
	    if (result)
  40275f:	48 ff 45 f0          	incq   -0x10(%rbp)
  402763:	e9 10 ff ff ff       	jmpq   402678 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x68>
		return result;
	}
	if (s1.length < s2.length)
  402768:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40276c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402770:	48 39 c2             	cmp    %rax,%rdx
  402773:	73 09                	jae    40277e <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x16e>
	    return -1;
  402775:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  40277c:	eb 1d                	jmp    40279b <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x18b>
	else if (s1.length > s2.length)
  40277e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  402782:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402786:	48 39 c2             	cmp    %rax,%rdx
  402789:	76 09                	jbe    402794 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x184>
	    return 1;
  40278b:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  402792:	eb 07                	jmp    40279b <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x18b>
	return 0;
  402794:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  40279b:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  40279e:	c9                   	leaveq 
  40279f:	c3                   	retq   

00000000004027a0 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak4nextMFZC8TypeInfo>:

    TypeInfo next()
  4027a0:	55                   	push   %rbp
  4027a1:	48 89 e5             	mov    %rsp,%rbp
  4027a4:	48 83 ec 10          	sub    $0x10,%rsp
  4027a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4027ac:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4027b0:	e8 07 67 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(uint);
  4027b5:	48 c7 c0 10 0f 41 00 	mov    $0x410f10,%rax
    }
  4027bc:	c9                   	leaveq 
  4027bd:	c3                   	retq   

00000000004027be <_D3std8typeinfo7ti_Aint11TypeInfo_Aw8toStringMFZAa>:

// dchar[]

class TypeInfo_Aw : TypeInfo_Ak
{
    char[] toString() { return "dchar[]"; }
  4027be:	55                   	push   %rbp
  4027bf:	48 89 e5             	mov    %rsp,%rbp
  4027c2:	53                   	push   %rbx
  4027c3:	48 83 ec 08          	sub    $0x8,%rsp
  4027c7:	48 89 fb             	mov    %rdi,%rbx
  4027ca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4027ce:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4027d2:	e8 e5 66 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  4027d7:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  4027de:	48 c7 43 08 f0 fa 40 	movq   $0x40faf0,0x8(%rbx)
  4027e5:	00 
  4027e6:	48 89 d8             	mov    %rbx,%rax
  4027e9:	48 83 c4 08          	add    $0x8,%rsp
  4027ed:	5b                   	pop    %rbx
  4027ee:	c9                   	leaveq 
  4027ef:	c3                   	retq   

00000000004027f0 <_D3std8typeinfo7ti_Aint11TypeInfo_Aw4nextMFZC8TypeInfo>:

    TypeInfo next()
  4027f0:	55                   	push   %rbp
  4027f1:	48 89 e5             	mov    %rsp,%rbp
  4027f4:	48 83 ec 10          	sub    $0x10,%rsp
  4027f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4027fc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402800:	e8 b7 66 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(dchar);
  402805:	48 c7 c0 f0 04 41 00 	mov    $0x4104f0,%rax
    }
  40280c:	c9                   	leaveq 
  40280d:	c3                   	retq   
  40280e:	90                   	nop    
  40280f:	90                   	nop    

0000000000402810 <_D3std8typeinfo8ti_Along11TypeInfo_Al8toStringMFZAa>:

// long[]

class TypeInfo_Al : TypeInfo
{
    char[] toString() { return "long[]"; }
  402810:	55                   	push   %rbp
  402811:	48 89 e5             	mov    %rsp,%rbp
  402814:	53                   	push   %rbx
  402815:	48 83 ec 08          	sub    $0x8,%rsp
  402819:	48 89 fb             	mov    %rdi,%rbx
  40281c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402820:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402824:	e8 93 66 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  402829:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  402830:	48 c7 43 08 a0 fb 40 	movq   $0x40fba0,0x8(%rbx)
  402837:	00 
  402838:	48 89 d8             	mov    %rbx,%rax
  40283b:	48 83 c4 08          	add    $0x8,%rsp
  40283f:	5b                   	pop    %rbx
  402840:	c9                   	leaveq 
  402841:	c3                   	retq   

0000000000402842 <_D3std8typeinfo8ti_Along11TypeInfo_Al7getHashMFPvZm>:

    hash_t getHash(void *p)
  402842:	55                   	push   %rbp
  402843:	48 89 e5             	mov    %rsp,%rbp
  402846:	48 83 ec 40          	sub    $0x40,%rsp
  40284a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40284e:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  402852:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  402856:	e8 61 66 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {	long[] s = *cast(long[]*)p;
  40285b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40285f:	48 8b 02             	mov    (%rdx),%rax
  402862:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  402866:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40286a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  40286e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  402872:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto str = s.ptr;
  402876:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40287a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  40287e:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  402885:	00 

	while (len)
  402886:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40288b:	0f 95 c0             	setne  %al
  40288e:	83 f0 01             	xor    $0x1,%eax
  402891:	84 c0                	test   %al,%al
  402893:	75 36                	jne    4028cb <_D3std8typeinfo8ti_Along11TypeInfo_Al7getHashMFPvZm+0x89>
	{
	    hash *= 9;
  402895:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  402899:	48 89 d0             	mov    %rdx,%rax
  40289c:	48 c1 e0 03          	shl    $0x3,%rax
  4028a0:	48 01 d0             	add    %rdx,%rax
  4028a3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += *cast(uint *)str + *(cast(uint *)str + 1);
  4028a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4028ab:	8b 10                	mov    (%rax),%edx
  4028ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4028b1:	48 83 c0 04          	add    $0x4,%rax
  4028b5:	8b 00                	mov    (%rax),%eax
  4028b7:	8d 04 02             	lea    (%rdx,%rax,1),%eax
  4028ba:	89 c0                	mov    %eax,%eax
  4028bc:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  4028c0:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
	    len--;
  4028c5:	48 ff 4d f8          	decq   -0x8(%rbp)
  4028c9:	eb bb                	jmp    402886 <_D3std8typeinfo8ti_Along11TypeInfo_Al7getHashMFPvZm+0x44>
	}

	return hash;
  4028cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  4028cf:	c9                   	leaveq 
  4028d0:	c3                   	retq   

00000000004028d1 <_D3std8typeinfo8ti_Along11TypeInfo_Al6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4028d1:	55                   	push   %rbp
  4028d2:	48 89 e5             	mov    %rsp,%rbp
  4028d5:	48 83 ec 40          	sub    $0x40,%rsp
  4028d9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4028dd:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4028e1:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4028e5:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4028e9:	e8 ce 65 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	long[] s1 = *cast(long[]*)p1;
  4028ee:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4028f2:	48 8b 02             	mov    (%rdx),%rax
  4028f5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4028f9:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4028fd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	long[] s2 = *cast(long[]*)p2;
  402901:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  402905:	48 8b 02             	mov    (%rdx),%rax
  402908:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40290c:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402910:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return s1.length == s2.length &&
  402914:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  402918:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40291c:	48 39 c2             	cmp    %rax,%rdx
  40291f:	75 2a                	jne    40294b <_D3std8typeinfo8ti_Along11TypeInfo_Al6equalsMFPvPvZi+0x7a>
  402921:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  402925:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  40292c:	00 
  40292d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402931:	48 89 c6             	mov    %rax,%rsi
  402934:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402938:	48 89 c7             	mov    %rax,%rdi
  40293b:	e8 b4 aa 00 00       	callq  40d3f4 <_D6kernel4core6system6memcmpFPvPvmZl>
  402940:	48 85 c0             	test   %rax,%rax
  402943:	75 06                	jne    40294b <_D3std8typeinfo8ti_Along11TypeInfo_Al6equalsMFPvPvZi+0x7a>
  402945:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
  402949:	eb 04                	jmp    40294f <_D3std8typeinfo8ti_Along11TypeInfo_Al6equalsMFPvPvZi+0x7e>
  40294b:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  40294f:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
	       memcmp(cast(ubyte*)s1.ptr, cast(ubyte*)s2.ptr, s1.length * long.sizeof) == 0;
    }
  402953:	c9                   	leaveq 
  402954:	c3                   	retq   

0000000000402955 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  402955:	55                   	push   %rbp
  402956:	48 89 e5             	mov    %rsp,%rbp
  402959:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  402960:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  402964:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  402968:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  40296f:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
  402973:	e8 44 65 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	long[] s1 = *cast(long[]*)p1;
  402978:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  40297c:	48 8b 02             	mov    (%rdx),%rax
  40297f:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  402983:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402987:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	long[] s2 = *cast(long[]*)p2;
  40298b:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  402992:	48 8b 02             	mov    (%rdx),%rax
  402995:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  402999:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40299d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	size_t len = s1.length;
  4029a1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4029a5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	if (s2.length < len)
  4029a9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4029ad:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  4029b1:	73 08                	jae    4029bb <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x66>
	    len = s2.length;
  4029b3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4029b7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	for (size_t u = 0; u < len; u++)
  4029bb:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4029c2:	00 
  4029c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4029c7:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  4029cb:	0f 92 c0             	setb   %al
  4029ce:	83 f0 01             	xor    $0x1,%eax
  4029d1:	84 c0                	test   %al,%al
  4029d3:	0f 85 a8 01 00 00    	jne    402b81 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x22c>
	{
	    if (s1[u] < s2[u])
  4029d9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4029dd:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  4029e4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4029e8:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  4029ec:	73 0d                	jae    4029fb <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0xa6>
  4029ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4029f2:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  4029f9:	eb 22                	jmp    402a1d <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0xc8>
  4029fb:	48 c7 45 b0 17 00 00 	movq   $0x17,-0x50(%rbp)
  402a02:	00 
  402a03:	48 c7 45 b8 a7 fb 40 	movq   $0x40fba7,-0x48(%rbp)
  402a0a:	00 
  402a0b:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  402a0f:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  402a13:	ba 30 00 00 00       	mov    $0x30,%edx
  402a18:	e8 68 7f 00 00       	callq  40a985 <_d_array_bounds>
  402a1d:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  402a24:	48 c1 e0 03          	shl    $0x3,%rax
  402a28:	48 03 85 20 ff ff ff 	add    -0xe0(%rbp),%rax
  402a2f:	48 8b 00             	mov    (%rax),%rax
  402a32:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  402a39:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  402a3d:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  402a44:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402a48:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  402a4c:	73 0d                	jae    402a5b <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x106>
  402a4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402a52:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  402a59:	eb 22                	jmp    402a7d <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x128>
  402a5b:	48 c7 45 c0 17 00 00 	movq   $0x17,-0x40(%rbp)
  402a62:	00 
  402a63:	48 c7 45 c8 a7 fb 40 	movq   $0x40fba7,-0x38(%rbp)
  402a6a:	00 
  402a6b:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  402a6f:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  402a73:	ba 30 00 00 00       	mov    $0x30,%edx
  402a78:	e8 08 7f 00 00       	callq  40a985 <_d_array_bounds>
  402a7d:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  402a84:	48 c1 e0 03          	shl    $0x3,%rax
  402a88:	48 03 85 38 ff ff ff 	add    -0xc8(%rbp),%rax
  402a8f:	48 8b 00             	mov    (%rax),%rax
  402a92:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
  402a99:	7d 0f                	jge    402aaa <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x155>
		return -1;
  402a9b:	c7 85 4c ff ff ff ff 	movl   $0xffffffff,-0xb4(%rbp)
  402aa2:	ff ff ff 
  402aa5:	e9 13 01 00 00       	jmpq   402bbd <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x268>
	    else if (s1[u] > s2[u])
  402aaa:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  402aae:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  402ab5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  402ab9:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  402abd:	73 0d                	jae    402acc <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x177>
  402abf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402ac3:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  402aca:	eb 22                	jmp    402aee <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x199>
  402acc:	48 c7 45 d0 17 00 00 	movq   $0x17,-0x30(%rbp)
  402ad3:	00 
  402ad4:	48 c7 45 d8 a7 fb 40 	movq   $0x40fba7,-0x28(%rbp)
  402adb:	00 
  402adc:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  402ae0:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  402ae4:	ba 32 00 00 00       	mov    $0x32,%edx
  402ae9:	e8 97 7e 00 00       	callq  40a985 <_d_array_bounds>
  402aee:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  402af5:	48 c1 e0 03          	shl    $0x3,%rax
  402af9:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  402b00:	48 8b 00             	mov    (%rax),%rax
  402b03:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  402b0a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  402b0e:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  402b15:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402b19:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  402b1d:	73 0d                	jae    402b2c <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x1d7>
  402b1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402b23:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  402b2a:	eb 22                	jmp    402b4e <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x1f9>
  402b2c:	48 c7 45 e0 17 00 00 	movq   $0x17,-0x20(%rbp)
  402b33:	00 
  402b34:	48 c7 45 e8 a7 fb 40 	movq   $0x40fba7,-0x18(%rbp)
  402b3b:	00 
  402b3c:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  402b40:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  402b44:	ba 32 00 00 00       	mov    $0x32,%edx
  402b49:	e8 37 7e 00 00       	callq  40a985 <_d_array_bounds>
  402b4e:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  402b55:	48 c1 e0 03          	shl    $0x3,%rax
  402b59:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  402b60:	48 8b 00             	mov    (%rax),%rax
  402b63:	48 39 85 60 ff ff ff 	cmp    %rax,-0xa0(%rbp)
  402b6a:	7e 0c                	jle    402b78 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x223>
		return 1;
  402b6c:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  402b73:	00 00 00 
  402b76:	eb 45                	jmp    402bbd <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x268>

	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    if (s1[u] < s2[u])
  402b78:	48 ff 45 f8          	incq   -0x8(%rbp)
  402b7c:	e9 42 fe ff ff       	jmpq   4029c3 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x6e>
		return -1;
	    else if (s1[u] > s2[u])
		return 1;
	}
	if (s1.length < s2.length)
  402b81:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  402b85:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402b89:	48 39 c2             	cmp    %rax,%rdx
  402b8c:	73 0c                	jae    402b9a <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x245>
	    return -1;
  402b8e:	c7 85 4c ff ff ff ff 	movl   $0xffffffff,-0xb4(%rbp)
  402b95:	ff ff ff 
  402b98:	eb 23                	jmp    402bbd <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x268>
	else if (s1.length > s2.length)
  402b9a:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  402b9e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402ba2:	48 39 c2             	cmp    %rax,%rdx
  402ba5:	76 0c                	jbe    402bb3 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x25e>
	    return 1;
  402ba7:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  402bae:	00 00 00 
  402bb1:	eb 0a                	jmp    402bbd <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x268>
	return 0;
  402bb3:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  402bba:	00 00 00 
  402bbd:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
    }
  402bc3:	c9                   	leaveq 
  402bc4:	c3                   	retq   

0000000000402bc5 <_D3std8typeinfo8ti_Along11TypeInfo_Al5tsizeMFZm>:

    size_t tsize()
  402bc5:	55                   	push   %rbp
  402bc6:	48 89 e5             	mov    %rsp,%rbp
  402bc9:	48 83 ec 10          	sub    $0x10,%rsp
  402bcd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402bd1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402bd5:	e8 e2 62 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (long[]).sizeof;
  402bda:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  402bdf:	c9                   	leaveq 
  402be0:	c3                   	retq   

0000000000402be1 <_D3std8typeinfo8ti_Along11TypeInfo_Al5flagsMFZk>:

    uint flags()
  402be1:	55                   	push   %rbp
  402be2:	48 89 e5             	mov    %rsp,%rbp
  402be5:	48 83 ec 10          	sub    $0x10,%rsp
  402be9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402bed:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402bf1:	e8 c6 62 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  402bf6:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  402bfb:	c9                   	leaveq 
  402bfc:	c3                   	retq   

0000000000402bfd <_D3std8typeinfo8ti_Along11TypeInfo_Al4nextMFZC8TypeInfo>:

    TypeInfo next()
  402bfd:	55                   	push   %rbp
  402bfe:	48 89 e5             	mov    %rsp,%rbp
  402c01:	48 83 ec 10          	sub    $0x10,%rsp
  402c05:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402c09:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402c0d:	e8 aa 62 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(long);
  402c12:	48 c7 c0 d0 0a 41 00 	mov    $0x410ad0,%rax
    }
  402c19:	c9                   	leaveq 
  402c1a:	c3                   	retq   

0000000000402c1b <_D3std8typeinfo8ti_Along11TypeInfo_Am8toStringMFZAa>:

// ulong[]

class TypeInfo_Am : TypeInfo_Al
{
    char[] toString() { return "ulong[]"; }
  402c1b:	55                   	push   %rbp
  402c1c:	48 89 e5             	mov    %rsp,%rbp
  402c1f:	53                   	push   %rbx
  402c20:	48 83 ec 08          	sub    $0x8,%rsp
  402c24:	48 89 fb             	mov    %rdi,%rbx
  402c27:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402c2b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402c2f:	e8 88 62 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  402c34:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  402c3b:	48 c7 43 08 50 fc 40 	movq   $0x40fc50,0x8(%rbx)
  402c42:	00 
  402c43:	48 89 d8             	mov    %rbx,%rax
  402c46:	48 83 c4 08          	add    $0x8,%rsp
  402c4a:	5b                   	pop    %rbx
  402c4b:	c9                   	leaveq 
  402c4c:	c3                   	retq   

0000000000402c4d <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  402c4d:	55                   	push   %rbp
  402c4e:	48 89 e5             	mov    %rsp,%rbp
  402c51:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  402c58:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  402c5c:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  402c60:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  402c67:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
  402c6b:	e8 4c 62 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ulong[] s1 = *cast(ulong[]*)p1;
  402c70:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  402c74:	48 8b 02             	mov    (%rdx),%rax
  402c77:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  402c7b:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402c7f:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	ulong[] s2 = *cast(ulong[]*)p2;
  402c83:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  402c8a:	48 8b 02             	mov    (%rdx),%rax
  402c8d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  402c91:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402c95:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	size_t len = s1.length;
  402c99:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  402c9d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	if (s2.length < len)
  402ca1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402ca5:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  402ca9:	73 08                	jae    402cb3 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x66>
	    len = s2.length;
  402cab:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402caf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	for (size_t u = 0; u < len; u++)
  402cb3:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  402cba:	00 
  402cbb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402cbf:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  402cc3:	0f 92 c0             	setb   %al
  402cc6:	83 f0 01             	xor    $0x1,%eax
  402cc9:	84 c0                	test   %al,%al
  402ccb:	0f 85 a8 01 00 00    	jne    402e79 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x22c>
	{
	    if (s1[u] < s2[u])
  402cd1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  402cd5:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  402cdc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  402ce0:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  402ce4:	73 0d                	jae    402cf3 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0xa6>
  402ce6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402cea:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  402cf1:	eb 22                	jmp    402d15 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0xc8>
  402cf3:	48 c7 45 b0 17 00 00 	movq   $0x17,-0x50(%rbp)
  402cfa:	00 
  402cfb:	48 c7 45 b8 a7 fb 40 	movq   $0x40fba7,-0x48(%rbp)
  402d02:	00 
  402d03:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  402d07:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  402d0b:	ba 5d 00 00 00       	mov    $0x5d,%edx
  402d10:	e8 70 7c 00 00       	callq  40a985 <_d_array_bounds>
  402d15:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  402d1c:	48 c1 e0 03          	shl    $0x3,%rax
  402d20:	48 03 85 20 ff ff ff 	add    -0xe0(%rbp),%rax
  402d27:	48 8b 00             	mov    (%rax),%rax
  402d2a:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  402d31:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  402d35:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  402d3c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402d40:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  402d44:	73 0d                	jae    402d53 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x106>
  402d46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402d4a:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  402d51:	eb 22                	jmp    402d75 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x128>
  402d53:	48 c7 45 c0 17 00 00 	movq   $0x17,-0x40(%rbp)
  402d5a:	00 
  402d5b:	48 c7 45 c8 a7 fb 40 	movq   $0x40fba7,-0x38(%rbp)
  402d62:	00 
  402d63:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  402d67:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  402d6b:	ba 5d 00 00 00       	mov    $0x5d,%edx
  402d70:	e8 10 7c 00 00       	callq  40a985 <_d_array_bounds>
  402d75:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  402d7c:	48 c1 e0 03          	shl    $0x3,%rax
  402d80:	48 03 85 38 ff ff ff 	add    -0xc8(%rbp),%rax
  402d87:	48 8b 00             	mov    (%rax),%rax
  402d8a:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
  402d91:	73 0f                	jae    402da2 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x155>
		return -1;
  402d93:	c7 85 4c ff ff ff ff 	movl   $0xffffffff,-0xb4(%rbp)
  402d9a:	ff ff ff 
  402d9d:	e9 13 01 00 00       	jmpq   402eb5 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x268>
	    else if (s1[u] > s2[u])
  402da2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  402da6:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  402dad:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  402db1:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  402db5:	73 0d                	jae    402dc4 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x177>
  402db7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402dbb:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  402dc2:	eb 22                	jmp    402de6 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x199>
  402dc4:	48 c7 45 d0 17 00 00 	movq   $0x17,-0x30(%rbp)
  402dcb:	00 
  402dcc:	48 c7 45 d8 a7 fb 40 	movq   $0x40fba7,-0x28(%rbp)
  402dd3:	00 
  402dd4:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  402dd8:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  402ddc:	ba 5f 00 00 00       	mov    $0x5f,%edx
  402de1:	e8 9f 7b 00 00       	callq  40a985 <_d_array_bounds>
  402de6:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  402ded:	48 c1 e0 03          	shl    $0x3,%rax
  402df1:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  402df8:	48 8b 00             	mov    (%rax),%rax
  402dfb:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  402e02:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  402e06:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  402e0d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402e11:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  402e15:	73 0d                	jae    402e24 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x1d7>
  402e17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402e1b:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  402e22:	eb 22                	jmp    402e46 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x1f9>
  402e24:	48 c7 45 e0 17 00 00 	movq   $0x17,-0x20(%rbp)
  402e2b:	00 
  402e2c:	48 c7 45 e8 a7 fb 40 	movq   $0x40fba7,-0x18(%rbp)
  402e33:	00 
  402e34:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  402e38:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  402e3c:	ba 5f 00 00 00       	mov    $0x5f,%edx
  402e41:	e8 3f 7b 00 00       	callq  40a985 <_d_array_bounds>
  402e46:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  402e4d:	48 c1 e0 03          	shl    $0x3,%rax
  402e51:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  402e58:	48 8b 00             	mov    (%rax),%rax
  402e5b:	48 39 85 60 ff ff ff 	cmp    %rax,-0xa0(%rbp)
  402e62:	76 0c                	jbe    402e70 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x223>
		return 1;
  402e64:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  402e6b:	00 00 00 
  402e6e:	eb 45                	jmp    402eb5 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x268>

	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    if (s1[u] < s2[u])
  402e70:	48 ff 45 f8          	incq   -0x8(%rbp)
  402e74:	e9 42 fe ff ff       	jmpq   402cbb <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x6e>
		return -1;
	    else if (s1[u] > s2[u])
		return 1;
	}
	if (s1.length < s2.length)
  402e79:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  402e7d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402e81:	48 39 c2             	cmp    %rax,%rdx
  402e84:	73 0c                	jae    402e92 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x245>
	    return -1;
  402e86:	c7 85 4c ff ff ff ff 	movl   $0xffffffff,-0xb4(%rbp)
  402e8d:	ff ff ff 
  402e90:	eb 23                	jmp    402eb5 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x268>
	else if (s1.length > s2.length)
  402e92:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  402e96:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402e9a:	48 39 c2             	cmp    %rax,%rdx
  402e9d:	76 0c                	jbe    402eab <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x25e>
	    return 1;
  402e9f:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  402ea6:	00 00 00 
  402ea9:	eb 0a                	jmp    402eb5 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x268>
	return 0;
  402eab:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  402eb2:	00 00 00 
  402eb5:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
    }
  402ebb:	c9                   	leaveq 
  402ebc:	c3                   	retq   

0000000000402ebd <_D3std8typeinfo8ti_Along11TypeInfo_Am4nextMFZC8TypeInfo>:

    TypeInfo next()
  402ebd:	55                   	push   %rbp
  402ebe:	48 89 e5             	mov    %rsp,%rbp
  402ec1:	48 83 ec 10          	sub    $0x10,%rsp
  402ec5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402ec9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402ecd:	e8 ea 5f 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(ulong);
  402ed2:	48 c7 c0 d0 0f 41 00 	mov    $0x410fd0,%rax
    }
  402ed9:	c9                   	leaveq 
  402eda:	c3                   	retq   
  402edb:	90                   	nop    

0000000000402edc <_D3std8typeinfo8ti_Areal11TypeInfo_Ae8toStringMFZAa>:

// real[]

class TypeInfo_Ae : TypeInfo
{
    char[] toString() { return "real[]"; }
  402edc:	55                   	push   %rbp
  402edd:	48 89 e5             	mov    %rsp,%rbp
  402ee0:	53                   	push   %rbx
  402ee1:	48 83 ec 08          	sub    $0x8,%rsp
  402ee5:	48 89 fb             	mov    %rdi,%rbx
  402ee8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402eec:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402ef0:	e8 c7 5f 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  402ef5:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  402efc:	48 c7 43 08 00 fd 40 	movq   $0x40fd00,0x8(%rbx)
  402f03:	00 
  402f04:	48 89 d8             	mov    %rbx,%rax
  402f07:	48 83 c4 08          	add    $0x8,%rsp
  402f0b:	5b                   	pop    %rbx
  402f0c:	c9                   	leaveq 
  402f0d:	c3                   	retq   

0000000000402f0e <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7getHashMFPvZm>:

    hash_t getHash(void *p)
  402f0e:	55                   	push   %rbp
  402f0f:	48 89 e5             	mov    %rsp,%rbp
  402f12:	48 83 ec 40          	sub    $0x40,%rsp
  402f16:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  402f1a:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  402f1e:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  402f22:	e8 95 5f 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {	real[] s = *cast(real[]*)p;
  402f27:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  402f2b:	48 8b 02             	mov    (%rdx),%rax
  402f2e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  402f32:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402f36:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  402f3a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  402f3e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto str = s.ptr;
  402f42:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402f46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  402f4a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  402f51:	00 

	while (len)
  402f52:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  402f57:	0f 95 c0             	setne  %al
  402f5a:	83 f0 01             	xor    $0x1,%eax
  402f5d:	84 c0                	test   %al,%al
  402f5f:	75 5e                	jne    402fbf <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7getHashMFPvZm+0xb1>
	{
	    hash *= 9;
  402f61:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  402f65:	48 89 d0             	mov    %rdx,%rax
  402f68:	48 c1 e0 03          	shl    $0x3,%rax
  402f6c:	48 01 d0             	add    %rdx,%rax
  402f6f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[0];
  402f73:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  402f77:	b8 00 00 00 00       	mov    $0x0,%eax
  402f7c:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  402f80:	8b 00                	mov    (%rax),%eax
  402f82:	89 c0                	mov    %eax,%eax
  402f84:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[1];
  402f88:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  402f8c:	b8 04 00 00 00       	mov    $0x4,%eax
  402f91:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  402f95:	8b 00                	mov    (%rax),%eax
  402f97:	89 c0                	mov    %eax,%eax
  402f99:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(ushort *)str)[4];
  402f9d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  402fa1:	b8 08 00 00 00       	mov    $0x8,%eax
  402fa6:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  402faa:	0f b7 00             	movzwl (%rax),%eax
  402fad:	0f b7 c0             	movzwl %ax,%eax
  402fb0:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  402fb4:	48 83 45 f0 10       	addq   $0x10,-0x10(%rbp)
	    len--;
  402fb9:	48 ff 4d f8          	decq   -0x8(%rbp)
  402fbd:	eb 93                	jmp    402f52 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7getHashMFPvZm+0x44>
	}

	return hash;
  402fbf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  402fc3:	c9                   	leaveq 
  402fc4:	c3                   	retq   

0000000000402fc5 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  402fc5:	55                   	push   %rbp
  402fc6:	48 89 e5             	mov    %rsp,%rbp
  402fc9:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  402fd0:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  402fd4:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  402fd8:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  402fdc:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  402fe0:	e8 d7 5e 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	real[] s1 = *cast(real[]*)p1;
  402fe5:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  402fe9:	48 8b 02             	mov    (%rdx),%rax
  402fec:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  402ff0:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402ff4:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	real[] s2 = *cast(real[]*)p2;
  402ff8:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  402ffc:	48 8b 02             	mov    (%rdx),%rax
  402fff:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  403003:	48 8b 42 08          	mov    0x8(%rdx),%rax
  403007:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  40300b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40300f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  403013:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403017:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40301b:	74 0f                	je     40302c <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x67>
	    return 0;
  40301d:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  403024:	00 00 00 
  403027:	e9 11 01 00 00       	jmpq   40313d <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x178>
	for (size_t u = 0; u < len; u++)
  40302c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  403033:	00 
  403034:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403038:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40303c:	0f 92 c0             	setb   %al
  40303f:	83 f0 01             	xor    $0x1,%eax
  403042:	84 c0                	test   %al,%al
  403044:	0f 85 e9 00 00 00    	jne    403133 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x16e>
	{
	    int c = TypeInfo_e._equals(s1[u], s2[u]);
  40304a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40304e:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  403055:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403059:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40305d:	73 0d                	jae    40306c <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0xa7>
  40305f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403063:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  40306a:	eb 22                	jmp    40308e <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0xc9>
  40306c:	48 c7 45 c0 17 00 00 	movq   $0x17,-0x40(%rbp)
  403073:	00 
  403074:	48 c7 45 c8 07 fd 40 	movq   $0x40fd07,-0x38(%rbp)
  40307b:	00 
  40307c:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  403080:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  403084:	ba 3f 00 00 00       	mov    $0x3f,%edx
  403089:	e8 f7 78 00 00       	callq  40a985 <_d_array_bounds>
  40308e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  403095:	48 c1 e0 04          	shl    $0x4,%rax
  403099:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  4030a0:	db 28                	fldt   (%rax)
  4030a2:	db bd 60 ff ff ff    	fstpt  -0xa0(%rbp)
  4030a8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4030ac:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4030b3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4030b7:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4030bb:	73 0a                	jae    4030c7 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x102>
  4030bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4030c1:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  4030c5:	eb 22                	jmp    4030e9 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x124>
  4030c7:	48 c7 45 d0 17 00 00 	movq   $0x17,-0x30(%rbp)
  4030ce:	00 
  4030cf:	48 c7 45 d8 07 fd 40 	movq   $0x40fd07,-0x28(%rbp)
  4030d6:	00 
  4030d7:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4030db:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4030df:	ba 3f 00 00 00       	mov    $0x3f,%edx
  4030e4:	e8 9c 78 00 00       	callq  40a985 <_d_array_bounds>
  4030e9:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  4030ed:	48 c1 e0 04          	shl    $0x4,%rax
  4030f1:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  4030f8:	8b 50 08             	mov    0x8(%rax),%edx
  4030fb:	48 8b 00             	mov    (%rax),%rax
  4030fe:	db ad 60 ff ff ff    	fldt   -0xa0(%rbp)
  403104:	db 7c 24 10          	fstpt  0x10(%rsp)
  403108:	48 89 04 24          	mov    %rax,(%rsp)
  40310c:	89 54 24 08          	mov    %edx,0x8(%rsp)
  403110:	e8 5c 22 00 00       	callq  405371 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi>
  403115:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  403118:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40311c:	75 0c                	jne    40312a <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x165>
		return 0;
  40311e:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  403125:	00 00 00 
  403128:	eb 13                	jmp    40313d <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x178>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_e._equals(s1[u], s2[u]);
	    if (c == 0)
  40312a:	48 ff 45 f0          	incq   -0x10(%rbp)
  40312e:	e9 01 ff ff ff       	jmpq   403034 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  403133:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  40313a:	00 00 00 
  40313d:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
    }
  403143:	c9                   	leaveq 
  403144:	c3                   	retq   

0000000000403145 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  403145:	55                   	push   %rbp
  403146:	48 89 e5             	mov    %rsp,%rbp
  403149:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  403150:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  403154:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  403158:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40315c:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  403160:	e8 57 5d 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	real[] s1 = *cast(real[]*)p1;
  403165:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  403169:	48 8b 02             	mov    (%rdx),%rax
  40316c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  403170:	48 8b 42 08          	mov    0x8(%rdx),%rax
  403174:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	real[] s2 = *cast(real[]*)p2;
  403178:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40317c:	48 8b 02             	mov    (%rdx),%rax
  40317f:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  403183:	48 8b 42 08          	mov    0x8(%rdx),%rax
  403187:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  40318b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40318f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  403193:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403197:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40319b:	73 08                	jae    4031a5 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x60>
	    len = s2.length;
  40319d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4031a1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  4031a5:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4031ac:	00 
  4031ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4031b1:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4031b5:	0f 92 c0             	setb   %al
  4031b8:	83 f0 01             	xor    $0x1,%eax
  4031bb:	84 c0                	test   %al,%al
  4031bd:	0f 85 eb 00 00 00    	jne    4032ae <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x169>
	{
	    int c = TypeInfo_e._compare(s1[u], s2[u]);
  4031c3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4031c7:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  4031ce:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4031d2:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4031d6:	73 0d                	jae    4031e5 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0xa0>
  4031d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4031dc:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  4031e3:	eb 22                	jmp    403207 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0xc2>
  4031e5:	48 c7 45 c0 17 00 00 	movq   $0x17,-0x40(%rbp)
  4031ec:	00 
  4031ed:	48 c7 45 c8 07 fd 40 	movq   $0x40fd07,-0x38(%rbp)
  4031f4:	00 
  4031f5:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4031f9:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4031fd:	ba 50 00 00 00       	mov    $0x50,%edx
  403202:	e8 7e 77 00 00       	callq  40a985 <_d_array_bounds>
  403207:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  40320e:	48 c1 e0 04          	shl    $0x4,%rax
  403212:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  403219:	db 28                	fldt   (%rax)
  40321b:	db bd 60 ff ff ff    	fstpt  -0xa0(%rbp)
  403221:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  403225:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  40322c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403230:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  403234:	73 0d                	jae    403243 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0xfe>
  403236:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40323a:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  403241:	eb 22                	jmp    403265 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x120>
  403243:	48 c7 45 d0 17 00 00 	movq   $0x17,-0x30(%rbp)
  40324a:	00 
  40324b:	48 c7 45 d8 07 fd 40 	movq   $0x40fd07,-0x28(%rbp)
  403252:	00 
  403253:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  403257:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40325b:	ba 50 00 00 00       	mov    $0x50,%edx
  403260:	e8 20 77 00 00       	callq  40a985 <_d_array_bounds>
  403265:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40326c:	48 c1 e0 04          	shl    $0x4,%rax
  403270:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  403277:	8b 50 08             	mov    0x8(%rax),%edx
  40327a:	48 8b 00             	mov    (%rax),%rax
  40327d:	db ad 60 ff ff ff    	fldt   -0xa0(%rbp)
  403283:	db 7c 24 10          	fstpt  0x10(%rsp)
  403287:	48 89 04 24          	mov    %rax,(%rsp)
  40328b:	89 54 24 08          	mov    %edx,0x8(%rsp)
  40328f:	e8 35 21 00 00       	callq  4053c9 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi>
  403294:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  403297:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40329b:	74 08                	je     4032a5 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x160>
		return c;
  40329d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4032a0:	89 45 84             	mov    %eax,-0x7c(%rbp)
  4032a3:	eb 3c                	jmp    4032e1 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x19c>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_e._compare(s1[u], s2[u]);
	    if (c)
  4032a5:	48 ff 45 f0          	incq   -0x10(%rbp)
  4032a9:	e9 ff fe ff ff       	jmpq   4031ad <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  4032ae:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4032b2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4032b6:	48 39 c2             	cmp    %rax,%rdx
  4032b9:	73 09                	jae    4032c4 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x17f>
	    return -1;
  4032bb:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  4032c2:	eb 1d                	jmp    4032e1 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x19c>
	else if (s1.length > s2.length)
  4032c4:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4032c8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4032cc:	48 39 c2             	cmp    %rax,%rdx
  4032cf:	76 09                	jbe    4032da <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x195>
	    return 1;
  4032d1:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  4032d8:	eb 07                	jmp    4032e1 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x19c>
	return 0;
  4032da:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  4032e1:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  4032e4:	c9                   	leaveq 
  4032e5:	c3                   	retq   

00000000004032e6 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae5tsizeMFZm>:

    size_t tsize()
  4032e6:	55                   	push   %rbp
  4032e7:	48 89 e5             	mov    %rsp,%rbp
  4032ea:	48 83 ec 10          	sub    $0x10,%rsp
  4032ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4032f2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4032f6:	e8 c1 5b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (real[]).sizeof;
  4032fb:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  403300:	c9                   	leaveq 
  403301:	c3                   	retq   

0000000000403302 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae5flagsMFZk>:

    uint flags()
  403302:	55                   	push   %rbp
  403303:	48 89 e5             	mov    %rsp,%rbp
  403306:	48 83 ec 10          	sub    $0x10,%rsp
  40330a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40330e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403312:	e8 a5 5b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  403317:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  40331c:	c9                   	leaveq 
  40331d:	c3                   	retq   

000000000040331e <_D3std8typeinfo8ti_Areal11TypeInfo_Ae4nextMFZC8TypeInfo>:

    TypeInfo next()
  40331e:	55                   	push   %rbp
  40331f:	48 89 e5             	mov    %rsp,%rbp
  403322:	48 83 ec 10          	sub    $0x10,%rsp
  403326:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40332a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40332e:	e8 89 5b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(real);
  403333:	48 c7 c0 30 0c 41 00 	mov    $0x410c30,%rax
    }
  40333a:	c9                   	leaveq 
  40333b:	c3                   	retq   

000000000040333c <_D3std8typeinfo8ti_Areal11TypeInfo_Aj8toStringMFZAa>:

// ireal[]

class TypeInfo_Aj : TypeInfo_Ae
{
    char[] toString() { return "ireal[]"; }
  40333c:	55                   	push   %rbp
  40333d:	48 89 e5             	mov    %rsp,%rbp
  403340:	53                   	push   %rbx
  403341:	48 83 ec 08          	sub    $0x8,%rsp
  403345:	48 89 fb             	mov    %rdi,%rbx
  403348:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40334c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  403350:	e8 67 5b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  403355:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  40335c:	48 c7 43 08 b0 fd 40 	movq   $0x40fdb0,0x8(%rbx)
  403363:	00 
  403364:	48 89 d8             	mov    %rbx,%rax
  403367:	48 83 c4 08          	add    $0x8,%rsp
  40336b:	5b                   	pop    %rbx
  40336c:	c9                   	leaveq 
  40336d:	c3                   	retq   

000000000040336e <_D3std8typeinfo8ti_Areal11TypeInfo_Aj4nextMFZC8TypeInfo>:

    TypeInfo next()
  40336e:	55                   	push   %rbp
  40336f:	48 89 e5             	mov    %rsp,%rbp
  403372:	48 83 ec 10          	sub    $0x10,%rsp
  403376:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40337a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40337e:	e8 39 5b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(ireal);
  403383:	48 c7 c0 10 0a 41 00 	mov    $0x410a10,%rax
    }
  40338a:	c9                   	leaveq 
  40338b:	c3                   	retq   

000000000040338c <_D3std8typeinfo9ti_Ashort11TypeInfo_As8toStringMFZAa>:

// short[]

class TypeInfo_As : TypeInfo
{
    char[] toString() { return "short[]"; }
  40338c:	55                   	push   %rbp
  40338d:	48 89 e5             	mov    %rsp,%rbp
  403390:	53                   	push   %rbx
  403391:	48 83 ec 08          	sub    $0x8,%rsp
  403395:	48 89 fb             	mov    %rdi,%rbx
  403398:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40339c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4033a0:	e8 17 5b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  4033a5:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  4033ac:	48 c7 43 08 60 fe 40 	movq   $0x40fe60,0x8(%rbx)
  4033b3:	00 
  4033b4:	48 89 d8             	mov    %rbx,%rax
  4033b7:	48 83 c4 08          	add    $0x8,%rsp
  4033bb:	5b                   	pop    %rbx
  4033bc:	c9                   	leaveq 
  4033bd:	c3                   	retq   

00000000004033be <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm>:

    hash_t getHash(void *p)
  4033be:	55                   	push   %rbp
  4033bf:	48 89 e5             	mov    %rsp,%rbp
  4033c2:	48 83 ec 50          	sub    $0x50,%rsp
  4033c6:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  4033ca:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  4033ce:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4033d2:	e8 e5 5a 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {	short[] s = *cast(short[]*)p;
  4033d7:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4033db:	48 8b 02             	mov    (%rdx),%rax
  4033de:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4033e2:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4033e6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  4033ea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4033ee:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	short *str = s.ptr;
  4033f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4033f6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  4033fa:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  403401:	00 

	while (1)
  403402:	b8 00 00 00 00       	mov    $0x0,%eax
  403407:	84 c0                	test   %al,%al
  403409:	75 76                	jne    403481 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0xc3>
		default:
		    hash *= 9;
		    hash += *cast(uint *)str;
		    str += 2;
		    len -= 2;
		    break;
  40340b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40340f:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  403413:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  403418:	74 09                	je     403423 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0x65>
  40341a:	48 83 7d b0 01       	cmpq   $0x1,-0x50(%rbp)
  40341f:	74 0c                	je     40342d <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0x6f>
  403421:	eb 34                	jmp    403457 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0x99>
	while (1)
	{
	    switch (len)
	    {
		case 0:
		    return hash;
  403423:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403427:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40342b:	eb 5c                	jmp    403489 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0xcb>

		case 1:
		    hash *= 9;
  40342d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  403431:	48 89 d0             	mov    %rdx,%rax
  403434:	48 c1 e0 03          	shl    $0x3,%rax
  403438:	48 01 d0             	add    %rdx,%rax
  40343b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += *cast(ushort *)str;
  40343f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403443:	0f b7 00             	movzwl (%rax),%eax
  403446:	0f b7 c0             	movzwl %ax,%eax
  403449:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		    return hash;
  40344d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403451:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  403455:	eb 32                	jmp    403489 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0xcb>

		default:
		    hash *= 9;
  403457:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40345b:	48 89 d0             	mov    %rdx,%rax
  40345e:	48 c1 e0 03          	shl    $0x3,%rax
  403462:	48 01 d0             	add    %rdx,%rax
  403465:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += *cast(uint *)str;
  403469:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40346d:	8b 00                	mov    (%rax),%eax
  40346f:	89 c0                	mov    %eax,%eax
  403471:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		    str += 2;
  403475:	48 83 45 f0 04       	addq   $0x4,-0x10(%rbp)
		    len -= 2;
  40347a:	48 83 6d f8 02       	subq   $0x2,-0x8(%rbp)
		    break;
  40347f:	eb 81                	jmp    403402 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0x44>
	    }
	}

	return hash;
  403481:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403485:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  403489:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    }
  40348d:	c9                   	leaveq 
  40348e:	c3                   	retq   

000000000040348f <_D3std8typeinfo9ti_Ashort11TypeInfo_As6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  40348f:	55                   	push   %rbp
  403490:	48 89 e5             	mov    %rsp,%rbp
  403493:	48 83 ec 40          	sub    $0x40,%rsp
  403497:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40349b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40349f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4034a3:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4034a7:	e8 10 5a 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	short[] s1 = *cast(short[]*)p1;
  4034ac:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4034b0:	48 8b 02             	mov    (%rdx),%rax
  4034b3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4034b7:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4034bb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	short[] s2 = *cast(short[]*)p2;
  4034bf:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4034c3:	48 8b 02             	mov    (%rdx),%rax
  4034c6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4034ca:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4034ce:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return s1.length == s2.length &&
  4034d2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4034d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4034da:	48 39 c2             	cmp    %rax,%rdx
  4034dd:	75 26                	jne    403505 <_D3std8typeinfo9ti_Ashort11TypeInfo_As6equalsMFPvPvZi+0x76>
  4034df:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4034e3:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  4034e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4034eb:	48 89 c6             	mov    %rax,%rsi
  4034ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4034f2:	48 89 c7             	mov    %rax,%rdi
  4034f5:	e8 fa 9e 00 00       	callq  40d3f4 <_D6kernel4core6system6memcmpFPvPvmZl>
  4034fa:	48 85 c0             	test   %rax,%rax
  4034fd:	75 06                	jne    403505 <_D3std8typeinfo9ti_Ashort11TypeInfo_As6equalsMFPvPvZi+0x76>
  4034ff:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
  403503:	eb 04                	jmp    403509 <_D3std8typeinfo9ti_Ashort11TypeInfo_As6equalsMFPvPvZi+0x7a>
  403505:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  403509:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
	       memcmp(cast(ubyte*)s1.ptr, cast(ubyte*)s2.ptr, s1.length * short.sizeof) == 0;
    }
  40350d:	c9                   	leaveq 
  40350e:	c3                   	retq   

000000000040350f <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  40350f:	55                   	push   %rbp
  403510:	48 89 e5             	mov    %rsp,%rbp
  403513:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  40351a:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40351e:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  403522:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  403526:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40352a:	e8 8d 59 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	short[] s1 = *cast(short[]*)p1;
  40352f:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  403533:	48 8b 02             	mov    (%rdx),%rax
  403536:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40353a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40353e:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	short[] s2 = *cast(short[]*)p2;
  403542:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  403546:	48 8b 02             	mov    (%rdx),%rax
  403549:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40354d:	48 8b 42 08          	mov    0x8(%rdx),%rax
  403551:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  403555:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403559:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  40355d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403561:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  403565:	73 08                	jae    40356f <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x60>
	    len = s2.length;
  403567:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40356b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  40356f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  403576:	00 
  403577:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40357b:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40357f:	0f 92 c0             	setb   %al
  403582:	83 f0 01             	xor    $0x1,%eax
  403585:	84 c0                	test   %al,%al
  403587:	0f 85 dc 00 00 00    	jne    403669 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x15a>
	{
	    int result = s1[u] - s2[u];
  40358d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  403591:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  403598:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40359c:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4035a0:	73 0d                	jae    4035af <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0xa0>
  4035a2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4035a6:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  4035ad:	eb 22                	jmp    4035d1 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0xc2>
  4035af:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  4035b6:	00 
  4035b7:	48 c7 45 c8 68 fe 40 	movq   $0x40fe68,-0x38(%rbp)
  4035be:	00 
  4035bf:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4035c3:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4035c7:	ba 3d 00 00 00       	mov    $0x3d,%edx
  4035cc:	e8 b4 73 00 00       	callq  40a985 <_d_array_bounds>
  4035d1:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4035d8:	48 01 c0             	add    %rax,%rax
  4035db:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  4035e2:	0f b7 00             	movzwl (%rax),%eax
  4035e5:	98                   	cwtl   
  4035e6:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  4035ec:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4035f0:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  4035f7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4035fb:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4035ff:	73 0d                	jae    40360e <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0xff>
  403601:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403605:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  40360c:	eb 22                	jmp    403630 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x121>
  40360e:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  403615:	00 
  403616:	48 c7 45 d8 68 fe 40 	movq   $0x40fe68,-0x28(%rbp)
  40361d:	00 
  40361e:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  403622:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  403626:	ba 3d 00 00 00       	mov    $0x3d,%edx
  40362b:	e8 55 73 00 00       	callq  40a985 <_d_array_bounds>
  403630:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  403637:	48 01 c0             	add    %rax,%rax
  40363a:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  403641:	0f b7 00             	movzwl (%rax),%eax
  403644:	98                   	cwtl   
  403645:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  40364b:	29 c2                	sub    %eax,%edx
  40364d:	89 d0                	mov    %edx,%eax
  40364f:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (result)
  403652:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  403656:	74 08                	je     403660 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x151>
		return result;
  403658:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40365b:	89 45 84             	mov    %eax,-0x7c(%rbp)
  40365e:	eb 3c                	jmp    40369c <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x18d>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int result = s1[u] - s2[u];
	    if (result)
  403660:	48 ff 45 f0          	incq   -0x10(%rbp)
  403664:	e9 0e ff ff ff       	jmpq   403577 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x68>
		return result;
	}
	if (s1.length < s2.length)
  403669:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40366d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403671:	48 39 c2             	cmp    %rax,%rdx
  403674:	73 09                	jae    40367f <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x170>
	    return -1;
  403676:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  40367d:	eb 1d                	jmp    40369c <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x18d>
	else if (s1.length > s2.length)
  40367f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  403683:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403687:	48 39 c2             	cmp    %rax,%rdx
  40368a:	76 09                	jbe    403695 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x186>
	    return 1;
  40368c:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  403693:	eb 07                	jmp    40369c <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x18d>
	return 0;
  403695:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  40369c:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  40369f:	c9                   	leaveq 
  4036a0:	c3                   	retq   

00000000004036a1 <_D3std8typeinfo9ti_Ashort11TypeInfo_As5tsizeMFZm>:

    size_t tsize()
  4036a1:	55                   	push   %rbp
  4036a2:	48 89 e5             	mov    %rsp,%rbp
  4036a5:	48 83 ec 10          	sub    $0x10,%rsp
  4036a9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4036ad:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4036b1:	e8 06 58 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (short[]).sizeof;
  4036b6:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  4036bb:	c9                   	leaveq 
  4036bc:	c3                   	retq   

00000000004036bd <_D3std8typeinfo9ti_Ashort11TypeInfo_As5flagsMFZk>:

    uint flags()
  4036bd:	55                   	push   %rbp
  4036be:	48 89 e5             	mov    %rsp,%rbp
  4036c1:	48 83 ec 10          	sub    $0x10,%rsp
  4036c5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4036c9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4036cd:	e8 ea 57 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  4036d2:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  4036d7:	c9                   	leaveq 
  4036d8:	c3                   	retq   

00000000004036d9 <_D3std8typeinfo9ti_Ashort11TypeInfo_As4nextMFZC8TypeInfo>:

    TypeInfo next()
  4036d9:	55                   	push   %rbp
  4036da:	48 89 e5             	mov    %rsp,%rbp
  4036dd:	48 83 ec 10          	sub    $0x10,%rsp
  4036e1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4036e5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4036e9:	e8 ce 57 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(short);
  4036ee:	48 c7 c0 f0 0c 41 00 	mov    $0x410cf0,%rax
    }
  4036f5:	c9                   	leaveq 
  4036f6:	c3                   	retq   

00000000004036f7 <_D3std8typeinfo9ti_Ashort11TypeInfo_At8toStringMFZAa>:

// ushort[]

class TypeInfo_At : TypeInfo_As
{
    char[] toString() { return "ushort[]"; }
  4036f7:	55                   	push   %rbp
  4036f8:	48 89 e5             	mov    %rsp,%rbp
  4036fb:	53                   	push   %rbx
  4036fc:	48 83 ec 08          	sub    $0x8,%rsp
  403700:	48 89 fb             	mov    %rdi,%rbx
  403703:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403707:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40370b:	e8 ac 57 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  403710:	48 c7 03 08 00 00 00 	movq   $0x8,(%rbx)
  403717:	48 c7 43 08 30 ff 40 	movq   $0x40ff30,0x8(%rbx)
  40371e:	00 
  40371f:	48 89 d8             	mov    %rbx,%rax
  403722:	48 83 c4 08          	add    $0x8,%rsp
  403726:	5b                   	pop    %rbx
  403727:	c9                   	leaveq 
  403728:	c3                   	retq   

0000000000403729 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  403729:	55                   	push   %rbp
  40372a:	48 89 e5             	mov    %rsp,%rbp
  40372d:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  403734:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  403738:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  40373c:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  403740:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  403744:	e8 73 57 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ushort[] s1 = *cast(ushort[]*)p1;
  403749:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40374d:	48 8b 02             	mov    (%rdx),%rax
  403750:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  403754:	48 8b 42 08          	mov    0x8(%rdx),%rax
  403758:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	ushort[] s2 = *cast(ushort[]*)p2;
  40375c:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  403760:	48 8b 02             	mov    (%rdx),%rax
  403763:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  403767:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40376b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  40376f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403773:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  403777:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40377b:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40377f:	73 08                	jae    403789 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x60>
	    len = s2.length;
  403781:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403785:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  403789:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  403790:	00 
  403791:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403795:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  403799:	0f 92 c0             	setb   %al
  40379c:	83 f0 01             	xor    $0x1,%eax
  40379f:	84 c0                	test   %al,%al
  4037a1:	0f 85 e0 00 00 00    	jne    403887 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x15e>
	{
	    int result = s1[u] - s2[u];
  4037a7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4037ab:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  4037b2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4037b6:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4037ba:	73 0d                	jae    4037c9 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0xa0>
  4037bc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4037c0:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  4037c7:	eb 22                	jmp    4037eb <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0xc2>
  4037c9:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  4037d0:	00 
  4037d1:	48 c7 45 c8 68 fe 40 	movq   $0x40fe68,-0x38(%rbp)
  4037d8:	00 
  4037d9:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4037dd:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4037e1:	ba 69 00 00 00       	mov    $0x69,%edx
  4037e6:	e8 9a 71 00 00       	callq  40a985 <_d_array_bounds>
  4037eb:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4037f2:	48 01 c0             	add    %rax,%rax
  4037f5:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  4037fc:	0f b7 00             	movzwl (%rax),%eax
  4037ff:	0f b7 c0             	movzwl %ax,%eax
  403802:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  403808:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40380c:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  403813:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403817:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40381b:	73 0d                	jae    40382a <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x101>
  40381d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403821:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  403828:	eb 22                	jmp    40384c <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x123>
  40382a:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  403831:	00 
  403832:	48 c7 45 d8 68 fe 40 	movq   $0x40fe68,-0x28(%rbp)
  403839:	00 
  40383a:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40383e:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  403842:	ba 69 00 00 00       	mov    $0x69,%edx
  403847:	e8 39 71 00 00       	callq  40a985 <_d_array_bounds>
  40384c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  403853:	48 01 c0             	add    %rax,%rax
  403856:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  40385d:	0f b7 00             	movzwl (%rax),%eax
  403860:	0f b7 c0             	movzwl %ax,%eax
  403863:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  403869:	29 c2                	sub    %eax,%edx
  40386b:	89 d0                	mov    %edx,%eax
  40386d:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (result)
  403870:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  403874:	74 08                	je     40387e <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x155>
		return result;
  403876:	8b 45 fc             	mov    -0x4(%rbp),%eax
  403879:	89 45 84             	mov    %eax,-0x7c(%rbp)
  40387c:	eb 3c                	jmp    4038ba <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x191>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int result = s1[u] - s2[u];
	    if (result)
  40387e:	48 ff 45 f0          	incq   -0x10(%rbp)
  403882:	e9 0a ff ff ff       	jmpq   403791 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x68>
		return result;
	}
	if (s1.length < s2.length)
  403887:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40388b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40388f:	48 39 c2             	cmp    %rax,%rdx
  403892:	73 09                	jae    40389d <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x174>
	    return -1;
  403894:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  40389b:	eb 1d                	jmp    4038ba <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x191>
	else if (s1.length > s2.length)
  40389d:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4038a1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4038a5:	48 39 c2             	cmp    %rax,%rdx
  4038a8:	76 09                	jbe    4038b3 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x18a>
	    return 1;
  4038aa:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  4038b1:	eb 07                	jmp    4038ba <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x191>
	return 0;
  4038b3:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  4038ba:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  4038bd:	c9                   	leaveq 
  4038be:	c3                   	retq   

00000000004038bf <_D3std8typeinfo9ti_Ashort11TypeInfo_At4nextMFZC8TypeInfo>:

    TypeInfo next()
  4038bf:	55                   	push   %rbp
  4038c0:	48 89 e5             	mov    %rsp,%rbp
  4038c3:	48 83 ec 10          	sub    $0x10,%rsp
  4038c7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4038cb:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4038cf:	e8 e8 55 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(ushort);
  4038d4:	48 c7 c0 90 10 41 00 	mov    $0x411090,%rax
    }
  4038db:	c9                   	leaveq 
  4038dc:	c3                   	retq   

00000000004038dd <_D3std8typeinfo9ti_Ashort11TypeInfo_Au8toStringMFZAa>:

// wchar[]

class TypeInfo_Au : TypeInfo_At
{
    char[] toString() { return "wchar[]"; }
  4038dd:	55                   	push   %rbp
  4038de:	48 89 e5             	mov    %rsp,%rbp
  4038e1:	53                   	push   %rbx
  4038e2:	48 83 ec 08          	sub    $0x8,%rsp
  4038e6:	48 89 fb             	mov    %rdi,%rbx
  4038e9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4038ed:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4038f1:	e8 c6 55 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  4038f6:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  4038fd:	48 c7 43 08 d0 ff 40 	movq   $0x40ffd0,0x8(%rbx)
  403904:	00 
  403905:	48 89 d8             	mov    %rbx,%rax
  403908:	48 83 c4 08          	add    $0x8,%rsp
  40390c:	5b                   	pop    %rbx
  40390d:	c9                   	leaveq 
  40390e:	c3                   	retq   

000000000040390f <_D3std8typeinfo9ti_Ashort11TypeInfo_Au4nextMFZC8TypeInfo>:

    TypeInfo next()
  40390f:	55                   	push   %rbp
  403910:	48 89 e5             	mov    %rsp,%rbp
  403913:	48 83 ec 10          	sub    $0x10,%rsp
  403917:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40391b:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40391f:	e8 98 55 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(wchar);
  403924:	48 c7 c0 10 12 41 00 	mov    $0x411210,%rax
    }
  40392b:	c9                   	leaveq 
  40392c:	c3                   	retq   
  40392d:	90                   	nop    
  40392e:	90                   	nop    
  40392f:	90                   	nop    

0000000000403930 <_D3std8typeinfo7ti_byte10TypeInfo_g8toStringMFZAa>:

module std.typeinfo.ti_byte;

class TypeInfo_g : TypeInfo
{
    char[] toString() { return "byte"; }
  403930:	55                   	push   %rbp
  403931:	48 89 e5             	mov    %rsp,%rbp
  403934:	53                   	push   %rbx
  403935:	48 83 ec 08          	sub    $0x8,%rsp
  403939:	48 89 fb             	mov    %rdi,%rbx
  40393c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403940:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  403944:	e8 73 55 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  403949:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  403950:	48 c7 43 08 80 00 41 	movq   $0x410080,0x8(%rbx)
  403957:	00 
  403958:	48 89 d8             	mov    %rbx,%rax
  40395b:	48 83 c4 08          	add    $0x8,%rsp
  40395f:	5b                   	pop    %rbx
  403960:	c9                   	leaveq 
  403961:	c3                   	retq   

0000000000403962 <_D3std8typeinfo7ti_byte10TypeInfo_g7getHashMFPvZm>:

    hash_t getHash(void *p)
  403962:	55                   	push   %rbp
  403963:	48 89 e5             	mov    %rsp,%rbp
  403966:	48 83 ec 10          	sub    $0x10,%rsp
  40396a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40396e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403972:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403976:	e8 41 55 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(byte *)p;
  40397b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40397f:	0f b6 00             	movzbl (%rax),%eax
  403982:	48 0f be c0          	movsbq %al,%rax
    }
  403986:	c9                   	leaveq 
  403987:	c3                   	retq   

0000000000403988 <_D3std8typeinfo7ti_byte10TypeInfo_g6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  403988:	55                   	push   %rbp
  403989:	48 89 e5             	mov    %rsp,%rbp
  40398c:	48 83 ec 20          	sub    $0x20,%rsp
  403990:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403994:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403998:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40399c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4039a0:	e8 17 55 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(byte *)p1 == *cast(byte *)p2;
  4039a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4039a9:	0f b6 10             	movzbl (%rax),%edx
  4039ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4039b0:	0f b6 00             	movzbl (%rax),%eax
  4039b3:	38 c2                	cmp    %al,%dl
  4039b5:	0f 94 c0             	sete   %al
  4039b8:	0f b6 c0             	movzbl %al,%eax
    }
  4039bb:	c9                   	leaveq 
  4039bc:	c3                   	retq   

00000000004039bd <_D3std8typeinfo7ti_byte10TypeInfo_g7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4039bd:	55                   	push   %rbp
  4039be:	48 89 e5             	mov    %rsp,%rbp
  4039c1:	48 83 ec 20          	sub    $0x20,%rsp
  4039c5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4039c9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4039cd:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4039d1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4039d5:	e8 e2 54 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(byte *)p1 - *cast(byte *)p2;
  4039da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4039de:	0f b6 00             	movzbl (%rax),%eax
  4039e1:	0f be d0             	movsbl %al,%edx
  4039e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4039e8:	0f b6 00             	movzbl (%rax),%eax
  4039eb:	0f be c0             	movsbl %al,%eax
  4039ee:	89 d1                	mov    %edx,%ecx
  4039f0:	29 c1                	sub    %eax,%ecx
  4039f2:	89 c8                	mov    %ecx,%eax
    }
  4039f4:	c9                   	leaveq 
  4039f5:	c3                   	retq   

00000000004039f6 <_D3std8typeinfo7ti_byte10TypeInfo_g5tsizeMFZm>:

    size_t tsize()
  4039f6:	55                   	push   %rbp
  4039f7:	48 89 e5             	mov    %rsp,%rbp
  4039fa:	48 83 ec 10          	sub    $0x10,%rsp
  4039fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403a02:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403a06:	e8 b1 54 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return byte.sizeof;
  403a0b:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  403a10:	c9                   	leaveq 
  403a11:	c3                   	retq   

0000000000403a12 <_D3std8typeinfo7ti_byte10TypeInfo_g4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  403a12:	55                   	push   %rbp
  403a13:	48 89 e5             	mov    %rsp,%rbp
  403a16:	48 83 ec 30          	sub    $0x30,%rsp
  403a1a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  403a1e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  403a22:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  403a26:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  403a2a:	e8 8d 54 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	byte t;
  403a2f:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)

	t = *cast(byte *)p1;
  403a33:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  403a37:	0f b6 00             	movzbl (%rax),%eax
  403a3a:	88 45 ff             	mov    %al,-0x1(%rbp)
	*cast(byte *)p1 = *cast(byte *)p2;
  403a3d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  403a41:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403a45:	0f b6 00             	movzbl (%rax),%eax
  403a48:	88 02                	mov    %al,(%rdx)
	*cast(byte *)p2 = t;
  403a4a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  403a4e:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  403a52:	88 02                	mov    %al,(%rdx)
    }
  403a54:	c9                   	leaveq 
  403a55:	c3                   	retq   
  403a56:	90                   	nop    
  403a57:	90                   	nop    

0000000000403a58 <_D3std8typeinfo4ti_C10TypeInfo_C7getHashMFPvZm>:

// Object

class TypeInfo_C : TypeInfo
{
    hash_t getHash(void *p)
  403a58:	55                   	push   %rbp
  403a59:	48 89 e5             	mov    %rsp,%rbp
  403a5c:	48 83 ec 20          	sub    $0x20,%rsp
  403a60:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  403a64:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  403a68:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  403a6c:	e8 4b 54 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	Object o = *cast(Object*)p;
  403a71:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  403a75:	48 8b 00             	mov    (%rax),%rax
  403a78:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(o);
  403a7c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403a80:	e8 37 54 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	return o.toHash();
  403a85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403a89:	48 8b 00             	mov    (%rax),%rax
  403a8c:	48 83 c0 10          	add    $0x10,%rax
  403a90:	48 8b 00             	mov    (%rax),%rax
  403a93:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403a97:	ff d0                	callq  *%rax
    }
  403a99:	c9                   	leaveq 
  403a9a:	c3                   	retq   

0000000000403a9b <_D3std8typeinfo4ti_C10TypeInfo_C6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  403a9b:	55                   	push   %rbp
  403a9c:	48 89 e5             	mov    %rsp,%rbp
  403a9f:	48 83 ec 30          	sub    $0x30,%rsp
  403aa3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  403aa7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  403aab:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  403aaf:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  403ab3:	e8 04 54 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	Object o1 = *cast(Object*)p1;
  403ab8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  403abc:	48 8b 00             	mov    (%rax),%rax
  403abf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	Object o2 = *cast(Object*)p2;
  403ac3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403ac7:	48 8b 00             	mov    (%rax),%rax
  403aca:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	return o1 == o2;
  403ace:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403ad2:	48 8b 00             	mov    (%rax),%rax
  403ad5:	48 83 c0 20          	add    $0x20,%rax
  403ad9:	48 8b 00             	mov    (%rax),%rax
  403adc:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  403ae0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403ae4:	ff d0                	callq  *%rax
    }
  403ae6:	c9                   	leaveq 
  403ae7:	c3                   	retq   

0000000000403ae8 <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  403ae8:	55                   	push   %rbp
  403ae9:	48 89 e5             	mov    %rsp,%rbp
  403aec:	48 83 ec 40          	sub    $0x40,%rsp
  403af0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  403af4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  403af8:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  403afc:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  403b00:	e8 b7 53 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	Object o1 = *cast(Object*)p1;
  403b05:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  403b09:	48 8b 00             	mov    (%rax),%rax
  403b0c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	Object o2 = *cast(Object*)p2;
  403b10:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  403b14:	48 8b 00             	mov    (%rax),%rax
  403b17:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	int c = 0;
  403b1b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)

	// Regard null references as always being "less than"
	if (!(o1 is o2))
  403b22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403b26:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  403b2a:	0f 94 c0             	sete   %al
  403b2d:	83 f0 01             	xor    $0x1,%eax
  403b30:	84 c0                	test   %al,%al
  403b32:	74 43                	je     403b77 <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi+0x8f>
	{
	    if (o1)
  403b34:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  403b39:	74 35                	je     403b70 <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi+0x88>
	    {	if (!o2)
  403b3b:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  403b40:	0f 95 c0             	setne  %al
  403b43:	83 f0 01             	xor    $0x1,%eax
  403b46:	84 c0                	test   %al,%al
  403b48:	74 09                	je     403b53 <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi+0x6b>
		    c = 1;
  403b4a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  403b51:	eb 24                	jmp    403b77 <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi+0x8f>
		else
		    c = o1.opCmp(o2);
  403b53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403b57:	48 8b 00             	mov    (%rax),%rax
  403b5a:	48 83 c0 18          	add    $0x18,%rax
  403b5e:	48 8b 00             	mov    (%rax),%rax
  403b61:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  403b65:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403b69:	ff d0                	callq  *%rax
  403b6b:	89 45 ec             	mov    %eax,-0x14(%rbp)
  403b6e:	eb 07                	jmp    403b77 <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi+0x8f>
	    }
	    else
		c = -1;
  403b70:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rbp)
	}
	return c;
  403b77:	8b 45 ec             	mov    -0x14(%rbp),%eax
    }
  403b7a:	c9                   	leaveq 
  403b7b:	c3                   	retq   

0000000000403b7c <_D3std8typeinfo4ti_C10TypeInfo_C5tsizeMFZm>:

    size_t tsize()
  403b7c:	55                   	push   %rbp
  403b7d:	48 89 e5             	mov    %rsp,%rbp
  403b80:	48 83 ec 10          	sub    $0x10,%rsp
  403b84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403b88:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403b8c:	e8 2b 53 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return Object.sizeof;
  403b91:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  403b96:	c9                   	leaveq 
  403b97:	c3                   	retq   

0000000000403b98 <_D3std8typeinfo4ti_C10TypeInfo_C5flagsMFZk>:

    uint flags()
  403b98:	55                   	push   %rbp
  403b99:	48 89 e5             	mov    %rsp,%rbp
  403b9c:	48 83 ec 10          	sub    $0x10,%rsp
  403ba0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403ba4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403ba8:	e8 0f 53 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  403bad:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  403bb2:	c9                   	leaveq 
  403bb3:	c3                   	retq   

0000000000403bb4 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8toStringMFZAa>:

module std.typeinfo.ti_cdouble;

class TypeInfo_r : TypeInfo
{
    char[] toString() { return "cdouble"; }
  403bb4:	55                   	push   %rbp
  403bb5:	48 89 e5             	mov    %rsp,%rbp
  403bb8:	53                   	push   %rbx
  403bb9:	48 83 ec 08          	sub    $0x8,%rsp
  403bbd:	48 89 fb             	mov    %rdi,%rbx
  403bc0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403bc4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  403bc8:	e8 ef 52 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  403bcd:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  403bd4:	48 c7 43 08 e0 01 41 	movq   $0x4101e0,0x8(%rbx)
  403bdb:	00 
  403bdc:	48 89 d8             	mov    %rbx,%rax
  403bdf:	48 83 c4 08          	add    $0x8,%rsp
  403be3:	5b                   	pop    %rbx
  403be4:	c9                   	leaveq 
  403be5:	c3                   	retq   

0000000000403be6 <_D3std8typeinfo10ti_cdouble10TypeInfo_r7getHashMFPvZm>:

    hash_t getHash(void *p)
  403be6:	55                   	push   %rbp
  403be7:	48 89 e5             	mov    %rsp,%rbp
  403bea:	48 83 ec 10          	sub    $0x10,%rsp
  403bee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403bf2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403bf6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403bfa:	e8 bd 52 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cast(uint *)p)[0] + (cast(uint *)p)[1] +
  403bff:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403c03:	b8 00 00 00 00       	mov    $0x0,%eax
  403c08:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  403c0c:	8b 08                	mov    (%rax),%ecx
  403c0e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403c12:	b8 04 00 00 00       	mov    $0x4,%eax
  403c17:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  403c1b:	8b 00                	mov    (%rax),%eax
  403c1d:	01 c1                	add    %eax,%ecx
  403c1f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403c23:	b8 08 00 00 00       	mov    $0x8,%eax
  403c28:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  403c2c:	8b 00                	mov    (%rax),%eax
  403c2e:	01 c1                	add    %eax,%ecx
  403c30:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403c34:	b8 0c 00 00 00       	mov    $0xc,%eax
  403c39:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  403c3d:	8b 00                	mov    (%rax),%eax
  403c3f:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  403c42:	89 c0                	mov    %eax,%eax
	       (cast(uint *)p)[2] + (cast(uint *)p)[3];
    }
  403c44:	c9                   	leaveq 
  403c45:	c3                   	retq   

0000000000403c46 <_D3std8typeinfo10ti_cdouble10TypeInfo_r7_equalsFrrZi>:

    static int _equals(cdouble f1, cdouble f2)
  403c46:	55                   	push   %rbp
  403c47:	48 89 e5             	mov    %rsp,%rbp
  403c4a:	f2 0f 11 45 d8       	movsd  %xmm0,-0x28(%rbp)
  403c4f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403c53:	f2 0f 11 4d d8       	movsd  %xmm1,-0x28(%rbp)
  403c58:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  403c5c:	f2 0f 11 55 d8       	movsd  %xmm2,-0x28(%rbp)
  403c61:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  403c65:	f2 0f 11 5d d8       	movsd  %xmm3,-0x28(%rbp)
  403c6a:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  403c6e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  403c72:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  403c76:	48 89 c8             	mov    %rcx,%rax
  403c79:	48 89 f2             	mov    %rsi,%rdx
  403c7c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  403c80:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    {
	return f1 == f2;
  403c84:	66 0f 12 4d f0       	movlpd -0x10(%rbp),%xmm1
  403c89:	66 0f 12 5d f8       	movlpd -0x8(%rbp),%xmm3
  403c8e:	66 0f 12 45 e0       	movlpd -0x20(%rbp),%xmm0
  403c93:	66 0f 12 55 e8       	movlpd -0x18(%rbp),%xmm2
  403c98:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
  403c9c:	0f 94 c1             	sete   %cl
  403c9f:	0f 9b c0             	setnp  %al
  403ca2:	21 c1                	and    %eax,%ecx
  403ca4:	66 0f 2e da          	ucomisd %xmm2,%xmm3
  403ca8:	0f 94 c0             	sete   %al
  403cab:	0f 9b c2             	setnp  %dl
  403cae:	21 d0                	and    %edx,%eax
  403cb0:	21 c8                	and    %ecx,%eax
  403cb2:	0f b6 c0             	movzbl %al,%eax
    }
  403cb5:	c9                   	leaveq 
  403cb6:	c3                   	retq   

0000000000403cb7 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi>:

    static int _compare(cdouble f1, cdouble f2)
  403cb7:	55                   	push   %rbp
  403cb8:	48 89 e5             	mov    %rsp,%rbp
  403cbb:	f2 0f 11 45 c8       	movsd  %xmm0,-0x38(%rbp)
  403cc0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  403cc4:	f2 0f 11 4d c8       	movsd  %xmm1,-0x38(%rbp)
  403cc9:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  403ccd:	f2 0f 11 55 c8       	movsd  %xmm2,-0x38(%rbp)
  403cd2:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  403cd6:	f2 0f 11 5d c8       	movsd  %xmm3,-0x38(%rbp)
  403cdb:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  403cdf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  403ce3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  403ce7:	48 89 c8             	mov    %rcx,%rax
  403cea:	48 89 f2             	mov    %rsi,%rdx
  403ced:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  403cf1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    {   int result;
  403cf5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	if (f1.re < f2.re)
  403cfc:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  403d01:	66 0f 12 45 d0       	movlpd -0x30(%rbp),%xmm0
  403d06:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  403d0a:	77 02                	ja     403d0e <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x57>
  403d0c:	eb 09                	jmp    403d17 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x60>
	    result = -1;
  403d0e:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  403d15:	eb 58                	jmp    403d6f <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xb8>
	else if (f1.re > f2.re)
  403d17:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  403d1c:	66 0f 12 45 d0       	movlpd -0x30(%rbp),%xmm0
  403d21:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
  403d25:	77 02                	ja     403d29 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x72>
  403d27:	eb 09                	jmp    403d32 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x7b>
	    result = 1;
  403d29:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  403d30:	eb 3d                	jmp    403d6f <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xb8>
	else if (f1.im < f2.im)
  403d32:	66 0f 12 4d e8       	movlpd -0x18(%rbp),%xmm1
  403d37:	66 0f 12 45 d8       	movlpd -0x28(%rbp),%xmm0
  403d3c:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  403d40:	77 02                	ja     403d44 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x8d>
  403d42:	eb 09                	jmp    403d4d <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x96>
	    result = -1;
  403d44:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  403d4b:	eb 22                	jmp    403d6f <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xb8>
	else if (f1.im > f2.im)
  403d4d:	66 0f 12 4d e8       	movlpd -0x18(%rbp),%xmm1
  403d52:	66 0f 12 45 d8       	movlpd -0x28(%rbp),%xmm0
  403d57:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
  403d5b:	77 02                	ja     403d5f <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xa8>
  403d5d:	eb 09                	jmp    403d68 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xb1>
	    result = 1;
  403d5f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  403d66:	eb 07                	jmp    403d6f <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xb8>
	else
	    result = 0;
  403d68:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
        return result;
  403d6f:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
  403d72:	c9                   	leaveq 
  403d73:	c3                   	retq   

0000000000403d74 <_D3std8typeinfo10ti_cdouble10TypeInfo_r6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  403d74:	55                   	push   %rbp
  403d75:	48 89 e5             	mov    %rsp,%rbp
  403d78:	48 83 ec 20          	sub    $0x20,%rsp
  403d7c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403d80:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403d84:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  403d88:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403d8c:	e8 2b 51 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(cdouble *)p1, *cast(cdouble *)p2);
  403d91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403d95:	48 8b 10             	mov    (%rax),%rdx
  403d98:	48 8b 48 08          	mov    0x8(%rax),%rcx
  403d9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403da0:	48 8b 30             	mov    (%rax),%rsi
  403da3:	48 8b 40 08          	mov    0x8(%rax),%rax
  403da7:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  403dab:	66 0f 12 55 e0       	movlpd -0x20(%rbp),%xmm2
  403db0:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  403db4:	66 0f 12 5d e0       	movlpd -0x20(%rbp),%xmm3
  403db9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  403dbd:	66 0f 12 45 e0       	movlpd -0x20(%rbp),%xmm0
  403dc2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  403dc6:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  403dcb:	e8 76 fe ff ff       	callq  403c46 <_D3std8typeinfo10ti_cdouble10TypeInfo_r7_equalsFrrZi>
    }
  403dd0:	c9                   	leaveq 
  403dd1:	c3                   	retq   

0000000000403dd2 <_D3std8typeinfo10ti_cdouble10TypeInfo_r7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  403dd2:	55                   	push   %rbp
  403dd3:	48 89 e5             	mov    %rsp,%rbp
  403dd6:	48 83 ec 20          	sub    $0x20,%rsp
  403dda:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403dde:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403de2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  403de6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403dea:	e8 cd 50 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(cdouble *)p1, *cast(cdouble *)p2);
  403def:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403df3:	48 8b 10             	mov    (%rax),%rdx
  403df6:	48 8b 48 08          	mov    0x8(%rax),%rcx
  403dfa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403dfe:	48 8b 30             	mov    (%rax),%rsi
  403e01:	48 8b 40 08          	mov    0x8(%rax),%rax
  403e05:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  403e09:	66 0f 12 55 e0       	movlpd -0x20(%rbp),%xmm2
  403e0e:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  403e12:	66 0f 12 5d e0       	movlpd -0x20(%rbp),%xmm3
  403e17:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  403e1b:	66 0f 12 45 e0       	movlpd -0x20(%rbp),%xmm0
  403e20:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  403e24:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  403e29:	e8 89 fe ff ff       	callq  403cb7 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi>
    }
  403e2e:	c9                   	leaveq 
  403e2f:	c3                   	retq   

0000000000403e30 <_D3std8typeinfo10ti_cdouble10TypeInfo_r5tsizeMFZm>:

    size_t tsize()
  403e30:	55                   	push   %rbp
  403e31:	48 89 e5             	mov    %rsp,%rbp
  403e34:	48 83 ec 10          	sub    $0x10,%rsp
  403e38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403e3c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403e40:	e8 77 50 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return cdouble.sizeof;
  403e45:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  403e4a:	c9                   	leaveq 
  403e4b:	c3                   	retq   

0000000000403e4c <_D3std8typeinfo10ti_cdouble10TypeInfo_r4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  403e4c:	55                   	push   %rbp
  403e4d:	48 89 e5             	mov    %rsp,%rbp
  403e50:	48 83 ec 30          	sub    $0x30,%rsp
  403e54:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  403e58:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  403e5c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  403e60:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  403e64:	e8 53 50 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cdouble t;
  403e69:	48 b8 00 00 00 00 00 	mov    $0x7ff8000000000000,%rax
  403e70:	00 f8 7f 
  403e73:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  403e77:	48 b8 00 00 00 00 00 	mov    $0x7ff8000000000000,%rax
  403e7e:	00 f8 7f 
  403e81:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	t = *cast(cdouble *)p1;
  403e85:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  403e89:	48 8b 02             	mov    (%rdx),%rax
  403e8c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  403e90:	48 8b 42 08          	mov    0x8(%rdx),%rax
  403e94:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(cdouble *)p1 = *cast(cdouble *)p2;
  403e98:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  403e9c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403ea0:	48 8b 10             	mov    (%rax),%rdx
  403ea3:	48 8b 40 08          	mov    0x8(%rax),%rax
  403ea7:	48 89 11             	mov    %rdx,(%rcx)
  403eaa:	48 89 41 08          	mov    %rax,0x8(%rcx)
	*cast(cdouble *)p2 = t;
  403eae:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  403eb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403eb6:	48 89 02             	mov    %rax,(%rdx)
  403eb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403ebd:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
  403ec1:	c9                   	leaveq 
  403ec2:	c3                   	retq   

0000000000403ec3 <_D3std8typeinfo10ti_cdouble10TypeInfo_r4initMFZAv>:

    void[] init()
  403ec3:	55                   	push   %rbp
  403ec4:	48 89 e5             	mov    %rsp,%rbp
  403ec7:	53                   	push   %rbx
  403ec8:	48 83 ec 28          	sub    $0x28,%rsp
  403ecc:	48 89 fb             	mov    %rdi,%rbx
  403ecf:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  403ed3:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  403ed7:	e8 e0 4f 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {	static cdouble r;

	return (cast(cdouble *)&r)[0 .. 1];
  403edc:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  403ee3:	00 
  403ee4:	48 c7 45 e8 40 a7 41 	movq   $0x41a740,-0x18(%rbp)
  403eeb:	00 
  403eec:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  403ef0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403ef4:	49 89 c0             	mov    %rax,%r8
  403ef7:	ba 10 00 00 00       	mov    $0x10,%edx
  403efc:	be 01 00 00 00       	mov    $0x1,%esi
  403f01:	48 89 df             	mov    %rbx,%rdi
  403f04:	e8 56 92 00 00       	callq  40d15f <_d_arraycast>
    }
  403f09:	48 89 d8             	mov    %rbx,%rax
  403f0c:	48 83 c4 28          	add    $0x28,%rsp
  403f10:	5b                   	pop    %rbx
  403f11:	c9                   	leaveq 
  403f12:	c3                   	retq   
  403f13:	90                   	nop    

0000000000403f14 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8toStringMFZAa>:

module std.typeinfo.ti_cfloat;

class TypeInfo_q : TypeInfo
{
    char[] toString() { return "cfloat"; }
  403f14:	55                   	push   %rbp
  403f15:	48 89 e5             	mov    %rsp,%rbp
  403f18:	53                   	push   %rbx
  403f19:	48 83 ec 08          	sub    $0x8,%rsp
  403f1d:	48 89 fb             	mov    %rdi,%rbx
  403f20:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403f24:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  403f28:	e8 8f 4f 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  403f2d:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  403f34:	48 c7 43 08 a0 02 41 	movq   $0x4102a0,0x8(%rbx)
  403f3b:	00 
  403f3c:	48 89 d8             	mov    %rbx,%rax
  403f3f:	48 83 c4 08          	add    $0x8,%rsp
  403f43:	5b                   	pop    %rbx
  403f44:	c9                   	leaveq 
  403f45:	c3                   	retq   

0000000000403f46 <_D3std8typeinfo9ti_cfloat10TypeInfo_q7getHashMFPvZm>:

    hash_t getHash(void *p)
  403f46:	55                   	push   %rbp
  403f47:	48 89 e5             	mov    %rsp,%rbp
  403f4a:	48 83 ec 10          	sub    $0x10,%rsp
  403f4e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403f52:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403f56:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403f5a:	e8 5d 4f 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cast(uint *)p)[0] + (cast(uint *)p)[1];
  403f5f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403f63:	b8 00 00 00 00       	mov    $0x0,%eax
  403f68:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  403f6c:	8b 08                	mov    (%rax),%ecx
  403f6e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403f72:	b8 04 00 00 00       	mov    $0x4,%eax
  403f77:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  403f7b:	8b 00                	mov    (%rax),%eax
  403f7d:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  403f80:	89 c0                	mov    %eax,%eax
    }
  403f82:	c9                   	leaveq 
  403f83:	c3                   	retq   

0000000000403f84 <_D3std8typeinfo9ti_cfloat10TypeInfo_q7_equalsFqqZi>:

    static int _equals(cfloat f1, cfloat f2)
  403f84:	55                   	push   %rbp
  403f85:	48 89 e5             	mov    %rsp,%rbp
  403f88:	66 48 0f 7e c0       	movq   %xmm0,%rax
  403f8d:	66 48 0f 7e ca       	movq   %xmm1,%rdx
  403f92:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  403f96:	48 89 d0             	mov    %rdx,%rax
  403f99:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    {
	return f1 == f2;
  403f9d:	f3 0f 10 4d f8       	movss  -0x8(%rbp),%xmm1
  403fa2:	f3 0f 10 5d fc       	movss  -0x4(%rbp),%xmm3
  403fa7:	f3 0f 10 45 f0       	movss  -0x10(%rbp),%xmm0
  403fac:	f3 0f 10 55 f4       	movss  -0xc(%rbp),%xmm2
  403fb1:	0f 2e c8             	ucomiss %xmm0,%xmm1
  403fb4:	0f 94 c1             	sete   %cl
  403fb7:	0f 9b c0             	setnp  %al
  403fba:	21 c1                	and    %eax,%ecx
  403fbc:	0f 2e da             	ucomiss %xmm2,%xmm3
  403fbf:	0f 94 c0             	sete   %al
  403fc2:	0f 9b c2             	setnp  %dl
  403fc5:	21 d0                	and    %edx,%eax
  403fc7:	21 c8                	and    %ecx,%eax
  403fc9:	0f b6 c0             	movzbl %al,%eax
    }
  403fcc:	c9                   	leaveq 
  403fcd:	c3                   	retq   

0000000000403fce <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi>:

    static int _compare(cfloat f1, cfloat f2)
  403fce:	55                   	push   %rbp
  403fcf:	48 89 e5             	mov    %rsp,%rbp
  403fd2:	66 48 0f 7e c0       	movq   %xmm0,%rax
  403fd7:	66 48 0f 7e ca       	movq   %xmm1,%rdx
  403fdc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  403fe0:	48 89 d0             	mov    %rdx,%rax
  403fe3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    {   int result;
  403fe7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	if (f1.re < f2.re)
  403fee:	f3 0f 10 4d e8       	movss  -0x18(%rbp),%xmm1
  403ff3:	f3 0f 10 45 e0       	movss  -0x20(%rbp),%xmm0
  403ff8:	0f 2e c1             	ucomiss %xmm1,%xmm0
  403ffb:	77 02                	ja     403fff <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x31>
  403ffd:	eb 09                	jmp    404008 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x3a>
	    result = -1;
  403fff:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  404006:	eb 55                	jmp    40405d <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x8f>
	else if (f1.re > f2.re)
  404008:	f3 0f 10 4d e8       	movss  -0x18(%rbp),%xmm1
  40400d:	f3 0f 10 45 e0       	movss  -0x20(%rbp),%xmm0
  404012:	0f 2e c8             	ucomiss %xmm0,%xmm1
  404015:	77 02                	ja     404019 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x4b>
  404017:	eb 09                	jmp    404022 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x54>
	    result = 1;
  404019:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  404020:	eb 3b                	jmp    40405d <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x8f>
	else if (f1.im < f2.im)
  404022:	f3 0f 10 4d ec       	movss  -0x14(%rbp),%xmm1
  404027:	f3 0f 10 45 e4       	movss  -0x1c(%rbp),%xmm0
  40402c:	0f 2e c1             	ucomiss %xmm1,%xmm0
  40402f:	77 02                	ja     404033 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x65>
  404031:	eb 09                	jmp    40403c <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x6e>
	    result = -1;
  404033:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  40403a:	eb 21                	jmp    40405d <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x8f>
	else if (f1.im > f2.im)
  40403c:	f3 0f 10 4d ec       	movss  -0x14(%rbp),%xmm1
  404041:	f3 0f 10 45 e4       	movss  -0x1c(%rbp),%xmm0
  404046:	0f 2e c8             	ucomiss %xmm0,%xmm1
  404049:	77 02                	ja     40404d <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x7f>
  40404b:	eb 09                	jmp    404056 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x88>
	    result = 1;
  40404d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  404054:	eb 07                	jmp    40405d <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x8f>
	else
	    result = 0;
  404056:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
        return result;
  40405d:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
  404060:	c9                   	leaveq 
  404061:	c3                   	retq   

0000000000404062 <_D3std8typeinfo9ti_cfloat10TypeInfo_q6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  404062:	55                   	push   %rbp
  404063:	48 89 e5             	mov    %rsp,%rbp
  404066:	48 83 ec 30          	sub    $0x30,%rsp
  40406a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40406e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404072:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404076:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40407a:	e8 3d 4e 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(cfloat *)p1, *cast(cfloat *)p2);
  40407f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404083:	8b 10                	mov    (%rax),%edx
  404085:	8b 48 04             	mov    0x4(%rax),%ecx
  404088:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40408c:	8b 30                	mov    (%rax),%esi
  40408e:	8b 78 04             	mov    0x4(%rax),%edi
  404091:	89 d0                	mov    %edx,%eax
  404093:	89 ca                	mov    %ecx,%edx
  404095:	89 45 e0             	mov    %eax,-0x20(%rbp)
  404098:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  40409b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40409f:	89 f0                	mov    %esi,%eax
  4040a1:	89 fa                	mov    %edi,%edx
  4040a3:	89 45 d8             	mov    %eax,-0x28(%rbp)
  4040a6:	89 55 dc             	mov    %edx,-0x24(%rbp)
  4040a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4040ad:	66 48 0f 6e c9       	movq   %rcx,%xmm1
  4040b2:	66 48 0f 6e c0       	movq   %rax,%xmm0
  4040b7:	e8 c8 fe ff ff       	callq  403f84 <_D3std8typeinfo9ti_cfloat10TypeInfo_q7_equalsFqqZi>
    }
  4040bc:	c9                   	leaveq 
  4040bd:	c3                   	retq   

00000000004040be <_D3std8typeinfo9ti_cfloat10TypeInfo_q7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4040be:	55                   	push   %rbp
  4040bf:	48 89 e5             	mov    %rsp,%rbp
  4040c2:	48 83 ec 30          	sub    $0x30,%rsp
  4040c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4040ca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4040ce:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4040d2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4040d6:	e8 e1 4d 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(cfloat *)p1, *cast(cfloat *)p2);
  4040db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4040df:	8b 10                	mov    (%rax),%edx
  4040e1:	8b 48 04             	mov    0x4(%rax),%ecx
  4040e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4040e8:	8b 30                	mov    (%rax),%esi
  4040ea:	8b 78 04             	mov    0x4(%rax),%edi
  4040ed:	89 d0                	mov    %edx,%eax
  4040ef:	89 ca                	mov    %ecx,%edx
  4040f1:	89 45 e0             	mov    %eax,-0x20(%rbp)
  4040f4:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  4040f7:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4040fb:	89 f0                	mov    %esi,%eax
  4040fd:	89 fa                	mov    %edi,%edx
  4040ff:	89 45 d8             	mov    %eax,-0x28(%rbp)
  404102:	89 55 dc             	mov    %edx,-0x24(%rbp)
  404105:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404109:	66 48 0f 6e c9       	movq   %rcx,%xmm1
  40410e:	66 48 0f 6e c0       	movq   %rax,%xmm0
  404113:	e8 b6 fe ff ff       	callq  403fce <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi>
    }
  404118:	c9                   	leaveq 
  404119:	c3                   	retq   

000000000040411a <_D3std8typeinfo9ti_cfloat10TypeInfo_q5tsizeMFZm>:

    size_t tsize()
  40411a:	55                   	push   %rbp
  40411b:	48 89 e5             	mov    %rsp,%rbp
  40411e:	48 83 ec 10          	sub    $0x10,%rsp
  404122:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404126:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40412a:	e8 8d 4d 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return cfloat.sizeof;
  40412f:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  404134:	c9                   	leaveq 
  404135:	c3                   	retq   

0000000000404136 <_D3std8typeinfo9ti_cfloat10TypeInfo_q4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  404136:	55                   	push   %rbp
  404137:	48 89 e5             	mov    %rsp,%rbp
  40413a:	48 83 ec 30          	sub    $0x30,%rsp
  40413e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404142:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  404146:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40414a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40414e:	e8 69 4d 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cfloat t;
  404153:	b8 00 00 c0 7f       	mov    $0x7fc00000,%eax
  404158:	89 45 f8             	mov    %eax,-0x8(%rbp)
  40415b:	b8 00 00 c0 7f       	mov    $0x7fc00000,%eax
  404160:	89 45 fc             	mov    %eax,-0x4(%rbp)

	t = *cast(cfloat *)p1;
  404163:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  404167:	8b 02                	mov    (%rdx),%eax
  404169:	89 45 f8             	mov    %eax,-0x8(%rbp)
  40416c:	8b 42 04             	mov    0x4(%rdx),%eax
  40416f:	89 45 fc             	mov    %eax,-0x4(%rbp)
	*cast(cfloat *)p1 = *cast(cfloat *)p2;
  404172:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  404176:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40417a:	8b 10                	mov    (%rax),%edx
  40417c:	8b 40 04             	mov    0x4(%rax),%eax
  40417f:	89 11                	mov    %edx,(%rcx)
  404181:	89 41 04             	mov    %eax,0x4(%rcx)
	*cast(cfloat *)p2 = t;
  404184:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  404188:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40418b:	89 02                	mov    %eax,(%rdx)
  40418d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404190:	89 42 04             	mov    %eax,0x4(%rdx)
    }
  404193:	c9                   	leaveq 
  404194:	c3                   	retq   

0000000000404195 <_D3std8typeinfo9ti_cfloat10TypeInfo_q4initMFZAv>:

    void[] init()
  404195:	55                   	push   %rbp
  404196:	48 89 e5             	mov    %rsp,%rbp
  404199:	53                   	push   %rbx
  40419a:	48 83 ec 28          	sub    $0x28,%rsp
  40419e:	48 89 fb             	mov    %rdi,%rbx
  4041a1:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  4041a5:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4041a9:	e8 0e 4d 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {	static cfloat r;

	return (cast(cfloat *)&r)[0 .. 1];
  4041ae:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  4041b5:	00 
  4041b6:	48 c7 45 e8 00 a8 41 	movq   $0x41a800,-0x18(%rbp)
  4041bd:	00 
  4041be:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4041c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4041c6:	49 89 c0             	mov    %rax,%r8
  4041c9:	ba 08 00 00 00       	mov    $0x8,%edx
  4041ce:	be 01 00 00 00       	mov    $0x1,%esi
  4041d3:	48 89 df             	mov    %rbx,%rdi
  4041d6:	e8 84 8f 00 00       	callq  40d15f <_d_arraycast>
    }
  4041db:	48 89 d8             	mov    %rbx,%rax
  4041de:	48 83 c4 28          	add    $0x28,%rsp
  4041e2:	5b                   	pop    %rbx
  4041e3:	c9                   	leaveq 
  4041e4:	c3                   	retq   
  4041e5:	90                   	nop    
  4041e6:	90                   	nop    
  4041e7:	90                   	nop    

00000000004041e8 <_D3std8typeinfo7ti_char10TypeInfo_a8toStringMFZAa>:

module std.typeinfo.ti_char;

class TypeInfo_a : TypeInfo
{
    char[] toString() { return "char"; }
  4041e8:	55                   	push   %rbp
  4041e9:	48 89 e5             	mov    %rsp,%rbp
  4041ec:	53                   	push   %rbx
  4041ed:	48 83 ec 08          	sub    $0x8,%rsp
  4041f1:	48 89 fb             	mov    %rdi,%rbx
  4041f4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4041f8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4041fc:	e8 bb 4c 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  404201:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  404208:	48 c7 43 08 60 03 41 	movq   $0x410360,0x8(%rbx)
  40420f:	00 
  404210:	48 89 d8             	mov    %rbx,%rax
  404213:	48 83 c4 08          	add    $0x8,%rsp
  404217:	5b                   	pop    %rbx
  404218:	c9                   	leaveq 
  404219:	c3                   	retq   

000000000040421a <_D3std8typeinfo7ti_char10TypeInfo_a7getHashMFPvZm>:

    hash_t getHash(void *p)
  40421a:	55                   	push   %rbp
  40421b:	48 89 e5             	mov    %rsp,%rbp
  40421e:	48 83 ec 10          	sub    $0x10,%rsp
  404222:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404226:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40422a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40422e:	e8 89 4c 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(char *)p;
  404233:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404237:	0f b6 00             	movzbl (%rax),%eax
  40423a:	0f b6 c0             	movzbl %al,%eax
    }
  40423d:	c9                   	leaveq 
  40423e:	c3                   	retq   

000000000040423f <_D3std8typeinfo7ti_char10TypeInfo_a6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  40423f:	55                   	push   %rbp
  404240:	48 89 e5             	mov    %rsp,%rbp
  404243:	48 83 ec 20          	sub    $0x20,%rsp
  404247:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40424b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40424f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404253:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404257:	e8 60 4c 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(char *)p1 == *cast(char *)p2;
  40425c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404260:	0f b6 10             	movzbl (%rax),%edx
  404263:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404267:	0f b6 00             	movzbl (%rax),%eax
  40426a:	38 c2                	cmp    %al,%dl
  40426c:	0f 94 c0             	sete   %al
  40426f:	0f b6 c0             	movzbl %al,%eax
    }
  404272:	c9                   	leaveq 
  404273:	c3                   	retq   

0000000000404274 <_D3std8typeinfo7ti_char10TypeInfo_a7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  404274:	55                   	push   %rbp
  404275:	48 89 e5             	mov    %rsp,%rbp
  404278:	48 83 ec 20          	sub    $0x20,%rsp
  40427c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404280:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404284:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404288:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40428c:	e8 2b 4c 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(char *)p1 - *cast(char *)p2;
  404291:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404295:	0f b6 00             	movzbl (%rax),%eax
  404298:	0f b6 d0             	movzbl %al,%edx
  40429b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40429f:	0f b6 00             	movzbl (%rax),%eax
  4042a2:	0f b6 c0             	movzbl %al,%eax
  4042a5:	89 d1                	mov    %edx,%ecx
  4042a7:	29 c1                	sub    %eax,%ecx
  4042a9:	89 c8                	mov    %ecx,%eax
    }
  4042ab:	c9                   	leaveq 
  4042ac:	c3                   	retq   

00000000004042ad <_D3std8typeinfo7ti_char10TypeInfo_a5tsizeMFZm>:

    size_t tsize()
  4042ad:	55                   	push   %rbp
  4042ae:	48 89 e5             	mov    %rsp,%rbp
  4042b1:	48 83 ec 10          	sub    $0x10,%rsp
  4042b5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4042b9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4042bd:	e8 fa 4b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return char.sizeof;
  4042c2:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  4042c7:	c9                   	leaveq 
  4042c8:	c3                   	retq   

00000000004042c9 <_D3std8typeinfo7ti_char10TypeInfo_a4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  4042c9:	55                   	push   %rbp
  4042ca:	48 89 e5             	mov    %rsp,%rbp
  4042cd:	48 83 ec 30          	sub    $0x30,%rsp
  4042d1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4042d5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4042d9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4042dd:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4042e1:	e8 d6 4b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	char t;
  4042e6:	c6 45 ff ff          	movb   $0xff,-0x1(%rbp)

	t = *cast(char *)p1;
  4042ea:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4042ee:	0f b6 00             	movzbl (%rax),%eax
  4042f1:	88 45 ff             	mov    %al,-0x1(%rbp)
	*cast(char *)p1 = *cast(char *)p2;
  4042f4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4042f8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4042fc:	0f b6 00             	movzbl (%rax),%eax
  4042ff:	88 02                	mov    %al,(%rdx)
	*cast(char *)p2 = t;
  404301:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  404305:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  404309:	88 02                	mov    %al,(%rdx)
    }
  40430b:	c9                   	leaveq 
  40430c:	c3                   	retq   

000000000040430d <_D3std8typeinfo7ti_char10TypeInfo_a4initMFZAv>:

    void[] init()
  40430d:	55                   	push   %rbp
  40430e:	48 89 e5             	mov    %rsp,%rbp
  404311:	53                   	push   %rbx
  404312:	48 83 ec 28          	sub    $0x28,%rsp
  404316:	48 89 fb             	mov    %rdi,%rbx
  404319:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40431d:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  404321:	e8 96 4b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {	static char c;

	return (cast(char *)&c)[0 .. 1];
  404326:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  40432d:	00 
  40432e:	48 c7 45 e8 c0 a8 41 	movq   $0x41a8c0,-0x18(%rbp)
  404335:	00 
  404336:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40433a:	48 89 03             	mov    %rax,(%rbx)
  40433d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404341:	48 89 43 08          	mov    %rax,0x8(%rbx)
    }
  404345:	48 89 d8             	mov    %rbx,%rax
  404348:	48 83 c4 28          	add    $0x28,%rsp
  40434c:	5b                   	pop    %rbx
  40434d:	c9                   	leaveq 
  40434e:	c3                   	retq   
  40434f:	90                   	nop    

0000000000404350 <_D3std8typeinfo8ti_creal10TypeInfo_c8toStringMFZAa>:

module std.typeinfo.ti_creal;

class TypeInfo_c : TypeInfo
{
    char[] toString() { return "creal"; }
  404350:	55                   	push   %rbp
  404351:	48 89 e5             	mov    %rsp,%rbp
  404354:	53                   	push   %rbx
  404355:	48 83 ec 08          	sub    $0x8,%rsp
  404359:	48 89 fb             	mov    %rdi,%rbx
  40435c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404360:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  404364:	e8 53 4b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  404369:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  404370:	48 c7 43 08 20 04 41 	movq   $0x410420,0x8(%rbx)
  404377:	00 
  404378:	48 89 d8             	mov    %rbx,%rax
  40437b:	48 83 c4 08          	add    $0x8,%rsp
  40437f:	5b                   	pop    %rbx
  404380:	c9                   	leaveq 
  404381:	c3                   	retq   

0000000000404382 <_D3std8typeinfo8ti_creal10TypeInfo_c7getHashMFPvZm>:

    hash_t getHash(void *p)
  404382:	55                   	push   %rbp
  404383:	48 89 e5             	mov    %rsp,%rbp
  404386:	48 83 ec 10          	sub    $0x10,%rsp
  40438a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40438e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404392:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404396:	e8 21 4b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cast(uint *)p)[0] + (cast(uint *)p)[1] +
  40439b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40439f:	b8 00 00 00 00       	mov    $0x0,%eax
  4043a4:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4043a8:	8b 08                	mov    (%rax),%ecx
  4043aa:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4043ae:	b8 04 00 00 00       	mov    $0x4,%eax
  4043b3:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4043b7:	8b 00                	mov    (%rax),%eax
  4043b9:	01 c1                	add    %eax,%ecx
  4043bb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4043bf:	b8 08 00 00 00       	mov    $0x8,%eax
  4043c4:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4043c8:	8b 00                	mov    (%rax),%eax
  4043ca:	01 c1                	add    %eax,%ecx
  4043cc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4043d0:	b8 0c 00 00 00       	mov    $0xc,%eax
  4043d5:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4043d9:	8b 00                	mov    (%rax),%eax
  4043db:	01 c1                	add    %eax,%ecx
  4043dd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4043e1:	b8 10 00 00 00       	mov    $0x10,%eax
  4043e6:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4043ea:	8b 00                	mov    (%rax),%eax
  4043ec:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  4043ef:	89 c0                	mov    %eax,%eax
	       (cast(uint *)p)[2] + (cast(uint *)p)[3] +
	       (cast(uint *)p)[4];
    }
  4043f1:	c9                   	leaveq 
  4043f2:	c3                   	retq   

00000000004043f3 <_D3std8typeinfo8ti_creal10TypeInfo_c7_equalsFccZi>:

    static int _equals(creal f1, creal f2)
  4043f3:	55                   	push   %rbp
  4043f4:	48 89 e5             	mov    %rsp,%rbp
    {
	return f1 == f2;
  4043f7:	db 6d 10             	fldt   0x10(%rbp)
  4043fa:	db 6d 20             	fldt   0x20(%rbp)
  4043fd:	db 6d 30             	fldt   0x30(%rbp)
  404400:	db 6d 40             	fldt   0x40(%rbp)
  404403:	d9 cb                	fxch   %st(3)
  404405:	df e9                	fucomip %st(1),%st
  404407:	df c0                	ffreep %st(0)
  404409:	0f 94 c1             	sete   %cl
  40440c:	0f 9b c0             	setnp  %al
  40440f:	21 c1                	and    %eax,%ecx
  404411:	df e9                	fucomip %st(1),%st
  404413:	df c0                	ffreep %st(0)
  404415:	0f 94 c0             	sete   %al
  404418:	0f 9b c2             	setnp  %dl
  40441b:	21 d0                	and    %edx,%eax
  40441d:	21 c8                	and    %ecx,%eax
  40441f:	0f b6 c0             	movzbl %al,%eax
    }
  404422:	c9                   	leaveq 
  404423:	c3                   	retq   

0000000000404424 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi>:

    static int _compare(creal f1, creal f2)
  404424:	55                   	push   %rbp
  404425:	48 89 e5             	mov    %rsp,%rbp
    {   int result;
  404428:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	if (f1.re < f2.re)
  40442f:	db 6d 10             	fldt   0x10(%rbp)
  404432:	db 6d 30             	fldt   0x30(%rbp)
  404435:	df e9                	fucomip %st(1),%st
  404437:	df c0                	ffreep %st(0)
  404439:	77 02                	ja     40443d <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x19>
  40443b:	eb 09                	jmp    404446 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x22>
	    result = -1;
  40443d:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  404444:	eb 50                	jmp    404496 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x72>
	else if (f1.re > f2.re)
  404446:	db 6d 10             	fldt   0x10(%rbp)
  404449:	db 6d 30             	fldt   0x30(%rbp)
  40444c:	d9 c9                	fxch   %st(1)
  40444e:	df e9                	fucomip %st(1),%st
  404450:	df c0                	ffreep %st(0)
  404452:	77 02                	ja     404456 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x32>
  404454:	eb 09                	jmp    40445f <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x3b>
	    result = 1;
  404456:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  40445d:	eb 37                	jmp    404496 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x72>
	else if (f1.im < f2.im)
  40445f:	db 6d 20             	fldt   0x20(%rbp)
  404462:	db 6d 40             	fldt   0x40(%rbp)
  404465:	df e9                	fucomip %st(1),%st
  404467:	df c0                	ffreep %st(0)
  404469:	77 02                	ja     40446d <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x49>
  40446b:	eb 09                	jmp    404476 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x52>
	    result = -1;
  40446d:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  404474:	eb 20                	jmp    404496 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x72>
	else if (f1.im > f2.im)
  404476:	db 6d 20             	fldt   0x20(%rbp)
  404479:	db 6d 40             	fldt   0x40(%rbp)
  40447c:	d9 c9                	fxch   %st(1)
  40447e:	df e9                	fucomip %st(1),%st
  404480:	df c0                	ffreep %st(0)
  404482:	77 02                	ja     404486 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x62>
  404484:	eb 09                	jmp    40448f <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x6b>
	    result = 1;
  404486:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  40448d:	eb 07                	jmp    404496 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x72>
	else
	    result = 0;
  40448f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
        return result;
  404496:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
  404499:	c9                   	leaveq 
  40449a:	c3                   	retq   

000000000040449b <_D3std8typeinfo8ti_creal10TypeInfo_c6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  40449b:	55                   	push   %rbp
  40449c:	48 89 e5             	mov    %rsp,%rbp
  40449f:	48 83 ec 60          	sub    $0x60,%rsp
  4044a3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4044a7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4044ab:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4044af:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4044b3:	e8 04 4a 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(creal *)p1, *cast(creal *)p2);
  4044b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4044bc:	4c 8b 00             	mov    (%rax),%r8
  4044bf:	44 8b 48 08          	mov    0x8(%rax),%r9d
  4044c3:	4c 8b 50 10          	mov    0x10(%rax),%r10
  4044c7:	44 8b 58 18          	mov    0x18(%rax),%r11d
  4044cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4044cf:	48 8b 10             	mov    (%rax),%rdx
  4044d2:	8b 48 08             	mov    0x8(%rax),%ecx
  4044d5:	48 8b 70 10          	mov    0x10(%rax),%rsi
  4044d9:	8b 78 18             	mov    0x18(%rax),%edi
  4044dc:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  4044e1:	44 89 4c 24 28       	mov    %r9d,0x28(%rsp)
  4044e6:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  4044eb:	44 89 5c 24 38       	mov    %r11d,0x38(%rsp)
  4044f0:	48 89 14 24          	mov    %rdx,(%rsp)
  4044f4:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
  4044f8:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  4044fd:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  404501:	e8 ed fe ff ff       	callq  4043f3 <_D3std8typeinfo8ti_creal10TypeInfo_c7_equalsFccZi>
    }
  404506:	c9                   	leaveq 
  404507:	c3                   	retq   

0000000000404508 <_D3std8typeinfo8ti_creal10TypeInfo_c7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  404508:	55                   	push   %rbp
  404509:	48 89 e5             	mov    %rsp,%rbp
  40450c:	48 83 ec 60          	sub    $0x60,%rsp
  404510:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404514:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404518:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40451c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404520:	e8 97 49 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(creal *)p1, *cast(creal *)p2);
  404525:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404529:	4c 8b 00             	mov    (%rax),%r8
  40452c:	44 8b 48 08          	mov    0x8(%rax),%r9d
  404530:	4c 8b 50 10          	mov    0x10(%rax),%r10
  404534:	44 8b 58 18          	mov    0x18(%rax),%r11d
  404538:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40453c:	48 8b 10             	mov    (%rax),%rdx
  40453f:	8b 48 08             	mov    0x8(%rax),%ecx
  404542:	48 8b 70 10          	mov    0x10(%rax),%rsi
  404546:	8b 78 18             	mov    0x18(%rax),%edi
  404549:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  40454e:	44 89 4c 24 28       	mov    %r9d,0x28(%rsp)
  404553:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  404558:	44 89 5c 24 38       	mov    %r11d,0x38(%rsp)
  40455d:	48 89 14 24          	mov    %rdx,(%rsp)
  404561:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
  404565:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  40456a:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  40456e:	e8 b1 fe ff ff       	callq  404424 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi>
    }
  404573:	c9                   	leaveq 
  404574:	c3                   	retq   

0000000000404575 <_D3std8typeinfo8ti_creal10TypeInfo_c5tsizeMFZm>:

    size_t tsize()
  404575:	55                   	push   %rbp
  404576:	48 89 e5             	mov    %rsp,%rbp
  404579:	48 83 ec 10          	sub    $0x10,%rsp
  40457d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404581:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404585:	e8 32 49 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return creal.sizeof;
  40458a:	b8 20 00 00 00       	mov    $0x20,%eax
    }
  40458f:	c9                   	leaveq 
  404590:	c3                   	retq   

0000000000404591 <_D3std8typeinfo8ti_creal10TypeInfo_c4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  404591:	55                   	push   %rbp
  404592:	48 89 e5             	mov    %rsp,%rbp
  404595:	53                   	push   %rbx
  404596:	48 83 ec 48          	sub    $0x48,%rsp
  40459a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40459e:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  4045a2:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  4045a6:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4045aa:	e8 0d 49 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	creal t;
  4045af:	48 b8 00 00 00 00 00 	mov    $0xc000000000000000,%rax
  4045b6:	00 00 c0 
  4045b9:	ba ff 7f 00 00       	mov    $0x7fff,%edx
  4045be:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4045c2:	89 55 d8             	mov    %edx,-0x28(%rbp)
  4045c5:	48 b8 00 00 00 00 00 	mov    $0xc000000000000000,%rax
  4045cc:	00 00 c0 
  4045cf:	ba ff 7f 00 00       	mov    $0x7fff,%edx
  4045d4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4045d8:	89 55 e8             	mov    %edx,-0x18(%rbp)

	t = *cast(creal *)p1;
  4045db:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  4045df:	48 8b 01             	mov    (%rcx),%rax
  4045e2:	8b 51 08             	mov    0x8(%rcx),%edx
  4045e5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4045e9:	89 55 d8             	mov    %edx,-0x28(%rbp)
  4045ec:	48 8b 41 10          	mov    0x10(%rcx),%rax
  4045f0:	8b 51 18             	mov    0x18(%rcx),%edx
  4045f3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4045f7:	89 55 e8             	mov    %edx,-0x18(%rbp)
	*cast(creal *)p1 = *cast(creal *)p2;
  4045fa:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  4045fe:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  404602:	48 8b 01             	mov    (%rcx),%rax
  404605:	8b 51 08             	mov    0x8(%rcx),%edx
  404608:	8b 59 18             	mov    0x18(%rcx),%ebx
  40460b:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  40460f:	48 89 06             	mov    %rax,(%rsi)
  404612:	89 56 08             	mov    %edx,0x8(%rsi)
  404615:	48 89 4e 10          	mov    %rcx,0x10(%rsi)
  404619:	89 5e 18             	mov    %ebx,0x18(%rsi)
	*cast(creal *)p2 = t;
  40461c:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  404620:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  404624:	8b 55 d8             	mov    -0x28(%rbp),%edx
  404627:	48 89 01             	mov    %rax,(%rcx)
  40462a:	89 51 08             	mov    %edx,0x8(%rcx)
  40462d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  404631:	8b 55 e8             	mov    -0x18(%rbp),%edx
  404634:	48 89 41 10          	mov    %rax,0x10(%rcx)
  404638:	89 51 18             	mov    %edx,0x18(%rcx)
    }
  40463b:	48 83 c4 48          	add    $0x48,%rsp
  40463f:	5b                   	pop    %rbx
  404640:	c9                   	leaveq 
  404641:	c3                   	retq   

0000000000404642 <_D3std8typeinfo8ti_creal10TypeInfo_c4initMFZAv>:

    void[] init()
  404642:	55                   	push   %rbp
  404643:	48 89 e5             	mov    %rsp,%rbp
  404646:	53                   	push   %rbx
  404647:	48 83 ec 28          	sub    $0x28,%rsp
  40464b:	48 89 fb             	mov    %rdi,%rbx
  40464e:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  404652:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  404656:	e8 61 48 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {	static creal r;

	return (cast(creal *)&r)[0 .. 1];
  40465b:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  404662:	00 
  404663:	48 c7 45 e8 80 a9 41 	movq   $0x41a980,-0x18(%rbp)
  40466a:	00 
  40466b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40466f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404673:	49 89 c0             	mov    %rax,%r8
  404676:	ba 20 00 00 00       	mov    $0x20,%edx
  40467b:	be 01 00 00 00       	mov    $0x1,%esi
  404680:	48 89 df             	mov    %rbx,%rdi
  404683:	e8 d7 8a 00 00       	callq  40d15f <_d_arraycast>
    }
  404688:	48 89 d8             	mov    %rbx,%rax
  40468b:	48 83 c4 28          	add    $0x28,%rsp
  40468f:	5b                   	pop    %rbx
  404690:	c9                   	leaveq 
  404691:	c3                   	retq   
  404692:	90                   	nop    
  404693:	90                   	nop    

0000000000404694 <_D3std8typeinfo8ti_dchar10TypeInfo_w8toStringMFZAa>:

module std.typeinfo.ti_dchar;

class TypeInfo_w : TypeInfo
{
    char[] toString() { return "dchar"; }
  404694:	55                   	push   %rbp
  404695:	48 89 e5             	mov    %rsp,%rbp
  404698:	53                   	push   %rbx
  404699:	48 83 ec 08          	sub    $0x8,%rsp
  40469d:	48 89 fb             	mov    %rdi,%rbx
  4046a0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4046a4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4046a8:	e8 0f 48 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  4046ad:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  4046b4:	48 c7 43 08 e0 04 41 	movq   $0x4104e0,0x8(%rbx)
  4046bb:	00 
  4046bc:	48 89 d8             	mov    %rbx,%rax
  4046bf:	48 83 c4 08          	add    $0x8,%rsp
  4046c3:	5b                   	pop    %rbx
  4046c4:	c9                   	leaveq 
  4046c5:	c3                   	retq   

00000000004046c6 <_D3std8typeinfo8ti_dchar10TypeInfo_w7getHashMFPvZm>:

    hash_t getHash(void *p)
  4046c6:	55                   	push   %rbp
  4046c7:	48 89 e5             	mov    %rsp,%rbp
  4046ca:	48 83 ec 10          	sub    $0x10,%rsp
  4046ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4046d2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4046d6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4046da:	e8 dd 47 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(dchar *)p;
  4046df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4046e3:	8b 00                	mov    (%rax),%eax
  4046e5:	89 c0                	mov    %eax,%eax
    }
  4046e7:	c9                   	leaveq 
  4046e8:	c3                   	retq   

00000000004046e9 <_D3std8typeinfo8ti_dchar10TypeInfo_w6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4046e9:	55                   	push   %rbp
  4046ea:	48 89 e5             	mov    %rsp,%rbp
  4046ed:	48 83 ec 20          	sub    $0x20,%rsp
  4046f1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4046f5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4046f9:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4046fd:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404701:	e8 b6 47 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(dchar *)p1 == *cast(dchar *)p2;
  404706:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40470a:	8b 10                	mov    (%rax),%edx
  40470c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404710:	8b 00                	mov    (%rax),%eax
  404712:	39 c2                	cmp    %eax,%edx
  404714:	0f 94 c0             	sete   %al
  404717:	0f b6 c0             	movzbl %al,%eax
    }
  40471a:	c9                   	leaveq 
  40471b:	c3                   	retq   

000000000040471c <_D3std8typeinfo8ti_dchar10TypeInfo_w7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  40471c:	55                   	push   %rbp
  40471d:	48 89 e5             	mov    %rsp,%rbp
  404720:	48 83 ec 20          	sub    $0x20,%rsp
  404724:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404728:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40472c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404730:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404734:	e8 83 47 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(dchar *)p1 - *cast(dchar *)p2;
  404739:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40473d:	8b 10                	mov    (%rax),%edx
  40473f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404743:	8b 00                	mov    (%rax),%eax
  404745:	89 d1                	mov    %edx,%ecx
  404747:	29 c1                	sub    %eax,%ecx
  404749:	89 c8                	mov    %ecx,%eax
    }
  40474b:	c9                   	leaveq 
  40474c:	c3                   	retq   

000000000040474d <_D3std8typeinfo8ti_dchar10TypeInfo_w5tsizeMFZm>:

    size_t tsize()
  40474d:	55                   	push   %rbp
  40474e:	48 89 e5             	mov    %rsp,%rbp
  404751:	48 83 ec 10          	sub    $0x10,%rsp
  404755:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404759:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40475d:	e8 5a 47 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return dchar.sizeof;
  404762:	b8 04 00 00 00       	mov    $0x4,%eax
    }
  404767:	c9                   	leaveq 
  404768:	c3                   	retq   

0000000000404769 <_D3std8typeinfo8ti_dchar10TypeInfo_w4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  404769:	55                   	push   %rbp
  40476a:	48 89 e5             	mov    %rsp,%rbp
  40476d:	48 83 ec 30          	sub    $0x30,%rsp
  404771:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404775:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  404779:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40477d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  404781:	e8 36 47 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	dchar t;
  404786:	c7 45 fc ff ff 00 00 	movl   $0xffff,-0x4(%rbp)

	t = *cast(dchar *)p1;
  40478d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  404791:	8b 00                	mov    (%rax),%eax
  404793:	89 45 fc             	mov    %eax,-0x4(%rbp)
	*cast(dchar *)p1 = *cast(dchar *)p2;
  404796:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40479a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40479e:	8b 00                	mov    (%rax),%eax
  4047a0:	89 02                	mov    %eax,(%rdx)
	*cast(dchar *)p2 = t;
  4047a2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4047a6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4047a9:	89 02                	mov    %eax,(%rdx)
    }
  4047ab:	c9                   	leaveq 
  4047ac:	c3                   	retq   

00000000004047ad <_D3std8typeinfo8ti_dchar10TypeInfo_w4initMFZAv>:

    void[] init()
  4047ad:	55                   	push   %rbp
  4047ae:	48 89 e5             	mov    %rsp,%rbp
  4047b1:	53                   	push   %rbx
  4047b2:	48 83 ec 28          	sub    $0x28,%rsp
  4047b6:	48 89 fb             	mov    %rdi,%rbx
  4047b9:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  4047bd:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4047c1:	e8 f6 46 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {	static dchar c;

	return (cast(dchar *)&c)[0 .. 1];
  4047c6:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  4047cd:	00 
  4047ce:	48 c7 45 e8 40 aa 41 	movq   $0x41aa40,-0x18(%rbp)
  4047d5:	00 
  4047d6:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4047da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4047de:	49 89 c0             	mov    %rax,%r8
  4047e1:	ba 04 00 00 00       	mov    $0x4,%edx
  4047e6:	be 01 00 00 00       	mov    $0x1,%esi
  4047eb:	48 89 df             	mov    %rbx,%rdi
  4047ee:	e8 6c 89 00 00       	callq  40d15f <_d_arraycast>
    }
  4047f3:	48 89 d8             	mov    %rbx,%rax
  4047f6:	48 83 c4 28          	add    $0x28,%rsp
  4047fa:	5b                   	pop    %rbx
  4047fb:	c9                   	leaveq 
  4047fc:	c3                   	retq   
  4047fd:	90                   	nop    
  4047fe:	90                   	nop    
  4047ff:	90                   	nop    

0000000000404800 <_D3std8typeinfo11ti_delegate10TypeInfo_D7getHashMFPvZm>:

alias void delegate(int) dg;

class TypeInfo_D : TypeInfo
{
    hash_t getHash(void *p)
  404800:	55                   	push   %rbp
  404801:	48 89 e5             	mov    %rsp,%rbp
  404804:	48 83 ec 20          	sub    $0x20,%rsp
  404808:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40480c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  404810:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  404814:	e8 a3 46 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {	long l = *cast(long *)p;
  404819:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40481d:	48 8b 00             	mov    (%rax),%rax
  404820:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return cast(uint)(l + (l >> 32));
  404824:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404828:	89 c2                	mov    %eax,%edx
  40482a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40482e:	48 c1 f8 20          	sar    $0x20,%rax
  404832:	8d 04 02             	lea    (%rdx,%rax,1),%eax
  404835:	89 c0                	mov    %eax,%eax
    }
  404837:	c9                   	leaveq 
  404838:	c3                   	retq   

0000000000404839 <_D3std8typeinfo11ti_delegate10TypeInfo_D6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  404839:	55                   	push   %rbp
  40483a:	48 89 e5             	mov    %rsp,%rbp
  40483d:	48 83 ec 30          	sub    $0x30,%rsp
  404841:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404845:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404849:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40484d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404851:	e8 66 46 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(dg *)p1 == *cast(dg *)p2;
  404856:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40485a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40485e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  404862:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  404866:	48 c7 45 d0 10 00 00 	movq   $0x10,-0x30(%rbp)
  40486d:	00 
  40486e:	fc                   	cld    
  40486f:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  404873:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  404877:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  40487b:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  40487d:	0f 97 c2             	seta   %dl
  404880:	0f 92 c0             	setb   %al
  404883:	89 d1                	mov    %edx,%ecx
  404885:	28 c1                	sub    %al,%cl
  404887:	89 c8                	mov    %ecx,%eax
  404889:	0f be c0             	movsbl %al,%eax
  40488c:	85 c0                	test   %eax,%eax
  40488e:	0f 94 c0             	sete   %al
  404891:	0f b6 c0             	movzbl %al,%eax
    }
  404894:	c9                   	leaveq 
  404895:	c3                   	retq   

0000000000404896 <_D3std8typeinfo11ti_delegate10TypeInfo_D5tsizeMFZm>:

    size_t tsize()
  404896:	55                   	push   %rbp
  404897:	48 89 e5             	mov    %rsp,%rbp
  40489a:	48 83 ec 10          	sub    $0x10,%rsp
  40489e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4048a2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4048a6:	e8 11 46 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return dg.sizeof;
  4048ab:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  4048b0:	c9                   	leaveq 
  4048b1:	c3                   	retq   

00000000004048b2 <_D3std8typeinfo11ti_delegate10TypeInfo_D4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  4048b2:	55                   	push   %rbp
  4048b3:	48 89 e5             	mov    %rsp,%rbp
  4048b6:	48 83 ec 30          	sub    $0x30,%rsp
  4048ba:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4048be:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4048c2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4048c6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4048ca:	e8 ed 45 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	dg t;
  4048cf:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4048d6:	00 
  4048d7:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4048de:	00 

	t = *cast(dg *)p1;
  4048df:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4048e3:	48 8b 02             	mov    (%rdx),%rax
  4048e6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4048ea:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4048ee:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(dg *)p1 = *cast(dg *)p2;
  4048f2:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4048f6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4048fa:	48 8b 02             	mov    (%rdx),%rax
  4048fd:	48 89 01             	mov    %rax,(%rcx)
  404900:	48 8b 42 08          	mov    0x8(%rdx),%rax
  404904:	48 89 41 08          	mov    %rax,0x8(%rcx)
	*cast(dg *)p2 = t;
  404908:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40490c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404910:	48 89 02             	mov    %rax,(%rdx)
  404913:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404917:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
  40491b:	c9                   	leaveq 
  40491c:	c3                   	retq   

000000000040491d <_D3std8typeinfo11ti_delegate10TypeInfo_D5flagsMFZk>:

    uint flags()
  40491d:	55                   	push   %rbp
  40491e:	48 89 e5             	mov    %rsp,%rbp
  404921:	48 83 ec 10          	sub    $0x10,%rsp
  404925:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404929:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40492d:	e8 8a 45 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  404932:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  404937:	c9                   	leaveq 
  404938:	c3                   	retq   
  404939:	90                   	nop    
  40493a:	90                   	nop    
  40493b:	90                   	nop    

000000000040493c <_D3std8typeinfo9ti_double10TypeInfo_d8toStringMFZAa>:
import kernel.core.system;
//private import std.math;

class TypeInfo_d : TypeInfo
{
    char[] toString() { return "double"; }
  40493c:	55                   	push   %rbp
  40493d:	48 89 e5             	mov    %rsp,%rbp
  404940:	53                   	push   %rbx
  404941:	48 83 ec 08          	sub    $0x8,%rsp
  404945:	48 89 fb             	mov    %rdi,%rbx
  404948:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40494c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  404950:	e8 67 45 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  404955:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  40495c:	48 c7 43 08 40 06 41 	movq   $0x410640,0x8(%rbx)
  404963:	00 
  404964:	48 89 d8             	mov    %rbx,%rax
  404967:	48 83 c4 08          	add    $0x8,%rsp
  40496b:	5b                   	pop    %rbx
  40496c:	c9                   	leaveq 
  40496d:	c3                   	retq   

000000000040496e <_D3std8typeinfo9ti_double10TypeInfo_d7getHashMFPvZm>:

    hash_t getHash(void *p)
  40496e:	55                   	push   %rbp
  40496f:	48 89 e5             	mov    %rsp,%rbp
  404972:	48 83 ec 10          	sub    $0x10,%rsp
  404976:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40497a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40497e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404982:	e8 35 45 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cast(uint *)p)[0] + (cast(uint *)p)[1];
  404987:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40498b:	b8 00 00 00 00       	mov    $0x0,%eax
  404990:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  404994:	8b 08                	mov    (%rax),%ecx
  404996:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40499a:	b8 04 00 00 00       	mov    $0x4,%eax
  40499f:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4049a3:	8b 00                	mov    (%rax),%eax
  4049a5:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  4049a8:	89 c0                	mov    %eax,%eax
    }
  4049aa:	c9                   	leaveq 
  4049ab:	c3                   	retq   

00000000004049ac <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi>:

    static int _equals(double f1, double f2)
  4049ac:	55                   	push   %rbp
  4049ad:	48 89 e5             	mov    %rsp,%rbp
  4049b0:	48 83 ec 30          	sub    $0x30,%rsp
  4049b4:	f2 0f 11 45 f8       	movsd  %xmm0,-0x8(%rbp)
  4049b9:	f2 0f 11 4d f0       	movsd  %xmm1,-0x10(%rbp)
    {
	return f1 == f2 ||
  4049be:	66 0f 12 45 f8       	movlpd -0x8(%rbp),%xmm0
  4049c3:	66 0f 2e 45 f0       	ucomisd -0x10(%rbp),%xmm0
  4049c8:	7a 02                	jp     4049cc <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi+0x20>
  4049ca:	74 1e                	je     4049ea <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi+0x3e>
  4049cc:	dd 45 f8             	fldl   -0x8(%rbp)
  4049cf:	db 3c 24             	fstpt  (%rsp)
  4049d2:	e8 5d 8b 00 00       	callq  40d534 <_D6kernel4core6system5isnanFeZi>
  4049d7:	85 c0                	test   %eax,%eax
  4049d9:	74 15                	je     4049f0 <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi+0x44>
  4049db:	dd 45 f0             	fldl   -0x10(%rbp)
  4049de:	db 3c 24             	fstpt  (%rsp)
  4049e1:	e8 4e 8b 00 00       	callq  40d534 <_D6kernel4core6system5isnanFeZi>
  4049e6:	85 c0                	test   %eax,%eax
  4049e8:	74 06                	je     4049f0 <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi+0x44>
  4049ea:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  4049ee:	eb 04                	jmp    4049f4 <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi+0x48>
  4049f0:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  4049f4:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
		(isnan(f1) && isnan(f2));
    }
  4049f8:	c9                   	leaveq 
  4049f9:	c3                   	retq   

00000000004049fa <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi>:

    static int _compare(double d1, double d2)
  4049fa:	55                   	push   %rbp
  4049fb:	48 89 e5             	mov    %rsp,%rbp
  4049fe:	48 83 ec 30          	sub    $0x30,%rsp
  404a02:	f2 0f 11 45 f8       	movsd  %xmm0,-0x8(%rbp)
  404a07:	f2 0f 11 4d f0       	movsd  %xmm1,-0x10(%rbp)
    {
	if (d1 !<>= d2)		// if either are NaN
  404a0c:	66 0f 12 45 f8       	movlpd -0x8(%rbp),%xmm0
  404a11:	66 0f 2e 45 f0       	ucomisd -0x10(%rbp),%xmm0
  404a16:	0f 9a c0             	setp   %al
  404a19:	84 c0                	test   %al,%al
  404a1b:	74 39                	je     404a56 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x5c>
	{
	    if (isnan(d1))
  404a1d:	dd 45 f8             	fldl   -0x8(%rbp)
  404a20:	db 3c 24             	fstpt  (%rsp)
  404a23:	e8 0c 8b 00 00       	callq  40d534 <_D6kernel4core6system5isnanFeZi>
  404a28:	85 c0                	test   %eax,%eax
  404a2a:	74 21                	je     404a4d <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x53>
	    {	if (isnan(d2))
  404a2c:	dd 45 f0             	fldl   -0x10(%rbp)
  404a2f:	db 3c 24             	fstpt  (%rsp)
  404a32:	e8 fd 8a 00 00       	callq  40d534 <_D6kernel4core6system5isnanFeZi>
  404a37:	85 c0                	test   %eax,%eax
  404a39:	74 09                	je     404a44 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x4a>
		    return 0;
  404a3b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  404a42:	eb 59                	jmp    404a9d <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0xa3>
		return -1;
  404a44:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  404a4b:	eb 50                	jmp    404a9d <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0xa3>
	    }
	    return 1;
  404a4d:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  404a54:	eb 47                	jmp    404a9d <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0xa3>
	}
	return (d1 == d2) ? 0 : ((d1 < d2) ? -1 : 1);
  404a56:	66 0f 12 45 f8       	movlpd -0x8(%rbp),%xmm0
  404a5b:	66 0f 2e 45 f0       	ucomisd -0x10(%rbp),%xmm0
  404a60:	7a 02                	jp     404a64 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x6a>
  404a62:	74 02                	je     404a66 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x6c>
  404a64:	eb 09                	jmp    404a6f <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x75>
  404a66:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  404a6d:	eb 28                	jmp    404a97 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x9d>
  404a6f:	66 0f 12 4d f8       	movlpd -0x8(%rbp),%xmm1
  404a74:	66 0f 12 45 f0       	movlpd -0x10(%rbp),%xmm0
  404a79:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  404a7d:	77 02                	ja     404a81 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x87>
  404a7f:	eb 09                	jmp    404a8a <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x90>
  404a81:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rbp)
  404a88:	eb 07                	jmp    404a91 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x97>
  404a8a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  404a91:	8b 45 ec             	mov    -0x14(%rbp),%eax
  404a94:	89 45 e8             	mov    %eax,-0x18(%rbp)
  404a97:	8b 45 e8             	mov    -0x18(%rbp),%eax
  404a9a:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  404a9d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    }
  404aa0:	c9                   	leaveq 
  404aa1:	c3                   	retq   

0000000000404aa2 <_D3std8typeinfo9ti_double10TypeInfo_d6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  404aa2:	55                   	push   %rbp
  404aa3:	48 89 e5             	mov    %rsp,%rbp
  404aa6:	48 83 ec 20          	sub    $0x20,%rsp
  404aaa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404aae:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404ab2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404ab6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404aba:	e8 fd 43 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(double *)p1, *cast(double *)p2);
  404abf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404ac3:	48 8b 10             	mov    (%rax),%rdx
  404ac6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404aca:	48 8b 00             	mov    (%rax),%rax
  404acd:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  404ad1:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  404ad6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  404ada:	66 0f 12 45 e0       	movlpd -0x20(%rbp),%xmm0
  404adf:	e8 c8 fe ff ff       	callq  4049ac <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi>
    }
  404ae4:	c9                   	leaveq 
  404ae5:	c3                   	retq   

0000000000404ae6 <_D3std8typeinfo9ti_double10TypeInfo_d7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  404ae6:	55                   	push   %rbp
  404ae7:	48 89 e5             	mov    %rsp,%rbp
  404aea:	48 83 ec 20          	sub    $0x20,%rsp
  404aee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404af2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404af6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404afa:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404afe:	e8 b9 43 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(double *)p1, *cast(double *)p2);
  404b03:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404b07:	48 8b 10             	mov    (%rax),%rdx
  404b0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404b0e:	48 8b 00             	mov    (%rax),%rax
  404b11:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  404b15:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  404b1a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  404b1e:	66 0f 12 45 e0       	movlpd -0x20(%rbp),%xmm0
  404b23:	e8 d2 fe ff ff       	callq  4049fa <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi>
    }
  404b28:	c9                   	leaveq 
  404b29:	c3                   	retq   

0000000000404b2a <_D3std8typeinfo9ti_double10TypeInfo_d5tsizeMFZm>:

    size_t tsize()
  404b2a:	55                   	push   %rbp
  404b2b:	48 89 e5             	mov    %rsp,%rbp
  404b2e:	48 83 ec 10          	sub    $0x10,%rsp
  404b32:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404b36:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404b3a:	e8 7d 43 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return double.sizeof;
  404b3f:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  404b44:	c9                   	leaveq 
  404b45:	c3                   	retq   

0000000000404b46 <_D3std8typeinfo9ti_double10TypeInfo_d4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  404b46:	55                   	push   %rbp
  404b47:	48 89 e5             	mov    %rsp,%rbp
  404b4a:	48 83 ec 30          	sub    $0x30,%rsp
  404b4e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404b52:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  404b56:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  404b5a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  404b5e:	e8 59 43 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	double t;
  404b63:	48 b8 00 00 00 00 00 	mov    $0x7ff8000000000000,%rax
  404b6a:	00 f8 7f 
  404b6d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	t = *cast(double *)p1;
  404b71:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  404b75:	48 8b 00             	mov    (%rax),%rax
  404b78:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(double *)p1 = *cast(double *)p2;
  404b7c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  404b80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404b84:	48 8b 00             	mov    (%rax),%rax
  404b87:	48 89 02             	mov    %rax,(%rdx)
	*cast(double *)p2 = t;
  404b8a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  404b8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404b92:	48 89 02             	mov    %rax,(%rdx)
    }
  404b95:	c9                   	leaveq 
  404b96:	c3                   	retq   

0000000000404b97 <_D3std8typeinfo9ti_double10TypeInfo_d4initMFZAv>:

    void[] init()
  404b97:	55                   	push   %rbp
  404b98:	48 89 e5             	mov    %rsp,%rbp
  404b9b:	53                   	push   %rbx
  404b9c:	48 83 ec 28          	sub    $0x28,%rsp
  404ba0:	48 89 fb             	mov    %rdi,%rbx
  404ba3:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  404ba7:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  404bab:	e8 0c 43 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {	static double r;

	return (cast(double *)&r)[0 .. 1];
  404bb0:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  404bb7:	00 
  404bb8:	48 c7 45 e8 a0 ab 41 	movq   $0x41aba0,-0x18(%rbp)
  404bbf:	00 
  404bc0:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  404bc4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404bc8:	49 89 c0             	mov    %rax,%r8
  404bcb:	ba 08 00 00 00       	mov    $0x8,%edx
  404bd0:	be 01 00 00 00       	mov    $0x1,%esi
  404bd5:	48 89 df             	mov    %rbx,%rdi
  404bd8:	e8 82 85 00 00       	callq  40d15f <_d_arraycast>
    }
  404bdd:	48 89 d8             	mov    %rbx,%rax
  404be0:	48 83 c4 28          	add    $0x28,%rsp
  404be4:	5b                   	pop    %rbx
  404be5:	c9                   	leaveq 
  404be6:	c3                   	retq   
  404be7:	90                   	nop    

0000000000404be8 <_D3std8typeinfo8ti_float10TypeInfo_f8toStringMFZAa>:
import kernel.core.system;
//private import std.math;

class TypeInfo_f : TypeInfo
{
    char[] toString() { return "float"; }
  404be8:	55                   	push   %rbp
  404be9:	48 89 e5             	mov    %rsp,%rbp
  404bec:	53                   	push   %rbx
  404bed:	48 83 ec 08          	sub    $0x8,%rsp
  404bf1:	48 89 fb             	mov    %rdi,%rbx
  404bf4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404bf8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  404bfc:	e8 bb 42 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  404c01:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  404c08:	48 c7 43 08 00 07 41 	movq   $0x410700,0x8(%rbx)
  404c0f:	00 
  404c10:	48 89 d8             	mov    %rbx,%rax
  404c13:	48 83 c4 08          	add    $0x8,%rsp
  404c17:	5b                   	pop    %rbx
  404c18:	c9                   	leaveq 
  404c19:	c3                   	retq   

0000000000404c1a <_D3std8typeinfo8ti_float10TypeInfo_f7getHashMFPvZm>:

    hash_t getHash(void *p)
  404c1a:	55                   	push   %rbp
  404c1b:	48 89 e5             	mov    %rsp,%rbp
  404c1e:	48 83 ec 10          	sub    $0x10,%rsp
  404c22:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404c26:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404c2a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404c2e:	e8 89 42 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p;
  404c33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404c37:	8b 00                	mov    (%rax),%eax
  404c39:	89 c0                	mov    %eax,%eax
    }
  404c3b:	c9                   	leaveq 
  404c3c:	c3                   	retq   

0000000000404c3d <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi>:

    static int _equals(float f1, float f2)
  404c3d:	55                   	push   %rbp
  404c3e:	48 89 e5             	mov    %rsp,%rbp
  404c41:	48 83 ec 20          	sub    $0x20,%rsp
  404c45:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  404c4a:	f3 0f 11 4d f8       	movss  %xmm1,-0x8(%rbp)
    {
	return f1 == f2 ||
  404c4f:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  404c54:	0f 2e 45 f8          	ucomiss -0x8(%rbp),%xmm0
  404c58:	7a 02                	jp     404c5c <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi+0x1f>
  404c5a:	74 1e                	je     404c7a <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi+0x3d>
  404c5c:	d9 45 fc             	flds   -0x4(%rbp)
  404c5f:	db 3c 24             	fstpt  (%rsp)
  404c62:	e8 cd 88 00 00       	callq  40d534 <_D6kernel4core6system5isnanFeZi>
  404c67:	85 c0                	test   %eax,%eax
  404c69:	74 15                	je     404c80 <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi+0x43>
  404c6b:	d9 45 f8             	flds   -0x8(%rbp)
  404c6e:	db 3c 24             	fstpt  (%rsp)
  404c71:	e8 be 88 00 00       	callq  40d534 <_D6kernel4core6system5isnanFeZi>
  404c76:	85 c0                	test   %eax,%eax
  404c78:	74 06                	je     404c80 <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi+0x43>
  404c7a:	c6 45 f7 01          	movb   $0x1,-0x9(%rbp)
  404c7e:	eb 04                	jmp    404c84 <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi+0x47>
  404c80:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
  404c84:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
		(isnan(f1) && isnan(f2));
    }
  404c88:	c9                   	leaveq 
  404c89:	c3                   	retq   

0000000000404c8a <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi>:

    static int _compare(float d1, float d2)
  404c8a:	55                   	push   %rbp
  404c8b:	48 89 e5             	mov    %rsp,%rbp
  404c8e:	48 83 ec 30          	sub    $0x30,%rsp
  404c92:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  404c97:	f3 0f 11 4d f8       	movss  %xmm1,-0x8(%rbp)
    {
	if (d1 !<>= d2)		// if either are NaN
  404c9c:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  404ca1:	0f 2e 45 f8          	ucomiss -0x8(%rbp),%xmm0
  404ca5:	0f 9a c0             	setp   %al
  404ca8:	84 c0                	test   %al,%al
  404caa:	74 39                	je     404ce5 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x5b>
	{
	    if (isnan(d1))
  404cac:	d9 45 fc             	flds   -0x4(%rbp)
  404caf:	db 3c 24             	fstpt  (%rsp)
  404cb2:	e8 7d 88 00 00       	callq  40d534 <_D6kernel4core6system5isnanFeZi>
  404cb7:	85 c0                	test   %eax,%eax
  404cb9:	74 21                	je     404cdc <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x52>
	    {	if (isnan(d2))
  404cbb:	d9 45 f8             	flds   -0x8(%rbp)
  404cbe:	db 3c 24             	fstpt  (%rsp)
  404cc1:	e8 6e 88 00 00       	callq  40d534 <_D6kernel4core6system5isnanFeZi>
  404cc6:	85 c0                	test   %eax,%eax
  404cc8:	74 09                	je     404cd3 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x49>
		    return 0;
  404cca:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  404cd1:	eb 57                	jmp    404d2a <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0xa0>
		return -1;
  404cd3:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rbp)
  404cda:	eb 4e                	jmp    404d2a <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0xa0>
	    }
	    return 1;
  404cdc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  404ce3:	eb 45                	jmp    404d2a <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0xa0>
	}
	return (d1 == d2) ? 0 : ((d1 < d2) ? -1 : 1);
  404ce5:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  404cea:	0f 2e 45 f8          	ucomiss -0x8(%rbp),%xmm0
  404cee:	7a 02                	jp     404cf2 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x68>
  404cf0:	74 02                	je     404cf4 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x6a>
  404cf2:	eb 09                	jmp    404cfd <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x73>
  404cf4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  404cfb:	eb 27                	jmp    404d24 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x9a>
  404cfd:	f3 0f 10 4d fc       	movss  -0x4(%rbp),%xmm1
  404d02:	f3 0f 10 45 f8       	movss  -0x8(%rbp),%xmm0
  404d07:	0f 2e c1             	ucomiss %xmm1,%xmm0
  404d0a:	77 02                	ja     404d0e <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x84>
  404d0c:	eb 09                	jmp    404d17 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x8d>
  404d0e:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%rbp)
  404d15:	eb 07                	jmp    404d1e <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x94>
  404d17:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  404d1e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  404d21:	89 45 f0             	mov    %eax,-0x10(%rbp)
  404d24:	8b 45 f0             	mov    -0x10(%rbp),%eax
  404d27:	89 45 ec             	mov    %eax,-0x14(%rbp)
  404d2a:	8b 45 ec             	mov    -0x14(%rbp),%eax
    }
  404d2d:	c9                   	leaveq 
  404d2e:	c3                   	retq   

0000000000404d2f <_D3std8typeinfo8ti_float10TypeInfo_f6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  404d2f:	55                   	push   %rbp
  404d30:	48 89 e5             	mov    %rsp,%rbp
  404d33:	48 83 ec 20          	sub    $0x20,%rsp
  404d37:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404d3b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404d3f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404d43:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404d47:	e8 70 41 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(float *)p1, *cast(float *)p2);
  404d4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404d50:	8b 10                	mov    (%rax),%edx
  404d52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404d56:	8b 00                	mov    (%rax),%eax
  404d58:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  404d5b:	f3 0f 10 4d e4       	movss  -0x1c(%rbp),%xmm1
  404d60:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  404d63:	f3 0f 10 45 e4       	movss  -0x1c(%rbp),%xmm0
  404d68:	e8 d0 fe ff ff       	callq  404c3d <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi>
    }
  404d6d:	c9                   	leaveq 
  404d6e:	c3                   	retq   

0000000000404d6f <_D3std8typeinfo8ti_float10TypeInfo_f7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  404d6f:	55                   	push   %rbp
  404d70:	48 89 e5             	mov    %rsp,%rbp
  404d73:	48 83 ec 20          	sub    $0x20,%rsp
  404d77:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404d7b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404d7f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404d83:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404d87:	e8 30 41 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(float *)p1, *cast(float *)p2);
  404d8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404d90:	8b 10                	mov    (%rax),%edx
  404d92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404d96:	8b 00                	mov    (%rax),%eax
  404d98:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  404d9b:	f3 0f 10 4d e4       	movss  -0x1c(%rbp),%xmm1
  404da0:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  404da3:	f3 0f 10 45 e4       	movss  -0x1c(%rbp),%xmm0
  404da8:	e8 dd fe ff ff       	callq  404c8a <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi>
    }
  404dad:	c9                   	leaveq 
  404dae:	c3                   	retq   

0000000000404daf <_D3std8typeinfo8ti_float10TypeInfo_f5tsizeMFZm>:

    size_t tsize()
  404daf:	55                   	push   %rbp
  404db0:	48 89 e5             	mov    %rsp,%rbp
  404db3:	48 83 ec 10          	sub    $0x10,%rsp
  404db7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404dbb:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404dbf:	e8 f8 40 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return float.sizeof;
  404dc4:	b8 04 00 00 00       	mov    $0x4,%eax
    }
  404dc9:	c9                   	leaveq 
  404dca:	c3                   	retq   

0000000000404dcb <_D3std8typeinfo8ti_float10TypeInfo_f4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  404dcb:	55                   	push   %rbp
  404dcc:	48 89 e5             	mov    %rsp,%rbp
  404dcf:	48 83 ec 30          	sub    $0x30,%rsp
  404dd3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404dd7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  404ddb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  404ddf:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  404de3:	e8 d4 40 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	float t;
  404de8:	b8 00 00 c0 7f       	mov    $0x7fc00000,%eax
  404ded:	89 45 fc             	mov    %eax,-0x4(%rbp)

	t = *cast(float *)p1;
  404df0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  404df4:	8b 00                	mov    (%rax),%eax
  404df6:	89 45 fc             	mov    %eax,-0x4(%rbp)
	*cast(float *)p1 = *cast(float *)p2;
  404df9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  404dfd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404e01:	8b 00                	mov    (%rax),%eax
  404e03:	89 02                	mov    %eax,(%rdx)
	*cast(float *)p2 = t;
  404e05:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  404e09:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404e0c:	89 02                	mov    %eax,(%rdx)
    }
  404e0e:	c9                   	leaveq 
  404e0f:	c3                   	retq   

0000000000404e10 <_D3std8typeinfo8ti_float10TypeInfo_f4initMFZAv>:

    void[] init()
  404e10:	55                   	push   %rbp
  404e11:	48 89 e5             	mov    %rsp,%rbp
  404e14:	53                   	push   %rbx
  404e15:	48 83 ec 28          	sub    $0x28,%rsp
  404e19:	48 89 fb             	mov    %rdi,%rbx
  404e1c:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  404e20:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  404e24:	e8 93 40 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {	static float r;

	return (cast(float *)&r)[0 .. 1];
  404e29:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  404e30:	00 
  404e31:	48 c7 45 e8 60 ac 41 	movq   $0x41ac60,-0x18(%rbp)
  404e38:	00 
  404e39:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  404e3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404e41:	49 89 c0             	mov    %rax,%r8
  404e44:	ba 04 00 00 00       	mov    $0x4,%edx
  404e49:	be 01 00 00 00       	mov    $0x1,%esi
  404e4e:	48 89 df             	mov    %rbx,%rdi
  404e51:	e8 09 83 00 00       	callq  40d15f <_d_arraycast>
    }
  404e56:	48 89 d8             	mov    %rbx,%rax
  404e59:	48 83 c4 28          	add    $0x28,%rsp
  404e5d:	5b                   	pop    %rbx
  404e5e:	c9                   	leaveq 
  404e5f:	c3                   	retq   

0000000000404e60 <_D3std8typeinfo10ti_idouble10TypeInfo_p8toStringMFZAa>:

private import std.typeinfo.ti_double;

class TypeInfo_p : TypeInfo_d
{
    char[] toString() { return "idouble"; }
  404e60:	55                   	push   %rbp
  404e61:	48 89 e5             	mov    %rsp,%rbp
  404e64:	53                   	push   %rbx
  404e65:	48 83 ec 08          	sub    $0x8,%rsp
  404e69:	48 89 fb             	mov    %rdi,%rbx
  404e6c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404e70:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  404e74:	e8 43 40 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  404e79:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  404e80:	48 c7 43 08 c0 07 41 	movq   $0x4107c0,0x8(%rbx)
  404e87:	00 
  404e88:	48 89 d8             	mov    %rbx,%rax
  404e8b:	48 83 c4 08          	add    $0x8,%rsp
  404e8f:	5b                   	pop    %rbx
  404e90:	c9                   	leaveq 
  404e91:	c3                   	retq   
  404e92:	90                   	nop    
  404e93:	90                   	nop    

0000000000404e94 <_D3std8typeinfo9ti_ifloat10TypeInfo_o8toStringMFZAa>:

private import std.typeinfo.ti_float;

class TypeInfo_o : TypeInfo_f
{
    char[] toString() { return "ifloat"; }
  404e94:	55                   	push   %rbp
  404e95:	48 89 e5             	mov    %rsp,%rbp
  404e98:	53                   	push   %rbx
  404e99:	48 83 ec 08          	sub    $0x8,%rsp
  404e9d:	48 89 fb             	mov    %rdi,%rbx
  404ea0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404ea4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  404ea8:	e8 0f 40 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  404ead:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  404eb4:	48 c7 43 08 80 08 41 	movq   $0x410880,0x8(%rbx)
  404ebb:	00 
  404ebc:	48 89 d8             	mov    %rbx,%rax
  404ebf:	48 83 c4 08          	add    $0x8,%rsp
  404ec3:	5b                   	pop    %rbx
  404ec4:	c9                   	leaveq 
  404ec5:	c3                   	retq   
  404ec6:	90                   	nop    
  404ec7:	90                   	nop    

0000000000404ec8 <_D3std8typeinfo6ti_int10TypeInfo_i8toStringMFZAa>:

module std.typeinfo.ti_int;

class TypeInfo_i : TypeInfo
{
    char[] toString() { return "int"; }
  404ec8:	55                   	push   %rbp
  404ec9:	48 89 e5             	mov    %rsp,%rbp
  404ecc:	53                   	push   %rbx
  404ecd:	48 83 ec 08          	sub    $0x8,%rsp
  404ed1:	48 89 fb             	mov    %rdi,%rbx
  404ed4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404ed8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  404edc:	e8 db 3f 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  404ee1:	48 c7 03 03 00 00 00 	movq   $0x3,(%rbx)
  404ee8:	48 c7 43 08 40 09 41 	movq   $0x410940,0x8(%rbx)
  404eef:	00 
  404ef0:	48 89 d8             	mov    %rbx,%rax
  404ef3:	48 83 c4 08          	add    $0x8,%rsp
  404ef7:	5b                   	pop    %rbx
  404ef8:	c9                   	leaveq 
  404ef9:	c3                   	retq   

0000000000404efa <_D3std8typeinfo6ti_int10TypeInfo_i7getHashMFPvZm>:

    hash_t getHash(void *p)
  404efa:	55                   	push   %rbp
  404efb:	48 89 e5             	mov    %rsp,%rbp
  404efe:	48 83 ec 10          	sub    $0x10,%rsp
  404f02:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404f06:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404f0a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404f0e:	e8 a9 3f 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p;
  404f13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404f17:	8b 00                	mov    (%rax),%eax
  404f19:	89 c0                	mov    %eax,%eax
    }
  404f1b:	c9                   	leaveq 
  404f1c:	c3                   	retq   

0000000000404f1d <_D3std8typeinfo6ti_int10TypeInfo_i6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  404f1d:	55                   	push   %rbp
  404f1e:	48 89 e5             	mov    %rsp,%rbp
  404f21:	48 83 ec 20          	sub    $0x20,%rsp
  404f25:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404f29:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404f2d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404f31:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404f35:	e8 82 3f 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p1 == *cast(uint *)p2;
  404f3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404f3e:	8b 10                	mov    (%rax),%edx
  404f40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404f44:	8b 00                	mov    (%rax),%eax
  404f46:	39 c2                	cmp    %eax,%edx
  404f48:	0f 94 c0             	sete   %al
  404f4b:	0f b6 c0             	movzbl %al,%eax
    }
  404f4e:	c9                   	leaveq 
  404f4f:	c3                   	retq   

0000000000404f50 <_D3std8typeinfo6ti_int10TypeInfo_i7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  404f50:	55                   	push   %rbp
  404f51:	48 89 e5             	mov    %rsp,%rbp
  404f54:	48 83 ec 20          	sub    $0x20,%rsp
  404f58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404f5c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404f60:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404f64:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404f68:	e8 4f 3f 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	if (*cast(int*) p1 < *cast(int*) p2)
  404f6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404f71:	8b 10                	mov    (%rax),%edx
  404f73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404f77:	8b 00                	mov    (%rax),%eax
  404f79:	39 c2                	cmp    %eax,%edx
  404f7b:	7d 09                	jge    404f86 <_D3std8typeinfo6ti_int10TypeInfo_i7compareMFPvPvZi+0x36>
	    return -1;
  404f7d:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  404f84:	eb 20                	jmp    404fa6 <_D3std8typeinfo6ti_int10TypeInfo_i7compareMFPvPvZi+0x56>
	else if (*cast(int*) p1 > *cast(int*) p2)
  404f86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404f8a:	8b 10                	mov    (%rax),%edx
  404f8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404f90:	8b 00                	mov    (%rax),%eax
  404f92:	39 c2                	cmp    %eax,%edx
  404f94:	7e 09                	jle    404f9f <_D3std8typeinfo6ti_int10TypeInfo_i7compareMFPvPvZi+0x4f>
	    return 1;
  404f96:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  404f9d:	eb 07                	jmp    404fa6 <_D3std8typeinfo6ti_int10TypeInfo_i7compareMFPvPvZi+0x56>
	return 0;
  404f9f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  404fa6:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    }
  404fa9:	c9                   	leaveq 
  404faa:	c3                   	retq   

0000000000404fab <_D3std8typeinfo6ti_int10TypeInfo_i5tsizeMFZm>:

    size_t tsize()
  404fab:	55                   	push   %rbp
  404fac:	48 89 e5             	mov    %rsp,%rbp
  404faf:	48 83 ec 10          	sub    $0x10,%rsp
  404fb3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404fb7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404fbb:	e8 fc 3e 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return int.sizeof;
  404fc0:	b8 04 00 00 00       	mov    $0x4,%eax
    }
  404fc5:	c9                   	leaveq 
  404fc6:	c3                   	retq   

0000000000404fc7 <_D3std8typeinfo6ti_int10TypeInfo_i4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  404fc7:	55                   	push   %rbp
  404fc8:	48 89 e5             	mov    %rsp,%rbp
  404fcb:	48 83 ec 30          	sub    $0x30,%rsp
  404fcf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404fd3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  404fd7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  404fdb:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  404fdf:	e8 d8 3e 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	int t;
  404fe4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	t = *cast(int *)p1;
  404feb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  404fef:	8b 00                	mov    (%rax),%eax
  404ff1:	89 45 fc             	mov    %eax,-0x4(%rbp)
	*cast(int *)p1 = *cast(int *)p2;
  404ff4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  404ff8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404ffc:	8b 00                	mov    (%rax),%eax
  404ffe:	89 02                	mov    %eax,(%rdx)
	*cast(int *)p2 = t;
  405000:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405004:	8b 45 fc             	mov    -0x4(%rbp),%eax
  405007:	89 02                	mov    %eax,(%rdx)
    }
  405009:	c9                   	leaveq 
  40500a:	c3                   	retq   
  40500b:	90                   	nop    

000000000040500c <_D3std8typeinfo8ti_ireal10TypeInfo_j8toStringMFZAa>:

private import std.typeinfo.ti_real;

class TypeInfo_j : TypeInfo_e
{
    char[] toString() { return "ireal"; }
  40500c:	55                   	push   %rbp
  40500d:	48 89 e5             	mov    %rsp,%rbp
  405010:	53                   	push   %rbx
  405011:	48 83 ec 08          	sub    $0x8,%rsp
  405015:	48 89 fb             	mov    %rdi,%rbx
  405018:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40501c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405020:	e8 97 3e 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  405025:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  40502c:	48 c7 43 08 00 0a 41 	movq   $0x410a00,0x8(%rbx)
  405033:	00 
  405034:	48 89 d8             	mov    %rbx,%rax
  405037:	48 83 c4 08          	add    $0x8,%rsp
  40503b:	5b                   	pop    %rbx
  40503c:	c9                   	leaveq 
  40503d:	c3                   	retq   
  40503e:	90                   	nop    
  40503f:	90                   	nop    

0000000000405040 <_D3std8typeinfo7ti_long10TypeInfo_l8toStringMFZAa>:

module std.typeinfo.ti_long;

class TypeInfo_l : TypeInfo
{
    char[] toString() { return "long"; }
  405040:	55                   	push   %rbp
  405041:	48 89 e5             	mov    %rsp,%rbp
  405044:	53                   	push   %rbx
  405045:	48 83 ec 08          	sub    $0x8,%rsp
  405049:	48 89 fb             	mov    %rdi,%rbx
  40504c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405050:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405054:	e8 63 3e 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  405059:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  405060:	48 c7 43 08 c0 0a 41 	movq   $0x410ac0,0x8(%rbx)
  405067:	00 
  405068:	48 89 d8             	mov    %rbx,%rax
  40506b:	48 83 c4 08          	add    $0x8,%rsp
  40506f:	5b                   	pop    %rbx
  405070:	c9                   	leaveq 
  405071:	c3                   	retq   

0000000000405072 <_D3std8typeinfo7ti_long10TypeInfo_l7getHashMFPvZm>:

    hash_t getHash(void *p)
  405072:	55                   	push   %rbp
  405073:	48 89 e5             	mov    %rsp,%rbp
  405076:	48 83 ec 10          	sub    $0x10,%rsp
  40507a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40507e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405082:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405086:	e8 31 3e 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p + (cast(uint *)p)[1];
  40508b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40508f:	8b 08                	mov    (%rax),%ecx
  405091:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  405095:	b8 04 00 00 00       	mov    $0x4,%eax
  40509a:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40509e:	8b 00                	mov    (%rax),%eax
  4050a0:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  4050a3:	89 c0                	mov    %eax,%eax
    }
  4050a5:	c9                   	leaveq 
  4050a6:	c3                   	retq   

00000000004050a7 <_D3std8typeinfo7ti_long10TypeInfo_l6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4050a7:	55                   	push   %rbp
  4050a8:	48 89 e5             	mov    %rsp,%rbp
  4050ab:	48 83 ec 20          	sub    $0x20,%rsp
  4050af:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4050b3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4050b7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4050bb:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4050bf:	e8 f8 3d 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(long *)p1 == *cast(long *)p2;
  4050c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4050c8:	48 8b 10             	mov    (%rax),%rdx
  4050cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4050cf:	48 8b 00             	mov    (%rax),%rax
  4050d2:	48 39 c2             	cmp    %rax,%rdx
  4050d5:	0f 94 c0             	sete   %al
  4050d8:	0f b6 c0             	movzbl %al,%eax
    }
  4050db:	c9                   	leaveq 
  4050dc:	c3                   	retq   

00000000004050dd <_D3std8typeinfo7ti_long10TypeInfo_l7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4050dd:	55                   	push   %rbp
  4050de:	48 89 e5             	mov    %rsp,%rbp
  4050e1:	48 83 ec 20          	sub    $0x20,%rsp
  4050e5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4050e9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4050ed:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4050f1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4050f5:	e8 c2 3d 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	if (*cast(long *)p1 < *cast(long *)p2)
  4050fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4050fe:	48 8b 10             	mov    (%rax),%rdx
  405101:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405105:	48 8b 00             	mov    (%rax),%rax
  405108:	48 39 c2             	cmp    %rax,%rdx
  40510b:	7d 09                	jge    405116 <_D3std8typeinfo7ti_long10TypeInfo_l7compareMFPvPvZi+0x39>
	    return -1;
  40510d:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  405114:	eb 23                	jmp    405139 <_D3std8typeinfo7ti_long10TypeInfo_l7compareMFPvPvZi+0x5c>
	else if (*cast(long *)p1 > *cast(long *)p2)
  405116:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40511a:	48 8b 10             	mov    (%rax),%rdx
  40511d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405121:	48 8b 00             	mov    (%rax),%rax
  405124:	48 39 c2             	cmp    %rax,%rdx
  405127:	7e 09                	jle    405132 <_D3std8typeinfo7ti_long10TypeInfo_l7compareMFPvPvZi+0x55>
	    return 1;
  405129:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  405130:	eb 07                	jmp    405139 <_D3std8typeinfo7ti_long10TypeInfo_l7compareMFPvPvZi+0x5c>
	return 0;
  405132:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  405139:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    }
  40513c:	c9                   	leaveq 
  40513d:	c3                   	retq   

000000000040513e <_D3std8typeinfo7ti_long10TypeInfo_l5tsizeMFZm>:

    size_t tsize()
  40513e:	55                   	push   %rbp
  40513f:	48 89 e5             	mov    %rsp,%rbp
  405142:	48 83 ec 10          	sub    $0x10,%rsp
  405146:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40514a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40514e:	e8 69 3d 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return long.sizeof;
  405153:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  405158:	c9                   	leaveq 
  405159:	c3                   	retq   

000000000040515a <_D3std8typeinfo7ti_long10TypeInfo_l4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  40515a:	55                   	push   %rbp
  40515b:	48 89 e5             	mov    %rsp,%rbp
  40515e:	48 83 ec 30          	sub    $0x30,%rsp
  405162:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405166:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40516a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40516e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405172:	e8 45 3d 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	long t;
  405177:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40517e:	00 

	t = *cast(long *)p1;
  40517f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405183:	48 8b 00             	mov    (%rax),%rax
  405186:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(long *)p1 = *cast(long *)p2;
  40518a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40518e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405192:	48 8b 00             	mov    (%rax),%rax
  405195:	48 89 02             	mov    %rax,(%rdx)
	*cast(long *)p2 = t;
  405198:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40519c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4051a0:	48 89 02             	mov    %rax,(%rdx)
    }
  4051a3:	c9                   	leaveq 
  4051a4:	c3                   	retq   
  4051a5:	90                   	nop    
  4051a6:	90                   	nop    
  4051a7:	90                   	nop    

00000000004051a8 <_D3std8typeinfo6ti_ptr10TypeInfo_P7getHashMFPvZm>:

module std.typeinfo.ti_ptr;

class TypeInfo_P : TypeInfo
{
    hash_t getHash(void *p)
  4051a8:	55                   	push   %rbp
  4051a9:	48 89 e5             	mov    %rsp,%rbp
  4051ac:	48 83 ec 10          	sub    $0x10,%rsp
  4051b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4051b4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4051b8:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4051bc:	e8 fb 3c 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return cast(uint)*cast(void* *)p;
  4051c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4051c5:	48 8b 00             	mov    (%rax),%rax
  4051c8:	89 c0                	mov    %eax,%eax
    }
  4051ca:	c9                   	leaveq 
  4051cb:	c3                   	retq   

00000000004051cc <_D3std8typeinfo6ti_ptr10TypeInfo_P6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4051cc:	55                   	push   %rbp
  4051cd:	48 89 e5             	mov    %rsp,%rbp
  4051d0:	48 83 ec 20          	sub    $0x20,%rsp
  4051d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4051d8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4051dc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4051e0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4051e4:	e8 d3 3c 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(void* *)p1 == *cast(void* *)p2;
  4051e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4051ed:	48 8b 10             	mov    (%rax),%rdx
  4051f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4051f4:	48 8b 00             	mov    (%rax),%rax
  4051f7:	48 39 c2             	cmp    %rax,%rdx
  4051fa:	0f 94 c0             	sete   %al
  4051fd:	0f b6 c0             	movzbl %al,%eax
    }
  405200:	c9                   	leaveq 
  405201:	c3                   	retq   

0000000000405202 <_D3std8typeinfo6ti_ptr10TypeInfo_P7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  405202:	55                   	push   %rbp
  405203:	48 89 e5             	mov    %rsp,%rbp
  405206:	48 83 ec 30          	sub    $0x30,%rsp
  40520a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40520e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405212:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405216:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40521a:	e8 9d 3c 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	auto c = *cast(void* *)p1 - *cast(void* *)p2;
  40521f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405223:	48 8b 10             	mov    (%rax),%rdx
  405226:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40522a:	48 8b 00             	mov    (%rax),%rax
  40522d:	48 89 d1             	mov    %rdx,%rcx
  405230:	48 29 c1             	sub    %rax,%rcx
  405233:	48 89 c8             	mov    %rcx,%rax
  405236:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (c < 0)
  40523a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40523f:	79 09                	jns    40524a <_D3std8typeinfo6ti_ptr10TypeInfo_P7compareMFPvPvZi+0x48>
	    return -1;
  405241:	c7 45 d4 ff ff ff ff 	movl   $0xffffffff,-0x2c(%rbp)
  405248:	eb 17                	jmp    405261 <_D3std8typeinfo6ti_ptr10TypeInfo_P7compareMFPvPvZi+0x5f>
	else if (c > 0)
  40524a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40524f:	7e 09                	jle    40525a <_D3std8typeinfo6ti_ptr10TypeInfo_P7compareMFPvPvZi+0x58>
	    return 1;
  405251:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
  405258:	eb 07                	jmp    405261 <_D3std8typeinfo6ti_ptr10TypeInfo_P7compareMFPvPvZi+0x5f>
	return 0;
  40525a:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  405261:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    }
  405264:	c9                   	leaveq 
  405265:	c3                   	retq   

0000000000405266 <_D3std8typeinfo6ti_ptr10TypeInfo_P5tsizeMFZm>:

    size_t tsize()
  405266:	55                   	push   %rbp
  405267:	48 89 e5             	mov    %rsp,%rbp
  40526a:	48 83 ec 10          	sub    $0x10,%rsp
  40526e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405272:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405276:	e8 41 3c 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (void*).sizeof;
  40527b:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  405280:	c9                   	leaveq 
  405281:	c3                   	retq   

0000000000405282 <_D3std8typeinfo6ti_ptr10TypeInfo_P4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  405282:	55                   	push   %rbp
  405283:	48 89 e5             	mov    %rsp,%rbp
  405286:	48 83 ec 30          	sub    $0x30,%rsp
  40528a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40528e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405292:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405296:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40529a:	e8 1d 3c 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	void* t;
  40529f:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4052a6:	00 

	t = *cast(void* *)p1;
  4052a7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4052ab:	48 8b 00             	mov    (%rax),%rax
  4052ae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(void* *)p1 = *cast(void* *)p2;
  4052b2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4052b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4052ba:	48 8b 00             	mov    (%rax),%rax
  4052bd:	48 89 02             	mov    %rax,(%rdx)
	*cast(void* *)p2 = t;
  4052c0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4052c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4052c8:	48 89 02             	mov    %rax,(%rdx)
    }
  4052cb:	c9                   	leaveq 
  4052cc:	c3                   	retq   

00000000004052cd <_D3std8typeinfo6ti_ptr10TypeInfo_P5flagsMFZk>:

    uint flags()
  4052cd:	55                   	push   %rbp
  4052ce:	48 89 e5             	mov    %rsp,%rbp
  4052d1:	48 83 ec 10          	sub    $0x10,%rsp
  4052d5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4052d9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4052dd:	e8 da 3b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  4052e2:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  4052e7:	c9                   	leaveq 
  4052e8:	c3                   	retq   
  4052e9:	90                   	nop    
  4052ea:	90                   	nop    
  4052eb:	90                   	nop    

00000000004052ec <_D3std8typeinfo7ti_real10TypeInfo_e8toStringMFZAa>:
import kernel.core.system;
//private import std.math;

class TypeInfo_e : TypeInfo
{
    char[] toString() { return "real"; }
  4052ec:	55                   	push   %rbp
  4052ed:	48 89 e5             	mov    %rsp,%rbp
  4052f0:	53                   	push   %rbx
  4052f1:	48 83 ec 08          	sub    $0x8,%rsp
  4052f5:	48 89 fb             	mov    %rdi,%rbx
  4052f8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4052fc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405300:	e8 b7 3b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  405305:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  40530c:	48 c7 43 08 20 0c 41 	movq   $0x410c20,0x8(%rbx)
  405313:	00 
  405314:	48 89 d8             	mov    %rbx,%rax
  405317:	48 83 c4 08          	add    $0x8,%rsp
  40531b:	5b                   	pop    %rbx
  40531c:	c9                   	leaveq 
  40531d:	c3                   	retq   

000000000040531e <_D3std8typeinfo7ti_real10TypeInfo_e7getHashMFPvZm>:

    hash_t getHash(void *p)
  40531e:	55                   	push   %rbp
  40531f:	48 89 e5             	mov    %rsp,%rbp
  405322:	48 83 ec 10          	sub    $0x10,%rsp
  405326:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40532a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40532e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405332:	e8 85 3b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cast(uint *)p)[0] + (cast(uint *)p)[1] + (cast(ushort *)p)[4];
  405337:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40533b:	b8 00 00 00 00       	mov    $0x0,%eax
  405340:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  405344:	8b 08                	mov    (%rax),%ecx
  405346:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40534a:	b8 04 00 00 00       	mov    $0x4,%eax
  40534f:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  405353:	8b 00                	mov    (%rax),%eax
  405355:	01 c1                	add    %eax,%ecx
  405357:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40535b:	b8 08 00 00 00       	mov    $0x8,%eax
  405360:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  405364:	0f b7 00             	movzwl (%rax),%eax
  405367:	0f b7 c0             	movzwl %ax,%eax
  40536a:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  40536d:	89 c0                	mov    %eax,%eax
    }
  40536f:	c9                   	leaveq 
  405370:	c3                   	retq   

0000000000405371 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi>:

    static int _equals(real f1, real f2)
  405371:	55                   	push   %rbp
  405372:	48 89 e5             	mov    %rsp,%rbp
  405375:	48 83 ec 20          	sub    $0x20,%rsp
    {
	return f1 == f2 ||
  405379:	db 6d 10             	fldt   0x10(%rbp)
  40537c:	db 6d 20             	fldt   0x20(%rbp)
  40537f:	d9 c9                	fxch   %st(1)
  405381:	df e9                	fucomip %st(1),%st
  405383:	df c0                	ffreep %st(0)
  405385:	7a 02                	jp     405389 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi+0x18>
  405387:	74 30                	je     4053b9 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi+0x48>
  405389:	48 8b 45 10          	mov    0x10(%rbp),%rax
  40538d:	8b 55 18             	mov    0x18(%rbp),%edx
  405390:	48 89 04 24          	mov    %rax,(%rsp)
  405394:	89 54 24 08          	mov    %edx,0x8(%rsp)
  405398:	e8 97 81 00 00       	callq  40d534 <_D6kernel4core6system5isnanFeZi>
  40539d:	85 c0                	test   %eax,%eax
  40539f:	74 1e                	je     4053bf <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi+0x4e>
  4053a1:	48 8b 45 20          	mov    0x20(%rbp),%rax
  4053a5:	8b 55 28             	mov    0x28(%rbp),%edx
  4053a8:	48 89 04 24          	mov    %rax,(%rsp)
  4053ac:	89 54 24 08          	mov    %edx,0x8(%rsp)
  4053b0:	e8 7f 81 00 00       	callq  40d534 <_D6kernel4core6system5isnanFeZi>
  4053b5:	85 c0                	test   %eax,%eax
  4053b7:	74 06                	je     4053bf <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi+0x4e>
  4053b9:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
  4053bd:	eb 04                	jmp    4053c3 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi+0x52>
  4053bf:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
  4053c3:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
		(isnan(f1) && isnan(f2));
    }
  4053c7:	c9                   	leaveq 
  4053c8:	c3                   	retq   

00000000004053c9 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi>:

    static int _compare(real d1, real d2)
  4053c9:	55                   	push   %rbp
  4053ca:	48 89 e5             	mov    %rsp,%rbp
  4053cd:	48 83 ec 20          	sub    $0x20,%rsp
    {
	if (d1 !<>= d2)		// if either are NaN
  4053d1:	db 6d 10             	fldt   0x10(%rbp)
  4053d4:	db 6d 20             	fldt   0x20(%rbp)
  4053d7:	df e9                	fucomip %st(1),%st
  4053d9:	df c0                	ffreep %st(0)
  4053db:	0f 9a c0             	setp   %al
  4053de:	84 c0                	test   %al,%al
  4053e0:	74 4b                	je     40542d <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x64>
	{
	    if (isnan(d1))
  4053e2:	48 8b 45 10          	mov    0x10(%rbp),%rax
  4053e6:	8b 55 18             	mov    0x18(%rbp),%edx
  4053e9:	48 89 04 24          	mov    %rax,(%rsp)
  4053ed:	89 54 24 08          	mov    %edx,0x8(%rsp)
  4053f1:	e8 3e 81 00 00       	callq  40d534 <_D6kernel4core6system5isnanFeZi>
  4053f6:	85 c0                	test   %eax,%eax
  4053f8:	74 2a                	je     405424 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x5b>
	    {	if (isnan(d2))
  4053fa:	48 8b 45 20          	mov    0x20(%rbp),%rax
  4053fe:	8b 55 28             	mov    0x28(%rbp),%edx
  405401:	48 89 04 24          	mov    %rax,(%rsp)
  405405:	89 54 24 08          	mov    %edx,0x8(%rsp)
  405409:	e8 26 81 00 00       	callq  40d534 <_D6kernel4core6system5isnanFeZi>
  40540e:	85 c0                	test   %eax,%eax
  405410:	74 09                	je     40541b <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x52>
		    return 0;
  405412:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  405419:	eb 57                	jmp    405472 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0xa9>
		return -1;
  40541b:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%rbp)
  405422:	eb 4e                	jmp    405472 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0xa9>
	    }
	    return 1;
  405424:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  40542b:	eb 45                	jmp    405472 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0xa9>
	}
	return (d1 == d2) ? 0 : ((d1 < d2) ? -1 : 1);
  40542d:	db 6d 10             	fldt   0x10(%rbp)
  405430:	db 6d 20             	fldt   0x20(%rbp)
  405433:	d9 c9                	fxch   %st(1)
  405435:	df e9                	fucomip %st(1),%st
  405437:	df c0                	ffreep %st(0)
  405439:	7a 02                	jp     40543d <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x74>
  40543b:	74 02                	je     40543f <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x76>
  40543d:	eb 09                	jmp    405448 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x7f>
  40543f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  405446:	eb 24                	jmp    40546c <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0xa3>
  405448:	db 6d 10             	fldt   0x10(%rbp)
  40544b:	db 6d 20             	fldt   0x20(%rbp)
  40544e:	df e9                	fucomip %st(1),%st
  405450:	df c0                	ffreep %st(0)
  405452:	77 02                	ja     405456 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x8d>
  405454:	eb 09                	jmp    40545f <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x96>
  405456:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  40545d:	eb 07                	jmp    405466 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x9d>
  40545f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  405466:	8b 45 fc             	mov    -0x4(%rbp),%eax
  405469:	89 45 f8             	mov    %eax,-0x8(%rbp)
  40546c:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40546f:	89 45 f4             	mov    %eax,-0xc(%rbp)
  405472:	8b 45 f4             	mov    -0xc(%rbp),%eax
    }
  405475:	c9                   	leaveq 
  405476:	c3                   	retq   

0000000000405477 <_D3std8typeinfo7ti_real10TypeInfo_e6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405477:	55                   	push   %rbp
  405478:	48 89 e5             	mov    %rsp,%rbp
  40547b:	53                   	push   %rbx
  40547c:	48 83 ec 48          	sub    $0x48,%rsp
  405480:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405484:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405488:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40548c:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405490:	e8 27 3a 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(real *)p1, *cast(real *)p2);
  405495:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405499:	48 8b 08             	mov    (%rax),%rcx
  40549c:	8b 58 08             	mov    0x8(%rax),%ebx
  40549f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4054a3:	8b 50 08             	mov    0x8(%rax),%edx
  4054a6:	48 8b 00             	mov    (%rax),%rax
  4054a9:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  4054ae:	89 5c 24 18          	mov    %ebx,0x18(%rsp)
  4054b2:	48 89 04 24          	mov    %rax,(%rsp)
  4054b6:	89 54 24 08          	mov    %edx,0x8(%rsp)
  4054ba:	e8 b2 fe ff ff       	callq  405371 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi>
    }
  4054bf:	48 83 c4 48          	add    $0x48,%rsp
  4054c3:	5b                   	pop    %rbx
  4054c4:	c9                   	leaveq 
  4054c5:	c3                   	retq   

00000000004054c6 <_D3std8typeinfo7ti_real10TypeInfo_e7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4054c6:	55                   	push   %rbp
  4054c7:	48 89 e5             	mov    %rsp,%rbp
  4054ca:	53                   	push   %rbx
  4054cb:	48 83 ec 48          	sub    $0x48,%rsp
  4054cf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4054d3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4054d7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4054db:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4054df:	e8 d8 39 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(real *)p1, *cast(real *)p2);
  4054e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4054e8:	48 8b 08             	mov    (%rax),%rcx
  4054eb:	8b 58 08             	mov    0x8(%rax),%ebx
  4054ee:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4054f2:	8b 50 08             	mov    0x8(%rax),%edx
  4054f5:	48 8b 00             	mov    (%rax),%rax
  4054f8:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  4054fd:	89 5c 24 18          	mov    %ebx,0x18(%rsp)
  405501:	48 89 04 24          	mov    %rax,(%rsp)
  405505:	89 54 24 08          	mov    %edx,0x8(%rsp)
  405509:	e8 bb fe ff ff       	callq  4053c9 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi>
    }
  40550e:	48 83 c4 48          	add    $0x48,%rsp
  405512:	5b                   	pop    %rbx
  405513:	c9                   	leaveq 
  405514:	c3                   	retq   

0000000000405515 <_D3std8typeinfo7ti_real10TypeInfo_e5tsizeMFZm>:

    size_t tsize()
  405515:	55                   	push   %rbp
  405516:	48 89 e5             	mov    %rsp,%rbp
  405519:	48 83 ec 10          	sub    $0x10,%rsp
  40551d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405521:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405525:	e8 92 39 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return real.sizeof;
  40552a:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  40552f:	c9                   	leaveq 
  405530:	c3                   	retq   

0000000000405531 <_D3std8typeinfo7ti_real10TypeInfo_e4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  405531:	55                   	push   %rbp
  405532:	48 89 e5             	mov    %rsp,%rbp
  405535:	48 83 ec 30          	sub    $0x30,%rsp
  405539:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40553d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405541:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405545:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405549:	e8 6e 39 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	real t;
  40554e:	48 b8 00 00 00 00 00 	mov    $0xc000000000000000,%rax
  405555:	00 00 c0 
  405558:	ba ff 7f 00 00       	mov    $0x7fff,%edx
  40555d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  405561:	89 55 f8             	mov    %edx,-0x8(%rbp)

	t = *cast(real *)p1;
  405564:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405568:	8b 50 08             	mov    0x8(%rax),%edx
  40556b:	48 8b 00             	mov    (%rax),%rax
  40556e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  405572:	89 55 f8             	mov    %edx,-0x8(%rbp)
	*cast(real *)p1 = *cast(real *)p2;
  405575:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  405579:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40557d:	8b 50 08             	mov    0x8(%rax),%edx
  405580:	48 8b 00             	mov    (%rax),%rax
  405583:	48 89 01             	mov    %rax,(%rcx)
  405586:	89 51 08             	mov    %edx,0x8(%rcx)
	*cast(real *)p2 = t;
  405589:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  40558d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405591:	8b 55 f8             	mov    -0x8(%rbp),%edx
  405594:	48 89 01             	mov    %rax,(%rcx)
  405597:	89 51 08             	mov    %edx,0x8(%rcx)
    }
  40559a:	c9                   	leaveq 
  40559b:	c3                   	retq   

000000000040559c <_D3std8typeinfo7ti_real10TypeInfo_e4initMFZAv>:

    void[] init()
  40559c:	55                   	push   %rbp
  40559d:	48 89 e5             	mov    %rsp,%rbp
  4055a0:	53                   	push   %rbx
  4055a1:	48 83 ec 28          	sub    $0x28,%rsp
  4055a5:	48 89 fb             	mov    %rdi,%rbx
  4055a8:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  4055ac:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4055b0:	e8 07 39 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {	static real r;

	return (cast(real *)&r)[0 .. 1];
  4055b5:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  4055bc:	00 
  4055bd:	48 c7 45 e8 e0 b0 41 	movq   $0x41b0e0,-0x18(%rbp)
  4055c4:	00 
  4055c5:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4055c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4055cd:	49 89 c0             	mov    %rax,%r8
  4055d0:	ba 10 00 00 00       	mov    $0x10,%edx
  4055d5:	be 01 00 00 00       	mov    $0x1,%esi
  4055da:	48 89 df             	mov    %rbx,%rdi
  4055dd:	e8 7d 7b 00 00       	callq  40d15f <_d_arraycast>
    }
  4055e2:	48 89 d8             	mov    %rbx,%rax
  4055e5:	48 83 c4 28          	add    $0x28,%rsp
  4055e9:	5b                   	pop    %rbx
  4055ea:	c9                   	leaveq 
  4055eb:	c3                   	retq   

00000000004055ec <_D3std8typeinfo8ti_short10TypeInfo_s8toStringMFZAa>:

module std.typeinfo.ti_short;

class TypeInfo_s : TypeInfo
{
    char[] toString() { return "short"; }
  4055ec:	55                   	push   %rbp
  4055ed:	48 89 e5             	mov    %rsp,%rbp
  4055f0:	53                   	push   %rbx
  4055f1:	48 83 ec 08          	sub    $0x8,%rsp
  4055f5:	48 89 fb             	mov    %rdi,%rbx
  4055f8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4055fc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405600:	e8 b7 38 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  405605:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  40560c:	48 c7 43 08 e0 0c 41 	movq   $0x410ce0,0x8(%rbx)
  405613:	00 
  405614:	48 89 d8             	mov    %rbx,%rax
  405617:	48 83 c4 08          	add    $0x8,%rsp
  40561b:	5b                   	pop    %rbx
  40561c:	c9                   	leaveq 
  40561d:	c3                   	retq   

000000000040561e <_D3std8typeinfo8ti_short10TypeInfo_s7getHashMFPvZm>:

    hash_t getHash(void *p)
  40561e:	55                   	push   %rbp
  40561f:	48 89 e5             	mov    %rsp,%rbp
  405622:	48 83 ec 10          	sub    $0x10,%rsp
  405626:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40562a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40562e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405632:	e8 85 38 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(short *)p;
  405637:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40563b:	0f b7 00             	movzwl (%rax),%eax
  40563e:	48 0f bf c0          	movswq %ax,%rax
    }
  405642:	c9                   	leaveq 
  405643:	c3                   	retq   

0000000000405644 <_D3std8typeinfo8ti_short10TypeInfo_s6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405644:	55                   	push   %rbp
  405645:	48 89 e5             	mov    %rsp,%rbp
  405648:	48 83 ec 20          	sub    $0x20,%rsp
  40564c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405650:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405654:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405658:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40565c:	e8 5b 38 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(short *)p1 == *cast(short *)p2;
  405661:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405665:	0f b7 10             	movzwl (%rax),%edx
  405668:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40566c:	0f b7 00             	movzwl (%rax),%eax
  40566f:	66 39 c2             	cmp    %ax,%dx
  405672:	0f 94 c0             	sete   %al
  405675:	0f b6 c0             	movzbl %al,%eax
    }
  405678:	c9                   	leaveq 
  405679:	c3                   	retq   

000000000040567a <_D3std8typeinfo8ti_short10TypeInfo_s7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  40567a:	55                   	push   %rbp
  40567b:	48 89 e5             	mov    %rsp,%rbp
  40567e:	48 83 ec 20          	sub    $0x20,%rsp
  405682:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405686:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40568a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40568e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405692:	e8 25 38 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(short *)p1 - *cast(short *)p2;
  405697:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40569b:	0f b7 00             	movzwl (%rax),%eax
  40569e:	0f bf d0             	movswl %ax,%edx
  4056a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4056a5:	0f b7 00             	movzwl (%rax),%eax
  4056a8:	98                   	cwtl   
  4056a9:	89 d1                	mov    %edx,%ecx
  4056ab:	29 c1                	sub    %eax,%ecx
  4056ad:	89 c8                	mov    %ecx,%eax
    }
  4056af:	c9                   	leaveq 
  4056b0:	c3                   	retq   

00000000004056b1 <_D3std8typeinfo8ti_short10TypeInfo_s5tsizeMFZm>:

    size_t tsize()
  4056b1:	55                   	push   %rbp
  4056b2:	48 89 e5             	mov    %rsp,%rbp
  4056b5:	48 83 ec 10          	sub    $0x10,%rsp
  4056b9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4056bd:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4056c1:	e8 f6 37 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return short.sizeof;
  4056c6:	b8 02 00 00 00       	mov    $0x2,%eax
    }
  4056cb:	c9                   	leaveq 
  4056cc:	c3                   	retq   

00000000004056cd <_D3std8typeinfo8ti_short10TypeInfo_s4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  4056cd:	55                   	push   %rbp
  4056ce:	48 89 e5             	mov    %rsp,%rbp
  4056d1:	48 83 ec 30          	sub    $0x30,%rsp
  4056d5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4056d9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4056dd:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4056e1:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4056e5:	e8 d2 37 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	short t;
  4056ea:	66 c7 45 fe 00 00    	movw   $0x0,-0x2(%rbp)

	t = *cast(short *)p1;
  4056f0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4056f4:	0f b7 00             	movzwl (%rax),%eax
  4056f7:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	*cast(short *)p1 = *cast(short *)p2;
  4056fb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4056ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405703:	0f b7 00             	movzwl (%rax),%eax
  405706:	66 89 02             	mov    %ax,(%rdx)
	*cast(short *)p2 = t;
  405709:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40570d:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  405711:	66 89 02             	mov    %ax,(%rdx)
    }
  405714:	c9                   	leaveq 
  405715:	c3                   	retq   
  405716:	90                   	nop    
  405717:	90                   	nop    

0000000000405718 <_D3std8typeinfo8ti_ubyte10TypeInfo_h8toStringMFZAa>:

module std.typeinfo.ti_ubyte;

class TypeInfo_h : TypeInfo
{
    char[] toString() { return "ubyte"; }
  405718:	55                   	push   %rbp
  405719:	48 89 e5             	mov    %rsp,%rbp
  40571c:	53                   	push   %rbx
  40571d:	48 83 ec 08          	sub    $0x8,%rsp
  405721:	48 89 fb             	mov    %rdi,%rbx
  405724:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405728:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40572c:	e8 8b 37 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  405731:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  405738:	48 c7 43 08 a0 0d 41 	movq   $0x410da0,0x8(%rbx)
  40573f:	00 
  405740:	48 89 d8             	mov    %rbx,%rax
  405743:	48 83 c4 08          	add    $0x8,%rsp
  405747:	5b                   	pop    %rbx
  405748:	c9                   	leaveq 
  405749:	c3                   	retq   

000000000040574a <_D3std8typeinfo8ti_ubyte10TypeInfo_h7getHashMFPvZm>:

    hash_t getHash(void *p)
  40574a:	55                   	push   %rbp
  40574b:	48 89 e5             	mov    %rsp,%rbp
  40574e:	48 83 ec 10          	sub    $0x10,%rsp
  405752:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405756:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40575a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40575e:	e8 59 37 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ubyte *)p;
  405763:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405767:	0f b6 00             	movzbl (%rax),%eax
  40576a:	0f b6 c0             	movzbl %al,%eax
    }
  40576d:	c9                   	leaveq 
  40576e:	c3                   	retq   

000000000040576f <_D3std8typeinfo8ti_ubyte10TypeInfo_h6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  40576f:	55                   	push   %rbp
  405770:	48 89 e5             	mov    %rsp,%rbp
  405773:	48 83 ec 20          	sub    $0x20,%rsp
  405777:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40577b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40577f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405783:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405787:	e8 30 37 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ubyte *)p1 == *cast(ubyte *)p2;
  40578c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405790:	0f b6 10             	movzbl (%rax),%edx
  405793:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405797:	0f b6 00             	movzbl (%rax),%eax
  40579a:	38 c2                	cmp    %al,%dl
  40579c:	0f 94 c0             	sete   %al
  40579f:	0f b6 c0             	movzbl %al,%eax
    }
  4057a2:	c9                   	leaveq 
  4057a3:	c3                   	retq   

00000000004057a4 <_D3std8typeinfo8ti_ubyte10TypeInfo_h7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4057a4:	55                   	push   %rbp
  4057a5:	48 89 e5             	mov    %rsp,%rbp
  4057a8:	48 83 ec 20          	sub    $0x20,%rsp
  4057ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4057b0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4057b4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4057b8:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4057bc:	e8 fb 36 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ubyte *)p1 - *cast(ubyte *)p2;
  4057c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4057c5:	0f b6 00             	movzbl (%rax),%eax
  4057c8:	0f b6 d0             	movzbl %al,%edx
  4057cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4057cf:	0f b6 00             	movzbl (%rax),%eax
  4057d2:	0f b6 c0             	movzbl %al,%eax
  4057d5:	89 d1                	mov    %edx,%ecx
  4057d7:	29 c1                	sub    %eax,%ecx
  4057d9:	89 c8                	mov    %ecx,%eax
    }
  4057db:	c9                   	leaveq 
  4057dc:	c3                   	retq   

00000000004057dd <_D3std8typeinfo8ti_ubyte10TypeInfo_h5tsizeMFZm>:

    size_t tsize()
  4057dd:	55                   	push   %rbp
  4057de:	48 89 e5             	mov    %rsp,%rbp
  4057e1:	48 83 ec 10          	sub    $0x10,%rsp
  4057e5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4057e9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4057ed:	e8 ca 36 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return ubyte.sizeof;
  4057f2:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  4057f7:	c9                   	leaveq 
  4057f8:	c3                   	retq   

00000000004057f9 <_D3std8typeinfo8ti_ubyte10TypeInfo_h4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  4057f9:	55                   	push   %rbp
  4057fa:	48 89 e5             	mov    %rsp,%rbp
  4057fd:	48 83 ec 30          	sub    $0x30,%rsp
  405801:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405805:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405809:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40580d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405811:	e8 a6 36 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ubyte t;
  405816:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)

	t = *cast(ubyte *)p1;
  40581a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40581e:	0f b6 00             	movzbl (%rax),%eax
  405821:	88 45 ff             	mov    %al,-0x1(%rbp)
	*cast(ubyte *)p1 = *cast(ubyte *)p2;
  405824:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405828:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40582c:	0f b6 00             	movzbl (%rax),%eax
  40582f:	88 02                	mov    %al,(%rdx)
	*cast(ubyte *)p2 = t;
  405831:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405835:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  405839:	88 02                	mov    %al,(%rdx)
    }
  40583b:	c9                   	leaveq 
  40583c:	c3                   	retq   

000000000040583d <_D3std8typeinfo8ti_ubyte10TypeInfo_b8toStringMFZAa>:
}

class TypeInfo_b : TypeInfo_h
{
    char[] toString() { return "bool"; }
  40583d:	55                   	push   %rbp
  40583e:	48 89 e5             	mov    %rsp,%rbp
  405841:	53                   	push   %rbx
  405842:	48 83 ec 08          	sub    $0x8,%rsp
  405846:	48 89 fb             	mov    %rdi,%rbx
  405849:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40584d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405851:	e8 66 36 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  405856:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  40585d:	48 c7 43 08 50 0e 41 	movq   $0x410e50,0x8(%rbx)
  405864:	00 
  405865:	48 89 d8             	mov    %rbx,%rax
  405868:	48 83 c4 08          	add    $0x8,%rsp
  40586c:	5b                   	pop    %rbx
  40586d:	c9                   	leaveq 
  40586e:	c3                   	retq   
  40586f:	90                   	nop    

0000000000405870 <_D3std8typeinfo7ti_uint10TypeInfo_k8toStringMFZAa>:

module std.typeinfo.ti_uint;

class TypeInfo_k : TypeInfo
{
    char[] toString() { return "uint"; }
  405870:	55                   	push   %rbp
  405871:	48 89 e5             	mov    %rsp,%rbp
  405874:	53                   	push   %rbx
  405875:	48 83 ec 08          	sub    $0x8,%rsp
  405879:	48 89 fb             	mov    %rdi,%rbx
  40587c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405880:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405884:	e8 33 36 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  405889:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  405890:	48 c7 43 08 00 0f 41 	movq   $0x410f00,0x8(%rbx)
  405897:	00 
  405898:	48 89 d8             	mov    %rbx,%rax
  40589b:	48 83 c4 08          	add    $0x8,%rsp
  40589f:	5b                   	pop    %rbx
  4058a0:	c9                   	leaveq 
  4058a1:	c3                   	retq   

00000000004058a2 <_D3std8typeinfo7ti_uint10TypeInfo_k7getHashMFPvZm>:

    hash_t getHash(void *p)
  4058a2:	55                   	push   %rbp
  4058a3:	48 89 e5             	mov    %rsp,%rbp
  4058a6:	48 83 ec 10          	sub    $0x10,%rsp
  4058aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4058ae:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4058b2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4058b6:	e8 01 36 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p;
  4058bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4058bf:	8b 00                	mov    (%rax),%eax
  4058c1:	89 c0                	mov    %eax,%eax
    }
  4058c3:	c9                   	leaveq 
  4058c4:	c3                   	retq   

00000000004058c5 <_D3std8typeinfo7ti_uint10TypeInfo_k6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4058c5:	55                   	push   %rbp
  4058c6:	48 89 e5             	mov    %rsp,%rbp
  4058c9:	48 83 ec 20          	sub    $0x20,%rsp
  4058cd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4058d1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4058d5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4058d9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4058dd:	e8 da 35 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p1 == *cast(uint *)p2;
  4058e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4058e6:	8b 10                	mov    (%rax),%edx
  4058e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4058ec:	8b 00                	mov    (%rax),%eax
  4058ee:	39 c2                	cmp    %eax,%edx
  4058f0:	0f 94 c0             	sete   %al
  4058f3:	0f b6 c0             	movzbl %al,%eax
    }
  4058f6:	c9                   	leaveq 
  4058f7:	c3                   	retq   

00000000004058f8 <_D3std8typeinfo7ti_uint10TypeInfo_k7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4058f8:	55                   	push   %rbp
  4058f9:	48 89 e5             	mov    %rsp,%rbp
  4058fc:	48 83 ec 20          	sub    $0x20,%rsp
  405900:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405904:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405908:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40590c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405910:	e8 a7 35 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	if (*cast(uint*) p1 < *cast(uint*) p2)
  405915:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405919:	8b 10                	mov    (%rax),%edx
  40591b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40591f:	8b 00                	mov    (%rax),%eax
  405921:	39 c2                	cmp    %eax,%edx
  405923:	73 09                	jae    40592e <_D3std8typeinfo7ti_uint10TypeInfo_k7compareMFPvPvZi+0x36>
	    return -1;
  405925:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  40592c:	eb 20                	jmp    40594e <_D3std8typeinfo7ti_uint10TypeInfo_k7compareMFPvPvZi+0x56>
	else if (*cast(uint*) p1 > *cast(uint*) p2)
  40592e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405932:	8b 10                	mov    (%rax),%edx
  405934:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405938:	8b 00                	mov    (%rax),%eax
  40593a:	39 c2                	cmp    %eax,%edx
  40593c:	76 09                	jbe    405947 <_D3std8typeinfo7ti_uint10TypeInfo_k7compareMFPvPvZi+0x4f>
	    return 1;
  40593e:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  405945:	eb 07                	jmp    40594e <_D3std8typeinfo7ti_uint10TypeInfo_k7compareMFPvPvZi+0x56>
	return 0;
  405947:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40594e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    }
  405951:	c9                   	leaveq 
  405952:	c3                   	retq   

0000000000405953 <_D3std8typeinfo7ti_uint10TypeInfo_k5tsizeMFZm>:

    size_t tsize()
  405953:	55                   	push   %rbp
  405954:	48 89 e5             	mov    %rsp,%rbp
  405957:	48 83 ec 10          	sub    $0x10,%rsp
  40595b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40595f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405963:	e8 54 35 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return uint.sizeof;
  405968:	b8 04 00 00 00       	mov    $0x4,%eax
    }
  40596d:	c9                   	leaveq 
  40596e:	c3                   	retq   

000000000040596f <_D3std8typeinfo7ti_uint10TypeInfo_k4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  40596f:	55                   	push   %rbp
  405970:	48 89 e5             	mov    %rsp,%rbp
  405973:	48 83 ec 30          	sub    $0x30,%rsp
  405977:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40597b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40597f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405983:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405987:	e8 30 35 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	int t;
  40598c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	t = *cast(uint *)p1;
  405993:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405997:	8b 00                	mov    (%rax),%eax
  405999:	89 45 fc             	mov    %eax,-0x4(%rbp)
	*cast(uint *)p1 = *cast(uint *)p2;
  40599c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4059a0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4059a4:	8b 00                	mov    (%rax),%eax
  4059a6:	89 02                	mov    %eax,(%rdx)
	*cast(uint *)p2 = t;
  4059a8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4059ac:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4059af:	89 02                	mov    %eax,(%rdx)
    }
  4059b1:	c9                   	leaveq 
  4059b2:	c3                   	retq   
  4059b3:	90                   	nop    

00000000004059b4 <_D3std8typeinfo8ti_ulong10TypeInfo_m8toStringMFZAa>:

module std.typeinfo.ti_ulong;

class TypeInfo_m : TypeInfo
{
    char[] toString() { return "ulong"; }
  4059b4:	55                   	push   %rbp
  4059b5:	48 89 e5             	mov    %rsp,%rbp
  4059b8:	53                   	push   %rbx
  4059b9:	48 83 ec 08          	sub    $0x8,%rsp
  4059bd:	48 89 fb             	mov    %rdi,%rbx
  4059c0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4059c4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4059c8:	e8 ef 34 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  4059cd:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  4059d4:	48 c7 43 08 c0 0f 41 	movq   $0x410fc0,0x8(%rbx)
  4059db:	00 
  4059dc:	48 89 d8             	mov    %rbx,%rax
  4059df:	48 83 c4 08          	add    $0x8,%rsp
  4059e3:	5b                   	pop    %rbx
  4059e4:	c9                   	leaveq 
  4059e5:	c3                   	retq   

00000000004059e6 <_D3std8typeinfo8ti_ulong10TypeInfo_m7getHashMFPvZm>:

    hash_t getHash(void *p)
  4059e6:	55                   	push   %rbp
  4059e7:	48 89 e5             	mov    %rsp,%rbp
  4059ea:	48 83 ec 10          	sub    $0x10,%rsp
  4059ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4059f2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4059f6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4059fa:	e8 bd 34 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p + (cast(uint *)p)[1];
  4059ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405a03:	8b 08                	mov    (%rax),%ecx
  405a05:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  405a09:	b8 04 00 00 00       	mov    $0x4,%eax
  405a0e:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  405a12:	8b 00                	mov    (%rax),%eax
  405a14:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  405a17:	89 c0                	mov    %eax,%eax
    }
  405a19:	c9                   	leaveq 
  405a1a:	c3                   	retq   

0000000000405a1b <_D3std8typeinfo8ti_ulong10TypeInfo_m6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405a1b:	55                   	push   %rbp
  405a1c:	48 89 e5             	mov    %rsp,%rbp
  405a1f:	48 83 ec 20          	sub    $0x20,%rsp
  405a23:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405a27:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405a2b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405a2f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405a33:	e8 84 34 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ulong *)p1 == *cast(ulong *)p2;
  405a38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405a3c:	48 8b 10             	mov    (%rax),%rdx
  405a3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405a43:	48 8b 00             	mov    (%rax),%rax
  405a46:	48 39 c2             	cmp    %rax,%rdx
  405a49:	0f 94 c0             	sete   %al
  405a4c:	0f b6 c0             	movzbl %al,%eax
    }
  405a4f:	c9                   	leaveq 
  405a50:	c3                   	retq   

0000000000405a51 <_D3std8typeinfo8ti_ulong10TypeInfo_m7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  405a51:	55                   	push   %rbp
  405a52:	48 89 e5             	mov    %rsp,%rbp
  405a55:	48 83 ec 20          	sub    $0x20,%rsp
  405a59:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405a5d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405a61:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405a65:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405a69:	e8 4e 34 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	if (*cast(ulong *)p1 < *cast(ulong *)p2)
  405a6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405a72:	48 8b 10             	mov    (%rax),%rdx
  405a75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405a79:	48 8b 00             	mov    (%rax),%rax
  405a7c:	48 39 c2             	cmp    %rax,%rdx
  405a7f:	73 09                	jae    405a8a <_D3std8typeinfo8ti_ulong10TypeInfo_m7compareMFPvPvZi+0x39>
	    return -1;
  405a81:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  405a88:	eb 23                	jmp    405aad <_D3std8typeinfo8ti_ulong10TypeInfo_m7compareMFPvPvZi+0x5c>
	else if (*cast(ulong *)p1 > *cast(ulong *)p2)
  405a8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405a8e:	48 8b 10             	mov    (%rax),%rdx
  405a91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405a95:	48 8b 00             	mov    (%rax),%rax
  405a98:	48 39 c2             	cmp    %rax,%rdx
  405a9b:	76 09                	jbe    405aa6 <_D3std8typeinfo8ti_ulong10TypeInfo_m7compareMFPvPvZi+0x55>
	    return 1;
  405a9d:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  405aa4:	eb 07                	jmp    405aad <_D3std8typeinfo8ti_ulong10TypeInfo_m7compareMFPvPvZi+0x5c>
	return 0;
  405aa6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  405aad:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    }
  405ab0:	c9                   	leaveq 
  405ab1:	c3                   	retq   

0000000000405ab2 <_D3std8typeinfo8ti_ulong10TypeInfo_m5tsizeMFZm>:

    size_t tsize()
  405ab2:	55                   	push   %rbp
  405ab3:	48 89 e5             	mov    %rsp,%rbp
  405ab6:	48 83 ec 10          	sub    $0x10,%rsp
  405aba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405abe:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405ac2:	e8 f5 33 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return ulong.sizeof;
  405ac7:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  405acc:	c9                   	leaveq 
  405acd:	c3                   	retq   

0000000000405ace <_D3std8typeinfo8ti_ulong10TypeInfo_m4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  405ace:	55                   	push   %rbp
  405acf:	48 89 e5             	mov    %rsp,%rbp
  405ad2:	48 83 ec 30          	sub    $0x30,%rsp
  405ad6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405ada:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405ade:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405ae2:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405ae6:	e8 d1 33 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ulong t;
  405aeb:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  405af2:	00 

	t = *cast(ulong *)p1;
  405af3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405af7:	48 8b 00             	mov    (%rax),%rax
  405afa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(ulong *)p1 = *cast(ulong *)p2;
  405afe:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405b02:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405b06:	48 8b 00             	mov    (%rax),%rax
  405b09:	48 89 02             	mov    %rax,(%rdx)
	*cast(ulong *)p2 = t;
  405b0c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405b10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405b14:	48 89 02             	mov    %rax,(%rdx)
    }
  405b17:	c9                   	leaveq 
  405b18:	c3                   	retq   
  405b19:	90                   	nop    
  405b1a:	90                   	nop    
  405b1b:	90                   	nop    

0000000000405b1c <_D3std8typeinfo9ti_ushort10TypeInfo_t8toStringMFZAa>:

module std.typeinfo.ti_ushort;

class TypeInfo_t : TypeInfo
{
    char[] toString() { return "ushort"; }
  405b1c:	55                   	push   %rbp
  405b1d:	48 89 e5             	mov    %rsp,%rbp
  405b20:	53                   	push   %rbx
  405b21:	48 83 ec 08          	sub    $0x8,%rsp
  405b25:	48 89 fb             	mov    %rdi,%rbx
  405b28:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405b2c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405b30:	e8 87 33 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  405b35:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  405b3c:	48 c7 43 08 80 10 41 	movq   $0x411080,0x8(%rbx)
  405b43:	00 
  405b44:	48 89 d8             	mov    %rbx,%rax
  405b47:	48 83 c4 08          	add    $0x8,%rsp
  405b4b:	5b                   	pop    %rbx
  405b4c:	c9                   	leaveq 
  405b4d:	c3                   	retq   

0000000000405b4e <_D3std8typeinfo9ti_ushort10TypeInfo_t7getHashMFPvZm>:

    hash_t getHash(void *p)
  405b4e:	55                   	push   %rbp
  405b4f:	48 89 e5             	mov    %rsp,%rbp
  405b52:	48 83 ec 10          	sub    $0x10,%rsp
  405b56:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405b5a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405b5e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405b62:	e8 55 33 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ushort *)p;
  405b67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405b6b:	0f b7 00             	movzwl (%rax),%eax
  405b6e:	0f b7 c0             	movzwl %ax,%eax
    }
  405b71:	c9                   	leaveq 
  405b72:	c3                   	retq   

0000000000405b73 <_D3std8typeinfo9ti_ushort10TypeInfo_t6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405b73:	55                   	push   %rbp
  405b74:	48 89 e5             	mov    %rsp,%rbp
  405b77:	48 83 ec 20          	sub    $0x20,%rsp
  405b7b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405b7f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405b83:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405b87:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405b8b:	e8 2c 33 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ushort *)p1 == *cast(ushort *)p2;
  405b90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405b94:	0f b7 10             	movzwl (%rax),%edx
  405b97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405b9b:	0f b7 00             	movzwl (%rax),%eax
  405b9e:	66 39 c2             	cmp    %ax,%dx
  405ba1:	0f 94 c0             	sete   %al
  405ba4:	0f b6 c0             	movzbl %al,%eax
    }
  405ba7:	c9                   	leaveq 
  405ba8:	c3                   	retq   

0000000000405ba9 <_D3std8typeinfo9ti_ushort10TypeInfo_t7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  405ba9:	55                   	push   %rbp
  405baa:	48 89 e5             	mov    %rsp,%rbp
  405bad:	48 83 ec 20          	sub    $0x20,%rsp
  405bb1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405bb5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405bb9:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405bbd:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405bc1:	e8 f6 32 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ushort *)p1 - *cast(ushort *)p2;
  405bc6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405bca:	0f b7 00             	movzwl (%rax),%eax
  405bcd:	0f b7 d0             	movzwl %ax,%edx
  405bd0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405bd4:	0f b7 00             	movzwl (%rax),%eax
  405bd7:	0f b7 c0             	movzwl %ax,%eax
  405bda:	89 d1                	mov    %edx,%ecx
  405bdc:	29 c1                	sub    %eax,%ecx
  405bde:	89 c8                	mov    %ecx,%eax
    }
  405be0:	c9                   	leaveq 
  405be1:	c3                   	retq   

0000000000405be2 <_D3std8typeinfo9ti_ushort10TypeInfo_t5tsizeMFZm>:

    size_t tsize()
  405be2:	55                   	push   %rbp
  405be3:	48 89 e5             	mov    %rsp,%rbp
  405be6:	48 83 ec 10          	sub    $0x10,%rsp
  405bea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405bee:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405bf2:	e8 c5 32 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return ushort.sizeof;
  405bf7:	b8 02 00 00 00       	mov    $0x2,%eax
    }
  405bfc:	c9                   	leaveq 
  405bfd:	c3                   	retq   

0000000000405bfe <_D3std8typeinfo9ti_ushort10TypeInfo_t4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  405bfe:	55                   	push   %rbp
  405bff:	48 89 e5             	mov    %rsp,%rbp
  405c02:	48 83 ec 30          	sub    $0x30,%rsp
  405c06:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405c0a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405c0e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405c12:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405c16:	e8 a1 32 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ushort t;
  405c1b:	66 c7 45 fe 00 00    	movw   $0x0,-0x2(%rbp)

	t = *cast(ushort *)p1;
  405c21:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405c25:	0f b7 00             	movzwl (%rax),%eax
  405c28:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	*cast(ushort *)p1 = *cast(ushort *)p2;
  405c2c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405c30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405c34:	0f b7 00             	movzwl (%rax),%eax
  405c37:	66 89 02             	mov    %ax,(%rdx)
	*cast(ushort *)p2 = t;
  405c3a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405c3e:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  405c42:	66 89 02             	mov    %ax,(%rdx)
    }
  405c45:	c9                   	leaveq 
  405c46:	c3                   	retq   
  405c47:	90                   	nop    

0000000000405c48 <_D3std8typeinfo7ti_void10TypeInfo_v8toStringMFZAa>:

module std.typeinfo.ti_void;

class TypeInfo_v : TypeInfo
{
    char[] toString() { return "void"; }
  405c48:	55                   	push   %rbp
  405c49:	48 89 e5             	mov    %rsp,%rbp
  405c4c:	53                   	push   %rbx
  405c4d:	48 83 ec 08          	sub    $0x8,%rsp
  405c51:	48 89 fb             	mov    %rdi,%rbx
  405c54:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405c58:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405c5c:	e8 5b 32 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  405c61:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  405c68:	48 c7 43 08 40 11 41 	movq   $0x411140,0x8(%rbx)
  405c6f:	00 
  405c70:	48 89 d8             	mov    %rbx,%rax
  405c73:	48 83 c4 08          	add    $0x8,%rsp
  405c77:	5b                   	pop    %rbx
  405c78:	c9                   	leaveq 
  405c79:	c3                   	retq   

0000000000405c7a <_D3std8typeinfo7ti_void10TypeInfo_v7getHashMFPvZm>:

    hash_t getHash(void *p)
  405c7a:	55                   	push   %rbp
  405c7b:	48 89 e5             	mov    %rsp,%rbp
  405c7e:	48 83 ec 20          	sub    $0x20,%rsp
  405c82:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405c86:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405c8a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405c8e:	e8 29 32 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	assert(0);
  405c93:	48 c7 45 f0 16 00 00 	movq   $0x16,-0x10(%rbp)
  405c9a:	00 
  405c9b:	48 c7 45 f8 45 11 41 	movq   $0x411145,-0x8(%rbp)
  405ca2:	00 
  405ca3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405ca7:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  405cab:	ba 0c 00 00 00       	mov    $0xc,%edx
  405cb0:	e8 5d 4c 00 00       	callq  40a912 <_d_assert>
    }
  405cb5:	c9                   	leaveq 
  405cb6:	c3                   	retq   

0000000000405cb7 <_D3std8typeinfo7ti_void10TypeInfo_v6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405cb7:	55                   	push   %rbp
  405cb8:	48 89 e5             	mov    %rsp,%rbp
  405cbb:	48 83 ec 20          	sub    $0x20,%rsp
  405cbf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405cc3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405cc7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405ccb:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405ccf:	e8 e8 31 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(byte *)p1 == *cast(byte *)p2;
  405cd4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405cd8:	0f b6 10             	movzbl (%rax),%edx
  405cdb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405cdf:	0f b6 00             	movzbl (%rax),%eax
  405ce2:	38 c2                	cmp    %al,%dl
  405ce4:	0f 94 c0             	sete   %al
  405ce7:	0f b6 c0             	movzbl %al,%eax
    }
  405cea:	c9                   	leaveq 
  405ceb:	c3                   	retq   

0000000000405cec <_D3std8typeinfo7ti_void10TypeInfo_v7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  405cec:	55                   	push   %rbp
  405ced:	48 89 e5             	mov    %rsp,%rbp
  405cf0:	48 83 ec 20          	sub    $0x20,%rsp
  405cf4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405cf8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405cfc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405d00:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405d04:	e8 b3 31 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(byte *)p1 - *cast(byte *)p2;
  405d09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405d0d:	0f b6 00             	movzbl (%rax),%eax
  405d10:	0f be d0             	movsbl %al,%edx
  405d13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405d17:	0f b6 00             	movzbl (%rax),%eax
  405d1a:	0f be c0             	movsbl %al,%eax
  405d1d:	89 d1                	mov    %edx,%ecx
  405d1f:	29 c1                	sub    %eax,%ecx
  405d21:	89 c8                	mov    %ecx,%eax
    }
  405d23:	c9                   	leaveq 
  405d24:	c3                   	retq   

0000000000405d25 <_D3std8typeinfo7ti_void10TypeInfo_v5tsizeMFZm>:

    size_t tsize()
  405d25:	55                   	push   %rbp
  405d26:	48 89 e5             	mov    %rsp,%rbp
  405d29:	48 83 ec 10          	sub    $0x10,%rsp
  405d2d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405d31:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405d35:	e8 82 31 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return void.sizeof;
  405d3a:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  405d3f:	c9                   	leaveq 
  405d40:	c3                   	retq   

0000000000405d41 <_D3std8typeinfo7ti_void10TypeInfo_v4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  405d41:	55                   	push   %rbp
  405d42:	48 89 e5             	mov    %rsp,%rbp
  405d45:	48 83 ec 30          	sub    $0x30,%rsp
  405d49:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405d4d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405d51:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405d55:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405d59:	e8 5e 31 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	byte t;
  405d5e:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)

	t = *cast(byte *)p1;
  405d62:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405d66:	0f b6 00             	movzbl (%rax),%eax
  405d69:	88 45 ff             	mov    %al,-0x1(%rbp)
	*cast(byte *)p1 = *cast(byte *)p2;
  405d6c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405d70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405d74:	0f b6 00             	movzbl (%rax),%eax
  405d77:	88 02                	mov    %al,(%rdx)
	*cast(byte *)p2 = t;
  405d79:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405d7d:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  405d81:	88 02                	mov    %al,(%rdx)
    }
  405d83:	c9                   	leaveq 
  405d84:	c3                   	retq   

0000000000405d85 <_D3std8typeinfo7ti_void10TypeInfo_v5flagsMFZk>:

    uint flags()
  405d85:	55                   	push   %rbp
  405d86:	48 89 e5             	mov    %rsp,%rbp
  405d89:	48 83 ec 10          	sub    $0x10,%rsp
  405d8d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405d91:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405d95:	e8 22 31 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  405d9a:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  405d9f:	c9                   	leaveq 
  405da0:	c3                   	retq   
  405da1:	90                   	nop    
  405da2:	90                   	nop    
  405da3:	90                   	nop    

0000000000405da4 <_D3std8typeinfo8ti_wchar10TypeInfo_u8toStringMFZAa>:
module std.typeinfo.ti_wchar;


class TypeInfo_u : TypeInfo
{
    char[] toString() { return "wchar"; }
  405da4:	55                   	push   %rbp
  405da5:	48 89 e5             	mov    %rsp,%rbp
  405da8:	53                   	push   %rbx
  405da9:	48 83 ec 08          	sub    $0x8,%rsp
  405dad:	48 89 fb             	mov    %rdi,%rbx
  405db0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405db4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405db8:	e8 ff 30 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  405dbd:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  405dc4:	48 c7 43 08 00 12 41 	movq   $0x411200,0x8(%rbx)
  405dcb:	00 
  405dcc:	48 89 d8             	mov    %rbx,%rax
  405dcf:	48 83 c4 08          	add    $0x8,%rsp
  405dd3:	5b                   	pop    %rbx
  405dd4:	c9                   	leaveq 
  405dd5:	c3                   	retq   

0000000000405dd6 <_D3std8typeinfo8ti_wchar10TypeInfo_u7getHashMFPvZm>:

    hash_t getHash(void *p)
  405dd6:	55                   	push   %rbp
  405dd7:	48 89 e5             	mov    %rsp,%rbp
  405dda:	48 83 ec 10          	sub    $0x10,%rsp
  405dde:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405de2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405de6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405dea:	e8 cd 30 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(wchar *)p;
  405def:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405df3:	0f b7 00             	movzwl (%rax),%eax
  405df6:	0f b7 c0             	movzwl %ax,%eax
    }
  405df9:	c9                   	leaveq 
  405dfa:	c3                   	retq   

0000000000405dfb <_D3std8typeinfo8ti_wchar10TypeInfo_u6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405dfb:	55                   	push   %rbp
  405dfc:	48 89 e5             	mov    %rsp,%rbp
  405dff:	48 83 ec 20          	sub    $0x20,%rsp
  405e03:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405e07:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405e0b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405e0f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405e13:	e8 a4 30 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(wchar *)p1 == *cast(wchar *)p2;
  405e18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405e1c:	0f b7 10             	movzwl (%rax),%edx
  405e1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405e23:	0f b7 00             	movzwl (%rax),%eax
  405e26:	66 39 c2             	cmp    %ax,%dx
  405e29:	0f 94 c0             	sete   %al
  405e2c:	0f b6 c0             	movzbl %al,%eax
    }
  405e2f:	c9                   	leaveq 
  405e30:	c3                   	retq   

0000000000405e31 <_D3std8typeinfo8ti_wchar10TypeInfo_u7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  405e31:	55                   	push   %rbp
  405e32:	48 89 e5             	mov    %rsp,%rbp
  405e35:	48 83 ec 20          	sub    $0x20,%rsp
  405e39:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405e3d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405e41:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405e45:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405e49:	e8 6e 30 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(wchar *)p1 - *cast(wchar *)p2;
  405e4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405e52:	0f b7 00             	movzwl (%rax),%eax
  405e55:	0f b7 d0             	movzwl %ax,%edx
  405e58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405e5c:	0f b7 00             	movzwl (%rax),%eax
  405e5f:	0f b7 c0             	movzwl %ax,%eax
  405e62:	89 d1                	mov    %edx,%ecx
  405e64:	29 c1                	sub    %eax,%ecx
  405e66:	89 c8                	mov    %ecx,%eax
    }
  405e68:	c9                   	leaveq 
  405e69:	c3                   	retq   

0000000000405e6a <_D3std8typeinfo8ti_wchar10TypeInfo_u5tsizeMFZm>:

    size_t tsize()
  405e6a:	55                   	push   %rbp
  405e6b:	48 89 e5             	mov    %rsp,%rbp
  405e6e:	48 83 ec 10          	sub    $0x10,%rsp
  405e72:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405e76:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405e7a:	e8 3d 30 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return wchar.sizeof;
  405e7f:	b8 02 00 00 00       	mov    $0x2,%eax
    }
  405e84:	c9                   	leaveq 
  405e85:	c3                   	retq   

0000000000405e86 <_D3std8typeinfo8ti_wchar10TypeInfo_u4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  405e86:	55                   	push   %rbp
  405e87:	48 89 e5             	mov    %rsp,%rbp
  405e8a:	48 83 ec 30          	sub    $0x30,%rsp
  405e8e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405e92:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405e96:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405e9a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405e9e:	e8 19 30 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {
	wchar t;
  405ea3:	66 c7 45 fe ff ff    	movw   $0xffff,-0x2(%rbp)

	t = *cast(wchar *)p1;
  405ea9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405ead:	0f b7 00             	movzwl (%rax),%eax
  405eb0:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	*cast(wchar *)p1 = *cast(wchar *)p2;
  405eb4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405eb8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405ebc:	0f b7 00             	movzwl (%rax),%eax
  405ebf:	66 89 02             	mov    %ax,(%rdx)
	*cast(wchar *)p2 = t;
  405ec2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405ec6:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  405eca:	66 89 02             	mov    %ax,(%rdx)
    }
  405ecd:	c9                   	leaveq 
  405ece:	c3                   	retq   

0000000000405ecf <_D3std8typeinfo8ti_wchar10TypeInfo_u4initMFZAv>:

    void[] init()
  405ecf:	55                   	push   %rbp
  405ed0:	48 89 e5             	mov    %rsp,%rbp
  405ed3:	53                   	push   %rbx
  405ed4:	48 83 ec 28          	sub    $0x28,%rsp
  405ed8:	48 89 fb             	mov    %rdi,%rbx
  405edb:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  405edf:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  405ee3:	e8 d4 2f 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
    {	static wchar c;

	return (cast(wchar *)&c)[0 .. 1];
  405ee8:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  405eef:	00 
  405ef0:	48 c7 45 e8 00 b6 41 	movq   $0x41b600,-0x18(%rbp)
  405ef7:	00 
  405ef8:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  405efc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405f00:	49 89 c0             	mov    %rax,%r8
  405f03:	ba 02 00 00 00       	mov    $0x2,%edx
  405f08:	be 01 00 00 00       	mov    $0x1,%esi
  405f0d:	48 89 df             	mov    %rbx,%rdi
  405f10:	e8 4a 72 00 00       	callq  40d15f <_d_arraycast>
    }
  405f15:	48 89 d8             	mov    %rbx,%rax
  405f18:	48 83 c4 28          	add    $0x28,%rsp
  405f1c:	5b                   	pop    %rbx
  405f1d:	c9                   	leaveq 
  405f1e:	c3                   	retq   
  405f1f:	90                   	nop    

0000000000405f20 <_D6object6Object8toStringMFZAa>:
class Object
{
	/**
	 * Convert Object to a human readable string.
	 */
	char[] toString()
  405f20:	55                   	push   %rbp
  405f21:	48 89 e5             	mov    %rsp,%rbp
  405f24:	53                   	push   %rbx
  405f25:	48 83 ec 08          	sub    $0x8,%rsp
  405f29:	48 89 fb             	mov    %rdi,%rbx
  405f2c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405f30:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405f34:	e8 83 2f 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return this.classinfo.name;
  405f39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405f3d:	48 8b 00             	mov    (%rax),%rax
  405f40:	48 8b 10             	mov    (%rax),%rdx
  405f43:	48 8b 42 20          	mov    0x20(%rdx),%rax
  405f47:	48 89 03             	mov    %rax,(%rbx)
  405f4a:	48 8b 42 28          	mov    0x28(%rdx),%rax
  405f4e:	48 89 43 08          	mov    %rax,0x8(%rbx)
	}
  405f52:	48 89 d8             	mov    %rbx,%rax
  405f55:	48 83 c4 08          	add    $0x8,%rsp
  405f59:	5b                   	pop    %rbx
  405f5a:	c9                   	leaveq 
  405f5b:	c3                   	retq   

0000000000405f5c <_D6object6Object6toHashMFZm>:

	/**
	 * Compute hash function for Object.
	 */
	hash_t toHash()
  405f5c:	55                   	push   %rbp
  405f5d:	48 89 e5             	mov    %rsp,%rbp
  405f60:	48 83 ec 10          	sub    $0x10,%rsp
  405f64:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405f68:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405f6c:	e8 4b 2f 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		// BUG: this prevents a compacting GC from working, needs to be fixed
		return cast(uint)cast(void *)this;
  405f71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405f75:	89 c0                	mov    %eax,%eax
	}
  405f77:	c9                   	leaveq 
  405f78:	c3                   	retq   

0000000000405f79 <_D6object6Object5opCmpMFC6ObjectZi>:
	 *	$(TR $(TD this &lt; obj) $(TD &lt; 0))
	 *	$(TR $(TD this == obj) $(TD 0))
	 *	$(TR $(TD this &gt; obj) $(TD &gt; 0))
	 *	)
	 */
	int opCmp(Object o)
  405f79:	55                   	push   %rbp
  405f7a:	48 89 e5             	mov    %rsp,%rbp
  405f7d:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  405f84:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  405f88:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  405f8c:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
  405f90:	e8 27 2f 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		// BUG: this prevents a compacting GC from working, needs to be fixed
		//return cast(int)cast(void *)this - cast(int)cast(void *)o;

		throw new Error("need opCmp for class " ~ this.classinfo.name);
  405f95:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  405f99:	48 8b 00             	mov    (%rax),%rax
  405f9c:	48 8b 10             	mov    (%rax),%rdx
  405f9f:	48 8b 42 20          	mov    0x20(%rdx),%rax
  405fa3:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  405fa7:	48 8b 42 28          	mov    0x28(%rdx),%rax
  405fab:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  405faf:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  405fb3:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  405fb7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405fbb:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  405fbf:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  405fc3:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  405fc7:	48 8b 00             	mov    (%rax),%rax
  405fca:	48 8b 10             	mov    (%rax),%rdx
  405fcd:	48 8b 42 20          	mov    0x20(%rdx),%rax
  405fd1:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  405fd5:	48 8b 42 28          	mov    0x28(%rdx),%rax
  405fd9:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  405fdd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  405fe1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  405fe5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  405fe9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  405fed:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  405ff1:	48 c7 45 d0 15 00 00 	movq   $0x15,-0x30(%rbp)
  405ff8:	00 
  405ff9:	48 c7 45 d8 d0 12 41 	movq   $0x4112d0,-0x28(%rbp)
  406000:	00 
  406001:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406005:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  406009:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40600d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  406011:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406015:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406019:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
  40601d:	48 89 34 24          	mov    %rsi,(%rsp)
  406021:	49 89 d1             	mov    %rdx,%r9
  406024:	49 89 c0             	mov    %rax,%r8
  406027:	ba 02 00 00 00       	mov    $0x2,%edx
  40602c:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  406033:	b8 00 00 00 00       	mov    $0x0,%eax
  406038:	e8 2e 42 00 00       	callq  40a26b <_d_arraycatnT>
  40603d:	48 c7 c7 c0 c0 41 00 	mov    $0x41c0c0,%rdi
  406044:	e8 2c 3d 00 00       	callq  409d75 <_d_newclass>
  406049:	48 89 c7             	mov    %rax,%rdi
  40604c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  406050:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  406054:	e8 e4 2d 00 00       	callq  408e3d <_D6object5Error5_ctorMFAaZC6object5Error>
  406059:	48 89 c7             	mov    %rax,%rdi
  40605c:	e8 cd 4b 00 00       	callq  40ac2e <_d_throw>
	}
  406061:	c9                   	leaveq 
  406062:	c3                   	retq   

0000000000406063 <_D6object6Object8opEqualsMFC6ObjectZi>:

	/**
	 * Returns !=0 if this object does have the same contents as obj.
	 */
	int opEquals(Object o)
  406063:	55                   	push   %rbp
  406064:	48 89 e5             	mov    %rsp,%rbp
  406067:	48 83 ec 10          	sub    $0x10,%rsp
  40606b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40606f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406073:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406077:	e8 40 2e 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return cast(int)(this is o);
  40607c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406080:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  406084:	0f 94 c0             	sete   %al
  406087:	0f b6 c0             	movzbl %al,%eax
	}
  40608a:	c9                   	leaveq 
  40608b:	c3                   	retq   

000000000040608c <_D6object9ClassInfo6createMFZC6Object>:
	}*/

	/********************
	 * Create instance of Object represented by 'this'.
	 */
	Object create()
  40608c:	55                   	push   %rbp
  40608d:	48 89 e5             	mov    %rsp,%rbp
  406090:	48 83 ec 20          	sub    $0x20,%rsp
  406094:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406098:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40609c:	e8 1b 2e 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		if (flags & 8 && !defaultConstructor)
  4060a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4060a5:	8b 40 68             	mov    0x68(%rax),%eax
  4060a8:	83 e0 08             	and    $0x8,%eax
  4060ab:	85 c0                	test   %eax,%eax
  4060ad:	74 22                	je     4060d1 <_D6object9ClassInfo6createMFZC6Object+0x45>
  4060af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4060b3:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  4060ba:	48 85 c0             	test   %rax,%rax
  4060bd:	0f 95 c0             	setne  %al
  4060c0:	83 f0 01             	xor    $0x1,%eax
  4060c3:	84 c0                	test   %al,%al
  4060c5:	74 0a                	je     4060d1 <_D6object9ClassInfo6createMFZC6Object+0x45>
			return null;
  4060c7:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  4060ce:	00 
  4060cf:	eb 44                	jmp    406115 <_D6object9ClassInfo6createMFZC6Object+0x89>
		Object o = _d_newclass(this);
  4060d1:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4060d5:	e8 9b 3c 00 00       	callq  409d75 <_d_newclass>
  4060da:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (flags & 8 && defaultConstructor)
  4060de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4060e2:	8b 40 68             	mov    0x68(%rax),%eax
  4060e5:	83 e0 08             	and    $0x8,%eax
  4060e8:	85 c0                	test   %eax,%eax
  4060ea:	74 21                	je     40610d <_D6object9ClassInfo6createMFZC6Object+0x81>
  4060ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4060f0:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  4060f7:	48 85 c0             	test   %rax,%rax
  4060fa:	74 11                	je     40610d <_D6object9ClassInfo6createMFZC6Object+0x81>
		{
			defaultConstructor(o);
  4060fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406100:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  406107:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40610b:	ff d0                	callq  *%rax
		}
		return o;
  40610d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406111:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  406115:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
	}
  406119:	c9                   	leaveq 
  40611a:	c3                   	retq   

000000000040611b <_D6object8TypeInfo6toHashMFZm>:
 * Can be retrieved for any type using a
 * <a href="../expression.html#typeidexpression">TypeidExpression</a>.
 */
class TypeInfo
{
	hash_t toHash()
  40611b:	55                   	push   %rbp
  40611c:	48 89 e5             	mov    %rsp,%rbp
  40611f:	48 83 ec 40          	sub    $0x40,%rsp
  406123:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  406127:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  40612b:	e8 8c 2d 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{	hash_t hash;
  406130:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  406137:	00 

		foreach (char c; this.toString())
  406138:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40613c:	48 8b 00             	mov    (%rax),%rax
  40613f:	48 83 c0 08          	add    $0x8,%rax
  406143:	48 8b 00             	mov    (%rax),%rax
  406146:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40614a:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
  40614e:	ff d0                	callq  *%rax
  406150:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406154:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  406158:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40615c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  406160:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406164:	48 03 45 c0          	add    -0x40(%rbp),%rax
  406168:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40616c:	0f 95 c0             	setne  %al
  40616f:	83 f0 01             	xor    $0x1,%eax
  406172:	84 c0                	test   %al,%al
  406174:	75 2b                	jne    4061a1 <_D6object8TypeInfo6toHashMFZm+0x86>
  406176:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40617a:	0f b6 00             	movzbl (%rax),%eax
  40617d:	88 45 ff             	mov    %al,-0x1(%rbp)
			hash = hash * 9 + c;
  406180:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406184:	48 89 d0             	mov    %rdx,%rax
  406187:	48 c1 e0 03          	shl    $0x3,%rax
  40618b:	48 8d 14 10          	lea    (%rax,%rdx,1),%rdx
  40618f:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  406193:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  406197:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40619b:	48 ff 45 f0          	incq   -0x10(%rbp)
  40619f:	eb bf                	jmp    406160 <_D6object8TypeInfo6toHashMFZm+0x45>
		return hash;
  4061a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  4061a5:	c9                   	leaveq 
  4061a6:	c3                   	retq   

00000000004061a7 <_D6object8TypeInfo5opCmpMFC6ObjectZi>:

	int opCmp(Object o)
  4061a7:	55                   	push   %rbp
  4061a8:	48 89 e5             	mov    %rsp,%rbp
  4061ab:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  4061b2:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  4061b6:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  4061ba:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  4061be:	e8 f9 2c 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		if (this is o)
  4061c3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4061c7:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
  4061cb:	75 0f                	jne    4061dc <_D6object8TypeInfo5opCmpMFC6ObjectZi+0x35>
			return 0;
  4061cd:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%rbp)
  4061d4:	00 00 00 
  4061d7:	e9 d6 00 00 00       	jmpq   4062b2 <_D6object8TypeInfo5opCmpMFC6ObjectZi+0x10b>
		TypeInfo ti = cast(TypeInfo)o;
  4061dc:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  4061e0:	48 c7 c6 00 b8 41 00 	mov    $0x41b800,%rsi
  4061e7:	e8 13 2f 00 00       	callq  4090ff <_d_dynamic_cast>
  4061ec:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (ti is null)
  4061f0:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4061f5:	75 0f                	jne    406206 <_D6object8TypeInfo5opCmpMFC6ObjectZi+0x5f>
			return 1;
  4061f7:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%rbp)
  4061fe:	00 00 00 
  406201:	e9 ac 00 00 00       	jmpq   4062b2 <_D6object8TypeInfo5opCmpMFC6ObjectZi+0x10b>
			
		char[] t = this.toString();
  406206:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40620a:	48 8b 00             	mov    (%rax),%rax
  40620d:	48 83 c0 08          	add    $0x8,%rax
  406211:	48 8b 00             	mov    (%rax),%rax
  406214:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  406218:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40621c:	ff d0                	callq  *%rax
  40621e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  406222:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  406226:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40622a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		char[] other = this.toString();
  40622e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  406232:	48 8b 00             	mov    (%rax),%rax
  406235:	48 83 c0 08          	add    $0x8,%rax
  406239:	48 8b 00             	mov    (%rax),%rax
  40623c:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  406240:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  406244:	ff d0                	callq  *%rax
  406246:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40624a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40624e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  406252:	48 89 45 c8          	mov    %rax,-0x38(%rbp)

		typeid(typeof(this.toString())).compare(&t, &other);
  406256:	48 8b 05 a3 96 00 00 	mov    0x96a3(%rip),%rax        # 40f900 <_D11TypeInfo_Aa6__initZ>
  40625d:	48 83 c0 38          	add    $0x38,%rax
  406261:	48 8b 00             	mov    (%rax),%rax
  406264:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  406268:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
  40626c:	48 c7 c7 00 f9 40 00 	mov    $0x40f900,%rdi
  406273:	ff d0                	callq  *%rax
  406275:	48 c7 45 d0 08 00 00 	movq   $0x8,-0x30(%rbp)
  40627c:	00 
  40627d:	48 c7 45 d8 80 14 41 	movq   $0x411480,-0x28(%rbp)
  406284:	00 
  406285:	48 c7 45 e0 19 00 00 	movq   $0x19,-0x20(%rbp)
  40628c:	00 
  40628d:	48 c7 45 e8 89 14 41 	movq   $0x411489,-0x18(%rbp)
  406294:	00 
  406295:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  406299:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  40629d:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  4062a1:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4062a5:	41 b8 60 01 00 00    	mov    $0x160,%r8d
  4062ab:	e8 8d 46 00 00       	callq  40a93d <_d_assert_msg>
	}
  4062b0:	eb 0c                	jmp    4062be <_D6object8TypeInfo5opCmpMFC6ObjectZi+0x117>
  4062b2:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  4062b8:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  4062be:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
  4062c4:	c9                   	leaveq 
  4062c5:	c3                   	retq   

00000000004062c6 <_D6object8TypeInfo8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  4062c6:	55                   	push   %rbp
  4062c7:	48 89 e5             	mov    %rsp,%rbp
  4062ca:	53                   	push   %rbx
  4062cb:	48 83 ec 68          	sub    $0x68,%rsp
  4062cf:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  4062d3:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  4062d7:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  4062db:	e8 dc 2b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		/* TypeInfo instances are singletons, but duplicates can exist
		 * across DLL's. Therefore, comparing for a name match is
		 * sufficient.
		 */
		if (this is o)
  4062e0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4062e4:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  4062e8:	75 0c                	jne    4062f6 <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0x30>
			return 1;
  4062ea:	c7 45 a8 01 00 00 00 	movl   $0x1,-0x58(%rbp)
  4062f1:	e9 af 00 00 00       	jmpq   4063a5 <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0xdf>
		TypeInfo ti = cast(TypeInfo)o;
  4062f6:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  4062fa:	48 c7 c6 00 b8 41 00 	mov    $0x41b800,%rsi
  406301:	e8 f9 2d 00 00       	callq  4090ff <_d_dynamic_cast>
  406306:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		return cast(int)(ti && this.toString() == ti.toString());
  40630a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  40630f:	0f 84 85 00 00 00    	je     40639a <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0xd4>
  406315:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406319:	48 8b 00             	mov    (%rax),%rax
  40631c:	48 83 c0 08          	add    $0x8,%rax
  406320:	48 8b 00             	mov    (%rax),%rax
  406323:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  406327:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
  40632b:	ff d0                	callq  *%rax
  40632d:	48 8b 5d c0          	mov    -0x40(%rbp),%rbx
  406331:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406335:	48 8b 00             	mov    (%rax),%rax
  406338:	48 83 c0 08          	add    $0x8,%rax
  40633c:	48 8b 00             	mov    (%rax),%rax
  40633f:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  406343:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
  406347:	ff d0                	callq  *%rax
  406349:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40634d:	48 39 c3             	cmp    %rax,%rbx
  406350:	75 48                	jne    40639a <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0xd4>
  406352:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  406356:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40635a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40635e:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  406362:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  406366:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  40636a:	fc                   	cld    
  40636b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40636f:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
  406373:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  406377:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40637b:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  40637f:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  406381:	0f 97 c2             	seta   %dl
  406384:	0f 92 c0             	setb   %al
  406387:	89 d1                	mov    %edx,%ecx
  406389:	28 c1                	sub    %al,%cl
  40638b:	89 c8                	mov    %ecx,%eax
  40638d:	0f be c0             	movsbl %al,%eax
  406390:	85 c0                	test   %eax,%eax
  406392:	75 06                	jne    40639a <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0xd4>
  406394:	c6 45 af 01          	movb   $0x1,-0x51(%rbp)
  406398:	eb 04                	jmp    40639e <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0xd8>
  40639a:	c6 45 af 00          	movb   $0x0,-0x51(%rbp)
  40639e:	0f b6 75 af          	movzbl -0x51(%rbp),%esi
  4063a2:	89 75 a8             	mov    %esi,-0x58(%rbp)
  4063a5:	8b 45 a8             	mov    -0x58(%rbp),%eax
	}
  4063a8:	48 83 c4 68          	add    $0x68,%rsp
  4063ac:	5b                   	pop    %rbx
  4063ad:	c9                   	leaveq 
  4063ae:	c3                   	retq   

00000000004063af <_D6object8TypeInfo7getHashMFPvZm>:

	/// Returns a hash of the instance of a type.
	hash_t getHash(void *p) { return cast(uint)p; }
  4063af:	55                   	push   %rbp
  4063b0:	48 89 e5             	mov    %rsp,%rbp
  4063b3:	48 83 ec 10          	sub    $0x10,%rsp
  4063b7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4063bb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4063bf:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4063c3:	e8 f4 2a 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  4063c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4063cc:	89 c0                	mov    %eax,%eax
  4063ce:	c9                   	leaveq 
  4063cf:	c3                   	retq   

00000000004063d0 <_D6object8TypeInfo6equalsMFPvPvZi>:

	/// Compares two instances for equality.
	int equals(void *p1, void *p2) { return cast(int)(p1 == p2); }
  4063d0:	55                   	push   %rbp
  4063d1:	48 89 e5             	mov    %rsp,%rbp
  4063d4:	48 83 ec 20          	sub    $0x20,%rsp
  4063d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4063dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4063e0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4063e4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4063e8:	e8 cf 2a 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  4063ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4063f1:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4063f5:	0f 94 c0             	sete   %al
  4063f8:	0f b6 c0             	movzbl %al,%eax
  4063fb:	c9                   	leaveq 
  4063fc:	c3                   	retq   

00000000004063fd <_D6object8TypeInfo7compareMFPvPvZi>:

	/// Compares two instances for &lt;, ==, or &gt;.
	int compare(void *p1, void *p2) { return 0; }
  4063fd:	55                   	push   %rbp
  4063fe:	48 89 e5             	mov    %rsp,%rbp
  406401:	48 83 ec 20          	sub    $0x20,%rsp
  406405:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406409:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40640d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  406411:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406415:	e8 a2 2a 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  40641a:	b8 00 00 00 00       	mov    $0x0,%eax
  40641f:	c9                   	leaveq 
  406420:	c3                   	retq   

0000000000406421 <_D6object8TypeInfo5tsizeMFZm>:

	/// Returns size of the type.
	size_t tsize() { return 0; }
  406421:	55                   	push   %rbp
  406422:	48 89 e5             	mov    %rsp,%rbp
  406425:	48 83 ec 10          	sub    $0x10,%rsp
  406429:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40642d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406431:	e8 86 2a 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  406436:	b8 00 00 00 00       	mov    $0x0,%eax
  40643b:	c9                   	leaveq 
  40643c:	c3                   	retq   

000000000040643d <_D6object8TypeInfo4swapMFPvPvZv>:

	/// Swaps two instances of the type.
	void swap(void *p1, void *p2)
  40643d:	55                   	push   %rbp
  40643e:	48 89 e5             	mov    %rsp,%rbp
  406441:	48 83 ec 40          	sub    $0x40,%rsp
  406445:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  406449:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40644d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  406451:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  406455:	e8 62 2a 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		size_t n = tsize();
  40645a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40645e:	48 8b 00             	mov    (%rax),%rax
  406461:	48 83 c0 40          	add    $0x40,%rax
  406465:	48 8b 00             	mov    (%rax),%rax
  406468:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  40646c:	ff d0                	callq  *%rax
  40646e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		for (size_t i = 0; i < n; i++)
  406472:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  406479:	00 
  40647a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40647e:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  406482:	0f 92 c0             	setb   %al
  406485:	83 f0 01             	xor    $0x1,%eax
  406488:	84 c0                	test   %al,%al
  40648a:	75 4a                	jne    4064d6 <_D6object8TypeInfo4swapMFPvPvZv+0x99>
		{	byte t;
  40648c:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)

			t = (cast(byte *)p1)[i];
  406490:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  406494:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406498:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40649c:	0f b6 00             	movzbl (%rax),%eax
  40649f:	88 45 ff             	mov    %al,-0x1(%rbp)
			(cast(byte *)p1)[i] = (cast(byte *)p2)[i];
  4064a2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4064a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4064aa:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  4064ae:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4064b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4064b6:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4064ba:	0f b6 00             	movzbl (%rax),%eax
  4064bd:	88 01                	mov    %al,(%rcx)
			(cast(byte *)p2)[i] = t;
  4064bf:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4064c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4064c7:	48 01 c2             	add    %rax,%rdx
  4064ca:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  4064ce:	88 02                	mov    %al,(%rdx)
  4064d0:	48 ff 45 f0          	incq   -0x10(%rbp)
  4064d4:	eb a4                	jmp    40647a <_D6object8TypeInfo4swapMFPvPvZv+0x3d>
		}
	}
  4064d6:	c9                   	leaveq 
  4064d7:	c3                   	retq   

00000000004064d8 <_D6object8TypeInfo4nextMFZC8TypeInfo>:

	/// Get TypeInfo for 'next' type, as defined by what kind of type this is,
	/// null if none.
	TypeInfo next() { return null; }
  4064d8:	55                   	push   %rbp
  4064d9:	48 89 e5             	mov    %rsp,%rbp
  4064dc:	48 83 ec 10          	sub    $0x10,%rsp
  4064e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4064e4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4064e8:	e8 cf 29 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  4064ed:	b8 00 00 00 00       	mov    $0x0,%eax
  4064f2:	c9                   	leaveq 
  4064f3:	c3                   	retq   

00000000004064f4 <_D6object8TypeInfo4initMFZAv>:

	/// Return default initializer, null if default initialize to 0
	void[] init() { return null; }
  4064f4:	55                   	push   %rbp
  4064f5:	48 89 e5             	mov    %rsp,%rbp
  4064f8:	53                   	push   %rbx
  4064f9:	48 83 ec 08          	sub    $0x8,%rsp
  4064fd:	48 89 fb             	mov    %rdi,%rbx
  406500:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406504:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  406508:	e8 af 29 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  40650d:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  406514:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  40651b:	00 
  40651c:	48 89 d8             	mov    %rbx,%rax
  40651f:	48 83 c4 08          	add    $0x8,%rsp
  406523:	5b                   	pop    %rbx
  406524:	c9                   	leaveq 
  406525:	c3                   	retq   

0000000000406526 <_D6object8TypeInfo5flagsMFZk>:

	/// Get flags for type: 1 means GC should scan for pointers
	uint flags() { return 0; }
  406526:	55                   	push   %rbp
  406527:	48 89 e5             	mov    %rsp,%rbp
  40652a:	48 83 ec 10          	sub    $0x10,%rsp
  40652e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406532:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406536:	e8 81 29 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  40653b:	b8 00 00 00 00       	mov    $0x0,%eax
  406540:	c9                   	leaveq 
  406541:	c3                   	retq   

0000000000406542 <_D6object8TypeInfo5offTiMFZAS6object14OffsetTypeInfo>:

	/// Get type information on the contents of the type; null if not available
	OffsetTypeInfo[] offTi() { return null; }
  406542:	55                   	push   %rbp
  406543:	48 89 e5             	mov    %rsp,%rbp
  406546:	53                   	push   %rbx
  406547:	48 83 ec 08          	sub    $0x8,%rsp
  40654b:	48 89 fb             	mov    %rdi,%rbx
  40654e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406552:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  406556:	e8 61 29 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  40655b:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  406562:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  406569:	00 
  40656a:	48 89 d8             	mov    %rbx,%rax
  40656d:	48 83 c4 08          	add    $0x8,%rsp
  406571:	5b                   	pop    %rbx
  406572:	c9                   	leaveq 
  406573:	c3                   	retq   

0000000000406574 <_D6object16TypeInfo_Typedef8toStringMFZAa>:
}

class TypeInfo_Typedef : TypeInfo
{
	char[] toString() { return name; }
  406574:	55                   	push   %rbp
  406575:	48 89 e5             	mov    %rsp,%rbp
  406578:	53                   	push   %rbx
  406579:	48 83 ec 08          	sub    $0x8,%rsp
  40657d:	48 89 fb             	mov    %rdi,%rbx
  406580:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406584:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  406588:	e8 2f 29 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  40658d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  406591:	48 8b 42 18          	mov    0x18(%rdx),%rax
  406595:	48 89 03             	mov    %rax,(%rbx)
  406598:	48 8b 42 20          	mov    0x20(%rdx),%rax
  40659c:	48 89 43 08          	mov    %rax,0x8(%rbx)
  4065a0:	48 89 d8             	mov    %rbx,%rax
  4065a3:	48 83 c4 08          	add    $0x8,%rsp
  4065a7:	5b                   	pop    %rbx
  4065a8:	c9                   	leaveq 
  4065a9:	c3                   	retq   

00000000004065aa <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  4065aa:	55                   	push   %rbp
  4065ab:	48 89 e5             	mov    %rsp,%rbp
  4065ae:	48 83 ec 40          	sub    $0x40,%rsp
  4065b2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4065b6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4065ba:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4065be:	e8 f9 28 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Typedef c;
  4065c3:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4065ca:	00 

		return cast(int)
  4065cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4065cf:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  4065d3:	0f 84 ad 00 00 00    	je     406686 <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xdc>
  4065d9:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  4065dd:	48 c7 c6 a0 b8 41 00 	mov    $0x41b8a0,%rsi
  4065e4:	e8 16 2b 00 00       	callq  4090ff <_d_dynamic_cast>
  4065e9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4065ed:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4065f2:	0f 84 94 00 00 00    	je     40668c <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xe2>
  4065f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4065fc:	48 8b 50 18          	mov    0x18(%rax),%rdx
  406600:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406604:	48 8b 40 18          	mov    0x18(%rax),%rax
  406608:	48 39 c2             	cmp    %rax,%rdx
  40660b:	75 7f                	jne    40668c <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xe2>
  40660d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406611:	48 8b 48 18          	mov    0x18(%rax),%rcx
  406615:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406619:	48 8b 50 20          	mov    0x20(%rax),%rdx
  40661d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406621:	48 8b 40 20          	mov    0x20(%rax),%rax
  406625:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  406629:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40662d:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  406631:	fc                   	cld    
  406632:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  406636:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  40663a:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40663e:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  406642:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  406646:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  406648:	0f 97 c2             	seta   %dl
  40664b:	0f 92 c0             	setb   %al
  40664e:	89 d1                	mov    %edx,%ecx
  406650:	28 c1                	sub    %al,%cl
  406652:	89 c8                	mov    %ecx,%eax
  406654:	0f be c0             	movsbl %al,%eax
  406657:	85 c0                	test   %eax,%eax
  406659:	75 31                	jne    40668c <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xe2>
  40665b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40665f:	48 8b 40 10          	mov    0x10(%rax),%rax
  406663:	48 8b 00             	mov    (%rax),%rax
  406666:	48 83 c0 20          	add    $0x20,%rax
  40666a:	48 8b 10             	mov    (%rax),%rdx
  40666d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406671:	48 8b 40 10          	mov    0x10(%rax),%rax
  406675:	48 89 c6             	mov    %rax,%rsi
  406678:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40667c:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406680:	ff d2                	callq  *%rdx
  406682:	85 c0                	test   %eax,%eax
  406684:	74 06                	je     40668c <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xe2>
  406686:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  40668a:	eb 04                	jmp    406690 <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xe6>
  40668c:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  406690:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				(this is o ||
				((c = cast(TypeInfo_Typedef)o) !is null &&
				 this.name == c.name &&
				 this.base == c.base));
	}
  406694:	c9                   	leaveq 
  406695:	c3                   	retq   

0000000000406696 <_D6object16TypeInfo_Typedef7getHashMFPvZm>:

	hash_t getHash(void *p) { return base.getHash(p); }
  406696:	55                   	push   %rbp
  406697:	48 89 e5             	mov    %rsp,%rbp
  40669a:	48 83 ec 10          	sub    $0x10,%rsp
  40669e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4066a2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4066a6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4066aa:	e8 0d 28 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  4066af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4066b3:	48 8b 40 10          	mov    0x10(%rax),%rax
  4066b7:	48 8b 00             	mov    (%rax),%rax
  4066ba:	48 83 c0 28          	add    $0x28,%rax
  4066be:	48 8b 10             	mov    (%rax),%rdx
  4066c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4066c5:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4066c9:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  4066cd:	ff d2                	callq  *%rdx
  4066cf:	c9                   	leaveq 
  4066d0:	c3                   	retq   

00000000004066d1 <_D6object16TypeInfo_Typedef6equalsMFPvPvZi>:
	int equals(void *p1, void *p2) { return base.equals(p1, p2); }
  4066d1:	55                   	push   %rbp
  4066d2:	48 89 e5             	mov    %rsp,%rbp
  4066d5:	48 83 ec 20          	sub    $0x20,%rsp
  4066d9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4066dd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4066e1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4066e5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4066e9:	e8 ce 27 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  4066ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4066f2:	48 8b 40 10          	mov    0x10(%rax),%rax
  4066f6:	48 8b 00             	mov    (%rax),%rax
  4066f9:	48 83 c0 30          	add    $0x30,%rax
  4066fd:	48 8b 08             	mov    (%rax),%rcx
  406700:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406704:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406708:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40670c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  406710:	ff d1                	callq  *%rcx
  406712:	c9                   	leaveq 
  406713:	c3                   	retq   

0000000000406714 <_D6object16TypeInfo_Typedef7compareMFPvPvZi>:
	int compare(void *p1, void *p2) { return base.compare(p1, p2); }
  406714:	55                   	push   %rbp
  406715:	48 89 e5             	mov    %rsp,%rbp
  406718:	48 83 ec 20          	sub    $0x20,%rsp
  40671c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406720:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406724:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  406728:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40672c:	e8 8b 27 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  406731:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406735:	48 8b 40 10          	mov    0x10(%rax),%rax
  406739:	48 8b 00             	mov    (%rax),%rax
  40673c:	48 83 c0 38          	add    $0x38,%rax
  406740:	48 8b 08             	mov    (%rax),%rcx
  406743:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406747:	48 8b 78 10          	mov    0x10(%rax),%rdi
  40674b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40674f:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  406753:	ff d1                	callq  *%rcx
  406755:	c9                   	leaveq 
  406756:	c3                   	retq   

0000000000406757 <_D6object16TypeInfo_Typedef5tsizeMFZm>:
	size_t tsize() { return base.tsize(); }
  406757:	55                   	push   %rbp
  406758:	48 89 e5             	mov    %rsp,%rbp
  40675b:	48 83 ec 10          	sub    $0x10,%rsp
  40675f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406763:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406767:	e8 50 27 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  40676c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406770:	48 8b 40 10          	mov    0x10(%rax),%rax
  406774:	48 8b 00             	mov    (%rax),%rax
  406777:	48 83 c0 40          	add    $0x40,%rax
  40677b:	48 8b 10             	mov    (%rax),%rdx
  40677e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406782:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406786:	ff d2                	callq  *%rdx
  406788:	c9                   	leaveq 
  406789:	c3                   	retq   

000000000040678a <_D6object16TypeInfo_Typedef4swapMFPvPvZv>:
	void swap(void *p1, void *p2) { return base.swap(p1, p2); }
  40678a:	55                   	push   %rbp
  40678b:	48 89 e5             	mov    %rsp,%rbp
  40678e:	48 83 ec 20          	sub    $0x20,%rsp
  406792:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406796:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40679a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40679e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4067a2:	e8 15 27 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  4067a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4067ab:	48 8b 40 10          	mov    0x10(%rax),%rax
  4067af:	48 8b 00             	mov    (%rax),%rax
  4067b2:	48 83 c0 48          	add    $0x48,%rax
  4067b6:	48 8b 08             	mov    (%rax),%rcx
  4067b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4067bd:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4067c1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4067c5:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  4067c9:	ff d1                	callq  *%rcx
  4067cb:	c9                   	leaveq 
  4067cc:	c3                   	retq   

00000000004067cd <_D6object16TypeInfo_Typedef4nextMFZC8TypeInfo>:

	TypeInfo next() { return base.next(); }
  4067cd:	55                   	push   %rbp
  4067ce:	48 89 e5             	mov    %rsp,%rbp
  4067d1:	48 83 ec 10          	sub    $0x10,%rsp
  4067d5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4067d9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4067dd:	e8 da 26 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  4067e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4067e6:	48 8b 40 10          	mov    0x10(%rax),%rax
  4067ea:	48 8b 00             	mov    (%rax),%rax
  4067ed:	48 83 c0 50          	add    $0x50,%rax
  4067f1:	48 8b 10             	mov    (%rax),%rdx
  4067f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4067f8:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4067fc:	ff d2                	callq  *%rdx
  4067fe:	c9                   	leaveq 
  4067ff:	c3                   	retq   

0000000000406800 <_D6object16TypeInfo_Typedef5flagsMFZk>:
	uint flags() { return base.flags(); }
  406800:	55                   	push   %rbp
  406801:	48 89 e5             	mov    %rsp,%rbp
  406804:	48 83 ec 10          	sub    $0x10,%rsp
  406808:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40680c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406810:	e8 a7 26 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  406815:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406819:	48 8b 40 10          	mov    0x10(%rax),%rax
  40681d:	48 8b 00             	mov    (%rax),%rax
  406820:	48 83 c0 60          	add    $0x60,%rax
  406824:	48 8b 10             	mov    (%rax),%rdx
  406827:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40682b:	48 8b 78 10          	mov    0x10(%rax),%rdi
  40682f:	ff d2                	callq  *%rdx
  406831:	c9                   	leaveq 
  406832:	c3                   	retq   

0000000000406833 <_D6object16TypeInfo_Typedef4initMFZAv>:
	void[] init() { return m_init.length ? m_init : base.init(); }
  406833:	55                   	push   %rbp
  406834:	48 89 e5             	mov    %rsp,%rbp
  406837:	48 83 ec 10          	sub    $0x10,%rsp
  40683b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  40683f:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
  406843:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406847:	e8 70 26 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  40684c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406850:	48 8b 40 28          	mov    0x28(%rax),%rax
  406854:	48 85 c0             	test   %rax,%rax
  406857:	74 1d                	je     406876 <_D6object16TypeInfo_Typedef4initMFZAv+0x43>
  406859:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40685d:	48 8b 50 28          	mov    0x28(%rax),%rdx
  406861:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  406865:	48 89 11             	mov    %rdx,(%rcx)
  406868:	48 8b 40 30          	mov    0x30(%rax),%rax
  40686c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  406870:	48 89 42 08          	mov    %rax,0x8(%rdx)
  406874:	eb 20                	jmp    406896 <_D6object16TypeInfo_Typedef4initMFZAv+0x63>
  406876:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40687a:	48 8b 40 10          	mov    0x10(%rax),%rax
  40687e:	48 8b 00             	mov    (%rax),%rax
  406881:	48 83 c0 58          	add    $0x58,%rax
  406885:	48 8b 10             	mov    (%rax),%rdx
  406888:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40688c:	48 8b 70 10          	mov    0x10(%rax),%rsi
  406890:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  406894:	ff d2                	callq  *%rdx
  406896:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40689a:	c9                   	leaveq 
  40689b:	c3                   	retq   

000000000040689c <_D6object16TypeInfo_Pointer8toStringMFZAa>:
{
}

class TypeInfo_Pointer : TypeInfo
{
	char[] toString() { return m_next.toString() ~ "*"; }
  40689c:	55                   	push   %rbp
  40689d:	48 89 e5             	mov    %rsp,%rbp
  4068a0:	41 55                	push   %r13
  4068a2:	41 54                	push   %r12
  4068a4:	53                   	push   %rbx
  4068a5:	48 83 ec 78          	sub    $0x78,%rsp
  4068a9:	48 89 fb             	mov    %rdi,%rbx
  4068ac:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
  4068b0:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  4068b4:	e8 03 26 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  4068b9:	48 c7 45 a0 01 00 00 	movq   $0x1,-0x60(%rbp)
  4068c0:	00 
  4068c1:	48 c7 45 a8 10 17 41 	movq   $0x411710,-0x58(%rbp)
  4068c8:	00 
  4068c9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4068cd:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4068d1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4068d5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  4068d9:	4c 8b 65 b8          	mov    -0x48(%rbp),%r12
  4068dd:	4c 8b 6d b0          	mov    -0x50(%rbp),%r13
  4068e1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4068e5:	48 8b 40 10          	mov    0x10(%rax),%rax
  4068e9:	48 8b 00             	mov    (%rax),%rax
  4068ec:	48 83 c0 08          	add    $0x8,%rax
  4068f0:	48 8b 10             	mov    (%rax),%rdx
  4068f3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4068f7:	48 8b 70 10          	mov    0x10(%rax),%rsi
  4068fb:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  4068ff:	ff d2                	callq  *%rdx
  406901:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  406905:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  406909:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40690d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  406911:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  406915:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  406919:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40691d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  406921:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406925:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  406929:	4c 89 24 24          	mov    %r12,(%rsp)
  40692d:	4d 89 e9             	mov    %r13,%r9
  406930:	49 89 c0             	mov    %rax,%r8
  406933:	ba 02 00 00 00       	mov    $0x2,%edx
  406938:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  40693f:	48 89 df             	mov    %rbx,%rdi
  406942:	b8 00 00 00 00       	mov    $0x0,%eax
  406947:	e8 1f 39 00 00       	callq  40a26b <_d_arraycatnT>
  40694c:	48 89 d8             	mov    %rbx,%rax
  40694f:	48 83 c4 78          	add    $0x78,%rsp
  406953:	5b                   	pop    %rbx
  406954:	41 5c                	pop    %r12
  406956:	41 5d                	pop    %r13
  406958:	c9                   	leaveq 
  406959:	c3                   	retq   

000000000040695a <_D6object16TypeInfo_Pointer8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  40695a:	55                   	push   %rbp
  40695b:	48 89 e5             	mov    %rsp,%rbp
  40695e:	48 83 ec 30          	sub    $0x30,%rsp
  406962:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406966:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40696a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40696e:	e8 49 25 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Pointer c;
  406973:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40697a:	00 

		return this is o ||
  40697b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40697f:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  406983:	74 46                	je     4069cb <_D6object16TypeInfo_Pointer8opEqualsMFC6ObjectZi+0x71>
  406985:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  406989:	48 c7 c6 e0 b9 41 00 	mov    $0x41b9e0,%rsi
  406990:	e8 6a 27 00 00       	callq  4090ff <_d_dynamic_cast>
  406995:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  406999:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40699e:	74 31                	je     4069d1 <_D6object16TypeInfo_Pointer8opEqualsMFC6ObjectZi+0x77>
  4069a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4069a4:	48 8b 40 10          	mov    0x10(%rax),%rax
  4069a8:	48 8b 00             	mov    (%rax),%rax
  4069ab:	48 83 c0 20          	add    $0x20,%rax
  4069af:	48 8b 10             	mov    (%rax),%rdx
  4069b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4069b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  4069ba:	48 89 c6             	mov    %rax,%rsi
  4069bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4069c1:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4069c5:	ff d2                	callq  *%rdx
  4069c7:	85 c0                	test   %eax,%eax
  4069c9:	74 06                	je     4069d1 <_D6object16TypeInfo_Pointer8opEqualsMFC6ObjectZi+0x77>
  4069cb:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  4069cf:	eb 04                	jmp    4069d5 <_D6object16TypeInfo_Pointer8opEqualsMFC6ObjectZi+0x7b>
  4069d1:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  4069d5:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_Pointer)o) !is null &&
				 this.m_next == c.m_next);
	}
  4069d9:	c9                   	leaveq 
  4069da:	c3                   	retq   

00000000004069db <_D6object16TypeInfo_Pointer7getHashMFPvZm>:

	hash_t getHash(void *p)
  4069db:	55                   	push   %rbp
  4069dc:	48 89 e5             	mov    %rsp,%rbp
  4069df:	48 83 ec 10          	sub    $0x10,%rsp
  4069e3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4069e7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4069eb:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4069ef:	e8 c8 24 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return cast(uint)*cast(void* *)p;
  4069f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4069f8:	48 8b 00             	mov    (%rax),%rax
  4069fb:	89 c0                	mov    %eax,%eax
	}
  4069fd:	c9                   	leaveq 
  4069fe:	c3                   	retq   

00000000004069ff <_D6object16TypeInfo_Pointer6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  4069ff:	55                   	push   %rbp
  406a00:	48 89 e5             	mov    %rsp,%rbp
  406a03:	48 83 ec 20          	sub    $0x20,%rsp
  406a07:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406a0b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406a0f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  406a13:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406a17:	e8 a0 24 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return cast(int)(*cast(void* *)p1 == *cast(void* *)p2);
  406a1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406a20:	48 8b 10             	mov    (%rax),%rdx
  406a23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406a27:	48 8b 00             	mov    (%rax),%rax
  406a2a:	48 39 c2             	cmp    %rax,%rdx
  406a2d:	0f 94 c0             	sete   %al
  406a30:	0f b6 c0             	movzbl %al,%eax
	}
  406a33:	c9                   	leaveq 
  406a34:	c3                   	retq   

0000000000406a35 <_D6object16TypeInfo_Pointer7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  406a35:	55                   	push   %rbp
  406a36:	48 89 e5             	mov    %rsp,%rbp
  406a39:	48 83 ec 20          	sub    $0x20,%rsp
  406a3d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406a41:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406a45:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  406a49:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406a4d:	e8 6a 24 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		if (*cast(void* *)p1 < *cast(void* *)p2)
  406a52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406a56:	48 8b 10             	mov    (%rax),%rdx
  406a59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406a5d:	48 8b 00             	mov    (%rax),%rax
  406a60:	48 39 c2             	cmp    %rax,%rdx
  406a63:	73 09                	jae    406a6e <_D6object16TypeInfo_Pointer7compareMFPvPvZi+0x39>
			return -1;
  406a65:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  406a6c:	eb 23                	jmp    406a91 <_D6object16TypeInfo_Pointer7compareMFPvPvZi+0x5c>
		else if (*cast(void* *)p1 > *cast(void* *)p2)
  406a6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406a72:	48 8b 10             	mov    (%rax),%rdx
  406a75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406a79:	48 8b 00             	mov    (%rax),%rax
  406a7c:	48 39 c2             	cmp    %rax,%rdx
  406a7f:	76 09                	jbe    406a8a <_D6object16TypeInfo_Pointer7compareMFPvPvZi+0x55>
			return 1;
  406a81:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  406a88:	eb 07                	jmp    406a91 <_D6object16TypeInfo_Pointer7compareMFPvPvZi+0x5c>
		else
			return 0;
  406a8a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  406a91:	8b 45 e4             	mov    -0x1c(%rbp),%eax
	}
  406a94:	c9                   	leaveq 
  406a95:	c3                   	retq   

0000000000406a96 <_D6object16TypeInfo_Pointer5tsizeMFZm>:

	size_t tsize()
  406a96:	55                   	push   %rbp
  406a97:	48 89 e5             	mov    %rsp,%rbp
  406a9a:	48 83 ec 10          	sub    $0x10,%rsp
  406a9e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406aa2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406aa6:	e8 11 24 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return (void*).sizeof;
  406aab:	b8 08 00 00 00       	mov    $0x8,%eax
	}
  406ab0:	c9                   	leaveq 
  406ab1:	c3                   	retq   

0000000000406ab2 <_D6object16TypeInfo_Pointer4swapMFPvPvZv>:

	void swap(void *p1, void *p2)
  406ab2:	55                   	push   %rbp
  406ab3:	48 89 e5             	mov    %rsp,%rbp
  406ab6:	48 83 ec 30          	sub    $0x30,%rsp
  406aba:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406abe:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  406ac2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  406ac6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  406aca:	e8 ed 23 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{	void* tmp;
  406acf:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  406ad6:	00 
		tmp = *cast(void**)p1;
  406ad7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406adb:	48 8b 00             	mov    (%rax),%rax
  406ade:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		*cast(void**)p1 = *cast(void**)p2;
  406ae2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  406ae6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406aea:	48 8b 00             	mov    (%rax),%rax
  406aed:	48 89 02             	mov    %rax,(%rdx)
		*cast(void**)p2 = tmp;
  406af0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  406af4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406af8:	48 89 02             	mov    %rax,(%rdx)
	}
  406afb:	c9                   	leaveq 
  406afc:	c3                   	retq   

0000000000406afd <_D6object16TypeInfo_Pointer4nextMFZC8TypeInfo>:

	TypeInfo next() { return m_next; }
  406afd:	55                   	push   %rbp
  406afe:	48 89 e5             	mov    %rsp,%rbp
  406b01:	48 83 ec 10          	sub    $0x10,%rsp
  406b05:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406b09:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406b0d:	e8 aa 23 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  406b12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406b16:	48 8b 40 10          	mov    0x10(%rax),%rax
  406b1a:	c9                   	leaveq 
  406b1b:	c3                   	retq   

0000000000406b1c <_D6object16TypeInfo_Pointer5flagsMFZk>:
	uint flags() { return 1; }
  406b1c:	55                   	push   %rbp
  406b1d:	48 89 e5             	mov    %rsp,%rbp
  406b20:	48 83 ec 10          	sub    $0x10,%rsp
  406b24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406b28:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406b2c:	e8 8b 23 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  406b31:	b8 01 00 00 00       	mov    $0x1,%eax
  406b36:	c9                   	leaveq 
  406b37:	c3                   	retq   

0000000000406b38 <_D6object14TypeInfo_Array8toStringMFZAa>:
	TypeInfo m_next;
}

class TypeInfo_Array : TypeInfo
{
	char[] toString() { return value.toString() ~ "[]"; }
  406b38:	55                   	push   %rbp
  406b39:	48 89 e5             	mov    %rsp,%rbp
  406b3c:	41 55                	push   %r13
  406b3e:	41 54                	push   %r12
  406b40:	53                   	push   %rbx
  406b41:	48 83 ec 78          	sub    $0x78,%rsp
  406b45:	48 89 fb             	mov    %rdi,%rbx
  406b48:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
  406b4c:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  406b50:	e8 67 23 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  406b55:	48 c7 45 a0 02 00 00 	movq   $0x2,-0x60(%rbp)
  406b5c:	00 
  406b5d:	48 c7 45 a8 d0 17 41 	movq   $0x4117d0,-0x58(%rbp)
  406b64:	00 
  406b65:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  406b69:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  406b6d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  406b71:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  406b75:	4c 8b 65 b8          	mov    -0x48(%rbp),%r12
  406b79:	4c 8b 6d b0          	mov    -0x50(%rbp),%r13
  406b7d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  406b81:	48 8b 40 10          	mov    0x10(%rax),%rax
  406b85:	48 8b 00             	mov    (%rax),%rax
  406b88:	48 83 c0 08          	add    $0x8,%rax
  406b8c:	48 8b 10             	mov    (%rax),%rdx
  406b8f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  406b93:	48 8b 70 10          	mov    0x10(%rax),%rsi
  406b97:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  406b9b:	ff d2                	callq  *%rdx
  406b9d:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  406ba1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  406ba5:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  406ba9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  406bad:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  406bb1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  406bb5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406bb9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  406bbd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406bc1:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  406bc5:	4c 89 24 24          	mov    %r12,(%rsp)
  406bc9:	4d 89 e9             	mov    %r13,%r9
  406bcc:	49 89 c0             	mov    %rax,%r8
  406bcf:	ba 02 00 00 00       	mov    $0x2,%edx
  406bd4:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  406bdb:	48 89 df             	mov    %rbx,%rdi
  406bde:	b8 00 00 00 00       	mov    $0x0,%eax
  406be3:	e8 83 36 00 00       	callq  40a26b <_d_arraycatnT>
  406be8:	48 89 d8             	mov    %rbx,%rax
  406beb:	48 83 c4 78          	add    $0x78,%rsp
  406bef:	5b                   	pop    %rbx
  406bf0:	41 5c                	pop    %r12
  406bf2:	41 5d                	pop    %r13
  406bf4:	c9                   	leaveq 
  406bf5:	c3                   	retq   

0000000000406bf6 <_D6object14TypeInfo_Array8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  406bf6:	55                   	push   %rbp
  406bf7:	48 89 e5             	mov    %rsp,%rbp
  406bfa:	48 83 ec 30          	sub    $0x30,%rsp
  406bfe:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406c02:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  406c06:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  406c0a:	e8 ad 22 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Array c;
  406c0f:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  406c16:	00 

		return cast(int)
  406c17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406c1b:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  406c1f:	74 46                	je     406c67 <_D6object14TypeInfo_Array8opEqualsMFC6ObjectZi+0x71>
  406c21:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  406c25:	48 c7 c6 80 ba 41 00 	mov    $0x41ba80,%rsi
  406c2c:	e8 ce 24 00 00       	callq  4090ff <_d_dynamic_cast>
  406c31:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  406c35:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  406c3a:	74 31                	je     406c6d <_D6object14TypeInfo_Array8opEqualsMFC6ObjectZi+0x77>
  406c3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406c40:	48 8b 40 10          	mov    0x10(%rax),%rax
  406c44:	48 8b 00             	mov    (%rax),%rax
  406c47:	48 83 c0 20          	add    $0x20,%rax
  406c4b:	48 8b 10             	mov    (%rax),%rdx
  406c4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406c52:	48 8b 40 10          	mov    0x10(%rax),%rax
  406c56:	48 89 c6             	mov    %rax,%rsi
  406c59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406c5d:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406c61:	ff d2                	callq  *%rdx
  406c63:	85 c0                	test   %eax,%eax
  406c65:	74 06                	je     406c6d <_D6object14TypeInfo_Array8opEqualsMFC6ObjectZi+0x77>
  406c67:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  406c6b:	eb 04                	jmp    406c71 <_D6object14TypeInfo_Array8opEqualsMFC6ObjectZi+0x7b>
  406c6d:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  406c71:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
			   (this is o ||
				((c = cast(TypeInfo_Array)o) !is null &&
				 this.value == c.value));
	}
  406c75:	c9                   	leaveq 
  406c76:	c3                   	retq   

0000000000406c77 <_D6object14TypeInfo_Array7getHashMFPvZm>:

	hash_t getHash(void *p)
  406c77:	55                   	push   %rbp
  406c78:	48 89 e5             	mov    %rsp,%rbp
  406c7b:	48 83 ec 40          	sub    $0x40,%rsp
  406c7f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  406c83:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  406c87:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  406c8b:	e8 2c 22 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{	size_t sz = value.tsize();
  406c90:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406c94:	48 8b 40 10          	mov    0x10(%rax),%rax
  406c98:	48 8b 00             	mov    (%rax),%rax
  406c9b:	48 83 c0 40          	add    $0x40,%rax
  406c9f:	48 8b 10             	mov    (%rax),%rdx
  406ca2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406ca6:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406caa:	ff d2                	callq  *%rdx
  406cac:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		hash_t hash = 0;
  406cb0:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  406cb7:	00 
		void[] a = *cast(void[]*)p;
  406cb8:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  406cbc:	48 8b 02             	mov    (%rdx),%rax
  406cbf:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  406cc3:	48 8b 42 08          	mov    0x8(%rdx),%rax
  406cc7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		for (size_t i = 0; i < a.length; i++)
  406ccb:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  406cd2:	00 
  406cd3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406cd7:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  406cdb:	0f 92 c0             	setb   %al
  406cde:	83 f0 01             	xor    $0x1,%eax
  406ce1:	84 c0                	test   %al,%al
  406ce3:	75 37                	jne    406d1c <_D6object14TypeInfo_Array7getHashMFPvZm+0xa5>
			hash += value.getHash(a.ptr + i * sz);
  406ce5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406ce9:	48 8b 40 10          	mov    0x10(%rax),%rax
  406ced:	48 8b 00             	mov    (%rax),%rax
  406cf0:	48 83 c0 28          	add    $0x28,%rax
  406cf4:	48 8b 08             	mov    (%rax),%rcx
  406cf7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  406cfb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406cff:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  406d04:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  406d08:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406d0c:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406d10:	ff d1                	callq  *%rcx
  406d12:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  406d16:	48 ff 45 f8          	incq   -0x8(%rbp)
  406d1a:	eb b7                	jmp    406cd3 <_D6object14TypeInfo_Array7getHashMFPvZm+0x5c>
		return hash;
  406d1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  406d20:	c9                   	leaveq 
  406d21:	c3                   	retq   

0000000000406d22 <_D6object14TypeInfo_Array6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  406d22:	55                   	push   %rbp
  406d23:	48 89 e5             	mov    %rsp,%rbp
  406d26:	48 83 ec 50          	sub    $0x50,%rsp
  406d2a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  406d2e:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  406d32:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  406d36:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  406d3a:	e8 7d 21 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		void[] a1 = *cast(void[]*)p1;
  406d3f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  406d43:	48 8b 02             	mov    (%rdx),%rax
  406d46:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  406d4a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  406d4e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		void[] a2 = *cast(void[]*)p2;
  406d52:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  406d56:	48 8b 02             	mov    (%rdx),%rax
  406d59:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  406d5d:	48 8b 42 08          	mov    0x8(%rdx),%rax
  406d61:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		if (a1.length != a2.length)
  406d65:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  406d69:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406d6d:	48 39 c2             	cmp    %rax,%rdx
  406d70:	74 0c                	je     406d7e <_D6object14TypeInfo_Array6equalsMFPvPvZi+0x5c>
			return 0;
  406d72:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  406d79:	e9 9e 00 00 00       	jmpq   406e1c <_D6object14TypeInfo_Array6equalsMFPvPvZi+0xfa>
		size_t sz = value.tsize();
  406d7e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406d82:	48 8b 40 10          	mov    0x10(%rax),%rax
  406d86:	48 8b 00             	mov    (%rax),%rax
  406d89:	48 83 c0 40          	add    $0x40,%rax
  406d8d:	48 8b 10             	mov    (%rax),%rdx
  406d90:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406d94:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406d98:	ff d2                	callq  *%rdx
  406d9a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		for (size_t i = 0; i < a1.length; i++)
  406d9e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  406da5:	00 
  406da6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406daa:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  406dae:	0f 92 c0             	setb   %al
  406db1:	83 f0 01             	xor    $0x1,%eax
  406db4:	84 c0                	test   %al,%al
  406db6:	75 5d                	jne    406e15 <_D6object14TypeInfo_Array6equalsMFPvPvZi+0xf3>
		{
			if (!value.equals(a1.ptr + i * sz, a2.ptr + i * sz))
  406db8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406dbc:	48 8b 40 10          	mov    0x10(%rax),%rax
  406dc0:	48 8b 00             	mov    (%rax),%rax
  406dc3:	48 83 c0 30          	add    $0x30,%rax
  406dc7:	4c 8b 00             	mov    (%rax),%r8
  406dca:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406dce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406dd2:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  406dd7:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  406ddb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  406ddf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406de3:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  406de8:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  406dec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406df0:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406df4:	48 89 ca             	mov    %rcx,%rdx
  406df7:	41 ff d0             	callq  *%r8
  406dfa:	85 c0                	test   %eax,%eax
  406dfc:	0f 95 c0             	setne  %al
  406dff:	83 f0 01             	xor    $0x1,%eax
  406e02:	84 c0                	test   %al,%al
  406e04:	74 09                	je     406e0f <_D6object14TypeInfo_Array6equalsMFPvPvZi+0xed>
				return 0;
  406e06:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  406e0d:	eb 0d                	jmp    406e1c <_D6object14TypeInfo_Array6equalsMFPvPvZi+0xfa>
		if (a1.length != a2.length)
			return 0;
		size_t sz = value.tsize();
		for (size_t i = 0; i < a1.length; i++)
		{
			if (!value.equals(a1.ptr + i * sz, a2.ptr + i * sz))
  406e0f:	48 ff 45 f8          	incq   -0x8(%rbp)
  406e13:	eb 91                	jmp    406da6 <_D6object14TypeInfo_Array6equalsMFPvPvZi+0x84>
				return 0;
		}
		return 1;
  406e15:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%rbp)
  406e1c:	8b 45 b4             	mov    -0x4c(%rbp),%eax
	}
  406e1f:	c9                   	leaveq 
  406e20:	c3                   	retq   

0000000000406e21 <_D6object14TypeInfo_Array7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  406e21:	55                   	push   %rbp
  406e22:	48 89 e5             	mov    %rsp,%rbp
  406e25:	48 83 ec 60          	sub    $0x60,%rsp
  406e29:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  406e2d:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  406e31:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  406e35:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  406e39:	e8 7e 20 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		void[] a1 = *cast(void[]*)p1;
  406e3e:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  406e42:	48 8b 02             	mov    (%rdx),%rax
  406e45:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  406e49:	48 8b 42 08          	mov    0x8(%rdx),%rax
  406e4d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		void[] a2 = *cast(void[]*)p2;
  406e51:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  406e55:	48 8b 02             	mov    (%rdx),%rax
  406e58:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  406e5c:	48 8b 42 08          	mov    0x8(%rdx),%rax
  406e60:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		size_t sz = value.tsize();
  406e64:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406e68:	48 8b 40 10          	mov    0x10(%rax),%rax
  406e6c:	48 8b 00             	mov    (%rax),%rax
  406e6f:	48 83 c0 40          	add    $0x40,%rax
  406e73:	48 8b 10             	mov    (%rax),%rdx
  406e76:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406e7a:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406e7e:	ff d2                	callq  *%rdx
  406e80:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		size_t len = a1.length;
  406e84:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  406e88:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

		if (a2.length < len)
  406e8c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406e90:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  406e94:	73 08                	jae    406e9e <_D6object14TypeInfo_Array7compareMFPvPvZi+0x7d>
			len = a2.length;
  406e96:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406e9a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		for (size_t u = 0; u < len; u++)
  406e9e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  406ea5:	00 
  406ea6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406eaa:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  406eae:	0f 92 c0             	setb   %al
  406eb1:	83 f0 01             	xor    $0x1,%eax
  406eb4:	84 c0                	test   %al,%al
  406eb6:	75 59                	jne    406f11 <_D6object14TypeInfo_Array7compareMFPvPvZi+0xf0>
		{
			int result = value.compare(a1.ptr + u * sz, a2.ptr + u * sz);
  406eb8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406ebc:	48 8b 40 10          	mov    0x10(%rax),%rax
  406ec0:	48 8b 00             	mov    (%rax),%rax
  406ec3:	48 83 c0 38          	add    $0x38,%rax
  406ec7:	4c 8b 00             	mov    (%rax),%r8
  406eca:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  406ece:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406ed2:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  406ed7:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  406edb:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  406edf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406ee3:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  406ee8:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  406eec:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406ef0:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406ef4:	48 89 ca             	mov    %rcx,%rdx
  406ef7:	41 ff d0             	callq  *%r8
  406efa:	89 45 fc             	mov    %eax,-0x4(%rbp)
			if (result)
  406efd:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  406f01:	74 08                	je     406f0b <_D6object14TypeInfo_Array7compareMFPvPvZi+0xea>
				return result;
  406f03:	8b 45 fc             	mov    -0x4(%rbp),%eax
  406f06:	89 45 a4             	mov    %eax,-0x5c(%rbp)
  406f09:	eb 17                	jmp    406f22 <_D6object14TypeInfo_Array7compareMFPvPvZi+0x101>
		if (a2.length < len)
			len = a2.length;
		for (size_t u = 0; u < len; u++)
		{
			int result = value.compare(a1.ptr + u * sz, a2.ptr + u * sz);
			if (result)
  406f0b:	48 ff 45 f0          	incq   -0x10(%rbp)
  406f0f:	eb 95                	jmp    406ea6 <_D6object14TypeInfo_Array7compareMFPvPvZi+0x85>
				return result;
		}
		return cast(int)a1.length - cast(int)a2.length;
  406f11:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  406f15:	89 c2                	mov    %eax,%edx
  406f17:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406f1b:	89 d1                	mov    %edx,%ecx
  406f1d:	29 c1                	sub    %eax,%ecx
  406f1f:	89 4d a4             	mov    %ecx,-0x5c(%rbp)
  406f22:	8b 45 a4             	mov    -0x5c(%rbp),%eax
	}
  406f25:	c9                   	leaveq 
  406f26:	c3                   	retq   

0000000000406f27 <_D6object14TypeInfo_Array5tsizeMFZm>:

	size_t tsize()
  406f27:	55                   	push   %rbp
  406f28:	48 89 e5             	mov    %rsp,%rbp
  406f2b:	48 83 ec 10          	sub    $0x10,%rsp
  406f2f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406f33:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406f37:	e8 80 1f 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return (void[]).sizeof;
  406f3c:	b8 10 00 00 00       	mov    $0x10,%eax
	}
  406f41:	c9                   	leaveq 
  406f42:	c3                   	retq   

0000000000406f43 <_D6object14TypeInfo_Array4swapMFPvPvZv>:

	void swap(void *p1, void *p2)
  406f43:	55                   	push   %rbp
  406f44:	48 89 e5             	mov    %rsp,%rbp
  406f47:	48 83 ec 30          	sub    $0x30,%rsp
  406f4b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406f4f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  406f53:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  406f57:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  406f5b:	e8 5c 1f 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{	void[] tmp;
  406f60:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  406f67:	00 
  406f68:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  406f6f:	00 
		tmp = *cast(void[]*)p1;
  406f70:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  406f74:	48 8b 02             	mov    (%rdx),%rax
  406f77:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  406f7b:	48 8b 42 08          	mov    0x8(%rdx),%rax
  406f7f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		*cast(void[]*)p1 = *cast(void[]*)p2;
  406f83:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406f87:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  406f8b:	48 8b 02             	mov    (%rdx),%rax
  406f8e:	48 89 01             	mov    %rax,(%rcx)
  406f91:	48 8b 42 08          	mov    0x8(%rdx),%rax
  406f95:	48 89 41 08          	mov    %rax,0x8(%rcx)
		*cast(void[]*)p2 = tmp;
  406f99:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  406f9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406fa1:	48 89 02             	mov    %rax,(%rdx)
  406fa4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406fa8:	48 89 42 08          	mov    %rax,0x8(%rdx)
	}
  406fac:	c9                   	leaveq 
  406fad:	c3                   	retq   

0000000000406fae <_D6object14TypeInfo_Array4nextMFZC8TypeInfo>:

	TypeInfo value;

	TypeInfo next()
  406fae:	55                   	push   %rbp
  406faf:	48 89 e5             	mov    %rsp,%rbp
  406fb2:	48 83 ec 10          	sub    $0x10,%rsp
  406fb6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406fba:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406fbe:	e8 f9 1e 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return value;
  406fc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406fc7:	48 8b 40 10          	mov    0x10(%rax),%rax
	}
  406fcb:	c9                   	leaveq 
  406fcc:	c3                   	retq   

0000000000406fcd <_D6object14TypeInfo_Array5flagsMFZk>:

	uint flags() { return 1; }
  406fcd:	55                   	push   %rbp
  406fce:	48 89 e5             	mov    %rsp,%rbp
  406fd1:	48 83 ec 10          	sub    $0x10,%rsp
  406fd5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406fd9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406fdd:	e8 da 1e 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  406fe2:	b8 01 00 00 00       	mov    $0x1,%eax
  406fe7:	c9                   	leaveq 
  406fe8:	c3                   	retq   

0000000000406fe9 <_D6object20TypeInfo_StaticArray8toStringMFZAa>:
}

class TypeInfo_StaticArray : TypeInfo
{
	char[] toString()
  406fe9:	55                   	push   %rbp
  406fea:	48 89 e5             	mov    %rsp,%rbp
  406fed:	41 57                	push   %r15
  406fef:	41 56                	push   %r14
  406ff1:	41 55                	push   %r13
  406ff3:	41 54                	push   %r12
  406ff5:	53                   	push   %rbx
  406ff6:	48 81 ec 88 01 00 00 	sub    $0x188,%rsp
  406ffd:	48 89 bd 60 fe ff ff 	mov    %rdi,-0x1a0(%rbp)
  407004:	48 89 b5 b8 fe ff ff 	mov    %rsi,-0x148(%rbp)
  40700b:	48 8b bd b8 fe ff ff 	mov    -0x148(%rbp),%rdi
  407012:	e8 a5 1e 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		char[20] buf;
  407017:	48 c7 85 e0 fe ff ff 	movq   $0x14,-0x120(%rbp)
  40701e:	14 00 00 00 
  407022:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
  407029:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  407030:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  407037:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40703b:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  407042:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  407046:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  40704b:	0f 95 c0             	setne  %al
  40704e:	83 f0 01             	xor    $0x1,%eax
  407051:	84 c0                	test   %al,%al
  407053:	75 11                	jne    407066 <_D6object20TypeInfo_StaticArray8toStringMFZAa+0x7d>
  407055:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  407059:	c6 00 ff             	movb   $0xff,(%rax)
  40705c:	48 ff 45 c0          	incq   -0x40(%rbp)
  407060:	48 ff 4d c8          	decq   -0x38(%rbp)
  407064:	eb e0                	jmp    407046 <_D6object20TypeInfo_StaticArray8toStringMFZAa+0x5d>
		return value.toString() ~ "[" ~ itoa(buf, 'd', len) ~ "]";
  407066:	48 c7 85 f0 fe ff ff 	movq   $0x1,-0x110(%rbp)
  40706d:	01 00 00 00 
  407071:	48 c7 85 f8 fe ff ff 	movq   $0x411890,-0x108(%rbp)
  407078:	90 18 41 00 
  40707c:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  407083:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  40708a:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  407091:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  407098:	48 8b 9d 08 ff ff ff 	mov    -0xf8(%rbp),%rbx
  40709f:	4c 8b a5 00 ff ff ff 	mov    -0x100(%rbp),%r12
  4070a6:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  4070ad:	48 8b 40 18          	mov    0x18(%rax),%rax
  4070b1:	48 89 c1             	mov    %rax,%rcx
  4070b4:	48 c7 85 10 ff ff ff 	movq   $0x14,-0xf0(%rbp)
  4070bb:	14 00 00 00 
  4070bf:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
  4070c6:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  4070cd:	48 8d bd a0 fe ff ff 	lea    -0x160(%rbp),%rdi
  4070d4:	48 8b b5 10 ff ff ff 	mov    -0xf0(%rbp),%rsi
  4070db:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  4070e2:	49 89 c8             	mov    %rcx,%r8
  4070e5:	b9 64 00 00 00       	mov    $0x64,%ecx
  4070ea:	e8 ea 67 00 00       	callq  40d8d9 <_D6kernel4core4util4itoaFAaalZAa>
  4070ef:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
  4070f6:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  4070fd:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  407104:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  40710b:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  407112:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  407119:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  407120:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  407127:	4c 8b ad 38 ff ff ff 	mov    -0xc8(%rbp),%r13
  40712e:	4c 8b b5 30 ff ff ff 	mov    -0xd0(%rbp),%r14
  407135:	48 c7 85 40 ff ff ff 	movq   $0x1,-0xc0(%rbp)
  40713c:	01 00 00 00 
  407140:	48 c7 85 48 ff ff ff 	movq   $0x411892,-0xb8(%rbp)
  407147:	92 18 41 00 
  40714b:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  407152:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  407159:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  407160:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  407167:	4c 8b bd 58 ff ff ff 	mov    -0xa8(%rbp),%r15
  40716e:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  407175:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
  40717c:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  407183:	48 8b 40 10          	mov    0x10(%rax),%rax
  407187:	48 8b 00             	mov    (%rax),%rax
  40718a:	48 83 c0 08          	add    $0x8,%rax
  40718e:	48 8b 10             	mov    (%rax),%rdx
  407191:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  407198:	48 8b 70 10          	mov    0x10(%rax),%rsi
  40719c:	48 8d bd 90 fe ff ff 	lea    -0x170(%rbp),%rdi
  4071a3:	ff d2                	callq  *%rdx
  4071a5:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  4071ac:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  4071b3:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
  4071ba:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  4071c1:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4071c8:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  4071cf:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  4071d6:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4071dd:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4071e4:	48 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%rcx
  4071eb:	48 8d bd 80 fe ff ff 	lea    -0x180(%rbp),%rdi
  4071f2:	4c 89 3c 24          	mov    %r15,(%rsp)
  4071f6:	4c 8b 8d 68 fe ff ff 	mov    -0x198(%rbp),%r9
  4071fd:	49 89 c0             	mov    %rax,%r8
  407200:	ba 02 00 00 00       	mov    $0x2,%edx
  407205:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  40720c:	b8 00 00 00 00       	mov    $0x0,%eax
  407211:	e8 55 30 00 00       	callq  40a26b <_d_arraycatnT>
  407216:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
  40721d:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  407221:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
  407228:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  40722c:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  407230:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  407234:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  407238:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  40723c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  407240:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  407244:	48 8d bd 70 fe ff ff 	lea    -0x190(%rbp),%rdi
  40724b:	4c 89 2c 24          	mov    %r13,(%rsp)
  40724f:	4d 89 f1             	mov    %r14,%r9
  407252:	49 89 c0             	mov    %rax,%r8
  407255:	ba 02 00 00 00       	mov    $0x2,%edx
  40725a:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  407261:	b8 00 00 00 00       	mov    $0x0,%eax
  407266:	e8 00 30 00 00       	callq  40a26b <_d_arraycatnT>
  40726b:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
  407272:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  407276:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
  40727d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  407281:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  407285:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  407289:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40728d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  407291:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407295:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  407299:	48 89 1c 24          	mov    %rbx,(%rsp)
  40729d:	4d 89 e1             	mov    %r12,%r9
  4072a0:	49 89 c0             	mov    %rax,%r8
  4072a3:	ba 02 00 00 00       	mov    $0x2,%edx
  4072a8:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  4072af:	48 8b bd 60 fe ff ff 	mov    -0x1a0(%rbp),%rdi
  4072b6:	b8 00 00 00 00       	mov    $0x0,%eax
  4072bb:	e8 ab 2f 00 00       	callq  40a26b <_d_arraycatnT>
	}
  4072c0:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  4072c7:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
  4072ce:	5b                   	pop    %rbx
  4072cf:	41 5c                	pop    %r12
  4072d1:	41 5d                	pop    %r13
  4072d3:	41 5e                	pop    %r14
  4072d5:	41 5f                	pop    %r15
  4072d7:	c9                   	leaveq 
  4072d8:	c3                   	retq   

00000000004072d9 <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  4072d9:	55                   	push   %rbp
  4072da:	48 89 e5             	mov    %rsp,%rbp
  4072dd:	48 83 ec 30          	sub    $0x30,%rsp
  4072e1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4072e5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4072e9:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4072ed:	e8 ca 1b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_StaticArray c;
  4072f2:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4072f9:	00 

		return cast(int)
  4072fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4072fe:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  407302:	74 5b                	je     40735f <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi+0x86>
  407304:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  407308:	48 c7 c6 20 bb 41 00 	mov    $0x41bb20,%rsi
  40730f:	e8 eb 1d 00 00       	callq  4090ff <_d_dynamic_cast>
  407314:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  407318:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40731d:	74 46                	je     407365 <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi+0x8c>
  40731f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407323:	48 8b 50 18          	mov    0x18(%rax),%rdx
  407327:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40732b:	48 8b 40 18          	mov    0x18(%rax),%rax
  40732f:	48 39 c2             	cmp    %rax,%rdx
  407332:	75 31                	jne    407365 <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi+0x8c>
  407334:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407338:	48 8b 40 10          	mov    0x10(%rax),%rax
  40733c:	48 8b 00             	mov    (%rax),%rax
  40733f:	48 83 c0 20          	add    $0x20,%rax
  407343:	48 8b 10             	mov    (%rax),%rdx
  407346:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40734a:	48 8b 40 10          	mov    0x10(%rax),%rax
  40734e:	48 89 c6             	mov    %rax,%rsi
  407351:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407355:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407359:	ff d2                	callq  *%rdx
  40735b:	85 c0                	test   %eax,%eax
  40735d:	74 06                	je     407365 <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi+0x8c>
  40735f:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  407363:	eb 04                	jmp    407369 <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi+0x90>
  407365:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  407369:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
			   (this is o ||
				((c = cast(TypeInfo_StaticArray)o) !is null &&
				 this.len == c.len &&
				 this.value == c.value));
	}
  40736d:	c9                   	leaveq 
  40736e:	c3                   	retq   

000000000040736f <_D6object20TypeInfo_StaticArray7getHashMFPvZm>:

	hash_t getHash(void *p)
  40736f:	55                   	push   %rbp
  407370:	48 89 e5             	mov    %rsp,%rbp
  407373:	48 83 ec 30          	sub    $0x30,%rsp
  407377:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40737b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40737f:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  407383:	e8 34 1b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{	size_t sz = value.tsize();
  407388:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40738c:	48 8b 40 10          	mov    0x10(%rax),%rax
  407390:	48 8b 00             	mov    (%rax),%rax
  407393:	48 83 c0 40          	add    $0x40,%rax
  407397:	48 8b 10             	mov    (%rax),%rdx
  40739a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40739e:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4073a2:	ff d2                	callq  *%rdx
  4073a4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		hash_t hash = 0;
  4073a8:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4073af:	00 
		for (size_t i = 0; i < len; i++)
  4073b0:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4073b7:	00 
  4073b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4073bc:	48 8b 40 18          	mov    0x18(%rax),%rax
  4073c0:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  4073c4:	0f 92 c0             	setb   %al
  4073c7:	83 f0 01             	xor    $0x1,%eax
  4073ca:	84 c0                	test   %al,%al
  4073cc:	75 36                	jne    407404 <_D6object20TypeInfo_StaticArray7getHashMFPvZm+0x95>
			hash += value.getHash(p + i * sz);
  4073ce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4073d2:	48 8b 40 10          	mov    0x10(%rax),%rax
  4073d6:	48 8b 00             	mov    (%rax),%rax
  4073d9:	48 83 c0 28          	add    $0x28,%rax
  4073dd:	48 8b 10             	mov    (%rax),%rdx
  4073e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4073e4:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  4073e9:	48 89 c6             	mov    %rax,%rsi
  4073ec:	48 03 75 d0          	add    -0x30(%rbp),%rsi
  4073f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4073f4:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4073f8:	ff d2                	callq  *%rdx
  4073fa:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  4073fe:	48 ff 45 f8          	incq   -0x8(%rbp)
  407402:	eb b4                	jmp    4073b8 <_D6object20TypeInfo_StaticArray7getHashMFPvZm+0x49>
		return hash;
  407404:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  407408:	c9                   	leaveq 
  407409:	c3                   	retq   

000000000040740a <_D6object20TypeInfo_StaticArray6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  40740a:	55                   	push   %rbp
  40740b:	48 89 e5             	mov    %rsp,%rbp
  40740e:	48 83 ec 30          	sub    $0x30,%rsp
  407412:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  407416:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40741a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40741e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  407422:	e8 95 1a 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		size_t sz = value.tsize();
  407427:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40742b:	48 8b 40 10          	mov    0x10(%rax),%rax
  40742f:	48 8b 00             	mov    (%rax),%rax
  407432:	48 83 c0 40          	add    $0x40,%rax
  407436:	48 8b 10             	mov    (%rax),%rdx
  407439:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40743d:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407441:	ff d2                	callq  *%rdx
  407443:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		for (size_t u = 0; u < len; u++)
  407447:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40744e:	00 
  40744f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407453:	48 8b 40 18          	mov    0x18(%rax),%rax
  407457:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  40745b:	0f 92 c0             	setb   %al
  40745e:	83 f0 01             	xor    $0x1,%eax
  407461:	84 c0                	test   %al,%al
  407463:	75 57                	jne    4074bc <_D6object20TypeInfo_StaticArray6equalsMFPvPvZi+0xb2>
		{
			if (!value.equals(p1 + u * sz, p2 + u * sz))
  407465:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407469:	48 8b 40 10          	mov    0x10(%rax),%rax
  40746d:	48 8b 00             	mov    (%rax),%rax
  407470:	48 83 c0 30          	add    $0x30,%rax
  407474:	48 8b 08             	mov    (%rax),%rcx
  407477:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40747b:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  407480:	48 89 c2             	mov    %rax,%rdx
  407483:	48 03 55 d8          	add    -0x28(%rbp),%rdx
  407487:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40748b:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  407490:	48 89 c6             	mov    %rax,%rsi
  407493:	48 03 75 e0          	add    -0x20(%rbp),%rsi
  407497:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40749b:	48 8b 78 10          	mov    0x10(%rax),%rdi
  40749f:	ff d1                	callq  *%rcx
  4074a1:	85 c0                	test   %eax,%eax
  4074a3:	0f 95 c0             	setne  %al
  4074a6:	83 f0 01             	xor    $0x1,%eax
  4074a9:	84 c0                	test   %al,%al
  4074ab:	74 09                	je     4074b6 <_D6object20TypeInfo_StaticArray6equalsMFPvPvZi+0xac>
				return 0;
  4074ad:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  4074b4:	eb 0d                	jmp    4074c3 <_D6object20TypeInfo_StaticArray6equalsMFPvPvZi+0xb9>
	{
		size_t sz = value.tsize();

		for (size_t u = 0; u < len; u++)
		{
			if (!value.equals(p1 + u * sz, p2 + u * sz))
  4074b6:	48 ff 45 f8          	incq   -0x8(%rbp)
  4074ba:	eb 93                	jmp    40744f <_D6object20TypeInfo_StaticArray6equalsMFPvPvZi+0x45>
				return 0;
		}
		return 1;
  4074bc:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
  4074c3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
	}
  4074c6:	c9                   	leaveq 
  4074c7:	c3                   	retq   

00000000004074c8 <_D6object20TypeInfo_StaticArray7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  4074c8:	55                   	push   %rbp
  4074c9:	48 89 e5             	mov    %rsp,%rbp
  4074cc:	48 83 ec 40          	sub    $0x40,%rsp
  4074d0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4074d4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4074d8:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4074dc:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4074e0:	e8 d7 19 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		size_t sz = value.tsize();
  4074e5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4074e9:	48 8b 40 10          	mov    0x10(%rax),%rax
  4074ed:	48 8b 00             	mov    (%rax),%rax
  4074f0:	48 83 c0 40          	add    $0x40,%rax
  4074f4:	48 8b 10             	mov    (%rax),%rdx
  4074f7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4074fb:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4074ff:	ff d2                	callq  *%rdx
  407501:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		for (size_t u = 0; u < len; u++)
  407505:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40750c:	00 
  40750d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407511:	48 8b 40 18          	mov    0x18(%rax),%rax
  407515:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  407519:	0f 92 c0             	setb   %al
  40751c:	83 f0 01             	xor    $0x1,%eax
  40751f:	84 c0                	test   %al,%al
  407521:	75 53                	jne    407576 <_D6object20TypeInfo_StaticArray7compareMFPvPvZi+0xae>
		{
			int result = value.compare(p1 + u * sz, p2 + u * sz);
  407523:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407527:	48 8b 40 10          	mov    0x10(%rax),%rax
  40752b:	48 8b 00             	mov    (%rax),%rax
  40752e:	48 83 c0 38          	add    $0x38,%rax
  407532:	48 8b 08             	mov    (%rax),%rcx
  407535:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407539:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  40753e:	48 89 c2             	mov    %rax,%rdx
  407541:	48 03 55 c8          	add    -0x38(%rbp),%rdx
  407545:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407549:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  40754e:	48 89 c6             	mov    %rax,%rsi
  407551:	48 03 75 d0          	add    -0x30(%rbp),%rsi
  407555:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407559:	48 8b 78 10          	mov    0x10(%rax),%rdi
  40755d:	ff d1                	callq  *%rcx
  40755f:	89 45 fc             	mov    %eax,-0x4(%rbp)
			if (result)
  407562:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  407566:	74 08                	je     407570 <_D6object20TypeInfo_StaticArray7compareMFPvPvZi+0xa8>
				return result;
  407568:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40756b:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  40756e:	eb 0d                	jmp    40757d <_D6object20TypeInfo_StaticArray7compareMFPvPvZi+0xb5>
		size_t sz = value.tsize();

		for (size_t u = 0; u < len; u++)
		{
			int result = value.compare(p1 + u * sz, p2 + u * sz);
			if (result)
  407570:	48 ff 45 f0          	incq   -0x10(%rbp)
  407574:	eb 97                	jmp    40750d <_D6object20TypeInfo_StaticArray7compareMFPvPvZi+0x45>
				return result;
		}
		return 0;
  407576:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  40757d:	8b 45 c4             	mov    -0x3c(%rbp),%eax
	}
  407580:	c9                   	leaveq 
  407581:	c3                   	retq   

0000000000407582 <_D6object20TypeInfo_StaticArray5tsizeMFZm>:

	size_t tsize()
  407582:	55                   	push   %rbp
  407583:	48 89 e5             	mov    %rsp,%rbp
  407586:	53                   	push   %rbx
  407587:	48 83 ec 08          	sub    $0x8,%rsp
  40758b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  40758f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  407593:	e8 24 19 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return len * value.tsize();
  407598:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40759c:	48 8b 58 18          	mov    0x18(%rax),%rbx
  4075a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4075a4:	48 8b 40 10          	mov    0x10(%rax),%rax
  4075a8:	48 8b 00             	mov    (%rax),%rax
  4075ab:	48 83 c0 40          	add    $0x40,%rax
  4075af:	48 8b 10             	mov    (%rax),%rdx
  4075b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4075b6:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4075ba:	ff d2                	callq  *%rdx
  4075bc:	48 0f af c3          	imul   %rbx,%rax
	}
  4075c0:	48 83 c4 08          	add    $0x8,%rsp
  4075c4:	5b                   	pop    %rbx
  4075c5:	c9                   	leaveq 
  4075c6:	c3                   	retq   

00000000004075c7 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv>:

	void swap(void *p1, void *p2)
  4075c7:	55                   	push   %rbp
  4075c8:	48 89 e5             	mov    %rsp,%rbp
  4075cb:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp
  4075d2:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  4075d9:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
  4075e0:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  4075e7:	48 8b bd 28 ff ff ff 	mov    -0xd8(%rbp),%rdi
  4075ee:	e8 c9 18 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{	void* tmp;
  4075f3:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  4075fa:	00 
		size_t sz = value.tsize();
  4075fb:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  407602:	48 8b 40 10          	mov    0x10(%rax),%rax
  407606:	48 8b 00             	mov    (%rax),%rax
  407609:	48 83 c0 40          	add    $0x40,%rax
  40760d:	48 8b 10             	mov    (%rax),%rdx
  407610:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  407617:	48 8b 78 10          	mov    0x10(%rax),%rdi
  40761b:	ff d2                	callq  *%rdx
  40761d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		ubyte[16] buffer;
  407621:	48 c7 85 50 ff ff ff 	movq   $0x10,-0xb0(%rbp)
  407628:	10 00 00 00 
  40762c:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  407633:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  40763a:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  407641:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  407645:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  40764c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  407650:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  407655:	0f 95 c0             	setne  %al
  407658:	83 f0 01             	xor    $0x1,%eax
  40765b:	84 c0                	test   %al,%al
  40765d:	75 11                	jne    407670 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0xa9>
  40765f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407663:	c6 00 00             	movb   $0x0,(%rax)
  407666:	48 ff 45 e0          	incq   -0x20(%rbp)
  40766a:	48 ff 4d e8          	decq   -0x18(%rbp)
  40766e:	eb e0                	jmp    407650 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0x89>
		void* pbuffer;
  407670:	48 c7 85 48 ff ff ff 	movq   $0x0,-0xb8(%rbp)
  407677:	00 00 00 00 

		if (sz < buffer.sizeof)
  40767b:	48 83 7d d0 10       	cmpq   $0x10,-0x30(%rbp)
  407680:	73 0d                	jae    40768f <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0xc8>
			tmp = buffer.ptr;
  407682:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  407689:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40768d:	eb 30                	jmp    4076bf <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0xf8>
		else
			tmp = pbuffer = (new void[sz]).ptr;
  40768f:	48 8d bd 60 ff ff ff 	lea    -0xa0(%rbp),%rdi
  407696:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40769a:	48 c7 c6 c0 f7 40 00 	mov    $0x40f7c0,%rsi
  4076a1:	e8 aa 27 00 00       	callq  409e50 <_d_newarrayT>
  4076a6:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  4076ad:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  4076b4:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  4076bb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

		for (size_t u = 0; u < len; u += sz)
  4076bf:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4076c6:	00 
  4076c7:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  4076ce:	48 8b 40 18          	mov    0x18(%rax),%rax
  4076d2:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4076d6:	0f 92 c0             	setb   %al
  4076d9:	83 f0 01             	xor    $0x1,%eax
  4076dc:	84 c0                	test   %al,%al
  4076de:	0f 85 35 01 00 00    	jne    407819 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0x252>
		{	size_t o = u * sz;
  4076e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4076e8:	48 0f af 45 d0       	imul   -0x30(%rbp),%rax
  4076ed:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			tmp[0 .. sz] = (p1 + o)[0 .. sz];
  4076f1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4076f5:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  4076fc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407700:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  407707:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40770b:	48 89 c2             	mov    %rax,%rdx
  40770e:	48 03 95 20 ff ff ff 	add    -0xe0(%rbp),%rdx
  407715:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407719:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  40771d:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  407721:	48 8d bd 00 ff ff ff 	lea    -0x100(%rbp),%rdi
  407728:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40772f:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  407736:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
  40773a:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  40773e:	49 89 c0             	mov    %rax,%r8
  407741:	49 89 d1             	mov    %rdx,%r9
  407744:	48 89 ca             	mov    %rcx,%rdx
  407747:	48 89 f1             	mov    %rsi,%rcx
  40774a:	be 01 00 00 00       	mov    $0x1,%esi
  40774f:	e8 c4 5a 00 00       	callq  40d218 <_d_arraycopy>
			(p1 + o)[0 .. sz] = (p2 + o)[0 .. sz];
  407754:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407758:	48 89 c2             	mov    %rax,%rdx
  40775b:	48 03 95 20 ff ff ff 	add    -0xe0(%rbp),%rdx
  407762:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407766:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  40776a:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  40776e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407772:	48 89 c2             	mov    %rax,%rdx
  407775:	48 03 95 18 ff ff ff 	add    -0xe8(%rbp),%rdx
  40777c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407780:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  407784:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  407788:	48 8d bd f0 fe ff ff 	lea    -0x110(%rbp),%rdi
  40778f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  407793:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  407797:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  40779b:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40779f:	49 89 c0             	mov    %rax,%r8
  4077a2:	49 89 d1             	mov    %rdx,%r9
  4077a5:	48 89 ca             	mov    %rcx,%rdx
  4077a8:	48 89 f1             	mov    %rsi,%rcx
  4077ab:	be 01 00 00 00       	mov    $0x1,%esi
  4077b0:	e8 63 5a 00 00       	callq  40d218 <_d_arraycopy>
			(p2 + o)[0 .. sz] = tmp[0 .. sz];
  4077b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4077b9:	48 89 c2             	mov    %rax,%rdx
  4077bc:	48 03 95 18 ff ff ff 	add    -0xe8(%rbp),%rdx
  4077c3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4077c7:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4077cb:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  4077cf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4077d3:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  4077d7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4077db:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  4077df:	48 8d bd e0 fe ff ff 	lea    -0x120(%rbp),%rdi
  4077e6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4077ea:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  4077ee:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  4077f2:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4077f6:	49 89 c0             	mov    %rax,%r8
  4077f9:	49 89 d1             	mov    %rdx,%r9
  4077fc:	48 89 ca             	mov    %rcx,%rdx
  4077ff:	48 89 f1             	mov    %rsi,%rcx
  407802:	be 01 00 00 00       	mov    $0x1,%esi
  407807:	e8 0c 5a 00 00       	callq  40d218 <_d_arraycopy>
  40780c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407810:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  407814:	e9 ae fe ff ff       	jmpq   4076c7 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0x100>
		}
		if (pbuffer)
  407819:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  407820:	48 85 c0             	test   %rax,%rax
  407823:	74 0c                	je     407831 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0x26a>
			delete pbuffer;
  407825:	48 8d bd 48 ff ff ff 	lea    -0xb8(%rbp),%rdi
  40782c:	e8 a2 27 00 00       	callq  409fd3 <_d_delmemory>
	}
  407831:	c9                   	leaveq 
  407832:	c3                   	retq   

0000000000407833 <_D6object20TypeInfo_StaticArray4initMFZAv>:

	void[] init() { return value.init(); }
  407833:	55                   	push   %rbp
  407834:	48 89 e5             	mov    %rsp,%rbp
  407837:	53                   	push   %rbx
  407838:	48 83 ec 08          	sub    $0x8,%rsp
  40783c:	48 89 fb             	mov    %rdi,%rbx
  40783f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  407843:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  407847:	e8 70 16 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  40784c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407850:	48 8b 40 10          	mov    0x10(%rax),%rax
  407854:	48 8b 00             	mov    (%rax),%rax
  407857:	48 83 c0 58          	add    $0x58,%rax
  40785b:	48 8b 10             	mov    (%rax),%rdx
  40785e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407862:	48 8b 70 10          	mov    0x10(%rax),%rsi
  407866:	48 89 df             	mov    %rbx,%rdi
  407869:	ff d2                	callq  *%rdx
  40786b:	48 89 d8             	mov    %rbx,%rax
  40786e:	48 83 c4 08          	add    $0x8,%rsp
  407872:	5b                   	pop    %rbx
  407873:	c9                   	leaveq 
  407874:	c3                   	retq   

0000000000407875 <_D6object20TypeInfo_StaticArray4nextMFZC8TypeInfo>:
	TypeInfo next() { return value; }
  407875:	55                   	push   %rbp
  407876:	48 89 e5             	mov    %rsp,%rbp
  407879:	48 83 ec 10          	sub    $0x10,%rsp
  40787d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407881:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  407885:	e8 32 16 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  40788a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40788e:	48 8b 40 10          	mov    0x10(%rax),%rax
  407892:	c9                   	leaveq 
  407893:	c3                   	retq   

0000000000407894 <_D6object20TypeInfo_StaticArray5flagsMFZk>:
	uint flags() { return value.flags(); }
  407894:	55                   	push   %rbp
  407895:	48 89 e5             	mov    %rsp,%rbp
  407898:	48 83 ec 10          	sub    $0x10,%rsp
  40789c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4078a0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4078a4:	e8 13 16 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  4078a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4078ad:	48 8b 40 10          	mov    0x10(%rax),%rax
  4078b1:	48 8b 00             	mov    (%rax),%rax
  4078b4:	48 83 c0 60          	add    $0x60,%rax
  4078b8:	48 8b 10             	mov    (%rax),%rdx
  4078bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4078bf:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4078c3:	ff d2                	callq  *%rdx
  4078c5:	c9                   	leaveq 
  4078c6:	c3                   	retq   

00000000004078c7 <_D6object25TypeInfo_AssociativeArray8toStringMFZAa>:
	size_t len;
}

class TypeInfo_AssociativeArray : TypeInfo
{
	char[] toString()
  4078c7:	55                   	push   %rbp
  4078c8:	48 89 e5             	mov    %rsp,%rbp
  4078cb:	41 57                	push   %r15
  4078cd:	41 56                	push   %r14
  4078cf:	41 55                	push   %r13
  4078d1:	41 54                	push   %r12
  4078d3:	53                   	push   %rbx
  4078d4:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
  4078db:	48 89 fb             	mov    %rdi,%rbx
  4078de:	48 89 b5 08 ff ff ff 	mov    %rsi,-0xf8(%rbp)
  4078e5:	48 8b bd 08 ff ff ff 	mov    -0xf8(%rbp),%rdi
  4078ec:	e8 cb 15 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return value.toString() ~ "[" ~ key.toString() ~ "]";
  4078f1:	48 c7 85 10 ff ff ff 	movq   $0x1,-0xf0(%rbp)
  4078f8:	01 00 00 00 
  4078fc:	48 c7 85 18 ff ff ff 	movq   $0x411890,-0xe8(%rbp)
  407903:	90 18 41 00 
  407907:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40790e:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  407915:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40791c:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  407923:	4c 8b a5 28 ff ff ff 	mov    -0xd8(%rbp),%r12
  40792a:	4c 8b ad 20 ff ff ff 	mov    -0xe0(%rbp),%r13
  407931:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  407938:	48 8b 40 18          	mov    0x18(%rax),%rax
  40793c:	48 8b 00             	mov    (%rax),%rax
  40793f:	48 83 c0 08          	add    $0x8,%rax
  407943:	48 8b 10             	mov    (%rax),%rdx
  407946:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40794d:	48 8b 70 18          	mov    0x18(%rax),%rsi
  407951:	48 8d bd f0 fe ff ff 	lea    -0x110(%rbp),%rdi
  407958:	ff d2                	callq  *%rdx
  40795a:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  407961:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  407968:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  40796f:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  407976:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  40797d:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  407984:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  40798b:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  407992:	4c 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%r14
  407999:	4c 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%r15
  4079a0:	48 c7 85 50 ff ff ff 	movq   $0x1,-0xb0(%rbp)
  4079a7:	01 00 00 00 
  4079ab:	48 c7 85 58 ff ff ff 	movq   $0x411892,-0xa8(%rbp)
  4079b2:	92 18 41 00 
  4079b6:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  4079bd:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  4079c4:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  4079cb:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  4079d2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  4079d9:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
  4079e0:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  4079e7:	48 89 95 b8 fe ff ff 	mov    %rdx,-0x148(%rbp)
  4079ee:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  4079f5:	48 8b 40 10          	mov    0x10(%rax),%rax
  4079f9:	48 8b 00             	mov    (%rax),%rax
  4079fc:	48 83 c0 08          	add    $0x8,%rax
  407a00:	48 8b 10             	mov    (%rax),%rdx
  407a03:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  407a0a:	48 8b 70 10          	mov    0x10(%rax),%rsi
  407a0e:	48 8d bd e0 fe ff ff 	lea    -0x120(%rbp),%rdi
  407a15:	ff d2                	callq  *%rdx
  407a17:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  407a1e:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  407a25:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  407a2c:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  407a33:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  407a3a:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  407a3e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  407a45:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  407a49:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  407a4d:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
  407a51:	48 8d bd d0 fe ff ff 	lea    -0x130(%rbp),%rdi
  407a58:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
  407a5f:	48 89 14 24          	mov    %rdx,(%rsp)
  407a63:	4c 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%r9
  407a6a:	49 89 c0             	mov    %rax,%r8
  407a6d:	ba 02 00 00 00       	mov    $0x2,%edx
  407a72:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  407a79:	b8 00 00 00 00       	mov    $0x0,%eax
  407a7e:	e8 e8 27 00 00       	callq  40a26b <_d_arraycatnT>
  407a83:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  407a8a:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  407a8e:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  407a95:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  407a99:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  407a9d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  407aa1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  407aa5:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  407aa9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  407aad:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  407ab1:	48 8d bd c0 fe ff ff 	lea    -0x140(%rbp),%rdi
  407ab8:	4c 89 34 24          	mov    %r14,(%rsp)
  407abc:	4d 89 f9             	mov    %r15,%r9
  407abf:	49 89 c0             	mov    %rax,%r8
  407ac2:	ba 02 00 00 00       	mov    $0x2,%edx
  407ac7:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  407ace:	b8 00 00 00 00       	mov    $0x0,%eax
  407ad3:	e8 93 27 00 00       	callq  40a26b <_d_arraycatnT>
  407ad8:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
  407adf:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  407ae3:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  407aea:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  407aee:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  407af2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  407af6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407afa:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  407afe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407b02:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  407b06:	4c 89 24 24          	mov    %r12,(%rsp)
  407b0a:	4d 89 e9             	mov    %r13,%r9
  407b0d:	49 89 c0             	mov    %rax,%r8
  407b10:	ba 02 00 00 00       	mov    $0x2,%edx
  407b15:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  407b1c:	48 89 df             	mov    %rbx,%rdi
  407b1f:	b8 00 00 00 00       	mov    $0x0,%eax
  407b24:	e8 42 27 00 00       	callq  40a26b <_d_arraycatnT>
	}
  407b29:	48 89 d8             	mov    %rbx,%rax
  407b2c:	48 81 c4 38 01 00 00 	add    $0x138,%rsp
  407b33:	5b                   	pop    %rbx
  407b34:	41 5c                	pop    %r12
  407b36:	41 5d                	pop    %r13
  407b38:	41 5e                	pop    %r14
  407b3a:	41 5f                	pop    %r15
  407b3c:	c9                   	leaveq 
  407b3d:	c3                   	retq   

0000000000407b3e <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  407b3e:	55                   	push   %rbp
  407b3f:	48 89 e5             	mov    %rsp,%rbp
  407b42:	48 83 ec 30          	sub    $0x30,%rsp
  407b46:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  407b4a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  407b4e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  407b52:	e8 65 13 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_AssociativeArray c;
  407b57:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  407b5e:	00 

		return this is o ||
  407b5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407b63:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  407b67:	74 71                	je     407bda <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi+0x9c>
  407b69:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  407b6d:	48 c7 c6 c0 bb 41 00 	mov    $0x41bbc0,%rsi
  407b74:	e8 86 15 00 00       	callq  4090ff <_d_dynamic_cast>
  407b79:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  407b7d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  407b82:	74 5c                	je     407be0 <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi+0xa2>
  407b84:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407b88:	48 8b 40 18          	mov    0x18(%rax),%rax
  407b8c:	48 8b 00             	mov    (%rax),%rax
  407b8f:	48 83 c0 20          	add    $0x20,%rax
  407b93:	48 8b 10             	mov    (%rax),%rdx
  407b96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407b9a:	48 8b 40 18          	mov    0x18(%rax),%rax
  407b9e:	48 89 c6             	mov    %rax,%rsi
  407ba1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407ba5:	48 8b 78 18          	mov    0x18(%rax),%rdi
  407ba9:	ff d2                	callq  *%rdx
  407bab:	85 c0                	test   %eax,%eax
  407bad:	74 31                	je     407be0 <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi+0xa2>
  407baf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407bb3:	48 8b 40 10          	mov    0x10(%rax),%rax
  407bb7:	48 8b 00             	mov    (%rax),%rax
  407bba:	48 83 c0 20          	add    $0x20,%rax
  407bbe:	48 8b 10             	mov    (%rax),%rdx
  407bc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407bc5:	48 8b 40 10          	mov    0x10(%rax),%rax
  407bc9:	48 89 c6             	mov    %rax,%rsi
  407bcc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407bd0:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407bd4:	ff d2                	callq  *%rdx
  407bd6:	85 c0                	test   %eax,%eax
  407bd8:	74 06                	je     407be0 <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi+0xa2>
  407bda:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  407bde:	eb 04                	jmp    407be4 <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi+0xa6>
  407be0:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  407be4:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_AssociativeArray)o) !is null &&
				 this.key == c.key &&
				 this.value == c.value);
	}
  407be8:	c9                   	leaveq 
  407be9:	c3                   	retq   

0000000000407bea <_D6object25TypeInfo_AssociativeArray5tsizeMFZm>:

	// BUG: need to add the rest of the functions

	size_t tsize()
  407bea:	55                   	push   %rbp
  407beb:	48 89 e5             	mov    %rsp,%rbp
  407bee:	48 83 ec 10          	sub    $0x10,%rsp
  407bf2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407bf6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  407bfa:	e8 bd 12 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return (char[int]).sizeof;
  407bff:	b8 08 00 00 00       	mov    $0x8,%eax
	}
  407c04:	c9                   	leaveq 
  407c05:	c3                   	retq   

0000000000407c06 <_D6object25TypeInfo_AssociativeArray4nextMFZC8TypeInfo>:

	TypeInfo next() { return value; }
  407c06:	55                   	push   %rbp
  407c07:	48 89 e5             	mov    %rsp,%rbp
  407c0a:	48 83 ec 10          	sub    $0x10,%rsp
  407c0e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407c12:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  407c16:	e8 a1 12 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  407c1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407c1f:	48 8b 40 10          	mov    0x10(%rax),%rax
  407c23:	c9                   	leaveq 
  407c24:	c3                   	retq   

0000000000407c25 <_D6object25TypeInfo_AssociativeArray5flagsMFZk>:
	uint flags() { return 1; }
  407c25:	55                   	push   %rbp
  407c26:	48 89 e5             	mov    %rsp,%rbp
  407c29:	48 83 ec 10          	sub    $0x10,%rsp
  407c2d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407c31:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  407c35:	e8 82 12 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  407c3a:	b8 01 00 00 00       	mov    $0x1,%eax
  407c3f:	c9                   	leaveq 
  407c40:	c3                   	retq   

0000000000407c41 <_D6object17TypeInfo_Function8toStringMFZAa>:
	TypeInfo key;
}

class TypeInfo_Function : TypeInfo
{
	char[] toString()
  407c41:	55                   	push   %rbp
  407c42:	48 89 e5             	mov    %rsp,%rbp
  407c45:	41 55                	push   %r13
  407c47:	41 54                	push   %r12
  407c49:	53                   	push   %rbx
  407c4a:	48 83 ec 78          	sub    $0x78,%rsp
  407c4e:	48 89 fb             	mov    %rdi,%rbx
  407c51:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
  407c55:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  407c59:	e8 5e 12 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return next.toString() ~ "()";
  407c5e:	48 c7 45 a0 02 00 00 	movq   $0x2,-0x60(%rbp)
  407c65:	00 
  407c66:	48 c7 45 a8 10 1a 41 	movq   $0x411a10,-0x58(%rbp)
  407c6d:	00 
  407c6e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  407c72:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  407c76:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  407c7a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  407c7e:	4c 8b 65 b8          	mov    -0x48(%rbp),%r12
  407c82:	4c 8b 6d b0          	mov    -0x50(%rbp),%r13
  407c86:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  407c8a:	48 8b 40 10          	mov    0x10(%rax),%rax
  407c8e:	48 8b 00             	mov    (%rax),%rax
  407c91:	48 83 c0 08          	add    $0x8,%rax
  407c95:	48 8b 10             	mov    (%rax),%rdx
  407c98:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  407c9c:	48 8b 70 10          	mov    0x10(%rax),%rsi
  407ca0:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  407ca4:	ff d2                	callq  *%rdx
  407ca6:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  407caa:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  407cae:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  407cb2:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  407cb6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  407cba:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  407cbe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407cc2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  407cc6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407cca:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  407cce:	4c 89 24 24          	mov    %r12,(%rsp)
  407cd2:	4d 89 e9             	mov    %r13,%r9
  407cd5:	49 89 c0             	mov    %rax,%r8
  407cd8:	ba 02 00 00 00       	mov    $0x2,%edx
  407cdd:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  407ce4:	48 89 df             	mov    %rbx,%rdi
  407ce7:	b8 00 00 00 00       	mov    $0x0,%eax
  407cec:	e8 7a 25 00 00       	callq  40a26b <_d_arraycatnT>
	}
  407cf1:	48 89 d8             	mov    %rbx,%rax
  407cf4:	48 83 c4 78          	add    $0x78,%rsp
  407cf8:	5b                   	pop    %rbx
  407cf9:	41 5c                	pop    %r12
  407cfb:	41 5d                	pop    %r13
  407cfd:	c9                   	leaveq 
  407cfe:	c3                   	retq   

0000000000407cff <_D6object17TypeInfo_Function8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  407cff:	55                   	push   %rbp
  407d00:	48 89 e5             	mov    %rsp,%rbp
  407d03:	48 83 ec 30          	sub    $0x30,%rsp
  407d07:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  407d0b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  407d0f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  407d13:	e8 a4 11 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Function c;
  407d18:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  407d1f:	00 

		return this is o ||
  407d20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407d24:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  407d28:	74 46                	je     407d70 <_D6object17TypeInfo_Function8opEqualsMFC6ObjectZi+0x71>
  407d2a:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  407d2e:	48 c7 c6 60 bc 41 00 	mov    $0x41bc60,%rsi
  407d35:	e8 c5 13 00 00       	callq  4090ff <_d_dynamic_cast>
  407d3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  407d3e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  407d43:	74 31                	je     407d76 <_D6object17TypeInfo_Function8opEqualsMFC6ObjectZi+0x77>
  407d45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407d49:	48 8b 40 10          	mov    0x10(%rax),%rax
  407d4d:	48 8b 00             	mov    (%rax),%rax
  407d50:	48 83 c0 20          	add    $0x20,%rax
  407d54:	48 8b 10             	mov    (%rax),%rdx
  407d57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407d5b:	48 8b 40 10          	mov    0x10(%rax),%rax
  407d5f:	48 89 c6             	mov    %rax,%rsi
  407d62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407d66:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407d6a:	ff d2                	callq  *%rdx
  407d6c:	85 c0                	test   %eax,%eax
  407d6e:	74 06                	je     407d76 <_D6object17TypeInfo_Function8opEqualsMFC6ObjectZi+0x77>
  407d70:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  407d74:	eb 04                	jmp    407d7a <_D6object17TypeInfo_Function8opEqualsMFC6ObjectZi+0x7b>
  407d76:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  407d7a:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_Function)o) !is null &&
				 this.next == c.next);
	}
  407d7e:	c9                   	leaveq 
  407d7f:	c3                   	retq   

0000000000407d80 <_D6object17TypeInfo_Function5tsizeMFZm>:

	// BUG: need to add the rest of the functions

	size_t tsize()
  407d80:	55                   	push   %rbp
  407d81:	48 89 e5             	mov    %rsp,%rbp
  407d84:	48 83 ec 10          	sub    $0x10,%rsp
  407d88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407d8c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  407d90:	e8 27 11 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return 0;		// no size for functions
  407d95:	b8 00 00 00 00       	mov    $0x0,%eax
	}
  407d9a:	c9                   	leaveq 
  407d9b:	c3                   	retq   

0000000000407d9c <_D6object17TypeInfo_Delegate8toStringMFZAa>:
	TypeInfo next;
}

class TypeInfo_Delegate : TypeInfo
{
	char[] toString()
  407d9c:	55                   	push   %rbp
  407d9d:	48 89 e5             	mov    %rsp,%rbp
  407da0:	41 55                	push   %r13
  407da2:	41 54                	push   %r12
  407da4:	53                   	push   %rbx
  407da5:	48 83 ec 78          	sub    $0x78,%rsp
  407da9:	48 89 fb             	mov    %rdi,%rbx
  407dac:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
  407db0:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  407db4:	e8 03 11 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return next.toString() ~ " delegate()";
  407db9:	48 c7 45 a0 0b 00 00 	movq   $0xb,-0x60(%rbp)
  407dc0:	00 
  407dc1:	48 c7 45 a8 d0 1a 41 	movq   $0x411ad0,-0x58(%rbp)
  407dc8:	00 
  407dc9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  407dcd:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  407dd1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  407dd5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  407dd9:	4c 8b 65 b8          	mov    -0x48(%rbp),%r12
  407ddd:	4c 8b 6d b0          	mov    -0x50(%rbp),%r13
  407de1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  407de5:	48 8b 40 10          	mov    0x10(%rax),%rax
  407de9:	48 8b 00             	mov    (%rax),%rax
  407dec:	48 83 c0 08          	add    $0x8,%rax
  407df0:	48 8b 10             	mov    (%rax),%rdx
  407df3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  407df7:	48 8b 70 10          	mov    0x10(%rax),%rsi
  407dfb:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  407dff:	ff d2                	callq  *%rdx
  407e01:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  407e05:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  407e09:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  407e0d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  407e11:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  407e15:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  407e19:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407e1d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  407e21:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407e25:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  407e29:	4c 89 24 24          	mov    %r12,(%rsp)
  407e2d:	4d 89 e9             	mov    %r13,%r9
  407e30:	49 89 c0             	mov    %rax,%r8
  407e33:	ba 02 00 00 00       	mov    $0x2,%edx
  407e38:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  407e3f:	48 89 df             	mov    %rbx,%rdi
  407e42:	b8 00 00 00 00       	mov    $0x0,%eax
  407e47:	e8 1f 24 00 00       	callq  40a26b <_d_arraycatnT>
	}
  407e4c:	48 89 d8             	mov    %rbx,%rax
  407e4f:	48 83 c4 78          	add    $0x78,%rsp
  407e53:	5b                   	pop    %rbx
  407e54:	41 5c                	pop    %r12
  407e56:	41 5d                	pop    %r13
  407e58:	c9                   	leaveq 
  407e59:	c3                   	retq   

0000000000407e5a <_D6object17TypeInfo_Delegate8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  407e5a:	55                   	push   %rbp
  407e5b:	48 89 e5             	mov    %rsp,%rbp
  407e5e:	48 83 ec 30          	sub    $0x30,%rsp
  407e62:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  407e66:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  407e6a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  407e6e:	e8 49 10 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Delegate c;
  407e73:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  407e7a:	00 

		return this is o ||
  407e7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407e7f:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  407e83:	74 46                	je     407ecb <_D6object17TypeInfo_Delegate8opEqualsMFC6ObjectZi+0x71>
  407e85:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  407e89:	48 c7 c6 00 bd 41 00 	mov    $0x41bd00,%rsi
  407e90:	e8 6a 12 00 00       	callq  4090ff <_d_dynamic_cast>
  407e95:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  407e99:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  407e9e:	74 31                	je     407ed1 <_D6object17TypeInfo_Delegate8opEqualsMFC6ObjectZi+0x77>
  407ea0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407ea4:	48 8b 40 10          	mov    0x10(%rax),%rax
  407ea8:	48 8b 00             	mov    (%rax),%rax
  407eab:	48 83 c0 20          	add    $0x20,%rax
  407eaf:	48 8b 10             	mov    (%rax),%rdx
  407eb2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407eb6:	48 8b 40 10          	mov    0x10(%rax),%rax
  407eba:	48 89 c6             	mov    %rax,%rsi
  407ebd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407ec1:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407ec5:	ff d2                	callq  *%rdx
  407ec7:	85 c0                	test   %eax,%eax
  407ec9:	74 06                	je     407ed1 <_D6object17TypeInfo_Delegate8opEqualsMFC6ObjectZi+0x77>
  407ecb:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  407ecf:	eb 04                	jmp    407ed5 <_D6object17TypeInfo_Delegate8opEqualsMFC6ObjectZi+0x7b>
  407ed1:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  407ed5:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_Delegate)o) !is null &&
				 this.next == c.next);
	}
  407ed9:	c9                   	leaveq 
  407eda:	c3                   	retq   

0000000000407edb <_D6object17TypeInfo_Delegate5tsizeMFZm>:

	// BUG: need to add the rest of the functions

	size_t tsize()
  407edb:	55                   	push   %rbp
  407edc:	48 89 e5             	mov    %rsp,%rbp
  407edf:	48 83 ec 10          	sub    $0x10,%rsp
  407ee3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407ee7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  407eeb:	e8 cc 0f 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{	alias int delegate() dg;
		return dg.sizeof;
  407ef0:	b8 10 00 00 00       	mov    $0x10,%eax
	}
  407ef5:	c9                   	leaveq 
  407ef6:	c3                   	retq   

0000000000407ef7 <_D6object17TypeInfo_Delegate5flagsMFZk>:

	uint flags() { return 1; }
  407ef7:	55                   	push   %rbp
  407ef8:	48 89 e5             	mov    %rsp,%rbp
  407efb:	48 83 ec 10          	sub    $0x10,%rsp
  407eff:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407f03:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  407f07:	e8 b0 0f 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  407f0c:	b8 01 00 00 00       	mov    $0x1,%eax
  407f11:	c9                   	leaveq 
  407f12:	c3                   	retq   

0000000000407f13 <_D6object14TypeInfo_Class8toStringMFZAa>:
	TypeInfo next;
}

class TypeInfo_Class : TypeInfo
{
	char[] toString() { return info.name; }
  407f13:	55                   	push   %rbp
  407f14:	48 89 e5             	mov    %rsp,%rbp
  407f17:	53                   	push   %rbx
  407f18:	48 83 ec 08          	sub    $0x8,%rsp
  407f1c:	48 89 fb             	mov    %rdi,%rbx
  407f1f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  407f23:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  407f27:	e8 90 0f 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  407f2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407f30:	48 8b 50 10          	mov    0x10(%rax),%rdx
  407f34:	48 8b 42 20          	mov    0x20(%rdx),%rax
  407f38:	48 89 03             	mov    %rax,(%rbx)
  407f3b:	48 8b 42 28          	mov    0x28(%rdx),%rax
  407f3f:	48 89 43 08          	mov    %rax,0x8(%rbx)
  407f43:	48 89 d8             	mov    %rbx,%rax
  407f46:	48 83 c4 08          	add    $0x8,%rsp
  407f4a:	5b                   	pop    %rbx
  407f4b:	c9                   	leaveq 
  407f4c:	c3                   	retq   

0000000000407f4d <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  407f4d:	55                   	push   %rbp
  407f4e:	48 89 e5             	mov    %rsp,%rbp
  407f51:	48 83 ec 40          	sub    $0x40,%rsp
  407f55:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  407f59:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  407f5d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  407f61:	e8 56 0f 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Class c;
  407f66:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  407f6d:	00 

		return this is o ||
  407f6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407f72:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  407f76:	0f 84 9a 00 00 00    	je     408016 <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi+0xc9>
  407f7c:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  407f80:	48 c7 c6 a0 bd 41 00 	mov    $0x41bda0,%rsi
  407f87:	e8 73 11 00 00       	callq  4090ff <_d_dynamic_cast>
  407f8c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  407f90:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  407f95:	0f 84 81 00 00 00    	je     40801c <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi+0xcf>
  407f9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407f9f:	48 8b 40 10          	mov    0x10(%rax),%rax
  407fa3:	48 8b 50 20          	mov    0x20(%rax),%rdx
  407fa7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407fab:	48 8b 00             	mov    (%rax),%rax
  407fae:	48 8b 00             	mov    (%rax),%rax
  407fb1:	48 8b 40 20          	mov    0x20(%rax),%rax
  407fb5:	48 39 c2             	cmp    %rax,%rdx
  407fb8:	75 62                	jne    40801c <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi+0xcf>
  407fba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407fbe:	48 8b 40 10          	mov    0x10(%rax),%rax
  407fc2:	48 8b 48 20          	mov    0x20(%rax),%rcx
  407fc6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407fca:	48 8b 00             	mov    (%rax),%rax
  407fcd:	48 8b 00             	mov    (%rax),%rax
  407fd0:	48 8b 50 28          	mov    0x28(%rax),%rdx
  407fd4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407fd8:	48 8b 40 10          	mov    0x10(%rax),%rax
  407fdc:	48 8b 40 28          	mov    0x28(%rax),%rax
  407fe0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  407fe4:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  407fe8:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  407fec:	fc                   	cld    
  407fed:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  407ff1:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  407ff5:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  407ff9:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  407ffd:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  408001:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  408003:	0f 97 c2             	seta   %dl
  408006:	0f 92 c0             	setb   %al
  408009:	89 d1                	mov    %edx,%ecx
  40800b:	28 c1                	sub    %al,%cl
  40800d:	89 c8                	mov    %ecx,%eax
  40800f:	0f be c0             	movsbl %al,%eax
  408012:	85 c0                	test   %eax,%eax
  408014:	75 06                	jne    40801c <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi+0xcf>
  408016:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  40801a:	eb 04                	jmp    408020 <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi+0xd3>
  40801c:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  408020:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_Class)o) !is null &&
				 this.info.name == c.classinfo.name);
	}
  408024:	c9                   	leaveq 
  408025:	c3                   	retq   

0000000000408026 <_D6object14TypeInfo_Class7getHashMFPvZm>:

	hash_t getHash(void *p)
  408026:	55                   	push   %rbp
  408027:	48 89 e5             	mov    %rsp,%rbp
  40802a:	48 83 ec 20          	sub    $0x20,%rsp
  40802e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408032:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408036:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40803a:	e8 7d 0e 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Object o = *cast(Object*)p;
  40803f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408043:	48 8b 00             	mov    (%rax),%rax
  408046:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		assert(o);
  40804a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40804e:	e8 69 0e 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
		return o.toHash();
  408053:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408057:	48 8b 00             	mov    (%rax),%rax
  40805a:	48 83 c0 10          	add    $0x10,%rax
  40805e:	48 8b 00             	mov    (%rax),%rax
  408061:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  408065:	ff d0                	callq  *%rax
	}
  408067:	c9                   	leaveq 
  408068:	c3                   	retq   

0000000000408069 <_D6object14TypeInfo_Class6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  408069:	55                   	push   %rbp
  40806a:	48 89 e5             	mov    %rsp,%rbp
  40806d:	48 83 ec 30          	sub    $0x30,%rsp
  408071:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408075:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408079:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40807d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408081:	e8 36 0e 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Object o1 = *cast(Object*)p1;
  408086:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40808a:	48 8b 00             	mov    (%rax),%rax
  40808d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = *cast(Object*)p2;
  408091:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408095:	48 8b 00             	mov    (%rax),%rax
  408098:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		return (o1 is o2) || (o1 && o1.opEquals(o2));
  40809c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4080a0:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  4080a4:	74 23                	je     4080c9 <_D6object14TypeInfo_Class6equalsMFPvPvZi+0x60>
  4080a6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4080ab:	74 22                	je     4080cf <_D6object14TypeInfo_Class6equalsMFPvPvZi+0x66>
  4080ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4080b1:	48 8b 00             	mov    (%rax),%rax
  4080b4:	48 83 c0 20          	add    $0x20,%rax
  4080b8:	48 8b 00             	mov    (%rax),%rax
  4080bb:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  4080bf:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4080c3:	ff d0                	callq  *%rax
  4080c5:	85 c0                	test   %eax,%eax
  4080c7:	74 06                	je     4080cf <_D6object14TypeInfo_Class6equalsMFPvPvZi+0x66>
  4080c9:	c6 45 d7 01          	movb   $0x1,-0x29(%rbp)
  4080cd:	eb 04                	jmp    4080d3 <_D6object14TypeInfo_Class6equalsMFPvPvZi+0x6a>
  4080cf:	c6 45 d7 00          	movb   $0x0,-0x29(%rbp)
  4080d3:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
	}
  4080d7:	c9                   	leaveq 
  4080d8:	c3                   	retq   

00000000004080d9 <_D6object14TypeInfo_Class7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  4080d9:	55                   	push   %rbp
  4080da:	48 89 e5             	mov    %rsp,%rbp
  4080dd:	48 83 ec 40          	sub    $0x40,%rsp
  4080e1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4080e5:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4080e9:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4080ed:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4080f1:	e8 c6 0d 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Object o1 = *cast(Object*)p1;
  4080f6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4080fa:	48 8b 00             	mov    (%rax),%rax
  4080fd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = *cast(Object*)p2;
  408101:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408105:	48 8b 00             	mov    (%rax),%rax
  408108:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		int c = 0;
  40810c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)

		// Regard null references as always being "less than"
		if (o1 !is o2)
  408113:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408117:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  40811b:	74 43                	je     408160 <_D6object14TypeInfo_Class7compareMFPvPvZi+0x87>
		{
			if (o1)
  40811d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  408122:	74 35                	je     408159 <_D6object14TypeInfo_Class7compareMFPvPvZi+0x80>
			{	if (!o2)
  408124:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  408129:	0f 95 c0             	setne  %al
  40812c:	83 f0 01             	xor    $0x1,%eax
  40812f:	84 c0                	test   %al,%al
  408131:	74 09                	je     40813c <_D6object14TypeInfo_Class7compareMFPvPvZi+0x63>
					c = 1;
  408133:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  40813a:	eb 24                	jmp    408160 <_D6object14TypeInfo_Class7compareMFPvPvZi+0x87>
				else
					c = o1.opCmp(o2);
  40813c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408140:	48 8b 00             	mov    (%rax),%rax
  408143:	48 83 c0 18          	add    $0x18,%rax
  408147:	48 8b 00             	mov    (%rax),%rax
  40814a:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  40814e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  408152:	ff d0                	callq  *%rax
  408154:	89 45 ec             	mov    %eax,-0x14(%rbp)
  408157:	eb 07                	jmp    408160 <_D6object14TypeInfo_Class7compareMFPvPvZi+0x87>
			}
			else
				c = -1;
  408159:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rbp)
		}
		return c;
  408160:	8b 45 ec             	mov    -0x14(%rbp),%eax
	}
  408163:	c9                   	leaveq 
  408164:	c3                   	retq   

0000000000408165 <_D6object14TypeInfo_Class5tsizeMFZm>:

	size_t tsize()
  408165:	55                   	push   %rbp
  408166:	48 89 e5             	mov    %rsp,%rbp
  408169:	48 83 ec 10          	sub    $0x10,%rsp
  40816d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408171:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  408175:	e8 42 0d 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return Object.sizeof;
  40817a:	b8 08 00 00 00       	mov    $0x8,%eax
	}
  40817f:	c9                   	leaveq 
  408180:	c3                   	retq   

0000000000408181 <_D6object14TypeInfo_Class5flagsMFZk>:

	uint flags() { return 1; }
  408181:	55                   	push   %rbp
  408182:	48 89 e5             	mov    %rsp,%rbp
  408185:	48 83 ec 10          	sub    $0x10,%rsp
  408189:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40818d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  408191:	e8 26 0d 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  408196:	b8 01 00 00 00       	mov    $0x1,%eax
  40819b:	c9                   	leaveq 
  40819c:	c3                   	retq   

000000000040819d <_D6object14TypeInfo_Class5offTiMFZAS6object14OffsetTypeInfo>:

	OffsetTypeInfo[] offTi()
  40819d:	55                   	push   %rbp
  40819e:	48 89 e5             	mov    %rsp,%rbp
  4081a1:	48 83 ec 10          	sub    $0x10,%rsp
  4081a5:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  4081a9:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
  4081ad:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4081b1:	e8 06 0d 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return (info.flags & 4) ? info.offTi : null;
  4081b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4081ba:	48 8b 40 10          	mov    0x10(%rax),%rax
  4081be:	8b 40 68             	mov    0x68(%rax),%eax
  4081c1:	83 e0 04             	and    $0x4,%eax
  4081c4:	85 c0                	test   %eax,%eax
  4081c6:	74 24                	je     4081ec <_D6object14TypeInfo_Class5offTiMFZAS6object14OffsetTypeInfo+0x4f>
  4081c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4081cc:	48 8b 50 10          	mov    0x10(%rax),%rdx
  4081d0:	48 8b 42 78          	mov    0x78(%rdx),%rax
  4081d4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4081d8:	48 89 01             	mov    %rax,(%rcx)
  4081db:	48 8b 82 80 00 00 00 	mov    0x80(%rdx),%rax
  4081e2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4081e6:	48 89 42 08          	mov    %rax,0x8(%rdx)
  4081ea:	eb 17                	jmp    408203 <_D6object14TypeInfo_Class5offTiMFZAS6object14OffsetTypeInfo+0x66>
  4081ec:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4081f0:	48 c7 01 00 00 00 00 	movq   $0x0,(%rcx)
  4081f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4081fb:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  408202:	00 
	}
  408203:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408207:	c9                   	leaveq 
  408208:	c3                   	retq   

0000000000408209 <_D6object18TypeInfo_Interface8toStringMFZAa>:
	ClassInfo info;
}

class TypeInfo_Interface : TypeInfo
{
	char[] toString() { return info.name; }
  408209:	55                   	push   %rbp
  40820a:	48 89 e5             	mov    %rsp,%rbp
  40820d:	53                   	push   %rbx
  40820e:	48 83 ec 08          	sub    $0x8,%rsp
  408212:	48 89 fb             	mov    %rdi,%rbx
  408215:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408219:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40821d:	e8 9a 0c 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  408222:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408226:	48 8b 50 10          	mov    0x10(%rax),%rdx
  40822a:	48 8b 42 20          	mov    0x20(%rdx),%rax
  40822e:	48 89 03             	mov    %rax,(%rbx)
  408231:	48 8b 42 28          	mov    0x28(%rdx),%rax
  408235:	48 89 43 08          	mov    %rax,0x8(%rbx)
  408239:	48 89 d8             	mov    %rbx,%rax
  40823c:	48 83 c4 08          	add    $0x8,%rsp
  408240:	5b                   	pop    %rbx
  408241:	c9                   	leaveq 
  408242:	c3                   	retq   

0000000000408243 <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  408243:	55                   	push   %rbp
  408244:	48 89 e5             	mov    %rsp,%rbp
  408247:	48 83 ec 40          	sub    $0x40,%rsp
  40824b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40824f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408253:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408257:	e8 60 0c 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Interface c;
  40825c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  408263:	00 

		return this is o ||
  408264:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408268:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40826c:	0f 84 9a 00 00 00    	je     40830c <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi+0xc9>
  408272:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  408276:	48 c7 c6 40 be 41 00 	mov    $0x41be40,%rsi
  40827d:	e8 7d 0e 00 00       	callq  4090ff <_d_dynamic_cast>
  408282:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  408286:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40828b:	0f 84 81 00 00 00    	je     408312 <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi+0xcf>
  408291:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408295:	48 8b 40 10          	mov    0x10(%rax),%rax
  408299:	48 8b 50 20          	mov    0x20(%rax),%rdx
  40829d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4082a1:	48 8b 00             	mov    (%rax),%rax
  4082a4:	48 8b 00             	mov    (%rax),%rax
  4082a7:	48 8b 40 20          	mov    0x20(%rax),%rax
  4082ab:	48 39 c2             	cmp    %rax,%rdx
  4082ae:	75 62                	jne    408312 <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi+0xcf>
  4082b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4082b4:	48 8b 40 10          	mov    0x10(%rax),%rax
  4082b8:	48 8b 48 20          	mov    0x20(%rax),%rcx
  4082bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4082c0:	48 8b 00             	mov    (%rax),%rax
  4082c3:	48 8b 00             	mov    (%rax),%rax
  4082c6:	48 8b 50 28          	mov    0x28(%rax),%rdx
  4082ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4082ce:	48 8b 40 10          	mov    0x10(%rax),%rax
  4082d2:	48 8b 40 28          	mov    0x28(%rax),%rax
  4082d6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4082da:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4082de:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  4082e2:	fc                   	cld    
  4082e3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4082e7:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  4082eb:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  4082ef:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4082f3:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  4082f7:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  4082f9:	0f 97 c2             	seta   %dl
  4082fc:	0f 92 c0             	setb   %al
  4082ff:	89 d1                	mov    %edx,%ecx
  408301:	28 c1                	sub    %al,%cl
  408303:	89 c8                	mov    %ecx,%eax
  408305:	0f be c0             	movsbl %al,%eax
  408308:	85 c0                	test   %eax,%eax
  40830a:	75 06                	jne    408312 <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi+0xcf>
  40830c:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  408310:	eb 04                	jmp    408316 <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi+0xd3>
  408312:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  408316:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_Interface)o) !is null &&
				 this.info.name == c.classinfo.name);
	}
  40831a:	c9                   	leaveq 
  40831b:	c3                   	retq   

000000000040831c <_D6object18TypeInfo_Interface7getHashMFPvZm>:

	hash_t getHash(void *p)
  40831c:	55                   	push   %rbp
  40831d:	48 89 e5             	mov    %rsp,%rbp
  408320:	48 83 ec 20          	sub    $0x20,%rsp
  408324:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408328:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40832c:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408330:	e8 87 0b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Interface* pi = **cast(Interface ***)*cast(void**)p;
  408335:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408339:	48 8b 00             	mov    (%rax),%rax
  40833c:	48 8b 00             	mov    (%rax),%rax
  40833f:	48 8b 00             	mov    (%rax),%rax
  408342:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o = cast(Object)(*cast(void**)p - pi.offset);
  408346:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40834a:	48 8b 10             	mov    (%rax),%rdx
  40834d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408351:	48 83 c0 18          	add    $0x18,%rax
  408355:	8b 00                	mov    (%rax),%eax
  408357:	48 98                	cltq   
  408359:	48 89 d1             	mov    %rdx,%rcx
  40835c:	48 29 c1             	sub    %rax,%rcx
  40835f:	48 89 c8             	mov    %rcx,%rax
  408362:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		assert(o);
  408366:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40836a:	e8 4d 0b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
		return o.toHash();
  40836f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408373:	48 8b 00             	mov    (%rax),%rax
  408376:	48 83 c0 10          	add    $0x10,%rax
  40837a:	48 8b 00             	mov    (%rax),%rax
  40837d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408381:	ff d0                	callq  *%rax
	}
  408383:	c9                   	leaveq 
  408384:	c3                   	retq   

0000000000408385 <_D6object18TypeInfo_Interface6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  408385:	55                   	push   %rbp
  408386:	48 89 e5             	mov    %rsp,%rbp
  408389:	48 83 ec 40          	sub    $0x40,%rsp
  40838d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408391:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408395:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  408399:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  40839d:	e8 1a 0b 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Interface* pi = **cast(Interface ***)*cast(void**)p1;
  4083a2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4083a6:	48 8b 00             	mov    (%rax),%rax
  4083a9:	48 8b 00             	mov    (%rax),%rax
  4083ac:	48 8b 00             	mov    (%rax),%rax
  4083af:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o1 = cast(Object)(*cast(void**)p1 - pi.offset);
  4083b3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4083b7:	48 8b 10             	mov    (%rax),%rdx
  4083ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4083be:	48 83 c0 18          	add    $0x18,%rax
  4083c2:	8b 00                	mov    (%rax),%eax
  4083c4:	48 98                	cltq   
  4083c6:	48 89 d1             	mov    %rdx,%rcx
  4083c9:	48 29 c1             	sub    %rax,%rcx
  4083cc:	48 89 c8             	mov    %rcx,%rax
  4083cf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		pi = **cast(Interface ***)*cast(void**)p2;
  4083d3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4083d7:	48 8b 00             	mov    (%rax),%rax
  4083da:	48 8b 00             	mov    (%rax),%rax
  4083dd:	48 8b 00             	mov    (%rax),%rax
  4083e0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = cast(Object)(*cast(void**)p2 - pi.offset);
  4083e4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4083e8:	48 8b 10             	mov    (%rax),%rdx
  4083eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4083ef:	48 83 c0 18          	add    $0x18,%rax
  4083f3:	8b 00                	mov    (%rax),%eax
  4083f5:	48 98                	cltq   
  4083f7:	48 89 d1             	mov    %rdx,%rcx
  4083fa:	48 29 c1             	sub    %rax,%rcx
  4083fd:	48 89 c8             	mov    %rcx,%rax
  408400:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		return o1 == o2 || (o1 && o1.opCmp(o2) == 0);
  408404:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408408:	48 8b 00             	mov    (%rax),%rax
  40840b:	48 83 c0 20          	add    $0x20,%rax
  40840f:	48 8b 00             	mov    (%rax),%rax
  408412:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  408416:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40841a:	ff d0                	callq  *%rax
  40841c:	85 c0                	test   %eax,%eax
  40841e:	75 23                	jne    408443 <_D6object18TypeInfo_Interface6equalsMFPvPvZi+0xbe>
  408420:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  408425:	74 22                	je     408449 <_D6object18TypeInfo_Interface6equalsMFPvPvZi+0xc4>
  408427:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40842b:	48 8b 00             	mov    (%rax),%rax
  40842e:	48 83 c0 18          	add    $0x18,%rax
  408432:	48 8b 00             	mov    (%rax),%rax
  408435:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  408439:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40843d:	ff d0                	callq  *%rax
  40843f:	85 c0                	test   %eax,%eax
  408441:	75 06                	jne    408449 <_D6object18TypeInfo_Interface6equalsMFPvPvZi+0xc4>
  408443:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
  408447:	eb 04                	jmp    40844d <_D6object18TypeInfo_Interface6equalsMFPvPvZi+0xc8>
  408449:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  40844d:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
	}
  408451:	c9                   	leaveq 
  408452:	c3                   	retq   

0000000000408453 <_D6object18TypeInfo_Interface7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  408453:	55                   	push   %rbp
  408454:	48 89 e5             	mov    %rsp,%rbp
  408457:	48 83 ec 40          	sub    $0x40,%rsp
  40845b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40845f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408463:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  408467:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  40846b:	e8 4c 0a 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Interface* pi = **cast(Interface ***)*cast(void**)p1;
  408470:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408474:	48 8b 00             	mov    (%rax),%rax
  408477:	48 8b 00             	mov    (%rax),%rax
  40847a:	48 8b 00             	mov    (%rax),%rax
  40847d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o1 = cast(Object)(*cast(void**)p1 - pi.offset);
  408481:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408485:	48 8b 10             	mov    (%rax),%rdx
  408488:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40848c:	48 83 c0 18          	add    $0x18,%rax
  408490:	8b 00                	mov    (%rax),%eax
  408492:	48 98                	cltq   
  408494:	48 89 d1             	mov    %rdx,%rcx
  408497:	48 29 c1             	sub    %rax,%rcx
  40849a:	48 89 c8             	mov    %rcx,%rax
  40849d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		pi = **cast(Interface ***)*cast(void**)p2;
  4084a1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4084a5:	48 8b 00             	mov    (%rax),%rax
  4084a8:	48 8b 00             	mov    (%rax),%rax
  4084ab:	48 8b 00             	mov    (%rax),%rax
  4084ae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = cast(Object)(*cast(void**)p2 - pi.offset);
  4084b2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4084b6:	48 8b 10             	mov    (%rax),%rdx
  4084b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4084bd:	48 83 c0 18          	add    $0x18,%rax
  4084c1:	8b 00                	mov    (%rax),%eax
  4084c3:	48 98                	cltq   
  4084c5:	48 89 d1             	mov    %rdx,%rcx
  4084c8:	48 29 c1             	sub    %rax,%rcx
  4084cb:	48 89 c8             	mov    %rcx,%rax
  4084ce:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		int c = 0;
  4084d2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)

		// Regard null references as always being "less than"
		if (o1 != o2)
  4084d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4084dd:	48 8b 00             	mov    (%rax),%rax
  4084e0:	48 83 c0 20          	add    $0x20,%rax
  4084e4:	48 8b 00             	mov    (%rax),%rax
  4084e7:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4084eb:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4084ef:	ff d0                	callq  *%rax
  4084f1:	85 c0                	test   %eax,%eax
  4084f3:	0f 95 c0             	setne  %al
  4084f6:	83 f0 01             	xor    $0x1,%eax
  4084f9:	84 c0                	test   %al,%al
  4084fb:	74 43                	je     408540 <_D6object18TypeInfo_Interface7compareMFPvPvZi+0xed>
		{
			if (o1)
  4084fd:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  408502:	74 35                	je     408539 <_D6object18TypeInfo_Interface7compareMFPvPvZi+0xe6>
			{	if (!o2)
  408504:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  408509:	0f 95 c0             	setne  %al
  40850c:	83 f0 01             	xor    $0x1,%eax
  40850f:	84 c0                	test   %al,%al
  408511:	74 09                	je     40851c <_D6object18TypeInfo_Interface7compareMFPvPvZi+0xc9>
					c = 1;
  408513:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  40851a:	eb 24                	jmp    408540 <_D6object18TypeInfo_Interface7compareMFPvPvZi+0xed>
				else
					c = o1.opCmp(o2);
  40851c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408520:	48 8b 00             	mov    (%rax),%rax
  408523:	48 83 c0 18          	add    $0x18,%rax
  408527:	48 8b 00             	mov    (%rax),%rax
  40852a:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40852e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408532:	ff d0                	callq  *%rax
  408534:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  408537:	eb 07                	jmp    408540 <_D6object18TypeInfo_Interface7compareMFPvPvZi+0xed>
			}
			else
				c = -1;
  408539:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
		}
		return c;
  408540:	8b 45 e4             	mov    -0x1c(%rbp),%eax
	}
  408543:	c9                   	leaveq 
  408544:	c3                   	retq   

0000000000408545 <_D6object18TypeInfo_Interface5tsizeMFZm>:

	size_t tsize()
  408545:	55                   	push   %rbp
  408546:	48 89 e5             	mov    %rsp,%rbp
  408549:	48 83 ec 10          	sub    $0x10,%rsp
  40854d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408551:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  408555:	e8 62 09 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return Object.sizeof;
  40855a:	b8 08 00 00 00       	mov    $0x8,%eax
	}
  40855f:	c9                   	leaveq 
  408560:	c3                   	retq   

0000000000408561 <_D6object18TypeInfo_Interface5flagsMFZk>:

	uint flags() { return 1; }
  408561:	55                   	push   %rbp
  408562:	48 89 e5             	mov    %rsp,%rbp
  408565:	48 83 ec 10          	sub    $0x10,%rsp
  408569:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40856d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  408571:	e8 46 09 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  408576:	b8 01 00 00 00       	mov    $0x1,%eax
  40857b:	c9                   	leaveq 
  40857c:	c3                   	retq   

000000000040857d <_D6object15TypeInfo_Struct8toStringMFZAa>:
	ClassInfo info;
}

class TypeInfo_Struct : TypeInfo
{
	char[] toString() { return name; }
  40857d:	55                   	push   %rbp
  40857e:	48 89 e5             	mov    %rsp,%rbp
  408581:	53                   	push   %rbx
  408582:	48 83 ec 08          	sub    $0x8,%rsp
  408586:	48 89 fb             	mov    %rdi,%rbx
  408589:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40858d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408591:	e8 26 09 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  408596:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40859a:	48 8b 42 10          	mov    0x10(%rdx),%rax
  40859e:	48 89 03             	mov    %rax,(%rbx)
  4085a1:	48 8b 42 18          	mov    0x18(%rdx),%rax
  4085a5:	48 89 43 08          	mov    %rax,0x8(%rbx)
  4085a9:	48 89 d8             	mov    %rbx,%rax
  4085ac:	48 83 c4 08          	add    $0x8,%rsp
  4085b0:	5b                   	pop    %rbx
  4085b1:	c9                   	leaveq 
  4085b2:	c3                   	retq   

00000000004085b3 <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  4085b3:	55                   	push   %rbp
  4085b4:	48 89 e5             	mov    %rsp,%rbp
  4085b7:	53                   	push   %rbx
  4085b8:	48 83 ec 68          	sub    $0x68,%rsp
  4085bc:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  4085c0:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  4085c4:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  4085c8:	e8 ef 08 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Struct s;
  4085cd:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4085d4:	00 

		return this is o ||
  4085d5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4085d9:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  4085dd:	0f 84 c3 00 00 00    	je     4086a6 <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xf3>
  4085e3:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  4085e7:	48 c7 c6 e0 be 41 00 	mov    $0x41bee0,%rsi
  4085ee:	e8 0c 0b 00 00       	callq  4090ff <_d_dynamic_cast>
  4085f3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4085f7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  4085fc:	0f 84 aa 00 00 00    	je     4086ac <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xf9>
  408602:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408606:	48 8b 50 10          	mov    0x10(%rax),%rdx
  40860a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40860e:	48 8b 40 10          	mov    0x10(%rax),%rax
  408612:	48 39 c2             	cmp    %rax,%rdx
  408615:	0f 85 91 00 00 00    	jne    4086ac <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xf9>
  40861b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40861f:	48 8b 48 10          	mov    0x10(%rax),%rcx
  408623:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408627:	48 8b 50 18          	mov    0x18(%rax),%rdx
  40862b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40862f:	48 8b 40 18          	mov    0x18(%rax),%rax
  408633:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  408637:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  40863b:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  40863f:	fc                   	cld    
  408640:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  408644:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
  408648:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  40864c:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  408650:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  408654:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  408656:	0f 97 c2             	seta   %dl
  408659:	0f 92 c0             	setb   %al
  40865c:	89 d1                	mov    %edx,%ecx
  40865e:	28 c1                	sub    %al,%cl
  408660:	89 c8                	mov    %ecx,%eax
  408662:	0f be c0             	movsbl %al,%eax
  408665:	85 c0                	test   %eax,%eax
  408667:	75 43                	jne    4086ac <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xf9>
  408669:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40866d:	48 8b 00             	mov    (%rax),%rax
  408670:	48 83 c0 58          	add    $0x58,%rax
  408674:	48 8b 00             	mov    (%rax),%rax
  408677:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
  40867b:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40867f:	ff d0                	callq  *%rax
  408681:	48 8b 5d c0          	mov    -0x40(%rbp),%rbx
  408685:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408689:	48 8b 00             	mov    (%rax),%rax
  40868c:	48 83 c0 58          	add    $0x58,%rax
  408690:	48 8b 00             	mov    (%rax),%rax
  408693:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
  408697:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40869b:	ff d0                	callq  *%rax
  40869d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4086a1:	48 39 c3             	cmp    %rax,%rbx
  4086a4:	75 06                	jne    4086ac <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xf9>
  4086a6:	c6 45 af 01          	movb   $0x1,-0x51(%rbp)
  4086aa:	eb 04                	jmp    4086b0 <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xfd>
  4086ac:	c6 45 af 00          	movb   $0x0,-0x51(%rbp)
  4086b0:	0f b6 45 af          	movzbl -0x51(%rbp),%eax
				((s = cast(TypeInfo_Struct)o) !is null &&
				 this.name == s.name &&
				 this.init.length == s.init.length);
	}
  4086b4:	48 83 c4 68          	add    $0x68,%rsp
  4086b8:	5b                   	pop    %rbx
  4086b9:	c9                   	leaveq 
  4086ba:	c3                   	retq   

00000000004086bb <_D6object15TypeInfo_Struct7getHashMFPvZm>:

	hash_t getHash(void *p)
  4086bb:	55                   	push   %rbp
  4086bc:	48 89 e5             	mov    %rsp,%rbp
  4086bf:	48 83 ec 40          	sub    $0x40,%rsp
  4086c3:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  4086c7:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  4086cb:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4086cf:	e8 e8 07 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{	hash_t h;
  4086d4:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4086db:	00 

		assert(p);
  4086dc:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  4086e1:	75 22                	jne    408705 <_D6object15TypeInfo_Struct7getHashMFPvZm+0x4a>
  4086e3:	48 c7 45 d0 08 00 00 	movq   $0x8,-0x30(%rbp)
  4086ea:	00 
  4086eb:	48 c7 45 d8 80 14 41 	movq   $0x411480,-0x28(%rbp)
  4086f2:	00 
  4086f3:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4086f7:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4086fb:	ba 6a 03 00 00       	mov    $0x36a,%edx
  408700:	e8 0d 22 00 00       	callq  40a912 <_d_assert>
		if (xtoHash)
  408705:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408709:	48 8b 40 30          	mov    0x30(%rax),%rax
  40870d:	48 85 c0             	test   %rax,%rax
  408710:	74 14                	je     408726 <_D6object15TypeInfo_Struct7getHashMFPvZm+0x6b>
		{	//printf("getHash() using xtoHash\n");
			h = (*xtoHash)(p);
  408712:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408716:	48 8b 40 30          	mov    0x30(%rax),%rax
  40871a:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40871e:	ff d0                	callq  *%rax
  408720:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  408724:	eb 5d                	jmp    408783 <_D6object15TypeInfo_Struct7getHashMFPvZm+0xc8>
		{
			//printf("getHash() using default hash\n");
			// A sorry hash algorithm.
			// Should use the one for strings.
			// BUG: relies on the GC not moving objects
			for (size_t i = 0; i < init.length; i++)
  408726:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40872d:	00 
  40872e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408732:	48 8b 00             	mov    (%rax),%rax
  408735:	48 83 c0 58          	add    $0x58,%rax
  408739:	48 8b 00             	mov    (%rax),%rax
  40873c:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  408740:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  408744:	ff d0                	callq  *%rax
  408746:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40874a:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  40874e:	0f 92 c0             	setb   %al
  408751:	83 f0 01             	xor    $0x1,%eax
  408754:	84 c0                	test   %al,%al
  408756:	75 2b                	jne    408783 <_D6object15TypeInfo_Struct7getHashMFPvZm+0xc8>
			{	h = h * 9 + *cast(ubyte*)p;
  408758:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40875c:	48 89 d0             	mov    %rdx,%rax
  40875f:	48 c1 e0 03          	shl    $0x3,%rax
  408763:	48 8d 14 10          	lea    (%rax,%rdx,1),%rdx
  408767:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40876b:	0f b6 00             	movzbl (%rax),%eax
  40876e:	0f b6 c0             	movzbl %al,%eax
  408771:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  408775:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
				p++;
  408779:	48 ff 45 c0          	incq   -0x40(%rbp)
  40877d:	48 ff 45 f8          	incq   -0x8(%rbp)
  408781:	eb ab                	jmp    40872e <_D6object15TypeInfo_Struct7getHashMFPvZm+0x73>
			}
		}
		return h;
  408783:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
	}
  408787:	c9                   	leaveq 
  408788:	c3                   	retq   

0000000000408789 <_D6object15TypeInfo_Struct6equalsMFPvPvZi>:

	int equals(void *p2, void *p1)
  408789:	55                   	push   %rbp
  40878a:	48 89 e5             	mov    %rsp,%rbp
  40878d:	48 83 ec 40          	sub    $0x40,%rsp
  408791:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408795:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408799:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40879d:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4087a1:	e8 16 07 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{	int c;
  4087a6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

		if (p1 == p2)
  4087ad:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4087b1:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  4087b5:	75 0c                	jne    4087c3 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0x3a>
			c = 1;
  4087b7:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  4087be:	e9 80 00 00 00       	jmpq   408843 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0xba>
		else if (!p1 || !p2)
  4087c3:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  4087c8:	0f 95 c0             	setne  %al
  4087cb:	83 f0 01             	xor    $0x1,%eax
  4087ce:	84 c0                	test   %al,%al
  4087d0:	75 0f                	jne    4087e1 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0x58>
  4087d2:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  4087d7:	0f 95 c0             	setne  %al
  4087da:	83 f0 01             	xor    $0x1,%eax
  4087dd:	84 c0                	test   %al,%al
  4087df:	74 09                	je     4087ea <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0x61>
			c = 0;
  4087e1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	int equals(void *p2, void *p1)
	{	int c;

		if (p1 == p2)
			c = 1;
		else if (!p1 || !p2)
  4087e8:	eb 59                	jmp    408843 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0xba>
			c = 0;
		else if (xopEquals)
  4087ea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4087ee:	48 8b 40 38          	mov    0x38(%rax),%rax
  4087f2:	48 85 c0             	test   %rax,%rax
  4087f5:	74 17                	je     40880e <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0x85>
			c = (*xopEquals)(p1, p2);
  4087f7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4087fb:	48 8b 40 38          	mov    0x38(%rax),%rax
  4087ff:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  408803:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  408807:	ff d0                	callq  *%rax
  408809:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40880c:	eb 35                	jmp    408843 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0xba>
		else
			// BUG: relies on the GC not moving objects
			c = (memcmp(cast(ubyte*)p1, cast(ubyte*)p2, init.length) == 0);
  40880e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408812:	48 8b 00             	mov    (%rax),%rax
  408815:	48 83 c0 58          	add    $0x58,%rax
  408819:	48 8b 00             	mov    (%rax),%rax
  40881c:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  408820:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  408824:	ff d0                	callq  *%rax
  408826:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40882a:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40882e:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  408832:	e8 bd 4b 00 00       	callq  40d3f4 <_D6kernel4core6system6memcmpFPvPvmZl>
  408837:	48 85 c0             	test   %rax,%rax
  40883a:	0f 94 c0             	sete   %al
  40883d:	0f b6 c0             	movzbl %al,%eax
  408840:	89 45 fc             	mov    %eax,-0x4(%rbp)
		return c;
  408843:	8b 45 fc             	mov    -0x4(%rbp),%eax
	}
  408846:	c9                   	leaveq 
  408847:	c3                   	retq   

0000000000408848 <_D6object15TypeInfo_Struct7compareMFPvPvZi>:

	int compare(void *p2, void *p1)
  408848:	55                   	push   %rbp
  408849:	48 89 e5             	mov    %rsp,%rbp
  40884c:	48 83 ec 40          	sub    $0x40,%rsp
  408850:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408854:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408858:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40885c:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  408860:	e8 57 06 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		int c = 0;
  408865:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

		// Regard null references as always being "less than"
		if (p1 != p2)
  40886c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408870:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  408874:	74 78                	je     4088ee <_D6object15TypeInfo_Struct7compareMFPvPvZi+0xa6>
		{
			if (p1)
  408876:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  40887b:	74 6a                	je     4088e7 <_D6object15TypeInfo_Struct7compareMFPvPvZi+0x9f>
			{	if (!p2)
  40887d:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  408882:	0f 95 c0             	setne  %al
  408885:	83 f0 01             	xor    $0x1,%eax
  408888:	84 c0                	test   %al,%al
  40888a:	74 09                	je     408895 <_D6object15TypeInfo_Struct7compareMFPvPvZi+0x4d>
					c = 1;
  40888c:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  408893:	eb 59                	jmp    4088ee <_D6object15TypeInfo_Struct7compareMFPvPvZi+0xa6>
				else if (xopCmp)
  408895:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408899:	48 8b 40 40          	mov    0x40(%rax),%rax
  40889d:	48 85 c0             	test   %rax,%rax
  4088a0:	74 17                	je     4088b9 <_D6object15TypeInfo_Struct7compareMFPvPvZi+0x71>
					c = (*xopCmp)(p1, p2);
  4088a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4088a6:	48 8b 40 40          	mov    0x40(%rax),%rax
  4088aa:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  4088ae:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4088b2:	ff d0                	callq  *%rax
  4088b4:	89 45 fc             	mov    %eax,-0x4(%rbp)
  4088b7:	eb 35                	jmp    4088ee <_D6object15TypeInfo_Struct7compareMFPvPvZi+0xa6>
				else
					// BUG: relies on the GC not moving objects
					c = memcmp(cast(ubyte*)p1, cast(ubyte*)p2, init.length);
  4088b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4088bd:	48 8b 00             	mov    (%rax),%rax
  4088c0:	48 83 c0 58          	add    $0x58,%rax
  4088c4:	48 8b 00             	mov    (%rax),%rax
  4088c7:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  4088cb:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4088cf:	ff d0                	callq  *%rax
  4088d1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4088d5:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  4088d9:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4088dd:	e8 12 4b 00 00       	callq  40d3f4 <_D6kernel4core6system6memcmpFPvPvmZl>
  4088e2:	89 45 fc             	mov    %eax,-0x4(%rbp)
  4088e5:	eb 07                	jmp    4088ee <_D6object15TypeInfo_Struct7compareMFPvPvZi+0xa6>
			}
			else
				c = -1;
  4088e7:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
		}
		return c;
  4088ee:	8b 45 fc             	mov    -0x4(%rbp),%eax
	}
  4088f1:	c9                   	leaveq 
  4088f2:	c3                   	retq   

00000000004088f3 <_D6object15TypeInfo_Struct5tsizeMFZm>:

	size_t tsize()
  4088f3:	55                   	push   %rbp
  4088f4:	48 89 e5             	mov    %rsp,%rbp
  4088f7:	48 83 ec 20          	sub    $0x20,%rsp
  4088fb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4088ff:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408903:	e8 b4 05 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return init.length;
  408908:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40890c:	48 8b 00             	mov    (%rax),%rax
  40890f:	48 83 c0 58          	add    $0x58,%rax
  408913:	48 8b 00             	mov    (%rax),%rax
  408916:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
  40891a:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40891e:	ff d0                	callq  *%rax
  408920:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
	}
  408924:	c9                   	leaveq 
  408925:	c3                   	retq   

0000000000408926 <_D6object15TypeInfo_Struct4initMFZAv>:

	void[] init() { return m_init; }
  408926:	55                   	push   %rbp
  408927:	48 89 e5             	mov    %rsp,%rbp
  40892a:	53                   	push   %rbx
  40892b:	48 83 ec 08          	sub    $0x8,%rsp
  40892f:	48 89 fb             	mov    %rdi,%rbx
  408932:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408936:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40893a:	e8 7d 05 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  40893f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  408943:	48 8b 42 20          	mov    0x20(%rdx),%rax
  408947:	48 89 03             	mov    %rax,(%rbx)
  40894a:	48 8b 42 28          	mov    0x28(%rdx),%rax
  40894e:	48 89 43 08          	mov    %rax,0x8(%rbx)
  408952:	48 89 d8             	mov    %rbx,%rax
  408955:	48 83 c4 08          	add    $0x8,%rsp
  408959:	5b                   	pop    %rbx
  40895a:	c9                   	leaveq 
  40895b:	c3                   	retq   

000000000040895c <_D6object15TypeInfo_Struct5flagsMFZk>:

	uint flags() { return m_flags; }
  40895c:	55                   	push   %rbp
  40895d:	48 89 e5             	mov    %rsp,%rbp
  408960:	48 83 ec 10          	sub    $0x10,%rsp
  408964:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408968:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40896c:	e8 4b 05 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  408971:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408975:	8b 40 50             	mov    0x50(%rax),%eax
  408978:	c9                   	leaveq 
  408979:	c3                   	retq   

000000000040897a <_D6object14TypeInfo_Tuple8toStringMFZAa>:

class TypeInfo_Tuple : TypeInfo
{
	TypeInfo[] elements;

	char[] toString()
  40897a:	55                   	push   %rbp
  40897b:	48 89 e5             	mov    %rsp,%rbp
  40897e:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  408985:	48 89 bd 30 ff ff ff 	mov    %rdi,-0xd0(%rbp)
  40898c:	48 89 b5 78 ff ff ff 	mov    %rsi,-0x88(%rbp)
  408993:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
  40899a:	e8 1d 05 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		char[] s;
  40899f:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  4089a6:	00 
  4089a7:	48 c7 45 88 00 00 00 	movq   $0x0,-0x78(%rbp)
  4089ae:	00 
		s = "(";
  4089af:	48 c7 45 80 01 00 00 	movq   $0x1,-0x80(%rbp)
  4089b6:	00 
  4089b7:	48 c7 45 88 d0 1d 41 	movq   $0x411dd0,-0x78(%rbp)
  4089be:	00 
		foreach (i, element; elements)
  4089bf:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4089c6:	00 
  4089c7:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4089ce:	48 8b 40 18          	mov    0x18(%rax),%rax
  4089d2:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  4089d9:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  4089e0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4089e4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4089eb:	48 8b 40 10          	mov    0x10(%rax),%rax
  4089ef:	48 c1 e0 03          	shl    $0x3,%rax
  4089f3:	48 03 85 38 ff ff ff 	add    -0xc8(%rbp),%rax
  4089fa:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  4089fe:	0f 95 c0             	setne  %al
  408a01:	83 f0 01             	xor    $0x1,%eax
  408a04:	84 c0                	test   %al,%al
  408a06:	0f 85 9f 00 00 00    	jne    408aab <_D6object14TypeInfo_Tuple8toStringMFZAa+0x131>
  408a0c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408a10:	48 8b 00             	mov    (%rax),%rax
  408a13:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		{
			if (i)
  408a17:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  408a1c:	74 1c                	je     408a3a <_D6object14TypeInfo_Tuple8toStringMFZAa+0xc0>
				s ~= ',';
  408a1e:	c6 45 ff 2c          	movb   $0x2c,-0x1(%rbp)
  408a22:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  408a26:	48 8d 4d ff          	lea    -0x1(%rbp),%rcx
  408a2a:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  408a2e:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  408a35:	e8 75 17 00 00       	callq  40a1af <_d_arrayappendcTp>
			s ~= element.toString();
  408a3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408a3e:	48 8b 00             	mov    (%rax),%rax
  408a41:	48 83 c0 08          	add    $0x8,%rax
  408a45:	48 8b 00             	mov    (%rax),%rax
  408a48:	48 8d bd 60 ff ff ff 	lea    -0xa0(%rbp),%rdi
  408a4f:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  408a53:	ff d0                	callq  *%rax
  408a55:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  408a5c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  408a60:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  408a67:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  408a6b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  408a6f:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  408a73:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  408a77:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  408a7b:	48 8d bd 50 ff ff ff 	lea    -0xb0(%rbp),%rdi
  408a82:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  408a86:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408a8a:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  408a8e:	49 89 c0             	mov    %rax,%r8
  408a91:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  408a98:	e8 b7 16 00 00       	callq  40a154 <_d_arrayappendT>
  408a9d:	48 83 45 e0 08       	addq   $0x8,-0x20(%rbp)
  408aa2:	48 ff 45 e8          	incq   -0x18(%rbp)
  408aa6:	e9 39 ff ff ff       	jmpq   4089e4 <_D6object14TypeInfo_Tuple8toStringMFZAa+0x6a>
		}
		s ~= ")";
  408aab:	48 c7 45 c0 01 00 00 	movq   $0x1,-0x40(%rbp)
  408ab2:	00 
  408ab3:	48 c7 45 c8 d2 1d 41 	movq   $0x411dd2,-0x38(%rbp)
  408aba:	00 
  408abb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  408abf:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  408ac3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408ac7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  408acb:	48 8d bd 40 ff ff ff 	lea    -0xc0(%rbp),%rdi
  408ad2:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  408ad6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408ada:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  408ade:	49 89 c0             	mov    %rax,%r8
  408ae1:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  408ae8:	e8 67 16 00 00       	callq  40a154 <_d_arrayappendT>
		return s;
  408aed:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  408af1:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  408af8:	48 89 02             	mov    %rax,(%rdx)
  408afb:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  408aff:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  408b06:	48 89 42 08          	mov    %rax,0x8(%rdx)
	}
  408b0a:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  408b11:	c9                   	leaveq 
  408b12:	c3                   	retq   

0000000000408b13 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  408b13:	55                   	push   %rbp
  408b14:	48 89 e5             	mov    %rsp,%rbp
  408b17:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  408b1b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  408b1f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  408b23:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  408b27:	e8 90 03 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		if (this is o)
  408b2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408b30:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  408b34:	75 0c                	jne    408b42 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x2f>
			return 1;
  408b36:	c7 45 8c 01 00 00 00 	movl   $0x1,-0x74(%rbp)
  408b3d:	e9 52 01 00 00       	jmpq   408c94 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x181>

		auto t = cast(TypeInfo_Tuple)o;
  408b42:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  408b46:	48 c7 c6 80 bf 41 00 	mov    $0x41bf80,%rsi
  408b4d:	e8 ad 05 00 00       	callq  4090ff <_d_dynamic_cast>
  408b52:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		if (t && elements.length == t.elements.length)
  408b56:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  408b5b:	0f 84 2c 01 00 00    	je     408c8d <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x17a>
  408b61:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408b65:	48 8b 50 10          	mov    0x10(%rax),%rdx
  408b69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408b6d:	48 8b 40 10          	mov    0x10(%rax),%rax
  408b71:	48 39 c2             	cmp    %rax,%rdx
  408b74:	0f 85 13 01 00 00    	jne    408c8d <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x17a>
		{
			for (size_t i = 0; i < elements.length; i++)
  408b7a:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  408b81:	00 
  408b82:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408b86:	48 8b 40 10          	mov    0x10(%rax),%rax
  408b8a:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  408b8e:	0f 92 c0             	setb   %al
  408b91:	83 f0 01             	xor    $0x1,%eax
  408b94:	84 c0                	test   %al,%al
  408b96:	0f 85 e8 00 00 00    	jne    408c84 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x171>
			{
				if (elements[i] != t.elements[i])
  408b9c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408ba0:	48 8b 40 18          	mov    0x18(%rax),%rax
  408ba4:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  408ba8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408bac:	48 8b 40 10          	mov    0x10(%rax),%rax
  408bb0:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  408bb4:	73 0a                	jae    408bc0 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0xad>
  408bb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408bba:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  408bbe:	eb 22                	jmp    408be2 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0xcf>
  408bc0:	48 c7 45 d0 08 00 00 	movq   $0x8,-0x30(%rbp)
  408bc7:	00 
  408bc8:	48 c7 45 d8 80 14 41 	movq   $0x411480,-0x28(%rbp)
  408bcf:	00 
  408bd0:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  408bd4:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  408bd8:	ba d2 03 00 00       	mov    $0x3d2,%edx
  408bdd:	e8 a3 1d 00 00       	callq  40a985 <_d_array_bounds>
  408be2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  408be6:	48 c1 e0 03          	shl    $0x3,%rax
  408bea:	48 03 45 90          	add    -0x70(%rbp),%rax
  408bee:	48 8b 00             	mov    (%rax),%rax
  408bf1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  408bf5:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  408bf9:	48 8b 02             	mov    (%rdx),%rax
  408bfc:	48 83 c0 20          	add    $0x20,%rax
  408c00:	48 8b 00             	mov    (%rax),%rax
  408c03:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  408c07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408c0b:	48 8b 40 18          	mov    0x18(%rax),%rax
  408c0f:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  408c13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408c17:	48 8b 40 10          	mov    0x10(%rax),%rax
  408c1b:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  408c1f:	73 0a                	jae    408c2b <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x118>
  408c21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408c25:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  408c29:	eb 22                	jmp    408c4d <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x13a>
  408c2b:	48 c7 45 e0 08 00 00 	movq   $0x8,-0x20(%rbp)
  408c32:	00 
  408c33:	48 c7 45 e8 80 14 41 	movq   $0x411480,-0x18(%rbp)
  408c3a:	00 
  408c3b:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  408c3f:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  408c43:	ba d2 03 00 00       	mov    $0x3d2,%edx
  408c48:	e8 38 1d 00 00       	callq  40a985 <_d_array_bounds>
  408c4d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408c51:	48 c1 e0 03          	shl    $0x3,%rax
  408c55:	48 03 45 b0          	add    -0x50(%rbp),%rax
  408c59:	48 8b 00             	mov    (%rax),%rax
  408c5c:	48 89 c6             	mov    %rax,%rsi
  408c5f:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  408c63:	ff 55 a8             	callq  *-0x58(%rbp)
  408c66:	85 c0                	test   %eax,%eax
  408c68:	0f 95 c0             	setne  %al
  408c6b:	83 f0 01             	xor    $0x1,%eax
  408c6e:	84 c0                	test   %al,%al
  408c70:	74 09                	je     408c7b <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x168>
					return 0;
  408c72:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)
  408c79:	eb 19                	jmp    408c94 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x181>
		auto t = cast(TypeInfo_Tuple)o;
		if (t && elements.length == t.elements.length)
		{
			for (size_t i = 0; i < elements.length; i++)
			{
				if (elements[i] != t.elements[i])
  408c7b:	48 ff 45 f8          	incq   -0x8(%rbp)
  408c7f:	e9 fe fe ff ff       	jmpq   408b82 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x6f>
					return 0;
			}
			return 1;
  408c84:	c7 45 8c 01 00 00 00 	movl   $0x1,-0x74(%rbp)
  408c8b:	eb 07                	jmp    408c94 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x181>
		}
		return 0;
  408c8d:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)
  408c94:	8b 45 8c             	mov    -0x74(%rbp),%eax
	}
  408c97:	c9                   	leaveq 
  408c98:	c3                   	retq   

0000000000408c99 <_D6object14TypeInfo_Tuple7getHashMFPvZm>:

	hash_t getHash(void *p)
  408c99:	55                   	push   %rbp
  408c9a:	48 89 e5             	mov    %rsp,%rbp
  408c9d:	48 83 ec 20          	sub    $0x20,%rsp
  408ca1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408ca5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408ca9:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408cad:	e8 0a 02 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		assert(0);
  408cb2:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
  408cb9:	00 
  408cba:	48 c7 45 f8 80 14 41 	movq   $0x411480,-0x8(%rbp)
  408cc1:	00 
  408cc2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408cc6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  408cca:	ba dc 03 00 00       	mov    $0x3dc,%edx
  408ccf:	e8 3e 1c 00 00       	callq  40a912 <_d_assert>
	}
  408cd4:	c9                   	leaveq 
  408cd5:	c3                   	retq   

0000000000408cd6 <_D6object14TypeInfo_Tuple6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  408cd6:	55                   	push   %rbp
  408cd7:	48 89 e5             	mov    %rsp,%rbp
  408cda:	48 83 ec 30          	sub    $0x30,%rsp
  408cde:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408ce2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408ce6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  408cea:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408cee:	e8 c9 01 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		assert(0);
  408cf3:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
  408cfa:	00 
  408cfb:	48 c7 45 f8 80 14 41 	movq   $0x411480,-0x8(%rbp)
  408d02:	00 
  408d03:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408d07:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  408d0b:	ba e1 03 00 00       	mov    $0x3e1,%edx
  408d10:	e8 fd 1b 00 00       	callq  40a912 <_d_assert>
	}
  408d15:	c9                   	leaveq 
  408d16:	c3                   	retq   

0000000000408d17 <_D6object14TypeInfo_Tuple7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  408d17:	55                   	push   %rbp
  408d18:	48 89 e5             	mov    %rsp,%rbp
  408d1b:	48 83 ec 30          	sub    $0x30,%rsp
  408d1f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408d23:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408d27:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  408d2b:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408d2f:	e8 88 01 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		assert(0);
  408d34:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
  408d3b:	00 
  408d3c:	48 c7 45 f8 80 14 41 	movq   $0x411480,-0x8(%rbp)
  408d43:	00 
  408d44:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408d48:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  408d4c:	ba e6 03 00 00       	mov    $0x3e6,%edx
  408d51:	e8 bc 1b 00 00       	callq  40a912 <_d_assert>
	}
  408d56:	c9                   	leaveq 
  408d57:	c3                   	retq   

0000000000408d58 <_D6object14TypeInfo_Tuple5tsizeMFZm>:

	size_t tsize()
  408d58:	55                   	push   %rbp
  408d59:	48 89 e5             	mov    %rsp,%rbp
  408d5c:	48 83 ec 20          	sub    $0x20,%rsp
  408d60:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408d64:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408d68:	e8 4f 01 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		assert(0);
  408d6d:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
  408d74:	00 
  408d75:	48 c7 45 f8 80 14 41 	movq   $0x411480,-0x8(%rbp)
  408d7c:	00 
  408d7d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408d81:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  408d85:	ba eb 03 00 00       	mov    $0x3eb,%edx
  408d8a:	e8 83 1b 00 00       	callq  40a912 <_d_assert>
	}
  408d8f:	c9                   	leaveq 
  408d90:	c3                   	retq   

0000000000408d91 <_D6object14TypeInfo_Tuple4swapMFPvPvZv>:

	void swap(void *p1, void *p2)
  408d91:	55                   	push   %rbp
  408d92:	48 89 e5             	mov    %rsp,%rbp
  408d95:	48 83 ec 30          	sub    $0x30,%rsp
  408d99:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408d9d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408da1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  408da5:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408da9:	e8 0e 01 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
	{
		assert(0);
  408dae:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
  408db5:	00 
  408db6:	48 c7 45 f8 80 14 41 	movq   $0x411480,-0x8(%rbp)
  408dbd:	00 
  408dbe:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408dc2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  408dc6:	ba f0 03 00 00       	mov    $0x3f0,%edx
  408dcb:	e8 42 1b 00 00       	callq  40a912 <_d_assert>
	}
  408dd0:	c9                   	leaveq 
  408dd1:	c3                   	retq   

0000000000408dd2 <_D6object9Exception5_ctorMFAaZC9Exception>:
	char[] msg;

	/**
	 * Constructor; msg is a descriptive message for the exception.
	 */
	this(char[] msg)
  408dd2:	55                   	push   %rbp
  408dd3:	48 89 e5             	mov    %rsp,%rbp
  408dd6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408dda:	48 89 f0             	mov    %rsi,%rax
  408ddd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  408de1:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  408de5:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  408dec:	00 
	{
		this.msg = msg;
  408ded:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408df1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408df5:	48 89 42 10          	mov    %rax,0x10(%rdx)
  408df9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408dfd:	48 89 42 18          	mov    %rax,0x18(%rdx)
  408e01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  408e05:	c9                   	leaveq 
  408e06:	c3                   	retq   

0000000000408e07 <_D6object9Exception8toStringMFZAa>:

	char[] toString() { return msg; }
  408e07:	55                   	push   %rbp
  408e08:	48 89 e5             	mov    %rsp,%rbp
  408e0b:	53                   	push   %rbx
  408e0c:	48 83 ec 08          	sub    $0x8,%rsp
  408e10:	48 89 fb             	mov    %rdi,%rbx
  408e13:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408e17:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408e1b:	e8 9c 00 00 00       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>
  408e20:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  408e24:	48 8b 42 10          	mov    0x10(%rdx),%rax
  408e28:	48 89 03             	mov    %rax,(%rbx)
  408e2b:	48 8b 42 18          	mov    0x18(%rdx),%rax
  408e2f:	48 89 43 08          	mov    %rax,0x8(%rbx)
  408e33:	48 89 d8             	mov    %rbx,%rax
  408e36:	48 83 c4 08          	add    $0x8,%rsp
  408e3a:	5b                   	pop    %rbx
  408e3b:	c9                   	leaveq 
  408e3c:	c3                   	retq   

0000000000408e3d <_D6object5Error5_ctorMFAaZC6object5Error>:
	Error next;

	/**
	 * Constructor; msg is a descriptive message for the exception.
	 */
	this(char[] msg)
  408e3d:	55                   	push   %rbp
  408e3e:	48 89 e5             	mov    %rsp,%rbp
  408e41:	48 83 ec 28          	sub    $0x28,%rsp
  408e45:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408e49:	48 89 f0             	mov    %rsi,%rax
  408e4c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  408e50:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  408e54:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  408e5b:	00 
	{
		super(msg);
  408e5c:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  408e60:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  408e64:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408e68:	e8 65 ff ff ff       	callq  408dd2 <_D6object9Exception5_ctorMFAaZC9Exception>
  408e6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  408e71:	c9                   	leaveq 
  408e72:	c3                   	retq   

0000000000408e73 <_D6object5Error5_ctorMFAaC6object5ErrorZC6object5Error>:

	this(char[] msg, Error next)
  408e73:	55                   	push   %rbp
  408e74:	48 89 e5             	mov    %rsp,%rbp
  408e77:	48 83 ec 30          	sub    $0x30,%rsp
  408e7b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408e7f:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  408e83:	48 89 f0             	mov    %rsi,%rax
  408e86:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  408e8a:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  408e8e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  408e95:	00 
	{
		super(msg);
  408e96:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  408e9a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  408e9e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408ea2:	e8 2b ff ff ff       	callq  408dd2 <_D6object9Exception5_ctorMFAaZC9Exception>
		this.next = next;
  408ea7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408eab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408eaf:	48 89 42 20          	mov    %rax,0x20(%rdx)
  408eb3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  408eb7:	c9                   	leaveq 
  408eb8:	c3                   	retq   
  408eb9:	90                   	nop    
  408eba:	90                   	nop    
  408ebb:	90                   	nop    

0000000000408ebc <_D9invariant12_d_invariantFC6ObjectZv>:
 * Placed into the Public Domain
 * written by Walter Bright
 * www.digitalmars.com
 */

void _d_invariant(Object o)
  408ebc:	55                   	push   %rbp
  408ebd:	48 89 e5             	mov    %rsp,%rbp
  408ec0:	48 83 ec 30          	sub    $0x30,%rsp
  408ec4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
{
	ClassInfo c;
  408ec8:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  408ecf:	00 

	//printf("__d_invariant(%p)\n", o);

	// BUG: needs to be filename/line of caller, not library routine
	assert(o !is null); // just do null check, not invariant check
  408ed0:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  408ed5:	75 22                	jne    408ef9 <_D9invariant12_d_invariantFC6ObjectZv+0x3d>
  408ed7:	48 c7 45 e0 17 00 00 	movq   $0x17,-0x20(%rbp)
  408ede:	00 
  408edf:	48 c7 45 e8 88 1f 41 	movq   $0x411f88,-0x18(%rbp)
  408ee6:	00 
  408ee7:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  408eeb:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  408eef:	ba 0f 00 00 00       	mov    $0xf,%edx
  408ef4:	e8 19 1a 00 00       	callq  40a912 <_d_assert>

	c = o.classinfo;
  408ef9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408efd:	48 8b 00             	mov    (%rax),%rax
  408f00:	48 8b 00             	mov    (%rax),%rax
  408f03:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	
	do
	{
		if(c.classInvariant)
  408f07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408f0b:	48 8b 40 60          	mov    0x60(%rax),%rax
  408f0f:	48 85 c0             	test   %rax,%rax
  408f12:	74 0e                	je     408f22 <_D9invariant12_d_invariantFC6ObjectZv+0x66>
		{
			(*c.classInvariant)(o);
  408f14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408f18:	48 8b 40 60          	mov    0x60(%rax),%rax
  408f1c:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  408f20:	ff d0                	callq  *%rax
		}

		c = c.base;
  408f22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408f26:	48 8b 40 50          	mov    0x50(%rax),%rax
  408f2a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  408f2e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  408f33:	0f 95 c0             	setne  %al
  408f36:	83 f0 01             	xor    $0x1,%eax
  408f39:	84 c0                	test   %al,%al
  408f3b:	75 02                	jne    408f3f <_D9invariant12_d_invariantFC6ObjectZv+0x83>
  408f3d:	eb c8                	jmp    408f07 <_D9invariant12_d_invariantFC6ObjectZv+0x4b>
	} while(c)
}
  408f3f:	c9                   	leaveq 
  408f40:	c3                   	retq   
  408f41:	90                   	nop    
  408f42:	90                   	nop    
  408f43:	90                   	nop    

0000000000408f44 <abort>:
/**************************************************
 Random stubs (they'll go somewhere eventually)
**************************************************/

//mixin(Stub!("void abort()"));
void abort() {
  408f44:	55                   	push   %rbp
  408f45:	48 89 e5             	mov    %rsp,%rbp
  exit(0);
  408f48:	bf 00 00 00 00       	mov    $0x0,%edi
  408f4d:	e8 ca 46 00 00       	callq  40d61c <_D4user7syscall4exitFlZv>
}
  408f52:	c9                   	leaveq 
  408f53:	c3                   	retq   

0000000000408f54 <rt_isHalting>:
  408f54:	55                   	push   %rbp
  408f55:	48 89 e5             	mov    %rsp,%rbp
  408f58:	48 83 ec 20          	sub    $0x20,%rsp
 Random stubs (they'll go somewhere eventually)
**************************************************/

//mixin(Stub!("void abort()"));
void abort() {
  exit(0);
  408f5c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  408f63:	00 
  408f64:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  408f6b:	00 
  408f6c:	48 c7 45 f0 34 00 00 	movq   $0x34,-0x10(%rbp)
  408f73:	00 
  408f74:	48 c7 45 f8 88 20 41 	movq   $0x412088,-0x8(%rbp)
  408f7b:	00 
  408f7c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  408f80:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  408f84:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408f88:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  408f8c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  408f92:	e8 a6 19 00 00       	callq  40a93d <_d_assert_msg>
  408f97:	c9                   	leaveq 
  408f98:	c3                   	retq   

0000000000408f99 <runModuleUnitTests>:
  408f99:	55                   	push   %rbp
  408f9a:	48 89 e5             	mov    %rsp,%rbp
  408f9d:	48 83 ec 20          	sub    $0x20,%rsp
  408fa1:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  408fa8:	00 
  408fa9:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  408fb0:	00 
  408fb1:	48 c7 45 f0 3a 00 00 	movq   $0x3a,-0x10(%rbp)
  408fb8:	00 
  408fb9:	48 c7 45 f8 c0 20 41 	movq   $0x4120c0,-0x8(%rbp)
  408fc0:	00 
  408fc1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  408fc5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  408fc9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408fcd:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  408fd1:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  408fd7:	e8 61 19 00 00       	callq  40a93d <_d_assert_msg>
  408fdc:	c9                   	leaveq 
  408fdd:	c3                   	retq   

0000000000408fde <_d_monitordelete>:
  408fde:	55                   	push   %rbp
  408fdf:	48 89 e5             	mov    %rsp,%rbp
  408fe2:	48 83 ec 30          	sub    $0x30,%rsp
  408fe6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408fea:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  408fee:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  408ff5:	00 
  408ff6:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  408ffd:	00 
  408ffe:	48 c7 45 f0 51 00 00 	movq   $0x51,-0x10(%rbp)
  409005:	00 
  409006:	48 c7 45 f8 00 21 41 	movq   $0x412100,-0x8(%rbp)
  40900d:	00 
  40900e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  409012:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  409016:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40901a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40901e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  409024:	e8 14 19 00 00       	callq  40a93d <_d_assert_msg>
  409029:	c9                   	leaveq 
  40902a:	c3                   	retq   

000000000040902b <_d_toObject>:
 *		If it is an interface, return the Object implementing the interface.
 *		If it is null, return null.
 *		Else, undefined crash
 */

Object _d_toObject(void* p)
  40902b:	55                   	push   %rbp
  40902c:	48 89 e5             	mov    %rsp,%rbp
  40902f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
{	Object o;
  409033:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40903a:	00 

	if (p)
  40903b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  409040:	74 4f                	je     409091 <_d_toObject+0x66>
	{
		o = cast(Object)p;
  409042:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409046:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		ClassInfo oc = o.classinfo;
  40904a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40904e:	48 8b 00             	mov    (%rax),%rax
  409051:	48 8b 00             	mov    (%rax),%rax
  409054:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Interface *pi = **cast(Interface ***)p;
  409058:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40905c:	48 8b 00             	mov    (%rax),%rax
  40905f:	48 8b 00             	mov    (%rax),%rax
  409062:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		/* Interface.offset lines up with ClassInfo.name.ptr,
		 * so we rely on pointers never being less than 64K,
		 * and Objects never being greater.
		 */
		if (pi.offset < 0x10000)
  409066:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40906a:	48 83 c0 18          	add    $0x18,%rax
  40906e:	8b 00                	mov    (%rax),%eax
  409070:	3d 00 00 01 00       	cmp    $0x10000,%eax
  409075:	7d 1a                	jge    409091 <_d_toObject+0x66>
		{
			//printf("\tpi.offset = %d\n", pi.offset);
			o = cast(Object)(p - pi.offset);
  409077:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40907b:	48 83 c0 18          	add    $0x18,%rax
  40907f:	8b 00                	mov    (%rax),%eax
  409081:	48 98                	cltq   
  409083:	48 89 c2             	mov    %rax,%rdx
  409086:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40908a:	48 29 d0             	sub    %rdx,%rax
  40908d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		}
	}
	return o;
  409091:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
  409095:	c9                   	leaveq 
  409096:	c3                   	retq   

0000000000409097 <_d_interface_cast>:
/*************************************
 * Attempts to cast Object o to class c.
 * Returns o if successful, null if not.
 */

Object _d_interface_cast(void* p, ClassInfo c)
  409097:	55                   	push   %rbp
  409098:	48 89 e5             	mov    %rsp,%rbp
  40909b:	48 83 ec 30          	sub    $0x30,%rsp
  40909f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4090a3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
{	Object o;
  4090a7:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4090ae:	00 

	//printf("_d_interface_cast(p = %p, c = '%.*s')\n", p, c.name);
	if (p)
  4090af:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  4090b4:	74 3b                	je     4090f1 <_d_interface_cast+0x5a>
	{
		Interface *pi = **cast(Interface ***)p;
  4090b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4090ba:	48 8b 00             	mov    (%rax),%rax
  4090bd:	48 8b 00             	mov    (%rax),%rax
  4090c0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

		//printf("\tpi.offset = %d\n", pi.offset);
		o = cast(Object)(p - pi.offset);
  4090c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4090c8:	48 83 c0 18          	add    $0x18,%rax
  4090cc:	8b 00                	mov    (%rax),%eax
  4090ce:	48 98                	cltq   
  4090d0:	48 89 c2             	mov    %rax,%rdx
  4090d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4090d7:	48 29 d0             	sub    %rdx,%rax
  4090da:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		return _d_dynamic_cast(o, c);
  4090de:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  4090e2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4090e6:	e8 14 00 00 00       	callq  4090ff <_d_dynamic_cast>
  4090eb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4090ef:	eb 08                	jmp    4090f9 <_d_interface_cast+0x62>
	}
	return o;
  4090f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4090f5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4090f9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
  4090fd:	c9                   	leaveq 
  4090fe:	c3                   	retq   

00000000004090ff <_d_dynamic_cast>:

Object _d_dynamic_cast(Object o, ClassInfo c)
  4090ff:	55                   	push   %rbp
  409100:	48 89 e5             	mov    %rsp,%rbp
  409103:	48 83 ec 20          	sub    $0x20,%rsp
  409107:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40910b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
{	ClassInfo oc;
  40910f:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  409116:	00 
	size_t offset = 0;
  409117:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40911e:	00 

	//printf("_d_dynamic_cast(o = %p, c = '%.*s')\n", o, c.name);

	if (o)
  40911f:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  409124:	74 39                	je     40915f <_d_dynamic_cast+0x60>
	{
		oc = o.classinfo;
  409126:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40912a:	48 8b 00             	mov    (%rax),%rax
  40912d:	48 8b 00             	mov    (%rax),%rax
  409130:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (_d_isbaseof2(oc, c, offset))
  409134:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  409138:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40913c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  409140:	e8 20 00 00 00       	callq  409165 <_d_isbaseof2>
  409145:	85 c0                	test   %eax,%eax
  409147:	74 0e                	je     409157 <_d_dynamic_cast+0x58>
		{
			//printf("\toffset = %d\n", offset);
			o = cast(Object)(cast(void*)o + offset);
  409149:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40914d:	48 03 45 e8          	add    -0x18(%rbp),%rax
  409151:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  409155:	eb 08                	jmp    40915f <_d_dynamic_cast+0x60>
		}
		else
			o = null;
  409157:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40915e:	00 
	}
	//printf("\tresult = %p\n", o);
	return o;
  40915f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
  409163:	c9                   	leaveq 
  409164:	c3                   	retq   

0000000000409165 <_d_isbaseof2>:

int _d_isbaseof2(ClassInfo oc, ClassInfo c, inout size_t offset)
  409165:	55                   	push   %rbp
  409166:	48 89 e5             	mov    %rsp,%rbp
  409169:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  409170:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  409174:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  409178:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
{	int i;
  40917c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)

	if (oc is c)
  409183:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409187:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  40918b:	75 0f                	jne    40919c <_d_isbaseof2+0x37>
		return 1;
  40918d:	c7 85 44 ff ff ff 01 	movl   $0x1,-0xbc(%rbp)
  409194:	00 00 00 
  409197:	e9 a3 02 00 00       	jmpq   40943f <_d_isbaseof2+0x2da>
	do
	{
		if (oc.base is c)
  40919c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4091a0:	48 8b 40 50          	mov    0x50(%rax),%rax
  4091a4:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  4091a8:	75 0f                	jne    4091b9 <_d_isbaseof2+0x54>
			return 1;
  4091aa:	c7 85 44 ff ff ff 01 	movl   $0x1,-0xbc(%rbp)
  4091b1:	00 00 00 
  4091b4:	e9 86 02 00 00       	jmpq   40943f <_d_isbaseof2+0x2da>
		for (i = 0; i < oc.interfaces.length; i++)
  4091b9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  4091c0:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4091c3:	48 63 d0             	movslq %eax,%rdx
  4091c6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4091ca:	48 8b 40 40          	mov    0x40(%rax),%rax
  4091ce:	48 39 c2             	cmp    %rax,%rdx
  4091d1:	0f 92 c0             	setb   %al
  4091d4:	83 f0 01             	xor    $0x1,%eax
  4091d7:	84 c0                	test   %al,%al
  4091d9:	0f 85 09 01 00 00    	jne    4092e8 <_d_isbaseof2+0x183>
		{
			ClassInfo ic;
  4091df:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4091e6:	00 

			ic = oc.interfaces[i].classinfo;
  4091e7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4091eb:	48 8b 40 48          	mov    0x48(%rax),%rax
  4091ef:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  4091f6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4091f9:	48 63 d0             	movslq %eax,%rdx
  4091fc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409200:	48 8b 40 40          	mov    0x40(%rax),%rax
  409204:	48 39 c2             	cmp    %rax,%rdx
  409207:	73 0e                	jae    409217 <_d_isbaseof2+0xb2>
  409209:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40920c:	48 98                	cltq   
  40920e:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  409215:	eb 22                	jmp    409239 <_d_isbaseof2+0xd4>
  409217:	48 c7 45 a0 0b 00 00 	movq   $0xb,-0x60(%rbp)
  40921e:	00 
  40921f:	48 c7 45 a8 52 21 41 	movq   $0x412152,-0x58(%rbp)
  409226:	00 
  409227:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  40922b:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40922f:	ba 9e 00 00 00       	mov    $0x9e,%edx
  409234:	e8 4c 17 00 00       	callq  40a985 <_d_array_bounds>
  409239:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  409240:	48 c1 e0 05          	shl    $0x5,%rax
  409244:	48 03 85 48 ff ff ff 	add    -0xb8(%rbp),%rax
  40924b:	48 8b 00             	mov    (%rax),%rax
  40924e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
			if (ic is c)
  409252:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  409256:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  40925a:	0f 85 80 00 00 00    	jne    4092e0 <_d_isbaseof2+0x17b>
			{	offset = oc.interfaces[i].offset;
  409260:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409264:	48 8b 40 48          	mov    0x48(%rax),%rax
  409268:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  40926f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  409272:	48 63 d0             	movslq %eax,%rdx
  409275:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409279:	48 8b 40 40          	mov    0x40(%rax),%rax
  40927d:	48 39 c2             	cmp    %rax,%rdx
  409280:	73 0e                	jae    409290 <_d_isbaseof2+0x12b>
  409282:	8b 45 ec             	mov    -0x14(%rbp),%eax
  409285:	48 98                	cltq   
  409287:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40928e:	eb 22                	jmp    4092b2 <_d_isbaseof2+0x14d>
  409290:	48 c7 45 b0 0b 00 00 	movq   $0xb,-0x50(%rbp)
  409297:	00 
  409298:	48 c7 45 b8 52 21 41 	movq   $0x412152,-0x48(%rbp)
  40929f:	00 
  4092a0:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  4092a4:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  4092a8:	ba a0 00 00 00       	mov    $0xa0,%edx
  4092ad:	e8 d3 16 00 00       	callq  40a985 <_d_array_bounds>
  4092b2:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4092b9:	48 c1 e0 05          	shl    $0x5,%rax
  4092bd:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  4092c4:	8b 40 18             	mov    0x18(%rax),%eax
  4092c7:	48 63 d0             	movslq %eax,%rdx
  4092ca:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4092ce:	48 89 10             	mov    %rdx,(%rax)
				return 1;
  4092d1:	c7 85 44 ff ff ff 01 	movl   $0x1,-0xbc(%rbp)
  4092d8:	00 00 00 
  4092db:	e9 5f 01 00 00       	jmpq   40943f <_d_isbaseof2+0x2da>
		for (i = 0; i < oc.interfaces.length; i++)
		{
			ClassInfo ic;

			ic = oc.interfaces[i].classinfo;
			if (ic is c)
  4092e0:	ff 45 ec             	incl   -0x14(%rbp)
  4092e3:	e9 d8 fe ff ff       	jmpq   4091c0 <_d_isbaseof2+0x5b>
			{	offset = oc.interfaces[i].offset;
				return 1;
			}
		}
		for (i = 0; i < oc.interfaces.length; i++)
  4092e8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  4092ef:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4092f2:	48 63 d0             	movslq %eax,%rdx
  4092f5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4092f9:	48 8b 40 40          	mov    0x40(%rax),%rax
  4092fd:	48 39 c2             	cmp    %rax,%rdx
  409300:	0f 92 c0             	setb   %al
  409303:	83 f0 01             	xor    $0x1,%eax
  409306:	84 c0                	test   %al,%al
  409308:	0f 85 07 01 00 00    	jne    409415 <_d_isbaseof2+0x2b0>
		{
			ClassInfo ic;
  40930e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  409315:	00 

			ic = oc.interfaces[i].classinfo;
  409316:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40931a:	48 8b 40 48          	mov    0x48(%rax),%rax
  40931e:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  409325:	8b 45 ec             	mov    -0x14(%rbp),%eax
  409328:	48 63 d0             	movslq %eax,%rdx
  40932b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40932f:	48 8b 40 40          	mov    0x40(%rax),%rax
  409333:	48 39 c2             	cmp    %rax,%rdx
  409336:	73 0e                	jae    409346 <_d_isbaseof2+0x1e1>
  409338:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40933b:	48 98                	cltq   
  40933d:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  409344:	eb 22                	jmp    409368 <_d_isbaseof2+0x203>
  409346:	48 c7 45 c0 0b 00 00 	movq   $0xb,-0x40(%rbp)
  40934d:	00 
  40934e:	48 c7 45 c8 52 21 41 	movq   $0x412152,-0x38(%rbp)
  409355:	00 
  409356:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40935a:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40935e:	ba a8 00 00 00       	mov    $0xa8,%edx
  409363:	e8 1d 16 00 00       	callq  40a985 <_d_array_bounds>
  409368:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40936f:	48 c1 e0 05          	shl    $0x5,%rax
  409373:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  40937a:	48 8b 00             	mov    (%rax),%rax
  40937d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			if (_d_isbaseof2(ic, c, offset))
  409381:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  409385:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
  409389:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40938d:	e8 d3 fd ff ff       	callq  409165 <_d_isbaseof2>
  409392:	85 c0                	test   %eax,%eax
  409394:	74 77                	je     40940d <_d_isbaseof2+0x2a8>
			{	offset = oc.interfaces[i].offset;
  409396:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40939a:	48 8b 40 48          	mov    0x48(%rax),%rax
  40939e:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4093a5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4093a8:	48 63 d0             	movslq %eax,%rdx
  4093ab:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4093af:	48 8b 40 40          	mov    0x40(%rax),%rax
  4093b3:	48 39 c2             	cmp    %rax,%rdx
  4093b6:	73 0b                	jae    4093c3 <_d_isbaseof2+0x25e>
  4093b8:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4093bb:	48 98                	cltq   
  4093bd:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  4093c1:	eb 22                	jmp    4093e5 <_d_isbaseof2+0x280>
  4093c3:	48 c7 45 d0 0b 00 00 	movq   $0xb,-0x30(%rbp)
  4093ca:	00 
  4093cb:	48 c7 45 d8 52 21 41 	movq   $0x412152,-0x28(%rbp)
  4093d2:	00 
  4093d3:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4093d7:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4093db:	ba aa 00 00 00       	mov    $0xaa,%edx
  4093e0:	e8 a0 15 00 00       	callq  40a985 <_d_array_bounds>
  4093e5:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  4093e9:	48 c1 e0 05          	shl    $0x5,%rax
  4093ed:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  4093f4:	8b 40 18             	mov    0x18(%rax),%eax
  4093f7:	48 63 d0             	movslq %eax,%rdx
  4093fa:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4093fe:	48 89 10             	mov    %rdx,(%rax)
				return 1;
  409401:	c7 85 44 ff ff ff 01 	movl   $0x1,-0xbc(%rbp)
  409408:	00 00 00 
  40940b:	eb 32                	jmp    40943f <_d_isbaseof2+0x2da>
		for (i = 0; i < oc.interfaces.length; i++)
		{
			ClassInfo ic;

			ic = oc.interfaces[i].classinfo;
			if (_d_isbaseof2(ic, c, offset))
  40940d:	ff 45 ec             	incl   -0x14(%rbp)
  409410:	e9 da fe ff ff       	jmpq   4092ef <_d_isbaseof2+0x18a>
			{	offset = oc.interfaces[i].offset;
				return 1;
			}
		}
		oc = oc.base;
  409415:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409419:	48 8b 40 50          	mov    0x50(%rax),%rax
  40941d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  409421:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
  409426:	0f 95 c0             	setne  %al
  409429:	83 f0 01             	xor    $0x1,%eax
  40942c:	84 c0                	test   %al,%al
  40942e:	75 05                	jne    409435 <_d_isbaseof2+0x2d0>
  409430:	e9 67 fd ff ff       	jmpq   40919c <_d_isbaseof2+0x37>
	} while (oc);
	return 0;
  409435:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%rbp)
  40943c:	00 00 00 
  40943f:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
}
  409445:	c9                   	leaveq 
  409446:	c3                   	retq   

0000000000409447 <_d_isbaseof>:

int _d_isbaseof(ClassInfo oc, ClassInfo c)
  409447:	55                   	push   %rbp
  409448:	48 89 e5             	mov    %rsp,%rbp
  40944b:	48 83 ec 50          	sub    $0x50,%rsp
  40944f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  409453:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
{	int i;
  409457:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	if (oc is c)
  40945e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409462:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  409466:	75 0c                	jne    409474 <_d_isbaseof+0x2d>
		return 1;
  409468:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%rbp)
  40946f:	e9 fa 00 00 00       	jmpq   40956e <_d_isbaseof+0x127>
	do
	{
		if (oc.base is c)
  409474:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409478:	48 8b 40 50          	mov    0x50(%rax),%rax
  40947c:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  409480:	75 0c                	jne    40948e <_d_isbaseof+0x47>
			return 1;
  409482:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%rbp)
  409489:	e9 e0 00 00 00       	jmpq   40956e <_d_isbaseof+0x127>
		for (i = 0; i < oc.interfaces.length; i++)
  40948e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  409495:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409498:	48 63 d0             	movslq %eax,%rdx
  40949b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40949f:	48 8b 40 40          	mov    0x40(%rax),%rax
  4094a3:	48 39 c2             	cmp    %rax,%rdx
  4094a6:	0f 92 c0             	setb   %al
  4094a9:	83 f0 01             	xor    $0x1,%eax
  4094ac:	84 c0                	test   %al,%al
  4094ae:	0f 85 93 00 00 00    	jne    409547 <_d_isbaseof+0x100>
		{
			ClassInfo ic;
  4094b4:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4094bb:	00 

			ic = oc.interfaces[i].classinfo;
  4094bc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4094c0:	48 8b 40 48          	mov    0x48(%rax),%rax
  4094c4:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  4094c8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4094cb:	48 63 d0             	movslq %eax,%rdx
  4094ce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4094d2:	48 8b 40 40          	mov    0x40(%rax),%rax
  4094d6:	48 39 c2             	cmp    %rax,%rdx
  4094d9:	73 0b                	jae    4094e6 <_d_isbaseof+0x9f>
  4094db:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4094de:	48 98                	cltq   
  4094e0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  4094e4:	eb 22                	jmp    409508 <_d_isbaseof+0xc1>
  4094e6:	48 c7 45 e0 0b 00 00 	movq   $0xb,-0x20(%rbp)
  4094ed:	00 
  4094ee:	48 c7 45 e8 52 21 41 	movq   $0x412152,-0x18(%rbp)
  4094f5:	00 
  4094f6:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  4094fa:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4094fe:	ba c0 00 00 00       	mov    $0xc0,%edx
  409503:	e8 7d 14 00 00       	callq  40a985 <_d_array_bounds>
  409508:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40950c:	48 c1 e0 05          	shl    $0x5,%rax
  409510:	48 03 45 c0          	add    -0x40(%rbp),%rax
  409514:	48 8b 00             	mov    (%rax),%rax
  409517:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			if (ic is c || _d_isbaseof(ic, c))
  40951b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40951f:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  409523:	74 11                	je     409536 <_d_isbaseof+0xef>
  409525:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  409529:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40952d:	e8 15 ff ff ff       	callq  409447 <_d_isbaseof>
  409532:	85 c0                	test   %eax,%eax
  409534:	74 09                	je     40953f <_d_isbaseof+0xf8>
				return 1;
  409536:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%rbp)
  40953d:	eb 2f                	jmp    40956e <_d_isbaseof+0x127>
		for (i = 0; i < oc.interfaces.length; i++)
		{
			ClassInfo ic;

			ic = oc.interfaces[i].classinfo;
			if (ic is c || _d_isbaseof(ic, c))
  40953f:	ff 45 f4             	incl   -0xc(%rbp)
  409542:	e9 4e ff ff ff       	jmpq   409495 <_d_isbaseof+0x4e>
				return 1;
		}
		oc = oc.base;
  409547:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40954b:	48 8b 40 50          	mov    0x50(%rax),%rax
  40954f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  409553:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  409558:	0f 95 c0             	setne  %al
  40955b:	83 f0 01             	xor    $0x1,%eax
  40955e:	84 c0                	test   %al,%al
  409560:	75 05                	jne    409567 <_d_isbaseof+0x120>
  409562:	e9 0d ff ff ff       	jmpq   409474 <_d_isbaseof+0x2d>
	} while (oc);
	return 0;
  409567:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%rbp)
  40956e:	8b 45 bc             	mov    -0x44(%rbp),%eax
}
  409571:	c9                   	leaveq 
  409572:	c3                   	retq   

0000000000409573 <_d_interface_vtbl>:

/*********************************
 * Find the vtbl[] associated with Interface ic.
 */

void *_d_interface_vtbl(ClassInfo ic, Object o)
  409573:	55                   	push   %rbp
  409574:	48 89 e5             	mov    %rsp,%rbp
  409577:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  40957e:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  409582:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
{	int i;
  409586:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	ClassInfo oc;
  40958d:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  409594:	00 

	//printf("__d_interface_vtbl(o = %p, ic = %p)\n", o, ic);

	assert(o);
  409595:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  409599:	e8 1e f9 ff ff       	callq  408ebc <_D9invariant12_d_invariantFC6ObjectZv>

	oc = o.classinfo;
  40959e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4095a2:	48 8b 00             	mov    (%rax),%rax
  4095a5:	48 8b 00             	mov    (%rax),%rax
  4095a8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (i = 0; i < oc.interfaces.length; i++)
  4095ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  4095b3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4095b6:	48 63 d0             	movslq %eax,%rdx
  4095b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4095bd:	48 8b 40 40          	mov    0x40(%rax),%rax
  4095c1:	48 39 c2             	cmp    %rax,%rdx
  4095c4:	0f 92 c0             	setb   %al
  4095c7:	83 f0 01             	xor    $0x1,%eax
  4095ca:	84 c0                	test   %al,%al
  4095cc:	0f 85 de 00 00 00    	jne    4096b0 <_d_interface_vtbl+0x13d>
	{
		ClassInfo oic;
  4095d2:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4095d9:	00 

		oic = oc.interfaces[i].classinfo;
  4095da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4095de:	48 8b 40 48          	mov    0x48(%rax),%rax
  4095e2:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  4095e6:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4095e9:	48 63 d0             	movslq %eax,%rdx
  4095ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4095f0:	48 8b 40 40          	mov    0x40(%rax),%rax
  4095f4:	48 39 c2             	cmp    %rax,%rdx
  4095f7:	73 0b                	jae    409604 <_d_interface_vtbl+0x91>
  4095f9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4095fc:	48 98                	cltq   
  4095fe:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  409602:	eb 22                	jmp    409626 <_d_interface_vtbl+0xb3>
  409604:	48 c7 45 b0 0b 00 00 	movq   $0xb,-0x50(%rbp)
  40960b:	00 
  40960c:	48 c7 45 b8 52 21 41 	movq   $0x412152,-0x48(%rbp)
  409613:	00 
  409614:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  409618:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40961c:	ba da 00 00 00       	mov    $0xda,%edx
  409621:	e8 5f 13 00 00       	callq  40a985 <_d_array_bounds>
  409626:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40962a:	48 c1 e0 05          	shl    $0x5,%rax
  40962e:	48 03 45 80          	add    -0x80(%rbp),%rax
  409632:	48 8b 00             	mov    (%rax),%rax
  409635:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (oic is ic)
  409639:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40963d:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  409641:	75 65                	jne    4096a8 <_d_interface_vtbl+0x135>
		{
			return cast(void *)oc.interfaces[i].vtbl;
  409643:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409647:	48 8b 40 48          	mov    0x48(%rax),%rax
  40964b:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  40964f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409652:	48 63 d0             	movslq %eax,%rdx
  409655:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409659:	48 8b 40 40          	mov    0x40(%rax),%rax
  40965d:	48 39 c2             	cmp    %rax,%rdx
  409660:	73 0b                	jae    40966d <_d_interface_vtbl+0xfa>
  409662:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409665:	48 98                	cltq   
  409667:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  40966b:	eb 22                	jmp    40968f <_d_interface_vtbl+0x11c>
  40966d:	48 c7 45 c0 0b 00 00 	movq   $0xb,-0x40(%rbp)
  409674:	00 
  409675:	48 c7 45 c8 52 21 41 	movq   $0x412152,-0x38(%rbp)
  40967c:	00 
  40967d:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  409681:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  409685:	ba dd 00 00 00       	mov    $0xdd,%edx
  40968a:	e8 f6 12 00 00       	callq  40a985 <_d_array_bounds>
  40968f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409693:	48 c1 e0 05          	shl    $0x5,%rax
  409697:	48 03 45 90          	add    -0x70(%rbp),%rax
  40969b:	48 8b 40 10          	mov    0x10(%rax),%rax
  40969f:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4096a6:	eb 2c                	jmp    4096d4 <_d_interface_vtbl+0x161>
	for (i = 0; i < oc.interfaces.length; i++)
	{
		ClassInfo oic;

		oic = oc.interfaces[i].classinfo;
		if (oic is ic)
  4096a8:	ff 45 f4             	incl   -0xc(%rbp)
  4096ab:	e9 03 ff ff ff       	jmpq   4095b3 <_d_interface_vtbl+0x40>
		{
			return cast(void *)oc.interfaces[i].vtbl;
		}
	}
	assert(0);
  4096b0:	48 c7 45 d0 0b 00 00 	movq   $0xb,-0x30(%rbp)
  4096b7:	00 
  4096b8:	48 c7 45 d8 52 21 41 	movq   $0x412152,-0x28(%rbp)
  4096bf:	00 
  4096c0:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4096c4:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4096c8:	ba e0 00 00 00       	mov    $0xe0,%edx
  4096cd:	e8 40 12 00 00       	callq  40a912 <_d_assert>
}
  4096d2:	eb 07                	jmp    4096db <_d_interface_vtbl+0x168>
  4096d4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4096db:	c9                   	leaveq 
  4096dc:	c3                   	retq   

00000000004096dd <_d_obj_eq>:

int _d_obj_eq(Object o1, Object o2)
  4096dd:	55                   	push   %rbp
  4096de:	48 89 e5             	mov    %rsp,%rbp
  4096e1:	48 83 ec 20          	sub    $0x20,%rsp
  4096e5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4096e9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
{
    return o1 is o2 || (o1 && o1.opEquals(o2));
  4096ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4096f1:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  4096f5:	74 23                	je     40971a <_d_obj_eq+0x3d>
  4096f7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4096fc:	74 22                	je     409720 <_d_obj_eq+0x43>
  4096fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409702:	48 8b 00             	mov    (%rax),%rax
  409705:	48 83 c0 20          	add    $0x20,%rax
  409709:	48 8b 00             	mov    (%rax),%rax
  40970c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  409710:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  409714:	ff d0                	callq  *%rax
  409716:	85 c0                	test   %eax,%eax
  409718:	74 06                	je     409720 <_d_obj_eq+0x43>
  40971a:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  40971e:	eb 04                	jmp    409724 <_d_obj_eq+0x47>
  409720:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  409724:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
}
  409728:	c9                   	leaveq 
  409729:	c3                   	retq   

000000000040972a <_d_obj_cmp>:

int _d_obj_cmp(Object o1, Object o2)
  40972a:	55                   	push   %rbp
  40972b:	48 89 e5             	mov    %rsp,%rbp
  40972e:	48 83 ec 10          	sub    $0x10,%rsp
  409732:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409736:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
{
    return o1.opCmp(o2);
  40973a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40973e:	48 8b 00             	mov    (%rax),%rax
  409741:	48 83 c0 18          	add    $0x18,%rax
  409745:	48 8b 00             	mov    (%rax),%rax
  409748:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  40974c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  409750:	ff d0                	callq  *%rax
}
  409752:	c9                   	leaveq 
  409753:	c3                   	retq   

0000000000409754 <_d_switch_string>:

int _d_switch_string(char[][] table, char[] ca)
  409754:	55                   	push   %rbp
  409755:	48 89 e5             	mov    %rsp,%rbp
  409758:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp
  40975f:	49 89 d0             	mov    %rdx,%r8
  409762:	48 89 f8             	mov    %rdi,%rax
  409765:	48 89 f2             	mov    %rsi,%rdx
  409768:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  40976f:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  409776:	4c 89 c0             	mov    %r8,%rax
  409779:	48 89 ca             	mov    %rcx,%rdx
  40977c:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  409783:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
{
	int low;
  40978a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	int high;
  409791:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	int mid;
  409798:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
	int c;
  40979f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	char[] pca;
  4097a6:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  4097ad:	00 
  4097ae:	48 c7 45 88 00 00 00 	movq   $0x0,-0x78(%rbp)
  4097b5:	00 

	low = 0;
  4097b6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	high = table.length;
  4097bd:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  4097c4:	89 45 f4             	mov    %eax,-0xc(%rbp)

	if (high &&
  4097c7:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  4097cb:	0f 84 f4 02 00 00    	je     409ac5 <_d_switch_string+0x371>
  4097d1:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4097d8:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  4097df:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  4097e6:	48 89 95 f0 fe ff ff 	mov    %rdx,-0x110(%rbp)
  4097ed:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  4097f4:	48 83 f8 00          	cmp    $0x0,%rax
  4097f8:	76 0d                	jbe    409807 <_d_switch_string+0xb3>
  4097fa:	48 c7 85 f8 fe ff ff 	movq   $0x0,-0x108(%rbp)
  409801:	00 00 00 00 
  409805:	eb 22                	jmp    409829 <_d_switch_string+0xd5>
  409807:	48 c7 45 90 0b 00 00 	movq   $0xb,-0x70(%rbp)
  40980e:	00 
  40980f:	48 c7 45 98 52 21 41 	movq   $0x412152,-0x68(%rbp)
  409816:	00 
  409817:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  40981b:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  40981f:	ba f9 00 00 00       	mov    $0xf9,%edx
  409824:	e8 5c 11 00 00       	callq  40a985 <_d_array_bounds>
  409829:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  409830:	48 c1 e0 04          	shl    $0x4,%rax
  409834:	48 03 85 f0 fe ff ff 	add    -0x110(%rbp),%rax
  40983b:	48 8b 00             	mov    (%rax),%rax
  40983e:	48 39 85 e8 fe ff ff 	cmp    %rax,-0x118(%rbp)
  409845:	0f 82 7a 02 00 00    	jb     409ac5 <_d_switch_string+0x371>
  40984b:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  409852:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  409859:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  409860:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  409867:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40986a:	ff c8                	dec    %eax
  40986c:	48 98                	cltq   
  40986e:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  409875:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40987c:	48 39 85 18 ff ff ff 	cmp    %rax,-0xe8(%rbp)
  409883:	73 10                	jae    409895 <_d_switch_string+0x141>
  409885:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  40988c:	48 89 95 10 ff ff ff 	mov    %rdx,-0xf0(%rbp)
  409893:	eb 22                	jmp    4098b7 <_d_switch_string+0x163>
  409895:	48 c7 45 a0 0b 00 00 	movq   $0xb,-0x60(%rbp)
  40989c:	00 
  40989d:	48 c7 45 a8 52 21 41 	movq   $0x412152,-0x58(%rbp)
  4098a4:	00 
  4098a5:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  4098a9:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  4098ad:	ba fa 00 00 00       	mov    $0xfa,%edx
  4098b2:	e8 ce 10 00 00       	callq  40a985 <_d_array_bounds>
  4098b7:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  4098be:	48 c1 e0 04          	shl    $0x4,%rax
  4098c2:	48 03 85 08 ff ff ff 	add    -0xf8(%rbp),%rax
  4098c9:	48 8b 00             	mov    (%rax),%rax
  4098cc:	48 39 85 00 ff ff ff 	cmp    %rax,-0x100(%rbp)
  4098d3:	0f 87 ec 01 00 00    	ja     409ac5 <_d_switch_string+0x371>
		ca.length >= table[0].length &&
		ca.length <= table[high - 1].length)
	{
		// Looking for 0 length string, which would only be at the beginning
		if (ca.length == 0)
  4098d9:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4098e0:	48 85 c0             	test   %rax,%rax
  4098e3:	75 0f                	jne    4098f4 <_d_switch_string+0x1a0>
			return 0;
  4098e5:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%rbp)
  4098ec:	00 00 00 
  4098ef:	e9 db 01 00 00       	jmpq   409acf <_d_switch_string+0x37b>

		char c1 = ca[0];
  4098f4:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
  4098fb:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
  409902:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  409909:	48 83 f8 00          	cmp    $0x0,%rax
  40990d:	76 0d                	jbe    40991c <_d_switch_string+0x1c8>
  40990f:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  409916:	00 00 00 00 
  40991a:	eb 22                	jmp    40993e <_d_switch_string+0x1ea>
  40991c:	48 c7 45 b0 0b 00 00 	movq   $0xb,-0x50(%rbp)
  409923:	00 
  409924:	48 c7 45 b8 52 21 41 	movq   $0x412152,-0x48(%rbp)
  40992b:	00 
  40992c:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  409930:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  409934:	ba 00 01 00 00       	mov    $0x100,%edx
  409939:	e8 47 10 00 00       	callq  40a985 <_d_array_bounds>
  40993e:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  409945:	48 03 85 28 ff ff ff 	add    -0xd8(%rbp),%rax
  40994c:	0f b6 00             	movzbl (%rax),%eax
  40994f:	88 45 ff             	mov    %al,-0x1(%rbp)
  409952:	eb 00                	jmp    409954 <_d_switch_string+0x200>

		// Do binary search
		while (low < high)
  409954:	8b 45 f8             	mov    -0x8(%rbp),%eax
  409957:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  40995a:	0f 9c c0             	setl   %al
  40995d:	83 f0 01             	xor    $0x1,%eax
  409960:	84 c0                	test   %al,%al
  409962:	0f 85 5d 01 00 00    	jne    409ac5 <_d_switch_string+0x371>
		{
			mid = (low + high) >> 1;
  409968:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40996b:	03 45 f8             	add    -0x8(%rbp),%eax
  40996e:	d1 f8                	sar    %eax
  409970:	89 45 f0             	mov    %eax,-0x10(%rbp)
			pca = table[mid];
  409973:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40997a:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  409981:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409984:	48 63 d0             	movslq %eax,%rdx
  409987:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40998e:	48 39 c2             	cmp    %rax,%rdx
  409991:	73 0e                	jae    4099a1 <_d_switch_string+0x24d>
  409993:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409996:	48 98                	cltq   
  409998:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40999f:	eb 22                	jmp    4099c3 <_d_switch_string+0x26f>
  4099a1:	48 c7 45 c0 0b 00 00 	movq   $0xb,-0x40(%rbp)
  4099a8:	00 
  4099a9:	48 c7 45 c8 52 21 41 	movq   $0x412152,-0x38(%rbp)
  4099b0:	00 
  4099b1:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4099b5:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4099b9:	ba 06 01 00 00       	mov    $0x106,%edx
  4099be:	e8 c2 0f 00 00       	callq  40a985 <_d_array_bounds>
  4099c3:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  4099ca:	48 c1 e0 04          	shl    $0x4,%rax
  4099ce:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  4099d5:	48 01 c2             	add    %rax,%rdx
  4099d8:	48 8b 02             	mov    (%rdx),%rax
  4099db:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  4099df:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4099e3:	48 89 45 88          	mov    %rax,-0x78(%rbp)
			c = ca.length - pca.length;
  4099e7:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4099ee:	89 c2                	mov    %eax,%edx
  4099f0:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  4099f4:	89 d1                	mov    %edx,%ecx
  4099f6:	29 c1                	sub    %eax,%ecx
  4099f8:	89 c8                	mov    %ecx,%eax
  4099fa:	89 45 ec             	mov    %eax,-0x14(%rbp)
			if (c == 0)
  4099fd:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  409a01:	0f 85 a0 00 00 00    	jne    409aa7 <_d_switch_string+0x353>
			{
				c = cast(ubyte)c1 - cast(ubyte)pca[0];
  409a07:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  409a0b:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  409a11:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  409a15:	48 89 95 50 ff ff ff 	mov    %rdx,-0xb0(%rbp)
  409a1c:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  409a20:	48 83 f8 00          	cmp    $0x0,%rax
  409a24:	76 0d                	jbe    409a33 <_d_switch_string+0x2df>
  409a26:	48 c7 85 58 ff ff ff 	movq   $0x0,-0xa8(%rbp)
  409a2d:	00 00 00 00 
  409a31:	eb 22                	jmp    409a55 <_d_switch_string+0x301>
  409a33:	48 c7 45 d0 0b 00 00 	movq   $0xb,-0x30(%rbp)
  409a3a:	00 
  409a3b:	48 c7 45 d8 52 21 41 	movq   $0x412152,-0x28(%rbp)
  409a42:	00 
  409a43:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  409a47:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  409a4b:	ba 0a 01 00 00       	mov    $0x10a,%edx
  409a50:	e8 30 0f 00 00       	callq  40a985 <_d_array_bounds>
  409a55:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  409a5c:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  409a63:	0f b6 00             	movzbl (%rax),%eax
  409a66:	0f b6 c0             	movzbl %al,%eax
  409a69:	8b 8d 4c ff ff ff    	mov    -0xb4(%rbp),%ecx
  409a6f:	29 c1                	sub    %eax,%ecx
  409a71:	89 c8                	mov    %ecx,%eax
  409a73:	89 45 ec             	mov    %eax,-0x14(%rbp)
				if (c == 0)
  409a76:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  409a7a:	75 2b                	jne    409aa7 <_d_switch_string+0x353>
				{
					c = memcmp(ca.ptr, pca.ptr, ca.length);
  409a7c:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  409a83:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  409a87:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
  409a8e:	e8 61 39 00 00       	callq  40d3f4 <_D6kernel4core6system6memcmpFPvPvmZl>
  409a93:	89 45 ec             	mov    %eax,-0x14(%rbp)
					if (c == 0)
  409a96:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  409a9a:	75 0b                	jne    409aa7 <_d_switch_string+0x353>
					{
						return mid;
  409a9c:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409a9f:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%rbp)
  409aa5:	eb 28                	jmp    409acf <_d_switch_string+0x37b>
					}
				}
			}
			if (c < 0)
  409aa7:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  409aab:	79 0b                	jns    409ab8 <_d_switch_string+0x364>
			{
				high = mid;
  409aad:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409ab0:	89 45 f4             	mov    %eax,-0xc(%rbp)
  409ab3:	e9 9c fe ff ff       	jmpq   409954 <_d_switch_string+0x200>
			}
			else
			{
				low = mid + 1;
  409ab8:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409abb:	ff c0                	inc    %eax
  409abd:	89 45 f8             	mov    %eax,-0x8(%rbp)
					{
						return mid;
					}
				}
			}
			if (c < 0)
  409ac0:	e9 8f fe ff ff       	jmpq   409954 <_d_switch_string+0x200>
				low = mid + 1;
			}
		}
	}

	return -1;				// not found
  409ac5:	c7 85 24 ff ff ff ff 	movl   $0xffffffff,-0xdc(%rbp)
  409acc:	ff ff ff 
  409acf:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
}
  409ad5:	c9                   	leaveq 
  409ad6:	c3                   	retq   

0000000000409ad7 <_d_switch_ustring>:

int _d_switch_ustring(wchar[][] table, wchar[] ca)
  409ad7:	55                   	push   %rbp
  409ad8:	48 89 e5             	mov    %rsp,%rbp
  409adb:	48 83 ec 70          	sub    $0x70,%rsp
  409adf:	49 89 d0             	mov    %rdx,%r8
  409ae2:	48 89 f8             	mov    %rdi,%rax
  409ae5:	48 89 f2             	mov    %rsi,%rdx
  409ae8:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  409aec:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  409af0:	4c 89 c0             	mov    %r8,%rax
  409af3:	48 89 ca             	mov    %rcx,%rdx
  409af6:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  409afa:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
{
	int low;
  409afe:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	int high;
  409b05:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	int mid;
  409b0c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	int c;
  409b13:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
	wchar[] pca;
  409b1a:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  409b21:	00 
  409b22:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  409b29:	00 

	low = 0;
  409b2a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	high = table.length;
  409b31:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  409b35:	89 45 f8             	mov    %eax,-0x8(%rbp)
  409b38:	eb 00                	jmp    409b3a <_d_switch_ustring+0x63>

	// Do binary search
	while (low < high)
  409b3a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  409b3d:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  409b40:	0f 9c c0             	setl   %al
  409b43:	83 f0 01             	xor    $0x1,%eax
  409b46:	84 c0                	test   %al,%al
  409b48:	0f 85 ca 00 00 00    	jne    409c18 <_d_switch_ustring+0x141>
	{
		mid = (low + high) >> 1;
  409b4e:	8b 45 f8             	mov    -0x8(%rbp),%eax
  409b51:	03 45 fc             	add    -0x4(%rbp),%eax
  409b54:	d1 f8                	sar    %eax
  409b56:	89 45 f4             	mov    %eax,-0xc(%rbp)
		pca = table[mid];
  409b59:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409b5d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  409b61:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409b64:	48 63 d0             	movslq %eax,%rdx
  409b67:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  409b6b:	48 39 c2             	cmp    %rax,%rdx
  409b6e:	73 0b                	jae    409b7b <_d_switch_ustring+0xa4>
  409b70:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409b73:	48 98                	cltq   
  409b75:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  409b79:	eb 22                	jmp    409b9d <_d_switch_ustring+0xc6>
  409b7b:	48 c7 45 e0 0b 00 00 	movq   $0xb,-0x20(%rbp)
  409b82:	00 
  409b83:	48 c7 45 e8 52 21 41 	movq   $0x412152,-0x18(%rbp)
  409b8a:	00 
  409b8b:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  409b8f:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  409b93:	ba 31 01 00 00       	mov    $0x131,%edx
  409b98:	e8 e8 0d 00 00       	callq  40a985 <_d_array_bounds>
  409b9d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  409ba1:	48 c1 e0 04          	shl    $0x4,%rax
  409ba5:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  409ba9:	48 01 c2             	add    %rax,%rdx
  409bac:	48 8b 02             	mov    (%rdx),%rax
  409baf:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  409bb3:	48 8b 42 08          	mov    0x8(%rdx),%rax
  409bb7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		c = ca.length - pca.length;
  409bbb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  409bbf:	89 c2                	mov    %eax,%edx
  409bc1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409bc5:	89 d1                	mov    %edx,%ecx
  409bc7:	29 c1                	sub    %eax,%ecx
  409bc9:	89 c8                	mov    %ecx,%eax
  409bcb:	89 45 f0             	mov    %eax,-0x10(%rbp)
		if (c == 0)
  409bce:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  409bd2:	75 26                	jne    409bfa <_d_switch_ustring+0x123>
		{
			c = memcmp(ca.ptr, pca.ptr, ca.length * wchar.sizeof);
  409bd4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  409bd8:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  409bdc:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  409be0:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  409be4:	e8 0b 38 00 00       	callq  40d3f4 <_D6kernel4core6system6memcmpFPvPvmZl>
  409be9:	89 45 f0             	mov    %eax,-0x10(%rbp)
			if (c == 0)
  409bec:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  409bf0:	75 08                	jne    409bfa <_d_switch_ustring+0x123>
			{
				return mid;
  409bf2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409bf5:	89 45 ac             	mov    %eax,-0x54(%rbp)
  409bf8:	eb 25                	jmp    409c1f <_d_switch_ustring+0x148>
			}
		}
		if (c < 0)
  409bfa:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  409bfe:	79 0b                	jns    409c0b <_d_switch_ustring+0x134>
		{
			high = mid;
  409c00:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409c03:	89 45 f8             	mov    %eax,-0x8(%rbp)
  409c06:	e9 2f ff ff ff       	jmpq   409b3a <_d_switch_ustring+0x63>
		}
		else
		{
			low = mid + 1;
  409c0b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409c0e:	ff c0                	inc    %eax
  409c10:	89 45 fc             	mov    %eax,-0x4(%rbp)
			if (c == 0)
			{
				return mid;
			}
		}
		if (c < 0)
  409c13:	e9 22 ff ff ff       	jmpq   409b3a <_d_switch_ustring+0x63>
		{
			low = mid + 1;
		}
	}

	return -1;				// not found
  409c18:	c7 45 ac ff ff ff ff 	movl   $0xffffffff,-0x54(%rbp)
  409c1f:	8b 45 ac             	mov    -0x54(%rbp),%eax
}
  409c22:	c9                   	leaveq 
  409c23:	c3                   	retq   

0000000000409c24 <_d_switch_dstring>:

int _d_switch_dstring(dchar[][] table, dchar[] ca)
  409c24:	55                   	push   %rbp
  409c25:	48 89 e5             	mov    %rsp,%rbp
  409c28:	48 83 ec 70          	sub    $0x70,%rsp
  409c2c:	49 89 d0             	mov    %rdx,%r8
  409c2f:	48 89 f8             	mov    %rdi,%rax
  409c32:	48 89 f2             	mov    %rsi,%rdx
  409c35:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  409c39:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  409c3d:	4c 89 c0             	mov    %r8,%rax
  409c40:	48 89 ca             	mov    %rcx,%rdx
  409c43:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  409c47:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
{
	int low;
  409c4b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	int high;
  409c52:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	int mid;
  409c59:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	int c;
  409c60:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
	dchar[] pca;
  409c67:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  409c6e:	00 
  409c6f:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  409c76:	00 

	low = 0;
  409c77:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	high = table.length;
  409c7e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  409c82:	89 45 f8             	mov    %eax,-0x8(%rbp)
  409c85:	eb 00                	jmp    409c87 <_d_switch_dstring+0x63>

	// Do binary search
	while (low < high)
  409c87:	8b 45 fc             	mov    -0x4(%rbp),%eax
  409c8a:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  409c8d:	0f 9c c0             	setl   %al
  409c90:	83 f0 01             	xor    $0x1,%eax
  409c93:	84 c0                	test   %al,%al
  409c95:	0f 85 ce 00 00 00    	jne    409d69 <_d_switch_dstring+0x145>
	{
		mid = (low + high) >> 1;
  409c9b:	8b 45 f8             	mov    -0x8(%rbp),%eax
  409c9e:	03 45 fc             	add    -0x4(%rbp),%eax
  409ca1:	d1 f8                	sar    %eax
  409ca3:	89 45 f4             	mov    %eax,-0xc(%rbp)
		pca = table[mid];
  409ca6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409caa:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  409cae:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409cb1:	48 63 d0             	movslq %eax,%rdx
  409cb4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  409cb8:	48 39 c2             	cmp    %rax,%rdx
  409cbb:	73 0b                	jae    409cc8 <_d_switch_dstring+0xa4>
  409cbd:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409cc0:	48 98                	cltq   
  409cc2:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  409cc6:	eb 22                	jmp    409cea <_d_switch_dstring+0xc6>
  409cc8:	48 c7 45 e0 0b 00 00 	movq   $0xb,-0x20(%rbp)
  409ccf:	00 
  409cd0:	48 c7 45 e8 52 21 41 	movq   $0x412152,-0x18(%rbp)
  409cd7:	00 
  409cd8:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  409cdc:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  409ce0:	ba 57 01 00 00       	mov    $0x157,%edx
  409ce5:	e8 9b 0c 00 00       	callq  40a985 <_d_array_bounds>
  409cea:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  409cee:	48 c1 e0 04          	shl    $0x4,%rax
  409cf2:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  409cf6:	48 01 c2             	add    %rax,%rdx
  409cf9:	48 8b 02             	mov    (%rdx),%rax
  409cfc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  409d00:	48 8b 42 08          	mov    0x8(%rdx),%rax
  409d04:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		c = ca.length - pca.length;
  409d08:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  409d0c:	89 c2                	mov    %eax,%edx
  409d0e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409d12:	89 d1                	mov    %edx,%ecx
  409d14:	29 c1                	sub    %eax,%ecx
  409d16:	89 c8                	mov    %ecx,%eax
  409d18:	89 45 f0             	mov    %eax,-0x10(%rbp)
		if (c == 0)
  409d1b:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  409d1f:	75 2a                	jne    409d4b <_d_switch_dstring+0x127>
		{
			c = memcmp(ca.ptr, pca.ptr, ca.length * dchar.sizeof);
  409d21:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  409d25:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  409d2c:	00 
  409d2d:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  409d31:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  409d35:	e8 ba 36 00 00       	callq  40d3f4 <_D6kernel4core6system6memcmpFPvPvmZl>
  409d3a:	89 45 f0             	mov    %eax,-0x10(%rbp)
			if (c == 0)
  409d3d:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  409d41:	75 08                	jne    409d4b <_d_switch_dstring+0x127>
			{
				return mid;
  409d43:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409d46:	89 45 ac             	mov    %eax,-0x54(%rbp)
  409d49:	eb 25                	jmp    409d70 <_d_switch_dstring+0x14c>
			}
		}
		if (c < 0)
  409d4b:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  409d4f:	79 0b                	jns    409d5c <_d_switch_dstring+0x138>
		{
			high = mid;
  409d51:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409d54:	89 45 f8             	mov    %eax,-0x8(%rbp)
  409d57:	e9 2b ff ff ff       	jmpq   409c87 <_d_switch_dstring+0x63>
		}
		else
		{
			low = mid + 1;
  409d5c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409d5f:	ff c0                	inc    %eax
  409d61:	89 45 fc             	mov    %eax,-0x4(%rbp)
			if (c == 0)
			{
				return mid;
			}
		}
		if (c < 0)
  409d64:	e9 1e ff ff ff       	jmpq   409c87 <_d_switch_dstring+0x63>
		{
			low = mid + 1;
		}
	}

	return -1;				// not found
  409d69:	c7 45 ac ff ff ff ff 	movl   $0xffffffff,-0x54(%rbp)
  409d70:	8b 45 ac             	mov    -0x54(%rbp),%eax
}
  409d73:	c9                   	leaveq 
  409d74:	c3                   	retq   

0000000000409d75 <_d_newclass>:
  409d75:	55                   	push   %rbp
  409d76:	48 89 e5             	mov    %rsp,%rbp
  409d79:	48 83 ec 30          	sub    $0x30,%rsp
  409d7d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
		{
			low = mid + 1;
		}
	}

	return -1;				// not found
  409d81:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  409d88:	00 
  409d89:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  409d90:	00 
  409d91:	48 c7 45 f0 41 00 00 	movq   $0x41,-0x10(%rbp)
  409d98:	00 
  409d99:	48 c7 45 f8 60 21 41 	movq   $0x412160,-0x8(%rbp)
  409da0:	00 
  409da1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  409da5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  409da9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  409dad:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  409db1:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  409db7:	e8 81 0b 00 00       	callq  40a93d <_d_assert_msg>
  409dbc:	c9                   	leaveq 
  409dbd:	c3                   	retq   

0000000000409dbe <_d_delinterface>:
  409dbe:	55                   	push   %rbp
  409dbf:	48 89 e5             	mov    %rsp,%rbp
  409dc2:	48 83 ec 30          	sub    $0x30,%rsp
  409dc6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  409dca:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  409dd1:	00 
  409dd2:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  409dd9:	00 
  409dda:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  409de1:	00 
  409de2:	48 c7 45 f8 a8 21 41 	movq   $0x4121a8,-0x8(%rbp)
  409de9:	00 
  409dea:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  409dee:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  409df2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  409df6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  409dfa:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  409e00:	e8 38 0b 00 00       	callq  40a93d <_d_assert_msg>
  409e05:	c9                   	leaveq 
  409e06:	c3                   	retq   

0000000000409e07 <_d_delclass>:
  409e07:	55                   	push   %rbp
  409e08:	48 89 e5             	mov    %rsp,%rbp
  409e0b:	48 83 ec 30          	sub    $0x30,%rsp
  409e0f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  409e13:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  409e1a:	00 
  409e1b:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  409e22:	00 
  409e23:	48 c7 45 f0 3c 00 00 	movq   $0x3c,-0x10(%rbp)
  409e2a:	00 
  409e2b:	48 c7 45 f8 e8 21 41 	movq   $0x4121e8,-0x8(%rbp)
  409e32:	00 
  409e33:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  409e37:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  409e3b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  409e3f:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  409e43:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  409e49:	e8 ef 0a 00 00       	callq  40a93d <_d_assert_msg>
  409e4e:	c9                   	leaveq 
  409e4f:	c3                   	retq   

0000000000409e50 <_d_newarrayT>:
  409e50:	55                   	push   %rbp
  409e51:	48 89 e5             	mov    %rsp,%rbp
  409e54:	48 83 ec 30          	sub    $0x30,%rsp
  409e58:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  409e5c:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  409e60:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  409e67:	00 
  409e68:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  409e6f:	00 
  409e70:	48 c7 45 f0 4f 00 00 	movq   $0x4f,-0x10(%rbp)
  409e77:	00 
  409e78:	48 c7 45 f8 28 22 41 	movq   $0x412228,-0x8(%rbp)
  409e7f:	00 
  409e80:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  409e84:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  409e88:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  409e8c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  409e90:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  409e96:	e8 a2 0a 00 00       	callq  40a93d <_d_assert_msg>
  409e9b:	c9                   	leaveq 
  409e9c:	c3                   	retq   

0000000000409e9d <_d_newarrayiT>:
  409e9d:	55                   	push   %rbp
  409e9e:	48 89 e5             	mov    %rsp,%rbp
  409ea1:	48 83 ec 30          	sub    $0x30,%rsp
  409ea5:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  409ea9:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  409ead:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  409eb4:	00 
  409eb5:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  409ebc:	00 
  409ebd:	48 c7 45 f0 50 00 00 	movq   $0x50,-0x10(%rbp)
  409ec4:	00 
  409ec5:	48 c7 45 f8 78 22 41 	movq   $0x412278,-0x8(%rbp)
  409ecc:	00 
  409ecd:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  409ed1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  409ed5:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  409ed9:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  409edd:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  409ee3:	e8 55 0a 00 00       	callq  40a93d <_d_assert_msg>
  409ee8:	c9                   	leaveq 
  409ee9:	c3                   	retq   

0000000000409eea <_d_newarraymTp>:
  409eea:	55                   	push   %rbp
  409eeb:	48 89 e5             	mov    %rsp,%rbp
  409eee:	48 83 ec 40          	sub    $0x40,%rsp
  409ef2:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  409ef6:	89 55 d4             	mov    %edx,-0x2c(%rbp)
  409ef9:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  409efd:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  409f04:	00 
  409f05:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  409f0c:	00 
  409f0d:	48 c7 45 f0 5c 00 00 	movq   $0x5c,-0x10(%rbp)
  409f14:	00 
  409f15:	48 c7 45 f8 d0 22 41 	movq   $0x4122d0,-0x8(%rbp)
  409f1c:	00 
  409f1d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  409f21:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  409f25:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  409f29:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  409f2d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  409f33:	e8 05 0a 00 00       	callq  40a93d <_d_assert_msg>
  409f38:	c9                   	leaveq 
  409f39:	c3                   	retq   

0000000000409f3a <_d_newarraymiTp>:
  409f3a:	55                   	push   %rbp
  409f3b:	48 89 e5             	mov    %rsp,%rbp
  409f3e:	48 83 ec 40          	sub    $0x40,%rsp
  409f42:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  409f46:	89 55 d4             	mov    %edx,-0x2c(%rbp)
  409f49:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  409f4d:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  409f54:	00 
  409f55:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  409f5c:	00 
  409f5d:	48 c7 45 f0 5d 00 00 	movq   $0x5d,-0x10(%rbp)
  409f64:	00 
  409f65:	48 c7 45 f8 30 23 41 	movq   $0x412330,-0x8(%rbp)
  409f6c:	00 
  409f6d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  409f71:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  409f75:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  409f79:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  409f7d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  409f83:	e8 b5 09 00 00       	callq  40a93d <_d_assert_msg>
  409f88:	c9                   	leaveq 
  409f89:	c3                   	retq   

0000000000409f8a <_d_delarray>:
  409f8a:	55                   	push   %rbp
  409f8b:	48 89 e5             	mov    %rsp,%rbp
  409f8e:	48 83 ec 30          	sub    $0x30,%rsp
  409f92:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  409f96:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  409f9d:	00 
  409f9e:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  409fa5:	00 
  409fa6:	48 c7 45 f0 3b 00 00 	movq   $0x3b,-0x10(%rbp)
  409fad:	00 
  409fae:	48 c7 45 f8 90 23 41 	movq   $0x412390,-0x8(%rbp)
  409fb5:	00 
  409fb6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  409fba:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  409fbe:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  409fc2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  409fc6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  409fcc:	e8 6c 09 00 00       	callq  40a93d <_d_assert_msg>
  409fd1:	c9                   	leaveq 
  409fd2:	c3                   	retq   

0000000000409fd3 <_d_delmemory>:
  409fd3:	55                   	push   %rbp
  409fd4:	48 89 e5             	mov    %rsp,%rbp
  409fd7:	48 83 ec 30          	sub    $0x30,%rsp
  409fdb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  409fdf:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  409fe6:	00 
  409fe7:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  409fee:	00 
  409fef:	48 c7 45 f0 3c 00 00 	movq   $0x3c,-0x10(%rbp)
  409ff6:	00 
  409ff7:	48 c7 45 f8 d0 23 41 	movq   $0x4123d0,-0x8(%rbp)
  409ffe:	00 
  409fff:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a003:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a007:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a00b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a00f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a015:	e8 23 09 00 00       	callq  40a93d <_d_assert_msg>
  40a01a:	c9                   	leaveq 
  40a01b:	c3                   	retq   

000000000040a01c <_d_callfinalizer>:
  40a01c:	55                   	push   %rbp
  40a01d:	48 89 e5             	mov    %rsp,%rbp
  40a020:	48 83 ec 30          	sub    $0x30,%rsp
  40a024:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a028:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a02f:	00 
  40a030:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a037:	00 
  40a038:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40a03f:	00 
  40a040:	48 c7 45 f8 10 24 41 	movq   $0x412410,-0x8(%rbp)
  40a047:	00 
  40a048:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a04c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a050:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a054:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a058:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a05e:	e8 da 08 00 00       	callq  40a93d <_d_assert_msg>
  40a063:	c9                   	leaveq 
  40a064:	c3                   	retq   

000000000040a065 <rt_finalize>:
  40a065:	55                   	push   %rbp
  40a066:	48 89 e5             	mov    %rsp,%rbp
  40a069:	48 83 ec 30          	sub    $0x30,%rsp
  40a06d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a071:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  40a075:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a07c:	00 
  40a07d:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a084:	00 
  40a085:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40a08c:	00 
  40a08d:	48 c7 45 f8 50 24 41 	movq   $0x412450,-0x8(%rbp)
  40a094:	00 
  40a095:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a099:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a09d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a0a1:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a0a5:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a0ab:	e8 8d 08 00 00       	callq  40a93d <_d_assert_msg>
  40a0b0:	c9                   	leaveq 
  40a0b1:	c3                   	retq   

000000000040a0b2 <_d_arraysetlengthT>:
  40a0b2:	55                   	push   %rbp
  40a0b3:	48 89 e5             	mov    %rsp,%rbp
  40a0b6:	48 83 ec 40          	sub    $0x40,%rsp
  40a0ba:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a0be:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a0c2:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  40a0c6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a0cd:	00 
  40a0ce:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a0d5:	00 
  40a0d6:	48 c7 45 f0 63 00 00 	movq   $0x63,-0x10(%rbp)
  40a0dd:	00 
  40a0de:	48 c7 45 f8 a0 24 41 	movq   $0x4124a0,-0x8(%rbp)
  40a0e5:	00 
  40a0e6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a0ea:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a0ee:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a0f2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a0f6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a0fc:	e8 3c 08 00 00       	callq  40a93d <_d_assert_msg>
  40a101:	c9                   	leaveq 
  40a102:	c3                   	retq   

000000000040a103 <_d_arraysetlengthiT>:
  40a103:	55                   	push   %rbp
  40a104:	48 89 e5             	mov    %rsp,%rbp
  40a107:	48 83 ec 40          	sub    $0x40,%rsp
  40a10b:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a10f:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a113:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  40a117:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a11e:	00 
  40a11f:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a126:	00 
  40a127:	48 c7 45 f0 64 00 00 	movq   $0x64,-0x10(%rbp)
  40a12e:	00 
  40a12f:	48 c7 45 f8 08 25 41 	movq   $0x412508,-0x8(%rbp)
  40a136:	00 
  40a137:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a13b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a13f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a143:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a147:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a14d:	e8 eb 07 00 00       	callq  40a93d <_d_assert_msg>
  40a152:	c9                   	leaveq 
  40a153:	c3                   	retq   

000000000040a154 <_d_arrayappendT>:
  40a154:	55                   	push   %rbp
  40a155:	48 89 e5             	mov    %rsp,%rbp
  40a158:	48 83 ec 40          	sub    $0x40,%rsp
  40a15c:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a160:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a164:	4c 89 c0             	mov    %r8,%rax
  40a167:	48 89 ca             	mov    %rcx,%rdx
  40a16a:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  40a16e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40a172:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a179:	00 
  40a17a:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a181:	00 
  40a182:	48 c7 45 f0 58 00 00 	movq   $0x58,-0x10(%rbp)
  40a189:	00 
  40a18a:	48 c7 45 f8 70 25 41 	movq   $0x412570,-0x8(%rbp)
  40a191:	00 
  40a192:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a196:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a19a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a19e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a1a2:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a1a8:	e8 90 07 00 00       	callq  40a93d <_d_assert_msg>
  40a1ad:	c9                   	leaveq 
  40a1ae:	c3                   	retq   

000000000040a1af <_d_arrayappendcTp>:
  40a1af:	55                   	push   %rbp
  40a1b0:	48 89 e5             	mov    %rsp,%rbp
  40a1b3:	48 83 ec 40          	sub    $0x40,%rsp
  40a1b7:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a1bb:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a1bf:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  40a1c3:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a1ca:	00 
  40a1cb:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a1d2:	00 
  40a1d3:	48 c7 45 f0 62 00 00 	movq   $0x62,-0x10(%rbp)
  40a1da:	00 
  40a1db:	48 c7 45 f8 d0 25 41 	movq   $0x4125d0,-0x8(%rbp)
  40a1e2:	00 
  40a1e3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a1e7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a1eb:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a1ef:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a1f3:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a1f9:	e8 3f 07 00 00       	callq  40a93d <_d_assert_msg>
  40a1fe:	c9                   	leaveq 
  40a1ff:	c3                   	retq   

000000000040a200 <_d_arraycatT>:
  40a200:	55                   	push   %rbp
  40a201:	48 89 e5             	mov    %rsp,%rbp
  40a204:	48 83 ec 50          	sub    $0x50,%rsp
  40a208:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a20c:	4c 89 c6             	mov    %r8,%rsi
  40a20f:	4c 89 cf             	mov    %r9,%rdi
  40a212:	48 89 d0             	mov    %rdx,%rax
  40a215:	48 89 ca             	mov    %rcx,%rdx
  40a218:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40a21c:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a220:	48 89 f0             	mov    %rsi,%rax
  40a223:	48 89 fa             	mov    %rdi,%rdx
  40a226:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40a22a:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  40a22e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a235:	00 
  40a236:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a23d:	00 
  40a23e:	48 c7 45 f0 55 00 00 	movq   $0x55,-0x10(%rbp)
  40a245:	00 
  40a246:	48 c7 45 f8 38 26 41 	movq   $0x412638,-0x8(%rbp)
  40a24d:	00 
  40a24e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a252:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a256:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a25a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a25e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a264:	e8 d4 06 00 00       	callq  40a93d <_d_assert_msg>
  40a269:	c9                   	leaveq 
  40a26a:	c3                   	retq   

000000000040a26b <_d_arraycatnT>:
  40a26b:	55                   	push   %rbp
  40a26c:	48 89 e5             	mov    %rsp,%rbp
  40a26f:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  40a276:	48 89 b5 28 ff ff ff 	mov    %rsi,-0xd8(%rbp)
  40a27d:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  40a284:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  40a28b:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  40a292:	0f b6 c0             	movzbl %al,%eax
  40a295:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  40a29c:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
  40a2a3:	48 8d 04 8d 00 00 00 	lea    0x0(,%rcx,4),%rax
  40a2aa:	00 
  40a2ab:	48 c7 85 18 ff ff ff 	movq   $0x40a2ea,-0xe8(%rbp)
  40a2b2:	ea a2 40 00 
  40a2b6:	48 29 85 18 ff ff ff 	sub    %rax,-0xe8(%rbp)
  40a2bd:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  40a2c1:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
  40a2c8:	ff e1                	jmpq   *%rcx
  40a2ca:	0f 29 78 f1          	movaps %xmm7,-0xf(%rax)
  40a2ce:	0f 29 70 e1          	movaps %xmm6,-0x1f(%rax)
  40a2d2:	0f 29 68 d1          	movaps %xmm5,-0x2f(%rax)
  40a2d6:	0f 29 60 c1          	movaps %xmm4,-0x3f(%rax)
  40a2da:	0f 29 58 b1          	movaps %xmm3,-0x4f(%rax)
  40a2de:	0f 29 50 a1          	movaps %xmm2,-0x5f(%rax)
  40a2e2:	0f 29 48 91          	movaps %xmm1,-0x6f(%rax)
  40a2e6:	0f 29 40 81          	movaps %xmm0,-0x7f(%rax)
  40a2ea:	89 95 24 ff ff ff    	mov    %edx,-0xdc(%rbp)
  40a2f0:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  40a2f7:	00 00 00 00 
  40a2fb:	48 c7 85 38 ff ff ff 	movq   $0x412082,-0xc8(%rbp)
  40a302:	82 20 41 00 
  40a306:	48 c7 85 40 ff ff ff 	movq   $0x4f,-0xc0(%rbp)
  40a30d:	4f 00 00 00 
  40a311:	48 c7 85 48 ff ff ff 	movq   $0x412690,-0xb8(%rbp)
  40a318:	90 26 41 00 
  40a31c:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  40a323:	48 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%rcx
  40a32a:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
  40a331:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
  40a338:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a33e:	e8 fa 05 00 00       	callq  40a93d <_d_assert_msg>
  40a343:	c9                   	leaveq 
  40a344:	c3                   	retq   

000000000040a345 <_adDupT>:
  40a345:	55                   	push   %rbp
  40a346:	48 89 e5             	mov    %rsp,%rbp
  40a349:	48 83 ec 40          	sub    $0x40,%rsp
  40a34d:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a351:	48 89 d0             	mov    %rdx,%rax
  40a354:	48 89 ca             	mov    %rcx,%rdx
  40a357:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40a35b:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a35f:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a366:	00 
  40a367:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a36e:	00 
  40a36f:	48 c7 45 f0 44 00 00 	movq   $0x44,-0x10(%rbp)
  40a376:	00 
  40a377:	48 c7 45 f8 e0 26 41 	movq   $0x4126e0,-0x8(%rbp)
  40a37e:	00 
  40a37f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a383:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a387:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a38b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a38f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a395:	e8 a3 05 00 00       	callq  40a93d <_d_assert_msg>
  40a39a:	c9                   	leaveq 
  40a39b:	c3                   	retq   

000000000040a39c <gc_init>:
  40a39c:	55                   	push   %rbp
  40a39d:	48 89 e5             	mov    %rsp,%rbp
  40a3a0:	48 83 ec 20          	sub    $0x20,%rsp
  40a3a4:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a3ab:	00 
  40a3ac:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a3b3:	00 
  40a3b4:	48 c7 45 f0 2f 00 00 	movq   $0x2f,-0x10(%rbp)
  40a3bb:	00 
  40a3bc:	48 c7 45 f8 28 27 41 	movq   $0x412728,-0x8(%rbp)
  40a3c3:	00 
  40a3c4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a3c8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a3cc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a3d0:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a3d4:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a3da:	e8 5e 05 00 00       	callq  40a93d <_d_assert_msg>
  40a3df:	c9                   	leaveq 
  40a3e0:	c3                   	retq   

000000000040a3e1 <gc_term>:
  40a3e1:	55                   	push   %rbp
  40a3e2:	48 89 e5             	mov    %rsp,%rbp
  40a3e5:	48 83 ec 20          	sub    $0x20,%rsp
  40a3e9:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a3f0:	00 
  40a3f1:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a3f8:	00 
  40a3f9:	48 c7 45 f0 2f 00 00 	movq   $0x2f,-0x10(%rbp)
  40a400:	00 
  40a401:	48 c7 45 f8 58 27 41 	movq   $0x412758,-0x8(%rbp)
  40a408:	00 
  40a409:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a40d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a411:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a415:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a419:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a41f:	e8 19 05 00 00       	callq  40a93d <_d_assert_msg>
  40a424:	c9                   	leaveq 
  40a425:	c3                   	retq   

000000000040a426 <gc_enable>:
  40a426:	55                   	push   %rbp
  40a427:	48 89 e5             	mov    %rsp,%rbp
  40a42a:	48 83 ec 20          	sub    $0x20,%rsp
  40a42e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a435:	00 
  40a436:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a43d:	00 
  40a43e:	48 c7 45 f0 31 00 00 	movq   $0x31,-0x10(%rbp)
  40a445:	00 
  40a446:	48 c7 45 f8 88 27 41 	movq   $0x412788,-0x8(%rbp)
  40a44d:	00 
  40a44e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a452:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a456:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a45a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a45e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a464:	e8 d4 04 00 00       	callq  40a93d <_d_assert_msg>
  40a469:	c9                   	leaveq 
  40a46a:	c3                   	retq   

000000000040a46b <gc_disable>:
  40a46b:	55                   	push   %rbp
  40a46c:	48 89 e5             	mov    %rsp,%rbp
  40a46f:	48 83 ec 20          	sub    $0x20,%rsp
  40a473:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a47a:	00 
  40a47b:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a482:	00 
  40a483:	48 c7 45 f0 32 00 00 	movq   $0x32,-0x10(%rbp)
  40a48a:	00 
  40a48b:	48 c7 45 f8 c0 27 41 	movq   $0x4127c0,-0x8(%rbp)
  40a492:	00 
  40a493:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a497:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a49b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a49f:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a4a3:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a4a9:	e8 8f 04 00 00       	callq  40a93d <_d_assert_msg>
  40a4ae:	c9                   	leaveq 
  40a4af:	c3                   	retq   

000000000040a4b0 <gc_collect>:
  40a4b0:	55                   	push   %rbp
  40a4b1:	48 89 e5             	mov    %rsp,%rbp
  40a4b4:	48 83 ec 20          	sub    $0x20,%rsp
  40a4b8:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a4bf:	00 
  40a4c0:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a4c7:	00 
  40a4c8:	48 c7 45 f0 32 00 00 	movq   $0x32,-0x10(%rbp)
  40a4cf:	00 
  40a4d0:	48 c7 45 f8 f8 27 41 	movq   $0x4127f8,-0x8(%rbp)
  40a4d7:	00 
  40a4d8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a4dc:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a4e0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a4e4:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a4e8:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a4ee:	e8 4a 04 00 00       	callq  40a93d <_d_assert_msg>
  40a4f3:	c9                   	leaveq 
  40a4f4:	c3                   	retq   

000000000040a4f5 <gc_getAttr>:
  40a4f5:	55                   	push   %rbp
  40a4f6:	48 89 e5             	mov    %rsp,%rbp
  40a4f9:	48 83 ec 30          	sub    $0x30,%rsp
  40a4fd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a501:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a508:	00 
  40a509:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a510:	00 
  40a511:	48 c7 45 f0 3b 00 00 	movq   $0x3b,-0x10(%rbp)
  40a518:	00 
  40a519:	48 c7 45 f8 30 28 41 	movq   $0x412830,-0x8(%rbp)
  40a520:	00 
  40a521:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a525:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a529:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a52d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a531:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a537:	e8 01 04 00 00       	callq  40a93d <_d_assert_msg>
  40a53c:	c9                   	leaveq 
  40a53d:	c3                   	retq   

000000000040a53e <gc_setAttr>:
  40a53e:	55                   	push   %rbp
  40a53f:	48 89 e5             	mov    %rsp,%rbp
  40a542:	48 83 ec 30          	sub    $0x30,%rsp
  40a546:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a54a:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  40a54d:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a554:	00 
  40a555:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a55c:	00 
  40a55d:	48 c7 45 f0 43 00 00 	movq   $0x43,-0x10(%rbp)
  40a564:	00 
  40a565:	48 c7 45 f8 70 28 41 	movq   $0x412870,-0x8(%rbp)
  40a56c:	00 
  40a56d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a571:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a575:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a579:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a57d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a583:	e8 b5 03 00 00       	callq  40a93d <_d_assert_msg>
  40a588:	c9                   	leaveq 
  40a589:	c3                   	retq   

000000000040a58a <gc_clrAttr>:
  40a58a:	55                   	push   %rbp
  40a58b:	48 89 e5             	mov    %rsp,%rbp
  40a58e:	48 83 ec 30          	sub    $0x30,%rsp
  40a592:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a596:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  40a599:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a5a0:	00 
  40a5a1:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a5a8:	00 
  40a5a9:	48 c7 45 f0 43 00 00 	movq   $0x43,-0x10(%rbp)
  40a5b0:	00 
  40a5b1:	48 c7 45 f8 b8 28 41 	movq   $0x4128b8,-0x8(%rbp)
  40a5b8:	00 
  40a5b9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a5bd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a5c1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a5c5:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a5c9:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a5cf:	e8 69 03 00 00       	callq  40a93d <_d_assert_msg>
  40a5d4:	c9                   	leaveq 
  40a5d5:	c3                   	retq   

000000000040a5d6 <gc_malloc>:
  40a5d6:	55                   	push   %rbp
  40a5d7:	48 89 e5             	mov    %rsp,%rbp
  40a5da:	48 83 ec 30          	sub    $0x30,%rsp
  40a5de:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a5e2:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  40a5e5:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a5ec:	00 
  40a5ed:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a5f4:	00 
  40a5f5:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40a5fc:	00 
  40a5fd:	48 c7 45 f8 00 29 41 	movq   $0x412900,-0x8(%rbp)
  40a604:	00 
  40a605:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a609:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a60d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a611:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a615:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a61b:	e8 1d 03 00 00       	callq  40a93d <_d_assert_msg>
  40a620:	c9                   	leaveq 
  40a621:	c3                   	retq   

000000000040a622 <gc_calloc>:
  40a622:	55                   	push   %rbp
  40a623:	48 89 e5             	mov    %rsp,%rbp
  40a626:	48 83 ec 30          	sub    $0x30,%rsp
  40a62a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a62e:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  40a631:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a638:	00 
  40a639:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a640:	00 
  40a641:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40a648:	00 
  40a649:	48 c7 45 f8 50 29 41 	movq   $0x412950,-0x8(%rbp)
  40a650:	00 
  40a651:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a655:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a659:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a65d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a661:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a667:	e8 d1 02 00 00       	callq  40a93d <_d_assert_msg>
  40a66c:	c9                   	leaveq 
  40a66d:	c3                   	retq   

000000000040a66e <gc_realloc>:
  40a66e:	55                   	push   %rbp
  40a66f:	48 89 e5             	mov    %rsp,%rbp
  40a672:	48 83 ec 40          	sub    $0x40,%rsp
  40a676:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a67a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40a67e:	89 55 cc             	mov    %edx,-0x34(%rbp)
  40a681:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a688:	00 
  40a689:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a690:	00 
  40a691:	48 c7 45 f0 54 00 00 	movq   $0x54,-0x10(%rbp)
  40a698:	00 
  40a699:	48 c7 45 f8 a0 29 41 	movq   $0x4129a0,-0x8(%rbp)
  40a6a0:	00 
  40a6a1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a6a5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a6a9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a6ad:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a6b1:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a6b7:	e8 81 02 00 00       	callq  40a93d <_d_assert_msg>
  40a6bc:	c9                   	leaveq 
  40a6bd:	c3                   	retq   

000000000040a6be <gc_extend>:
  40a6be:	55                   	push   %rbp
  40a6bf:	48 89 e5             	mov    %rsp,%rbp
  40a6c2:	48 83 ec 40          	sub    $0x40,%rsp
  40a6c6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a6ca:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40a6ce:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40a6d2:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a6d9:	00 
  40a6da:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a6e1:	00 
  40a6e2:	48 c7 45 f0 52 00 00 	movq   $0x52,-0x10(%rbp)
  40a6e9:	00 
  40a6ea:	48 c7 45 f8 f8 29 41 	movq   $0x4129f8,-0x8(%rbp)
  40a6f1:	00 
  40a6f2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a6f6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a6fa:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a6fe:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a702:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a708:	e8 30 02 00 00       	callq  40a93d <_d_assert_msg>
  40a70d:	c9                   	leaveq 
  40a70e:	c3                   	retq   

000000000040a70f <gc_free>:
  40a70f:	55                   	push   %rbp
  40a710:	48 89 e5             	mov    %rsp,%rbp
  40a713:	48 83 ec 30          	sub    $0x30,%rsp
  40a717:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a71b:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a722:	00 
  40a723:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a72a:	00 
  40a72b:	48 c7 45 f0 38 00 00 	movq   $0x38,-0x10(%rbp)
  40a732:	00 
  40a733:	48 c7 45 f8 50 2a 41 	movq   $0x412a50,-0x8(%rbp)
  40a73a:	00 
  40a73b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a73f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a743:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a747:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a74b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a751:	e8 e7 01 00 00       	callq  40a93d <_d_assert_msg>
  40a756:	c9                   	leaveq 
  40a757:	c3                   	retq   

000000000040a758 <gc_sizeOf>:
  40a758:	55                   	push   %rbp
  40a759:	48 89 e5             	mov    %rsp,%rbp
  40a75c:	48 83 ec 30          	sub    $0x30,%rsp
  40a760:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a764:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a76b:	00 
  40a76c:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a773:	00 
  40a774:	48 c7 45 f0 3c 00 00 	movq   $0x3c,-0x10(%rbp)
  40a77b:	00 
  40a77c:	48 c7 45 f8 90 2a 41 	movq   $0x412a90,-0x8(%rbp)
  40a783:	00 
  40a784:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a788:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a78c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a790:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a794:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a79a:	e8 9e 01 00 00       	callq  40a93d <_d_assert_msg>
  40a79f:	c9                   	leaveq 
  40a7a0:	c3                   	retq   

000000000040a7a1 <gc_addRoot>:
  40a7a1:	55                   	push   %rbp
  40a7a2:	48 89 e5             	mov    %rsp,%rbp
  40a7a5:	48 83 ec 30          	sub    $0x30,%rsp
  40a7a9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a7ad:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a7b4:	00 
  40a7b5:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a7bc:	00 
  40a7bd:	48 c7 45 f0 3b 00 00 	movq   $0x3b,-0x10(%rbp)
  40a7c4:	00 
  40a7c5:	48 c7 45 f8 d0 2a 41 	movq   $0x412ad0,-0x8(%rbp)
  40a7cc:	00 
  40a7cd:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a7d1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a7d5:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a7d9:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a7dd:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a7e3:	e8 55 01 00 00       	callq  40a93d <_d_assert_msg>
  40a7e8:	c9                   	leaveq 
  40a7e9:	c3                   	retq   

000000000040a7ea <gc_addRange>:
  40a7ea:	55                   	push   %rbp
  40a7eb:	48 89 e5             	mov    %rsp,%rbp
  40a7ee:	48 83 ec 30          	sub    $0x30,%rsp
  40a7f2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a7f6:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40a7fa:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a801:	00 
  40a802:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a809:	00 
  40a80a:	48 c7 45 f0 47 00 00 	movq   $0x47,-0x10(%rbp)
  40a811:	00 
  40a812:	48 c7 45 f8 10 2b 41 	movq   $0x412b10,-0x8(%rbp)
  40a819:	00 
  40a81a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a81e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a822:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a826:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a82a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a830:	e8 08 01 00 00       	callq  40a93d <_d_assert_msg>
  40a835:	c9                   	leaveq 
  40a836:	c3                   	retq   

000000000040a837 <gc_removeRoot>:
  40a837:	55                   	push   %rbp
  40a838:	48 89 e5             	mov    %rsp,%rbp
  40a83b:	48 83 ec 30          	sub    $0x30,%rsp
  40a83f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a843:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a84a:	00 
  40a84b:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a852:	00 
  40a853:	48 c7 45 f0 3e 00 00 	movq   $0x3e,-0x10(%rbp)
  40a85a:	00 
  40a85b:	48 c7 45 f8 58 2b 41 	movq   $0x412b58,-0x8(%rbp)
  40a862:	00 
  40a863:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a867:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a86b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a86f:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a873:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a879:	e8 bf 00 00 00       	callq  40a93d <_d_assert_msg>
  40a87e:	c9                   	leaveq 
  40a87f:	c3                   	retq   

000000000040a880 <gc_removeRange>:
  40a880:	55                   	push   %rbp
  40a881:	48 89 e5             	mov    %rsp,%rbp
  40a884:	48 83 ec 30          	sub    $0x30,%rsp
  40a888:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a88c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a893:	00 
  40a894:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a89b:	00 
  40a89c:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40a8a3:	00 
  40a8a4:	48 c7 45 f8 98 2b 41 	movq   $0x412b98,-0x8(%rbp)
  40a8ab:	00 
  40a8ac:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a8b0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a8b4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a8b8:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a8bc:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a8c2:	e8 76 00 00 00       	callq  40a93d <_d_assert_msg>
  40a8c7:	c9                   	leaveq 
  40a8c8:	c3                   	retq   

000000000040a8c9 <onCollectResource>:
  40a8c9:	55                   	push   %rbp
  40a8ca:	48 89 e5             	mov    %rsp,%rbp
  40a8cd:	48 83 ec 30          	sub    $0x30,%rsp
  40a8d1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a8d5:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a8dc:	00 
  40a8dd:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a8e4:	00 
  40a8e5:	48 c7 45 f0 45 00 00 	movq   $0x45,-0x10(%rbp)
  40a8ec:	00 
  40a8ed:	48 c7 45 f8 d8 2b 41 	movq   $0x412bd8,-0x8(%rbp)
  40a8f4:	00 
  40a8f5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a8f9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a8fd:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a901:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a905:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a90b:	e8 2d 00 00 00       	callq  40a93d <_d_assert_msg>
  40a910:	c9                   	leaveq 
  40a911:	c3                   	retq   

000000000040a912 <_d_assert>:

/**************************************************
 Exception stubs
**************************************************/

void _d_assert( char[] file, uint line )
  40a912:	55                   	push   %rbp
  40a913:	48 89 e5             	mov    %rsp,%rbp
  40a916:	48 83 ec 20          	sub    $0x20,%rsp
  40a91a:	89 55 ec             	mov    %edx,-0x14(%rbp)
  40a91d:	48 89 f8             	mov    %rdi,%rax
  40a920:	48 89 f2             	mov    %rsi,%rdx
  40a923:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40a927:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
{
    onAssertError( file, line );
  40a92b:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40a92e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a932:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a936:	e8 a0 00 00 00       	callq  40a9db <onAssertError>
}
  40a93b:	c9                   	leaveq 
  40a93c:	c3                   	retq   

000000000040a93d <_d_assert_msg>:

void _d_assert_msg( char[] msg, char[] file, uint line )
  40a93d:	55                   	push   %rbp
  40a93e:	48 89 e5             	mov    %rsp,%rbp
  40a941:	48 83 ec 30          	sub    $0x30,%rsp
  40a945:	49 89 d1             	mov    %rdx,%r9
  40a948:	44 89 45 dc          	mov    %r8d,-0x24(%rbp)
  40a94c:	48 89 f8             	mov    %rdi,%rax
  40a94f:	48 89 f2             	mov    %rsi,%rdx
  40a952:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40a956:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  40a95a:	4c 89 c8             	mov    %r9,%rax
  40a95d:	48 89 ca             	mov    %rcx,%rdx
  40a960:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40a964:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
{
    onAssertErrorMsg( file, line, msg );
  40a968:	8b 55 dc             	mov    -0x24(%rbp),%edx
  40a96b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40a96f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a973:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40a977:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40a97b:	49 89 c0             	mov    %rax,%r8
  40a97e:	e8 a1 00 00 00       	callq  40aa24 <onAssertErrorMsg>
}
  40a983:	c9                   	leaveq 
  40a984:	c3                   	retq   

000000000040a985 <_d_array_bounds>:

void _d_array_bounds( char[] file, uint line )
  40a985:	55                   	push   %rbp
  40a986:	48 89 e5             	mov    %rsp,%rbp
  40a989:	48 83 ec 20          	sub    $0x20,%rsp
  40a98d:	89 55 ec             	mov    %edx,-0x14(%rbp)
  40a990:	48 89 f8             	mov    %rdi,%rax
  40a993:	48 89 f2             	mov    %rsi,%rdx
  40a996:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40a99a:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
{
    onArrayBoundsError( file, line );
  40a99e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40a9a1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a9a5:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a9a9:	e8 cd 00 00 00       	callq  40aa7b <onArrayBoundsError>
}
  40a9ae:	c9                   	leaveq 
  40a9af:	c3                   	retq   

000000000040a9b0 <_d_switch_error>:

void _d_switch_error( char[] file, uint line )
  40a9b0:	55                   	push   %rbp
  40a9b1:	48 89 e5             	mov    %rsp,%rbp
  40a9b4:	48 83 ec 20          	sub    $0x20,%rsp
  40a9b8:	89 55 ec             	mov    %edx,-0x14(%rbp)
  40a9bb:	48 89 f8             	mov    %rdi,%rax
  40a9be:	48 89 f2             	mov    %rsi,%rdx
  40a9c1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40a9c5:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
{
    onSwitchError( file, line );
  40a9c9:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40a9cc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a9d0:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a9d4:	e8 de 00 00 00       	callq  40aab7 <onSwitchError>
}
  40a9d9:	c9                   	leaveq 
  40a9da:	c3                   	retq   

000000000040a9db <onAssertError>:

private void onAssertError(char[] file, size_t line)
  40a9db:	55                   	push   %rbp
  40a9dc:	48 89 e5             	mov    %rsp,%rbp
  40a9df:	48 83 ec 30          	sub    $0x30,%rsp
  40a9e3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40a9e7:	48 89 f8             	mov    %rdi,%rax
  40a9ea:	48 89 f2             	mov    %rsi,%rdx
  40a9ed:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40a9f1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
{
	error("assert failed:"); error(file);
  40a9f5:	48 c7 45 f0 0e 00 00 	movq   $0xe,-0x10(%rbp)
  40a9fc:	00 
  40a9fd:	48 c7 45 f8 1e 2c 41 	movq   $0x412c1e,-0x8(%rbp)
  40aa04:	00 
  40aa05:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40aa09:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40aa0d:	e8 9e 2c 00 00       	callq  40d6b0 <_D4user7syscall5errorFAaZv>
  40aa12:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40aa16:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40aa1a:	e8 91 2c 00 00       	callq  40d6b0 <_D4user7syscall5errorFAaZv>
	//kprintfln!("Error in {}, line {}: assertion failed.")(file, line);
	asm { l: hlt; jmp l; }
  40aa1f:	f4                   	hlt    
  40aa20:	eb fd                	jmp    40aa1f <onAssertError+0x44>
}
  40aa22:	c9                   	leaveq 
  40aa23:	c3                   	retq   

000000000040aa24 <onAssertErrorMsg>:

private void onAssertErrorMsg(char[] file, size_t line, char[] msg)
  40aa24:	55                   	push   %rbp
  40aa25:	48 89 e5             	mov    %rsp,%rbp
  40aa28:	48 83 ec 40          	sub    $0x40,%rsp
  40aa2c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40aa30:	48 89 f8             	mov    %rdi,%rax
  40aa33:	48 89 f2             	mov    %rsi,%rdx
  40aa36:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40aa3a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40aa3e:	48 89 c8             	mov    %rcx,%rax
  40aa41:	4c 89 c2             	mov    %r8,%rdx
  40aa44:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40aa48:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
{
	//kprintfln!("Error in {}, line {}: assertion failed: \"{}\"")(file, line, msg);

	error("assert failed:"); error(file);
  40aa4c:	48 c7 45 f0 0e 00 00 	movq   $0xe,-0x10(%rbp)
  40aa53:	00 
  40aa54:	48 c7 45 f8 1e 2c 41 	movq   $0x412c1e,-0x8(%rbp)
  40aa5b:	00 
  40aa5c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40aa60:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40aa64:	e8 47 2c 00 00       	callq  40d6b0 <_D4user7syscall5errorFAaZv>
  40aa69:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40aa6d:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40aa71:	e8 3a 2c 00 00       	callq  40d6b0 <_D4user7syscall5errorFAaZv>
	asm { l: hlt; jmp l; }
  40aa76:	f4                   	hlt    
  40aa77:	eb fd                	jmp    40aa76 <onAssertErrorMsg+0x52>
}
  40aa79:	c9                   	leaveq 
  40aa7a:	c3                   	retq   

000000000040aa7b <onArrayBoundsError>:

private void onArrayBoundsError(char[] file, size_t line)
  40aa7b:	55                   	push   %rbp
  40aa7c:	48 89 e5             	mov    %rsp,%rbp
  40aa7f:	48 83 ec 30          	sub    $0x30,%rsp
  40aa83:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40aa87:	48 89 f8             	mov    %rdi,%rax
  40aa8a:	48 89 f2             	mov    %rsi,%rdx
  40aa8d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40aa91:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
{
	//kprintfln!("Error in {}, line {}: array index out of bounds.")(file, line);
	error("array index out of bounds:");
  40aa95:	48 c7 45 f0 1a 00 00 	movq   $0x1a,-0x10(%rbp)
  40aa9c:	00 
  40aa9d:	48 c7 45 f8 2d 2c 41 	movq   $0x412c2d,-0x8(%rbp)
  40aaa4:	00 
  40aaa5:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40aaa9:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40aaad:	e8 fe 2b 00 00       	callq  40d6b0 <_D4user7syscall5errorFAaZv>
	asm { l: hlt; jmp l; }
  40aab2:	f4                   	hlt    
  40aab3:	eb fd                	jmp    40aab2 <onArrayBoundsError+0x37>
}
  40aab5:	c9                   	leaveq 
  40aab6:	c3                   	retq   

000000000040aab7 <onSwitchError>:

private void onSwitchError(char[] file, size_t line)
  40aab7:	55                   	push   %rbp
  40aab8:	48 89 e5             	mov    %rsp,%rbp
  40aabb:	48 83 ec 30          	sub    $0x30,%rsp
  40aabf:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40aac3:	48 89 f8             	mov    %rdi,%rax
  40aac6:	48 89 f2             	mov    %rsi,%rdx
  40aac9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40aacd:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
{
	//kprintfln!("Error in {}, line {}: switch has no case or default to handle the switched-upon value.")(file, line);
	error("switch error:"); error(file);
  40aad1:	48 c7 45 f0 0d 00 00 	movq   $0xd,-0x10(%rbp)
  40aad8:	00 
  40aad9:	48 c7 45 f8 48 2c 41 	movq   $0x412c48,-0x8(%rbp)
  40aae0:	00 
  40aae1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40aae5:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40aae9:	e8 c2 2b 00 00       	callq  40d6b0 <_D4user7syscall5errorFAaZv>
  40aaee:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40aaf2:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40aaf6:	e8 b5 2b 00 00       	callq  40d6b0 <_D4user7syscall5errorFAaZv>
  asm { l: hlt; jmp l; }
  40aafb:	f4                   	hlt    
  40aafc:	eb fd                	jmp    40aafb <onSwitchError+0x44>
}
  40aafe:	c9                   	leaveq 
  40aaff:	c3                   	retq   

000000000040ab00 <onFinalizeError>:
  40ab00:	55                   	push   %rbp
  40ab01:	48 89 e5             	mov    %rsp,%rbp
  40ab04:	48 83 ec 30          	sub    $0x30,%rsp
  40ab08:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40ab0c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)

private void onSwitchError(char[] file, size_t line)
{
	//kprintfln!("Error in {}, line {}: switch has no case or default to handle the switched-upon value.")(file, line);
	error("switch error:"); error(file);
  asm { l: hlt; jmp l; }
  40ab10:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ab17:	00 
  40ab18:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40ab1f:	00 
  40ab20:	48 c7 45 f0 55 00 00 	movq   $0x55,-0x10(%rbp)
  40ab27:	00 
  40ab28:	48 c7 45 f8 58 2c 41 	movq   $0x412c58,-0x8(%rbp)
  40ab2f:	00 
  40ab30:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ab34:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ab38:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ab3c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ab40:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ab46:	e8 f2 fd ff ff       	callq  40a93d <_d_assert_msg>
  40ab4b:	c9                   	leaveq 
  40ab4c:	c3                   	retq   

000000000040ab4d <onOutOfMemoryError>:
  40ab4d:	55                   	push   %rbp
  40ab4e:	48 89 e5             	mov    %rsp,%rbp
  40ab51:	48 83 ec 20          	sub    $0x20,%rsp
  40ab55:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ab5c:	00 
  40ab5d:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40ab64:	00 
  40ab65:	48 c7 45 f0 3a 00 00 	movq   $0x3a,-0x10(%rbp)
  40ab6c:	00 
  40ab6d:	48 c7 45 f8 b0 2c 41 	movq   $0x412cb0,-0x8(%rbp)
  40ab74:	00 
  40ab75:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ab79:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ab7d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ab81:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ab85:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ab8b:	e8 ad fd ff ff       	callq  40a93d <_d_assert_msg>
  40ab90:	c9                   	leaveq 
  40ab91:	c3                   	retq   

000000000040ab92 <onUnicodeError>:
  40ab92:	55                   	push   %rbp
  40ab93:	48 89 e5             	mov    %rsp,%rbp
  40ab96:	48 83 ec 40          	sub    $0x40,%rsp
  40ab9a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40ab9e:	48 89 f8             	mov    %rdi,%rax
  40aba1:	48 89 f2             	mov    %rsi,%rdx
  40aba4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40aba8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40abac:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40abb3:	00 
  40abb4:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40abbb:	00 
  40abbc:	48 c7 45 f0 4e 00 00 	movq   $0x4e,-0x10(%rbp)
  40abc3:	00 
  40abc4:	48 c7 45 f8 f0 2c 41 	movq   $0x412cf0,-0x8(%rbp)
  40abcb:	00 
  40abcc:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40abd0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40abd4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40abd8:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40abdc:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40abe2:	e8 56 fd ff ff       	callq  40a93d <_d_assert_msg>
  40abe7:	c9                   	leaveq 
  40abe8:	c3                   	retq   

000000000040abe9 <_gdc_cleanupException>:
  40abe9:	55                   	push   %rbp
  40abea:	48 89 e5             	mov    %rsp,%rbp
  40abed:	48 83 ec 20          	sub    $0x20,%rsp
  40abf1:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40abf8:	00 
  40abf9:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40ac00:	00 
  40ac01:	48 c7 45 f0 3d 00 00 	movq   $0x3d,-0x10(%rbp)
  40ac08:	00 
  40ac09:	48 c7 45 f8 40 2d 41 	movq   $0x412d40,-0x8(%rbp)
  40ac10:	00 
  40ac11:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ac15:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ac19:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ac1d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ac21:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ac27:	e8 11 fd ff ff       	callq  40a93d <_d_assert_msg>
  40ac2c:	c9                   	leaveq 
  40ac2d:	c3                   	retq   

000000000040ac2e <_d_throw>:
  40ac2e:	55                   	push   %rbp
  40ac2f:	48 89 e5             	mov    %rsp,%rbp
  40ac32:	48 83 ec 30          	sub    $0x30,%rsp
  40ac36:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40ac3a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ac41:	00 
  40ac42:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40ac49:	00 
  40ac4a:	48 c7 45 f0 3a 00 00 	movq   $0x3a,-0x10(%rbp)
  40ac51:	00 
  40ac52:	48 c7 45 f8 80 2d 41 	movq   $0x412d80,-0x8(%rbp)
  40ac59:	00 
  40ac5a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ac5e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ac62:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ac66:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ac6a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ac70:	e8 c8 fc ff ff       	callq  40a93d <_d_assert_msg>
  40ac75:	c9                   	leaveq 
  40ac76:	c3                   	retq   

000000000040ac77 <__gdc_personality_v0>:
  40ac77:	55                   	push   %rbp
  40ac78:	48 89 e5             	mov    %rsp,%rbp
  40ac7b:	48 83 ec 20          	sub    $0x20,%rsp
  40ac7f:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ac86:	00 
  40ac87:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40ac8e:	00 
  40ac8f:	48 c7 45 f0 3b 00 00 	movq   $0x3b,-0x10(%rbp)
  40ac96:	00 
  40ac97:	48 c7 45 f8 c0 2d 41 	movq   $0x412dc0,-0x8(%rbp)
  40ac9e:	00 
  40ac9f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40aca3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40aca7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40acab:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40acaf:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40acb5:	e8 83 fc ff ff       	callq  40a93d <_d_assert_msg>
  40acba:	c9                   	leaveq 
  40acbb:	c3                   	retq   

000000000040acbc <_Unwind_RaiseException>:
  40acbc:	55                   	push   %rbp
  40acbd:	48 89 e5             	mov    %rsp,%rbp
  40acc0:	48 83 ec 20          	sub    $0x20,%rsp
  40acc4:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40accb:	00 
  40accc:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40acd3:	00 
  40acd4:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40acdb:	00 
  40acdc:	48 c7 45 f8 00 2e 41 	movq   $0x412e00,-0x8(%rbp)
  40ace3:	00 
  40ace4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ace8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40acec:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40acf0:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40acf4:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40acfa:	e8 3e fc ff ff       	callq  40a93d <_d_assert_msg>
  40acff:	c9                   	leaveq 
  40ad00:	c3                   	retq   

000000000040ad01 <_Unwind_ForcedUnwind>:
  40ad01:	55                   	push   %rbp
  40ad02:	48 89 e5             	mov    %rsp,%rbp
  40ad05:	48 83 ec 20          	sub    $0x20,%rsp
  40ad09:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ad10:	00 
  40ad11:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40ad18:	00 
  40ad19:	48 c7 45 f0 3d 00 00 	movq   $0x3d,-0x10(%rbp)
  40ad20:	00 
  40ad21:	48 c7 45 f8 40 2e 41 	movq   $0x412e40,-0x8(%rbp)
  40ad28:	00 
  40ad29:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ad2d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ad31:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ad35:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ad39:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ad3f:	e8 f9 fb ff ff       	callq  40a93d <_d_assert_msg>
  40ad44:	c9                   	leaveq 
  40ad45:	c3                   	retq   

000000000040ad46 <_Unwind_DeleteException>:
  40ad46:	55                   	push   %rbp
  40ad47:	48 89 e5             	mov    %rsp,%rbp
  40ad4a:	48 83 ec 20          	sub    $0x20,%rsp
  40ad4e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ad55:	00 
  40ad56:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40ad5d:	00 
  40ad5e:	48 c7 45 f0 40 00 00 	movq   $0x40,-0x10(%rbp)
  40ad65:	00 
  40ad66:	48 c7 45 f8 80 2e 41 	movq   $0x412e80,-0x8(%rbp)
  40ad6d:	00 
  40ad6e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ad72:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ad76:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ad7a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ad7e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ad84:	e8 b4 fb ff ff       	callq  40a93d <_d_assert_msg>
  40ad89:	c9                   	leaveq 
  40ad8a:	c3                   	retq   

000000000040ad8b <_Unwind_Resume>:
  40ad8b:	55                   	push   %rbp
  40ad8c:	48 89 e5             	mov    %rsp,%rbp
  40ad8f:	48 83 ec 20          	sub    $0x20,%rsp
  40ad93:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ad9a:	00 
  40ad9b:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40ada2:	00 
  40ada3:	48 c7 45 f0 36 00 00 	movq   $0x36,-0x10(%rbp)
  40adaa:	00 
  40adab:	48 c7 45 f8 c8 2e 41 	movq   $0x412ec8,-0x8(%rbp)
  40adb2:	00 
  40adb3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40adb7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40adbb:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40adbf:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40adc3:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40adc9:	e8 6f fb ff ff       	callq  40a93d <_d_assert_msg>
  40adce:	c9                   	leaveq 
  40adcf:	c3                   	retq   

000000000040add0 <_Unwind_Resume_or_Rethrow>:
  40add0:	55                   	push   %rbp
  40add1:	48 89 e5             	mov    %rsp,%rbp
  40add4:	48 83 ec 20          	sub    $0x20,%rsp
  40add8:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40addf:	00 
  40ade0:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40ade7:	00 
  40ade8:	48 c7 45 f0 42 00 00 	movq   $0x42,-0x10(%rbp)
  40adef:	00 
  40adf0:	48 c7 45 f8 00 2f 41 	movq   $0x412f00,-0x8(%rbp)
  40adf7:	00 
  40adf8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40adfc:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ae00:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ae04:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ae08:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ae0e:	e8 2a fb ff ff       	callq  40a93d <_d_assert_msg>
  40ae13:	c9                   	leaveq 
  40ae14:	c3                   	retq   

000000000040ae15 <_Unwind_Backtrace>:
  40ae15:	55                   	push   %rbp
  40ae16:	48 89 e5             	mov    %rsp,%rbp
  40ae19:	48 83 ec 20          	sub    $0x20,%rsp
  40ae1d:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ae24:	00 
  40ae25:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40ae2c:	00 
  40ae2d:	48 c7 45 f0 3a 00 00 	movq   $0x3a,-0x10(%rbp)
  40ae34:	00 
  40ae35:	48 c7 45 f8 48 2f 41 	movq   $0x412f48,-0x8(%rbp)
  40ae3c:	00 
  40ae3d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ae41:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ae45:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ae49:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ae4d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ae53:	e8 e5 fa ff ff       	callq  40a93d <_d_assert_msg>
  40ae58:	c9                   	leaveq 
  40ae59:	c3                   	retq   

000000000040ae5a <_Unwind_GetGR>:
  40ae5a:	55                   	push   %rbp
  40ae5b:	48 89 e5             	mov    %rsp,%rbp
  40ae5e:	48 83 ec 20          	sub    $0x20,%rsp
  40ae62:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ae69:	00 
  40ae6a:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40ae71:	00 
  40ae72:	48 c7 45 f0 36 00 00 	movq   $0x36,-0x10(%rbp)
  40ae79:	00 
  40ae7a:	48 c7 45 f8 88 2f 41 	movq   $0x412f88,-0x8(%rbp)
  40ae81:	00 
  40ae82:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ae86:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ae8a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ae8e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ae92:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ae98:	e8 a0 fa ff ff       	callq  40a93d <_d_assert_msg>
  40ae9d:	c9                   	leaveq 
  40ae9e:	c3                   	retq   

000000000040ae9f <_Unwind_SetGR>:
  40ae9f:	55                   	push   %rbp
  40aea0:	48 89 e5             	mov    %rsp,%rbp
  40aea3:	48 83 ec 20          	sub    $0x20,%rsp
  40aea7:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40aeae:	00 
  40aeaf:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40aeb6:	00 
  40aeb7:	48 c7 45 f0 36 00 00 	movq   $0x36,-0x10(%rbp)
  40aebe:	00 
  40aebf:	48 c7 45 f8 c0 2f 41 	movq   $0x412fc0,-0x8(%rbp)
  40aec6:	00 
  40aec7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40aecb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40aecf:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40aed3:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40aed7:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40aedd:	e8 5b fa ff ff       	callq  40a93d <_d_assert_msg>
  40aee2:	c9                   	leaveq 
  40aee3:	c3                   	retq   

000000000040aee4 <_Unwind_GetIP>:
  40aee4:	55                   	push   %rbp
  40aee5:	48 89 e5             	mov    %rsp,%rbp
  40aee8:	48 83 ec 20          	sub    $0x20,%rsp
  40aeec:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40aef3:	00 
  40aef4:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40aefb:	00 
  40aefc:	48 c7 45 f0 36 00 00 	movq   $0x36,-0x10(%rbp)
  40af03:	00 
  40af04:	48 c7 45 f8 f8 2f 41 	movq   $0x412ff8,-0x8(%rbp)
  40af0b:	00 
  40af0c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40af10:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40af14:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40af18:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40af1c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40af22:	e8 16 fa ff ff       	callq  40a93d <_d_assert_msg>
  40af27:	c9                   	leaveq 
  40af28:	c3                   	retq   

000000000040af29 <_Unwind_SetIP>:
  40af29:	55                   	push   %rbp
  40af2a:	48 89 e5             	mov    %rsp,%rbp
  40af2d:	48 83 ec 20          	sub    $0x20,%rsp
  40af31:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40af38:	00 
  40af39:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40af40:	00 
  40af41:	48 c7 45 f0 36 00 00 	movq   $0x36,-0x10(%rbp)
  40af48:	00 
  40af49:	48 c7 45 f8 30 30 41 	movq   $0x413030,-0x8(%rbp)
  40af50:	00 
  40af51:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40af55:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40af59:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40af5d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40af61:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40af67:	e8 d1 f9 ff ff       	callq  40a93d <_d_assert_msg>
  40af6c:	c9                   	leaveq 
  40af6d:	c3                   	retq   

000000000040af6e <_Unwind_GetCFA>:
  40af6e:	55                   	push   %rbp
  40af6f:	48 89 e5             	mov    %rsp,%rbp
  40af72:	48 83 ec 20          	sub    $0x20,%rsp
  40af76:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40af7d:	00 
  40af7e:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40af85:	00 
  40af86:	48 c7 45 f0 37 00 00 	movq   $0x37,-0x10(%rbp)
  40af8d:	00 
  40af8e:	48 c7 45 f8 68 30 41 	movq   $0x413068,-0x8(%rbp)
  40af95:	00 
  40af96:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40af9a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40af9e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40afa2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40afa6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40afac:	e8 8c f9 ff ff       	callq  40a93d <_d_assert_msg>
  40afb1:	c9                   	leaveq 
  40afb2:	c3                   	retq   

000000000040afb3 <_Unwind_GetLanguageSpecificData>:
  40afb3:	55                   	push   %rbp
  40afb4:	48 89 e5             	mov    %rsp,%rbp
  40afb7:	48 83 ec 20          	sub    $0x20,%rsp
  40afbb:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40afc2:	00 
  40afc3:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40afca:	00 
  40afcb:	48 c7 45 f0 49 00 00 	movq   $0x49,-0x10(%rbp)
  40afd2:	00 
  40afd3:	48 c7 45 f8 a0 30 41 	movq   $0x4130a0,-0x8(%rbp)
  40afda:	00 
  40afdb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40afdf:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40afe3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40afe7:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40afeb:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40aff1:	e8 47 f9 ff ff       	callq  40a93d <_d_assert_msg>
  40aff6:	c9                   	leaveq 
  40aff7:	c3                   	retq   

000000000040aff8 <_Unwind_GetRegionStart>:
  40aff8:	55                   	push   %rbp
  40aff9:	48 89 e5             	mov    %rsp,%rbp
  40affc:	48 83 ec 20          	sub    $0x20,%rsp
  40b000:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b007:	00 
  40b008:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b00f:	00 
  40b010:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40b017:	00 
  40b018:	48 c7 45 f8 f0 30 41 	movq   $0x4130f0,-0x8(%rbp)
  40b01f:	00 
  40b020:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b024:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b028:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b02c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b030:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b036:	e8 02 f9 ff ff       	callq  40a93d <_d_assert_msg>
  40b03b:	c9                   	leaveq 
  40b03c:	c3                   	retq   

000000000040b03d <_Unwind_SjLj_RaiseException>:
  40b03d:	55                   	push   %rbp
  40b03e:	48 89 e5             	mov    %rsp,%rbp
  40b041:	48 83 ec 20          	sub    $0x20,%rsp
  40b045:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b04c:	00 
  40b04d:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b054:	00 
  40b055:	48 c7 45 f0 43 00 00 	movq   $0x43,-0x10(%rbp)
  40b05c:	00 
  40b05d:	48 c7 45 f8 30 31 41 	movq   $0x413130,-0x8(%rbp)
  40b064:	00 
  40b065:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b069:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b06d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b071:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b075:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b07b:	e8 bd f8 ff ff       	callq  40a93d <_d_assert_msg>
  40b080:	c9                   	leaveq 
  40b081:	c3                   	retq   

000000000040b082 <_Unwind_SjLj_ForcedUnwind>:
  40b082:	55                   	push   %rbp
  40b083:	48 89 e5             	mov    %rsp,%rbp
  40b086:	48 83 ec 20          	sub    $0x20,%rsp
  40b08a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b091:	00 
  40b092:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b099:	00 
  40b09a:	48 c7 45 f0 41 00 00 	movq   $0x41,-0x10(%rbp)
  40b0a1:	00 
  40b0a2:	48 c7 45 f8 78 31 41 	movq   $0x413178,-0x8(%rbp)
  40b0a9:	00 
  40b0aa:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b0ae:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b0b2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b0b6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b0ba:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b0c0:	e8 78 f8 ff ff       	callq  40a93d <_d_assert_msg>
  40b0c5:	c9                   	leaveq 
  40b0c6:	c3                   	retq   

000000000040b0c7 <_Unwind_SjLj_Resume>:
  40b0c7:	55                   	push   %rbp
  40b0c8:	48 89 e5             	mov    %rsp,%rbp
  40b0cb:	48 83 ec 20          	sub    $0x20,%rsp
  40b0cf:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b0d6:	00 
  40b0d7:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b0de:	00 
  40b0df:	48 c7 45 f0 3c 00 00 	movq   $0x3c,-0x10(%rbp)
  40b0e6:	00 
  40b0e7:	48 c7 45 f8 c0 31 41 	movq   $0x4131c0,-0x8(%rbp)
  40b0ee:	00 
  40b0ef:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b0f3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b0f7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b0fb:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b0ff:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b105:	e8 33 f8 ff ff       	callq  40a93d <_d_assert_msg>
  40b10a:	c9                   	leaveq 
  40b10b:	c3                   	retq   

000000000040b10c <_Unwind_GetDataRelBase>:
  40b10c:	55                   	push   %rbp
  40b10d:	48 89 e5             	mov    %rsp,%rbp
  40b110:	48 83 ec 20          	sub    $0x20,%rsp
  40b114:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b11b:	00 
  40b11c:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b123:	00 
  40b124:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40b12b:	00 
  40b12c:	48 c7 45 f8 00 32 41 	movq   $0x413200,-0x8(%rbp)
  40b133:	00 
  40b134:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b138:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b13c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b140:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b144:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b14a:	e8 ee f7 ff ff       	callq  40a93d <_d_assert_msg>
  40b14f:	c9                   	leaveq 
  40b150:	c3                   	retq   

000000000040b151 <_Unwind_GetTextRelBase>:
  40b151:	55                   	push   %rbp
  40b152:	48 89 e5             	mov    %rsp,%rbp
  40b155:	48 83 ec 20          	sub    $0x20,%rsp
  40b159:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b160:	00 
  40b161:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b168:	00 
  40b169:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40b170:	00 
  40b171:	48 c7 45 f8 40 32 41 	movq   $0x413240,-0x8(%rbp)
  40b178:	00 
  40b179:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b17d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b181:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b185:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b189:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b18f:	e8 a9 f7 ff ff       	callq  40a93d <_d_assert_msg>
  40b194:	c9                   	leaveq 
  40b195:	c3                   	retq   

000000000040b196 <size_of_encoded_value>:
  40b196:	55                   	push   %rbp
  40b197:	48 89 e5             	mov    %rsp,%rbp
  40b19a:	48 83 ec 30          	sub    $0x30,%rsp
  40b19e:	40 88 7d df          	mov    %dil,-0x21(%rbp)
  40b1a2:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b1a9:	00 
  40b1aa:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b1b1:	00 
  40b1b2:	48 c7 45 f0 4c 00 00 	movq   $0x4c,-0x10(%rbp)
  40b1b9:	00 
  40b1ba:	48 c7 45 f8 80 32 41 	movq   $0x413280,-0x8(%rbp)
  40b1c1:	00 
  40b1c2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b1c6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b1ca:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b1ce:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b1d2:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b1d8:	e8 60 f7 ff ff       	callq  40a93d <_d_assert_msg>
  40b1dd:	c9                   	leaveq 
  40b1de:	c3                   	retq   

000000000040b1df <base_of_encoded_value>:
  40b1df:	55                   	push   %rbp
  40b1e0:	48 89 e5             	mov    %rsp,%rbp
  40b1e3:	48 83 ec 20          	sub    $0x20,%rsp
  40b1e7:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b1ee:	00 
  40b1ef:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b1f6:	00 
  40b1f7:	48 c7 45 f0 3e 00 00 	movq   $0x3e,-0x10(%rbp)
  40b1fe:	00 
  40b1ff:	48 c7 45 f8 d0 32 41 	movq   $0x4132d0,-0x8(%rbp)
  40b206:	00 
  40b207:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b20b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b20f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b213:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b217:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b21d:	e8 1b f7 ff ff       	callq  40a93d <_d_assert_msg>
  40b222:	c9                   	leaveq 
  40b223:	c3                   	retq   

000000000040b224 <read_uleb128>:
  40b224:	55                   	push   %rbp
  40b225:	48 89 e5             	mov    %rsp,%rbp
  40b228:	48 83 ec 20          	sub    $0x20,%rsp
  40b22c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b233:	00 
  40b234:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b23b:	00 
  40b23c:	48 c7 45 f0 34 00 00 	movq   $0x34,-0x10(%rbp)
  40b243:	00 
  40b244:	48 c7 45 f8 10 33 41 	movq   $0x413310,-0x8(%rbp)
  40b24b:	00 
  40b24c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b250:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b254:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b258:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b25c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b262:	e8 d6 f6 ff ff       	callq  40a93d <_d_assert_msg>
  40b267:	c9                   	leaveq 
  40b268:	c3                   	retq   

000000000040b269 <read_sleb128>:
  40b269:	55                   	push   %rbp
  40b26a:	48 89 e5             	mov    %rsp,%rbp
  40b26d:	48 83 ec 20          	sub    $0x20,%rsp
  40b271:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b278:	00 
  40b279:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b280:	00 
  40b281:	48 c7 45 f0 34 00 00 	movq   $0x34,-0x10(%rbp)
  40b288:	00 
  40b289:	48 c7 45 f8 48 33 41 	movq   $0x413348,-0x8(%rbp)
  40b290:	00 
  40b291:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b295:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b299:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b29d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b2a1:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b2a7:	e8 91 f6 ff ff       	callq  40a93d <_d_assert_msg>
  40b2ac:	c9                   	leaveq 
  40b2ad:	c3                   	retq   

000000000040b2ae <read_encoded_value_with_base>:
  40b2ae:	55                   	push   %rbp
  40b2af:	48 89 e5             	mov    %rsp,%rbp
  40b2b2:	48 83 ec 20          	sub    $0x20,%rsp
  40b2b6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b2bd:	00 
  40b2be:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b2c5:	00 
  40b2c6:	48 c7 45 f0 44 00 00 	movq   $0x44,-0x10(%rbp)
  40b2cd:	00 
  40b2ce:	48 c7 45 f8 80 33 41 	movq   $0x413380,-0x8(%rbp)
  40b2d5:	00 
  40b2d6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b2da:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b2de:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b2e2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b2e6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b2ec:	e8 4c f6 ff ff       	callq  40a93d <_d_assert_msg>
  40b2f1:	c9                   	leaveq 
  40b2f2:	c3                   	retq   

000000000040b2f3 <read_encoded_value>:
  40b2f3:	55                   	push   %rbp
  40b2f4:	48 89 e5             	mov    %rsp,%rbp
  40b2f7:	48 83 ec 20          	sub    $0x20,%rsp
  40b2fb:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b302:	00 
  40b303:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b30a:	00 
  40b30b:	48 c7 45 f0 3a 00 00 	movq   $0x3a,-0x10(%rbp)
  40b312:	00 
  40b313:	48 c7 45 f8 c8 33 41 	movq   $0x4133c8,-0x8(%rbp)
  40b31a:	00 
  40b31b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b31f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b323:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b327:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b32b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b331:	e8 07 f6 ff ff       	callq  40a93d <_d_assert_msg>
  40b336:	c9                   	leaveq 
  40b337:	c3                   	retq   

000000000040b338 <_aaLen>:
  40b338:	55                   	push   %rbp
  40b339:	48 89 e5             	mov    %rsp,%rbp
  40b33c:	48 83 ec 30          	sub    $0x30,%rsp
  40b340:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b344:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b34b:	00 
  40b34c:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b353:	00 
  40b354:	48 c7 45 f0 35 00 00 	movq   $0x35,-0x10(%rbp)
  40b35b:	00 
  40b35c:	48 c7 45 f8 08 34 41 	movq   $0x413408,-0x8(%rbp)
  40b363:	00 
  40b364:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b368:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b36c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b370:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b374:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b37a:	e8 be f5 ff ff       	callq  40a93d <_d_assert_msg>
  40b37f:	c9                   	leaveq 
  40b380:	c3                   	retq   

000000000040b381 <_aaGetp>:
  40b381:	55                   	push   %rbp
  40b382:	48 89 e5             	mov    %rsp,%rbp
  40b385:	48 83 ec 40          	sub    $0x40,%rsp
  40b389:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b38d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b391:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b395:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  40b399:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b3a0:	00 
  40b3a1:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b3a8:	00 
  40b3a9:	48 c7 45 f0 64 00 00 	movq   $0x64,-0x10(%rbp)
  40b3b0:	00 
  40b3b1:	48 c7 45 f8 40 34 41 	movq   $0x413440,-0x8(%rbp)
  40b3b8:	00 
  40b3b9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b3bd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b3c1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b3c5:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b3c9:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b3cf:	e8 69 f5 ff ff       	callq  40a93d <_d_assert_msg>
  40b3d4:	c9                   	leaveq 
  40b3d5:	c3                   	retq   

000000000040b3d6 <_aaGetRvaluep>:
  40b3d6:	55                   	push   %rbp
  40b3d7:	48 89 e5             	mov    %rsp,%rbp
  40b3da:	48 83 ec 40          	sub    $0x40,%rsp
  40b3de:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b3e2:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b3e6:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b3ea:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  40b3ee:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b3f5:	00 
  40b3f6:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b3fd:	00 
  40b3fe:	48 c7 45 f0 69 00 00 	movq   $0x69,-0x10(%rbp)
  40b405:	00 
  40b406:	48 c7 45 f8 a8 34 41 	movq   $0x4134a8,-0x8(%rbp)
  40b40d:	00 
  40b40e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b412:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b416:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b41a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b41e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b424:	e8 14 f5 ff ff       	callq  40a93d <_d_assert_msg>
  40b429:	c9                   	leaveq 
  40b42a:	c3                   	retq   

000000000040b42b <_aaInp>:
  40b42b:	55                   	push   %rbp
  40b42c:	48 89 e5             	mov    %rsp,%rbp
  40b42f:	48 83 ec 40          	sub    $0x40,%rsp
  40b433:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b437:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b43b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b43f:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b446:	00 
  40b447:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b44e:	00 
  40b44f:	48 c7 45 f0 50 00 00 	movq   $0x50,-0x10(%rbp)
  40b456:	00 
  40b457:	48 c7 45 f8 18 35 41 	movq   $0x413518,-0x8(%rbp)
  40b45e:	00 
  40b45f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b463:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b467:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b46b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b46f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b475:	e8 c3 f4 ff ff       	callq  40a93d <_d_assert_msg>
  40b47a:	c9                   	leaveq 
  40b47b:	c3                   	retq   

000000000040b47c <_aaDelp>:
  40b47c:	55                   	push   %rbp
  40b47d:	48 89 e5             	mov    %rsp,%rbp
  40b480:	48 83 ec 40          	sub    $0x40,%rsp
  40b484:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b488:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b48c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b490:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b497:	00 
  40b498:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b49f:	00 
  40b4a0:	48 c7 45 f0 50 00 00 	movq   $0x50,-0x10(%rbp)
  40b4a7:	00 
  40b4a8:	48 c7 45 f8 70 35 41 	movq   $0x413570,-0x8(%rbp)
  40b4af:	00 
  40b4b0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b4b4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b4b8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b4bc:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b4c0:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b4c6:	e8 72 f4 ff ff       	callq  40a93d <_d_assert_msg>
  40b4cb:	c9                   	leaveq 
  40b4cc:	c3                   	retq   

000000000040b4cd <_aaValues>:
  40b4cd:	55                   	push   %rbp
  40b4ce:	48 89 e5             	mov    %rsp,%rbp
  40b4d1:	48 83 ec 40          	sub    $0x40,%rsp
  40b4d5:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40b4d9:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40b4dd:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  40b4e1:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b4e8:	00 
  40b4e9:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b4f0:	00 
  40b4f1:	48 c7 45 f0 59 00 00 	movq   $0x59,-0x10(%rbp)
  40b4f8:	00 
  40b4f9:	48 c7 45 f8 c8 35 41 	movq   $0x4135c8,-0x8(%rbp)
  40b500:	00 
  40b501:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b505:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b509:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b50d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b511:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b517:	e8 21 f4 ff ff       	callq  40a93d <_d_assert_msg>
  40b51c:	c9                   	leaveq 
  40b51d:	c3                   	retq   

000000000040b51e <_aaRehash>:
  40b51e:	55                   	push   %rbp
  40b51f:	48 89 e5             	mov    %rsp,%rbp
  40b522:	48 83 ec 30          	sub    $0x30,%rsp
  40b526:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b52a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b52e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b535:	00 
  40b536:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b53d:	00 
  40b53e:	48 c7 45 f0 46 00 00 	movq   $0x46,-0x10(%rbp)
  40b545:	00 
  40b546:	48 c7 45 f8 28 36 41 	movq   $0x413628,-0x8(%rbp)
  40b54d:	00 
  40b54e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b552:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b556:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b55a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b55e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b564:	e8 d4 f3 ff ff       	callq  40a93d <_d_assert_msg>
  40b569:	c9                   	leaveq 
  40b56a:	c3                   	retq   

000000000040b56b <_aaKeys>:
  40b56b:	55                   	push   %rbp
  40b56c:	48 89 e5             	mov    %rsp,%rbp
  40b56f:	48 83 ec 30          	sub    $0x30,%rsp
  40b573:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40b577:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40b57b:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b582:	00 
  40b583:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b58a:	00 
  40b58b:	48 c7 45 f0 45 00 00 	movq   $0x45,-0x10(%rbp)
  40b592:	00 
  40b593:	48 c7 45 f8 70 36 41 	movq   $0x413670,-0x8(%rbp)
  40b59a:	00 
  40b59b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b59f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b5a3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b5a7:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b5ab:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b5b1:	e8 87 f3 ff ff       	callq  40a93d <_d_assert_msg>
  40b5b6:	c9                   	leaveq 
  40b5b7:	c3                   	retq   

000000000040b5b8 <_aaApply>:
  40b5b8:	55                   	push   %rbp
  40b5b9:	48 89 e5             	mov    %rsp,%rbp
  40b5bc:	48 83 ec 40          	sub    $0x40,%rsp
  40b5c0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b5c4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b5c8:	48 89 d0             	mov    %rdx,%rax
  40b5cb:	48 89 ca             	mov    %rcx,%rdx
  40b5ce:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b5d2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b5d6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b5dd:	00 
  40b5de:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b5e5:	00 
  40b5e6:	48 c7 45 f0 50 00 00 	movq   $0x50,-0x10(%rbp)
  40b5ed:	00 
  40b5ee:	48 c7 45 f8 b8 36 41 	movq   $0x4136b8,-0x8(%rbp)
  40b5f5:	00 
  40b5f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b5fa:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b5fe:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b602:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b606:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b60c:	e8 2c f3 ff ff       	callq  40a93d <_d_assert_msg>
  40b611:	c9                   	leaveq 
  40b612:	c3                   	retq   

000000000040b613 <_aaApply2>:
  40b613:	55                   	push   %rbp
  40b614:	48 89 e5             	mov    %rsp,%rbp
  40b617:	48 83 ec 40          	sub    $0x40,%rsp
  40b61b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b61f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b623:	48 89 d0             	mov    %rdx,%rax
  40b626:	48 89 ca             	mov    %rcx,%rdx
  40b629:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b62d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b631:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b638:	00 
  40b639:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b640:	00 
  40b641:	48 c7 45 f0 52 00 00 	movq   $0x52,-0x10(%rbp)
  40b648:	00 
  40b649:	48 c7 45 f8 10 37 41 	movq   $0x413710,-0x8(%rbp)
  40b650:	00 
  40b651:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b655:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b659:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b65d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b661:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b667:	e8 d1 f2 ff ff       	callq  40a93d <_d_assert_msg>
  40b66c:	c9                   	leaveq 
  40b66d:	c3                   	retq   

000000000040b66e <_d_assocarrayliteralTp>:
  40b66e:	55                   	push   %rbp
  40b66f:	48 89 e5             	mov    %rsp,%rbp
  40b672:	48 83 ec 40          	sub    $0x40,%rsp
  40b676:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b67a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b67e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b682:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  40b686:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b68d:	00 
  40b68e:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b695:	00 
  40b696:	48 c7 45 f0 82 00 00 	movq   $0x82,-0x10(%rbp)
  40b69d:	00 
  40b69e:	48 c7 45 f8 68 37 41 	movq   $0x413768,-0x8(%rbp)
  40b6a5:	00 
  40b6a6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b6aa:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b6ae:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b6b2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b6b6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b6bc:	e8 7c f2 ff ff       	callq  40a93d <_d_assert_msg>
  40b6c1:	c9                   	leaveq 
  40b6c2:	c3                   	retq   

000000000040b6c3 <_aApplycw1>:
  40b6c3:	55                   	push   %rbp
  40b6c4:	48 89 e5             	mov    %rsp,%rbp
  40b6c7:	48 83 ec 40          	sub    $0x40,%rsp
  40b6cb:	49 89 d0             	mov    %rdx,%r8
  40b6ce:	48 89 f8             	mov    %rdi,%rax
  40b6d1:	48 89 f2             	mov    %rsi,%rdx
  40b6d4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b6d8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40b6dc:	4c 89 c0             	mov    %r8,%rax
  40b6df:	48 89 ca             	mov    %rcx,%rdx
  40b6e2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b6e6:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b6ea:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b6f1:	00 
  40b6f2:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b6f9:	00 
  40b6fa:	48 c7 45 f0 49 00 00 	movq   $0x49,-0x10(%rbp)
  40b701:	00 
  40b702:	48 c7 45 f8 f0 37 41 	movq   $0x4137f0,-0x8(%rbp)
  40b709:	00 
  40b70a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b70e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b712:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b716:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b71a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b720:	e8 18 f2 ff ff       	callq  40a93d <_d_assert_msg>
  40b725:	c9                   	leaveq 
  40b726:	c3                   	retq   

000000000040b727 <_aApplycd1>:
  40b727:	55                   	push   %rbp
  40b728:	48 89 e5             	mov    %rsp,%rbp
  40b72b:	48 83 ec 40          	sub    $0x40,%rsp
  40b72f:	49 89 d0             	mov    %rdx,%r8
  40b732:	48 89 f8             	mov    %rdi,%rax
  40b735:	48 89 f2             	mov    %rsi,%rdx
  40b738:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b73c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40b740:	4c 89 c0             	mov    %r8,%rax
  40b743:	48 89 ca             	mov    %rcx,%rdx
  40b746:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b74a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b74e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b755:	00 
  40b756:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b75d:	00 
  40b75e:	48 c7 45 f0 49 00 00 	movq   $0x49,-0x10(%rbp)
  40b765:	00 
  40b766:	48 c7 45 f8 40 38 41 	movq   $0x413840,-0x8(%rbp)
  40b76d:	00 
  40b76e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b772:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b776:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b77a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b77e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b784:	e8 b4 f1 ff ff       	callq  40a93d <_d_assert_msg>
  40b789:	c9                   	leaveq 
  40b78a:	c3                   	retq   

000000000040b78b <_aApplywc1>:
  40b78b:	55                   	push   %rbp
  40b78c:	48 89 e5             	mov    %rsp,%rbp
  40b78f:	48 83 ec 40          	sub    $0x40,%rsp
  40b793:	49 89 d0             	mov    %rdx,%r8
  40b796:	48 89 f8             	mov    %rdi,%rax
  40b799:	48 89 f2             	mov    %rsi,%rdx
  40b79c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b7a0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40b7a4:	4c 89 c0             	mov    %r8,%rax
  40b7a7:	48 89 ca             	mov    %rcx,%rdx
  40b7aa:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b7ae:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b7b2:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b7b9:	00 
  40b7ba:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b7c1:	00 
  40b7c2:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40b7c9:	00 
  40b7ca:	48 c7 45 f8 90 38 41 	movq   $0x413890,-0x8(%rbp)
  40b7d1:	00 
  40b7d2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b7d6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b7da:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b7de:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b7e2:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b7e8:	e8 50 f1 ff ff       	callq  40a93d <_d_assert_msg>
  40b7ed:	c9                   	leaveq 
  40b7ee:	c3                   	retq   

000000000040b7ef <_aApplywd1>:
  40b7ef:	55                   	push   %rbp
  40b7f0:	48 89 e5             	mov    %rsp,%rbp
  40b7f3:	48 83 ec 40          	sub    $0x40,%rsp
  40b7f7:	49 89 d0             	mov    %rdx,%r8
  40b7fa:	48 89 f8             	mov    %rdi,%rax
  40b7fd:	48 89 f2             	mov    %rsi,%rdx
  40b800:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b804:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40b808:	4c 89 c0             	mov    %r8,%rax
  40b80b:	48 89 ca             	mov    %rcx,%rdx
  40b80e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b812:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b816:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b81d:	00 
  40b81e:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b825:	00 
  40b826:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40b82d:	00 
  40b82e:	48 c7 45 f8 e0 38 41 	movq   $0x4138e0,-0x8(%rbp)
  40b835:	00 
  40b836:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b83a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b83e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b842:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b846:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b84c:	e8 ec f0 ff ff       	callq  40a93d <_d_assert_msg>
  40b851:	c9                   	leaveq 
  40b852:	c3                   	retq   

000000000040b853 <_aApplydc1>:
  40b853:	55                   	push   %rbp
  40b854:	48 89 e5             	mov    %rsp,%rbp
  40b857:	48 83 ec 40          	sub    $0x40,%rsp
  40b85b:	49 89 d0             	mov    %rdx,%r8
  40b85e:	48 89 f8             	mov    %rdi,%rax
  40b861:	48 89 f2             	mov    %rsi,%rdx
  40b864:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b868:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40b86c:	4c 89 c0             	mov    %r8,%rax
  40b86f:	48 89 ca             	mov    %rcx,%rdx
  40b872:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b876:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b87a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b881:	00 
  40b882:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b889:	00 
  40b88a:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40b891:	00 
  40b892:	48 c7 45 f8 30 39 41 	movq   $0x413930,-0x8(%rbp)
  40b899:	00 
  40b89a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b89e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b8a2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b8a6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b8aa:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b8b0:	e8 88 f0 ff ff       	callq  40a93d <_d_assert_msg>
  40b8b5:	c9                   	leaveq 
  40b8b6:	c3                   	retq   

000000000040b8b7 <_aApplydw1>:
  40b8b7:	55                   	push   %rbp
  40b8b8:	48 89 e5             	mov    %rsp,%rbp
  40b8bb:	48 83 ec 40          	sub    $0x40,%rsp
  40b8bf:	49 89 d0             	mov    %rdx,%r8
  40b8c2:	48 89 f8             	mov    %rdi,%rax
  40b8c5:	48 89 f2             	mov    %rsi,%rdx
  40b8c8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b8cc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40b8d0:	4c 89 c0             	mov    %r8,%rax
  40b8d3:	48 89 ca             	mov    %rcx,%rdx
  40b8d6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b8da:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b8de:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b8e5:	00 
  40b8e6:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b8ed:	00 
  40b8ee:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40b8f5:	00 
  40b8f6:	48 c7 45 f8 80 39 41 	movq   $0x413980,-0x8(%rbp)
  40b8fd:	00 
  40b8fe:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b902:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b906:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b90a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b90e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b914:	e8 24 f0 ff ff       	callq  40a93d <_d_assert_msg>
  40b919:	c9                   	leaveq 
  40b91a:	c3                   	retq   

000000000040b91b <_aApplycw2>:
  40b91b:	55                   	push   %rbp
  40b91c:	48 89 e5             	mov    %rsp,%rbp
  40b91f:	48 83 ec 40          	sub    $0x40,%rsp
  40b923:	49 89 d0             	mov    %rdx,%r8
  40b926:	48 89 f8             	mov    %rdi,%rax
  40b929:	48 89 f2             	mov    %rsi,%rdx
  40b92c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b930:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40b934:	4c 89 c0             	mov    %r8,%rax
  40b937:	48 89 ca             	mov    %rcx,%rdx
  40b93a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b93e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b942:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b949:	00 
  40b94a:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b951:	00 
  40b952:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40b959:	00 
  40b95a:	48 c7 45 f8 d0 39 41 	movq   $0x4139d0,-0x8(%rbp)
  40b961:	00 
  40b962:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b966:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b96a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b96e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b972:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b978:	e8 c0 ef ff ff       	callq  40a93d <_d_assert_msg>
  40b97d:	c9                   	leaveq 
  40b97e:	c3                   	retq   

000000000040b97f <_aApplycd2>:
  40b97f:	55                   	push   %rbp
  40b980:	48 89 e5             	mov    %rsp,%rbp
  40b983:	48 83 ec 40          	sub    $0x40,%rsp
  40b987:	49 89 d0             	mov    %rdx,%r8
  40b98a:	48 89 f8             	mov    %rdi,%rax
  40b98d:	48 89 f2             	mov    %rsi,%rdx
  40b990:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b994:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40b998:	4c 89 c0             	mov    %r8,%rax
  40b99b:	48 89 ca             	mov    %rcx,%rdx
  40b99e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b9a2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b9a6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b9ad:	00 
  40b9ae:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b9b5:	00 
  40b9b6:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40b9bd:	00 
  40b9be:	48 c7 45 f8 20 3a 41 	movq   $0x413a20,-0x8(%rbp)
  40b9c5:	00 
  40b9c6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b9ca:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b9ce:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b9d2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b9d6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b9dc:	e8 5c ef ff ff       	callq  40a93d <_d_assert_msg>
  40b9e1:	c9                   	leaveq 
  40b9e2:	c3                   	retq   

000000000040b9e3 <_aApplywc2>:
  40b9e3:	55                   	push   %rbp
  40b9e4:	48 89 e5             	mov    %rsp,%rbp
  40b9e7:	48 83 ec 40          	sub    $0x40,%rsp
  40b9eb:	49 89 d0             	mov    %rdx,%r8
  40b9ee:	48 89 f8             	mov    %rdi,%rax
  40b9f1:	48 89 f2             	mov    %rsi,%rdx
  40b9f4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b9f8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40b9fc:	4c 89 c0             	mov    %r8,%rax
  40b9ff:	48 89 ca             	mov    %rcx,%rdx
  40ba02:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40ba06:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40ba0a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ba11:	00 
  40ba12:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40ba19:	00 
  40ba1a:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40ba21:	00 
  40ba22:	48 c7 45 f8 70 3a 41 	movq   $0x413a70,-0x8(%rbp)
  40ba29:	00 
  40ba2a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ba2e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ba32:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ba36:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ba3a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ba40:	e8 f8 ee ff ff       	callq  40a93d <_d_assert_msg>
  40ba45:	c9                   	leaveq 
  40ba46:	c3                   	retq   

000000000040ba47 <_aApplywd2>:
  40ba47:	55                   	push   %rbp
  40ba48:	48 89 e5             	mov    %rsp,%rbp
  40ba4b:	48 83 ec 40          	sub    $0x40,%rsp
  40ba4f:	49 89 d0             	mov    %rdx,%r8
  40ba52:	48 89 f8             	mov    %rdi,%rax
  40ba55:	48 89 f2             	mov    %rsi,%rdx
  40ba58:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40ba5c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40ba60:	4c 89 c0             	mov    %r8,%rax
  40ba63:	48 89 ca             	mov    %rcx,%rdx
  40ba66:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40ba6a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40ba6e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ba75:	00 
  40ba76:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40ba7d:	00 
  40ba7e:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40ba85:	00 
  40ba86:	48 c7 45 f8 c0 3a 41 	movq   $0x413ac0,-0x8(%rbp)
  40ba8d:	00 
  40ba8e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ba92:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ba96:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ba9a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ba9e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40baa4:	e8 94 ee ff ff       	callq  40a93d <_d_assert_msg>
  40baa9:	c9                   	leaveq 
  40baaa:	c3                   	retq   

000000000040baab <_aApplydc2>:
  40baab:	55                   	push   %rbp
  40baac:	48 89 e5             	mov    %rsp,%rbp
  40baaf:	48 83 ec 40          	sub    $0x40,%rsp
  40bab3:	49 89 d0             	mov    %rdx,%r8
  40bab6:	48 89 f8             	mov    %rdi,%rax
  40bab9:	48 89 f2             	mov    %rsi,%rdx
  40babc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bac0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bac4:	4c 89 c0             	mov    %r8,%rax
  40bac7:	48 89 ca             	mov    %rcx,%rdx
  40baca:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bace:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bad2:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bad9:	00 
  40bada:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40bae1:	00 
  40bae2:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40bae9:	00 
  40baea:	48 c7 45 f8 10 3b 41 	movq   $0x413b10,-0x8(%rbp)
  40baf1:	00 
  40baf2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40baf6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bafa:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bafe:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bb02:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bb08:	e8 30 ee ff ff       	callq  40a93d <_d_assert_msg>
  40bb0d:	c9                   	leaveq 
  40bb0e:	c3                   	retq   

000000000040bb0f <_aApplydw2>:
  40bb0f:	55                   	push   %rbp
  40bb10:	48 89 e5             	mov    %rsp,%rbp
  40bb13:	48 83 ec 40          	sub    $0x40,%rsp
  40bb17:	49 89 d0             	mov    %rdx,%r8
  40bb1a:	48 89 f8             	mov    %rdi,%rax
  40bb1d:	48 89 f2             	mov    %rsi,%rdx
  40bb20:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bb24:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bb28:	4c 89 c0             	mov    %r8,%rax
  40bb2b:	48 89 ca             	mov    %rcx,%rdx
  40bb2e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bb32:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bb36:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bb3d:	00 
  40bb3e:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40bb45:	00 
  40bb46:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40bb4d:	00 
  40bb4e:	48 c7 45 f8 60 3b 41 	movq   $0x413b60,-0x8(%rbp)
  40bb55:	00 
  40bb56:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bb5a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bb5e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bb62:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bb66:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bb6c:	e8 cc ed ff ff       	callq  40a93d <_d_assert_msg>
  40bb71:	c9                   	leaveq 
  40bb72:	c3                   	retq   

000000000040bb73 <_aApplyRcw1>:
  40bb73:	55                   	push   %rbp
  40bb74:	48 89 e5             	mov    %rsp,%rbp
  40bb77:	48 83 ec 40          	sub    $0x40,%rsp
  40bb7b:	49 89 d0             	mov    %rdx,%r8
  40bb7e:	48 89 f8             	mov    %rdi,%rax
  40bb81:	48 89 f2             	mov    %rsi,%rdx
  40bb84:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bb88:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bb8c:	4c 89 c0             	mov    %r8,%rax
  40bb8f:	48 89 ca             	mov    %rcx,%rdx
  40bb92:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bb96:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bb9a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bba1:	00 
  40bba2:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40bba9:	00 
  40bbaa:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40bbb1:	00 
  40bbb2:	48 c7 45 f8 b0 3b 41 	movq   $0x413bb0,-0x8(%rbp)
  40bbb9:	00 
  40bbba:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bbbe:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bbc2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bbc6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bbca:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bbd0:	e8 68 ed ff ff       	callq  40a93d <_d_assert_msg>
  40bbd5:	c9                   	leaveq 
  40bbd6:	c3                   	retq   

000000000040bbd7 <_aApplyRcd1>:
  40bbd7:	55                   	push   %rbp
  40bbd8:	48 89 e5             	mov    %rsp,%rbp
  40bbdb:	48 83 ec 40          	sub    $0x40,%rsp
  40bbdf:	49 89 d0             	mov    %rdx,%r8
  40bbe2:	48 89 f8             	mov    %rdi,%rax
  40bbe5:	48 89 f2             	mov    %rsi,%rdx
  40bbe8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bbec:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bbf0:	4c 89 c0             	mov    %r8,%rax
  40bbf3:	48 89 ca             	mov    %rcx,%rdx
  40bbf6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bbfa:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bbfe:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bc05:	00 
  40bc06:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40bc0d:	00 
  40bc0e:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40bc15:	00 
  40bc16:	48 c7 45 f8 00 3c 41 	movq   $0x413c00,-0x8(%rbp)
  40bc1d:	00 
  40bc1e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bc22:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bc26:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bc2a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bc2e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bc34:	e8 04 ed ff ff       	callq  40a93d <_d_assert_msg>
  40bc39:	c9                   	leaveq 
  40bc3a:	c3                   	retq   

000000000040bc3b <_aApplyRwc1>:
  40bc3b:	55                   	push   %rbp
  40bc3c:	48 89 e5             	mov    %rsp,%rbp
  40bc3f:	48 83 ec 40          	sub    $0x40,%rsp
  40bc43:	49 89 d0             	mov    %rdx,%r8
  40bc46:	48 89 f8             	mov    %rdi,%rax
  40bc49:	48 89 f2             	mov    %rsi,%rdx
  40bc4c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bc50:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bc54:	4c 89 c0             	mov    %r8,%rax
  40bc57:	48 89 ca             	mov    %rcx,%rdx
  40bc5a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bc5e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bc62:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bc69:	00 
  40bc6a:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40bc71:	00 
  40bc72:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40bc79:	00 
  40bc7a:	48 c7 45 f8 50 3c 41 	movq   $0x413c50,-0x8(%rbp)
  40bc81:	00 
  40bc82:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bc86:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bc8a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bc8e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bc92:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bc98:	e8 a0 ec ff ff       	callq  40a93d <_d_assert_msg>
  40bc9d:	c9                   	leaveq 
  40bc9e:	c3                   	retq   

000000000040bc9f <_aApplyRwd1>:
  40bc9f:	55                   	push   %rbp
  40bca0:	48 89 e5             	mov    %rsp,%rbp
  40bca3:	48 83 ec 40          	sub    $0x40,%rsp
  40bca7:	49 89 d0             	mov    %rdx,%r8
  40bcaa:	48 89 f8             	mov    %rdi,%rax
  40bcad:	48 89 f2             	mov    %rsi,%rdx
  40bcb0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bcb4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bcb8:	4c 89 c0             	mov    %r8,%rax
  40bcbb:	48 89 ca             	mov    %rcx,%rdx
  40bcbe:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bcc2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bcc6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bccd:	00 
  40bcce:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40bcd5:	00 
  40bcd6:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40bcdd:	00 
  40bcde:	48 c7 45 f8 a0 3c 41 	movq   $0x413ca0,-0x8(%rbp)
  40bce5:	00 
  40bce6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bcea:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bcee:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bcf2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bcf6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bcfc:	e8 3c ec ff ff       	callq  40a93d <_d_assert_msg>
  40bd01:	c9                   	leaveq 
  40bd02:	c3                   	retq   

000000000040bd03 <_aApplyRdc1>:
  40bd03:	55                   	push   %rbp
  40bd04:	48 89 e5             	mov    %rsp,%rbp
  40bd07:	48 83 ec 40          	sub    $0x40,%rsp
  40bd0b:	49 89 d0             	mov    %rdx,%r8
  40bd0e:	48 89 f8             	mov    %rdi,%rax
  40bd11:	48 89 f2             	mov    %rsi,%rdx
  40bd14:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bd18:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bd1c:	4c 89 c0             	mov    %r8,%rax
  40bd1f:	48 89 ca             	mov    %rcx,%rdx
  40bd22:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bd26:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bd2a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bd31:	00 
  40bd32:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40bd39:	00 
  40bd3a:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40bd41:	00 
  40bd42:	48 c7 45 f8 f0 3c 41 	movq   $0x413cf0,-0x8(%rbp)
  40bd49:	00 
  40bd4a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bd4e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bd52:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bd56:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bd5a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bd60:	e8 d8 eb ff ff       	callq  40a93d <_d_assert_msg>
  40bd65:	c9                   	leaveq 
  40bd66:	c3                   	retq   

000000000040bd67 <_aApplyRdw1>:
  40bd67:	55                   	push   %rbp
  40bd68:	48 89 e5             	mov    %rsp,%rbp
  40bd6b:	48 83 ec 40          	sub    $0x40,%rsp
  40bd6f:	49 89 d0             	mov    %rdx,%r8
  40bd72:	48 89 f8             	mov    %rdi,%rax
  40bd75:	48 89 f2             	mov    %rsi,%rdx
  40bd78:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bd7c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bd80:	4c 89 c0             	mov    %r8,%rax
  40bd83:	48 89 ca             	mov    %rcx,%rdx
  40bd86:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bd8a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bd8e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bd95:	00 
  40bd96:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40bd9d:	00 
  40bd9e:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40bda5:	00 
  40bda6:	48 c7 45 f8 40 3d 41 	movq   $0x413d40,-0x8(%rbp)
  40bdad:	00 
  40bdae:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bdb2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bdb6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bdba:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bdbe:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bdc4:	e8 74 eb ff ff       	callq  40a93d <_d_assert_msg>
  40bdc9:	c9                   	leaveq 
  40bdca:	c3                   	retq   

000000000040bdcb <_aApplyRcw2>:
  40bdcb:	55                   	push   %rbp
  40bdcc:	48 89 e5             	mov    %rsp,%rbp
  40bdcf:	48 83 ec 40          	sub    $0x40,%rsp
  40bdd3:	49 89 d0             	mov    %rdx,%r8
  40bdd6:	48 89 f8             	mov    %rdi,%rax
  40bdd9:	48 89 f2             	mov    %rsi,%rdx
  40bddc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bde0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bde4:	4c 89 c0             	mov    %r8,%rax
  40bde7:	48 89 ca             	mov    %rcx,%rdx
  40bdea:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bdee:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bdf2:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bdf9:	00 
  40bdfa:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40be01:	00 
  40be02:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40be09:	00 
  40be0a:	48 c7 45 f8 90 3d 41 	movq   $0x413d90,-0x8(%rbp)
  40be11:	00 
  40be12:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40be16:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40be1a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40be1e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40be22:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40be28:	e8 10 eb ff ff       	callq  40a93d <_d_assert_msg>
  40be2d:	c9                   	leaveq 
  40be2e:	c3                   	retq   

000000000040be2f <_aApplyRcd2>:
  40be2f:	55                   	push   %rbp
  40be30:	48 89 e5             	mov    %rsp,%rbp
  40be33:	48 83 ec 40          	sub    $0x40,%rsp
  40be37:	49 89 d0             	mov    %rdx,%r8
  40be3a:	48 89 f8             	mov    %rdi,%rax
  40be3d:	48 89 f2             	mov    %rsi,%rdx
  40be40:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40be44:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40be48:	4c 89 c0             	mov    %r8,%rax
  40be4b:	48 89 ca             	mov    %rcx,%rdx
  40be4e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40be52:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40be56:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40be5d:	00 
  40be5e:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40be65:	00 
  40be66:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40be6d:	00 
  40be6e:	48 c7 45 f8 e0 3d 41 	movq   $0x413de0,-0x8(%rbp)
  40be75:	00 
  40be76:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40be7a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40be7e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40be82:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40be86:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40be8c:	e8 ac ea ff ff       	callq  40a93d <_d_assert_msg>
  40be91:	c9                   	leaveq 
  40be92:	c3                   	retq   

000000000040be93 <_aApplyRwc2>:
  40be93:	55                   	push   %rbp
  40be94:	48 89 e5             	mov    %rsp,%rbp
  40be97:	48 83 ec 40          	sub    $0x40,%rsp
  40be9b:	49 89 d0             	mov    %rdx,%r8
  40be9e:	48 89 f8             	mov    %rdi,%rax
  40bea1:	48 89 f2             	mov    %rsi,%rdx
  40bea4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bea8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40beac:	4c 89 c0             	mov    %r8,%rax
  40beaf:	48 89 ca             	mov    %rcx,%rdx
  40beb2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40beb6:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40beba:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bec1:	00 
  40bec2:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40bec9:	00 
  40beca:	48 c7 45 f0 4c 00 00 	movq   $0x4c,-0x10(%rbp)
  40bed1:	00 
  40bed2:	48 c7 45 f8 30 3e 41 	movq   $0x413e30,-0x8(%rbp)
  40bed9:	00 
  40beda:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bede:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bee2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bee6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40beea:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bef0:	e8 48 ea ff ff       	callq  40a93d <_d_assert_msg>
  40bef5:	c9                   	leaveq 
  40bef6:	c3                   	retq   

000000000040bef7 <_aApplyRwd2>:
  40bef7:	55                   	push   %rbp
  40bef8:	48 89 e5             	mov    %rsp,%rbp
  40befb:	48 83 ec 40          	sub    $0x40,%rsp
  40beff:	49 89 d0             	mov    %rdx,%r8
  40bf02:	48 89 f8             	mov    %rdi,%rax
  40bf05:	48 89 f2             	mov    %rsi,%rdx
  40bf08:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bf0c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bf10:	4c 89 c0             	mov    %r8,%rax
  40bf13:	48 89 ca             	mov    %rcx,%rdx
  40bf16:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bf1a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bf1e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bf25:	00 
  40bf26:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40bf2d:	00 
  40bf2e:	48 c7 45 f0 4c 00 00 	movq   $0x4c,-0x10(%rbp)
  40bf35:	00 
  40bf36:	48 c7 45 f8 80 3e 41 	movq   $0x413e80,-0x8(%rbp)
  40bf3d:	00 
  40bf3e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bf42:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bf46:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bf4a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bf4e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bf54:	e8 e4 e9 ff ff       	callq  40a93d <_d_assert_msg>
  40bf59:	c9                   	leaveq 
  40bf5a:	c3                   	retq   

000000000040bf5b <_aApplyRdc2>:
  40bf5b:	55                   	push   %rbp
  40bf5c:	48 89 e5             	mov    %rsp,%rbp
  40bf5f:	48 83 ec 40          	sub    $0x40,%rsp
  40bf63:	49 89 d0             	mov    %rdx,%r8
  40bf66:	48 89 f8             	mov    %rdi,%rax
  40bf69:	48 89 f2             	mov    %rsi,%rdx
  40bf6c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bf70:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bf74:	4c 89 c0             	mov    %r8,%rax
  40bf77:	48 89 ca             	mov    %rcx,%rdx
  40bf7a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bf7e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bf82:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bf89:	00 
  40bf8a:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40bf91:	00 
  40bf92:	48 c7 45 f0 4c 00 00 	movq   $0x4c,-0x10(%rbp)
  40bf99:	00 
  40bf9a:	48 c7 45 f8 d0 3e 41 	movq   $0x413ed0,-0x8(%rbp)
  40bfa1:	00 
  40bfa2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bfa6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bfaa:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bfae:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bfb2:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bfb8:	e8 80 e9 ff ff       	callq  40a93d <_d_assert_msg>
  40bfbd:	c9                   	leaveq 
  40bfbe:	c3                   	retq   

000000000040bfbf <_aApplyRdw2>:
  40bfbf:	55                   	push   %rbp
  40bfc0:	48 89 e5             	mov    %rsp,%rbp
  40bfc3:	48 83 ec 40          	sub    $0x40,%rsp
  40bfc7:	49 89 d0             	mov    %rdx,%r8
  40bfca:	48 89 f8             	mov    %rdi,%rax
  40bfcd:	48 89 f2             	mov    %rsi,%rdx
  40bfd0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bfd4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bfd8:	4c 89 c0             	mov    %r8,%rax
  40bfdb:	48 89 ca             	mov    %rcx,%rdx
  40bfde:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bfe2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bfe6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bfed:	00 
  40bfee:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40bff5:	00 
  40bff6:	48 c7 45 f0 4c 00 00 	movq   $0x4c,-0x10(%rbp)
  40bffd:	00 
  40bffe:	48 c7 45 f8 20 3f 41 	movq   $0x413f20,-0x8(%rbp)
  40c005:	00 
  40c006:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c00a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c00e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c012:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c016:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c01c:	e8 1c e9 ff ff       	callq  40a93d <_d_assert_msg>
  40c021:	c9                   	leaveq 
  40c022:	c3                   	retq   

000000000040c023 <_adSortChar>:
  40c023:	55                   	push   %rbp
  40c024:	48 89 e5             	mov    %rsp,%rbp
  40c027:	48 83 ec 30          	sub    $0x30,%rsp
  40c02b:	48 89 f0             	mov    %rsi,%rax
  40c02e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c032:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c036:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c03d:	00 
  40c03e:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40c045:	00 
  40c046:	48 c7 45 f0 3d 00 00 	movq   $0x3d,-0x10(%rbp)
  40c04d:	00 
  40c04e:	48 c7 45 f8 70 3f 41 	movq   $0x413f70,-0x8(%rbp)
  40c055:	00 
  40c056:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c05a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c05e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c062:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c066:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c06c:	e8 cc e8 ff ff       	callq  40a93d <_d_assert_msg>
  40c071:	c9                   	leaveq 
  40c072:	c3                   	retq   

000000000040c073 <_adSortWchar>:
  40c073:	55                   	push   %rbp
  40c074:	48 89 e5             	mov    %rsp,%rbp
  40c077:	48 83 ec 30          	sub    $0x30,%rsp
  40c07b:	48 89 f0             	mov    %rsi,%rax
  40c07e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c082:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c086:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c08d:	00 
  40c08e:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40c095:	00 
  40c096:	48 c7 45 f0 40 00 00 	movq   $0x40,-0x10(%rbp)
  40c09d:	00 
  40c09e:	48 c7 45 f8 b0 3f 41 	movq   $0x413fb0,-0x8(%rbp)
  40c0a5:	00 
  40c0a6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c0aa:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c0ae:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c0b2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c0b6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c0bc:	e8 7c e8 ff ff       	callq  40a93d <_d_assert_msg>
  40c0c1:	c9                   	leaveq 
  40c0c2:	c3                   	retq   

000000000040c0c3 <_adReverseChar>:
	2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	4,4,4,4,4,4,4,4,5,5,5,5,6,6,0xFF,0xFF,
];

Array _adReverseChar(char[] a)
  40c0c3:	55                   	push   %rbp
  40c0c4:	48 89 e5             	mov    %rsp,%rbp
  40c0c7:	53                   	push   %rbx
  40c0c8:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  40c0cf:	48 89 bd e8 fe ff ff 	mov    %rdi,-0x118(%rbp)
  40c0d6:	48 89 f0             	mov    %rsi,%rax
  40c0d9:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  40c0e0:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
{
	if(a.length > 1)
  40c0e7:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40c0ee:	48 83 f8 01          	cmp    $0x1,%rax
  40c0f2:	0f 86 5a 03 00 00    	jbe    40c452 <_adReverseChar+0x38f>
	{
		char[6] tmp;
  40c0f8:	48 c7 85 50 ff ff ff 	movq   $0x6,-0xb0(%rbp)
  40c0ff:	06 00 00 00 
  40c103:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  40c10a:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  40c111:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  40c118:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c11c:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  40c123:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40c127:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  40c12c:	0f 95 c0             	setne  %al
  40c12f:	83 f0 01             	xor    $0x1,%eax
  40c132:	84 c0                	test   %al,%al
  40c134:	75 11                	jne    40c147 <_adReverseChar+0x84>
  40c136:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c13a:	c6 00 ff             	movb   $0xff,(%rax)
  40c13d:	48 ff 45 b8          	incq   -0x48(%rbp)
  40c141:	48 ff 4d c0          	decq   -0x40(%rbp)
  40c145:	eb e0                	jmp    40c127 <_adReverseChar+0x64>
		char[6] tmplo;
  40c147:	48 c7 85 60 ff ff ff 	movq   $0x6,-0xa0(%rbp)
  40c14e:	06 00 00 00 
  40c152:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40c159:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  40c160:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40c167:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c16b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  40c172:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40c176:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  40c17b:	0f 95 c0             	setne  %al
  40c17e:	83 f0 01             	xor    $0x1,%eax
  40c181:	84 c0                	test   %al,%al
  40c183:	75 11                	jne    40c196 <_adReverseChar+0xd3>
  40c185:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c189:	c6 00 ff             	movb   $0xff,(%rax)
  40c18c:	48 ff 45 c8          	incq   -0x38(%rbp)
  40c190:	48 ff 4d d0          	decq   -0x30(%rbp)
  40c194:	eb e0                	jmp    40c176 <_adReverseChar+0xb3>
		char* lo = a.ptr;
  40c196:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40c19d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		char* hi = &a[length - 1];
  40c1a1:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40c1a8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40c1ac:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40c1b3:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  40c1ba:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40c1be:	48 ff ca             	dec    %rdx
  40c1c1:	48 89 95 00 ff ff ff 	mov    %rdx,-0x100(%rbp)
  40c1c8:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40c1cf:	48 39 85 00 ff ff ff 	cmp    %rax,-0x100(%rbp)
  40c1d6:	73 10                	jae    40c1e8 <_adReverseChar+0x125>
  40c1d8:	48 8b 8d 00 ff ff ff 	mov    -0x100(%rbp),%rcx
  40c1df:	48 89 8d f8 fe ff ff 	mov    %rcx,-0x108(%rbp)
  40c1e6:	eb 2e                	jmp    40c216 <_adReverseChar+0x153>
  40c1e8:	48 c7 85 70 ff ff ff 	movq   $0xb,-0x90(%rbp)
  40c1ef:	0b 00 00 00 
  40c1f3:	48 c7 85 78 ff ff ff 	movq   $0x412152,-0x88(%rbp)
  40c1fa:	52 21 41 00 
  40c1fe:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
  40c205:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
  40c20c:	ba 41 02 00 00       	mov    $0x241,%edx
  40c211:	e8 6f e7 ff ff       	callq  40a985 <_d_array_bounds>
  40c216:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  40c21d:	48 03 85 f0 fe ff ff 	add    -0x110(%rbp),%rax
  40c224:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  40c228:	eb 00                	jmp    40c22a <_adReverseChar+0x167>

		while (lo < hi)
  40c22a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40c22e:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  40c232:	0f 92 c0             	setb   %al
  40c235:	83 f0 01             	xor    $0x1,%eax
  40c238:	84 c0                	test   %al,%al
  40c23a:	0f 85 12 02 00 00    	jne    40c452 <_adReverseChar+0x38f>
		{	auto clo = *lo;
  40c240:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40c244:	0f b6 00             	movzbl (%rax),%eax
  40c247:	88 45 ef             	mov    %al,-0x11(%rbp)
			auto chi = *hi;
  40c24a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40c24e:	0f b6 00             	movzbl (%rax),%eax
  40c251:	88 45 ee             	mov    %al,-0x12(%rbp)

			if (clo <= 0x7F && chi <= 0x7F)
  40c254:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  40c258:	83 f8 7f             	cmp    $0x7f,%eax
  40c25b:	7f 27                	jg     40c284 <_adReverseChar+0x1c1>
  40c25d:	0f b6 45 ee          	movzbl -0x12(%rbp),%eax
  40c261:	83 f8 7f             	cmp    $0x7f,%eax
  40c264:	7f 1e                	jg     40c284 <_adReverseChar+0x1c1>
			{
				*lo = chi;
  40c266:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40c26a:	0f b6 45 ee          	movzbl -0x12(%rbp),%eax
  40c26e:	88 02                	mov    %al,(%rdx)
				*hi = clo;
  40c270:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40c274:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  40c278:	88 02                	mov    %al,(%rdx)
				lo++;
  40c27a:	48 ff 45 b0          	incq   -0x50(%rbp)
				hi--;
  40c27e:	48 ff 4d a8          	decq   -0x58(%rbp)
				continue;
  40c282:	eb a6                	jmp    40c22a <_adReverseChar+0x167>
			}

			uint stridelo = UTF8stride[clo];
  40c284:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  40c288:	48 3d 00 01 00 00    	cmp    $0x100,%rax
  40c28e:	73 0d                	jae    40c29d <_adReverseChar+0x1da>
  40c290:	0f b6 5d ef          	movzbl -0x11(%rbp),%ebx
  40c294:	48 89 9d 08 ff ff ff 	mov    %rbx,-0xf8(%rbp)
  40c29b:	eb 22                	jmp    40c2bf <_adReverseChar+0x1fc>
  40c29d:	48 c7 45 80 0b 00 00 	movq   $0xb,-0x80(%rbp)
  40c2a4:	00 
  40c2a5:	48 c7 45 88 52 21 41 	movq   $0x412152,-0x78(%rbp)
  40c2ac:	00 
  40c2ad:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  40c2b1:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  40c2b5:	ba 50 02 00 00       	mov    $0x250,%edx
  40c2ba:	e8 c6 e6 ff ff       	callq  40a985 <_d_array_bounds>
  40c2bf:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40c2c6:	48 05 a0 c2 41 00    	add    $0x41c2a0,%rax
  40c2cc:	0f b6 00             	movzbl (%rax),%eax
  40c2cf:	0f b6 c0             	movzbl %al,%eax
  40c2d2:	89 45 e8             	mov    %eax,-0x18(%rbp)

			uint stridehi = 1;
  40c2d5:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  40c2dc:	eb 00                	jmp    40c2de <_adReverseChar+0x21b>
			while ((chi & 0xC0) == 0x80)
  40c2de:	0f b6 45 ee          	movzbl -0x12(%rbp),%eax
  40c2e2:	25 c0 00 00 00       	and    $0xc0,%eax
  40c2e7:	3d 80 00 00 00       	cmp    $0x80,%eax
  40c2ec:	0f 94 c0             	sete   %al
  40c2ef:	83 f0 01             	xor    $0x1,%eax
  40c2f2:	84 c0                	test   %al,%al
  40c2f4:	75 3f                	jne    40c335 <_adReverseChar+0x272>
			{
				chi = *--hi;
  40c2f6:	48 ff 4d a8          	decq   -0x58(%rbp)
  40c2fa:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40c2fe:	0f b6 00             	movzbl (%rax),%eax
  40c301:	88 45 ee             	mov    %al,-0x12(%rbp)
				stridehi++;
  40c304:	ff 45 e4             	incl   -0x1c(%rbp)
				assert(hi >= lo);
  40c307:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40c30b:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  40c30f:	73 cd                	jae    40c2de <_adReverseChar+0x21b>
  40c311:	48 c7 45 90 0b 00 00 	movq   $0xb,-0x70(%rbp)
  40c318:	00 
  40c319:	48 c7 45 98 52 21 41 	movq   $0x412152,-0x68(%rbp)
  40c320:	00 
  40c321:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  40c325:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  40c329:	ba 57 02 00 00       	mov    $0x257,%edx
  40c32e:	e8 df e5 ff ff       	callq  40a912 <_d_assert>
  40c333:	eb a9                	jmp    40c2de <_adReverseChar+0x21b>
			}
			if (lo == hi)
  40c335:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40c339:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  40c33d:	0f 84 0f 01 00 00    	je     40c452 <_adReverseChar+0x38f>
				break;

			if (stridelo == stridehi)
  40c343:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40c346:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  40c349:	75 46                	jne    40c391 <_adReverseChar+0x2ce>
			{

				memcpy(tmp.ptr, lo, stridelo);
  40c34b:	8b 55 e8             	mov    -0x18(%rbp),%edx
  40c34e:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40c352:	48 8d bd 20 ff ff ff 	lea    -0xe0(%rbp),%rdi
  40c359:	e8 d2 0f 00 00       	callq  40d330 <memcpy>
				memcpy(lo, hi, stridelo);
  40c35e:	8b 55 e8             	mov    -0x18(%rbp),%edx
  40c361:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40c365:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  40c369:	e8 c2 0f 00 00       	callq  40d330 <memcpy>
				memcpy(hi, tmp.ptr, stridelo);
  40c36e:	8b 55 e8             	mov    -0x18(%rbp),%edx
  40c371:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
  40c378:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  40c37c:	e8 af 0f 00 00       	callq  40d330 <memcpy>
				lo += stridelo;
  40c381:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40c384:	48 01 45 b0          	add    %rax,-0x50(%rbp)
				hi--;
  40c388:	48 ff 4d a8          	decq   -0x58(%rbp)
				continue;
  40c38c:	e9 99 fe ff ff       	jmpq   40c22a <_adReverseChar+0x167>
			}

			/* Shift the whole array. This is woefully inefficient
			 */
			memcpy(tmp.ptr, hi, stridehi);
  40c391:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  40c394:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40c398:	48 8d bd 20 ff ff ff 	lea    -0xe0(%rbp),%rdi
  40c39f:	e8 8c 0f 00 00       	callq  40d330 <memcpy>
			memcpy(tmplo.ptr, lo, stridelo);
  40c3a4:	8b 55 e8             	mov    -0x18(%rbp),%edx
  40c3a7:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40c3ab:	48 8d bd 30 ff ff ff 	lea    -0xd0(%rbp),%rdi
  40c3b2:	e8 79 0f 00 00       	callq  40d330 <memcpy>
			memmove(lo + stridehi, lo + stridelo , (hi - lo) - stridelo);
  40c3b7:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40c3bb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40c3bf:	48 29 d0             	sub    %rdx,%rax
  40c3c2:	48 89 c2             	mov    %rax,%rdx
  40c3c5:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40c3c8:	48 89 d1             	mov    %rdx,%rcx
  40c3cb:	48 29 c1             	sub    %rax,%rcx
  40c3ce:	48 89 c8             	mov    %rcx,%rax
  40c3d1:	48 89 c2             	mov    %rax,%rdx
  40c3d4:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40c3d7:	48 89 c6             	mov    %rax,%rsi
  40c3da:	48 03 75 b0          	add    -0x50(%rbp),%rsi
  40c3de:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  40c3e1:	48 89 c7             	mov    %rax,%rdi
  40c3e4:	48 03 7d b0          	add    -0x50(%rbp),%rdi
  40c3e8:	e8 a5 0f 00 00       	callq  40d392 <memmove>
			memcpy(lo, tmp.ptr, stridehi);
  40c3ed:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  40c3f0:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
  40c3f7:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  40c3fb:	e8 30 0f 00 00       	callq  40d330 <memcpy>
			memcpy(hi + cast(int) stridehi - cast(int) stridelo, tmplo.ptr, stridelo);
  40c400:	8b 4d e8             	mov    -0x18(%rbp),%ecx
  40c403:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  40c406:	48 98                	cltq   
  40c408:	48 89 c2             	mov    %rax,%rdx
  40c40b:	48 03 55 a8          	add    -0x58(%rbp),%rdx
  40c40f:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40c412:	48 98                	cltq   
  40c414:	48 89 d7             	mov    %rdx,%rdi
  40c417:	48 29 c7             	sub    %rax,%rdi
  40c41a:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
  40c421:	48 89 ca             	mov    %rcx,%rdx
  40c424:	e8 07 0f 00 00       	callq  40d330 <memcpy>

			lo += stridehi;
  40c429:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  40c42c:	48 01 45 b0          	add    %rax,-0x50(%rbp)
			hi = hi - 1 + (cast(int) stridehi - cast(int) stridelo);
  40c430:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  40c434:	48 ff c9             	dec    %rcx
  40c437:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  40c43a:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40c43d:	89 d3                	mov    %edx,%ebx
  40c43f:	29 c3                	sub    %eax,%ebx
  40c441:	89 d8                	mov    %ebx,%eax
  40c443:	48 98                	cltq   
  40c445:	48 8d 04 01          	lea    (%rcx,%rax,1),%rax
  40c449:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  40c44d:	e9 d8 fd ff ff       	jmpq   40c22a <_adReverseChar+0x167>
		}
	}

	Array aaa = *cast(Array*)(&a);
  40c452:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  40c459:	48 8b 02             	mov    (%rdx),%rax
  40c45c:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40c463:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40c467:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
	return aaa;
  40c46e:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40c475:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  40c47c:	48 89 02             	mov    %rax,(%rdx)
  40c47f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40c486:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
  40c48d:	48 89 41 08          	mov    %rax,0x8(%rcx)
}
  40c491:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  40c498:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  40c49f:	5b                   	pop    %rbx
  40c4a0:	c9                   	leaveq 
  40c4a1:	c3                   	retq   

000000000040c4a2 <_adReverseWchar>:

Array _adReverseWchar(wchar[] a)
  40c4a2:	55                   	push   %rbp
  40c4a3:	48 89 e5             	mov    %rsp,%rbp
  40c4a6:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  40c4ad:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  40c4b4:	48 89 f0             	mov    %rsi,%rax
  40c4b7:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40c4be:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
{
	if (a.length > 1)
  40c4c5:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40c4cc:	48 83 f8 01          	cmp    $0x1,%rax
  40c4d0:	0f 86 3f 03 00 00    	jbe    40c815 <_adReverseWchar+0x373>
	{
		wchar[2] tmp;
  40c4d6:	48 c7 85 70 ff ff ff 	movq   $0x2,-0x90(%rbp)
  40c4dd:	02 00 00 00 
  40c4e1:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40c4e8:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  40c4ef:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40c4f6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40c4fa:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40c501:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40c505:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  40c50a:	0f 95 c0             	setne  %al
  40c50d:	83 f0 01             	xor    $0x1,%eax
  40c510:	84 c0                	test   %al,%al
  40c512:	75 14                	jne    40c528 <_adReverseWchar+0x86>
  40c514:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c518:	66 c7 00 ff ff       	movw   $0xffff,(%rax)
  40c51d:	48 83 45 d8 02       	addq   $0x2,-0x28(%rbp)
  40c522:	48 ff 4d e0          	decq   -0x20(%rbp)
  40c526:	eb dd                	jmp    40c505 <_adReverseWchar+0x63>
		wchar* lo = a.ptr;
  40c528:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40c52f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		wchar* hi = &a[length - 1];
  40c533:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40c53a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40c53e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40c545:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  40c54c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40c550:	48 ff ca             	dec    %rdx
  40c553:	48 89 95 30 ff ff ff 	mov    %rdx,-0xd0(%rbp)
  40c55a:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40c561:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
  40c568:	73 10                	jae    40c57a <_adReverseWchar+0xd8>
  40c56a:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
  40c571:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
  40c578:	eb 22                	jmp    40c59c <_adReverseWchar+0xfa>
  40c57a:	48 c7 45 80 0b 00 00 	movq   $0xb,-0x80(%rbp)
  40c581:	00 
  40c582:	48 c7 45 88 52 21 41 	movq   $0x412152,-0x78(%rbp)
  40c589:	00 
  40c58a:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  40c58e:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  40c592:	ba 7e 02 00 00       	mov    $0x27e,%edx
  40c597:	e8 e9 e3 ff ff       	callq  40a985 <_d_array_bounds>
  40c59c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40c5a3:	48 01 c0             	add    %rax,%rax
  40c5a6:	48 03 85 20 ff ff ff 	add    -0xe0(%rbp),%rax
  40c5ad:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40c5b1:	eb 00                	jmp    40c5b3 <_adReverseWchar+0x111>

		while (lo < hi)
  40c5b3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40c5b7:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  40c5bb:	0f 92 c0             	setb   %al
  40c5be:	83 f0 01             	xor    $0x1,%eax
  40c5c1:	84 c0                	test   %al,%al
  40c5c3:	0f 85 4c 02 00 00    	jne    40c815 <_adReverseWchar+0x373>
		{	auto clo = *lo;
  40c5c9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40c5cd:	0f b7 00             	movzwl (%rax),%eax
  40c5d0:	66 89 45 fa          	mov    %ax,-0x6(%rbp)
			auto chi = *hi;
  40c5d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c5d8:	0f b7 00             	movzwl (%rax),%eax
  40c5db:	66 89 45 f8          	mov    %ax,-0x8(%rbp)

			if ((clo < 0xD800 || clo > 0xDFFF) &&
  40c5df:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  40c5e3:	3d 00 d8 00 00       	cmp    $0xd800,%eax
  40c5e8:	7c 0b                	jl     40c5f5 <_adReverseWchar+0x153>
  40c5ea:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  40c5ee:	3d ff df 00 00       	cmp    $0xdfff,%eax
  40c5f3:	7e 37                	jle    40c62c <_adReverseWchar+0x18a>
  40c5f5:	0f b7 45 f8          	movzwl -0x8(%rbp),%eax
  40c5f9:	3d 00 d8 00 00       	cmp    $0xd800,%eax
  40c5fe:	7c 0b                	jl     40c60b <_adReverseWchar+0x169>
  40c600:	0f b7 45 f8          	movzwl -0x8(%rbp),%eax
  40c604:	3d ff df 00 00       	cmp    $0xdfff,%eax
  40c609:	7e 21                	jle    40c62c <_adReverseWchar+0x18a>
				(chi < 0xD800 || chi > 0xDFFF))
			{
				*lo = chi;
  40c60b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40c60f:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40c612:	66 89 02             	mov    %ax,(%rdx)
				*hi = clo;
  40c615:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40c619:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  40c61d:	66 89 02             	mov    %ax,(%rdx)
				lo++;
  40c620:	48 83 45 d0 02       	addq   $0x2,-0x30(%rbp)
				hi--;
  40c625:	48 83 6d c8 02       	subq   $0x2,-0x38(%rbp)
				continue;
  40c62a:	eb 87                	jmp    40c5b3 <_adReverseWchar+0x111>
			}

			int stridelo = 1 + (clo >= 0xD800 && clo <= 0xDBFF);
  40c62c:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  40c630:	3d 00 d8 00 00       	cmp    $0xd800,%eax
  40c635:	7c 14                	jl     40c64b <_adReverseWchar+0x1a9>
  40c637:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  40c63b:	3d ff db 00 00       	cmp    $0xdbff,%eax
  40c640:	7f 09                	jg     40c64b <_adReverseWchar+0x1a9>
  40c642:	c6 85 3f ff ff ff 01 	movb   $0x1,-0xc1(%rbp)
  40c649:	eb 07                	jmp    40c652 <_adReverseWchar+0x1b0>
  40c64b:	c6 85 3f ff ff ff 00 	movb   $0x0,-0xc1(%rbp)
  40c652:	0f b6 85 3f ff ff ff 	movzbl -0xc1(%rbp),%eax
  40c659:	ff c0                	inc    %eax
  40c65b:	89 45 f4             	mov    %eax,-0xc(%rbp)

			int stridehi = 1;
  40c65e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%rbp)
			if (chi >= 0xDC00 && chi <= 0xDFFF)
  40c665:	0f b7 45 f8          	movzwl -0x8(%rbp),%eax
  40c669:	3d 00 dc 00 00       	cmp    $0xdc00,%eax
  40c66e:	7c 4a                	jl     40c6ba <_adReverseWchar+0x218>
  40c670:	0f b7 45 f8          	movzwl -0x8(%rbp),%eax
  40c674:	3d ff df 00 00       	cmp    $0xdfff,%eax
  40c679:	7f 3f                	jg     40c6ba <_adReverseWchar+0x218>
			{
				chi = *--hi;
  40c67b:	48 83 6d c8 02       	subq   $0x2,-0x38(%rbp)
  40c680:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c684:	0f b7 00             	movzwl (%rax),%eax
  40c687:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
				stridehi++;
  40c68b:	ff 45 f0             	incl   -0x10(%rbp)
				assert(hi >= lo);
  40c68e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c692:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  40c696:	73 22                	jae    40c6ba <_adReverseWchar+0x218>
  40c698:	48 c7 45 90 0b 00 00 	movq   $0xb,-0x70(%rbp)
  40c69f:	00 
  40c6a0:	48 c7 45 98 52 21 41 	movq   $0x412152,-0x68(%rbp)
  40c6a7:	00 
  40c6a8:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  40c6ac:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  40c6b0:	ba 95 02 00 00       	mov    $0x295,%edx
  40c6b5:	e8 58 e2 ff ff       	callq  40a912 <_d_assert>
			}
			if (lo == hi)
  40c6ba:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40c6be:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  40c6c2:	0f 84 4d 01 00 00    	je     40c815 <_adReverseWchar+0x373>
				break;

			if (stridelo == stridehi)
  40c6c8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40c6cb:	3b 45 f0             	cmp    -0x10(%rbp),%eax
  40c6ce:	75 63                	jne    40c733 <_adReverseWchar+0x291>
			{	int stmp;
  40c6d0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

				assert(stridelo == 2);
  40c6d7:	83 7d f4 02          	cmpl   $0x2,-0xc(%rbp)
  40c6db:	74 22                	je     40c6ff <_adReverseWchar+0x25d>
  40c6dd:	48 c7 45 a0 0b 00 00 	movq   $0xb,-0x60(%rbp)
  40c6e4:	00 
  40c6e5:	48 c7 45 a8 52 21 41 	movq   $0x412152,-0x58(%rbp)
  40c6ec:	00 
  40c6ed:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  40c6f1:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40c6f5:	ba 9d 02 00 00       	mov    $0x29d,%edx
  40c6fa:	e8 13 e2 ff ff       	callq  40a912 <_d_assert>
				assert(stmp.sizeof == 2 * (*lo).sizeof);
				stmp = *cast(int*)lo;
  40c6ff:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40c703:	8b 00                	mov    (%rax),%eax
  40c705:	89 45 fc             	mov    %eax,-0x4(%rbp)
				*cast(int*)lo = *cast(int*)hi;
  40c708:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40c70c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c710:	8b 00                	mov    (%rax),%eax
  40c712:	89 02                	mov    %eax,(%rdx)
				*cast(int*)hi = stmp;
  40c714:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40c718:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40c71b:	89 02                	mov    %eax,(%rdx)
				lo += stridelo;
  40c71d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40c720:	48 98                	cltq   
  40c722:	48 01 c0             	add    %rax,%rax
  40c725:	48 01 45 d0          	add    %rax,-0x30(%rbp)
				hi--;
  40c729:	48 83 6d c8 02       	subq   $0x2,-0x38(%rbp)
				continue;
  40c72e:	e9 80 fe ff ff       	jmpq   40c5b3 <_adReverseWchar+0x111>
			}

			/* Shift the whole array. This is woefully inefficient
			 */
			memcpy(tmp.ptr, hi, stridehi * wchar.sizeof);
  40c733:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40c736:	48 98                	cltq   
  40c738:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  40c73c:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40c740:	48 8d bd 50 ff ff ff 	lea    -0xb0(%rbp),%rdi
  40c747:	e8 e4 0b 00 00       	callq  40d330 <memcpy>
			memcpy(hi + cast(int) stridehi - cast(int) stridelo, lo, stridelo * wchar.sizeof);
  40c74c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40c74f:	48 98                	cltq   
  40c751:	48 8d 0c 00          	lea    (%rax,%rax,1),%rcx
  40c755:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40c758:	48 98                	cltq   
  40c75a:	48 01 c0             	add    %rax,%rax
  40c75d:	48 89 c2             	mov    %rax,%rdx
  40c760:	48 03 55 c8          	add    -0x38(%rbp),%rdx
  40c764:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40c767:	48 98                	cltq   
  40c769:	48 01 c0             	add    %rax,%rax
  40c76c:	48 89 d7             	mov    %rdx,%rdi
  40c76f:	48 29 c7             	sub    %rax,%rdi
  40c772:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40c776:	48 89 ca             	mov    %rcx,%rdx
  40c779:	e8 b2 0b 00 00       	callq  40d330 <memcpy>
			memmove(lo + stridehi, lo + stridelo , (hi - (lo + stridelo)) * wchar.sizeof);
  40c77e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40c781:	48 98                	cltq   
  40c783:	48 01 c0             	add    %rax,%rax
  40c786:	48 89 c2             	mov    %rax,%rdx
  40c789:	48 03 55 d0          	add    -0x30(%rbp),%rdx
  40c78d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c791:	48 89 c1             	mov    %rax,%rcx
  40c794:	48 29 d1             	sub    %rdx,%rcx
  40c797:	48 89 ca             	mov    %rcx,%rdx
  40c79a:	48 89 d0             	mov    %rdx,%rax
  40c79d:	48 c1 e8 3f          	shr    $0x3f,%rax
  40c7a1:	48 01 d0             	add    %rdx,%rax
  40c7a4:	48 d1 f8             	sar    %rax
  40c7a7:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  40c7ab:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40c7ae:	48 98                	cltq   
  40c7b0:	48 01 c0             	add    %rax,%rax
  40c7b3:	48 89 c6             	mov    %rax,%rsi
  40c7b6:	48 03 75 d0          	add    -0x30(%rbp),%rsi
  40c7ba:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40c7bd:	48 98                	cltq   
  40c7bf:	48 01 c0             	add    %rax,%rax
  40c7c2:	48 89 c7             	mov    %rax,%rdi
  40c7c5:	48 03 7d d0          	add    -0x30(%rbp),%rdi
  40c7c9:	e8 c4 0b 00 00       	callq  40d392 <memmove>
			memcpy(lo, tmp.ptr, stridehi * wchar.sizeof);
  40c7ce:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40c7d1:	48 98                	cltq   
  40c7d3:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  40c7d7:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  40c7de:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40c7e2:	e8 49 0b 00 00       	callq  40d330 <memcpy>

			lo += stridehi;
  40c7e7:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40c7ea:	48 98                	cltq   
  40c7ec:	48 01 c0             	add    %rax,%rax
  40c7ef:	48 01 45 d0          	add    %rax,-0x30(%rbp)
			hi = hi - 1 + (cast(int) stridehi - cast(int) stridelo);
  40c7f3:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  40c7f7:	48 83 e9 02          	sub    $0x2,%rcx
  40c7fb:	8b 55 f4             	mov    -0xc(%rbp),%edx
  40c7fe:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40c801:	29 d0                	sub    %edx,%eax
  40c803:	48 98                	cltq   
  40c805:	48 01 c0             	add    %rax,%rax
  40c808:	48 8d 04 01          	lea    (%rcx,%rax,1),%rax
  40c80c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40c810:	e9 9e fd ff ff       	jmpq   40c5b3 <_adReverseWchar+0x111>
		}
	}

	Array aaa = *cast(Array*)(&a);
  40c815:	48 8d 95 40 ff ff ff 	lea    -0xc0(%rbp),%rdx
  40c81c:	48 8b 02             	mov    (%rdx),%rax
  40c81f:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40c826:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40c82a:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
	return aaa;
  40c831:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40c838:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  40c83f:	48 89 02             	mov    %rax,(%rdx)
  40c842:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  40c849:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
  40c850:	48 89 41 08          	mov    %rax,0x8(%rcx)
}
  40c854:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40c85b:	c9                   	leaveq 
  40c85c:	c3                   	retq   

000000000040c85d <_adCmpChar>:

int _adCmpChar(Array a1, Array a2)
  40c85d:	55                   	push   %rbp
  40c85e:	48 89 e5             	mov    %rsp,%rbp
  40c861:	48 83 ec 30          	sub    $0x30,%rsp
  40c865:	49 89 d0             	mov    %rdx,%r8
  40c868:	48 89 f8             	mov    %rdi,%rax
  40c86b:	48 89 f2             	mov    %rsi,%rdx
  40c86e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40c872:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40c876:	4c 89 c0             	mov    %r8,%rax
  40c879:	48 89 ca             	mov    %rcx,%rdx
  40c87c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c880:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
			ret 					;
		}
	}
	else
	{
		int len;
  40c884:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
		int c;
  40c88b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)

		len = a1.length;
  40c892:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40c896:	89 45 fc             	mov    %eax,-0x4(%rbp)
		if (a2.length < len)
  40c899:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40c89d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40c8a0:	48 98                	cltq   
  40c8a2:	48 39 c2             	cmp    %rax,%rdx
  40c8a5:	73 07                	jae    40c8ae <_adCmpChar+0x51>
			len = a2.length;
  40c8a7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40c8ab:	89 45 fc             	mov    %eax,-0x4(%rbp)
		c = memcmp(cast(char *)a1.data, cast(char *)a2.data, len);
  40c8ae:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40c8b1:	48 63 d0             	movslq %eax,%rdx
  40c8b4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c8b8:	48 89 c6             	mov    %rax,%rsi
  40c8bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c8bf:	48 89 c7             	mov    %rax,%rdi
  40c8c2:	e8 2d 0b 00 00       	callq  40d3f4 <_D6kernel4core6system6memcmpFPvPvmZl>
  40c8c7:	89 45 f8             	mov    %eax,-0x8(%rbp)
		if (!c)
  40c8ca:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  40c8ce:	0f 95 c0             	setne  %al
  40c8d1:	83 f0 01             	xor    $0x1,%eax
  40c8d4:	84 c0                	test   %al,%al
  40c8d6:	74 13                	je     40c8eb <_adCmpChar+0x8e>
			c = cast(int)a1.length - cast(int)a2.length;
  40c8d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40c8dc:	89 c2                	mov    %eax,%edx
  40c8de:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40c8e2:	89 d1                	mov    %edx,%ecx
  40c8e4:	29 c1                	sub    %eax,%ecx
  40c8e6:	89 c8                	mov    %ecx,%eax
  40c8e8:	89 45 f8             	mov    %eax,-0x8(%rbp)
		return c;
  40c8eb:	8b 45 f8             	mov    -0x8(%rbp),%eax
	}
}
  40c8ee:	c9                   	leaveq 
  40c8ef:	c3                   	retq   

000000000040c8f0 <_adReverse>:

Array _adReverse(Array a, size_t szelem)
  40c8f0:	55                   	push   %rbp
  40c8f1:	48 89 e5             	mov    %rsp,%rbp
  40c8f4:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  40c8f8:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  40c8fc:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
  40c900:	48 89 f0             	mov    %rsi,%rax
  40c903:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40c907:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
{
	if (a.length >= 2)
  40c90b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40c90f:	48 83 f8 02          	cmp    $0x2,%rax
  40c913:	0f 82 05 01 00 00    	jb     40ca1e <_adReverse+0x12e>
	{
		byte*	 tmp;
  40c919:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40c920:	00 
		byte[16] buffer;
  40c921:	48 c7 45 c0 10 00 00 	movq   $0x10,-0x40(%rbp)
  40c928:	00 
  40c929:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40c92d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40c931:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40c935:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40c939:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c93d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40c941:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40c946:	0f 95 c0             	setne  %al
  40c949:	83 f0 01             	xor    $0x1,%eax
  40c94c:	84 c0                	test   %al,%al
  40c94e:	75 11                	jne    40c961 <_adReverse+0x71>
  40c950:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c954:	c6 00 00             	movb   $0x0,(%rax)
  40c957:	48 ff 45 f0          	incq   -0x10(%rbp)
  40c95b:	48 ff 4d f8          	decq   -0x8(%rbp)
  40c95f:	eb e0                	jmp    40c941 <_adReverse+0x51>

		void* lo = a.data;
  40c961:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40c965:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		void* hi = a.data + (a.length - 1) * szelem;
  40c969:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40c96d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40c971:	48 ff c8             	dec    %rax
  40c974:	48 0f af 45 98       	imul   -0x68(%rbp),%rax
  40c979:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40c97d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

		tmp = buffer.ptr;
  40c981:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40c985:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		if (szelem > 16)
  40c989:	48 83 7d 98 10       	cmpq   $0x10,-0x68(%rbp)
  40c98e:	76 37                	jbe    40c9c7 <_adReverse+0xd7>
			tmp = cast(byte*)alloca(szelem);
  40c990:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40c994:	48 83 c0 0f          	add    $0xf,%rax
  40c998:	48 83 c0 0f          	add    $0xf,%rax
  40c99c:	48 c1 e8 04          	shr    $0x4,%rax
  40c9a0:	48 c1 e0 04          	shl    $0x4,%rax
  40c9a4:	48 29 c4             	sub    %rax,%rsp
  40c9a7:	48 89 65 90          	mov    %rsp,-0x70(%rbp)
  40c9ab:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40c9af:	48 83 c0 0f          	add    $0xf,%rax
  40c9b3:	48 c1 e8 04          	shr    $0x4,%rax
  40c9b7:	48 c1 e0 04          	shl    $0x4,%rax
  40c9bb:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  40c9bf:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40c9c3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		for (; lo < hi; lo += szelem, hi -= szelem)
  40c9c7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40c9cb:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  40c9cf:	0f 92 c0             	setb   %al
  40c9d2:	83 f0 01             	xor    $0x1,%eax
  40c9d5:	84 c0                	test   %al,%al
  40c9d7:	75 45                	jne    40ca1e <_adReverse+0x12e>
		{
			memcpy(tmp, lo,  szelem);
  40c9d9:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40c9dd:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40c9e1:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40c9e5:	e8 46 09 00 00       	callq  40d330 <memcpy>
			memcpy(lo,	hi,  szelem);
  40c9ea:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40c9ee:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40c9f2:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40c9f6:	e8 35 09 00 00       	callq  40d330 <memcpy>
			memcpy(hi,	tmp, szelem);
  40c9fb:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40c9ff:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40ca03:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  40ca07:	e8 24 09 00 00       	callq  40d330 <memcpy>
  40ca0c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40ca10:	48 01 45 e0          	add    %rax,-0x20(%rbp)
  40ca14:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40ca18:	48 29 45 d8          	sub    %rax,-0x28(%rbp)
  40ca1c:	eb a9                	jmp    40c9c7 <_adReverse+0xd7>
		}
	}
	return a;
  40ca1e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40ca22:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40ca26:	48 89 02             	mov    %rax,(%rdx)
  40ca29:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40ca2d:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40ca31:	48 89 42 08          	mov    %rax,0x8(%rdx)
}
  40ca35:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40ca39:	c9                   	leaveq 
  40ca3a:	c3                   	retq   

000000000040ca3b <_adEq>:

int _adEq(Array a1, Array a2, TypeInfo ti)
  40ca3b:	55                   	push   %rbp
  40ca3c:	48 89 e5             	mov    %rsp,%rbp
  40ca3f:	48 83 ec 50          	sub    $0x50,%rsp
  40ca43:	49 89 d1             	mov    %rdx,%r9
  40ca46:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  40ca4a:	48 89 f8             	mov    %rdi,%rax
  40ca4d:	48 89 f2             	mov    %rsi,%rdx
  40ca50:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40ca54:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40ca58:	4c 89 c8             	mov    %r9,%rax
  40ca5b:	48 89 ca             	mov    %rcx,%rdx
  40ca5e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40ca62:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
{
	if(a1.length != a2.length)
  40ca66:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40ca6a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40ca6e:	48 39 c2             	cmp    %rax,%rdx
  40ca71:	74 0c                	je     40ca7f <_adEq+0x44>
		return 0;				// not equal
  40ca73:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  40ca7a:	e9 be 00 00 00       	jmpq   40cb3d <_adEq+0x102>

	auto sz = ti.tsize();
  40ca7f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40ca83:	48 8b 00             	mov    (%rax),%rax
  40ca86:	48 83 c0 40          	add    $0x40,%rax
  40ca8a:	48 8b 00             	mov    (%rax),%rax
  40ca8d:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  40ca91:	ff d0                	callq  *%rax
  40ca93:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	auto p1 = a1.data;
  40ca97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ca9b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	auto p2 = a2.data;
  40ca9f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40caa3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	if(sz == 1)
  40caa7:	48 83 7d f0 01       	cmpq   $0x1,-0x10(%rbp)
  40caac:	75 1f                	jne    40cacd <_adEq+0x92>
		// We should really have a ti.isPOD() check for this
		return (memcmp(p1, p2, a1.length) == 0);
  40caae:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cab2:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40cab6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40caba:	e8 35 09 00 00       	callq  40d3f4 <_D6kernel4core6system6memcmpFPvPvmZl>
  40cabf:	48 85 c0             	test   %rax,%rax
  40cac2:	0f 94 c0             	sete   %al
  40cac5:	0f b6 c0             	movzbl %al,%eax
  40cac8:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  40cacb:	eb 70                	jmp    40cb3d <_adEq+0x102>

	for(size_t i = 0; i < a1.length; i++)
  40cacd:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40cad4:	00 
  40cad5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40cad9:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  40cadd:	0f 92 c0             	setb   %al
  40cae0:	83 f0 01             	xor    $0x1,%eax
  40cae3:	84 c0                	test   %al,%al
  40cae5:	75 4f                	jne    40cb36 <_adEq+0xfb>
	{
		if(!ti.equals(p1 + i * sz, p2 + i * sz))
  40cae7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40caeb:	48 8b 00             	mov    (%rax),%rax
  40caee:	48 83 c0 30          	add    $0x30,%rax
  40caf2:	48 8b 08             	mov    (%rax),%rcx
  40caf5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40caf9:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  40cafe:	48 89 c2             	mov    %rax,%rdx
  40cb01:	48 03 55 e0          	add    -0x20(%rbp),%rdx
  40cb05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cb09:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  40cb0e:	48 89 c6             	mov    %rax,%rsi
  40cb11:	48 03 75 e8          	add    -0x18(%rbp),%rsi
  40cb15:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  40cb19:	ff d1                	callq  *%rcx
  40cb1b:	85 c0                	test   %eax,%eax
  40cb1d:	0f 95 c0             	setne  %al
  40cb20:	83 f0 01             	xor    $0x1,%eax
  40cb23:	84 c0                	test   %al,%al
  40cb25:	74 09                	je     40cb30 <_adEq+0xf5>
			return 0;			// not equal
  40cb27:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  40cb2e:	eb 0d                	jmp    40cb3d <_adEq+0x102>
		// We should really have a ti.isPOD() check for this
		return (memcmp(p1, p2, a1.length) == 0);

	for(size_t i = 0; i < a1.length; i++)
	{
		if(!ti.equals(p1 + i * sz, p2 + i * sz))
  40cb30:	48 ff 45 f8          	incq   -0x8(%rbp)
  40cb34:	eb 9f                	jmp    40cad5 <_adEq+0x9a>
			return 0;			// not equal
	}

	return 1;					// equal
  40cb36:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%rbp)
  40cb3d:	8b 45 b4             	mov    -0x4c(%rbp),%eax
}
  40cb40:	c9                   	leaveq 
  40cb41:	c3                   	retq   

000000000040cb42 <_adCmp>:

int _adCmp(Array a1, Array a2, TypeInfo ti)
  40cb42:	55                   	push   %rbp
  40cb43:	48 89 e5             	mov    %rsp,%rbp
  40cb46:	48 83 ec 70          	sub    $0x70,%rsp
  40cb4a:	49 89 d1             	mov    %rdx,%r9
  40cb4d:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
  40cb51:	48 89 f8             	mov    %rdi,%rax
  40cb54:	48 89 f2             	mov    %rsi,%rdx
  40cb57:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40cb5b:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  40cb5f:	4c 89 c8             	mov    %r9,%rax
  40cb62:	48 89 ca             	mov    %rcx,%rdx
  40cb65:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40cb69:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
{
	//printf("adCmp()\n");
	auto len = a1.length;
  40cb6d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40cb71:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (a2.length < len)
  40cb75:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40cb79:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40cb7d:	73 08                	jae    40cb87 <_adCmp+0x45>
		len = a2.length;
  40cb7f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40cb83:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	auto sz = ti.tsize();
  40cb87:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40cb8b:	48 8b 00             	mov    (%rax),%rax
  40cb8e:	48 83 c0 40          	add    $0x40,%rax
  40cb92:	48 8b 00             	mov    (%rax),%rax
  40cb95:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40cb99:	ff d0                	callq  *%rax
  40cb9b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	void *p1 = a1.data;
  40cb9f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cba3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	void *p2 = a2.data;
  40cba7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40cbab:	48 89 45 c8          	mov    %rax,-0x38(%rbp)

	if (sz == 1)
  40cbaf:	48 83 7d d8 01       	cmpq   $0x1,-0x28(%rbp)
  40cbb4:	75 28                	jne    40cbde <_adCmp+0x9c>
	{	// We should really have a ti.isPOD() check for this
		auto c = memcmp(p1, p2, len);
  40cbb6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40cbba:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40cbbe:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40cbc2:	e8 2d 08 00 00       	callq  40d3f4 <_D6kernel4core6system6memcmpFPvPvmZl>
  40cbc7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		if (c)
  40cbcb:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  40cbd0:	74 71                	je     40cc43 <_adCmp+0x101>
			return c;
  40cbd2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cbd6:	89 45 90             	mov    %eax,-0x70(%rbp)
  40cbd9:	e9 9e 00 00 00       	jmpq   40cc7c <_adCmp+0x13a>
	}
	else
	{
		for (size_t i = 0; i < len; i++)
  40cbde:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40cbe5:	00 
  40cbe6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40cbea:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40cbee:	0f 92 c0             	setb   %al
  40cbf1:	83 f0 01             	xor    $0x1,%eax
  40cbf4:	84 c0                	test   %al,%al
  40cbf6:	75 4b                	jne    40cc43 <_adCmp+0x101>
		{
			auto c = ti.compare(p1 + i * sz, p2 + i * sz);
  40cbf8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40cbfc:	48 8b 00             	mov    (%rax),%rax
  40cbff:	48 83 c0 38          	add    $0x38,%rax
  40cc03:	48 8b 08             	mov    (%rax),%rcx
  40cc06:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40cc0a:	48 0f af 45 d8       	imul   -0x28(%rbp),%rax
  40cc0f:	48 89 c2             	mov    %rax,%rdx
  40cc12:	48 03 55 c8          	add    -0x38(%rbp),%rdx
  40cc16:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40cc1a:	48 0f af 45 d8       	imul   -0x28(%rbp),%rax
  40cc1f:	48 89 c6             	mov    %rax,%rsi
  40cc22:	48 03 75 d0          	add    -0x30(%rbp),%rsi
  40cc26:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40cc2a:	ff d1                	callq  *%rcx
  40cc2c:	89 45 fc             	mov    %eax,-0x4(%rbp)
			if (c)
  40cc2f:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40cc33:	74 08                	je     40cc3d <_adCmp+0xfb>
				return c;
  40cc35:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40cc38:	89 45 90             	mov    %eax,-0x70(%rbp)
  40cc3b:	eb 3f                	jmp    40cc7c <_adCmp+0x13a>
	else
	{
		for (size_t i = 0; i < len; i++)
		{
			auto c = ti.compare(p1 + i * sz, p2 + i * sz);
			if (c)
  40cc3d:	48 ff 45 f0          	incq   -0x10(%rbp)
  40cc41:	eb a3                	jmp    40cbe6 <_adCmp+0xa4>
				return c;
		}
	}
	if (a1.length == a2.length)
  40cc43:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40cc47:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40cc4b:	48 39 c2             	cmp    %rax,%rdx
  40cc4e:	75 09                	jne    40cc59 <_adCmp+0x117>
		return 0;
  40cc50:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%rbp)
  40cc57:	eb 23                	jmp    40cc7c <_adCmp+0x13a>
	return (a1.length > a2.length) ? 1 : -1;
  40cc59:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40cc5d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40cc61:	48 39 c2             	cmp    %rax,%rdx
  40cc64:	76 09                	jbe    40cc6f <_adCmp+0x12d>
  40cc66:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%rbp)
  40cc6d:	eb 07                	jmp    40cc76 <_adCmp+0x134>
  40cc6f:	c7 45 94 ff ff ff ff 	movl   $0xffffffff,-0x6c(%rbp)
  40cc76:	8b 45 94             	mov    -0x6c(%rbp),%eax
  40cc79:	89 45 90             	mov    %eax,-0x70(%rbp)
  40cc7c:	8b 45 90             	mov    -0x70(%rbp),%eax
}
  40cc7f:	c9                   	leaveq 
  40cc80:	c3                   	retq   

000000000040cc81 <_adSort>:

Array _adSort(Array a, TypeInfo ti)
  40cc81:	55                   	push   %rbp
  40cc82:	48 89 e5             	mov    %rsp,%rbp
  40cc85:	48 81 ec a0 04 00 00 	sub    $0x4a0,%rsp
  40cc8c:	48 89 bd 60 fb ff ff 	mov    %rdi,-0x4a0(%rbp)
  40cc93:	48 89 8d 68 fb ff ff 	mov    %rcx,-0x498(%rbp)
  40cc9a:	48 89 f0             	mov    %rsi,%rax
  40cc9d:	48 89 85 70 fb ff ff 	mov    %rax,-0x490(%rbp)
  40cca4:	48 89 95 78 fb ff ff 	mov    %rdx,-0x488(%rbp)
	struct StackEntry {
		byte *l;
		byte *r;
	}

	size_t elem_size = ti.tsize();
  40ccab:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40ccb2:	48 8b 00             	mov    (%rax),%rax
  40ccb5:	48 83 c0 40          	add    $0x40,%rax
  40ccb9:	48 8b 00             	mov    (%rax),%rax
  40ccbc:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40ccc3:	ff d0                	callq  *%rax
  40ccc5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	size_t qsort_limit = elem_size * Qsort_Threshold;
  40ccc9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40cccd:	48 89 d0             	mov    %rdx,%rax
  40ccd0:	48 c1 e0 03          	shl    $0x3,%rax
  40ccd4:	48 29 d0             	sub    %rdx,%rax
  40ccd7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	static assert(ubyte.sizeof == 1);
	static assert(ubyte.max == 255);

	StackEntry[size_t.sizeof * 8] stack; // log2( size_t.max )
  40ccdb:	48 c7 45 80 40 00 00 	movq   $0x40,-0x80(%rbp)
  40cce2:	00 
  40cce3:	48 8d 85 80 fb ff ff 	lea    -0x480(%rbp),%rax
  40ccea:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  40ccee:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40ccf2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40ccf6:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40ccfa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40ccfe:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40cd03:	0f 95 c0             	setne  %al
  40cd06:	83 f0 01             	xor    $0x1,%eax
  40cd09:	84 c0                	test   %al,%al
  40cd0b:	75 24                	jne    40cd31 <_adSort+0xb0>
  40cd0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40cd11:	48 8b 15 e8 72 00 00 	mov    0x72e8(%rip),%rdx        # 414000 <_D_adSort10StackEntry6__initZ>
  40cd18:	48 89 10             	mov    %rdx,(%rax)
  40cd1b:	48 8b 15 e6 72 00 00 	mov    0x72e6(%rip),%rdx        # 414008 <_D_adSort10StackEntry6__initZ+0x8>
  40cd22:	48 89 50 08          	mov    %rdx,0x8(%rax)
  40cd26:	48 83 45 f0 10       	addq   $0x10,-0x10(%rbp)
  40cd2b:	48 ff 4d f8          	decq   -0x8(%rbp)
  40cd2f:	eb cd                	jmp    40ccfe <_adSort+0x7d>
	StackEntry * sp = stack.ptr;
  40cd31:	48 8d 85 80 fb ff ff 	lea    -0x480(%rbp),%rax
  40cd38:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	byte* lbound = cast(byte *) a.data;
  40cd3c:	48 8b 85 78 fb ff ff 	mov    -0x488(%rbp),%rax
  40cd43:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	byte* rbound = cast(byte *) a.data + a.length * elem_size;
  40cd47:	48 8b 95 78 fb ff ff 	mov    -0x488(%rbp),%rdx
  40cd4e:	48 8b 85 70 fb ff ff 	mov    -0x490(%rbp),%rax
  40cd55:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  40cd5a:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40cd5e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40cd62:	eb 00                	jmp    40cd64 <_adSort+0xe3>
	byte* li = void;
	byte* ri = void;

	while (1)
  40cd64:	b8 00 00 00 00       	mov    $0x0,%eax
  40cd69:	84 c0                	test   %al,%al
  40cd6b:	0f 85 a8 03 00 00    	jne    40d119 <_adSort+0x498>
	{
		if (rbound - lbound > qsort_limit)
  40cd71:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cd75:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cd79:	48 29 d0             	sub    %rdx,%rax
  40cd7c:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40cd80:	0f 86 8c 02 00 00    	jbe    40d012 <_adSort+0x391>
		{
			ti.swap(lbound,
  40cd86:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40cd8d:	48 8b 00             	mov    (%rax),%rax
  40cd90:	48 83 c0 48          	add    $0x48,%rax
  40cd94:	4c 8b 00             	mov    (%rax),%r8
  40cd97:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cd9b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cd9f:	48 29 d0             	sub    %rdx,%rax
  40cda2:	48 89 c1             	mov    %rax,%rcx
  40cda5:	48 d1 e9             	shr    %rcx
  40cda8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cdac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cdb0:	48 29 d0             	sub    %rdx,%rax
  40cdb3:	48 d1 e8             	shr    %rax
  40cdb6:	ba 00 00 00 00       	mov    $0x0,%edx
  40cdbb:	48 f7 75 e8          	divq   -0x18(%rbp)
  40cdbf:	48 89 d0             	mov    %rdx,%rax
  40cdc2:	48 89 ca             	mov    %rcx,%rdx
  40cdc5:	48 29 c2             	sub    %rax,%rdx
  40cdc8:	48 89 d0             	mov    %rdx,%rax
  40cdcb:	48 89 c2             	mov    %rax,%rdx
  40cdce:	48 03 55 d0          	add    -0x30(%rbp),%rdx
  40cdd2:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40cdd6:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40cddd:	41 ff d0             	callq  *%r8
				lbound + (
						  ((rbound - lbound) >>> 1) -
						  (((rbound - lbound) >>> 1) % elem_size)
						  ));

			li = lbound + elem_size;
  40cde0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cde4:	48 03 45 d0          	add    -0x30(%rbp),%rax
  40cde8:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
			ri = rbound - elem_size;
  40cdec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cdf0:	48 89 c2             	mov    %rax,%rdx
  40cdf3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cdf7:	48 29 d0             	sub    %rdx,%rax
  40cdfa:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

			if (ti.compare(li, ri) > 0)
  40cdfe:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40ce05:	48 8b 00             	mov    (%rax),%rax
  40ce08:	48 83 c0 38          	add    $0x38,%rax
  40ce0c:	48 8b 00             	mov    (%rax),%rax
  40ce0f:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40ce13:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40ce17:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40ce1e:	ff d0                	callq  *%rax
  40ce20:	85 c0                	test   %eax,%eax
  40ce22:	7e 22                	jle    40ce46 <_adSort+0x1c5>
				ti.swap(li, ri);
  40ce24:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40ce2b:	48 8b 00             	mov    (%rax),%rax
  40ce2e:	48 83 c0 48          	add    $0x48,%rax
  40ce32:	48 8b 00             	mov    (%rax),%rax
  40ce35:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40ce39:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40ce3d:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40ce44:	ff d0                	callq  *%rax
			if (ti.compare(lbound, ri) > 0)
  40ce46:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40ce4d:	48 8b 00             	mov    (%rax),%rax
  40ce50:	48 83 c0 38          	add    $0x38,%rax
  40ce54:	48 8b 00             	mov    (%rax),%rax
  40ce57:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40ce5b:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40ce5f:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40ce66:	ff d0                	callq  *%rax
  40ce68:	85 c0                	test   %eax,%eax
  40ce6a:	7e 22                	jle    40ce8e <_adSort+0x20d>
				ti.swap(lbound, ri);
  40ce6c:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40ce73:	48 8b 00             	mov    (%rax),%rax
  40ce76:	48 83 c0 48          	add    $0x48,%rax
  40ce7a:	48 8b 00             	mov    (%rax),%rax
  40ce7d:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40ce81:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40ce85:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40ce8c:	ff d0                	callq  *%rax
			if (ti.compare(li, lbound) > 0)
  40ce8e:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40ce95:	48 8b 00             	mov    (%rax),%rax
  40ce98:	48 83 c0 38          	add    $0x38,%rax
  40ce9c:	48 8b 00             	mov    (%rax),%rax
  40ce9f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cea3:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40cea7:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40ceae:	ff d0                	callq  *%rax
  40ceb0:	85 c0                	test   %eax,%eax
  40ceb2:	7e 22                	jle    40ced6 <_adSort+0x255>
				ti.swap(li, lbound);
  40ceb4:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40cebb:	48 8b 00             	mov    (%rax),%rax
  40cebe:	48 83 c0 48          	add    $0x48,%rax
  40cec2:	48 8b 00             	mov    (%rax),%rax
  40cec5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cec9:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40cecd:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40ced4:	ff d0                	callq  *%rax

			while (1)
  40ced6:	b8 00 00 00 00       	mov    $0x0,%eax
  40cedb:	84 c0                	test   %al,%al
  40cedd:	0f 85 9f 00 00 00    	jne    40cf82 <_adSort+0x301>
			{
				do
					li += elem_size;
  40cee3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cee7:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  40ceeb:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40cef2:	48 8b 00             	mov    (%rax),%rax
  40cef5:	48 83 c0 38          	add    $0x38,%rax
  40cef9:	48 8b 00             	mov    (%rax),%rax
  40cefc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cf00:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40cf04:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40cf0b:	ff d0                	callq  *%rax
  40cf0d:	c1 e8 1f             	shr    $0x1f,%eax
  40cf10:	83 f0 01             	xor    $0x1,%eax
  40cf13:	84 c0                	test   %al,%al
  40cf15:	75 02                	jne    40cf19 <_adSort+0x298>
  40cf17:	eb ca                	jmp    40cee3 <_adSort+0x262>
				while (ti.compare(li, lbound) < 0);
				do
					ri -= elem_size;
  40cf19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cf1d:	48 29 45 b8          	sub    %rax,-0x48(%rbp)
  40cf21:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40cf28:	48 8b 00             	mov    (%rax),%rax
  40cf2b:	48 83 c0 38          	add    $0x38,%rax
  40cf2f:	48 8b 00             	mov    (%rax),%rax
  40cf32:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cf36:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40cf3a:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40cf41:	ff d0                	callq  *%rax
  40cf43:	85 c0                	test   %eax,%eax
  40cf45:	0f 9f c0             	setg   %al
  40cf48:	83 f0 01             	xor    $0x1,%eax
  40cf4b:	84 c0                	test   %al,%al
  40cf4d:	75 02                	jne    40cf51 <_adSort+0x2d0>
  40cf4f:	eb c8                	jmp    40cf19 <_adSort+0x298>
				while (ti.compare(ri, lbound) > 0);
				if (li > ri)
  40cf51:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40cf55:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  40cf59:	77 27                	ja     40cf82 <_adSort+0x301>
					break;
				ti.swap(li, ri);
  40cf5b:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40cf62:	48 8b 00             	mov    (%rax),%rax
  40cf65:	48 83 c0 48          	add    $0x48,%rax
  40cf69:	48 8b 00             	mov    (%rax),%rax
  40cf6c:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40cf70:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40cf74:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40cf7b:	ff d0                	callq  *%rax
  40cf7d:	e9 54 ff ff ff       	jmpq   40ced6 <_adSort+0x255>
			}
			ti.swap(lbound, ri);
  40cf82:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40cf89:	48 8b 00             	mov    (%rax),%rax
  40cf8c:	48 83 c0 48          	add    $0x48,%rax
  40cf90:	48 8b 00             	mov    (%rax),%rax
  40cf93:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40cf97:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40cf9b:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40cfa2:	ff d0                	callq  *%rax
			if (ri - lbound > rbound - li)
  40cfa4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cfa8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cfac:	48 29 d0             	sub    %rdx,%rax
  40cfaf:	48 89 c1             	mov    %rax,%rcx
  40cfb2:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40cfb6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cfba:	48 29 d0             	sub    %rdx,%rax
  40cfbd:	48 39 c1             	cmp    %rax,%rcx
  40cfc0:	7e 24                	jle    40cfe6 <_adSort+0x365>
			{
				sp.l = lbound;
  40cfc2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40cfc6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40cfca:	48 89 02             	mov    %rax,(%rdx)
				sp.r = ri;
  40cfcd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40cfd1:	48 83 c2 08          	add    $0x8,%rdx
  40cfd5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cfd9:	48 89 02             	mov    %rax,(%rdx)
				lbound = li;
  40cfdc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40cfe0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40cfe4:	eb 22                	jmp    40d008 <_adSort+0x387>
			}
			else
			{
				sp.l = li;
  40cfe6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40cfea:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40cfee:	48 89 02             	mov    %rax,(%rdx)
				sp.r = rbound;
  40cff1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40cff5:	48 83 c2 08          	add    $0x8,%rdx
  40cff9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cffd:	48 89 02             	mov    %rax,(%rdx)
				rbound = ri;
  40d000:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d004:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			}
			++sp;
  40d008:	48 83 45 d8 10       	addq   $0x10,-0x28(%rbp)
  40d00d:	e9 52 fd ff ff       	jmpq   40cd64 <_adSort+0xe3>
		} else {
			// Use insertion sort
			for (ri = lbound, li = lbound + elem_size;
  40d012:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d016:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40d01a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d01e:	48 03 45 d0          	add    -0x30(%rbp),%rax
  40d022:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40d026:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d02a:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  40d02e:	0f 92 c0             	setb   %al
  40d031:	83 f0 01             	xor    $0x1,%eax
  40d034:	84 c0                	test   %al,%al
  40d036:	0f 85 87 00 00 00    	jne    40d0c3 <_adSort+0x442>
				 li < rbound;
				 ri = li, li += elem_size)
			{
				for ( ; ti.compare(ri, ri + elem_size) > 0;
  40d03c:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d043:	48 8b 00             	mov    (%rax),%rax
  40d046:	48 83 c0 38          	add    $0x38,%rax
  40d04a:	48 8b 08             	mov    (%rax),%rcx
  40d04d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d051:	48 89 c2             	mov    %rax,%rdx
  40d054:	48 03 55 b8          	add    -0x48(%rbp),%rdx
  40d058:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40d05c:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d063:	ff d1                	callq  *%rcx
  40d065:	85 c0                	test   %eax,%eax
  40d067:	0f 9f c0             	setg   %al
  40d06a:	83 f0 01             	xor    $0x1,%eax
  40d06d:	84 c0                	test   %al,%al
  40d06f:	75 3d                	jne    40d0ae <_adSort+0x42d>
					  ri -= elem_size)
				{
					ti.swap(ri, ri + elem_size);
  40d071:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d078:	48 8b 00             	mov    (%rax),%rax
  40d07b:	48 83 c0 48          	add    $0x48,%rax
  40d07f:	48 8b 08             	mov    (%rax),%rcx
  40d082:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d086:	48 89 c2             	mov    %rax,%rdx
  40d089:	48 03 55 b8          	add    -0x48(%rbp),%rdx
  40d08d:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40d091:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d098:	ff d1                	callq  *%rcx
					if (ri == lbound)
  40d09a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d09e:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  40d0a2:	74 0a                	je     40d0ae <_adSort+0x42d>
  40d0a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d0a8:	48 29 45 b8          	sub    %rax,-0x48(%rbp)
  40d0ac:	eb 8e                	jmp    40d03c <_adSort+0x3bb>
  40d0ae:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d0b2:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40d0b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d0ba:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  40d0be:	e9 63 ff ff ff       	jmpq   40d026 <_adSort+0x3a5>
						break;
				}
			}
			if (sp != stack.ptr)
  40d0c3:	48 8d 85 80 fb ff ff 	lea    -0x480(%rbp),%rax
  40d0ca:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  40d0ce:	74 24                	je     40d0f4 <_adSort+0x473>
			{
				--sp;
  40d0d0:	48 83 6d d8 10       	subq   $0x10,-0x28(%rbp)
				lbound = sp.l;
  40d0d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d0d9:	48 8b 00             	mov    (%rax),%rax
  40d0dc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
				rbound = sp.r;
  40d0e0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d0e4:	48 83 c0 08          	add    $0x8,%rax
  40d0e8:	48 8b 00             	mov    (%rax),%rax
  40d0eb:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40d0ef:	e9 70 fc ff ff       	jmpq   40cd64 <_adSort+0xe3>
			}
			else
				return a;
  40d0f4:	48 8b 85 70 fb ff ff 	mov    -0x490(%rbp),%rax
  40d0fb:	48 8b 95 60 fb ff ff 	mov    -0x4a0(%rbp),%rdx
  40d102:	48 89 02             	mov    %rax,(%rdx)
  40d105:	48 8b 85 78 fb ff ff 	mov    -0x488(%rbp),%rax
  40d10c:	48 8b 95 60 fb ff ff 	mov    -0x4a0(%rbp),%rdx
  40d113:	48 89 42 08          	mov    %rax,0x8(%rdx)
  40d117:	eb 3d                	jmp    40d156 <_adSort+0x4d5>
	byte* li = void;
	byte* ri = void;

	while (1)
	{
		if (rbound - lbound > qsort_limit)
  40d119:	48 c7 45 90 0b 00 00 	movq   $0xb,-0x70(%rbp)
  40d120:	00 
  40d121:	48 c7 45 98 52 21 41 	movq   $0x412152,-0x68(%rbp)
  40d128:	00 
  40d129:	48 c7 45 a0 19 00 00 	movq   $0x19,-0x60(%rbp)
  40d130:	00 
  40d131:	48 c7 45 a8 10 40 41 	movq   $0x414010,-0x58(%rbp)
  40d138:	00 
  40d139:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40d13d:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
  40d141:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  40d145:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40d149:	41 b8 db 03 00 00    	mov    $0x3db,%r8d
  40d14f:	e8 e9 d7 ff ff       	callq  40a93d <_d_assert_msg>
			}
			else
				return a;
		}
	}
}
  40d154:	eb 07                	jmp    40d15d <_adSort+0x4dc>
  40d156:	48 8b 85 60 fb ff ff 	mov    -0x4a0(%rbp),%rax
  40d15d:	c9                   	leaveq 
  40d15e:	c3                   	retq   

000000000040d15f <_d_arraycast>:

void[] _d_arraycast(size_t tsize, size_t fsize, void[] a)
  40d15f:	55                   	push   %rbp
  40d160:	48 89 e5             	mov    %rsp,%rbp
  40d163:	48 83 ec 50          	sub    $0x50,%rsp
  40d167:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40d16b:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40d16f:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40d173:	4c 89 c0             	mov    %r8,%rax
  40d176:	48 89 ca             	mov    %rcx,%rdx
  40d179:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  40d17d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
{
	auto length = a.length;
  40d181:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d185:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto nbytes = length * fsize;
  40d189:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d18d:	48 0f af 45 d0       	imul   -0x30(%rbp),%rax
  40d192:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	if(nbytes % tsize != 0)
  40d196:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d19a:	ba 00 00 00 00       	mov    $0x0,%edx
  40d19f:	48 f7 75 d8          	divq   -0x28(%rbp)
  40d1a3:	48 89 d0             	mov    %rdx,%rax
  40d1a6:	48 85 c0             	test   %rax,%rax
  40d1a9:	74 34                	je     40d1df <_d_arraycast+0x80>
		throw new Exception("array cast misalignment");
  40d1ab:	48 c7 45 e0 17 00 00 	movq   $0x17,-0x20(%rbp)
  40d1b2:	00 
  40d1b3:	48 c7 45 e8 2a 40 41 	movq   $0x41402a,-0x18(%rbp)
  40d1ba:	00 
  40d1bb:	48 c7 c7 20 c0 41 00 	mov    $0x41c020,%rdi
  40d1c2:	e8 ae cb ff ff       	callq  409d75 <_d_newclass>
  40d1c7:	48 89 c7             	mov    %rax,%rdi
  40d1ca:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40d1ce:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d1d2:	e8 fb bb ff ff       	callq  408dd2 <_D6object9Exception5_ctorMFAaZC9Exception>
  40d1d7:	48 89 c7             	mov    %rax,%rdi
  40d1da:	e8 4f da ff ff       	callq  40ac2e <_d_throw>

	length = nbytes / tsize;
  40d1df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d1e3:	ba 00 00 00 00       	mov    $0x0,%edx
  40d1e8:	48 f7 75 d8          	divq   -0x28(%rbp)
  40d1ec:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(size_t *)&a = length; // jam new length
  40d1f0:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  40d1f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d1f8:	48 89 02             	mov    %rax,(%rdx)
	return a;
  40d1fb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d1ff:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d203:	48 89 02             	mov    %rax,(%rdx)
  40d206:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d20a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d20e:	48 89 42 08          	mov    %rax,0x8(%rdx)
}
  40d212:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d216:	c9                   	leaveq 
  40d217:	c3                   	retq   

000000000040d218 <_d_arraycopy>:

byte[] _d_arraycopy(size_t size, byte[] from, byte[] to)
  40d218:	55                   	push   %rbp
  40d219:	48 89 e5             	mov    %rsp,%rbp
  40d21c:	48 83 ec 50          	sub    $0x50,%rsp
  40d220:	48 89 7d b0          	mov    %rdi,-0x50(%rbp)
  40d224:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40d228:	4c 89 c6             	mov    %r8,%rsi
  40d22b:	4c 89 cf             	mov    %r9,%rdi
  40d22e:	48 89 d0             	mov    %rdx,%rax
  40d231:	48 89 ca             	mov    %rcx,%rdx
  40d234:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40d238:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40d23c:	48 89 f0             	mov    %rsi,%rax
  40d23f:	48 89 fa             	mov    %rdi,%rdx
  40d242:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40d246:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
{
	if(to.length != from.length)
  40d24a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d24e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d252:	48 39 c2             	cmp    %rax,%rdx
  40d255:	74 39                	je     40d290 <_d_arraycopy+0x78>
		throw new Exception("lengths don't match for array copy");
  40d257:	48 c7 45 e0 22 00 00 	movq   $0x22,-0x20(%rbp)
  40d25e:	00 
  40d25f:	48 c7 45 e8 48 40 41 	movq   $0x414048,-0x18(%rbp)
  40d266:	00 
  40d267:	48 c7 c7 20 c0 41 00 	mov    $0x41c020,%rdi
  40d26e:	e8 02 cb ff ff       	callq  409d75 <_d_newclass>
  40d273:	48 89 c7             	mov    %rax,%rdi
  40d276:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40d27a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d27e:	e8 4f bb ff ff       	callq  408dd2 <_D6object9Exception5_ctorMFAaZC9Exception>
  40d283:	48 89 c7             	mov    %rax,%rdi
  40d286:	e8 a3 d9 ff ff       	callq  40ac2e <_d_throw>
  40d28b:	e9 81 00 00 00       	jmpq   40d311 <_d_arraycopy+0xf9>
	else if(cast(byte *)to + to.length * size <= cast(byte *)from || cast(byte *)from + from.length * size <= cast(byte *)to)
  40d290:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40d294:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d298:	48 0f af 45 d8       	imul   -0x28(%rbp),%rax
  40d29d:	48 01 c2             	add    %rax,%rdx
  40d2a0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d2a4:	48 39 c2             	cmp    %rax,%rdx
  40d2a7:	76 19                	jbe    40d2c2 <_d_arraycopy+0xaa>
  40d2a9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d2ad:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d2b1:	48 0f af 45 d8       	imul   -0x28(%rbp),%rax
  40d2b6:	48 01 c2             	add    %rax,%rdx
  40d2b9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d2bd:	48 39 c2             	cmp    %rax,%rdx
  40d2c0:	77 1b                	ja     40d2dd <_d_arraycopy+0xc5>
		memcpy(cast(byte *)to, cast(byte *)from, to.length * size);
  40d2c2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d2c6:	48 89 c2             	mov    %rax,%rdx
  40d2c9:	48 0f af 55 d8       	imul   -0x28(%rbp),%rdx
  40d2ce:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40d2d2:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40d2d6:	e8 55 00 00 00       	callq  40d330 <memcpy>

byte[] _d_arraycopy(size_t size, byte[] from, byte[] to)
{
	if(to.length != from.length)
		throw new Exception("lengths don't match for array copy");
	else if(cast(byte *)to + to.length * size <= cast(byte *)from || cast(byte *)from + from.length * size <= cast(byte *)to)
  40d2db:	eb 34                	jmp    40d311 <_d_arraycopy+0xf9>
		memcpy(cast(byte *)to, cast(byte *)from, to.length * size);
	else
		throw new Exception("overlapping array copy");
  40d2dd:	48 c7 45 f0 16 00 00 	movq   $0x16,-0x10(%rbp)
  40d2e4:	00 
  40d2e5:	48 c7 45 f8 6b 40 41 	movq   $0x41406b,-0x8(%rbp)
  40d2ec:	00 
  40d2ed:	48 c7 c7 20 c0 41 00 	mov    $0x41c020,%rdi
  40d2f4:	e8 7c ca ff ff       	callq  409d75 <_d_newclass>
  40d2f9:	48 89 c7             	mov    %rax,%rdi
  40d2fc:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  40d300:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40d304:	e8 c9 ba ff ff       	callq  408dd2 <_D6object9Exception5_ctorMFAaZC9Exception>
  40d309:	48 89 c7             	mov    %rax,%rdi
  40d30c:	e8 1d d9 ff ff       	callq  40ac2e <_d_throw>

	return to;
  40d311:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d315:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40d319:	48 89 02             	mov    %rax,(%rdx)
  40d31c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d320:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40d324:	48 89 42 08          	mov    %rax,0x8(%rdx)
}
  40d328:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40d32c:	c9                   	leaveq 
  40d32d:	c3                   	retq   
  40d32e:	90                   	nop    
  40d32f:	90                   	nop    

000000000040d330 <memcpy>:
		dest = A pointer to the piece of memory serving as the copy destination.
		src = A pointer to the piece of memory serving as the copy source.
		count = The number of bytes to copy form src to dest.
	Returns: A void pointer to the start of the destination data (dest).
*/
extern(C) void* memcpy(void* dest, void* src, size_t count)
  40d330:	55                   	push   %rbp
  40d331:	48 89 e5             	mov    %rsp,%rbp
  40d334:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d338:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40d33c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
{
	ubyte* d = cast(ubyte*)dest;
  40d340:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d344:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	ubyte* s = cast(ubyte*)src;
  40d348:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d34c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	for(size_t i = count; count; count--, d++, s++)
  40d350:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d354:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d358:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  40d35d:	0f 95 c0             	setne  %al
  40d360:	83 f0 01             	xor    $0x1,%eax
  40d363:	84 c0                	test   %al,%al
  40d365:	75 25                	jne    40d38c <memcpy+0x5c>
		*d = *s;
  40d367:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d36b:	0f b6 10             	movzbl (%rax),%edx
  40d36e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d372:	88 10                	mov    %dl,(%rax)
  40d374:	48 ff 4d c8          	decq   -0x38(%rbp)
  40d378:	b8 01 00 00 00       	mov    $0x1,%eax
  40d37d:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  40d381:	b8 01 00 00 00       	mov    $0x1,%eax
  40d386:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  40d38a:	eb cc                	jmp    40d358 <memcpy+0x28>

	return dest;
  40d38c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
  40d390:	c9                   	leaveq 
  40d391:	c3                   	retq   

000000000040d392 <memmove>:

/**
Memcpy and memmove only really have differences at the user level, where they have slightly
different semantics.  Here, they're pretty much the same.
*/
extern(C) void* memmove(void* dest, void* src, size_t count)
  40d392:	55                   	push   %rbp
  40d393:	48 89 e5             	mov    %rsp,%rbp
  40d396:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d39a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40d39e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
{
	ubyte* d = cast(ubyte*)dest;
  40d3a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d3a6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	ubyte* s = cast(ubyte*)src;
  40d3aa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d3ae:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	for(size_t i = count; count; count--, d++, s++)
  40d3b2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d3b6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d3ba:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  40d3bf:	0f 95 c0             	setne  %al
  40d3c2:	83 f0 01             	xor    $0x1,%eax
  40d3c5:	84 c0                	test   %al,%al
  40d3c7:	75 25                	jne    40d3ee <memmove+0x5c>
	  *d = *s;
  40d3c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d3cd:	0f b6 10             	movzbl (%rax),%edx
  40d3d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d3d4:	88 10                	mov    %dl,(%rax)
  40d3d6:	48 ff 4d c8          	decq   -0x38(%rbp)
  40d3da:	b8 01 00 00 00       	mov    $0x1,%eax
  40d3df:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  40d3e3:	b8 01 00 00 00       	mov    $0x1,%eax
  40d3e8:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  40d3ec:	eb cc                	jmp    40d3ba <memmove+0x28>

	return dest;
  40d3ee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
  40d3f2:	c9                   	leaveq 
  40d3f3:	c3                   	retq   

000000000040d3f4 <_D6kernel4core6system6memcmpFPvPvmZl>:
	n = The number of bytes to compare.

Returns:
	 0 if they are equal, < 0 if a is less than b, and > 0 if a is greater than b.
*/
long memcmp(void* a, void* b, size_t n)
  40d3f4:	55                   	push   %rbp
  40d3f5:	48 89 e5             	mov    %rsp,%rbp
  40d3f8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d3fc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40d400:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
{
	ubyte* str_a = cast(ubyte*)a;
  40d404:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d408:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	ubyte* str_b = cast(ubyte*)b;
  40d40c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d410:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	for(size_t i = 0; i < n; i++)
  40d414:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40d41b:	00 
  40d41c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d420:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  40d424:	0f 92 c0             	setb   %al
  40d427:	83 f0 01             	xor    $0x1,%eax
  40d42a:	84 c0                	test   %al,%al
  40d42c:	75 48                	jne    40d476 <_D6kernel4core6system6memcmpFPvPvmZl+0x82>
	{
		if(*str_a != *str_b)
  40d42e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d432:	0f b6 00             	movzbl (%rax),%eax
  40d435:	0f b6 d0             	movzbl %al,%edx
  40d438:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d43c:	0f b6 00             	movzbl (%rax),%eax
  40d43f:	0f b6 c0             	movzbl %al,%eax
  40d442:	39 c2                	cmp    %eax,%edx
  40d444:	74 22                	je     40d468 <_D6kernel4core6system6memcmpFPvPvmZl+0x74>
			return *str_a - *str_b;
  40d446:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d44a:	0f b6 00             	movzbl (%rax),%eax
  40d44d:	0f b6 d0             	movzbl %al,%edx
  40d450:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d454:	0f b6 00             	movzbl (%rax),%eax
  40d457:	0f b6 c0             	movzbl %al,%eax
  40d45a:	89 d1                	mov    %edx,%ecx
  40d45c:	29 c1                	sub    %eax,%ecx
  40d45e:	89 c8                	mov    %ecx,%eax
  40d460:	48 98                	cltq   
  40d462:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40d466:	eb 16                	jmp    40d47e <_D6kernel4core6system6memcmpFPvPvmZl+0x8a>

		str_a++;
  40d468:	48 ff 45 f0          	incq   -0x10(%rbp)
		str_b++;
  40d46c:	48 ff 45 e8          	incq   -0x18(%rbp)
  40d470:	48 ff 45 f8          	incq   -0x8(%rbp)
  40d474:	eb a6                	jmp    40d41c <_D6kernel4core6system6memcmpFPvPvmZl+0x28>
	}
	
	return 0;
  40d476:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  40d47d:	00 
  40d47e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
}
  40d482:	c9                   	leaveq 
  40d483:	c3                   	retq   

000000000040d484 <_D6kernel4core6system6memsetFPvhkZv>:
	Params:
		addr = The address of the piece of memory you wish to write.
		val = The value you wish to write to memory.
		numBytes = The number of bytes you would like to write to memory.
*/
void memset(void *addr, ubyte val, uint numBytes){
  40d484:	55                   	push   %rbp
  40d485:	48 89 e5             	mov    %rsp,%rbp
  40d488:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40d48c:	40 88 75 e7          	mov    %sil,-0x19(%rbp)
  40d490:	89 55 e0             	mov    %edx,-0x20(%rbp)
     ubyte *data = cast(ubyte*) addr;
  40d493:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d497:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

     for(int i = 0; i < numBytes; i++){
  40d49b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40d4a2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40d4a5:	3b 45 e0             	cmp    -0x20(%rbp),%eax
  40d4a8:	0f 92 c0             	setb   %al
  40d4ab:	83 f0 01             	xor    $0x1,%eax
  40d4ae:	84 c0                	test   %al,%al
  40d4b0:	75 17                	jne    40d4c9 <_D6kernel4core6system6memsetFPvhkZv+0x45>
          data[i] = val;
  40d4b2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40d4b5:	48 98                	cltq   
  40d4b7:	48 89 c2             	mov    %rax,%rdx
  40d4ba:	48 03 55 f0          	add    -0x10(%rbp),%rdx
  40d4be:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  40d4c2:	88 02                	mov    %al,(%rdx)
  40d4c4:	ff 45 fc             	incl   -0x4(%rbp)
  40d4c7:	eb d9                	jmp    40d4a2 <_D6kernel4core6system6memsetFPvhkZv+0x1e>
     }
}
  40d4c9:	c9                   	leaveq 
  40d4ca:	c3                   	retq   

000000000040d4cb <_D6kernel4core6system6strlenFPaZm>:
This function determines the size of a passed-in string.
	Params: 
		s = A pointer to the beginning of a character array, declaring a string.
	Returns: The size of the string in size_t format.
*/
size_t strlen(char* s)
  40d4cb:	55                   	push   %rbp
  40d4cc:	48 89 e5             	mov    %rsp,%rbp
  40d4cf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
{
	size_t i = 0;
  40d4d3:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40d4da:	00 
	for( ; *s != 0; i++, s++){}
  40d4db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d4df:	0f b6 00             	movzbl (%rax),%eax
  40d4e2:	0f b6 c0             	movzbl %al,%eax
  40d4e5:	85 c0                	test   %eax,%eax
  40d4e7:	0f 95 c0             	setne  %al
  40d4ea:	83 f0 01             	xor    $0x1,%eax
  40d4ed:	84 c0                	test   %al,%al
  40d4ef:	75 0f                	jne    40d500 <_D6kernel4core6system6strlenFPaZm+0x35>
  40d4f1:	48 ff 45 f8          	incq   -0x8(%rbp)
  40d4f5:	b8 01 00 00 00       	mov    $0x1,%eax
  40d4fa:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  40d4fe:	eb db                	jmp    40d4db <_D6kernel4core6system6strlenFPaZm+0x10>
	return i;
  40d500:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  40d504:	c9                   	leaveq 
  40d505:	c3                   	retq   

000000000040d506 <_D6kernel4core6system8toStringFPaZAa>:
This function takes in a character pointer and returns a character array, or a string.
	Params:
		s = A pointer to the character(s) you wish to translate to a string.
	Returns: A character array (string) containing the information.
*/
char[] toString(char* s)
  40d506:	55                   	push   %rbp
  40d507:	48 89 e5             	mov    %rsp,%rbp
  40d50a:	53                   	push   %rbx
  40d50b:	48 83 ec 08          	sub    $0x8,%rsp
  40d50f:	48 89 fb             	mov    %rdi,%rbx
  40d512:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
{
	return s[0 .. strlen(s)];
  40d516:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40d51a:	e8 ac ff ff ff       	callq  40d4cb <_D6kernel4core6system6strlenFPaZm>
  40d51f:	48 89 03             	mov    %rax,(%rbx)
  40d522:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d526:	48 89 43 08          	mov    %rax,0x8(%rbx)
}
  40d52a:	48 89 d8             	mov    %rbx,%rax
  40d52d:	48 83 c4 08          	add    $0x8,%rsp
  40d531:	5b                   	pop    %rbx
  40d532:	c9                   	leaveq 
  40d533:	c3                   	retq   

000000000040d534 <_D6kernel4core6system5isnanFeZi>:
	Params:
		e = The value / piece of information you would like to check for number status.
	Returns: 
		0 if it isn't a NaN, non-zero if it is.
*/
int isnan(real e)
  40d534:	55                   	push   %rbp
  40d535:	48 89 e5             	mov    %rsp,%rbp
{
    ushort* pe = cast(ushort *)&e;
  40d538:	48 8d 45 10          	lea    0x10(%rbp),%rax
  40d53c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    ulong*  ps = cast(ulong *)&e;
  40d540:	48 8d 45 10          	lea    0x10(%rbp),%rax
  40d544:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    return (pe[4] & 0x7FFF) == 0x7FFF &&
  40d548:	b8 08 00 00 00       	mov    $0x8,%eax
  40d54d:	48 03 45 f8          	add    -0x8(%rbp),%rax
  40d551:	0f b7 00             	movzwl (%rax),%eax
  40d554:	0f b7 c0             	movzwl %ax,%eax
  40d557:	25 ff 7f 00 00       	and    $0x7fff,%eax
  40d55c:	3d ff 7f 00 00       	cmp    $0x7fff,%eax
  40d561:	75 1f                	jne    40d582 <_D6kernel4core6system5isnanFeZi+0x4e>
  40d563:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d567:	48 8b 10             	mov    (%rax),%rdx
  40d56a:	48 b8 ff ff ff ff ff 	mov    $0x7fffffffffffffff,%rax
  40d571:	ff ff 7f 
  40d574:	48 21 d0             	and    %rdx,%rax
  40d577:	48 85 c0             	test   %rax,%rax
  40d57a:	74 06                	je     40d582 <_D6kernel4core6system5isnanFeZi+0x4e>
  40d57c:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  40d580:	eb 04                	jmp    40d586 <_D6kernel4core6system5isnanFeZi+0x52>
  40d582:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  40d586:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
	    *ps & 0x7FFFFFFFFFFFFFFF;
}
  40d58a:	c9                   	leaveq 
  40d58b:	c3                   	retq   

000000000040d58c <_D4user7syscall3addFllZl>:
  40d58c:	55                   	push   %rbp
  40d58d:	48 89 e5             	mov    %rsp,%rbp
  40d590:	48 83 ec 50          	sub    $0x50,%rsp
  40d594:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40d598:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  40d59c:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  40d5a3:	00 
  40d5a4:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  40d5ab:	00 
  40d5ac:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40d5b3:	00 
  40d5b4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d5b8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40d5bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d5c0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40d5c4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40d5c8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d5cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d5d0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40d5d4:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  40d5d8:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
  40d5dc:	bf 00 00 00 00       	mov    $0x0,%edi
  40d5e1:	e8 fa 05 00 00       	callq  40dbe0 <nativeSyscall>
  40d5e6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40d5ea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d5ee:	c9                   	leaveq 
  40d5ef:	c3                   	retq   

000000000040d5f0 <_D4user7syscall9allocPageFZPv>:
  40d5f0:	55                   	push   %rbp
  40d5f1:	48 89 e5             	mov    %rsp,%rbp
  40d5f4:	48 83 ec 20          	sub    $0x20,%rsp
  40d5f8:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40d5ff:	00 
  40d600:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  40d604:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  40d608:	bf 01 00 00 00       	mov    $0x1,%edi
  40d60d:	e8 ce 05 00 00       	callq  40dbe0 <nativeSyscall>
  40d612:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d616:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d61a:	c9                   	leaveq 
  40d61b:	c3                   	retq   

000000000040d61c <_D4user7syscall4exitFlZv>:
  40d61c:	55                   	push   %rbp
  40d61d:	48 89 e5             	mov    %rsp,%rbp
  40d620:	48 83 ec 40          	sub    $0x40,%rsp
  40d624:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40d628:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40d62f:	00 
  40d630:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40d637:	00 
  40d638:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d63c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d640:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d644:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40d648:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  40d64c:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  40d650:	bf 02 00 00 00       	mov    $0x2,%edi
  40d655:	e8 86 05 00 00       	callq  40dbe0 <nativeSyscall>
  40d65a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40d65e:	c9                   	leaveq 
  40d65f:	c3                   	retq   

000000000040d660 <_D4user7syscall8freePageFZv>:
  40d660:	55                   	push   %rbp
  40d661:	48 89 e5             	mov    %rsp,%rbp
  40d664:	48 83 ec 20          	sub    $0x20,%rsp
  40d668:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40d66f:	00 
  40d670:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  40d674:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  40d678:	bf 03 00 00 00       	mov    $0x3,%edi
  40d67d:	e8 5e 05 00 00       	callq  40dbe0 <nativeSyscall>
  40d682:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d686:	c9                   	leaveq 
  40d687:	c3                   	retq   

000000000040d688 <_D4user7syscall5yieldFZv>:
  40d688:	55                   	push   %rbp
  40d689:	48 89 e5             	mov    %rsp,%rbp
  40d68c:	48 83 ec 20          	sub    $0x20,%rsp
  40d690:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40d697:	00 
  40d698:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  40d69c:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  40d6a0:	bf 04 00 00 00       	mov    $0x4,%edi
  40d6a5:	e8 36 05 00 00       	callq  40dbe0 <nativeSyscall>
  40d6aa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d6ae:	c9                   	leaveq 
  40d6af:	c3                   	retq   

000000000040d6b0 <_D4user7syscall5errorFAaZv>:
  40d6b0:	55                   	push   %rbp
  40d6b1:	48 89 e5             	mov    %rsp,%rbp
  40d6b4:	48 83 ec 50          	sub    $0x50,%rsp
  40d6b8:	48 89 f8             	mov    %rdi,%rax
  40d6bb:	48 89 f2             	mov    %rsi,%rdx
  40d6be:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40d6c2:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  40d6c6:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40d6cd:	00 
  40d6ce:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40d6d5:	00 
  40d6d6:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40d6dd:	00 
  40d6de:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40d6e2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40d6e6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d6ea:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40d6ee:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d6f2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40d6f6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d6fa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40d6fe:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  40d702:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  40d706:	bf 05 00 00 00       	mov    $0x5,%edi
  40d70b:	e8 d0 04 00 00       	callq  40dbe0 <nativeSyscall>
  40d710:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d714:	c9                   	leaveq 
  40d715:	c3                   	retq   

000000000040d716 <_D4user7syscall10depositKeyFsZv>:
  40d716:	55                   	push   %rbp
  40d717:	48 89 e5             	mov    %rsp,%rbp
  40d71a:	48 83 ec 40          	sub    $0x40,%rsp
  40d71e:	66 89 7d ce          	mov    %di,-0x32(%rbp)
  40d722:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40d729:	00 
  40d72a:	66 c7 45 e0 00 00    	movw   $0x0,-0x20(%rbp)
  40d730:	0f b7 45 ce          	movzwl -0x32(%rbp),%eax
  40d734:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
  40d738:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  40d73c:	66 89 45 e0          	mov    %ax,-0x20(%rbp)
  40d740:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  40d744:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  40d748:	bf 06 00 00 00       	mov    $0x6,%edi
  40d74d:	e8 8e 04 00 00       	callq  40dbe0 <nativeSyscall>
  40d752:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40d756:	c9                   	leaveq 
  40d757:	c3                   	retq   

000000000040d758 <_D4user7syscall12initKeyboardFZS4user7syscall12KeyboardInfo>:
  40d758:	55                   	push   %rbp
  40d759:	48 89 e5             	mov    %rsp,%rbp
  40d75c:	53                   	push   %rbx
  40d75d:	48 83 ec 38          	sub    $0x38,%rsp
  40d761:	48 89 fb             	mov    %rdi,%rbx
  40d764:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  40d76b:	00 
  40d76c:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  40d773:	00 
  40d774:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  40d77b:	00 
  40d77c:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40d783:	00 
  40d784:	48 8d 55 e7          	lea    -0x19(%rbp),%rdx
  40d788:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  40d78c:	bf 07 00 00 00       	mov    $0x7,%edi
  40d791:	e8 4a 04 00 00       	callq  40dbe0 <nativeSyscall>
  40d796:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40d79a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d79e:	48 89 03             	mov    %rax,(%rbx)
  40d7a1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d7a5:	48 89 43 08          	mov    %rax,0x8(%rbx)
  40d7a9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d7ad:	48 89 43 10          	mov    %rax,0x10(%rbx)
  40d7b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d7b5:	48 89 43 18          	mov    %rax,0x18(%rbx)
  40d7b9:	48 89 d8             	mov    %rbx,%rax
  40d7bc:	48 83 c4 38          	add    $0x38,%rsp
  40d7c0:	5b                   	pop    %rbx
  40d7c1:	c9                   	leaveq 
  40d7c2:	c3                   	retq   

000000000040d7c3 <_D4user7syscall11initConsoleFZS4user7syscall11ConsoleInfo>:
  40d7c3:	55                   	push   %rbp
  40d7c4:	48 89 e5             	mov    %rsp,%rbp
  40d7c7:	53                   	push   %rbx
  40d7c8:	48 83 ec 38          	sub    $0x38,%rsp
  40d7cc:	48 89 fb             	mov    %rdi,%rbx
  40d7cf:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  40d7d6:	00 
  40d7d7:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  40d7de:	00 
  40d7df:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  40d7e6:	00 
  40d7e7:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40d7ee:	00 
  40d7ef:	48 8d 55 e7          	lea    -0x19(%rbp),%rdx
  40d7f3:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  40d7f7:	bf 08 00 00 00       	mov    $0x8,%edi
  40d7fc:	e8 df 03 00 00       	callq  40dbe0 <nativeSyscall>
  40d801:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40d805:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d809:	48 89 03             	mov    %rax,(%rbx)
  40d80c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d810:	48 89 43 08          	mov    %rax,0x8(%rbx)
  40d814:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d818:	48 89 43 10          	mov    %rax,0x10(%rbx)
  40d81c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d820:	48 89 43 18          	mov    %rax,0x18(%rbx)
  40d824:	48 89 d8             	mov    %rbx,%rax
  40d827:	48 83 c4 38          	add    $0x38,%rsp
  40d82b:	5b                   	pop    %rbx
  40d82c:	c9                   	leaveq 
  40d82d:	c3                   	retq   

000000000040d82e <_D4user7syscall15makeEnvironmentFiZv>:
  40d82e:	55                   	push   %rbp
  40d82f:	48 89 e5             	mov    %rsp,%rbp
  40d832:	48 83 ec 40          	sub    $0x40,%rsp
  40d836:	89 7d cc             	mov    %edi,-0x34(%rbp)
  40d839:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40d840:	00 
  40d841:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  40d848:	8b 45 cc             	mov    -0x34(%rbp),%eax
  40d84b:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40d84e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40d851:	89 45 e0             	mov    %eax,-0x20(%rbp)
  40d854:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  40d858:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  40d85c:	bf 09 00 00 00       	mov    $0x9,%edi
  40d861:	e8 7a 03 00 00       	callq  40dbe0 <nativeSyscall>
  40d866:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40d86a:	c9                   	leaveq 
  40d86b:	c3                   	retq   

000000000040d86c <_D4user7syscall4forkFZi>:
  40d86c:	55                   	push   %rbp
  40d86d:	48 89 e5             	mov    %rsp,%rbp
  40d870:	48 83 ec 10          	sub    $0x10,%rsp
  40d874:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  40d87b:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  40d87f:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  40d883:	bf 0a 00 00 00       	mov    $0xa,%edi
  40d888:	e8 53 03 00 00       	callq  40dbe0 <nativeSyscall>
  40d88d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d891:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40d894:	c9                   	leaveq 
  40d895:	c3                   	retq   

000000000040d896 <_D4user7syscall4execFZi>:
  40d896:	55                   	push   %rbp
  40d897:	48 89 e5             	mov    %rsp,%rbp
  40d89a:	48 83 ec 10          	sub    $0x10,%rsp
  40d89e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  40d8a5:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  40d8a9:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  40d8ad:	bf 0b 00 00 00       	mov    $0xb,%edi
  40d8b2:	e8 29 03 00 00       	callq  40dbe0 <nativeSyscall>
  40d8b7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d8bb:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40d8be:	c9                   	leaveq 
  40d8bf:	c3                   	retq   

000000000040d8c0 <_D6kernel4core4util10CHECK_FLAGFkkZk>:
	Params:
		flags = The flags from the multiboot header the kernel wishes to check.
		bit = The number of the bit the kernel would like to check for data.
	Returns: Whether the bit "bit" in "flags" has a value (1 if it is set, 0 if it is not)
*/
uint CHECK_FLAG(uint flags, uint bit)
  40d8c0:	55                   	push   %rbp
  40d8c1:	48 89 e5             	mov    %rsp,%rbp
  40d8c4:	89 7d fc             	mov    %edi,-0x4(%rbp)
  40d8c7:	89 75 f8             	mov    %esi,-0x8(%rbp)
{
	return ((flags) & (1 << (bit)));
  40d8ca:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  40d8cd:	b8 01 00 00 00       	mov    $0x1,%eax
  40d8d2:	d3 e0                	shl    %cl,%eax
  40d8d4:	23 45 fc             	and    -0x4(%rbp),%eax
}
  40d8d7:	c9                   	leaveq 
  40d8d8:	c3                   	retq   

000000000040d8d9 <_D6kernel4core4util4itoaFAaalZAa>:
		base = The base of the integer value. If "d," it will be assumed to be decimal. If "x," the integer
			will be hexadecimal.
		d = The integer to translate.
	Returns: The translated string in a character array.
*/
char[] itoa(char[] buf, char base, long d)
  40d8d9:	55                   	push   %rbp
  40d8da:	48 89 e5             	mov    %rsp,%rbp
  40d8dd:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  40d8e4:	48 89 bd f0 fe ff ff 	mov    %rdi,-0x110(%rbp)
  40d8eb:	88 8d 6f ff ff ff    	mov    %cl,-0x91(%rbp)
  40d8f1:	4c 89 85 60 ff ff ff 	mov    %r8,-0xa0(%rbp)
  40d8f8:	48 89 f0             	mov    %rsi,%rax
  40d8fb:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  40d902:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
{
	size_t p = buf.length - 1;
  40d909:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40d910:	48 ff c8             	dec    %rax
  40d913:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	size_t startIdx = 0;
  40d917:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40d91e:	00 
	ulong ud = d;
  40d91f:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40d926:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	bool negative = false;
  40d92a:	c6 45 d7 00          	movb   $0x0,-0x29(%rbp)

	int divisor = 10;
  40d92e:	c7 45 d0 0a 00 00 00 	movl   $0xa,-0x30(%rbp)

	// If %d is specified and D is minus, put `-' in the head.
	if(base == 'd' && d < 0)
  40d935:	0f b6 85 6f ff ff ff 	movzbl -0x91(%rbp),%eax
  40d93c:	83 f8 64             	cmp    $0x64,%eax
  40d93f:	75 1e                	jne    40d95f <_D6kernel4core4util4itoaFAaalZAa+0x86>
  40d941:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  40d948:	00 
  40d949:	79 14                	jns    40d95f <_D6kernel4core4util4itoaFAaalZAa+0x86>
	{
		negative = true;
  40d94b:	c6 45 d7 01          	movb   $0x1,-0x29(%rbp)
		ud = -d;
  40d94f:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40d956:	48 f7 d8             	neg    %rax
  40d959:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	bool negative = false;

	int divisor = 10;

	// If %d is specified and D is minus, put `-' in the head.
	if(base == 'd' && d < 0)
  40d95d:	eb 13                	jmp    40d972 <_D6kernel4core4util4itoaFAaalZAa+0x99>
	{
		negative = true;
		ud = -d;
	}
	else if(base == 'x')
  40d95f:	0f b6 85 6f ff ff ff 	movzbl -0x91(%rbp),%eax
  40d966:	83 f8 78             	cmp    $0x78,%eax
  40d969:	75 07                	jne    40d972 <_D6kernel4core4util4itoaFAaalZAa+0x99>
		divisor = 16;
  40d96b:	c7 45 d0 10 00 00 00 	movl   $0x10,-0x30(%rbp)

	// Divide UD by DIVISOR until UD == 0.
	do
	{
		int remainder = ud % divisor;
  40d972:	8b 45 d0             	mov    -0x30(%rbp),%eax
  40d975:	48 63 d0             	movslq %eax,%rdx
  40d978:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d97c:	48 89 d1             	mov    %rdx,%rcx
  40d97f:	ba 00 00 00 00       	mov    $0x0,%edx
  40d984:	48 f7 f1             	div    %rcx
  40d987:	48 89 d0             	mov    %rdx,%rax
  40d98a:	89 45 f4             	mov    %eax,-0xc(%rbp)
		buf[p--] = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
  40d98d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40d994:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
  40d99b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d99f:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  40d9a6:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40d9ad:	48 39 85 08 ff ff ff 	cmp    %rax,-0xf8(%rbp)
  40d9b4:	0f 92 c0             	setb   %al
  40d9b7:	48 ff 4d e8          	decq   -0x18(%rbp)
  40d9bb:	84 c0                	test   %al,%al
  40d9bd:	74 10                	je     40d9cf <_D6kernel4core4util4itoaFAaalZAa+0xf6>
  40d9bf:	48 8b 8d 08 ff ff ff 	mov    -0xf8(%rbp),%rcx
  40d9c6:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  40d9cd:	eb 22                	jmp    40d9f1 <_D6kernel4core4util4itoaFAaalZAa+0x118>
  40d9cf:	48 c7 45 80 12 00 00 	movq   $0x12,-0x80(%rbp)
  40d9d6:	00 
  40d9d7:	48 c7 45 88 6a 41 41 	movq   $0x41416a,-0x78(%rbp)
  40d9de:	00 
  40d9df:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  40d9e3:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  40d9e7:	ba 77 01 00 00       	mov    $0x177,%edx
  40d9ec:	e8 94 cf ff ff       	callq  40a985 <_d_array_bounds>
  40d9f1:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40d9f8:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  40d9ff:	48 01 c2             	add    %rax,%rdx
  40da02:	48 89 95 10 ff ff ff 	mov    %rdx,-0xf0(%rbp)
  40da09:	83 7d f4 0a          	cmpl   $0xa,-0xc(%rbp)
  40da0d:	7d 0e                	jge    40da1d <_D6kernel4core4util4itoaFAaalZAa+0x144>
  40da0f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40da12:	83 c0 30             	add    $0x30,%eax
  40da15:	88 85 1f ff ff ff    	mov    %al,-0xe1(%rbp)
  40da1b:	eb 0c                	jmp    40da29 <_D6kernel4core4util4itoaFAaalZAa+0x150>
  40da1d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40da20:	83 c0 57             	add    $0x57,%eax
  40da23:	88 85 1f ff ff ff    	mov    %al,-0xe1(%rbp)
  40da29:	0f b6 8d 1f ff ff ff 	movzbl -0xe1(%rbp),%ecx
  40da30:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40da37:	88 08                	mov    %cl,(%rax)
  40da39:	8b 45 d0             	mov    -0x30(%rbp),%eax
  40da3c:	48 63 d0             	movslq %eax,%rdx
  40da3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40da43:	48 89 d1             	mov    %rdx,%rcx
  40da46:	ba 00 00 00 00       	mov    $0x0,%edx
  40da4b:	48 f7 f1             	div    %rcx
  40da4e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40da52:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  40da57:	0f 95 c0             	setne  %al
  40da5a:	83 f0 01             	xor    $0x1,%eax
  40da5d:	84 c0                	test   %al,%al
  40da5f:	75 05                	jne    40da66 <_D6kernel4core4util4itoaFAaalZAa+0x18d>
  40da61:	e9 0c ff ff ff       	jmpq   40d972 <_D6kernel4core4util4itoaFAaalZAa+0x99>
	}
	while (ud /= divisor)

	if(negative)
  40da66:	80 7d d7 00          	cmpb   $0x0,-0x29(%rbp)
  40da6a:	74 75                	je     40dae1 <_D6kernel4core4util4itoaFAaalZAa+0x208>
		buf[p--] = '-';
  40da6c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40da73:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  40da7a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40da7e:	48 89 95 30 ff ff ff 	mov    %rdx,-0xd0(%rbp)
  40da85:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40da8c:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
  40da93:	0f 92 c0             	setb   %al
  40da96:	48 ff 4d e8          	decq   -0x18(%rbp)
  40da9a:	84 c0                	test   %al,%al
  40da9c:	74 10                	je     40daae <_D6kernel4core4util4itoaFAaalZAa+0x1d5>
  40da9e:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
  40daa5:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
  40daac:	eb 22                	jmp    40dad0 <_D6kernel4core4util4itoaFAaalZAa+0x1f7>
  40daae:	48 c7 45 90 12 00 00 	movq   $0x12,-0x70(%rbp)
  40dab5:	00 
  40dab6:	48 c7 45 98 6a 41 41 	movq   $0x41416a,-0x68(%rbp)
  40dabd:	00 
  40dabe:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  40dac2:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  40dac6:	ba 7c 01 00 00       	mov    $0x17c,%edx
  40dacb:	e8 b5 ce ff ff       	callq  40a985 <_d_array_bounds>
  40dad0:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40dad7:	48 03 85 20 ff ff ff 	add    -0xe0(%rbp),%rax
  40dade:	c6 00 2d             	movb   $0x2d,(%rax)

	return buf[p + 1 .. $];
  40dae1:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40dae8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40daec:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40daf3:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  40daf7:	77 0d                	ja     40db06 <_D6kernel4core4util4itoaFAaalZAa+0x22d>
  40daf9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40dafd:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  40db04:	eb 22                	jmp    40db28 <_D6kernel4core4util4itoaFAaalZAa+0x24f>
  40db06:	48 c7 45 b0 12 00 00 	movq   $0x12,-0x50(%rbp)
  40db0d:	00 
  40db0e:	48 c7 45 b8 6a 41 41 	movq   $0x41416a,-0x48(%rbp)
  40db15:	00 
  40db16:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  40db1a:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40db1e:	ba 7e 01 00 00       	mov    $0x17e,%edx
  40db23:	e8 5d ce ff ff       	callq  40a985 <_d_array_bounds>
  40db28:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40db2c:	48 ff c2             	inc    %rdx
  40db2f:	48 89 95 40 ff ff ff 	mov    %rdx,-0xc0(%rbp)
  40db36:	48 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%rcx
  40db3d:	48 2b 8d 40 ff ff ff 	sub    -0xc0(%rbp),%rcx
  40db44:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
  40db4b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40db52:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  40db59:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40db60:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
  40db67:	77 10                	ja     40db79 <_D6kernel4core4util4itoaFAaalZAa+0x2a0>
  40db69:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
  40db70:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  40db77:	eb 22                	jmp    40db9b <_D6kernel4core4util4itoaFAaalZAa+0x2c2>
  40db79:	48 c7 45 c0 12 00 00 	movq   $0x12,-0x40(%rbp)
  40db80:	00 
  40db81:	48 c7 45 c8 6a 41 41 	movq   $0x41416a,-0x38(%rbp)
  40db88:	00 
  40db89:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40db8d:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40db91:	ba 7e 01 00 00       	mov    $0x17e,%edx
  40db96:	e8 ea cd ff ff       	callq  40a985 <_d_array_bounds>
  40db9b:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  40dba2:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  40dba9:	48 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%rcx
  40dbb0:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
  40dbb4:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  40dbb8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40dbbc:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  40dbc3:	48 89 02             	mov    %rax,(%rdx)
  40dbc6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40dbca:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  40dbd1:	48 89 41 08          	mov    %rax,0x8(%rcx)
}
  40dbd5:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  40dbdc:	c9                   	leaveq 
  40dbdd:	c3                   	retq   
  40dbde:	90                   	nop    
  40dbdf:	90                   	nop    

000000000040dbe0 <nativeSyscall>:
module kernel.arch.x86_64.usersyscall; // implements the native syscall function

import kernel.arch.x86_64.vmem;
import kernel.core.util;

extern(C) long nativeSyscall(ulong ID, void* ret, void* params)
  40dbe0:	48 89 7c 24 f8       	mov    %rdi,-0x8(%rsp)
  40dbe5:	48 89 74 24 f0       	mov    %rsi,-0x10(%rsp)
  40dbea:	48 89 54 24 e8       	mov    %rdx,-0x18(%rsp)
	// I assume such in the syscall handler
	asm
	{
		naked;
		"pushq %%rcx";
		"pushq %%r11";
  40dbef:	51                   	push   %rcx
		"pushq %%rax";
  40dbf0:	41 53                	push   %r11
		"syscall";
  40dbf2:	50                   	push   %rax
		"popq %%rax";
  40dbf3:	0f 05                	syscall 
		"popq %%r11";
  40dbf5:	58                   	pop    %rax
		"popq %%rcx";
  40dbf6:	41 5b                	pop    %r11

		"retq";
  40dbf8:	59                   	pop    %rcx
	}
  40dbf9:	c3                   	retq   
  40dbfa:	90                   	nop    
  40dbfb:	90                   	nop    

000000000040dbfc <_D6malloc6mallocFmZPv>:
chunk *used_list = null;  //the list of allocated chunks
chunk *free_list = null;  //the list of freed chunks

//if you don't know what malloc does
//then you shouldn't be in my source code
void *malloc(size_t size) {
  40dbfc:	55                   	push   %rbp
  40dbfd:	48 89 e5             	mov    %rsp,%rbp
  40dc00:	48 83 ec 60          	sub    $0x60,%rsp
  40dc04:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  chunk *c = free_list;
  40dc08:	48 8b 05 39 f5 00 00 	mov    0xf539(%rip),%rax        # 41d148 <_D6malloc9free_listPS6malloc5chunk>
  40dc0f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

  //first we see if there's some free-d memory we can re-use
  while(c !is null) {
  40dc13:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40dc18:	0f 95 c0             	setne  %al
  40dc1b:	83 f0 01             	xor    $0x1,%eax
  40dc1e:	84 c0                	test   %al,%al
  40dc20:	75 43                	jne    40dc65 <_D6malloc6mallocFmZPv+0x69>
    print("in while");
  40dc22:	48 c7 45 b0 08 00 00 	movq   $0x8,-0x50(%rbp)
  40dc29:	00 
  40dc2a:	48 c7 45 b8 98 41 41 	movq   $0x414198,-0x48(%rbp)
  40dc31:	00 
  40dc32:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40dc36:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40dc3a:	48 c7 c7 c0 ce 41 00 	mov    $0x41cec0,%rdi
  40dc41:	b8 00 00 00 00       	mov    $0x0,%eax
  40dc46:	e8 61 01 00 00       	callq  40ddac <_D4user7basicio5printFYv>
    if(size < c.size) { //if the size we want is less than the size of the chunk
  40dc4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40dc4f:	48 8b 00             	mov    (%rax),%rax
  40dc52:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
  40dc56:	73 bb                	jae    40dc13 <_D6malloc6mallocFmZPv+0x17>

      return cast(void *)1337;
  40dc58:	48 c7 45 a0 39 05 00 	movq   $0x539,-0x60(%rbp)
  40dc5f:	00 
  40dc60:	e9 c3 00 00 00       	jmpq   40dd28 <_D6malloc6mallocFmZPv+0x12c>
    }
  }
  //since c is null, we need to get a new page
  //void *h = allocPage(); //not till we have it
  //set the used list to start at the beginning of the page
  used_list = cast(chunk *)allocate(size + chunk.sizeof);
  40dc65:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  40dc69:	48 83 c7 18          	add    $0x18,%rdi
  40dc6d:	e8 bc 00 00 00       	callq  40dd2e <_D6malloc8allocateFmZPv>
  40dc72:	48 89 05 c7 f4 00 00 	mov    %rax,0xf4c7(%rip)        # 41d140 <_D6malloc9used_listPS6malloc5chunk>
  if(!used_list) { print("failure"); return null; }
  40dc79:	48 8b 05 c0 f4 00 00 	mov    0xf4c0(%rip),%rax        # 41d140 <_D6malloc9used_listPS6malloc5chunk>
  40dc80:	48 85 c0             	test   %rax,%rax
  40dc83:	0f 95 c0             	setne  %al
  40dc86:	83 f0 01             	xor    $0x1,%eax
  40dc89:	84 c0                	test   %al,%al
  40dc8b:	74 33                	je     40dcc0 <_D6malloc6mallocFmZPv+0xc4>
  40dc8d:	48 c7 45 c0 07 00 00 	movq   $0x7,-0x40(%rbp)
  40dc94:	00 
  40dc95:	48 c7 45 c8 a1 41 41 	movq   $0x4141a1,-0x38(%rbp)
  40dc9c:	00 
  40dc9d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40dca1:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40dca5:	48 c7 c7 c0 ce 41 00 	mov    $0x41cec0,%rdi
  40dcac:	b8 00 00 00 00       	mov    $0x0,%eax
  40dcb1:	e8 f6 00 00 00       	callq  40ddac <_D4user7basicio5printFYv>
  40dcb6:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  40dcbd:	00 
  40dcbe:	eb 68                	jmp    40dd28 <_D6malloc6mallocFmZPv+0x12c>
  //set up the struct
  print("%d", 15);
  40dcc0:	48 c7 45 d0 02 00 00 	movq   $0x2,-0x30(%rbp)
  40dcc7:	00 
  40dcc8:	48 c7 45 d8 a9 41 41 	movq   $0x4141a9,-0x28(%rbp)
  40dccf:	00 
  40dcd0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40dcd4:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40dcd8:	b9 0f 00 00 00       	mov    $0xf,%ecx
  40dcdd:	48 c7 c7 e0 ce 41 00 	mov    $0x41cee0,%rdi
  40dce4:	b8 00 00 00 00       	mov    $0x0,%eax
  40dce9:	e8 be 00 00 00       	callq  40ddac <_D4user7basicio5printFYv>
  //used_list.size = size;
  //used_list.next = null;
  //used_list.prev = null;
  print("done with malloc");
  40dcee:	48 c7 45 e0 10 00 00 	movq   $0x10,-0x20(%rbp)
  40dcf5:	00 
  40dcf6:	48 c7 45 e8 ac 41 41 	movq   $0x4141ac,-0x18(%rbp)
  40dcfd:	00 
  40dcfe:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40dd02:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40dd06:	48 c7 c7 c0 ce 41 00 	mov    $0x41cec0,%rdi
  40dd0d:	b8 00 00 00 00       	mov    $0x0,%eax
  40dd12:	e8 95 00 00 00       	callq  40ddac <_D4user7basicio5printFYv>
  return cast(void *)(used_list + chunk.sizeof);
  40dd17:	48 8b 05 22 f4 00 00 	mov    0xf422(%rip),%rax        # 41d140 <_D6malloc9used_listPS6malloc5chunk>
  40dd1e:	48 05 40 02 00 00    	add    $0x240,%rax
  40dd24:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40dd28:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
}
  40dd2c:	c9                   	leaveq 
  40dd2d:	c3                   	retq   

000000000040dd2e <_D6malloc8allocateFmZPv>:

ubyte[9000] buffer; //fake pages 'nat
int buff_pos = 0;

void *allocate(size_t size) {
  40dd2e:	55                   	push   %rbp
  40dd2f:	48 89 e5             	mov    %rsp,%rbp
  40dd32:	48 83 ec 20          	sub    $0x20,%rsp
  40dd36:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  print("in allocate");
  40dd3a:	48 c7 45 f0 0b 00 00 	movq   $0xb,-0x10(%rbp)
  40dd41:	00 
  40dd42:	48 c7 45 f8 bd 41 41 	movq   $0x4141bd,-0x8(%rbp)
  40dd49:	00 
  40dd4a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40dd4e:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  40dd52:	48 c7 c7 c0 ce 41 00 	mov    $0x41cec0,%rdi
  40dd59:	b8 00 00 00 00       	mov    $0x0,%eax
  40dd5e:	e8 49 00 00 00       	callq  40ddac <_D4user7basicio5printFYv>
  return cast(void*)(buffer.ptr + buff_pos);
  40dd63:	8b 05 1f 17 01 00    	mov    0x1171f(%rip),%eax        # 41f488 <_D6malloc8buff_posi>
  40dd69:	48 98                	cltq   
  40dd6b:	48 05 60 d1 41 00    	add    $0x41d160,%rax
}
  40dd71:	c9                   	leaveq 
  40dd72:	c3                   	retq   

000000000040dd73 <_D6malloc4freeFPvZv>:

//see malloc's comment
void free(void *) {
  40dd73:	55                   	push   %rbp
  40dd74:	48 89 e5             	mov    %rsp,%rbp
  40dd77:	48 83 ec 20          	sub    $0x20,%rsp
  40dd7b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  print("in free");
  40dd7f:	48 c7 45 f0 07 00 00 	movq   $0x7,-0x10(%rbp)
  40dd86:	00 
  40dd87:	48 c7 45 f8 c9 41 41 	movq   $0x4141c9,-0x8(%rbp)
  40dd8e:	00 
  40dd8f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40dd93:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  40dd97:	48 c7 c7 c0 ce 41 00 	mov    $0x41cec0,%rdi
  40dd9e:	b8 00 00 00 00       	mov    $0x0,%eax
  40dda3:	e8 04 00 00 00       	callq  40ddac <_D4user7basicio5printFYv>
}
  40dda8:	c9                   	leaveq 
  40dda9:	c3                   	retq   
  40ddaa:	90                   	nop    
  40ddab:	90                   	nop    

000000000040ddac <_D4user7basicio5printFYv>:
import user.syscall;
import std.stdarg;

import libos.console;

void print(...) {
  40ddac:	55                   	push   %rbp
  40ddad:	48 89 e5             	mov    %rsp,%rbp
  40ddb0:	48 81 ec 50 02 00 00 	sub    $0x250,%rsp
  40ddb7:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  40ddbe:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  40ddc5:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  40ddcc:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  40ddd3:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  40ddda:	0f b6 c0             	movzbl %al,%eax
  40dddd:	48 89 85 b8 fd ff ff 	mov    %rax,-0x248(%rbp)
  40dde4:	48 8b 95 b8 fd ff ff 	mov    -0x248(%rbp),%rdx
  40ddeb:	48 8d 04 95 00 00 00 	lea    0x0(,%rdx,4),%rax
  40ddf2:	00 
  40ddf3:	48 c7 85 b8 fd ff ff 	movq   $0x40de32,-0x248(%rbp)
  40ddfa:	32 de 40 00 
  40ddfe:	48 29 85 b8 fd ff ff 	sub    %rax,-0x248(%rbp)
  40de05:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  40de09:	48 8b 95 b8 fd ff ff 	mov    -0x248(%rbp),%rdx
  40de10:	ff e2                	jmpq   *%rdx
  40de12:	0f 29 78 f1          	movaps %xmm7,-0xf(%rax)
  40de16:	0f 29 70 e1          	movaps %xmm6,-0x1f(%rax)
  40de1a:	0f 29 68 d1          	movaps %xmm5,-0x2f(%rax)
  40de1e:	0f 29 60 c1          	movaps %xmm4,-0x3f(%rax)
  40de22:	0f 29 58 b1          	movaps %xmm3,-0x4f(%rax)
  40de26:	0f 29 50 a1          	movaps %xmm2,-0x5f(%rax)
  40de2a:	0f 29 48 91          	movaps %xmm1,-0x6f(%rax)
  40de2e:	0f 29 40 81          	movaps %xmm0,-0x7f(%rax)
  40de32:	48 89 bd f8 fd ff ff 	mov    %rdi,-0x208(%rbp)

	char[20] buff;

	foreach(arg; _arguments)
	{
		if (arg == typeid(char[]))
  40de39:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
  40de40:	c7 00 08 00 00 00    	movl   $0x8,(%rax)
  40de46:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
  40de4d:	c7 40 04 30 00 00 00 	movl   $0x30,0x4(%rax)
  40de54:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
  40de5b:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  40de5f:	48 89 50 08          	mov    %rdx,0x8(%rax)
  40de63:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
  40de6a:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
  40de71:	48 89 50 10          	mov    %rdx,0x10(%rax)
import user.syscall;
import std.stdarg;

import libos.console;

void print(...) {
  40de75:	48 8b 95 f8 fd ff ff 	mov    -0x208(%rbp),%rdx
  40de7c:	48 8b 42 10          	mov    0x10(%rdx),%rax
  40de80:	48 89 85 00 fe ff ff 	mov    %rax,-0x200(%rbp)
  40de87:	48 8b 42 18          	mov    0x18(%rdx),%rax
  40de8b:	48 89 85 08 fe ff ff 	mov    %rax,-0x1f8(%rbp)
	if (_arguments.length == 0)
  40de92:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax
  40de99:	48 85 c0             	test   %rax,%rax
  40de9c:	75 05                	jne    40dea3 <_D4user7basicio5printFYv+0xf7>
  40de9e:	e9 e9 05 00 00       	jmpq   40e48c <_D4user7basicio5printFYv+0x6e0>
	{
		return;
	}

	char[20] buff;
  40dea3:	48 c7 85 50 fe ff ff 	movq   $0x14,-0x1b0(%rbp)
  40deaa:	14 00 00 00 
  40deae:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40deb5:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
  40debc:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  40dec3:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  40deca:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  40ded1:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  40ded8:	48 83 bd 10 ff ff ff 	cmpq   $0x0,-0xf0(%rbp)
  40dedf:	00 
  40dee0:	0f 95 c0             	setne  %al
  40dee3:	83 f0 01             	xor    $0x1,%eax
  40dee6:	84 c0                	test   %al,%al
  40dee8:	75 1a                	jne    40df04 <_D4user7basicio5printFYv+0x158>
  40deea:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40def1:	c6 00 ff             	movb   $0xff,(%rax)
  40def4:	48 ff 85 08 ff ff ff 	incq   -0xf8(%rbp)
  40defb:	48 ff 8d 10 ff ff ff 	decq   -0xf0(%rbp)
  40df02:	eb d4                	jmp    40ded8 <_D4user7basicio5printFYv+0x12c>

	foreach(arg; _arguments)
  40df04:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
  40df0b:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
  40df12:	48 8b 95 c0 fd ff ff 	mov    -0x240(%rbp),%rdx
  40df19:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  40df20:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax
  40df27:	48 c1 e0 03          	shl    $0x3,%rax
  40df2b:	48 03 85 c0 fd ff ff 	add    -0x240(%rbp),%rax
  40df32:	48 39 85 18 ff ff ff 	cmp    %rax,-0xe8(%rbp)
  40df39:	0f 95 c0             	setne  %al
  40df3c:	83 f0 01             	xor    $0x1,%eax
  40df3f:	84 c0                	test   %al,%al
  40df41:	0f 85 22 05 00 00    	jne    40e469 <_D4user7basicio5printFYv+0x6bd>
  40df47:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40df4e:	48 8b 00             	mov    (%rax),%rax
  40df51:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
	{
		if (arg == typeid(char[]))
  40df58:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40df5f:	48 8b 00             	mov    (%rax),%rax
  40df62:	48 83 c0 20          	add    $0x20,%rax
  40df66:	48 8b 00             	mov    (%rax),%rax
  40df69:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  40df70:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
  40df77:	ff d0                	callq  *%rax
  40df79:	85 c0                	test   %eax,%eax
  40df7b:	0f 84 0e 01 00 00    	je     40e08f <_D4user7basicio5printFYv+0x2e3>
		{
			Console.printString(va_arg!(char[])(_argptr));
  40df81:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40df87:	83 f8 30             	cmp    $0x30,%eax
  40df8a:	73 2a                	jae    40dfb6 <_D4user7basicio5printFYv+0x20a>
  40df8c:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  40df93:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40df99:	89 c0                	mov    %eax,%eax
  40df9b:	48 01 c2             	add    %rax,%rdx
  40df9e:	48 89 95 c8 fd ff ff 	mov    %rdx,-0x238(%rbp)
  40dfa5:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40dfab:	83 c0 08             	add    $0x8,%eax
  40dfae:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%rbp)
  40dfb4:	eb 19                	jmp    40dfcf <_D4user7basicio5printFYv+0x223>
  40dfb6:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  40dfbd:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
  40dfc4:	48 83 c0 08          	add    $0x8,%rax
  40dfc8:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  40dfcf:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
  40dfd6:	48 8b 00             	mov    (%rax),%rax
  40dfd9:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  40dfe0:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40dfe6:	83 f8 30             	cmp    $0x30,%eax
  40dfe9:	73 2a                	jae    40e015 <_D4user7basicio5printFYv+0x269>
  40dfeb:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  40dff2:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40dff8:	89 c0                	mov    %eax,%eax
  40dffa:	48 01 c2             	add    %rax,%rdx
  40dffd:	48 89 95 d0 fd ff ff 	mov    %rdx,-0x230(%rbp)
  40e004:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e00a:	83 c0 08             	add    $0x8,%eax
  40e00d:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%rbp)
  40e013:	eb 19                	jmp    40e02e <_D4user7basicio5printFYv+0x282>
  40e015:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  40e01c:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
  40e023:	48 83 c0 08          	add    $0x8,%rax
  40e027:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  40e02e:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
  40e035:	48 8b 00             	mov    (%rax),%rax
  40e038:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  40e03f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40e046:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
  40e04d:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  40e054:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
  40e05b:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
  40e062:	48 89 85 60 fe ff ff 	mov    %rax,-0x1a0(%rbp)
  40e069:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
  40e070:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
  40e077:	48 8b bd 60 fe ff ff 	mov    -0x1a0(%rbp),%rdi
  40e07e:	48 8b b5 68 fe ff ff 	mov    -0x198(%rbp),%rsi
  40e085:	e8 b7 0b 00 00       	callq  40ec41 <_D5libos7console7Console11printStringFAaZv>
  40e08a:	e9 cd 03 00 00       	jmpq   40e45c <_D4user7basicio5printFYv+0x6b0>
		}
		else if (arg == typeid(long))
  40e08f:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40e096:	48 8b 00             	mov    (%rax),%rax
  40e099:	48 83 c0 20          	add    $0x20,%rax
  40e09d:	48 8b 00             	mov    (%rax),%rax
  40e0a0:	48 c7 c6 d0 0a 41 00 	mov    $0x410ad0,%rsi
  40e0a7:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
  40e0ae:	ff d0                	callq  *%rax
  40e0b0:	85 c0                	test   %eax,%eax
  40e0b2:	0f 84 c4 00 00 00    	je     40e17c <_D4user7basicio5printFYv+0x3d0>
		{
			long val;
  40e0b8:	48 c7 85 38 ff ff ff 	movq   $0x0,-0xc8(%rbp)
  40e0bf:	00 00 00 00 
			val = va_arg!(long)(_argptr);
  40e0c3:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e0c9:	83 f8 30             	cmp    $0x30,%eax
  40e0cc:	73 2a                	jae    40e0f8 <_D4user7basicio5printFYv+0x34c>
  40e0ce:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  40e0d5:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e0db:	89 c0                	mov    %eax,%eax
  40e0dd:	48 01 c2             	add    %rax,%rdx
  40e0e0:	48 89 95 d8 fd ff ff 	mov    %rdx,-0x228(%rbp)
  40e0e7:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e0ed:	83 c0 08             	add    $0x8,%eax
  40e0f0:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%rbp)
  40e0f6:	eb 19                	jmp    40e111 <_D4user7basicio5printFYv+0x365>
  40e0f8:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  40e0ff:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
  40e106:	48 83 c0 08          	add    $0x8,%rax
  40e10a:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  40e111:	48 8b 85 d8 fd ff ff 	mov    -0x228(%rbp),%rax
  40e118:	48 8b 00             	mov    (%rax),%rax
  40e11b:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)

			Console.printString(itoa(buff, 'd', val));
  40e122:	48 c7 85 80 fe ff ff 	movq   $0x14,-0x180(%rbp)
  40e129:	14 00 00 00 
  40e12d:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40e134:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
  40e13b:	48 8d bd 90 fe ff ff 	lea    -0x170(%rbp),%rdi
  40e142:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  40e149:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  40e150:	48 8b 95 88 fe ff ff 	mov    -0x178(%rbp),%rdx
  40e157:	49 89 c0             	mov    %rax,%r8
  40e15a:	b9 64 00 00 00       	mov    $0x64,%ecx
  40e15f:	e8 2a 03 00 00       	callq  40e48e <_D4user7basicio4itoaFAaalZAa>
  40e164:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  40e16b:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  40e172:	e8 ca 0a 00 00       	callq  40ec41 <_D5libos7console7Console11printStringFAaZv>
  40e177:	e9 e0 02 00 00       	jmpq   40e45c <_D4user7basicio5printFYv+0x6b0>
		}
		else if (arg == typeid(ulong))
  40e17c:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40e183:	48 8b 00             	mov    (%rax),%rax
  40e186:	48 83 c0 20          	add    $0x20,%rax
  40e18a:	48 8b 00             	mov    (%rax),%rax
  40e18d:	48 c7 c6 d0 0f 41 00 	mov    $0x410fd0,%rsi
  40e194:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
  40e19b:	ff d0                	callq  *%rax
  40e19d:	85 c0                	test   %eax,%eax
  40e19f:	0f 84 c4 00 00 00    	je     40e269 <_D4user7basicio5printFYv+0x4bd>
		{
			ulong val;
  40e1a5:	48 c7 85 40 ff ff ff 	movq   $0x0,-0xc0(%rbp)
  40e1ac:	00 00 00 00 
			val = va_arg!(ulong)(_argptr);
  40e1b0:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e1b6:	83 f8 30             	cmp    $0x30,%eax
  40e1b9:	73 2a                	jae    40e1e5 <_D4user7basicio5printFYv+0x439>
  40e1bb:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  40e1c2:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e1c8:	89 c0                	mov    %eax,%eax
  40e1ca:	48 01 c2             	add    %rax,%rdx
  40e1cd:	48 89 95 e0 fd ff ff 	mov    %rdx,-0x220(%rbp)
  40e1d4:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e1da:	83 c0 08             	add    $0x8,%eax
  40e1dd:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%rbp)
  40e1e3:	eb 19                	jmp    40e1fe <_D4user7basicio5printFYv+0x452>
  40e1e5:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  40e1ec:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  40e1f3:	48 83 c0 08          	add    $0x8,%rax
  40e1f7:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  40e1fe:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
  40e205:	48 8b 00             	mov    (%rax),%rax
  40e208:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)

			Console.printString(itoa(buff, 'u', val));
  40e20f:	48 8b 8d 40 ff ff ff 	mov    -0xc0(%rbp),%rcx
  40e216:	48 c7 85 a0 fe ff ff 	movq   $0x14,-0x160(%rbp)
  40e21d:	14 00 00 00 
  40e221:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40e228:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
  40e22f:	48 8d bd b0 fe ff ff 	lea    -0x150(%rbp),%rdi
  40e236:	48 8b b5 a0 fe ff ff 	mov    -0x160(%rbp),%rsi
  40e23d:	48 8b 95 a8 fe ff ff 	mov    -0x158(%rbp),%rdx
  40e244:	49 89 c8             	mov    %rcx,%r8
  40e247:	b9 75 00 00 00       	mov    $0x75,%ecx
  40e24c:	e8 3d 02 00 00       	callq  40e48e <_D4user7basicio4itoaFAaalZAa>
  40e251:	48 8b bd b0 fe ff ff 	mov    -0x150(%rbp),%rdi
  40e258:	48 8b b5 b8 fe ff ff 	mov    -0x148(%rbp),%rsi
  40e25f:	e8 dd 09 00 00       	callq  40ec41 <_D5libos7console7Console11printStringFAaZv>
  40e264:	e9 f3 01 00 00       	jmpq   40e45c <_D4user7basicio5printFYv+0x6b0>
		}
		else if (arg == typeid(int))
  40e269:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40e270:	48 8b 00             	mov    (%rax),%rax
  40e273:	48 83 c0 20          	add    $0x20,%rax
  40e277:	48 8b 00             	mov    (%rax),%rax
  40e27a:	48 c7 c6 50 09 41 00 	mov    $0x410950,%rsi
  40e281:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
  40e288:	ff d0                	callq  *%rax
  40e28a:	85 c0                	test   %eax,%eax
  40e28c:	0f 84 c3 00 00 00    	je     40e355 <_D4user7basicio5printFYv+0x5a9>
		{
			int val;
  40e292:	c7 85 48 ff ff ff 00 	movl   $0x0,-0xb8(%rbp)
  40e299:	00 00 00 
			val = va_arg!(int)(_argptr);
  40e29c:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e2a2:	83 f8 30             	cmp    $0x30,%eax
  40e2a5:	73 2a                	jae    40e2d1 <_D4user7basicio5printFYv+0x525>
  40e2a7:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  40e2ae:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e2b4:	89 c0                	mov    %eax,%eax
  40e2b6:	48 01 c2             	add    %rax,%rdx
  40e2b9:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
  40e2c0:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e2c6:	83 c0 08             	add    $0x8,%eax
  40e2c9:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%rbp)
  40e2cf:	eb 19                	jmp    40e2ea <_D4user7basicio5printFYv+0x53e>
  40e2d1:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  40e2d8:	48 89 85 e8 fd ff ff 	mov    %rax,-0x218(%rbp)
  40e2df:	48 83 c0 08          	add    $0x8,%rax
  40e2e3:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  40e2ea:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
  40e2f1:	8b 00                	mov    (%rax),%eax
  40e2f3:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)

			Console.printString(itoa(buff, 'd', val));
  40e2f9:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
  40e2ff:	48 63 c8             	movslq %eax,%rcx
  40e302:	48 c7 85 c0 fe ff ff 	movq   $0x14,-0x140(%rbp)
  40e309:	14 00 00 00 
  40e30d:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40e314:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
  40e31b:	48 8d bd d0 fe ff ff 	lea    -0x130(%rbp),%rdi
  40e322:	48 8b b5 c0 fe ff ff 	mov    -0x140(%rbp),%rsi
  40e329:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
  40e330:	49 89 c8             	mov    %rcx,%r8
  40e333:	b9 64 00 00 00       	mov    $0x64,%ecx
  40e338:	e8 51 01 00 00       	callq  40e48e <_D4user7basicio4itoaFAaalZAa>
  40e33d:	48 8b bd d0 fe ff ff 	mov    -0x130(%rbp),%rdi
  40e344:	48 8b b5 d8 fe ff ff 	mov    -0x128(%rbp),%rsi
  40e34b:	e8 f1 08 00 00       	callq  40ec41 <_D5libos7console7Console11printStringFAaZv>
  40e350:	e9 07 01 00 00       	jmpq   40e45c <_D4user7basicio5printFYv+0x6b0>
		}
		else if (arg == typeid(uint))
  40e355:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40e35c:	48 8b 00             	mov    (%rax),%rax
  40e35f:	48 83 c0 20          	add    $0x20,%rax
  40e363:	48 8b 00             	mov    (%rax),%rax
  40e366:	48 c7 c6 10 0f 41 00 	mov    $0x410f10,%rsi
  40e36d:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
  40e374:	ff d0                	callq  *%rax
  40e376:	85 c0                	test   %eax,%eax
  40e378:	0f 84 bd 00 00 00    	je     40e43b <_D4user7basicio5printFYv+0x68f>
		{
			uint val;
  40e37e:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  40e385:	00 00 00 
			val = va_arg!(int)(_argptr);
  40e388:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e38e:	83 f8 30             	cmp    $0x30,%eax
  40e391:	73 2a                	jae    40e3bd <_D4user7basicio5printFYv+0x611>
  40e393:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  40e39a:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e3a0:	89 c0                	mov    %eax,%eax
  40e3a2:	48 01 c2             	add    %rax,%rdx
  40e3a5:	48 89 95 f0 fd ff ff 	mov    %rdx,-0x210(%rbp)
  40e3ac:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e3b2:	83 c0 08             	add    $0x8,%eax
  40e3b5:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%rbp)
  40e3bb:	eb 19                	jmp    40e3d6 <_D4user7basicio5printFYv+0x62a>
  40e3bd:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  40e3c4:	48 89 85 f0 fd ff ff 	mov    %rax,-0x210(%rbp)
  40e3cb:	48 83 c0 08          	add    $0x8,%rax
  40e3cf:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  40e3d6:	48 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%rax
  40e3dd:	8b 00                	mov    (%rax),%eax
  40e3df:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)

			Console.printString(itoa(buff, 'u', val));
  40e3e5:	8b 8d 4c ff ff ff    	mov    -0xb4(%rbp),%ecx
  40e3eb:	48 c7 85 e0 fe ff ff 	movq   $0x14,-0x120(%rbp)
  40e3f2:	14 00 00 00 
  40e3f6:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40e3fd:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  40e404:	48 8d bd f0 fe ff ff 	lea    -0x110(%rbp),%rdi
  40e40b:	48 8b b5 e0 fe ff ff 	mov    -0x120(%rbp),%rsi
  40e412:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  40e419:	49 89 c8             	mov    %rcx,%r8
  40e41c:	b9 75 00 00 00       	mov    $0x75,%ecx
  40e421:	e8 68 00 00 00       	callq  40e48e <_D4user7basicio4itoaFAaalZAa>
  40e426:	48 8b bd f0 fe ff ff 	mov    -0x110(%rbp),%rdi
  40e42d:	48 8b b5 f8 fe ff ff 	mov    -0x108(%rbp),%rsi
  40e434:	e8 08 08 00 00       	callq  40ec41 <_D5libos7console7Console11printStringFAaZv>
  40e439:	eb 21                	jmp    40e45c <_D4user7basicio5printFYv+0x6b0>
		}
		else if (arg == typeid(void*))
  40e43b:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40e442:	48 8b 00             	mov    (%rax),%rax
  40e445:	48 83 c0 20          	add    $0x20,%rax
  40e449:	48 8b 00             	mov    (%rax),%rax
  40e44c:	48 c7 c6 00 cf 41 00 	mov    $0x41cf00,%rsi
  40e453:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
  40e45a:	ff d0                	callq  *%rax

	char[20] buff;

	foreach(arg; _arguments)
	{
		if (arg == typeid(char[]))
  40e45c:	48 83 85 18 ff ff ff 	addq   $0x8,-0xe8(%rbp)
  40e463:	08 
  40e464:	e9 b7 fa ff ff       	jmpq   40df20 <_D4user7basicio5printFYv+0x174>
  40e469:	eb 21                	jmp    40e48c <_D4user7basicio5printFYv+0x6e0>
  40e46b:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
  40e472:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
  40e479:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
  40e480:	48 8b bd b0 fd ff ff 	mov    -0x250(%rbp),%rdi
  40e487:	e8 ff c8 ff ff       	callq  40ad8b <_Unwind_Resume>
		}
		else if (arg == typeid(void*))
		{
		}
	}
}
  40e48c:	c9                   	leaveq 
  40e48d:	c3                   	retq   

000000000040e48e <_D4user7basicio4itoaFAaalZAa>:
char[] itoa(char[] buf, char base, long d)
  40e48e:	55                   	push   %rbp
  40e48f:	48 89 e5             	mov    %rsp,%rbp
  40e492:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  40e499:	48 89 bd f0 fe ff ff 	mov    %rdi,-0x110(%rbp)
  40e4a0:	88 8d 6f ff ff ff    	mov    %cl,-0x91(%rbp)
  40e4a6:	4c 89 85 60 ff ff ff 	mov    %r8,-0xa0(%rbp)
  40e4ad:	48 89 f0             	mov    %rsi,%rax
  40e4b0:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  40e4b7:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
{
  size_t p = buf.length - 1;
  40e4be:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40e4c5:	48 ff c8             	dec    %rax
  40e4c8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  size_t startIdx = 0;
  40e4cc:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40e4d3:	00 
  ulong ud = d;
  40e4d4:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40e4db:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  bool negative = false;
  40e4df:	c6 45 d7 00          	movb   $0x0,-0x29(%rbp)

  int divisor = 10;
  40e4e3:	c7 45 d0 0a 00 00 00 	movl   $0xa,-0x30(%rbp)

  // If %d is specified and D is minus, put `-' in the head.
  if(base == 'd' && d < 0)
  40e4ea:	0f b6 85 6f ff ff ff 	movzbl -0x91(%rbp),%eax
  40e4f1:	83 f8 64             	cmp    $0x64,%eax
  40e4f4:	75 1e                	jne    40e514 <_D4user7basicio4itoaFAaalZAa+0x86>
  40e4f6:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  40e4fd:	00 
  40e4fe:	79 14                	jns    40e514 <_D4user7basicio4itoaFAaalZAa+0x86>
  {
    negative = true;
  40e500:	c6 45 d7 01          	movb   $0x1,-0x29(%rbp)
    ud = -d;
  40e504:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40e50b:	48 f7 d8             	neg    %rax
  40e50e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  bool negative = false;

  int divisor = 10;

  // If %d is specified and D is minus, put `-' in the head.
  if(base == 'd' && d < 0)
  40e512:	eb 13                	jmp    40e527 <_D4user7basicio4itoaFAaalZAa+0x99>
  {
    negative = true;
    ud = -d;
  }
  else if(base == 'x')
  40e514:	0f b6 85 6f ff ff ff 	movzbl -0x91(%rbp),%eax
  40e51b:	83 f8 78             	cmp    $0x78,%eax
  40e51e:	75 07                	jne    40e527 <_D4user7basicio4itoaFAaalZAa+0x99>
    divisor = 16;
  40e520:	c7 45 d0 10 00 00 00 	movl   $0x10,-0x30(%rbp)

  // Divide UD by DIVISOR until UD == 0.
  do
  {
    int remainder = ud % divisor;
  40e527:	8b 45 d0             	mov    -0x30(%rbp),%eax
  40e52a:	48 63 d0             	movslq %eax,%rdx
  40e52d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40e531:	48 89 d1             	mov    %rdx,%rcx
  40e534:	ba 00 00 00 00       	mov    $0x0,%edx
  40e539:	48 f7 f1             	div    %rcx
  40e53c:	48 89 d0             	mov    %rdx,%rax
  40e53f:	89 45 f4             	mov    %eax,-0xc(%rbp)
    buf[p--] = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
  40e542:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40e549:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
  40e550:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40e554:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  40e55b:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40e562:	48 39 85 08 ff ff ff 	cmp    %rax,-0xf8(%rbp)
  40e569:	0f 92 c0             	setb   %al
  40e56c:	48 ff 4d e8          	decq   -0x18(%rbp)
  40e570:	84 c0                	test   %al,%al
  40e572:	74 10                	je     40e584 <_D4user7basicio4itoaFAaalZAa+0xf6>
  40e574:	48 8b 8d 08 ff ff ff 	mov    -0xf8(%rbp),%rcx
  40e57b:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  40e582:	eb 22                	jmp    40e5a6 <_D4user7basicio4itoaFAaalZAa+0x118>
  40e584:	48 c7 45 80 0e 00 00 	movq   $0xe,-0x80(%rbp)
  40e58b:	00 
  40e58c:	48 c7 45 88 d1 41 41 	movq   $0x4141d1,-0x78(%rbp)
  40e593:	00 
  40e594:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  40e598:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  40e59c:	ba 54 00 00 00       	mov    $0x54,%edx
  40e5a1:	e8 df c3 ff ff       	callq  40a985 <_d_array_bounds>
  40e5a6:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40e5ad:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  40e5b4:	48 01 c2             	add    %rax,%rdx
  40e5b7:	48 89 95 10 ff ff ff 	mov    %rdx,-0xf0(%rbp)
  40e5be:	83 7d f4 0a          	cmpl   $0xa,-0xc(%rbp)
  40e5c2:	7d 0e                	jge    40e5d2 <_D4user7basicio4itoaFAaalZAa+0x144>
  40e5c4:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40e5c7:	83 c0 30             	add    $0x30,%eax
  40e5ca:	88 85 1f ff ff ff    	mov    %al,-0xe1(%rbp)
  40e5d0:	eb 0c                	jmp    40e5de <_D4user7basicio4itoaFAaalZAa+0x150>
  40e5d2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40e5d5:	83 c0 57             	add    $0x57,%eax
  40e5d8:	88 85 1f ff ff ff    	mov    %al,-0xe1(%rbp)
  40e5de:	0f b6 8d 1f ff ff ff 	movzbl -0xe1(%rbp),%ecx
  40e5e5:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40e5ec:	88 08                	mov    %cl,(%rax)
  40e5ee:	8b 45 d0             	mov    -0x30(%rbp),%eax
  40e5f1:	48 63 d0             	movslq %eax,%rdx
  40e5f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40e5f8:	48 89 d1             	mov    %rdx,%rcx
  40e5fb:	ba 00 00 00 00       	mov    $0x0,%edx
  40e600:	48 f7 f1             	div    %rcx
  40e603:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40e607:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  40e60c:	0f 95 c0             	setne  %al
  40e60f:	83 f0 01             	xor    $0x1,%eax
  40e612:	84 c0                	test   %al,%al
  40e614:	75 05                	jne    40e61b <_D4user7basicio4itoaFAaalZAa+0x18d>
  40e616:	e9 0c ff ff ff       	jmpq   40e527 <_D4user7basicio4itoaFAaalZAa+0x99>
  }
  while (ud /= divisor)

    if(negative)
  40e61b:	80 7d d7 00          	cmpb   $0x0,-0x29(%rbp)
  40e61f:	74 75                	je     40e696 <_D4user7basicio4itoaFAaalZAa+0x208>
      buf[p--] = '-';
  40e621:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40e628:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  40e62f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40e633:	48 89 95 30 ff ff ff 	mov    %rdx,-0xd0(%rbp)
  40e63a:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40e641:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
  40e648:	0f 92 c0             	setb   %al
  40e64b:	48 ff 4d e8          	decq   -0x18(%rbp)
  40e64f:	84 c0                	test   %al,%al
  40e651:	74 10                	je     40e663 <_D4user7basicio4itoaFAaalZAa+0x1d5>
  40e653:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
  40e65a:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
  40e661:	eb 22                	jmp    40e685 <_D4user7basicio4itoaFAaalZAa+0x1f7>
  40e663:	48 c7 45 90 0e 00 00 	movq   $0xe,-0x70(%rbp)
  40e66a:	00 
  40e66b:	48 c7 45 98 d1 41 41 	movq   $0x4141d1,-0x68(%rbp)
  40e672:	00 
  40e673:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  40e677:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  40e67b:	ba 59 00 00 00       	mov    $0x59,%edx
  40e680:	e8 00 c3 ff ff       	callq  40a985 <_d_array_bounds>
  40e685:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40e68c:	48 03 85 20 ff ff ff 	add    -0xe0(%rbp),%rax
  40e693:	c6 00 2d             	movb   $0x2d,(%rax)

  return buf[p + 1 .. $];
  40e696:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40e69d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40e6a1:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40e6a8:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  40e6ac:	77 0d                	ja     40e6bb <_D4user7basicio4itoaFAaalZAa+0x22d>
  40e6ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e6b2:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  40e6b9:	eb 22                	jmp    40e6dd <_D4user7basicio4itoaFAaalZAa+0x24f>
  40e6bb:	48 c7 45 b0 0e 00 00 	movq   $0xe,-0x50(%rbp)
  40e6c2:	00 
  40e6c3:	48 c7 45 b8 d1 41 41 	movq   $0x4141d1,-0x48(%rbp)
  40e6ca:	00 
  40e6cb:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  40e6cf:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40e6d3:	ba 5b 00 00 00       	mov    $0x5b,%edx
  40e6d8:	e8 a8 c2 ff ff       	callq  40a985 <_d_array_bounds>
  40e6dd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40e6e1:	48 ff c2             	inc    %rdx
  40e6e4:	48 89 95 40 ff ff ff 	mov    %rdx,-0xc0(%rbp)
  40e6eb:	48 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%rcx
  40e6f2:	48 2b 8d 40 ff ff ff 	sub    -0xc0(%rbp),%rcx
  40e6f9:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
  40e700:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40e707:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  40e70e:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40e715:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
  40e71c:	77 10                	ja     40e72e <_D4user7basicio4itoaFAaalZAa+0x2a0>
  40e71e:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
  40e725:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  40e72c:	eb 22                	jmp    40e750 <_D4user7basicio4itoaFAaalZAa+0x2c2>
  40e72e:	48 c7 45 c0 0e 00 00 	movq   $0xe,-0x40(%rbp)
  40e735:	00 
  40e736:	48 c7 45 c8 d1 41 41 	movq   $0x4141d1,-0x38(%rbp)
  40e73d:	00 
  40e73e:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40e742:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40e746:	ba 5b 00 00 00       	mov    $0x5b,%edx
  40e74b:	e8 35 c2 ff ff       	callq  40a985 <_d_array_bounds>
  40e750:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  40e757:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  40e75e:	48 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%rcx
  40e765:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
  40e769:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  40e76d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40e771:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  40e778:	48 89 02             	mov    %rax,(%rdx)
  40e77b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40e77f:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  40e786:	48 89 41 08          	mov    %rax,0x8(%rcx)
}
  40e78a:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  40e791:	c9                   	leaveq 
  40e792:	c3                   	retq   

000000000040e793 <_D3std6stdarg14__T6va_argTAaZ6va_argFG1S3gcc8builtins13__va_list_tagZAa>:
    alias void* va_list;
}

template va_arg(T)
{
    T va_arg(inout va_list _argptr)
  40e793:	55                   	push   %rbp
  40e794:	48 89 e5             	mov    %rsp,%rbp
  40e797:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
	/*
	T arg = *cast(T*)_argptr;
	_argptr = _argptr + ((T.sizeof + int.sizeof - 1) & ~(int.sizeof - 1));
	return arg;
	*/
	T t; return t;
  40e79b:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40e7a2:	00 
  40e7a3:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40e7aa:	00 
  40e7ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40e7af:	48 89 07             	mov    %rax,(%rdi)
  40e7b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e7b6:	48 89 47 08          	mov    %rax,0x8(%rdi)
    }
  40e7ba:	48 89 f8             	mov    %rdi,%rax
  40e7bd:	c9                   	leaveq 
  40e7be:	c3                   	retq   

000000000040e7bf <_D3std6stdarg13__T6va_argTlZ6va_argFG1S3gcc8builtins13__va_list_tagZl>:
    alias void* va_list;
}

template va_arg(T)
{
    T va_arg(inout va_list _argptr)
  40e7bf:	55                   	push   %rbp
  40e7c0:	48 89 e5             	mov    %rsp,%rbp
  40e7c3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	/*
	T arg = *cast(T*)_argptr;
	_argptr = _argptr + ((T.sizeof + int.sizeof - 1) & ~(int.sizeof - 1));
	return arg;
	*/
	T t; return t;
  40e7c7:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40e7ce:	00 
  40e7cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  40e7d3:	c9                   	leaveq 
  40e7d4:	c3                   	retq   

000000000040e7d5 <_D3std6stdarg13__T6va_argTmZ6va_argFG1S3gcc8builtins13__va_list_tagZm>:
    alias void* va_list;
}

template va_arg(T)
{
    T va_arg(inout va_list _argptr)
  40e7d5:	55                   	push   %rbp
  40e7d6:	48 89 e5             	mov    %rsp,%rbp
  40e7d9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	/*
	T arg = *cast(T*)_argptr;
	_argptr = _argptr + ((T.sizeof + int.sizeof - 1) & ~(int.sizeof - 1));
	return arg;
	*/
	T t; return t;
  40e7dd:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40e7e4:	00 
  40e7e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  40e7e9:	c9                   	leaveq 
  40e7ea:	c3                   	retq   

000000000040e7eb <_D3std6stdarg13__T6va_argTiZ6va_argFG1S3gcc8builtins13__va_list_tagZi>:
    alias void* va_list;
}

template va_arg(T)
{
    T va_arg(inout va_list _argptr)
  40e7eb:	55                   	push   %rbp
  40e7ec:	48 89 e5             	mov    %rsp,%rbp
  40e7ef:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	/*
	T arg = *cast(T*)_argptr;
	_argptr = _argptr + ((T.sizeof + int.sizeof - 1) & ~(int.sizeof - 1));
	return arg;
	*/
	T t; return t;
  40e7f3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40e7fa:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
  40e7fd:	c9                   	leaveq 
  40e7fe:	c3                   	retq   
  40e7ff:	90                   	nop    

000000000040e800 <_D5libos8keyboard8Keyboard4initFZv>:
struct Keyboard
{

static:

	void init()
  40e800:	55                   	push   %rbp
  40e801:	48 89 e5             	mov    %rsp,%rbp
  40e804:	48 83 ec 20          	sub    $0x20,%rsp
	{
		kInfo = Syscall.initKeyboard();
  40e808:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  40e80c:	e8 47 ef ff ff       	callq  40d758 <_D4user7syscall12initKeyboardFZS4user7syscall12KeyboardInfo>
  40e811:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e815:	48 89 05 84 0c 01 00 	mov    %rax,0x10c84(%rip)        # 41f4a0 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo>
  40e81c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e820:	48 89 05 81 0c 01 00 	mov    %rax,0x10c81(%rip)        # 41f4a8 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x8>
  40e827:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40e82b:	48 89 05 7e 0c 01 00 	mov    %rax,0x10c7e(%rip)        # 41f4b0 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x10>
  40e832:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e836:	48 89 05 7b 0c 01 00 	mov    %rax,0x10c7b(%rip)        # 41f4b8 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x18>
	}
  40e83d:	c9                   	leaveq 
  40e83e:	c3                   	retq   

000000000040e83f <_D5libos8keyboard8Keyboard7grabKeyFZs>:

	short grabKey()
  40e83f:	55                   	push   %rbp
  40e840:	48 89 e5             	mov    %rsp,%rbp
  40e843:	48 83 ec 30          	sub    $0x30,%rsp
	{
		short ret = bufferGrabKey();
  40e847:	e8 5d 02 00 00       	callq  40eaa9 <_D5libos8keyboard8Keyboard13bufferGrabKeyFZs>
  40e84c:	66 89 45 fe          	mov    %ax,-0x2(%rbp)

		short key = ret;
  40e850:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  40e854:	66 89 45 fc          	mov    %ax,-0x4(%rbp)

		bool up;
  40e858:	c6 45 fb 00          	movb   $0x0,-0x5(%rbp)

		if (ret < 0)
  40e85c:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40e860:	85 c0                	test   %eax,%eax
  40e862:	79 08                	jns    40e86c <_D5libos8keyboard8Keyboard7grabKeyFZs+0x2d>
		{
			up = true;
  40e864:	c6 45 fb 01          	movb   $0x1,-0x5(%rbp)
			ret = -ret;
  40e868:	66 f7 5d fe          	negw   -0x2(%rbp)
		}

		if (ret >= Key.max)
  40e86c:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40e870:	83 f8 78             	cmp    $0x78,%eax
  40e873:	7c 0b                	jl     40e880 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x41>
		{
			return Key.Null;
  40e875:	66 c7 45 d6 00 00    	movw   $0x0,-0x2a(%rbp)
  40e87b:	e9 f9 00 00 00       	jmpq   40e979 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x13a>
		}

		keyState[ret] = !up;
  40e880:	48 0f bf 45 fe       	movswq -0x2(%rbp),%rax
  40e885:	48 83 f8 78          	cmp    $0x78,%rax
  40e889:	73 0b                	jae    40e896 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x57>
  40e88b:	48 0f bf 45 fe       	movswq -0x2(%rbp),%rax
  40e890:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40e894:	eb 22                	jmp    40e8b8 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x79>
  40e896:	48 c7 45 e0 10 00 00 	movq   $0x10,-0x20(%rbp)
  40e89d:	00 
  40e89e:	48 c7 45 e8 e1 41 41 	movq   $0x4141e1,-0x18(%rbp)
  40e8a5:	00 
  40e8a6:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40e8aa:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40e8ae:	ba 23 00 00 00       	mov    $0x23,%edx
  40e8b3:	e8 cd c0 ff ff       	callq  40a985 <_d_array_bounds>
  40e8b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40e8bc:	48 8d 90 e0 f4 41 00 	lea    0x41f4e0(%rax),%rdx
  40e8c3:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  40e8c7:	83 f0 01             	xor    $0x1,%eax
  40e8ca:	88 02                	mov    %al,(%rdx)

		if (ret == Key.LeftShift || ret == Key.RightShift)
  40e8cc:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40e8d0:	83 f8 2d             	cmp    $0x2d,%eax
  40e8d3:	74 09                	je     40e8de <_D5libos8keyboard8Keyboard7grabKeyFZs+0x9f>
  40e8d5:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40e8d9:	83 f8 30             	cmp    $0x30,%eax
  40e8dc:	75 26                	jne    40e904 <_D5libos8keyboard8Keyboard7grabKeyFZs+0xc5>
		{
			shiftState = keyState[Key.LeftShift] | keyState[Key.RightShift];
  40e8de:	b8 2d 00 00 00       	mov    $0x2d,%eax
  40e8e3:	48 05 e0 f4 41 00    	add    $0x41f4e0,%rax
  40e8e9:	0f b6 10             	movzbl (%rax),%edx
  40e8ec:	b8 30 00 00 00       	mov    $0x30,%eax
  40e8f1:	48 05 e0 f4 41 00    	add    $0x41f4e0,%rax
  40e8f7:	0f b6 00             	movzbl (%rax),%eax
  40e8fa:	09 d0                	or     %edx,%eax
  40e8fc:	88 05 be 0b 01 00    	mov    %al,0x10bbe(%rip)        # 41f4c0 <_D5libos8keyboard8Keyboard10shiftStateb>
			return Key.Null;
		}

		keyState[ret] = !up;

		if (ret == Key.LeftShift || ret == Key.RightShift)
  40e902:	eb 6e                	jmp    40e972 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x133>
		{
			shiftState = keyState[Key.LeftShift] | keyState[Key.RightShift];
		}
		else if (ret == Key.LeftControl || ret == Key.RightControl)
  40e904:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40e908:	83 f8 2e             	cmp    $0x2e,%eax
  40e90b:	74 09                	je     40e916 <_D5libos8keyboard8Keyboard7grabKeyFZs+0xd7>
  40e90d:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40e911:	83 f8 57             	cmp    $0x57,%eax
  40e914:	75 26                	jne    40e93c <_D5libos8keyboard8Keyboard7grabKeyFZs+0xfd>
		{
			ctrlState = keyState[Key.LeftControl] | keyState[Key.RightControl];
  40e916:	b8 2e 00 00 00       	mov    $0x2e,%eax
  40e91b:	48 05 e0 f4 41 00    	add    $0x41f4e0,%rax
  40e921:	0f b6 10             	movzbl (%rax),%edx
  40e924:	b8 57 00 00 00       	mov    $0x57,%eax
  40e929:	48 05 e0 f4 41 00    	add    $0x41f4e0,%rax
  40e92f:	0f b6 00             	movzbl (%rax),%eax
  40e932:	09 d0                	or     %edx,%eax
  40e934:	88 05 88 0b 01 00    	mov    %al,0x10b88(%rip)        # 41f4c2 <_D5libos8keyboard8Keyboard9ctrlStateb>

		if (ret == Key.LeftShift || ret == Key.RightShift)
		{
			shiftState = keyState[Key.LeftShift] | keyState[Key.RightShift];
		}
		else if (ret == Key.LeftControl || ret == Key.RightControl)
  40e93a:	eb 36                	jmp    40e972 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x133>
		{
			ctrlState = keyState[Key.LeftControl] | keyState[Key.RightControl];
		}
		else if (ret == Key.LeftAlt || ret == Key.RightAlt)
  40e93c:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40e940:	83 f8 2f             	cmp    $0x2f,%eax
  40e943:	74 09                	je     40e94e <_D5libos8keyboard8Keyboard7grabKeyFZs+0x10f>
  40e945:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40e949:	83 f8 59             	cmp    $0x59,%eax
  40e94c:	75 24                	jne    40e972 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x133>
		{
			altState = keyState[Key.LeftAlt] | keyState[Key.RightAlt];
  40e94e:	b8 2f 00 00 00       	mov    $0x2f,%eax
  40e953:	48 05 e0 f4 41 00    	add    $0x41f4e0,%rax
  40e959:	0f b6 10             	movzbl (%rax),%edx
  40e95c:	b8 59 00 00 00       	mov    $0x59,%eax
  40e961:	48 05 e0 f4 41 00    	add    $0x41f4e0,%rax
  40e967:	0f b6 00             	movzbl (%rax),%eax
  40e96a:	09 d0                	or     %edx,%eax
  40e96c:	88 05 4f 0b 01 00    	mov    %al,0x10b4f(%rip)        # 41f4c1 <_D5libos8keyboard8Keyboard8altStateb>
		}

		return key;
  40e972:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40e975:	66 89 45 d6          	mov    %ax,-0x2a(%rbp)
  40e979:	0f b7 45 d6          	movzwl -0x2a(%rbp),%eax
	}
  40e97d:	c9                   	leaveq 
  40e97e:	c3                   	retq   

000000000040e97f <_D5libos8keyboard8Keyboard13translateCodeFsZa>:

	char translateCode(short code)
  40e97f:	55                   	push   %rbp
  40e980:	48 89 e5             	mov    %rsp,%rbp
  40e983:	48 83 ec 50          	sub    $0x50,%rsp
  40e987:	66 89 7d ce          	mov    %di,-0x32(%rbp)
	{
		if (code <= 0) { return '\0'; }
  40e98b:	0f bf 45 ce          	movswl -0x32(%rbp),%eax
  40e98f:	85 c0                	test   %eax,%eax
  40e991:	7f 09                	jg     40e99c <_D5libos8keyboard8Keyboard13translateCodeFsZa+0x1d>
  40e993:	c6 45 b7 00          	movb   $0x0,-0x49(%rbp)
  40e997:	e9 b9 00 00 00       	jmpq   40ea55 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0xd6>

		// these translations only work on positive values
		// therefore, all up states must be ignored

		char ret;
  40e99c:	c6 45 ff ff          	movb   $0xff,-0x1(%rbp)
		if (shiftState)
  40e9a0:	0f b6 05 19 0b 01 00 	movzbl 0x10b19(%rip),%eax        # 41f4c0 <_D5libos8keyboard8Keyboard10shiftStateb>
  40e9a7:	84 c0                	test   %al,%al
  40e9a9:	74 4a                	je     40e9f5 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0x76>
		{
			ret = translateShift[code];
  40e9ab:	48 0f bf 45 ce       	movswq -0x32(%rbp),%rax
  40e9b0:	48 83 f8 78          	cmp    $0x78,%rax
  40e9b4:	73 0b                	jae    40e9c1 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0x42>
  40e9b6:	48 0f bf 45 ce       	movswq -0x32(%rbp),%rax
  40e9bb:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40e9bf:	eb 22                	jmp    40e9e3 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0x64>
  40e9c1:	48 c7 45 d0 10 00 00 	movq   $0x10,-0x30(%rbp)
  40e9c8:	00 
  40e9c9:	48 c7 45 d8 e1 41 41 	movq   $0x4141e1,-0x28(%rbp)
  40e9d0:	00 
  40e9d1:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40e9d5:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40e9d9:	ba 3f 00 00 00       	mov    $0x3f,%edx
  40e9de:	e8 a2 bf ff ff       	callq  40a985 <_d_array_bounds>
  40e9e3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40e9e7:	48 05 a0 cf 41 00    	add    $0x41cfa0,%rax
  40e9ed:	0f b6 00             	movzbl (%rax),%eax
  40e9f0:	88 45 ff             	mov    %al,-0x1(%rbp)
  40e9f3:	eb 48                	jmp    40ea3d <_D5libos8keyboard8Keyboard13translateCodeFsZa+0xbe>
		}
		else
		{
			ret = translate[code];
  40e9f5:	48 0f bf 45 ce       	movswq -0x32(%rbp),%rax
  40e9fa:	48 83 f8 78          	cmp    $0x78,%rax
  40e9fe:	73 0b                	jae    40ea0b <_D5libos8keyboard8Keyboard13translateCodeFsZa+0x8c>
  40ea00:	48 0f bf 45 ce       	movswq -0x32(%rbp),%rax
  40ea05:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40ea09:	eb 22                	jmp    40ea2d <_D5libos8keyboard8Keyboard13translateCodeFsZa+0xae>
  40ea0b:	48 c7 45 e0 10 00 00 	movq   $0x10,-0x20(%rbp)
  40ea12:	00 
  40ea13:	48 c7 45 e8 e1 41 41 	movq   $0x4141e1,-0x18(%rbp)
  40ea1a:	00 
  40ea1b:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40ea1f:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40ea23:	ba 43 00 00 00       	mov    $0x43,%edx
  40ea28:	e8 58 bf ff ff       	callq  40a985 <_d_array_bounds>
  40ea2d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40ea31:	48 05 20 cf 41 00    	add    $0x41cf20,%rax
  40ea37:	0f b6 00             	movzbl (%rax),%eax
  40ea3a:	88 45 ff             	mov    %al,-0x1(%rbp)
		}

		if (ret != '\xFF')
  40ea3d:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40ea41:	3d ff 00 00 00       	cmp    $0xff,%eax
  40ea46:	74 09                	je     40ea51 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0xd2>
		{
			return ret;
  40ea48:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40ea4c:	88 45 b7             	mov    %al,-0x49(%rbp)
  40ea4f:	eb 04                	jmp    40ea55 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0xd6>
		}

		return '\0';
  40ea51:	c6 45 b7 00          	movb   $0x0,-0x49(%rbp)
  40ea55:	0f b6 45 b7          	movzbl -0x49(%rbp),%eax
	}
  40ea59:	c9                   	leaveq 
  40ea5a:	c3                   	retq   

000000000040ea5b <_D5libos8keyboard8Keyboard8grabCharFZa>:

	// block until a printable character is detected
	char grabChar()
  40ea5b:	55                   	push   %rbp
  40ea5c:	48 89 e5             	mov    %rsp,%rbp
  40ea5f:	48 83 ec 20          	sub    $0x20,%rsp
	{
		short key;
  40ea63:	66 c7 45 fe 00 00    	movw   $0x0,-0x2(%rbp)
		char ret;
  40ea69:	c6 45 fd ff          	movb   $0xff,-0x3(%rbp)

		for(;;)
  40ea6d:	b8 00 00 00 00       	mov    $0x0,%eax
  40ea72:	84 c0                	test   %al,%al
  40ea74:	75 29                	jne    40ea9f <_D5libos8keyboard8Keyboard8grabCharFZa+0x44>
		{
			key = grabKey();
  40ea76:	e8 c4 fd ff ff       	callq  40e83f <_D5libos8keyboard8Keyboard7grabKeyFZs>
  40ea7b:	66 89 45 fe          	mov    %ax,-0x2(%rbp)

			ret = translateCode(key);
  40ea7f:	0f bf 7d fe          	movswl -0x2(%rbp),%edi
  40ea83:	e8 f7 fe ff ff       	callq  40e97f <_D5libos8keyboard8Keyboard13translateCodeFsZa>
  40ea88:	88 45 fd             	mov    %al,-0x3(%rbp)

			if (ret != '\xFF')
  40ea8b:	0f b6 45 fd          	movzbl -0x3(%rbp),%eax
  40ea8f:	3d ff 00 00 00       	cmp    $0xff,%eax
  40ea94:	74 d7                	je     40ea6d <_D5libos8keyboard8Keyboard8grabCharFZa+0x12>
			{
				return ret;
  40ea96:	0f b6 45 fd          	movzbl -0x3(%rbp),%eax
  40ea9a:	88 45 ef             	mov    %al,-0x11(%rbp)
  40ea9d:	eb 04                	jmp    40eaa3 <_D5libos8keyboard8Keyboard8grabCharFZa+0x48>
			}
		}

		return 0;
  40ea9f:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  40eaa3:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
	}
  40eaa7:	c9                   	leaveq 
  40eaa8:	c3                   	retq   

000000000040eaa9 <_D5libos8keyboard8Keyboard13bufferGrabKeyFZs>:
		Key.Minus: '_', Key.Equals: '+', Key.Quote: '~', Key.Apostrophe: '"',

		Key.Return: '\n', Key.Space: ' ',
	];

	short bufferGrabKey()
  40eaa9:	55                   	push   %rbp
  40eaaa:	48 89 e5             	mov    %rsp,%rbp
	{
		if ((*kInfo.writePointer) != (*kInfo.readPointer) &&
  40eaad:	48 8b 05 fc 09 01 00 	mov    0x109fc(%rip),%rax        # 41f4b0 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x10>
  40eab4:	8b 10                	mov    (%rax),%edx
  40eab6:	48 8b 05 fb 09 01 00 	mov    0x109fb(%rip),%rax        # 41f4b8 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x18>
  40eabd:	8b 00                	mov    (%rax),%eax
  40eabf:	39 c2                	cmp    %eax,%edx
  40eac1:	74 3d                	je     40eb00 <_D5libos8keyboard8Keyboard13bufferGrabKeyFZs+0x57>
  40eac3:	48 8b 05 ee 09 01 00 	mov    0x109ee(%rip),%rax        # 41f4b8 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x18>
  40eaca:	8b 00                	mov    (%rax),%eax
  40eacc:	89 c2                	mov    %eax,%edx
  40eace:	8b 05 d4 09 01 00    	mov    0x109d4(%rip),%eax        # 41f4a8 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x8>
  40ead4:	39 c2                	cmp    %eax,%edx
  40ead6:	73 28                	jae    40eb00 <_D5libos8keyboard8Keyboard13bufferGrabKeyFZs+0x57>
			((*kInfo.readPointer) < (kInfo.bufferLength)))
		{
			return kInfo.buffer[(*kInfo.readPointer)++];
  40ead8:	48 8b 0d c1 09 01 00 	mov    0x109c1(%rip),%rcx        # 41f4a0 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo>
  40eadf:	48 8b 35 d2 09 01 00 	mov    0x109d2(%rip),%rsi        # 41f4b8 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x18>
  40eae6:	8b 16                	mov    (%rsi),%edx
  40eae8:	48 63 c2             	movslq %edx,%rax
  40eaeb:	48 01 c0             	add    %rax,%rax
  40eaee:	48 8d 04 01          	lea    (%rcx,%rax,1),%rax
  40eaf2:	0f b7 00             	movzwl (%rax),%eax
  40eaf5:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
  40eaf9:	8d 42 01             	lea    0x1(%rdx),%eax
  40eafc:	89 06                	mov    %eax,(%rsi)
  40eafe:	eb 1f                	jmp    40eb1f <_D5libos8keyboard8Keyboard13bufferGrabKeyFZs+0x76>
		}
		else
		{
			return kInfo.buffer[kInfo.bufferLength - 1];
  40eb00:	48 8b 15 99 09 01 00 	mov    0x10999(%rip),%rdx        # 41f4a0 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo>
  40eb07:	8b 05 9b 09 01 00    	mov    0x1099b(%rip),%eax        # 41f4a8 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x8>
  40eb0d:	ff c8                	dec    %eax
  40eb0f:	89 c0                	mov    %eax,%eax
  40eb11:	48 01 c0             	add    %rax,%rax
  40eb14:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40eb18:	0f b7 00             	movzwl (%rax),%eax
  40eb1b:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
  40eb1f:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
		}

		return 0;
	}
  40eb23:	c9                   	leaveq 
  40eb24:	c3                   	retq   
  40eb25:	90                   	nop    
  40eb26:	90                   	nop    
  40eb27:	90                   	nop    

000000000040eb28 <_D5libos7console7Console4initFZv>:

struct Console {

static:

	void init()
  40eb28:	55                   	push   %rbp
  40eb29:	48 89 e5             	mov    %rsp,%rbp
  40eb2c:	48 83 ec 20          	sub    $0x20,%rsp
	{
		cInfo = initConsole();
  40eb30:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  40eb34:	e8 8a ec ff ff       	callq  40d7c3 <_D4user7syscall11initConsoleFZS4user7syscall11ConsoleInfo>
  40eb39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40eb3d:	48 89 05 1c 0a 01 00 	mov    %rax,0x10a1c(%rip)        # 41f560 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40eb44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40eb48:	48 89 05 19 0a 01 00 	mov    %rax,0x10a19(%rip)        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40eb4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40eb53:	48 89 05 16 0a 01 00 	mov    %rax,0x10a16(%rip)        # 41f570 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x10>
  40eb5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40eb5e:	48 89 05 13 0a 01 00 	mov    %rax,0x10a13(%rip)        # 41f578 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
	}
  40eb65:	c9                   	leaveq 
  40eb66:	c3                   	retq   

000000000040eb67 <_D5libos7console7Console11setPositionFiiZv>:

	void setPosition(int x, int y)
  40eb67:	55                   	push   %rbp
  40eb68:	48 89 e5             	mov    %rsp,%rbp
  40eb6b:	89 7d fc             	mov    %edi,-0x4(%rbp)
  40eb6e:	89 75 f8             	mov    %esi,-0x8(%rbp)
	{
		if ((x < 0 || x >= cInfo.xMax) &&
  40eb71:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40eb75:	78 0b                	js     40eb82 <_D5libos7console7Console11setPositionFiiZv+0x1b>
  40eb77:	8b 05 e3 09 01 00    	mov    0x109e3(%rip),%eax        # 41f560 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40eb7d:	39 45 fc             	cmp    %eax,-0x4(%rbp)
  40eb80:	7c 13                	jl     40eb95 <_D5libos7console7Console11setPositionFiiZv+0x2e>
  40eb82:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  40eb86:	78 1f                	js     40eba7 <_D5libos7console7Console11setPositionFiiZv+0x40>
  40eb88:	8b 05 d6 09 01 00    	mov    0x109d6(%rip),%eax        # 41f564 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x4>
  40eb8e:	39 45 f8             	cmp    %eax,-0x8(%rbp)
  40eb91:	7c 02                	jl     40eb95 <_D5libos7console7Console11setPositionFiiZv+0x2e>
			(y < 0 || y >= cInfo.yMax))
		{
			return;
  40eb93:	eb 12                	jmp    40eba7 <_D5libos7console7Console11setPositionFiiZv+0x40>
		}

		// XXX: LOCK!!!
		cInfo.xPos = x;
  40eb95:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40eb98:	89 05 ca 09 01 00    	mov    %eax,0x109ca(%rip)        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
		cInfo.yPos = y;
  40eb9e:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40eba1:	89 05 c5 09 01 00    	mov    %eax,0x109c5(%rip)        # 41f56c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
	}
  40eba7:	c9                   	leaveq 
  40eba8:	c3                   	retq   

000000000040eba9 <_D5libos7console7Console11getPositionFJiJiZv>:

	void getPosition(out int x, out int y)
  40eba9:	55                   	push   %rbp
  40ebaa:	48 89 e5             	mov    %rsp,%rbp
  40ebad:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ebb1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40ebb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ebb9:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  40ebbf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40ebc3:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
	{
		x = cInfo.xPos;
  40ebc9:	8b 15 99 09 01 00    	mov    0x10999(%rip),%edx        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40ebcf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ebd3:	89 10                	mov    %edx,(%rax)
		y = cInfo.yPos;
  40ebd5:	8b 15 91 09 01 00    	mov    0x10991(%rip),%edx        # 41f56c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40ebdb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40ebdf:	89 10                	mov    %edx,(%rax)
	}
  40ebe1:	c9                   	leaveq 
  40ebe2:	c3                   	retq   

000000000040ebe3 <_D5libos7console7Console5clearFZv>:

	void clear()
  40ebe3:	55                   	push   %rbp
  40ebe4:	48 89 e5             	mov    %rsp,%rbp
	{
		// LOCK
		for (int i = 0; i < cInfo.xMax * cInfo.yMax * 2; i++)
  40ebe7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40ebee:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  40ebf1:	8b 15 69 09 01 00    	mov    0x10969(%rip),%edx        # 41f560 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40ebf7:	8b 05 67 09 01 00    	mov    0x10967(%rip),%eax        # 41f564 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x4>
  40ebfd:	0f af c2             	imul   %edx,%eax
  40ec00:	01 c0                	add    %eax,%eax
  40ec02:	39 c1                	cmp    %eax,%ecx
  40ec04:	0f 9c c0             	setl   %al
  40ec07:	83 f0 01             	xor    $0x1,%eax
  40ec0a:	84 c0                	test   %al,%al
  40ec0c:	75 31                	jne    40ec3f <_D5libos7console7Console5clearFZv+0x5c>
		{
			volatile *(cInfo.buffer + i) = 0;
  40ec0e:	48 8b 15 63 09 01 00 	mov    0x10963(%rip),%rdx        # 41f578 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40ec15:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40ec18:	48 98                	cltq   
  40ec1a:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40ec1e:	c6 00 00             	movb   $0x0,(%rax)

			cInfo.xPos = 0;
  40ec21:	c7 05 3d 09 01 00 00 	movl   $0x0,0x1093d(%rip)        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40ec28:	00 00 00 
			cInfo.yPos = 0;
  40ec2b:	c7 05 37 09 01 00 00 	movl   $0x0,0x10937(%rip)        # 41f56c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40ec32:	00 00 00 
  40ec35:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40ec38:	ff c0                	inc    %eax
  40ec3a:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40ec3d:	eb af                	jmp    40ebee <_D5libos7console7Console5clearFZv+0xb>
		}
	}
  40ec3f:	c9                   	leaveq 
  40ec40:	c3                   	retq   

000000000040ec41 <_D5libos7console7Console11printStringFAaZv>:

	void printString(char[] str)
  40ec41:	55                   	push   %rbp
  40ec42:	48 89 e5             	mov    %rsp,%rbp
  40ec45:	48 83 ec 10          	sub    $0x10,%rsp
  40ec49:	48 89 f8             	mov    %rdi,%rax
  40ec4c:	48 89 f2             	mov    %rsi,%rdx
  40ec4f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40ec53:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
	{
		// LOCK
		putString(str);
  40ec57:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ec5b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ec5f:	e8 2b 02 00 00       	callq  40ee8f <_D5libos7console7Console9putStringFAaZv>
	}
  40ec64:	c9                   	leaveq 
  40ec65:	c3                   	retq   

000000000040ec66 <_D5libos7console7Console9printCharFaZv>:

	void printChar(char c)
  40ec66:	55                   	push   %rbp
  40ec67:	48 89 e5             	mov    %rsp,%rbp
  40ec6a:	48 83 ec 10          	sub    $0x10,%rsp
  40ec6e:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
	{
		// LOCK
		putChar(c);
  40ec72:	0f b6 7d ff          	movzbl -0x1(%rbp),%edi
  40ec76:	e8 6b 02 00 00       	callq  40eee6 <_D5libos7console7Console7putCharFaZv>
	}
  40ec7b:	c9                   	leaveq 
  40ec7c:	c3                   	retq   

000000000040ec7d <_D5libos7console7Console11resetColorsFZv>:

	void resetColors()
  40ec7d:	55                   	push   %rbp
  40ec7e:	48 89 e5             	mov    %rsp,%rbp
	{
		curColor = Color.LightGray;
  40ec81:	c6 05 04 e4 00 00 07 	movb   $0x7,0xe404(%rip)        # 41d08c <_D5libos7console7Console8curColorh>
	}
  40ec88:	c9                   	leaveq 
  40ec89:	c3                   	retq   

000000000040ec8a <_D5libos7console7Console12setForeColorFE5libos7console5ColorZv>:

	void setForeColor(Color newColor)
  40ec8a:	55                   	push   %rbp
  40ec8b:	48 89 e5             	mov    %rsp,%rbp
  40ec8e:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
	{
		curColor &= newColor | 0xF0;
  40ec92:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  40ec96:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
  40ec9b:	09 c2                	or     %eax,%edx
  40ec9d:	0f b6 05 e8 e3 00 00 	movzbl 0xe3e8(%rip),%eax        # 41d08c <_D5libos7console7Console8curColorh>
  40eca4:	21 d0                	and    %edx,%eax
  40eca6:	88 05 e0 e3 00 00    	mov    %al,0xe3e0(%rip)        # 41d08c <_D5libos7console7Console8curColorh>
	}
  40ecac:	c9                   	leaveq 
  40ecad:	c3                   	retq   

000000000040ecae <_D5libos7console7Console12setBackColorFE5libos7console5ColorZv>:

	void setBackColor(Color newColor)
  40ecae:	55                   	push   %rbp
  40ecaf:	48 89 e5             	mov    %rsp,%rbp
  40ecb2:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
	{
		curColor &= (newColor << 4) | 0x0F;
  40ecb6:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40ecba:	c1 e0 04             	shl    $0x4,%eax
  40ecbd:	89 c2                	mov    %eax,%edx
  40ecbf:	83 ca 0f             	or     $0xf,%edx
  40ecc2:	0f b6 05 c3 e3 00 00 	movzbl 0xe3c3(%rip),%eax        # 41d08c <_D5libos7console7Console8curColorh>
  40ecc9:	21 d0                	and    %edx,%eax
  40eccb:	88 05 bb e3 00 00    	mov    %al,0xe3bb(%rip)        # 41d08c <_D5libos7console7Console8curColorh>
	}
  40ecd1:	c9                   	leaveq 
  40ecd2:	c3                   	retq   

000000000040ecd3 <_D5libos7console7Console9setColorsFE5libos7console5ColorE5libos7console5ColorZv>:

	void setColors(Color foreColor, Color backColor)
  40ecd3:	55                   	push   %rbp
  40ecd4:	48 89 e5             	mov    %rsp,%rbp
  40ecd7:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
  40ecdb:	40 88 75 fe          	mov    %sil,-0x2(%rbp)
	{
		curColor = (foreColor & 0x0F) | (backColor << 4);
  40ecdf:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40ece3:	89 c2                	mov    %eax,%edx
  40ece5:	83 e2 0f             	and    $0xf,%edx
  40ece8:	0f b6 45 fe          	movzbl -0x2(%rbp),%eax
  40ecec:	c1 e0 04             	shl    $0x4,%eax
  40ecef:	09 d0                	or     %edx,%eax
  40ecf1:	88 05 95 e3 00 00    	mov    %al,0xe395(%rip)        # 41d08c <_D5libos7console7Console8curColorh>
	}
  40ecf7:	c9                   	leaveq 
  40ecf8:	c3                   	retq   

000000000040ecf9 <_D5libos7console7Console6scrollFiZv>:

	void scroll(int amt)
  40ecf9:	55                   	push   %rbp
  40ecfa:	48 89 e5             	mov    %rsp,%rbp
  40ecfd:	48 83 ec 28          	sub    $0x28,%rsp
  40ed01:	89 7d dc             	mov    %edi,-0x24(%rbp)
	{
		// do nothing for invalid line count
		if (amt <= 0) { return; }
  40ed04:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  40ed08:	0f 8e 7f 01 00 00    	jle    40ee8d <_D5libos7console7Console6scrollFiZv+0x194>

		// just clear if it wants to scroll everything
		if (amt >= cInfo.yMax) { clear(); return; }
  40ed0e:	8b 05 50 08 01 00    	mov    0x10850(%rip),%eax        # 41f564 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x4>
  40ed14:	39 45 dc             	cmp    %eax,-0x24(%rbp)
  40ed17:	7c 0a                	jl     40ed23 <_D5libos7console7Console6scrollFiZv+0x2a>
  40ed19:	e8 c5 fe ff ff       	callq  40ebe3 <_D5libos7console7Console5clearFZv>
  40ed1e:	e9 6a 01 00 00       	jmpq   40ee8d <_D5libos7console7Console6scrollFiZv+0x194>

		// go through and copy the proper amount to increase
		// the lines on the screen
		int cury = 0;
  40ed23:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
		int offset1 = 0 * cInfo.xMax;
  40ed2a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
		int offset2 = amt * cInfo.xMax;
  40ed31:	8b 05 29 08 01 00    	mov    0x10829(%rip),%eax        # 41f560 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40ed37:	8b 55 dc             	mov    -0x24(%rbp),%edx
  40ed3a:	0f af c2             	imul   %edx,%eax
  40ed3d:	89 45 ec             	mov    %eax,-0x14(%rbp)

		for(; cury <= cInfo.yMax - amt; cury++)
  40ed40:	8b 05 1e 08 01 00    	mov    0x1081e(%rip),%eax        # 41f564 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x4>
  40ed46:	2b 45 dc             	sub    -0x24(%rbp),%eax
  40ed49:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  40ed4c:	0f 9e c0             	setle  %al
  40ed4f:	83 f0 01             	xor    $0x1,%eax
  40ed52:	84 c0                	test   %al,%al
  40ed54:	0f 85 9d 00 00 00    	jne    40edf7 <_D5libos7console7Console6scrollFiZv+0xfe>
		{
			for (int curx = 0; curx < cInfo.xMax; curx++)
  40ed5a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  40ed61:	8b 05 f9 07 01 00    	mov    0x107f9(%rip),%eax        # 41f560 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40ed67:	39 45 f8             	cmp    %eax,-0x8(%rbp)
  40ed6a:	0f 9c c0             	setl   %al
  40ed6d:	83 f0 01             	xor    $0x1,%eax
  40ed70:	84 c0                	test   %al,%al
  40ed72:	75 72                	jne    40ede6 <_D5libos7console7Console6scrollFiZv+0xed>
			{
				*(cInfo.buffer + (curx + offset1) * 2) =
  40ed74:	48 8b 15 fd 07 01 00 	mov    0x107fd(%rip),%rdx        # 41f578 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40ed7b:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40ed7e:	03 45 f8             	add    -0x8(%rbp),%eax
  40ed81:	01 c0                	add    %eax,%eax
  40ed83:	48 98                	cltq   
  40ed85:	48 01 c2             	add    %rax,%rdx
  40ed88:	48 8b 0d e9 07 01 00 	mov    0x107e9(%rip),%rcx        # 41f578 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40ed8f:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40ed92:	03 45 f8             	add    -0x8(%rbp),%eax
  40ed95:	03 45 ec             	add    -0x14(%rbp),%eax
  40ed98:	01 c0                	add    %eax,%eax
  40ed9a:	48 98                	cltq   
  40ed9c:	48 8d 04 01          	lea    (%rcx,%rax,1),%rax
  40eda0:	0f b6 00             	movzbl (%rax),%eax
  40eda3:	88 02                	mov    %al,(%rdx)
					*(cInfo.buffer + (curx + offset1 + offset2) * 2);
				*(cInfo.buffer + (curx + offset1) * 2 + 1) =
  40eda5:	48 8b 15 cc 07 01 00 	mov    0x107cc(%rip),%rdx        # 41f578 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40edac:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40edaf:	03 45 f8             	add    -0x8(%rbp),%eax
  40edb2:	01 c0                	add    %eax,%eax
  40edb4:	48 98                	cltq   
  40edb6:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40edba:	48 8d 48 01          	lea    0x1(%rax),%rcx
  40edbe:	48 8b 15 b3 07 01 00 	mov    0x107b3(%rip),%rdx        # 41f578 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40edc5:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40edc8:	03 45 f8             	add    -0x8(%rbp),%eax
  40edcb:	03 45 ec             	add    -0x14(%rbp),%eax
  40edce:	01 c0                	add    %eax,%eax
  40edd0:	48 98                	cltq   
  40edd2:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40edd6:	48 ff c0             	inc    %rax
  40edd9:	0f b6 00             	movzbl (%rax),%eax
  40eddc:	88 01                	mov    %al,(%rcx)
  40edde:	ff 45 f8             	incl   -0x8(%rbp)
  40ede1:	e9 7b ff ff ff       	jmpq   40ed61 <_D5libos7console7Console6scrollFiZv+0x68>
					*(cInfo.buffer + (curx + offset1 + offset2) * 2 + 1);
			}

			offset1 += cInfo.xMax;
  40ede6:	8b 05 74 07 01 00    	mov    0x10774(%rip),%eax        # 41f560 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40edec:	01 45 f0             	add    %eax,-0x10(%rbp)
  40edef:	ff 45 f4             	incl   -0xc(%rbp)
  40edf2:	e9 49 ff ff ff       	jmpq   40ed40 <_D5libos7console7Console6scrollFiZv+0x47>
		}

		for(; cury <= cInfo.yMax; cury++)
  40edf7:	8b 05 67 07 01 00    	mov    0x10767(%rip),%eax        # 41f564 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x4>
  40edfd:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  40ee00:	0f 9e c0             	setle  %al
  40ee03:	83 f0 01             	xor    $0x1,%eax
  40ee06:	84 c0                	test   %al,%al
  40ee08:	75 60                	jne    40ee6a <_D5libos7console7Console6scrollFiZv+0x171>
		{
			for (int curx = 0; curx < cInfo.xMax; curx++)
  40ee0a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40ee11:	8b 05 49 07 01 00    	mov    0x10749(%rip),%eax        # 41f560 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40ee17:	39 45 fc             	cmp    %eax,-0x4(%rbp)
  40ee1a:	0f 9c c0             	setl   %al
  40ee1d:	83 f0 01             	xor    $0x1,%eax
  40ee20:	84 c0                	test   %al,%al
  40ee22:	75 38                	jne    40ee5c <_D5libos7console7Console6scrollFiZv+0x163>
			{
				*(cInfo.buffer + (curx + offset1) * 2) = 0x00;
  40ee24:	48 8b 15 4d 07 01 00 	mov    0x1074d(%rip),%rdx        # 41f578 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40ee2b:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40ee2e:	03 45 fc             	add    -0x4(%rbp),%eax
  40ee31:	01 c0                	add    %eax,%eax
  40ee33:	48 98                	cltq   
  40ee35:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40ee39:	c6 00 00             	movb   $0x0,(%rax)
				*(cInfo.buffer + (curx + offset1) * 2 + 1) = 0x00;
  40ee3c:	48 8b 15 35 07 01 00 	mov    0x10735(%rip),%rdx        # 41f578 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40ee43:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40ee46:	03 45 fc             	add    -0x4(%rbp),%eax
  40ee49:	01 c0                	add    %eax,%eax
  40ee4b:	48 98                	cltq   
  40ee4d:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40ee51:	48 ff c0             	inc    %rax
  40ee54:	c6 00 00             	movb   $0x0,(%rax)
  40ee57:	ff 45 fc             	incl   -0x4(%rbp)
  40ee5a:	eb b5                	jmp    40ee11 <_D5libos7console7Console6scrollFiZv+0x118>
			}

			offset1 += cInfo.xMax;
  40ee5c:	8b 05 fe 06 01 00    	mov    0x106fe(%rip),%eax        # 41f560 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40ee62:	01 45 f0             	add    %eax,-0x10(%rbp)
  40ee65:	ff 45 f4             	incl   -0xc(%rbp)
  40ee68:	eb 8d                	jmp    40edf7 <_D5libos7console7Console6scrollFiZv+0xfe>
		}

		cInfo.yPos -= amt;
  40ee6a:	8b 05 fc 06 01 00    	mov    0x106fc(%rip),%eax        # 41f56c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40ee70:	2b 45 dc             	sub    -0x24(%rbp),%eax
  40ee73:	89 05 f3 06 01 00    	mov    %eax,0x106f3(%rip)        # 41f56c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>

		if (cInfo.yPos < 0)
  40ee79:	8b 05 ed 06 01 00    	mov    0x106ed(%rip),%eax        # 41f56c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40ee7f:	85 c0                	test   %eax,%eax
  40ee81:	79 0a                	jns    40ee8d <_D5libos7console7Console6scrollFiZv+0x194>
		{
			cInfo.yPos = 0;
  40ee83:	c7 05 df 06 01 00 00 	movl   $0x0,0x106df(%rip)        # 41f56c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40ee8a:	00 00 00 
		}
	}
  40ee8d:	c9                   	leaveq 
  40ee8e:	c3                   	retq   

000000000040ee8f <_D5libos7console7Console9putStringFAaZv>:

	ubyte curColor = Color.LightGray;


	// non-locked functions
	void putString(char[] str)
  40ee8f:	55                   	push   %rbp
  40ee90:	48 89 e5             	mov    %rsp,%rbp
  40ee93:	48 83 ec 30          	sub    $0x30,%rsp
  40ee97:	48 89 f8             	mov    %rdi,%rax
  40ee9a:	48 89 f2             	mov    %rsi,%rdx
  40ee9d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40eea1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{
		foreach(chr; str)
  40eea5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40eea9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40eead:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40eeb1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40eeb5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40eeb9:	48 03 45 d8          	add    -0x28(%rbp),%rax
  40eebd:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40eec1:	0f 95 c0             	setne  %al
  40eec4:	83 f0 01             	xor    $0x1,%eax
  40eec7:	84 c0                	test   %al,%al
  40eec9:	75 19                	jne    40eee4 <_D5libos7console7Console9putStringFAaZv+0x55>
  40eecb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40eecf:	0f b6 00             	movzbl (%rax),%eax
  40eed2:	88 45 ff             	mov    %al,-0x1(%rbp)
		{
			printChar(chr);
  40eed5:	0f b6 7d ff          	movzbl -0x1(%rbp),%edi
  40eed9:	e8 88 fd ff ff       	callq  40ec66 <_D5libos7console7Console9printCharFaZv>
  40eede:	48 ff 45 f0          	incq   -0x10(%rbp)
  40eee2:	eb d1                	jmp    40eeb5 <_D5libos7console7Console9putStringFAaZv+0x26>
		}
	}
  40eee4:	c9                   	leaveq 
  40eee5:	c3                   	retq   

000000000040eee6 <_D5libos7console7Console7putCharFaZv>:

	void putChar(char c)
  40eee6:	55                   	push   %rbp
  40eee7:	48 89 e5             	mov    %rsp,%rbp
  40eeea:	48 83 ec 08          	sub    $0x8,%rsp
  40eeee:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
	{
		if (c == '\n' || c == '\r')
  40eef2:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40eef6:	0f b6 c0             	movzbl %al,%eax
  40eef9:	83 f8 0a             	cmp    $0xa,%eax
  40eefc:	74 0c                	je     40ef0a <_D5libos7console7Console7putCharFaZv+0x24>
  40eefe:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40ef02:	0f b6 c0             	movzbl %al,%eax
  40ef05:	83 f8 0d             	cmp    $0xd,%eax
  40ef08:	75 11                	jne    40ef1b <_D5libos7console7Console7putCharFaZv+0x35>
		{
			// this will force a new line
			cInfo.xPos = cInfo.xMax;
  40ef0a:	8b 05 50 06 01 00    	mov    0x10650(%rip),%eax        # 41f560 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40ef10:	89 05 52 06 01 00    	mov    %eax,0x10652(%rip)        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
		}
	}

	void putChar(char c)
	{
		if (c == '\n' || c == '\r')
  40ef16:	e9 93 00 00 00       	jmpq   40efae <_D5libos7console7Console7putCharFaZv+0xc8>
		{
			// this will force a new line
			cInfo.xPos = cInfo.xMax;
		}
		else if (c == '\t')
  40ef1b:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40ef1f:	0f b6 c0             	movzbl %al,%eax
  40ef22:	83 f8 09             	cmp    $0x9,%eax
  40ef25:	75 11                	jne    40ef38 <_D5libos7console7Console7putCharFaZv+0x52>
		{
			// increment by the tab length
			cInfo.xPos += Tabstop;
  40ef27:	8b 05 3b 06 01 00    	mov    0x1063b(%rip),%eax        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40ef2d:	83 c0 04             	add    $0x4,%eax
  40ef30:	89 05 32 06 01 00    	mov    %eax,0x10632(%rip)        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40ef36:	eb 76                	jmp    40efae <_D5libos7console7Console7putCharFaZv+0xc8>
		}
		else
		{
			volatile *(cInfo.buffer + (cInfo.xPos + (cInfo.yPos * cInfo.xMax)) * 2) = c & 0xFF;
  40ef38:	48 8b 35 39 06 01 00 	mov    0x10639(%rip),%rsi        # 41f578 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40ef3f:	8b 0d 23 06 01 00    	mov    0x10623(%rip),%ecx        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40ef45:	8b 15 21 06 01 00    	mov    0x10621(%rip),%edx        # 41f56c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40ef4b:	8b 05 0f 06 01 00    	mov    0x1060f(%rip),%eax        # 41f560 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40ef51:	0f af c2             	imul   %edx,%eax
  40ef54:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  40ef57:	01 c0                	add    %eax,%eax
  40ef59:	48 98                	cltq   
  40ef5b:	48 8d 0c 06          	lea    (%rsi,%rax,1),%rcx
  40ef5f:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  40ef63:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  40ef68:	21 d0                	and    %edx,%eax
  40ef6a:	88 01                	mov    %al,(%rcx)
			volatile *(cInfo.buffer + (cInfo.xPos + (cInfo.yPos * cInfo.xMax)) * 2 + 1) = curColor;
  40ef6c:	48 8b 35 05 06 01 00 	mov    0x10605(%rip),%rsi        # 41f578 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40ef73:	8b 0d ef 05 01 00    	mov    0x105ef(%rip),%ecx        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40ef79:	8b 15 ed 05 01 00    	mov    0x105ed(%rip),%edx        # 41f56c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40ef7f:	8b 05 db 05 01 00    	mov    0x105db(%rip),%eax        # 41f560 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40ef85:	0f af c2             	imul   %edx,%eax
  40ef88:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  40ef8b:	01 c0                	add    %eax,%eax
  40ef8d:	48 98                	cltq   
  40ef8f:	48 8d 04 06          	lea    (%rsi,%rax,1),%rax
  40ef93:	48 8d 50 01          	lea    0x1(%rax),%rdx
  40ef97:	0f b6 05 ee e0 00 00 	movzbl 0xe0ee(%rip),%eax        # 41d08c <_D5libos7console7Console8curColorh>
  40ef9e:	88 02                	mov    %al,(%rdx)

			cInfo.xPos++;
  40efa0:	8b 05 c2 05 01 00    	mov    0x105c2(%rip),%eax        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40efa6:	ff c0                	inc    %eax
  40efa8:	89 05 ba 05 01 00    	mov    %eax,0x105ba(%rip)        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
		}

		if (cInfo.xPos >= cInfo.xMax)
  40efae:	8b 15 b4 05 01 00    	mov    0x105b4(%rip),%edx        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40efb4:	8b 05 a6 05 01 00    	mov    0x105a6(%rip),%eax        # 41f560 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40efba:	39 c2                	cmp    %eax,%edx
  40efbc:	7c 32                	jl     40eff0 <_D5libos7console7Console7putCharFaZv+0x10a>
		{
			cInfo.xPos = 0;
  40efbe:	c7 05 a0 05 01 00 00 	movl   $0x0,0x105a0(%rip)        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40efc5:	00 00 00 
			cInfo.yPos ++;
  40efc8:	8b 05 9e 05 01 00    	mov    0x1059e(%rip),%eax        # 41f56c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40efce:	ff c0                	inc    %eax
  40efd0:	89 05 96 05 01 00    	mov    %eax,0x10596(%rip)        # 41f56c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>

			if (cInfo.yPos >= cInfo.yMax)
  40efd6:	8b 15 90 05 01 00    	mov    0x10590(%rip),%edx        # 41f56c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40efdc:	8b 05 82 05 01 00    	mov    0x10582(%rip),%eax        # 41f564 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x4>
  40efe2:	39 c2                	cmp    %eax,%edx
  40efe4:	7c 0a                	jl     40eff0 <_D5libos7console7Console7putCharFaZv+0x10a>
			{
				scroll(1);
  40efe6:	bf 01 00 00 00       	mov    $0x1,%edi
  40efeb:	e8 09 fd ff ff       	callq  40ecf9 <_D5libos7console7Console6scrollFiZv>
			}
		}
	}
  40eff0:	c9                   	leaveq 
  40eff1:	c3                   	retq   
