
application/application:     file format elf64-x86-64

Disassembly of section .text:

0000000000400078 <_Dmain>:
(effectively, passing the kernel an input variable) and calls a system call (inbterrupt 128).
*/

import user.syscall;

void main()
  400078:	55                   	push   %rbp
  400079:	48 89 e5             	mov    %rsp,%rbp
{

 for (;;)
  40007c:	b8 00 00 00 00       	mov    $0x0,%eax
  400081:	84 c0                	test   %al,%al
  400083:	75 07                	jne    40008c <_Dmain+0x14>
 {
// exit(0);
  yield();
  400085:	e8 ee d5 00 00       	callq  40d678 <_D4user7syscall5yieldFZv>
  40008a:	eb f0                	jmp    40007c <_Dmain+0x4>
 }

 return;
  40008c:	b8 00 00 00 00       	mov    $0x0,%eax
}
  400091:	c9                   	leaveq 
  400092:	c3                   	retq   
  400093:	90                   	nop    

0000000000400094 <_D3std8typeinfo5ti_AC11TypeInfo_AC7getHashMFPvZm>:

// Object[]

class TypeInfo_AC : TypeInfo
{
    hash_t getHash(void *p)
  400094:	55                   	push   %rbp
  400095:	48 89 e5             	mov    %rsp,%rbp
  400098:	48 83 ec 50          	sub    $0x50,%rsp
  40009c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  4000a0:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  4000a4:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4000a8:	e8 ff 8d 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {	Object[] s = *cast(Object[]*)p;
  4000ad:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4000b1:	48 8b 02             	mov    (%rdx),%rax
  4000b4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4000b8:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4000bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	hash_t hash = 0;
  4000c0:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4000c7:	00 

	foreach (Object o; s)
  4000c8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4000cc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  4000d0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4000d4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4000d8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4000dc:	48 c1 e0 03          	shl    $0x3,%rax
  4000e0:	48 03 45 b8          	add    -0x48(%rbp),%rax
  4000e4:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4000e8:	0f 95 c0             	setne  %al
  4000eb:	83 f0 01             	xor    $0x1,%eax
  4000ee:	84 c0                	test   %al,%al
  4000f0:	75 31                	jne    400123 <_D3std8typeinfo5ti_AC11TypeInfo_AC7getHashMFPvZm+0x8f>
  4000f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4000f6:	48 8b 00             	mov    (%rax),%rax
  4000f9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	{
	    if (o)
  4000fd:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  400102:	74 18                	je     40011c <_D3std8typeinfo5ti_AC11TypeInfo_AC7getHashMFPvZm+0x88>
		hash += o.toHash();
  400104:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400108:	48 8b 00             	mov    (%rax),%rax
  40010b:	48 83 c0 10          	add    $0x10,%rax
  40010f:	48 8b 00             	mov    (%rax),%rax
  400112:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  400116:	ff d0                	callq  *%rax
  400118:	48 01 45 e8          	add    %rax,-0x18(%rbp)
    {	Object[] s = *cast(Object[]*)p;
	hash_t hash = 0;

	foreach (Object o; s)
	{
	    if (o)
  40011c:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
  400121:	eb b5                	jmp    4000d8 <_D3std8typeinfo5ti_AC11TypeInfo_AC7getHashMFPvZm+0x44>
		hash += o.toHash();
	}
	return hash;
  400123:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  400127:	c9                   	leaveq 
  400128:	c3                   	retq   

0000000000400129 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  400129:	55                   	push   %rbp
  40012a:	48 89 e5             	mov    %rsp,%rbp
  40012d:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  400134:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  400138:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  40013c:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  400140:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  400144:	e8 63 8d 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	Object[] s1 = *cast(Object[]*)p1;
  400149:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40014d:	48 8b 02             	mov    (%rdx),%rax
  400150:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  400154:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400158:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	Object[] s2 = *cast(Object[]*)p2;
  40015c:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  400160:	48 8b 02             	mov    (%rdx),%rax
  400163:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  400167:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40016b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

	if (s1.length == s2.length)
  40016f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  400173:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400177:	48 39 c2             	cmp    %rax,%rdx
  40017a:	0f 85 3d 01 00 00    	jne    4002bd <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x194>
	{
	    for (size_t u = 0; u < s1.length; u++)
  400180:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  400187:	00 
  400188:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40018c:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  400190:	0f 92 c0             	setb   %al
  400193:	83 f0 01             	xor    $0x1,%eax
  400196:	84 c0                	test   %al,%al
  400198:	0f 85 16 01 00 00    	jne    4002b4 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x18b>
	    {	Object o1 = s1[u];
  40019e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4001a2:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  4001a9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4001ad:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  4001b1:	73 0d                	jae    4001c0 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x97>
  4001b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4001b7:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  4001be:	eb 22                	jmp    4001e2 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0xb9>
  4001c0:	48 c7 45 c0 14 00 00 	movq   $0x14,-0x40(%rbp)
  4001c7:	00 
  4001c8:	48 c7 45 c8 00 f0 40 	movq   $0x40f000,-0x38(%rbp)
  4001cf:	00 
  4001d0:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4001d4:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4001d8:	ba 1b 00 00 00       	mov    $0x1b,%edx
  4001dd:	e8 93 a7 00 00       	callq  40a975 <_d_array_bounds>
  4001e2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  4001e9:	48 c1 e0 03          	shl    $0x3,%rax
  4001ed:	48 03 85 60 ff ff ff 	add    -0xa0(%rbp),%rax
  4001f4:	48 8b 00             	mov    (%rax),%rax
  4001f7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = s2[u];
  4001fb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4001ff:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  400206:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40020a:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40020e:	73 0d                	jae    40021d <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0xf4>
  400210:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400214:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  40021b:	eb 22                	jmp    40023f <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x116>
  40021d:	48 c7 45 d0 14 00 00 	movq   $0x14,-0x30(%rbp)
  400224:	00 
  400225:	48 c7 45 d8 00 f0 40 	movq   $0x40f000,-0x28(%rbp)
  40022c:	00 
  40022d:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  400231:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  400235:	ba 1c 00 00 00       	mov    $0x1c,%edx
  40023a:	e8 36 a7 00 00       	callq  40a975 <_d_array_bounds>
  40023f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  400246:	48 c1 e0 03          	shl    $0x3,%rax
  40024a:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  400251:	48 8b 00             	mov    (%rax),%rax
  400254:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		// Do not pass null's to Object.opEquals()
		if (o1 is o2 ||
  400258:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40025c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  400260:	74 49                	je     4002ab <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x182>
  400262:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  400267:	0f 94 c0             	sete   %al
  40026a:	83 f0 01             	xor    $0x1,%eax
  40026d:	83 f0 01             	xor    $0x1,%eax
  400270:	84 c0                	test   %al,%al
  400272:	75 2e                	jne    4002a2 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x179>
  400274:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  400279:	0f 94 c0             	sete   %al
  40027c:	83 f0 01             	xor    $0x1,%eax
  40027f:	83 f0 01             	xor    $0x1,%eax
  400282:	84 c0                	test   %al,%al
  400284:	75 1c                	jne    4002a2 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x179>
  400286:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40028a:	48 8b 00             	mov    (%rax),%rax
  40028d:	48 83 c0 20          	add    $0x20,%rax
  400291:	48 8b 00             	mov    (%rax),%rax
  400294:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  400298:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40029c:	ff d0                	callq  *%rax
  40029e:	85 c0                	test   %eax,%eax
  4002a0:	75 09                	jne    4002ab <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x182>
		    (!(o1 is null) && !(o2 is null) && o1.opEquals(o2)))
		    continue;
		return 0;
  4002a2:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  4002a9:	eb 19                	jmp    4002c4 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x19b>
  4002ab:	48 ff 45 e8          	incq   -0x18(%rbp)
  4002af:	e9 d4 fe ff ff       	jmpq   400188 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x5f>
	    }
	    return 1;
  4002b4:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  4002bb:	eb 07                	jmp    4002c4 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x19b>
	}
	return 0;
  4002bd:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  4002c4:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  4002c7:	c9                   	leaveq 
  4002c8:	c3                   	retq   

00000000004002c9 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4002c9:	55                   	push   %rbp
  4002ca:	48 89 e5             	mov    %rsp,%rbp
  4002cd:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  4002d4:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  4002d8:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  4002dc:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  4002e0:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  4002e4:	e8 c3 8b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	Object[] s1 = *cast(Object[]*)p1;
  4002e9:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4002ed:	48 8b 02             	mov    (%rdx),%rax
  4002f0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  4002f4:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4002f8:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	Object[] s2 = *cast(Object[]*)p2;
  4002fc:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  400300:	48 8b 02             	mov    (%rdx),%rax
  400303:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  400307:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40030b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	ptrdiff_t c;
  40030f:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  400316:	00 

	c = cast(ptrdiff_t)s1.length - cast(ptrdiff_t)s2.length;
  400317:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40031b:	48 89 c2             	mov    %rax,%rdx
  40031e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400322:	48 89 d1             	mov    %rdx,%rcx
  400325:	48 29 c1             	sub    %rax,%rcx
  400328:	48 89 c8             	mov    %rcx,%rax
  40032b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (c == 0)
  40032f:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  400334:	0f 85 36 01 00 00    	jne    400470 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1a7>
	{
	    for (size_t u = 0; u < s1.length; u++)
  40033a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  400341:	00 
  400342:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400346:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40034a:	0f 92 c0             	setb   %al
  40034d:	83 f0 01             	xor    $0x1,%eax
  400350:	84 c0                	test   %al,%al
  400352:	0f 85 18 01 00 00    	jne    400470 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1a7>
	    {	Object o1 = s1[u];
  400358:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40035c:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  400363:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400367:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40036b:	73 0d                	jae    40037a <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0xb1>
  40036d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  400371:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
  400378:	eb 22                	jmp    40039c <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0xd3>
  40037a:	48 c7 45 c0 14 00 00 	movq   $0x14,-0x40(%rbp)
  400381:	00 
  400382:	48 c7 45 c8 00 f0 40 	movq   $0x40f000,-0x38(%rbp)
  400389:	00 
  40038a:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40038e:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  400392:	ba 33 00 00 00       	mov    $0x33,%edx
  400397:	e8 d9 a5 00 00       	callq  40a975 <_d_array_bounds>
  40039c:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  4003a3:	48 c1 e0 03          	shl    $0x3,%rax
  4003a7:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  4003ae:	48 8b 00             	mov    (%rax),%rax
  4003b1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = s2[u];
  4003b5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4003b9:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4003c0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4003c4:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  4003c8:	73 0a                	jae    4003d4 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x10b>
  4003ca:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4003ce:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  4003d2:	eb 22                	jmp    4003f6 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x12d>
  4003d4:	48 c7 45 d0 14 00 00 	movq   $0x14,-0x30(%rbp)
  4003db:	00 
  4003dc:	48 c7 45 d8 00 f0 40 	movq   $0x40f000,-0x28(%rbp)
  4003e3:	00 
  4003e4:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4003e8:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4003ec:	ba 34 00 00 00       	mov    $0x34,%edx
  4003f1:	e8 7f a5 00 00       	callq  40a975 <_d_array_bounds>
  4003f6:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  4003fa:	48 c1 e0 03          	shl    $0x3,%rax
  4003fe:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  400405:	48 8b 00             	mov    (%rax),%rax
  400408:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		if (o1 is o2)
  40040c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400410:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  400414:	74 51                	je     400467 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x19e>
		    continue;

		// Regard null references as always being "less than"
		if (o1)
  400416:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40041b:	74 40                	je     40045d <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x194>
		{
		    if (!o2)
  40041d:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  400422:	0f 95 c0             	setne  %al
  400425:	83 f0 01             	xor    $0x1,%eax
  400428:	84 c0                	test   %al,%al
  40042a:	74 0a                	je     400436 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x16d>
		    {	c = 1;
  40042c:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  400433:	00 
			break;
  400434:	eb 3a                	jmp    400470 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1a7>
		    }
		    c = o1.opCmp(o2);
  400436:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40043a:	48 8b 00             	mov    (%rax),%rax
  40043d:	48 83 c0 18          	add    $0x18,%rax
  400441:	48 8b 00             	mov    (%rax),%rax
  400444:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  400448:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40044c:	ff d0                	callq  *%rax
  40044e:	48 98                	cltq   
  400450:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		    if (c)
  400454:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  400459:	75 15                	jne    400470 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1a7>
			break;
  40045b:	eb 0a                	jmp    400467 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x19e>
		}
		else
		{   c = -1;
  40045d:	48 c7 45 e0 ff ff ff 	movq   $0xffffffffffffffff,-0x20(%rbp)
  400464:	ff 
		    break;
  400465:	eb 09                	jmp    400470 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1a7>

		if (o1 is o2)
		    continue;

		// Regard null references as always being "less than"
		if (o1)
  400467:	48 ff 45 e8          	incq   -0x18(%rbp)
  40046b:	e9 d2 fe ff ff       	jmpq   400342 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x79>
		{   c = -1;
		    break;
		}
	    }
	}
	if (c < 0)
  400470:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  400475:	79 0a                	jns    400481 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1b8>
	    c = -1;
  400477:	48 c7 45 e0 ff ff ff 	movq   $0xffffffffffffffff,-0x20(%rbp)
  40047e:	ff 
  40047f:	eb 0f                	jmp    400490 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1c7>
	else if (c > 0)
  400481:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  400486:	7e 08                	jle    400490 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1c7>
	    c = 1;
  400488:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  40048f:	00 
	return c;
  400490:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    }
  400494:	c9                   	leaveq 
  400495:	c3                   	retq   

0000000000400496 <_D3std8typeinfo5ti_AC11TypeInfo_AC5tsizeMFZm>:

    size_t tsize()
  400496:	55                   	push   %rbp
  400497:	48 89 e5             	mov    %rsp,%rbp
  40049a:	48 83 ec 10          	sub    $0x10,%rsp
  40049e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4004a2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4004a6:	e8 01 8a 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (Object[]).sizeof;
  4004ab:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  4004b0:	c9                   	leaveq 
  4004b1:	c3                   	retq   

00000000004004b2 <_D3std8typeinfo5ti_AC11TypeInfo_AC5flagsMFZk>:

    uint flags()
  4004b2:	55                   	push   %rbp
  4004b3:	48 89 e5             	mov    %rsp,%rbp
  4004b6:	48 83 ec 10          	sub    $0x10,%rsp
  4004ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4004be:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4004c2:	e8 e5 89 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  4004c7:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  4004cc:	c9                   	leaveq 
  4004cd:	c3                   	retq   

00000000004004ce <_D3std8typeinfo5ti_AC11TypeInfo_AC4nextMFZC8TypeInfo>:

    TypeInfo next()
  4004ce:	55                   	push   %rbp
  4004cf:	48 89 e5             	mov    %rsp,%rbp
  4004d2:	48 83 ec 10          	sub    $0x10,%rsp
  4004d6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4004da:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4004de:	e8 c9 89 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(Object);
  4004e3:	48 c7 c0 10 98 41 00 	mov    $0x419810,%rax
    }
  4004ea:	c9                   	leaveq 
  4004eb:	c3                   	retq   

00000000004004ec <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar8toStringMFZAa>:

// cdouble[]

class TypeInfo_Ar : TypeInfo
{
    char[] toString() { return "cdouble[]"; }
  4004ec:	55                   	push   %rbp
  4004ed:	48 89 e5             	mov    %rsp,%rbp
  4004f0:	53                   	push   %rbx
  4004f1:	48 83 ec 08          	sub    $0x8,%rsp
  4004f5:	48 89 fb             	mov    %rdi,%rbx
  4004f8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4004fc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  400500:	e8 a7 89 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  400505:	48 c7 03 09 00 00 00 	movq   $0x9,(%rbx)
  40050c:	48 c7 43 08 c0 f0 40 	movq   $0x40f0c0,0x8(%rbx)
  400513:	00 
  400514:	48 89 d8             	mov    %rbx,%rax
  400517:	48 83 c4 08          	add    $0x8,%rsp
  40051b:	5b                   	pop    %rbx
  40051c:	c9                   	leaveq 
  40051d:	c3                   	retq   

000000000040051e <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7getHashMFPvZm>:

    hash_t getHash(void *p)
  40051e:	55                   	push   %rbp
  40051f:	48 89 e5             	mov    %rsp,%rbp
  400522:	48 83 ec 40          	sub    $0x40,%rsp
  400526:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40052a:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  40052e:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  400532:	e8 75 89 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {	cdouble[] s = *cast(cdouble[]*)p;
  400537:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40053b:	48 8b 02             	mov    (%rdx),%rax
  40053e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  400542:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400546:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  40054a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40054e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	cdouble *str = s.ptr;
  400552:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400556:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  40055a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  400561:	00 

	while (len)
  400562:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  400567:	0f 95 c0             	setne  %al
  40056a:	83 f0 01             	xor    $0x1,%eax
  40056d:	84 c0                	test   %al,%al
  40056f:	75 71                	jne    4005e2 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7getHashMFPvZm+0xc4>
	{
	    hash *= 9;
  400571:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  400575:	48 89 d0             	mov    %rdx,%rax
  400578:	48 c1 e0 03          	shl    $0x3,%rax
  40057c:	48 01 d0             	add    %rdx,%rax
  40057f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[0];
  400583:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400587:	b8 00 00 00 00       	mov    $0x0,%eax
  40058c:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  400590:	8b 00                	mov    (%rax),%eax
  400592:	89 c0                	mov    %eax,%eax
  400594:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[1];
  400598:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40059c:	b8 04 00 00 00       	mov    $0x4,%eax
  4005a1:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4005a5:	8b 00                	mov    (%rax),%eax
  4005a7:	89 c0                	mov    %eax,%eax
  4005a9:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[2];
  4005ad:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4005b1:	b8 08 00 00 00       	mov    $0x8,%eax
  4005b6:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4005ba:	8b 00                	mov    (%rax),%eax
  4005bc:	89 c0                	mov    %eax,%eax
  4005be:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[3];
  4005c2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4005c6:	b8 0c 00 00 00       	mov    $0xc,%eax
  4005cb:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4005cf:	8b 00                	mov    (%rax),%eax
  4005d1:	89 c0                	mov    %eax,%eax
  4005d3:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  4005d7:	48 83 45 f0 10       	addq   $0x10,-0x10(%rbp)
	    len--;
  4005dc:	48 ff 4d f8          	decq   -0x8(%rbp)
  4005e0:	eb 80                	jmp    400562 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7getHashMFPvZm+0x44>
	}

	return hash;
  4005e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  4005e6:	c9                   	leaveq 
  4005e7:	c3                   	retq   

00000000004005e8 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4005e8:	55                   	push   %rbp
  4005e9:	48 89 e5             	mov    %rsp,%rbp
  4005ec:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  4005f3:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  4005f7:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  4005fb:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  4005ff:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  400603:	e8 a4 88 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cdouble[] s1 = *cast(cdouble[]*)p1;
  400608:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40060c:	48 8b 02             	mov    (%rdx),%rax
  40060f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  400613:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400617:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	cdouble[] s2 = *cast(cdouble[]*)p2;
  40061b:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40061f:	48 8b 02             	mov    (%rdx),%rax
  400622:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  400626:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40062a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  40062e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400632:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  400636:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40063a:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40063e:	74 0f                	je     40064f <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x67>
	    return 0;
  400640:	c7 85 54 ff ff ff 00 	movl   $0x0,-0xac(%rbp)
  400647:	00 00 00 
  40064a:	e9 53 01 00 00       	jmpq   4007a2 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x1ba>
	for (size_t u = 0; u < len; u++)
  40064f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  400656:	00 
  400657:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40065b:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40065f:	0f 92 c0             	setb   %al
  400662:	83 f0 01             	xor    $0x1,%eax
  400665:	84 c0                	test   %al,%al
  400667:	0f 85 2b 01 00 00    	jne    400798 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x1b0>
	{
	    int c = TypeInfo_r._equals(s1[u], s2[u]);
  40066d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  400671:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  400678:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40067c:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  400680:	73 0d                	jae    40068f <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0xa7>
  400682:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400686:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40068d:	eb 22                	jmp    4006b1 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0xc9>
  40068f:	48 c7 45 c0 1a 00 00 	movq   $0x1a,-0x40(%rbp)
  400696:	00 
  400697:	48 c7 45 c8 ca f0 40 	movq   $0x40f0ca,-0x38(%rbp)
  40069e:	00 
  40069f:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4006a3:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4006a7:	ba 40 00 00 00       	mov    $0x40,%edx
  4006ac:	e8 c4 a2 00 00       	callq  40a975 <_d_array_bounds>
  4006b1:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4006b8:	48 c1 e0 04          	shl    $0x4,%rax
  4006bc:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  4006c3:	dd 00                	fldl   (%rax)
  4006c5:	dd 9d 70 ff ff ff    	fstpl  -0x90(%rbp)
  4006cb:	dd 40 08             	fldl   0x8(%rax)
  4006ce:	dd 9d 68 ff ff ff    	fstpl  -0x98(%rbp)
  4006d4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4006d8:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4006df:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4006e3:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4006e7:	73 0a                	jae    4006f3 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x10b>
  4006e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4006ed:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  4006f1:	eb 22                	jmp    400715 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x12d>
  4006f3:	48 c7 45 d0 1a 00 00 	movq   $0x1a,-0x30(%rbp)
  4006fa:	00 
  4006fb:	48 c7 45 d8 ca f0 40 	movq   $0x40f0ca,-0x28(%rbp)
  400702:	00 
  400703:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  400707:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40070b:	ba 40 00 00 00       	mov    $0x40,%edx
  400710:	e8 60 a2 00 00       	callq  40a975 <_d_array_bounds>
  400715:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  400719:	48 c1 e0 04          	shl    $0x4,%rax
  40071d:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  400724:	48 8b 10             	mov    (%rax),%rdx
  400727:	48 8b 40 08          	mov    0x8(%rax),%rax
  40072b:	48 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%rcx
  400732:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
  400739:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
  400740:	66 0f 12 95 48 ff ff 	movlpd -0xb8(%rbp),%xmm2
  400747:	ff 
  400748:	48 89 b5 48 ff ff ff 	mov    %rsi,-0xb8(%rbp)
  40074f:	66 0f 12 9d 48 ff ff 	movlpd -0xb8(%rbp),%xmm3
  400756:	ff 
  400757:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  40075e:	66 0f 12 85 48 ff ff 	movlpd -0xb8(%rbp),%xmm0
  400765:	ff 
  400766:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  40076d:	66 0f 12 8d 48 ff ff 	movlpd -0xb8(%rbp),%xmm1
  400774:	ff 
  400775:	e8 bc 34 00 00       	callq  403c36 <_D3std8typeinfo10ti_cdouble10TypeInfo_r7_equalsFrrZi>
  40077a:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  40077d:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  400781:	75 0c                	jne    40078f <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x1a7>
		return 0;
  400783:	c7 85 54 ff ff ff 00 	movl   $0x0,-0xac(%rbp)
  40078a:	00 00 00 
  40078d:	eb 13                	jmp    4007a2 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x1ba>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_r._equals(s1[u], s2[u]);
	    if (c == 0)
  40078f:	48 ff 45 f0          	incq   -0x10(%rbp)
  400793:	e9 bf fe ff ff       	jmpq   400657 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  400798:	c7 85 54 ff ff ff 01 	movl   $0x1,-0xac(%rbp)
  40079f:	00 00 00 
  4007a2:	8b 85 54 ff ff ff    	mov    -0xac(%rbp),%eax
    }
  4007a8:	c9                   	leaveq 
  4007a9:	c3                   	retq   

00000000004007aa <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4007aa:	55                   	push   %rbp
  4007ab:	48 89 e5             	mov    %rsp,%rbp
  4007ae:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  4007b5:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  4007b9:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  4007bd:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  4007c1:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  4007c5:	e8 e2 86 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cdouble[] s1 = *cast(cdouble[]*)p1;
  4007ca:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4007ce:	48 8b 02             	mov    (%rdx),%rax
  4007d1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  4007d5:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4007d9:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	cdouble[] s2 = *cast(cdouble[]*)p2;
  4007dd:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4007e1:	48 8b 02             	mov    (%rdx),%rax
  4007e4:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4007e8:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4007ec:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  4007f0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4007f4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  4007f8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4007fc:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  400800:	73 08                	jae    40080a <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x60>
	    len = s2.length;
  400802:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400806:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  40080a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  400811:	00 
  400812:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400816:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40081a:	0f 92 c0             	setb   %al
  40081d:	83 f0 01             	xor    $0x1,%eax
  400820:	84 c0                	test   %al,%al
  400822:	0f 85 2d 01 00 00    	jne    400955 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1ab>
	{
	    int c = TypeInfo_r._compare(s1[u], s2[u]);
  400828:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40082c:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  400833:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400837:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40083b:	73 0d                	jae    40084a <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0xa0>
  40083d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400841:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  400848:	eb 22                	jmp    40086c <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0xc2>
  40084a:	48 c7 45 c0 1a 00 00 	movq   $0x1a,-0x40(%rbp)
  400851:	00 
  400852:	48 c7 45 c8 ca f0 40 	movq   $0x40f0ca,-0x38(%rbp)
  400859:	00 
  40085a:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40085e:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  400862:	ba 51 00 00 00       	mov    $0x51,%edx
  400867:	e8 09 a1 00 00       	callq  40a975 <_d_array_bounds>
  40086c:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  400873:	48 c1 e0 04          	shl    $0x4,%rax
  400877:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  40087e:	dd 00                	fldl   (%rax)
  400880:	dd 9d 68 ff ff ff    	fstpl  -0x98(%rbp)
  400886:	dd 40 08             	fldl   0x8(%rax)
  400889:	dd 9d 60 ff ff ff    	fstpl  -0xa0(%rbp)
  40088f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  400893:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  40089a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40089e:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4008a2:	73 0d                	jae    4008b1 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x107>
  4008a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4008a8:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4008af:	eb 22                	jmp    4008d3 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x129>
  4008b1:	48 c7 45 d0 1a 00 00 	movq   $0x1a,-0x30(%rbp)
  4008b8:	00 
  4008b9:	48 c7 45 d8 ca f0 40 	movq   $0x40f0ca,-0x28(%rbp)
  4008c0:	00 
  4008c1:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4008c5:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4008c9:	ba 51 00 00 00       	mov    $0x51,%edx
  4008ce:	e8 a2 a0 00 00       	callq  40a975 <_d_array_bounds>
  4008d3:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4008da:	48 c1 e0 04          	shl    $0x4,%rax
  4008de:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  4008e5:	48 8b 10             	mov    (%rax),%rdx
  4008e8:	48 8b 40 08          	mov    0x8(%rax),%rax
  4008ec:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
  4008f3:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  4008fa:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
  400901:	66 0f 12 95 48 ff ff 	movlpd -0xb8(%rbp),%xmm2
  400908:	ff 
  400909:	48 89 b5 48 ff ff ff 	mov    %rsi,-0xb8(%rbp)
  400910:	66 0f 12 9d 48 ff ff 	movlpd -0xb8(%rbp),%xmm3
  400917:	ff 
  400918:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  40091f:	66 0f 12 85 48 ff ff 	movlpd -0xb8(%rbp),%xmm0
  400926:	ff 
  400927:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  40092e:	66 0f 12 8d 48 ff ff 	movlpd -0xb8(%rbp),%xmm1
  400935:	ff 
  400936:	e8 6c 33 00 00       	callq  403ca7 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi>
  40093b:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  40093e:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  400942:	74 08                	je     40094c <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1a2>
		return c;
  400944:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400947:	89 45 84             	mov    %eax,-0x7c(%rbp)
  40094a:	eb 3c                	jmp    400988 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1de>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_r._compare(s1[u], s2[u]);
	    if (c)
  40094c:	48 ff 45 f0          	incq   -0x10(%rbp)
  400950:	e9 bd fe ff ff       	jmpq   400812 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  400955:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  400959:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40095d:	48 39 c2             	cmp    %rax,%rdx
  400960:	73 09                	jae    40096b <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1c1>
	    return -1;
  400962:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  400969:	eb 1d                	jmp    400988 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1de>
	else if (s1.length > s2.length)
  40096b:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40096f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400973:	48 39 c2             	cmp    %rax,%rdx
  400976:	76 09                	jbe    400981 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1d7>
	    return 1;
  400978:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  40097f:	eb 07                	jmp    400988 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1de>
	return 0;
  400981:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  400988:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  40098b:	c9                   	leaveq 
  40098c:	c3                   	retq   

000000000040098d <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar5tsizeMFZm>:

    size_t tsize()
  40098d:	55                   	push   %rbp
  40098e:	48 89 e5             	mov    %rsp,%rbp
  400991:	48 83 ec 10          	sub    $0x10,%rsp
  400995:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400999:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40099d:	e8 0a 85 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cdouble[]).sizeof;
  4009a2:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  4009a7:	c9                   	leaveq 
  4009a8:	c3                   	retq   

00000000004009a9 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar5flagsMFZk>:

    uint flags()
  4009a9:	55                   	push   %rbp
  4009aa:	48 89 e5             	mov    %rsp,%rbp
  4009ad:	48 83 ec 10          	sub    $0x10,%rsp
  4009b1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4009b5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4009b9:	e8 ee 84 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  4009be:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  4009c3:	c9                   	leaveq 
  4009c4:	c3                   	retq   

00000000004009c5 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar4nextMFZC8TypeInfo>:

    TypeInfo next()
  4009c5:	55                   	push   %rbp
  4009c6:	48 89 e5             	mov    %rsp,%rbp
  4009c9:	48 83 ec 10          	sub    $0x10,%rsp
  4009cd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4009d1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4009d5:	e8 d2 84 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(cdouble);
  4009da:	48 c7 c0 f0 01 41 00 	mov    $0x4101f0,%rax
    }
  4009e1:	c9                   	leaveq 
  4009e2:	c3                   	retq   
  4009e3:	90                   	nop    

00000000004009e4 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq8toStringMFZAa>:

// cfloat[]

class TypeInfo_Aq : TypeInfo
{
    char[] toString() { return "cfloat[]"; }
  4009e4:	55                   	push   %rbp
  4009e5:	48 89 e5             	mov    %rsp,%rbp
  4009e8:	53                   	push   %rbx
  4009e9:	48 83 ec 08          	sub    $0x8,%rsp
  4009ed:	48 89 fb             	mov    %rdi,%rbx
  4009f0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4009f4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4009f8:	e8 af 84 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  4009fd:	48 c7 03 08 00 00 00 	movq   $0x8,(%rbx)
  400a04:	48 c7 43 08 a0 f1 40 	movq   $0x40f1a0,0x8(%rbx)
  400a0b:	00 
  400a0c:	48 89 d8             	mov    %rbx,%rax
  400a0f:	48 83 c4 08          	add    $0x8,%rsp
  400a13:	5b                   	pop    %rbx
  400a14:	c9                   	leaveq 
  400a15:	c3                   	retq   

0000000000400a16 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7getHashMFPvZm>:

    hash_t getHash(void *p)
  400a16:	55                   	push   %rbp
  400a17:	48 89 e5             	mov    %rsp,%rbp
  400a1a:	48 83 ec 40          	sub    $0x40,%rsp
  400a1e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  400a22:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  400a26:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  400a2a:	e8 7d 84 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {	cfloat[] s = *cast(cfloat[]*)p;
  400a2f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  400a33:	48 8b 02             	mov    (%rdx),%rax
  400a36:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  400a3a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400a3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  400a42:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  400a46:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	cfloat *str = s.ptr;
  400a4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400a4e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  400a52:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  400a59:	00 

	while (len)
  400a5a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  400a5f:	0f 95 c0             	setne  %al
  400a62:	83 f0 01             	xor    $0x1,%eax
  400a65:	84 c0                	test   %al,%al
  400a67:	75 47                	jne    400ab0 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7getHashMFPvZm+0x9a>
	{
	    hash *= 9;
  400a69:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  400a6d:	48 89 d0             	mov    %rdx,%rax
  400a70:	48 c1 e0 03          	shl    $0x3,%rax
  400a74:	48 01 d0             	add    %rdx,%rax
  400a77:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[0];
  400a7b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400a7f:	b8 00 00 00 00       	mov    $0x0,%eax
  400a84:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  400a88:	8b 00                	mov    (%rax),%eax
  400a8a:	89 c0                	mov    %eax,%eax
  400a8c:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[1];
  400a90:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400a94:	b8 04 00 00 00       	mov    $0x4,%eax
  400a99:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  400a9d:	8b 00                	mov    (%rax),%eax
  400a9f:	89 c0                	mov    %eax,%eax
  400aa1:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  400aa5:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
	    len--;
  400aaa:	48 ff 4d f8          	decq   -0x8(%rbp)
  400aae:	eb aa                	jmp    400a5a <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7getHashMFPvZm+0x44>
	}

	return hash;
  400ab0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  400ab4:	c9                   	leaveq 
  400ab5:	c3                   	retq   

0000000000400ab6 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  400ab6:	55                   	push   %rbp
  400ab7:	48 89 e5             	mov    %rsp,%rbp
  400aba:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  400ac1:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  400ac5:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  400ac9:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  400acd:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  400ad1:	e8 d6 83 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cfloat[] s1 = *cast(cfloat[]*)p1;
  400ad6:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  400ada:	48 8b 02             	mov    (%rdx),%rax
  400add:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  400ae1:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400ae5:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	cfloat[] s2 = *cast(cfloat[]*)p2;
  400ae9:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  400aed:	48 8b 02             	mov    (%rdx),%rax
  400af0:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  400af4:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400af8:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  400afc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400b00:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  400b04:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400b08:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  400b0c:	74 0f                	je     400b1d <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x67>
	    return 0;
  400b0e:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  400b15:	00 00 00 
  400b18:	e9 44 01 00 00       	jmpq   400c61 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x1ab>
	for (size_t u = 0; u < len; u++)
  400b1d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  400b24:	00 
  400b25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400b29:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  400b2d:	0f 92 c0             	setb   %al
  400b30:	83 f0 01             	xor    $0x1,%eax
  400b33:	84 c0                	test   %al,%al
  400b35:	0f 85 1c 01 00 00    	jne    400c57 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x1a1>
	{
	    int c = TypeInfo_q._equals(s1[u], s2[u]);
  400b3b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  400b3f:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  400b46:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400b4a:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  400b4e:	73 0d                	jae    400b5d <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0xa7>
  400b50:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400b54:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  400b5b:	eb 22                	jmp    400b7f <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0xc9>
  400b5d:	48 c7 45 c0 19 00 00 	movq   $0x19,-0x40(%rbp)
  400b64:	00 
  400b65:	48 c7 45 c8 a9 f1 40 	movq   $0x40f1a9,-0x38(%rbp)
  400b6c:	00 
  400b6d:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  400b71:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  400b75:	ba 3e 00 00 00       	mov    $0x3e,%edx
  400b7a:	e8 f6 9d 00 00       	callq  40a975 <_d_array_bounds>
  400b7f:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  400b86:	48 c1 e0 03          	shl    $0x3,%rax
  400b8a:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  400b91:	d9 00                	flds   (%rax)
  400b93:	d9 9d 64 ff ff ff    	fstps  -0x9c(%rbp)
  400b99:	d9 40 04             	flds   0x4(%rax)
  400b9c:	d9 9d 60 ff ff ff    	fstps  -0xa0(%rbp)
  400ba2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  400ba6:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  400bad:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400bb1:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  400bb5:	73 0d                	jae    400bc4 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x10e>
  400bb7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400bbb:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  400bc2:	eb 22                	jmp    400be6 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x130>
  400bc4:	48 c7 45 d0 19 00 00 	movq   $0x19,-0x30(%rbp)
  400bcb:	00 
  400bcc:	48 c7 45 d8 a9 f1 40 	movq   $0x40f1a9,-0x28(%rbp)
  400bd3:	00 
  400bd4:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  400bd8:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  400bdc:	ba 3e 00 00 00       	mov    $0x3e,%edx
  400be1:	e8 8f 9d 00 00       	callq  40a975 <_d_array_bounds>
  400be6:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  400bed:	48 c1 e0 03          	shl    $0x3,%rax
  400bf1:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  400bf8:	8b 08                	mov    (%rax),%ecx
  400bfa:	8b 70 04             	mov    0x4(%rax),%esi
  400bfd:	8b 85 64 ff ff ff    	mov    -0x9c(%rbp),%eax
  400c03:	8b 95 60 ff ff ff    	mov    -0xa0(%rbp),%edx
  400c09:	89 45 80             	mov    %eax,-0x80(%rbp)
  400c0c:	89 55 84             	mov    %edx,-0x7c(%rbp)
  400c0f:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  400c13:	89 c8                	mov    %ecx,%eax
  400c15:	89 f2                	mov    %esi,%edx
  400c17:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  400c1d:	89 95 7c ff ff ff    	mov    %edx,-0x84(%rbp)
  400c23:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  400c2a:	66 48 0f 6e cf       	movq   %rdi,%xmm1
  400c2f:	66 48 0f 6e c0       	movq   %rax,%xmm0
  400c34:	e8 3b 33 00 00       	callq  403f74 <_D3std8typeinfo9ti_cfloat10TypeInfo_q7_equalsFqqZi>
  400c39:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  400c3c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  400c40:	75 0c                	jne    400c4e <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x198>
		return 0;
  400c42:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  400c49:	00 00 00 
  400c4c:	eb 13                	jmp    400c61 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x1ab>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_q._equals(s1[u], s2[u]);
	    if (c == 0)
  400c4e:	48 ff 45 f0          	incq   -0x10(%rbp)
  400c52:	e9 ce fe ff ff       	jmpq   400b25 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  400c57:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  400c5e:	00 00 00 
  400c61:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
    }
  400c67:	c9                   	leaveq 
  400c68:	c3                   	retq   

0000000000400c69 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  400c69:	55                   	push   %rbp
  400c6a:	48 89 e5             	mov    %rsp,%rbp
  400c6d:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  400c74:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  400c78:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  400c7c:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  400c80:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  400c84:	e8 23 82 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cfloat[] s1 = *cast(cfloat[]*)p1;
  400c89:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  400c8d:	48 8b 02             	mov    (%rdx),%rax
  400c90:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  400c94:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400c98:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	cfloat[] s2 = *cast(cfloat[]*)p2;
  400c9c:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  400ca0:	48 8b 02             	mov    (%rdx),%rax
  400ca3:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  400ca7:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400cab:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  400caf:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400cb3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  400cb7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400cbb:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  400cbf:	73 08                	jae    400cc9 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x60>
	    len = s2.length;
  400cc1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400cc5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  400cc9:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  400cd0:	00 
  400cd1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400cd5:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  400cd9:	0f 92 c0             	setb   %al
  400cdc:	83 f0 01             	xor    $0x1,%eax
  400cdf:	84 c0                	test   %al,%al
  400ce1:	0f 85 1b 01 00 00    	jne    400e02 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x199>
	{
	    int c = TypeInfo_q._compare(s1[u], s2[u]);
  400ce7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  400ceb:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  400cf2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400cf6:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  400cfa:	73 0d                	jae    400d09 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0xa0>
  400cfc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400d00:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  400d07:	eb 22                	jmp    400d2b <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0xc2>
  400d09:	48 c7 45 c0 19 00 00 	movq   $0x19,-0x40(%rbp)
  400d10:	00 
  400d11:	48 c7 45 c8 a9 f1 40 	movq   $0x40f1a9,-0x38(%rbp)
  400d18:	00 
  400d19:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  400d1d:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  400d21:	ba 4f 00 00 00       	mov    $0x4f,%edx
  400d26:	e8 4a 9c 00 00       	callq  40a975 <_d_array_bounds>
  400d2b:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  400d32:	48 c1 e0 03          	shl    $0x3,%rax
  400d36:	48 03 85 48 ff ff ff 	add    -0xb8(%rbp),%rax
  400d3d:	d9 00                	flds   (%rax)
  400d3f:	d9 9d 5c ff ff ff    	fstps  -0xa4(%rbp)
  400d45:	d9 40 04             	flds   0x4(%rax)
  400d48:	d9 9d 58 ff ff ff    	fstps  -0xa8(%rbp)
  400d4e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  400d52:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  400d59:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400d5d:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  400d61:	73 0d                	jae    400d70 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x107>
  400d63:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400d67:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  400d6e:	eb 22                	jmp    400d92 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x129>
  400d70:	48 c7 45 d0 19 00 00 	movq   $0x19,-0x30(%rbp)
  400d77:	00 
  400d78:	48 c7 45 d8 a9 f1 40 	movq   $0x40f1a9,-0x28(%rbp)
  400d7f:	00 
  400d80:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  400d84:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  400d88:	ba 4f 00 00 00       	mov    $0x4f,%edx
  400d8d:	e8 e3 9b 00 00       	callq  40a975 <_d_array_bounds>
  400d92:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  400d99:	48 c1 e0 03          	shl    $0x3,%rax
  400d9d:	48 03 85 60 ff ff ff 	add    -0xa0(%rbp),%rax
  400da4:	8b 08                	mov    (%rax),%ecx
  400da6:	8b 70 04             	mov    0x4(%rax),%esi
  400da9:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  400daf:	8b 95 58 ff ff ff    	mov    -0xa8(%rbp),%edx
  400db5:	89 45 80             	mov    %eax,-0x80(%rbp)
  400db8:	89 55 84             	mov    %edx,-0x7c(%rbp)
  400dbb:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  400dbf:	89 c8                	mov    %ecx,%eax
  400dc1:	89 f2                	mov    %esi,%edx
  400dc3:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  400dc9:	89 95 7c ff ff ff    	mov    %edx,-0x84(%rbp)
  400dcf:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  400dd6:	66 48 0f 6e cf       	movq   %rdi,%xmm1
  400ddb:	66 48 0f 6e c0       	movq   %rax,%xmm0
  400de0:	e8 d9 31 00 00       	callq  403fbe <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi>
  400de5:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  400de8:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  400dec:	74 0b                	je     400df9 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x190>
		return c;
  400dee:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400df1:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
  400df7:	eb 45                	jmp    400e3e <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x1d5>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_q._compare(s1[u], s2[u]);
	    if (c)
  400df9:	48 ff 45 f0          	incq   -0x10(%rbp)
  400dfd:	e9 cf fe ff ff       	jmpq   400cd1 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  400e02:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  400e06:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400e0a:	48 39 c2             	cmp    %rax,%rdx
  400e0d:	73 0c                	jae    400e1b <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x1b2>
	    return -1;
  400e0f:	c7 85 74 ff ff ff ff 	movl   $0xffffffff,-0x8c(%rbp)
  400e16:	ff ff ff 
  400e19:	eb 23                	jmp    400e3e <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x1d5>
	else if (s1.length > s2.length)
  400e1b:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  400e1f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400e23:	48 39 c2             	cmp    %rax,%rdx
  400e26:	76 0c                	jbe    400e34 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x1cb>
	    return 1;
  400e28:	c7 85 74 ff ff ff 01 	movl   $0x1,-0x8c(%rbp)
  400e2f:	00 00 00 
  400e32:	eb 0a                	jmp    400e3e <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x1d5>
	return 0;
  400e34:	c7 85 74 ff ff ff 00 	movl   $0x0,-0x8c(%rbp)
  400e3b:	00 00 00 
  400e3e:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
    }
  400e44:	c9                   	leaveq 
  400e45:	c3                   	retq   

0000000000400e46 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq5tsizeMFZm>:

    size_t tsize()
  400e46:	55                   	push   %rbp
  400e47:	48 89 e5             	mov    %rsp,%rbp
  400e4a:	48 83 ec 10          	sub    $0x10,%rsp
  400e4e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400e52:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  400e56:	e8 51 80 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cfloat[]).sizeof;
  400e5b:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  400e60:	c9                   	leaveq 
  400e61:	c3                   	retq   

0000000000400e62 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq5flagsMFZk>:

    uint flags()
  400e62:	55                   	push   %rbp
  400e63:	48 89 e5             	mov    %rsp,%rbp
  400e66:	48 83 ec 10          	sub    $0x10,%rsp
  400e6a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400e6e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  400e72:	e8 35 80 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  400e77:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  400e7c:	c9                   	leaveq 
  400e7d:	c3                   	retq   

0000000000400e7e <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq4nextMFZC8TypeInfo>:

    TypeInfo next()
  400e7e:	55                   	push   %rbp
  400e7f:	48 89 e5             	mov    %rsp,%rbp
  400e82:	48 83 ec 10          	sub    $0x10,%rsp
  400e86:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400e8a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  400e8e:	e8 19 80 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(cfloat);
  400e93:	48 c7 c0 b0 02 41 00 	mov    $0x4102b0,%rax
    }
  400e9a:	c9                   	leaveq 
  400e9b:	c3                   	retq   

0000000000400e9c <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac8toStringMFZAa>:

// creal[]

class TypeInfo_Ac : TypeInfo
{
    char[] toString() { return "creal[]"; }
  400e9c:	55                   	push   %rbp
  400e9d:	48 89 e5             	mov    %rsp,%rbp
  400ea0:	53                   	push   %rbx
  400ea1:	48 83 ec 08          	sub    $0x8,%rsp
  400ea5:	48 89 fb             	mov    %rdi,%rbx
  400ea8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  400eac:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  400eb0:	e8 f7 7f 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  400eb5:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  400ebc:	48 c7 43 08 80 f2 40 	movq   $0x40f280,0x8(%rbx)
  400ec3:	00 
  400ec4:	48 89 d8             	mov    %rbx,%rax
  400ec7:	48 83 c4 08          	add    $0x8,%rsp
  400ecb:	5b                   	pop    %rbx
  400ecc:	c9                   	leaveq 
  400ecd:	c3                   	retq   

0000000000400ece <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7getHashMFPvZm>:

    hash_t getHash(void *p)
  400ece:	55                   	push   %rbp
  400ecf:	48 89 e5             	mov    %rsp,%rbp
  400ed2:	48 83 ec 40          	sub    $0x40,%rsp
  400ed6:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  400eda:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  400ede:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  400ee2:	e8 c5 7f 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {	creal[] s = *cast(creal[]*)p;
  400ee7:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  400eeb:	48 8b 02             	mov    (%rdx),%rax
  400eee:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  400ef2:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400ef6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  400efa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  400efe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	creal *str = s.ptr;
  400f02:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400f06:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  400f0a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  400f11:	00 

	while (len)
  400f12:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  400f17:	0f 95 c0             	setne  %al
  400f1a:	83 f0 01             	xor    $0x1,%eax
  400f1d:	84 c0                	test   %al,%al
  400f1f:	0f 85 89 00 00 00    	jne    400fae <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7getHashMFPvZm+0xe0>
	{
	    hash *= 9;
  400f25:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  400f29:	48 89 d0             	mov    %rdx,%rax
  400f2c:	48 c1 e0 03          	shl    $0x3,%rax
  400f30:	48 01 d0             	add    %rdx,%rax
  400f33:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[0];
  400f37:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400f3b:	b8 00 00 00 00       	mov    $0x0,%eax
  400f40:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  400f44:	8b 00                	mov    (%rax),%eax
  400f46:	89 c0                	mov    %eax,%eax
  400f48:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[1];
  400f4c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400f50:	b8 04 00 00 00       	mov    $0x4,%eax
  400f55:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  400f59:	8b 00                	mov    (%rax),%eax
  400f5b:	89 c0                	mov    %eax,%eax
  400f5d:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[2];
  400f61:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400f65:	b8 08 00 00 00       	mov    $0x8,%eax
  400f6a:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  400f6e:	8b 00                	mov    (%rax),%eax
  400f70:	89 c0                	mov    %eax,%eax
  400f72:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[3];
  400f76:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400f7a:	b8 0c 00 00 00       	mov    $0xc,%eax
  400f7f:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  400f83:	8b 00                	mov    (%rax),%eax
  400f85:	89 c0                	mov    %eax,%eax
  400f87:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[4];
  400f8b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400f8f:	b8 10 00 00 00       	mov    $0x10,%eax
  400f94:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  400f98:	8b 00                	mov    (%rax),%eax
  400f9a:	89 c0                	mov    %eax,%eax
  400f9c:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  400fa0:	48 83 45 f0 20       	addq   $0x20,-0x10(%rbp)
	    len--;
  400fa5:	48 ff 4d f8          	decq   -0x8(%rbp)
  400fa9:	e9 64 ff ff ff       	jmpq   400f12 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7getHashMFPvZm+0x44>
	}

	return hash;
  400fae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  400fb2:	c9                   	leaveq 
  400fb3:	c3                   	retq   

0000000000400fb4 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  400fb4:	55                   	push   %rbp
  400fb5:	48 89 e5             	mov    %rsp,%rbp
  400fb8:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  400fbf:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  400fc3:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  400fc7:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  400fcb:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  400fcf:	e8 d8 7e 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	creal[] s1 = *cast(creal[]*)p1;
  400fd4:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  400fd8:	48 8b 02             	mov    (%rdx),%rax
  400fdb:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  400fdf:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400fe3:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	creal[] s2 = *cast(creal[]*)p2;
  400fe7:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  400feb:	48 8b 02             	mov    (%rdx),%rax
  400fee:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  400ff2:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400ff6:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  400ffa:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400ffe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  401002:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401006:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40100a:	74 0f                	je     40101b <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x67>
	    return 0;
  40100c:	c7 85 3c ff ff ff 00 	movl   $0x0,-0xc4(%rbp)
  401013:	00 00 00 
  401016:	e9 34 01 00 00       	jmpq   40114f <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x19b>
	for (size_t u = 0; u < len; u++)
  40101b:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  401022:	00 
  401023:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401027:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40102b:	0f 92 c0             	setb   %al
  40102e:	83 f0 01             	xor    $0x1,%eax
  401031:	84 c0                	test   %al,%al
  401033:	0f 85 0c 01 00 00    	jne    401145 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x191>
	{
	    int c = TypeInfo_c._equals(s1[u], s2[u]);
  401039:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40103d:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  401044:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401048:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40104c:	73 0d                	jae    40105b <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0xa7>
  40104e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401052:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  401059:	eb 22                	jmp    40107d <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0xc9>
  40105b:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  401062:	00 
  401063:	48 c7 45 c8 88 f2 40 	movq   $0x40f288,-0x38(%rbp)
  40106a:	00 
  40106b:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40106f:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  401073:	ba 41 00 00 00       	mov    $0x41,%edx
  401078:	e8 f8 98 00 00       	callq  40a975 <_d_array_bounds>
  40107d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  401084:	48 c1 e0 05          	shl    $0x5,%rax
  401088:	48 03 85 40 ff ff ff 	add    -0xc0(%rbp),%rax
  40108f:	db 28                	fldt   (%rax)
  401091:	db bd 60 ff ff ff    	fstpt  -0xa0(%rbp)
  401097:	db 68 10             	fldt   0x10(%rax)
  40109a:	db bd 50 ff ff ff    	fstpt  -0xb0(%rbp)
  4010a0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4010a4:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4010ab:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4010af:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4010b3:	73 0a                	jae    4010bf <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x10b>
  4010b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4010b9:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  4010bd:	eb 22                	jmp    4010e1 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x12d>
  4010bf:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  4010c6:	00 
  4010c7:	48 c7 45 d8 88 f2 40 	movq   $0x40f288,-0x28(%rbp)
  4010ce:	00 
  4010cf:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4010d3:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4010d7:	ba 41 00 00 00       	mov    $0x41,%edx
  4010dc:	e8 94 98 00 00       	callq  40a975 <_d_array_bounds>
  4010e1:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  4010e5:	48 c1 e0 05          	shl    $0x5,%rax
  4010e9:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  4010f0:	48 8b 10             	mov    (%rax),%rdx
  4010f3:	8b 48 08             	mov    0x8(%rax),%ecx
  4010f6:	48 8b 70 10          	mov    0x10(%rax),%rsi
  4010fa:	8b 78 18             	mov    0x18(%rax),%edi
  4010fd:	db ad 60 ff ff ff    	fldt   -0xa0(%rbp)
  401103:	db 7c 24 20          	fstpt  0x20(%rsp)
  401107:	db ad 50 ff ff ff    	fldt   -0xb0(%rbp)
  40110d:	db 7c 24 30          	fstpt  0x30(%rsp)
  401111:	48 89 14 24          	mov    %rdx,(%rsp)
  401115:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
  401119:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  40111e:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  401122:	e8 bc 32 00 00       	callq  4043e3 <_D3std8typeinfo8ti_creal10TypeInfo_c7_equalsFccZi>
  401127:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  40112a:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40112e:	75 0c                	jne    40113c <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x188>
		return 0;
  401130:	c7 85 3c ff ff ff 00 	movl   $0x0,-0xc4(%rbp)
  401137:	00 00 00 
  40113a:	eb 13                	jmp    40114f <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x19b>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_c._equals(s1[u], s2[u]);
	    if (c == 0)
  40113c:	48 ff 45 f0          	incq   -0x10(%rbp)
  401140:	e9 de fe ff ff       	jmpq   401023 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  401145:	c7 85 3c ff ff ff 01 	movl   $0x1,-0xc4(%rbp)
  40114c:	00 00 00 
  40114f:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
    }
  401155:	c9                   	leaveq 
  401156:	c3                   	retq   

0000000000401157 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  401157:	55                   	push   %rbp
  401158:	48 89 e5             	mov    %rsp,%rbp
  40115b:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
  401162:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  401166:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  40116a:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40116e:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  401172:	e8 35 7d 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	creal[] s1 = *cast(creal[]*)p1;
  401177:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40117b:	48 8b 02             	mov    (%rdx),%rax
  40117e:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  401182:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401186:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	creal[] s2 = *cast(creal[]*)p2;
  40118a:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40118e:	48 8b 02             	mov    (%rdx),%rax
  401191:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  401195:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401199:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  40119d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4011a1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  4011a5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4011a9:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4011ad:	73 08                	jae    4011b7 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x60>
	    len = s2.length;
  4011af:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4011b3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  4011b7:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4011be:	00 
  4011bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4011c3:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4011c7:	0f 92 c0             	setb   %al
  4011ca:	83 f0 01             	xor    $0x1,%eax
  4011cd:	84 c0                	test   %al,%al
  4011cf:	0f 85 0e 01 00 00    	jne    4012e3 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x18c>
	{
	    int c = TypeInfo_c._compare(s1[u], s2[u]);
  4011d5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4011d9:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  4011e0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4011e4:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4011e8:	73 0d                	jae    4011f7 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0xa0>
  4011ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4011ee:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  4011f5:	eb 22                	jmp    401219 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0xc2>
  4011f7:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  4011fe:	00 
  4011ff:	48 c7 45 c8 88 f2 40 	movq   $0x40f288,-0x38(%rbp)
  401206:	00 
  401207:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40120b:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40120f:	ba 52 00 00 00       	mov    $0x52,%edx
  401214:	e8 5c 97 00 00       	callq  40a975 <_d_array_bounds>
  401219:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  401220:	48 c1 e0 05          	shl    $0x5,%rax
  401224:	48 03 85 40 ff ff ff 	add    -0xc0(%rbp),%rax
  40122b:	db 28                	fldt   (%rax)
  40122d:	db bd 60 ff ff ff    	fstpt  -0xa0(%rbp)
  401233:	db 68 10             	fldt   0x10(%rax)
  401236:	db bd 50 ff ff ff    	fstpt  -0xb0(%rbp)
  40123c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401240:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  401247:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40124b:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40124f:	73 0d                	jae    40125e <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x107>
  401251:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401255:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  40125c:	eb 22                	jmp    401280 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x129>
  40125e:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  401265:	00 
  401266:	48 c7 45 d8 88 f2 40 	movq   $0x40f288,-0x28(%rbp)
  40126d:	00 
  40126e:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  401272:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  401276:	ba 52 00 00 00       	mov    $0x52,%edx
  40127b:	e8 f5 96 00 00       	callq  40a975 <_d_array_bounds>
  401280:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  401287:	48 c1 e0 05          	shl    $0x5,%rax
  40128b:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  401292:	48 8b 10             	mov    (%rax),%rdx
  401295:	8b 48 08             	mov    0x8(%rax),%ecx
  401298:	48 8b 70 10          	mov    0x10(%rax),%rsi
  40129c:	8b 78 18             	mov    0x18(%rax),%edi
  40129f:	db ad 60 ff ff ff    	fldt   -0xa0(%rbp)
  4012a5:	db 7c 24 20          	fstpt  0x20(%rsp)
  4012a9:	db ad 50 ff ff ff    	fldt   -0xb0(%rbp)
  4012af:	db 7c 24 30          	fstpt  0x30(%rsp)
  4012b3:	48 89 14 24          	mov    %rdx,(%rsp)
  4012b7:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
  4012bb:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  4012c0:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  4012c4:	e8 4b 31 00 00       	callq  404414 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi>
  4012c9:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  4012cc:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  4012d0:	74 08                	je     4012da <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x183>
		return c;
  4012d2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4012d5:	89 45 84             	mov    %eax,-0x7c(%rbp)
  4012d8:	eb 3c                	jmp    401316 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x1bf>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_c._compare(s1[u], s2[u]);
	    if (c)
  4012da:	48 ff 45 f0          	incq   -0x10(%rbp)
  4012de:	e9 dc fe ff ff       	jmpq   4011bf <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  4012e3:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4012e7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4012eb:	48 39 c2             	cmp    %rax,%rdx
  4012ee:	73 09                	jae    4012f9 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x1a2>
	    return -1;
  4012f0:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  4012f7:	eb 1d                	jmp    401316 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x1bf>
	else if (s1.length > s2.length)
  4012f9:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4012fd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401301:	48 39 c2             	cmp    %rax,%rdx
  401304:	76 09                	jbe    40130f <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x1b8>
	    return 1;
  401306:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  40130d:	eb 07                	jmp    401316 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x1bf>
	return 0;
  40130f:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  401316:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  401319:	c9                   	leaveq 
  40131a:	c3                   	retq   

000000000040131b <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac5tsizeMFZm>:

    size_t tsize()
  40131b:	55                   	push   %rbp
  40131c:	48 89 e5             	mov    %rsp,%rbp
  40131f:	48 83 ec 10          	sub    $0x10,%rsp
  401323:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401327:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40132b:	e8 7c 7b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (creal[]).sizeof;
  401330:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  401335:	c9                   	leaveq 
  401336:	c3                   	retq   

0000000000401337 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac5flagsMFZk>:

    uint flags()
  401337:	55                   	push   %rbp
  401338:	48 89 e5             	mov    %rsp,%rbp
  40133b:	48 83 ec 10          	sub    $0x10,%rsp
  40133f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401343:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401347:	e8 60 7b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  40134c:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  401351:	c9                   	leaveq 
  401352:	c3                   	retq   

0000000000401353 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac4nextMFZC8TypeInfo>:

    TypeInfo next()
  401353:	55                   	push   %rbp
  401354:	48 89 e5             	mov    %rsp,%rbp
  401357:	48 83 ec 10          	sub    $0x10,%rsp
  40135b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40135f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401363:	e8 44 7b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(creal);
  401368:	48 c7 c0 30 04 41 00 	mov    $0x410430,%rax
    }
  40136f:	c9                   	leaveq 
  401370:	c3                   	retq   
  401371:	90                   	nop    
  401372:	90                   	nop    
  401373:	90                   	nop    

0000000000401374 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad8toStringMFZAa>:

// double[]

class TypeInfo_Ad : TypeInfo
{
    char[] toString() { return "double[]"; }
  401374:	55                   	push   %rbp
  401375:	48 89 e5             	mov    %rsp,%rbp
  401378:	53                   	push   %rbx
  401379:	48 83 ec 08          	sub    $0x8,%rsp
  40137d:	48 89 fb             	mov    %rdi,%rbx
  401380:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  401384:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  401388:	e8 1f 7b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  40138d:	48 c7 03 08 00 00 00 	movq   $0x8,(%rbx)
  401394:	48 c7 43 08 60 f3 40 	movq   $0x40f360,0x8(%rbx)
  40139b:	00 
  40139c:	48 89 d8             	mov    %rbx,%rax
  40139f:	48 83 c4 08          	add    $0x8,%rsp
  4013a3:	5b                   	pop    %rbx
  4013a4:	c9                   	leaveq 
  4013a5:	c3                   	retq   

00000000004013a6 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7getHashMFPvZm>:

    hash_t getHash(void *p)
  4013a6:	55                   	push   %rbp
  4013a7:	48 89 e5             	mov    %rsp,%rbp
  4013aa:	48 83 ec 40          	sub    $0x40,%rsp
  4013ae:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  4013b2:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  4013b6:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4013ba:	e8 ed 7a 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {	double[] s = *cast(double[]*)p;
  4013bf:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4013c3:	48 8b 02             	mov    (%rdx),%rax
  4013c6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4013ca:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4013ce:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  4013d2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4013d6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto str = s.ptr;
  4013da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4013de:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  4013e2:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4013e9:	00 

	while (len)
  4013ea:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4013ef:	0f 95 c0             	setne  %al
  4013f2:	83 f0 01             	xor    $0x1,%eax
  4013f5:	84 c0                	test   %al,%al
  4013f7:	75 47                	jne    401440 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7getHashMFPvZm+0x9a>
	{
	    hash *= 9;
  4013f9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4013fd:	48 89 d0             	mov    %rdx,%rax
  401400:	48 c1 e0 03          	shl    $0x3,%rax
  401404:	48 01 d0             	add    %rdx,%rax
  401407:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[0];
  40140b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40140f:	b8 00 00 00 00       	mov    $0x0,%eax
  401414:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  401418:	8b 00                	mov    (%rax),%eax
  40141a:	89 c0                	mov    %eax,%eax
  40141c:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[1];
  401420:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  401424:	b8 04 00 00 00       	mov    $0x4,%eax
  401429:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40142d:	8b 00                	mov    (%rax),%eax
  40142f:	89 c0                	mov    %eax,%eax
  401431:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  401435:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
	    len--;
  40143a:	48 ff 4d f8          	decq   -0x8(%rbp)
  40143e:	eb aa                	jmp    4013ea <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7getHashMFPvZm+0x44>
	}

	return hash;
  401440:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  401444:	c9                   	leaveq 
  401445:	c3                   	retq   

0000000000401446 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  401446:	55                   	push   %rbp
  401447:	48 89 e5             	mov    %rsp,%rbp
  40144a:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  401451:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  401455:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  401459:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40145d:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  401461:	e8 46 7a 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	double[] s1 = *cast(double[]*)p1;
  401466:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40146a:	48 8b 02             	mov    (%rdx),%rax
  40146d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  401471:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401475:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	double[] s2 = *cast(double[]*)p2;
  401479:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40147d:	48 8b 02             	mov    (%rdx),%rax
  401480:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  401484:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401488:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  40148c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401490:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  401494:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401498:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40149c:	74 0f                	je     4014ad <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x67>
	    return 0;
  40149e:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
  4014a5:	00 00 00 
  4014a8:	e9 13 01 00 00       	jmpq   4015c0 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x17a>
	for (size_t u = 0; u < len; u++)
  4014ad:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4014b4:	00 
  4014b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4014b9:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4014bd:	0f 92 c0             	setb   %al
  4014c0:	83 f0 01             	xor    $0x1,%eax
  4014c3:	84 c0                	test   %al,%al
  4014c5:	0f 85 eb 00 00 00    	jne    4015b6 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x170>
	{
	    int c = TypeInfo_d._equals(s1[u], s2[u]);
  4014cb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4014cf:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  4014d6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4014da:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4014de:	73 0d                	jae    4014ed <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0xa7>
  4014e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4014e4:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  4014eb:	eb 22                	jmp    40150f <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0xc9>
  4014ed:	48 c7 45 c0 19 00 00 	movq   $0x19,-0x40(%rbp)
  4014f4:	00 
  4014f5:	48 c7 45 c8 69 f3 40 	movq   $0x40f369,-0x38(%rbp)
  4014fc:	00 
  4014fd:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  401501:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  401505:	ba 3e 00 00 00       	mov    $0x3e,%edx
  40150a:	e8 66 94 00 00       	callq  40a975 <_d_array_bounds>
  40150f:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  401516:	48 c1 e0 03          	shl    $0x3,%rax
  40151a:	48 03 85 60 ff ff ff 	add    -0xa0(%rbp),%rax
  401521:	dd 00                	fldl   (%rax)
  401523:	dd 9d 70 ff ff ff    	fstpl  -0x90(%rbp)
  401529:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40152d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  401534:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401538:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40153c:	73 0a                	jae    401548 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x102>
  40153e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401542:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  401546:	eb 22                	jmp    40156a <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x124>
  401548:	48 c7 45 d0 19 00 00 	movq   $0x19,-0x30(%rbp)
  40154f:	00 
  401550:	48 c7 45 d8 69 f3 40 	movq   $0x40f369,-0x28(%rbp)
  401557:	00 
  401558:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40155c:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  401560:	ba 3e 00 00 00       	mov    $0x3e,%edx
  401565:	e8 0b 94 00 00       	callq  40a975 <_d_array_bounds>
  40156a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40156e:	48 c1 e0 03          	shl    $0x3,%rax
  401572:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  401579:	48 8b 00             	mov    (%rax),%rax
  40157c:	66 0f 12 8d 70 ff ff 	movlpd -0x90(%rbp),%xmm1
  401583:	ff 
  401584:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  40158b:	66 0f 12 85 48 ff ff 	movlpd -0xb8(%rbp),%xmm0
  401592:	ff 
  401593:	e8 04 34 00 00       	callq  40499c <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi>
  401598:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  40159b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40159f:	75 0c                	jne    4015ad <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x167>
		return 0;
  4015a1:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
  4015a8:	00 00 00 
  4015ab:	eb 13                	jmp    4015c0 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x17a>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_d._equals(s1[u], s2[u]);
	    if (c == 0)
  4015ad:	48 ff 45 f0          	incq   -0x10(%rbp)
  4015b1:	e9 ff fe ff ff       	jmpq   4014b5 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  4015b6:	c7 85 5c ff ff ff 01 	movl   $0x1,-0xa4(%rbp)
  4015bd:	00 00 00 
  4015c0:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
    }
  4015c6:	c9                   	leaveq 
  4015c7:	c3                   	retq   

00000000004015c8 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4015c8:	55                   	push   %rbp
  4015c9:	48 89 e5             	mov    %rsp,%rbp
  4015cc:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  4015d3:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  4015d7:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  4015db:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  4015df:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  4015e3:	e8 c4 78 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	double[] s1 = *cast(double[]*)p1;
  4015e8:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4015ec:	48 8b 02             	mov    (%rdx),%rax
  4015ef:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  4015f3:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4015f7:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	double[] s2 = *cast(double[]*)p2;
  4015fb:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4015ff:	48 8b 02             	mov    (%rdx),%rax
  401602:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  401606:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40160a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  40160e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401612:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  401616:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40161a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40161e:	73 08                	jae    401628 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x60>
	    len = s2.length;
  401620:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401624:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  401628:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40162f:	00 
  401630:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401634:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  401638:	0f 92 c0             	setb   %al
  40163b:	83 f0 01             	xor    $0x1,%eax
  40163e:	84 c0                	test   %al,%al
  401640:	0f 85 ed 00 00 00    	jne    401733 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x16b>
	{
	    int c = TypeInfo_d._compare(s1[u], s2[u]);
  401646:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40164a:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  401651:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401655:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401659:	73 0d                	jae    401668 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0xa0>
  40165b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40165f:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  401666:	eb 22                	jmp    40168a <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0xc2>
  401668:	48 c7 45 c0 19 00 00 	movq   $0x19,-0x40(%rbp)
  40166f:	00 
  401670:	48 c7 45 c8 69 f3 40 	movq   $0x40f369,-0x38(%rbp)
  401677:	00 
  401678:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40167c:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  401680:	ba 4f 00 00 00       	mov    $0x4f,%edx
  401685:	e8 eb 92 00 00       	callq  40a975 <_d_array_bounds>
  40168a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  401691:	48 c1 e0 03          	shl    $0x3,%rax
  401695:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  40169c:	dd 00                	fldl   (%rax)
  40169e:	dd 9d 68 ff ff ff    	fstpl  -0x98(%rbp)
  4016a4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4016a8:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  4016af:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4016b3:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4016b7:	73 0d                	jae    4016c6 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0xfe>
  4016b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4016bd:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4016c4:	eb 22                	jmp    4016e8 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x120>
  4016c6:	48 c7 45 d0 19 00 00 	movq   $0x19,-0x30(%rbp)
  4016cd:	00 
  4016ce:	48 c7 45 d8 69 f3 40 	movq   $0x40f369,-0x28(%rbp)
  4016d5:	00 
  4016d6:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4016da:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4016de:	ba 4f 00 00 00       	mov    $0x4f,%edx
  4016e3:	e8 8d 92 00 00       	callq  40a975 <_d_array_bounds>
  4016e8:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4016ef:	48 c1 e0 03          	shl    $0x3,%rax
  4016f3:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  4016fa:	48 8b 00             	mov    (%rax),%rax
  4016fd:	66 0f 12 8d 68 ff ff 	movlpd -0x98(%rbp),%xmm1
  401704:	ff 
  401705:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  40170c:	66 0f 12 85 48 ff ff 	movlpd -0xb8(%rbp),%xmm0
  401713:	ff 
  401714:	e8 d1 32 00 00       	callq  4049ea <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi>
  401719:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  40171c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  401720:	74 08                	je     40172a <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x162>
		return c;
  401722:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401725:	89 45 84             	mov    %eax,-0x7c(%rbp)
  401728:	eb 3c                	jmp    401766 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x19e>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_d._compare(s1[u], s2[u]);
	    if (c)
  40172a:	48 ff 45 f0          	incq   -0x10(%rbp)
  40172e:	e9 fd fe ff ff       	jmpq   401630 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  401733:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  401737:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40173b:	48 39 c2             	cmp    %rax,%rdx
  40173e:	73 09                	jae    401749 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x181>
	    return -1;
  401740:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  401747:	eb 1d                	jmp    401766 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x19e>
	else if (s1.length > s2.length)
  401749:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40174d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401751:	48 39 c2             	cmp    %rax,%rdx
  401754:	76 09                	jbe    40175f <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x197>
	    return 1;
  401756:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  40175d:	eb 07                	jmp    401766 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x19e>
	return 0;
  40175f:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  401766:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  401769:	c9                   	leaveq 
  40176a:	c3                   	retq   

000000000040176b <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad5tsizeMFZm>:

    size_t tsize()
  40176b:	55                   	push   %rbp
  40176c:	48 89 e5             	mov    %rsp,%rbp
  40176f:	48 83 ec 10          	sub    $0x10,%rsp
  401773:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401777:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40177b:	e8 2c 77 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (double[]).sizeof;
  401780:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  401785:	c9                   	leaveq 
  401786:	c3                   	retq   

0000000000401787 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad5flagsMFZk>:

    uint flags()
  401787:	55                   	push   %rbp
  401788:	48 89 e5             	mov    %rsp,%rbp
  40178b:	48 83 ec 10          	sub    $0x10,%rsp
  40178f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401793:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401797:	e8 10 77 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  40179c:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  4017a1:	c9                   	leaveq 
  4017a2:	c3                   	retq   

00000000004017a3 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad4nextMFZC8TypeInfo>:

    TypeInfo next()
  4017a3:	55                   	push   %rbp
  4017a4:	48 89 e5             	mov    %rsp,%rbp
  4017a7:	48 83 ec 10          	sub    $0x10,%rsp
  4017ab:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4017af:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4017b3:	e8 f4 76 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(double);
  4017b8:	48 c7 c0 50 06 41 00 	mov    $0x410650,%rax
    }
  4017bf:	c9                   	leaveq 
  4017c0:	c3                   	retq   

00000000004017c1 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ap8toStringMFZAa>:

// idouble[]

class TypeInfo_Ap : TypeInfo_Ad
{
    char[] toString() { return "idouble[]"; }
  4017c1:	55                   	push   %rbp
  4017c2:	48 89 e5             	mov    %rsp,%rbp
  4017c5:	53                   	push   %rbx
  4017c6:	48 83 ec 08          	sub    $0x8,%rsp
  4017ca:	48 89 fb             	mov    %rdi,%rbx
  4017cd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4017d1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4017d5:	e8 d2 76 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  4017da:	48 c7 03 09 00 00 00 	movq   $0x9,(%rbx)
  4017e1:	48 c7 43 08 30 f4 40 	movq   $0x40f430,0x8(%rbx)
  4017e8:	00 
  4017e9:	48 89 d8             	mov    %rbx,%rax
  4017ec:	48 83 c4 08          	add    $0x8,%rsp
  4017f0:	5b                   	pop    %rbx
  4017f1:	c9                   	leaveq 
  4017f2:	c3                   	retq   

00000000004017f3 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ap4nextMFZC8TypeInfo>:

    TypeInfo next()
  4017f3:	55                   	push   %rbp
  4017f4:	48 89 e5             	mov    %rsp,%rbp
  4017f7:	48 83 ec 10          	sub    $0x10,%rsp
  4017fb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4017ff:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401803:	e8 a4 76 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(idouble);
  401808:	48 c7 c0 d0 07 41 00 	mov    $0x4107d0,%rax
    }
  40180f:	c9                   	leaveq 
  401810:	c3                   	retq   
  401811:	90                   	nop    
  401812:	90                   	nop    
  401813:	90                   	nop    

0000000000401814 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af8toStringMFZAa>:

// float[]

class TypeInfo_Af : TypeInfo
{
    char[] toString() { return "float[]"; }
  401814:	55                   	push   %rbp
  401815:	48 89 e5             	mov    %rsp,%rbp
  401818:	53                   	push   %rbx
  401819:	48 83 ec 08          	sub    $0x8,%rsp
  40181d:	48 89 fb             	mov    %rdi,%rbx
  401820:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  401824:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  401828:	e8 7f 76 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  40182d:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  401834:	48 c7 43 08 e0 f4 40 	movq   $0x40f4e0,0x8(%rbx)
  40183b:	00 
  40183c:	48 89 d8             	mov    %rbx,%rax
  40183f:	48 83 c4 08          	add    $0x8,%rsp
  401843:	5b                   	pop    %rbx
  401844:	c9                   	leaveq 
  401845:	c3                   	retq   

0000000000401846 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7getHashMFPvZm>:

    hash_t getHash(void *p)
  401846:	55                   	push   %rbp
  401847:	48 89 e5             	mov    %rsp,%rbp
  40184a:	48 83 ec 40          	sub    $0x40,%rsp
  40184e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  401852:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  401856:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  40185a:	e8 4d 76 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {	float[] s = *cast(float[]*)p;
  40185f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  401863:	48 8b 02             	mov    (%rdx),%rax
  401866:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40186a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40186e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  401872:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  401876:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto str = s.ptr;
  40187a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40187e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  401882:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  401889:	00 

	while (len)
  40188a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40188f:	0f 95 c0             	setne  %al
  401892:	83 f0 01             	xor    $0x1,%eax
  401895:	84 c0                	test   %al,%al
  401897:	75 29                	jne    4018c2 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7getHashMFPvZm+0x7c>
	{
	    hash *= 9;
  401899:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40189d:	48 89 d0             	mov    %rdx,%rax
  4018a0:	48 c1 e0 03          	shl    $0x3,%rax
  4018a4:	48 01 d0             	add    %rdx,%rax
  4018a7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += *cast(uint *)str;
  4018ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4018af:	8b 00                	mov    (%rax),%eax
  4018b1:	89 c0                	mov    %eax,%eax
  4018b3:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  4018b7:	48 83 45 f0 04       	addq   $0x4,-0x10(%rbp)
	    len--;
  4018bc:	48 ff 4d f8          	decq   -0x8(%rbp)
  4018c0:	eb c8                	jmp    40188a <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7getHashMFPvZm+0x44>
	}

	return hash;
  4018c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  4018c6:	c9                   	leaveq 
  4018c7:	c3                   	retq   

00000000004018c8 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4018c8:	55                   	push   %rbp
  4018c9:	48 89 e5             	mov    %rsp,%rbp
  4018cc:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  4018d3:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  4018d7:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  4018db:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  4018df:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  4018e3:	e8 c4 75 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	float[] s1 = *cast(float[]*)p1;
  4018e8:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4018ec:	48 8b 02             	mov    (%rdx),%rax
  4018ef:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  4018f3:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4018f7:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	float[] s2 = *cast(float[]*)p2;
  4018fb:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4018ff:	48 8b 02             	mov    (%rdx),%rax
  401902:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  401906:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40190a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  40190e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401912:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  401916:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40191a:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40191e:	74 0f                	je     40192f <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x67>
	    return 0;
  401920:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
  401927:	00 00 00 
  40192a:	e9 11 01 00 00       	jmpq   401a40 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x178>
	for (size_t u = 0; u < len; u++)
  40192f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  401936:	00 
  401937:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40193b:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40193f:	0f 92 c0             	setb   %al
  401942:	83 f0 01             	xor    $0x1,%eax
  401945:	84 c0                	test   %al,%al
  401947:	0f 85 e9 00 00 00    	jne    401a36 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x16e>
	{
	    int c = TypeInfo_f._equals(s1[u], s2[u]);
  40194d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401951:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  401958:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40195c:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401960:	73 0d                	jae    40196f <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0xa7>
  401962:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401966:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  40196d:	eb 22                	jmp    401991 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0xc9>
  40196f:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  401976:	00 
  401977:	48 c7 45 c8 e8 f4 40 	movq   $0x40f4e8,-0x38(%rbp)
  40197e:	00 
  40197f:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  401983:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  401987:	ba 3d 00 00 00       	mov    $0x3d,%edx
  40198c:	e8 e4 8f 00 00       	callq  40a975 <_d_array_bounds>
  401991:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  401998:	48 c1 e0 02          	shl    $0x2,%rax
  40199c:	48 03 85 60 ff ff ff 	add    -0xa0(%rbp),%rax
  4019a3:	d9 00                	flds   (%rax)
  4019a5:	d9 9d 74 ff ff ff    	fstps  -0x8c(%rbp)
  4019ab:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4019af:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4019b6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4019ba:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4019be:	73 0a                	jae    4019ca <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x102>
  4019c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4019c4:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  4019c8:	eb 22                	jmp    4019ec <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x124>
  4019ca:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  4019d1:	00 
  4019d2:	48 c7 45 d8 e8 f4 40 	movq   $0x40f4e8,-0x28(%rbp)
  4019d9:	00 
  4019da:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4019de:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4019e2:	ba 3d 00 00 00       	mov    $0x3d,%edx
  4019e7:	e8 89 8f 00 00       	callq  40a975 <_d_array_bounds>
  4019ec:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  4019f0:	48 c1 e0 02          	shl    $0x2,%rax
  4019f4:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  4019fb:	8b 00                	mov    (%rax),%eax
  4019fd:	f3 0f 10 8d 74 ff ff 	movss  -0x8c(%rbp),%xmm1
  401a04:	ff 
  401a05:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  401a0b:	f3 0f 10 85 4c ff ff 	movss  -0xb4(%rbp),%xmm0
  401a12:	ff 
  401a13:	e8 15 32 00 00       	callq  404c2d <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi>
  401a18:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  401a1b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  401a1f:	75 0c                	jne    401a2d <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x165>
		return 0;
  401a21:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
  401a28:	00 00 00 
  401a2b:	eb 13                	jmp    401a40 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x178>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_f._equals(s1[u], s2[u]);
	    if (c == 0)
  401a2d:	48 ff 45 f0          	incq   -0x10(%rbp)
  401a31:	e9 01 ff ff ff       	jmpq   401937 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  401a36:	c7 85 5c ff ff ff 01 	movl   $0x1,-0xa4(%rbp)
  401a3d:	00 00 00 
  401a40:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
    }
  401a46:	c9                   	leaveq 
  401a47:	c3                   	retq   

0000000000401a48 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  401a48:	55                   	push   %rbp
  401a49:	48 89 e5             	mov    %rsp,%rbp
  401a4c:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  401a53:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  401a57:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  401a5b:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  401a5f:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  401a63:	e8 44 74 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	float[] s1 = *cast(float[]*)p1;
  401a68:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  401a6c:	48 8b 02             	mov    (%rdx),%rax
  401a6f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  401a73:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401a77:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	float[] s2 = *cast(float[]*)p2;
  401a7b:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  401a7f:	48 8b 02             	mov    (%rdx),%rax
  401a82:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  401a86:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401a8a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  401a8e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401a92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  401a96:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401a9a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  401a9e:	73 08                	jae    401aa8 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x60>
	    len = s2.length;
  401aa0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401aa4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  401aa8:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  401aaf:	00 
  401ab0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401ab4:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  401ab8:	0f 92 c0             	setb   %al
  401abb:	83 f0 01             	xor    $0x1,%eax
  401abe:	84 c0                	test   %al,%al
  401ac0:	0f 85 eb 00 00 00    	jne    401bb1 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x169>
	{
	    int c = TypeInfo_f._compare(s1[u], s2[u]);
  401ac6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401aca:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  401ad1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401ad5:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401ad9:	73 0d                	jae    401ae8 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0xa0>
  401adb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401adf:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  401ae6:	eb 22                	jmp    401b0a <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0xc2>
  401ae8:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  401aef:	00 
  401af0:	48 c7 45 c8 e8 f4 40 	movq   $0x40f4e8,-0x38(%rbp)
  401af7:	00 
  401af8:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  401afc:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  401b00:	ba 4e 00 00 00       	mov    $0x4e,%edx
  401b05:	e8 6b 8e 00 00       	callq  40a975 <_d_array_bounds>
  401b0a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  401b11:	48 c1 e0 02          	shl    $0x2,%rax
  401b15:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  401b1c:	d9 00                	flds   (%rax)
  401b1e:	d9 9d 6c ff ff ff    	fstps  -0x94(%rbp)
  401b24:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401b28:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  401b2f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401b33:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401b37:	73 0d                	jae    401b46 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0xfe>
  401b39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401b3d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  401b44:	eb 22                	jmp    401b68 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x120>
  401b46:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  401b4d:	00 
  401b4e:	48 c7 45 d8 e8 f4 40 	movq   $0x40f4e8,-0x28(%rbp)
  401b55:	00 
  401b56:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  401b5a:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  401b5e:	ba 4e 00 00 00       	mov    $0x4e,%edx
  401b63:	e8 0d 8e 00 00       	callq  40a975 <_d_array_bounds>
  401b68:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  401b6f:	48 c1 e0 02          	shl    $0x2,%rax
  401b73:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  401b7a:	8b 00                	mov    (%rax),%eax
  401b7c:	f3 0f 10 8d 6c ff ff 	movss  -0x94(%rbp),%xmm1
  401b83:	ff 
  401b84:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  401b8a:	f3 0f 10 85 4c ff ff 	movss  -0xb4(%rbp),%xmm0
  401b91:	ff 
  401b92:	e8 e3 30 00 00       	callq  404c7a <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi>
  401b97:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  401b9a:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  401b9e:	74 08                	je     401ba8 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x160>
		return c;
  401ba0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401ba3:	89 45 84             	mov    %eax,-0x7c(%rbp)
  401ba6:	eb 3c                	jmp    401be4 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x19c>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_f._compare(s1[u], s2[u]);
	    if (c)
  401ba8:	48 ff 45 f0          	incq   -0x10(%rbp)
  401bac:	e9 ff fe ff ff       	jmpq   401ab0 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  401bb1:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  401bb5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401bb9:	48 39 c2             	cmp    %rax,%rdx
  401bbc:	73 09                	jae    401bc7 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x17f>
	    return -1;
  401bbe:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  401bc5:	eb 1d                	jmp    401be4 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x19c>
	else if (s1.length > s2.length)
  401bc7:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  401bcb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401bcf:	48 39 c2             	cmp    %rax,%rdx
  401bd2:	76 09                	jbe    401bdd <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x195>
	    return 1;
  401bd4:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  401bdb:	eb 07                	jmp    401be4 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x19c>
	return 0;
  401bdd:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  401be4:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  401be7:	c9                   	leaveq 
  401be8:	c3                   	retq   

0000000000401be9 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af5tsizeMFZm>:

    size_t tsize()
  401be9:	55                   	push   %rbp
  401bea:	48 89 e5             	mov    %rsp,%rbp
  401bed:	48 83 ec 10          	sub    $0x10,%rsp
  401bf1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401bf5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401bf9:	e8 ae 72 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (float[]).sizeof;
  401bfe:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  401c03:	c9                   	leaveq 
  401c04:	c3                   	retq   

0000000000401c05 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af5flagsMFZk>:

    uint flags()
  401c05:	55                   	push   %rbp
  401c06:	48 89 e5             	mov    %rsp,%rbp
  401c09:	48 83 ec 10          	sub    $0x10,%rsp
  401c0d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401c11:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401c15:	e8 92 72 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  401c1a:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  401c1f:	c9                   	leaveq 
  401c20:	c3                   	retq   

0000000000401c21 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af4nextMFZC8TypeInfo>:

    TypeInfo next()
  401c21:	55                   	push   %rbp
  401c22:	48 89 e5             	mov    %rsp,%rbp
  401c25:	48 83 ec 10          	sub    $0x10,%rsp
  401c29:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401c2d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401c31:	e8 76 72 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(float);
  401c36:	48 c7 c0 10 07 41 00 	mov    $0x410710,%rax
    }
  401c3d:	c9                   	leaveq 
  401c3e:	c3                   	retq   

0000000000401c3f <_D3std8typeinfo9ti_Afloat11TypeInfo_Ao8toStringMFZAa>:

// ifloat[]

class TypeInfo_Ao : TypeInfo_Af
{
    char[] toString() { return "ifloat[]"; }
  401c3f:	55                   	push   %rbp
  401c40:	48 89 e5             	mov    %rsp,%rbp
  401c43:	53                   	push   %rbx
  401c44:	48 83 ec 08          	sub    $0x8,%rsp
  401c48:	48 89 fb             	mov    %rdi,%rbx
  401c4b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  401c4f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  401c53:	e8 54 72 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  401c58:	48 c7 03 08 00 00 00 	movq   $0x8,(%rbx)
  401c5f:	48 c7 43 08 b0 f5 40 	movq   $0x40f5b0,0x8(%rbx)
  401c66:	00 
  401c67:	48 89 d8             	mov    %rbx,%rax
  401c6a:	48 83 c4 08          	add    $0x8,%rsp
  401c6e:	5b                   	pop    %rbx
  401c6f:	c9                   	leaveq 
  401c70:	c3                   	retq   

0000000000401c71 <_D3std8typeinfo9ti_Afloat11TypeInfo_Ao4nextMFZC8TypeInfo>:

    TypeInfo next()
  401c71:	55                   	push   %rbp
  401c72:	48 89 e5             	mov    %rsp,%rbp
  401c75:	48 83 ec 10          	sub    $0x10,%rsp
  401c79:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401c7d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401c81:	e8 26 72 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(ifloat);
  401c86:	48 c7 c0 90 08 41 00 	mov    $0x410890,%rax
    }
  401c8d:	c9                   	leaveq 
  401c8e:	c3                   	retq   
  401c8f:	90                   	nop    

0000000000401c90 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag8toStringMFZAa>:
import kernel.core.system;
// byte[]

class TypeInfo_Ag : TypeInfo
{
    char[] toString() { return "byte[]"; }
  401c90:	55                   	push   %rbp
  401c91:	48 89 e5             	mov    %rsp,%rbp
  401c94:	53                   	push   %rbx
  401c95:	48 83 ec 08          	sub    $0x8,%rsp
  401c99:	48 89 fb             	mov    %rdi,%rbx
  401c9c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  401ca0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  401ca4:	e8 03 72 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  401ca9:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  401cb0:	48 c7 43 08 60 f6 40 	movq   $0x40f660,0x8(%rbx)
  401cb7:	00 
  401cb8:	48 89 d8             	mov    %rbx,%rax
  401cbb:	48 83 c4 08          	add    $0x8,%rsp
  401cbf:	5b                   	pop    %rbx
  401cc0:	c9                   	leaveq 
  401cc1:	c3                   	retq   

0000000000401cc2 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm>:

    hash_t getHash(void *p)
  401cc2:	55                   	push   %rbp
  401cc3:	48 89 e5             	mov    %rsp,%rbp
  401cc6:	48 83 ec 50          	sub    $0x50,%rsp
  401cca:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  401cce:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  401cd2:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  401cd6:	e8 d1 71 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {	byte[] s = *cast(byte[]*)p;
  401cdb:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  401cdf:	48 8b 02             	mov    (%rdx),%rax
  401ce2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  401ce6:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401cea:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  401cee:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  401cf2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	byte *str = s.ptr;
  401cf6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  401cfa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  401cfe:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  401d05:	00 

	while (1)
  401d06:	b8 00 00 00 00       	mov    $0x0,%eax
  401d0b:	84 c0                	test   %al,%al
  401d0d:	0f 85 01 01 00 00    	jne    401e14 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x152>
		default:
		    hash *= 9;
		    hash += *cast(uint *)str;
		    str += 4;
		    len -= 4;
		    break;
  401d13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401d17:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  401d1b:	48 83 7d b0 01       	cmpq   $0x1,-0x50(%rbp)
  401d20:	74 27                	je     401d49 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x87>
  401d22:	48 83 7d b0 01       	cmpq   $0x1,-0x50(%rbp)
  401d27:	72 13                	jb     401d3c <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x7a>
  401d29:	48 83 7d b0 02       	cmpq   $0x2,-0x50(%rbp)
  401d2e:	74 46                	je     401d76 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0xb4>
  401d30:	48 83 7d b0 03       	cmpq   $0x3,-0x50(%rbp)
  401d35:	74 69                	je     401da0 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0xde>
  401d37:	e9 ab 00 00 00       	jmpq   401de7 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x125>
	while (1)
	{
	    switch (len)
	    {
		case 0:
		    return hash;
  401d3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401d40:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  401d44:	e9 d3 00 00 00       	jmpq   401e1c <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x15a>

		case 1:
		    hash *= 9;
  401d49:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  401d4d:	48 89 d0             	mov    %rdx,%rax
  401d50:	48 c1 e0 03          	shl    $0x3,%rax
  401d54:	48 01 d0             	add    %rdx,%rax
  401d57:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += *cast(ubyte *)str;
  401d5b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401d5f:	0f b6 00             	movzbl (%rax),%eax
  401d62:	0f b6 c0             	movzbl %al,%eax
  401d65:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		    return hash;
  401d69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401d6d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  401d71:	e9 a6 00 00 00       	jmpq   401e1c <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x15a>

		case 2:
		    hash *= 9;
  401d76:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  401d7a:	48 89 d0             	mov    %rdx,%rax
  401d7d:	48 c1 e0 03          	shl    $0x3,%rax
  401d81:	48 01 d0             	add    %rdx,%rax
  401d84:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += *cast(ushort *)str;
  401d88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401d8c:	0f b7 00             	movzwl (%rax),%eax
  401d8f:	0f b7 c0             	movzwl %ax,%eax
  401d92:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		    return hash;
  401d96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401d9a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  401d9e:	eb 7c                	jmp    401e1c <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x15a>

		case 3:
		    hash *= 9;
  401da0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  401da4:	48 89 d0             	mov    %rdx,%rax
  401da7:	48 c1 e0 03          	shl    $0x3,%rax
  401dab:	48 01 d0             	add    %rdx,%rax
  401dae:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += (*cast(ushort *)str << 8) +
  401db2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401db6:	0f b7 00             	movzwl (%rax),%eax
  401db9:	0f b7 c0             	movzwl %ax,%eax
  401dbc:	89 c1                	mov    %eax,%ecx
  401dbe:	c1 e1 08             	shl    $0x8,%ecx
  401dc1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  401dc5:	b8 02 00 00 00       	mov    $0x2,%eax
  401dca:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  401dce:	0f b6 00             	movzbl (%rax),%eax
  401dd1:	0f b6 c0             	movzbl %al,%eax
  401dd4:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  401dd7:	48 98                	cltq   
  401dd9:	48 01 45 e8          	add    %rax,-0x18(%rbp)
			    (cast(ubyte *)str)[2];
		    return hash;
  401ddd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401de1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  401de5:	eb 35                	jmp    401e1c <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x15a>

		default:
		    hash *= 9;
  401de7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  401deb:	48 89 d0             	mov    %rdx,%rax
  401dee:	48 c1 e0 03          	shl    $0x3,%rax
  401df2:	48 01 d0             	add    %rdx,%rax
  401df5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += *cast(uint *)str;
  401df9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401dfd:	8b 00                	mov    (%rax),%eax
  401dff:	89 c0                	mov    %eax,%eax
  401e01:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		    str += 4;
  401e05:	48 83 45 f0 04       	addq   $0x4,-0x10(%rbp)
		    len -= 4;
  401e0a:	48 83 6d f8 04       	subq   $0x4,-0x8(%rbp)
		    break;
  401e0f:	e9 f2 fe ff ff       	jmpq   401d06 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x44>
	    }
	}

	return hash;
  401e14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401e18:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  401e1c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    }
  401e20:	c9                   	leaveq 
  401e21:	c3                   	retq   

0000000000401e22 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  401e22:	55                   	push   %rbp
  401e23:	48 89 e5             	mov    %rsp,%rbp
  401e26:	48 83 ec 40          	sub    $0x40,%rsp
  401e2a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  401e2e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  401e32:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  401e36:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  401e3a:	e8 6d 70 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ubyte[] s1 = *cast(ubyte[]*)p1;
  401e3f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  401e43:	48 8b 02             	mov    (%rdx),%rax
  401e46:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  401e4a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401e4e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	ubyte[] s2 = *cast(ubyte[]*)p2;
  401e52:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  401e56:	48 8b 02             	mov    (%rdx),%rax
  401e59:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  401e5d:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401e61:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return s1.length == s2.length &&
  401e65:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  401e69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401e6d:	48 39 c2             	cmp    %rax,%rdx
  401e70:	75 1c                	jne    401e8e <_D3std8typeinfo5ti_Ag11TypeInfo_Ag6equalsMFPvPvZi+0x6c>
  401e72:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  401e76:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  401e7a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  401e7e:	e8 61 b5 00 00       	callq  40d3e4 <_D6kernel4core6system6memcmpFPvPvmZl>
  401e83:	48 85 c0             	test   %rax,%rax
  401e86:	75 06                	jne    401e8e <_D3std8typeinfo5ti_Ag11TypeInfo_Ag6equalsMFPvPvZi+0x6c>
  401e88:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
  401e8c:	eb 04                	jmp    401e92 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag6equalsMFPvPvZi+0x70>
  401e8e:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  401e92:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
	       memcmp(s1.ptr, s2.ptr, s1.length) == 0;
    }
  401e96:	c9                   	leaveq 
  401e97:	c3                   	retq   

0000000000401e98 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  401e98:	55                   	push   %rbp
  401e99:	48 89 e5             	mov    %rsp,%rbp
  401e9c:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  401ea3:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  401ea7:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  401eab:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  401eaf:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  401eb3:	e8 f4 6f 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	byte[] s1 = *cast(byte[]*)p1;
  401eb8:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  401ebc:	48 8b 02             	mov    (%rdx),%rax
  401ebf:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  401ec3:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401ec7:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	byte[] s2 = *cast(byte[]*)p2;
  401ecb:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  401ecf:	48 8b 02             	mov    (%rdx),%rax
  401ed2:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  401ed6:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401eda:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  401ede:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401ee2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  401ee6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401eea:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  401eee:	73 08                	jae    401ef8 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x60>
	    len = s2.length;
  401ef0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401ef4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  401ef8:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  401eff:	00 
  401f00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401f04:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  401f08:	0f 92 c0             	setb   %al
  401f0b:	83 f0 01             	xor    $0x1,%eax
  401f0e:	84 c0                	test   %al,%al
  401f10:	0f 85 da 00 00 00    	jne    401ff0 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x158>
	{
	    int result = s1[u] - s2[u];
  401f16:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401f1a:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  401f21:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401f25:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401f29:	73 0d                	jae    401f38 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0xa0>
  401f2b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  401f2f:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  401f36:	eb 22                	jmp    401f5a <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0xc2>
  401f38:	48 c7 45 c0 14 00 00 	movq   $0x14,-0x40(%rbp)
  401f3f:	00 
  401f40:	48 c7 45 c8 67 f6 40 	movq   $0x40f667,-0x38(%rbp)
  401f47:	00 
  401f48:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  401f4c:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  401f50:	ba 46 00 00 00       	mov    $0x46,%edx
  401f55:	e8 1b 8a 00 00       	callq  40a975 <_d_array_bounds>
  401f5a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  401f61:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  401f68:	0f b6 00             	movzbl (%rax),%eax
  401f6b:	0f be c0             	movsbl %al,%eax
  401f6e:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  401f74:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401f78:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  401f7f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401f83:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401f87:	73 0d                	jae    401f96 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0xfe>
  401f89:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  401f8d:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  401f94:	eb 22                	jmp    401fb8 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x120>
  401f96:	48 c7 45 d0 14 00 00 	movq   $0x14,-0x30(%rbp)
  401f9d:	00 
  401f9e:	48 c7 45 d8 67 f6 40 	movq   $0x40f667,-0x28(%rbp)
  401fa5:	00 
  401fa6:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  401faa:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  401fae:	ba 46 00 00 00       	mov    $0x46,%edx
  401fb3:	e8 bd 89 00 00       	callq  40a975 <_d_array_bounds>
  401fb8:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  401fbf:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  401fc6:	0f b6 00             	movzbl (%rax),%eax
  401fc9:	0f be c0             	movsbl %al,%eax
  401fcc:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  401fd2:	29 c2                	sub    %eax,%edx
  401fd4:	89 d0                	mov    %edx,%eax
  401fd6:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (result)
  401fd9:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  401fdd:	74 08                	je     401fe7 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x14f>
		return result;
  401fdf:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401fe2:	89 45 84             	mov    %eax,-0x7c(%rbp)
  401fe5:	eb 3c                	jmp    402023 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x18b>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int result = s1[u] - s2[u];
	    if (result)
  401fe7:	48 ff 45 f0          	incq   -0x10(%rbp)
  401feb:	e9 10 ff ff ff       	jmpq   401f00 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x68>
		return result;
	}
	if (s1.length < s2.length)
  401ff0:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  401ff4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401ff8:	48 39 c2             	cmp    %rax,%rdx
  401ffb:	73 09                	jae    402006 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x16e>
	    return -1;
  401ffd:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  402004:	eb 1d                	jmp    402023 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x18b>
	else if (s1.length > s2.length)
  402006:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40200a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40200e:	48 39 c2             	cmp    %rax,%rdx
  402011:	76 09                	jbe    40201c <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x184>
	    return 1;
  402013:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  40201a:	eb 07                	jmp    402023 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x18b>
	return 0;
  40201c:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  402023:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  402026:	c9                   	leaveq 
  402027:	c3                   	retq   

0000000000402028 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag5tsizeMFZm>:

    size_t tsize()
  402028:	55                   	push   %rbp
  402029:	48 89 e5             	mov    %rsp,%rbp
  40202c:	48 83 ec 10          	sub    $0x10,%rsp
  402030:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402034:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402038:	e8 6f 6e 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (byte[]).sizeof;
  40203d:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  402042:	c9                   	leaveq 
  402043:	c3                   	retq   

0000000000402044 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag5flagsMFZk>:

    uint flags()
  402044:	55                   	push   %rbp
  402045:	48 89 e5             	mov    %rsp,%rbp
  402048:	48 83 ec 10          	sub    $0x10,%rsp
  40204c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402050:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402054:	e8 53 6e 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  402059:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  40205e:	c9                   	leaveq 
  40205f:	c3                   	retq   

0000000000402060 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag4nextMFZC8TypeInfo>:

    TypeInfo next()
  402060:	55                   	push   %rbp
  402061:	48 89 e5             	mov    %rsp,%rbp
  402064:	48 83 ec 10          	sub    $0x10,%rsp
  402068:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40206c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402070:	e8 37 6e 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(byte);
  402075:	48 c7 c0 90 00 41 00 	mov    $0x410090,%rax
    }
  40207c:	c9                   	leaveq 
  40207d:	c3                   	retq   

000000000040207e <_D3std8typeinfo5ti_Ag11TypeInfo_Ah8toStringMFZAa>:

// ubyte[]

class TypeInfo_Ah : TypeInfo_Ag
{
    char[] toString() { return "ubyte[]"; }
  40207e:	55                   	push   %rbp
  40207f:	48 89 e5             	mov    %rsp,%rbp
  402082:	53                   	push   %rbx
  402083:	48 83 ec 08          	sub    $0x8,%rsp
  402087:	48 89 fb             	mov    %rdi,%rbx
  40208a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40208e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402092:	e8 15 6e 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  402097:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  40209e:	48 c7 43 08 10 f7 40 	movq   $0x40f710,0x8(%rbx)
  4020a5:	00 
  4020a6:	48 89 d8             	mov    %rbx,%rax
  4020a9:	48 83 c4 08          	add    $0x8,%rsp
  4020ad:	5b                   	pop    %rbx
  4020ae:	c9                   	leaveq 
  4020af:	c3                   	retq   

00000000004020b0 <_D3std8typeinfo5ti_Ag11TypeInfo_Ah7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4020b0:	55                   	push   %rbp
  4020b1:	48 89 e5             	mov    %rsp,%rbp
  4020b4:	48 83 ec 40          	sub    $0x40,%rsp
  4020b8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4020bc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4020c0:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4020c4:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4020c8:	e8 df 6d 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ubyte[] s1 = *cast(ubyte[]*)p1;
  4020cd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4020d1:	48 8b 02             	mov    (%rdx),%rax
  4020d4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4020d8:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4020dc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	ubyte[] s2 = *cast(ubyte[]*)p2;
  4020e0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4020e4:	48 8b 02             	mov    (%rdx),%rax
  4020e7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4020eb:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4020ef:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return memcmp(s1.ptr, s2.ptr, s1.length);
  4020f3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4020f7:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  4020fb:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4020ff:	e8 e0 b2 00 00       	callq  40d3e4 <_D6kernel4core6system6memcmpFPvPvmZl>
    }
  402104:	c9                   	leaveq 
  402105:	c3                   	retq   

0000000000402106 <_D3std8typeinfo5ti_Ag11TypeInfo_Ah4nextMFZC8TypeInfo>:

    TypeInfo next()
  402106:	55                   	push   %rbp
  402107:	48 89 e5             	mov    %rsp,%rbp
  40210a:	48 83 ec 10          	sub    $0x10,%rsp
  40210e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402112:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402116:	e8 91 6d 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(ubyte);
  40211b:	48 c7 c0 b0 0d 41 00 	mov    $0x410db0,%rax
    }
  402122:	c9                   	leaveq 
  402123:	c3                   	retq   

0000000000402124 <_D3std8typeinfo5ti_Ag11TypeInfo_Av8toStringMFZAa>:

// void[]

class TypeInfo_Av : TypeInfo_Ah
{
    char[] toString() { return "void[]"; }
  402124:	55                   	push   %rbp
  402125:	48 89 e5             	mov    %rsp,%rbp
  402128:	53                   	push   %rbx
  402129:	48 83 ec 08          	sub    $0x8,%rsp
  40212d:	48 89 fb             	mov    %rdi,%rbx
  402130:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402134:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402138:	e8 6f 6d 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  40213d:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  402144:	48 c7 43 08 b0 f7 40 	movq   $0x40f7b0,0x8(%rbx)
  40214b:	00 
  40214c:	48 89 d8             	mov    %rbx,%rax
  40214f:	48 83 c4 08          	add    $0x8,%rsp
  402153:	5b                   	pop    %rbx
  402154:	c9                   	leaveq 
  402155:	c3                   	retq   

0000000000402156 <_D3std8typeinfo5ti_Ag11TypeInfo_Av4nextMFZC8TypeInfo>:

    TypeInfo next()
  402156:	55                   	push   %rbp
  402157:	48 89 e5             	mov    %rsp,%rbp
  40215a:	48 83 ec 10          	sub    $0x10,%rsp
  40215e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402162:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402166:	e8 41 6d 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(void);
  40216b:	48 c7 c0 60 11 41 00 	mov    $0x411160,%rax
    }
  402172:	c9                   	leaveq 
  402173:	c3                   	retq   

0000000000402174 <_D3std8typeinfo5ti_Ag11TypeInfo_Ab8toStringMFZAa>:

// bool[]

class TypeInfo_Ab : TypeInfo_Ah
{
    char[] toString() { return "bool[]"; }
  402174:	55                   	push   %rbp
  402175:	48 89 e5             	mov    %rsp,%rbp
  402178:	53                   	push   %rbx
  402179:	48 83 ec 08          	sub    $0x8,%rsp
  40217d:	48 89 fb             	mov    %rdi,%rbx
  402180:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402184:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402188:	e8 1f 6d 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  40218d:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  402194:	48 c7 43 08 50 f8 40 	movq   $0x40f850,0x8(%rbx)
  40219b:	00 
  40219c:	48 89 d8             	mov    %rbx,%rax
  40219f:	48 83 c4 08          	add    $0x8,%rsp
  4021a3:	5b                   	pop    %rbx
  4021a4:	c9                   	leaveq 
  4021a5:	c3                   	retq   

00000000004021a6 <_D3std8typeinfo5ti_Ag11TypeInfo_Ab4nextMFZC8TypeInfo>:

    TypeInfo next()
  4021a6:	55                   	push   %rbp
  4021a7:	48 89 e5             	mov    %rsp,%rbp
  4021aa:	48 83 ec 10          	sub    $0x10,%rsp
  4021ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4021b2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4021b6:	e8 f1 6c 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(bool);
  4021bb:	48 c7 c0 60 0e 41 00 	mov    $0x410e60,%rax
    }
  4021c2:	c9                   	leaveq 
  4021c3:	c3                   	retq   

00000000004021c4 <_D3std8typeinfo5ti_Ag11TypeInfo_Aa8toStringMFZAa>:

// char[]

class TypeInfo_Aa : TypeInfo_Ag
{
    char[] toString() { return "char[]"; }
  4021c4:	55                   	push   %rbp
  4021c5:	48 89 e5             	mov    %rsp,%rbp
  4021c8:	53                   	push   %rbx
  4021c9:	48 83 ec 08          	sub    $0x8,%rsp
  4021cd:	48 89 fb             	mov    %rdi,%rbx
  4021d0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4021d4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4021d8:	e8 cf 6c 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  4021dd:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  4021e4:	48 c7 43 08 f0 f8 40 	movq   $0x40f8f0,0x8(%rbx)
  4021eb:	00 
  4021ec:	48 89 d8             	mov    %rbx,%rax
  4021ef:	48 83 c4 08          	add    $0x8,%rsp
  4021f3:	5b                   	pop    %rbx
  4021f4:	c9                   	leaveq 
  4021f5:	c3                   	retq   

00000000004021f6 <_D3std8typeinfo5ti_Ag11TypeInfo_Aa7getHashMFPvZm>:

    hash_t getHash(void *p)
  4021f6:	55                   	push   %rbp
  4021f7:	48 89 e5             	mov    %rsp,%rbp
  4021fa:	48 83 ec 50          	sub    $0x50,%rsp
  4021fe:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  402202:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  402206:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  40220a:	e8 9d 6c 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {	char[] s = *cast(char[]*)p;
  40220f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  402213:	48 8b 02             	mov    (%rdx),%rax
  402216:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40221a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40221e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	hash_t hash = 0;
  402222:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  402229:	00 

version (all)
{
	foreach (char c; s)
  40222a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40222e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  402232:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402236:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40223a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40223e:	48 03 45 b8          	add    -0x48(%rbp),%rax
  402242:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  402246:	0f 95 c0             	setne  %al
  402249:	83 f0 01             	xor    $0x1,%eax
  40224c:	84 c0                	test   %al,%al
  40224e:	75 3c                	jne    40228c <_D3std8typeinfo5ti_Ag11TypeInfo_Aa7getHashMFPvZm+0x96>
  402250:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402254:	0f b6 00             	movzbl (%rax),%eax
  402257:	88 45 ff             	mov    %al,-0x1(%rbp)
	    hash = hash * 11 + c;
  40225a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40225e:	48 89 c8             	mov    %rcx,%rax
  402261:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  402268:	00 
  402269:	48 8d 04 95 00 00 00 	lea    0x0(,%rdx,4),%rax
  402270:	00 
  402271:	48 29 d0             	sub    %rdx,%rax
  402274:	48 89 c2             	mov    %rax,%rdx
  402277:	48 29 ca             	sub    %rcx,%rdx
  40227a:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40227e:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  402282:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  402286:	48 ff 45 f0          	incq   -0x10(%rbp)
  40228a:	eb ae                	jmp    40223a <_D3std8typeinfo5ti_Ag11TypeInfo_Aa7getHashMFPvZm+0x44>
		    len -= 4;
		    break;
	    }
	}
}
	return hash;
  40228c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  402290:	c9                   	leaveq 
  402291:	c3                   	retq   

0000000000402292 <_D3std8typeinfo5ti_Ag11TypeInfo_Aa4nextMFZC8TypeInfo>:

    TypeInfo next()
  402292:	55                   	push   %rbp
  402293:	48 89 e5             	mov    %rsp,%rbp
  402296:	48 83 ec 10          	sub    $0x10,%rsp
  40229a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40229e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4022a2:	e8 05 6c 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(char);
  4022a7:	48 c7 c0 70 03 41 00 	mov    $0x410370,%rax
    }
  4022ae:	c9                   	leaveq 
  4022af:	c3                   	retq   

00000000004022b0 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai8toStringMFZAa>:

// int[]

class TypeInfo_Ai : TypeInfo
{
    char[] toString() { return "int[]"; }
  4022b0:	55                   	push   %rbp
  4022b1:	48 89 e5             	mov    %rsp,%rbp
  4022b4:	53                   	push   %rbx
  4022b5:	48 83 ec 08          	sub    $0x8,%rsp
  4022b9:	48 89 fb             	mov    %rdi,%rbx
  4022bc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4022c0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4022c4:	e8 e3 6b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  4022c9:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  4022d0:	48 c7 43 08 a0 f9 40 	movq   $0x40f9a0,0x8(%rbx)
  4022d7:	00 
  4022d8:	48 89 d8             	mov    %rbx,%rax
  4022db:	48 83 c4 08          	add    $0x8,%rsp
  4022df:	5b                   	pop    %rbx
  4022e0:	c9                   	leaveq 
  4022e1:	c3                   	retq   

00000000004022e2 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7getHashMFPvZm>:

    hash_t getHash(void *p)
  4022e2:	55                   	push   %rbp
  4022e3:	48 89 e5             	mov    %rsp,%rbp
  4022e6:	48 83 ec 40          	sub    $0x40,%rsp
  4022ea:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  4022ee:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  4022f2:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4022f6:	e8 b1 6b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {	int[] s = *cast(int[]*)p;
  4022fb:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4022ff:	48 8b 02             	mov    (%rdx),%rax
  402302:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  402306:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40230a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	auto len = s.length;
  40230e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  402312:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto str = s.ptr;
  402316:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40231a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  40231e:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  402325:	00 

	while (len)
  402326:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40232b:	0f 95 c0             	setne  %al
  40232e:	83 f0 01             	xor    $0x1,%eax
  402331:	84 c0                	test   %al,%al
  402333:	75 29                	jne    40235e <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7getHashMFPvZm+0x7c>
	{
	    hash *= 9;
  402335:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  402339:	48 89 d0             	mov    %rdx,%rax
  40233c:	48 c1 e0 03          	shl    $0x3,%rax
  402340:	48 01 d0             	add    %rdx,%rax
  402343:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += *cast(uint *)str;
  402347:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40234b:	8b 00                	mov    (%rax),%eax
  40234d:	89 c0                	mov    %eax,%eax
  40234f:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  402353:	48 83 45 f0 04       	addq   $0x4,-0x10(%rbp)
	    len--;
  402358:	48 ff 4d f8          	decq   -0x8(%rbp)
  40235c:	eb c8                	jmp    402326 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7getHashMFPvZm+0x44>
	}

	return hash;
  40235e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  402362:	c9                   	leaveq 
  402363:	c3                   	retq   

0000000000402364 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  402364:	55                   	push   %rbp
  402365:	48 89 e5             	mov    %rsp,%rbp
  402368:	48 83 ec 40          	sub    $0x40,%rsp
  40236c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  402370:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  402374:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  402378:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  40237c:	e8 2b 6b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	int[] s1 = *cast(int[]*)p1;
  402381:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  402385:	48 8b 02             	mov    (%rdx),%rax
  402388:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40238c:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402390:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	int[] s2 = *cast(int[]*)p2;
  402394:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  402398:	48 8b 02             	mov    (%rdx),%rax
  40239b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40239f:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4023a3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return s1.length == s2.length &&
  4023a7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4023ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4023af:	48 39 c2             	cmp    %rax,%rdx
  4023b2:	75 2a                	jne    4023de <_D3std8typeinfo7ti_Aint11TypeInfo_Ai6equalsMFPvPvZi+0x7a>
  4023b4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4023b8:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  4023bf:	00 
  4023c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4023c4:	48 89 c6             	mov    %rax,%rsi
  4023c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4023cb:	48 89 c7             	mov    %rax,%rdi
  4023ce:	e8 11 b0 00 00       	callq  40d3e4 <_D6kernel4core6system6memcmpFPvPvmZl>
  4023d3:	48 85 c0             	test   %rax,%rax
  4023d6:	75 06                	jne    4023de <_D3std8typeinfo7ti_Aint11TypeInfo_Ai6equalsMFPvPvZi+0x7a>
  4023d8:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
  4023dc:	eb 04                	jmp    4023e2 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai6equalsMFPvPvZi+0x7e>
  4023de:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  4023e2:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
	       memcmp(cast(ubyte*)s1.ptr, cast(ubyte*)s2.ptr, s1.length * int.sizeof) == 0;
    }
  4023e6:	c9                   	leaveq 
  4023e7:	c3                   	retq   

00000000004023e8 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4023e8:	55                   	push   %rbp
  4023e9:	48 89 e5             	mov    %rsp,%rbp
  4023ec:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  4023f3:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  4023f7:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  4023fb:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  4023ff:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  402403:	e8 a4 6a 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	int[] s1 = *cast(int[]*)p1;
  402408:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40240c:	48 8b 02             	mov    (%rdx),%rax
  40240f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  402413:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402417:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	int[] s2 = *cast(int[]*)p2;
  40241b:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40241f:	48 8b 02             	mov    (%rdx),%rax
  402422:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  402426:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40242a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  40242e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402432:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  402436:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40243a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40243e:	73 08                	jae    402448 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x60>
	    len = s2.length;
  402440:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402444:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  402448:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40244f:	00 
  402450:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402454:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  402458:	0f 92 c0             	setb   %al
  40245b:	83 f0 01             	xor    $0x1,%eax
  40245e:	84 c0                	test   %al,%al
  402460:	0f 85 da 00 00 00    	jne    402540 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x158>
	{
	    int result = s1[u] - s2[u];
  402466:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40246a:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  402471:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402475:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  402479:	73 0d                	jae    402488 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0xa0>
  40247b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40247f:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  402486:	eb 22                	jmp    4024aa <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0xc2>
  402488:	48 c7 45 c0 16 00 00 	movq   $0x16,-0x40(%rbp)
  40248f:	00 
  402490:	48 c7 45 c8 a6 f9 40 	movq   $0x40f9a6,-0x38(%rbp)
  402497:	00 
  402498:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40249c:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4024a0:	ba 30 00 00 00       	mov    $0x30,%edx
  4024a5:	e8 cb 84 00 00       	callq  40a975 <_d_array_bounds>
  4024aa:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4024b1:	48 c1 e0 02          	shl    $0x2,%rax
  4024b5:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  4024bc:	8b 00                	mov    (%rax),%eax
  4024be:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  4024c4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4024c8:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  4024cf:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4024d3:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4024d7:	73 0d                	jae    4024e6 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0xfe>
  4024d9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4024dd:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  4024e4:	eb 22                	jmp    402508 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x120>
  4024e6:	48 c7 45 d0 16 00 00 	movq   $0x16,-0x30(%rbp)
  4024ed:	00 
  4024ee:	48 c7 45 d8 a6 f9 40 	movq   $0x40f9a6,-0x28(%rbp)
  4024f5:	00 
  4024f6:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4024fa:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4024fe:	ba 30 00 00 00       	mov    $0x30,%edx
  402503:	e8 6d 84 00 00       	callq  40a975 <_d_array_bounds>
  402508:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40250f:	48 c1 e0 02          	shl    $0x2,%rax
  402513:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  40251a:	8b 00                	mov    (%rax),%eax
  40251c:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  402522:	29 c2                	sub    %eax,%edx
  402524:	89 d0                	mov    %edx,%eax
  402526:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (result)
  402529:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40252d:	74 08                	je     402537 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x14f>
		return result;
  40252f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  402532:	89 45 84             	mov    %eax,-0x7c(%rbp)
  402535:	eb 3c                	jmp    402573 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x18b>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int result = s1[u] - s2[u];
	    if (result)
  402537:	48 ff 45 f0          	incq   -0x10(%rbp)
  40253b:	e9 10 ff ff ff       	jmpq   402450 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x68>
		return result;
	}
	if (s1.length < s2.length)
  402540:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  402544:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402548:	48 39 c2             	cmp    %rax,%rdx
  40254b:	73 09                	jae    402556 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x16e>
	    return -1;
  40254d:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  402554:	eb 1d                	jmp    402573 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x18b>
	else if (s1.length > s2.length)
  402556:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40255a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40255e:	48 39 c2             	cmp    %rax,%rdx
  402561:	76 09                	jbe    40256c <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x184>
	    return 1;
  402563:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  40256a:	eb 07                	jmp    402573 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x18b>
	return 0;
  40256c:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  402573:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  402576:	c9                   	leaveq 
  402577:	c3                   	retq   

0000000000402578 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai5tsizeMFZm>:

    size_t tsize()
  402578:	55                   	push   %rbp
  402579:	48 89 e5             	mov    %rsp,%rbp
  40257c:	48 83 ec 10          	sub    $0x10,%rsp
  402580:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402584:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402588:	e8 1f 69 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (int[]).sizeof;
  40258d:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  402592:	c9                   	leaveq 
  402593:	c3                   	retq   

0000000000402594 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai5flagsMFZk>:

    uint flags()
  402594:	55                   	push   %rbp
  402595:	48 89 e5             	mov    %rsp,%rbp
  402598:	48 83 ec 10          	sub    $0x10,%rsp
  40259c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4025a0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4025a4:	e8 03 69 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  4025a9:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  4025ae:	c9                   	leaveq 
  4025af:	c3                   	retq   

00000000004025b0 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai4nextMFZC8TypeInfo>:

    TypeInfo next()
  4025b0:	55                   	push   %rbp
  4025b1:	48 89 e5             	mov    %rsp,%rbp
  4025b4:	48 83 ec 10          	sub    $0x10,%rsp
  4025b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4025bc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4025c0:	e8 e7 68 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(int);
  4025c5:	48 c7 c0 50 09 41 00 	mov    $0x410950,%rax
    }
  4025cc:	c9                   	leaveq 
  4025cd:	c3                   	retq   

00000000004025ce <_D3std8typeinfo7ti_Aint11TypeInfo_Ak8toStringMFZAa>:

// uint[]

class TypeInfo_Ak : TypeInfo_Ai
{
    char[] toString() { return "uint[]"; }
  4025ce:	55                   	push   %rbp
  4025cf:	48 89 e5             	mov    %rsp,%rbp
  4025d2:	53                   	push   %rbx
  4025d3:	48 83 ec 08          	sub    $0x8,%rsp
  4025d7:	48 89 fb             	mov    %rdi,%rbx
  4025da:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4025de:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4025e2:	e8 c5 68 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  4025e7:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  4025ee:	48 c7 43 08 50 fa 40 	movq   $0x40fa50,0x8(%rbx)
  4025f5:	00 
  4025f6:	48 89 d8             	mov    %rbx,%rax
  4025f9:	48 83 c4 08          	add    $0x8,%rsp
  4025fd:	5b                   	pop    %rbx
  4025fe:	c9                   	leaveq 
  4025ff:	c3                   	retq   

0000000000402600 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  402600:	55                   	push   %rbp
  402601:	48 89 e5             	mov    %rsp,%rbp
  402604:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  40260b:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40260f:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  402613:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  402617:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40261b:	e8 8c 68 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	uint[] s1 = *cast(uint[]*)p1;
  402620:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  402624:	48 8b 02             	mov    (%rdx),%rax
  402627:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40262b:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40262f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	uint[] s2 = *cast(uint[]*)p2;
  402633:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  402637:	48 8b 02             	mov    (%rdx),%rax
  40263a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40263e:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402642:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  402646:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40264a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  40264e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402652:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  402656:	73 08                	jae    402660 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x60>
	    len = s2.length;
  402658:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40265c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  402660:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  402667:	00 
  402668:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40266c:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  402670:	0f 92 c0             	setb   %al
  402673:	83 f0 01             	xor    $0x1,%eax
  402676:	84 c0                	test   %al,%al
  402678:	0f 85 da 00 00 00    	jne    402758 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x158>
	{
	    int result = s1[u] - s2[u];
  40267e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  402682:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  402689:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40268d:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  402691:	73 0d                	jae    4026a0 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0xa0>
  402693:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  402697:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  40269e:	eb 22                	jmp    4026c2 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0xc2>
  4026a0:	48 c7 45 c0 16 00 00 	movq   $0x16,-0x40(%rbp)
  4026a7:	00 
  4026a8:	48 c7 45 c8 a6 f9 40 	movq   $0x40f9a6,-0x38(%rbp)
  4026af:	00 
  4026b0:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4026b4:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4026b8:	ba 5b 00 00 00       	mov    $0x5b,%edx
  4026bd:	e8 b3 82 00 00       	callq  40a975 <_d_array_bounds>
  4026c2:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4026c9:	48 c1 e0 02          	shl    $0x2,%rax
  4026cd:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  4026d4:	8b 00                	mov    (%rax),%eax
  4026d6:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  4026dc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4026e0:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  4026e7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4026eb:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4026ef:	73 0d                	jae    4026fe <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0xfe>
  4026f1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4026f5:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  4026fc:	eb 22                	jmp    402720 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x120>
  4026fe:	48 c7 45 d0 16 00 00 	movq   $0x16,-0x30(%rbp)
  402705:	00 
  402706:	48 c7 45 d8 a6 f9 40 	movq   $0x40f9a6,-0x28(%rbp)
  40270d:	00 
  40270e:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  402712:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  402716:	ba 5b 00 00 00       	mov    $0x5b,%edx
  40271b:	e8 55 82 00 00       	callq  40a975 <_d_array_bounds>
  402720:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  402727:	48 c1 e0 02          	shl    $0x2,%rax
  40272b:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  402732:	8b 00                	mov    (%rax),%eax
  402734:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  40273a:	29 c2                	sub    %eax,%edx
  40273c:	89 d0                	mov    %edx,%eax
  40273e:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (result)
  402741:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  402745:	74 08                	je     40274f <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x14f>
		return result;
  402747:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40274a:	89 45 84             	mov    %eax,-0x7c(%rbp)
  40274d:	eb 3c                	jmp    40278b <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x18b>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int result = s1[u] - s2[u];
	    if (result)
  40274f:	48 ff 45 f0          	incq   -0x10(%rbp)
  402753:	e9 10 ff ff ff       	jmpq   402668 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x68>
		return result;
	}
	if (s1.length < s2.length)
  402758:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40275c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402760:	48 39 c2             	cmp    %rax,%rdx
  402763:	73 09                	jae    40276e <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x16e>
	    return -1;
  402765:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  40276c:	eb 1d                	jmp    40278b <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x18b>
	else if (s1.length > s2.length)
  40276e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  402772:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402776:	48 39 c2             	cmp    %rax,%rdx
  402779:	76 09                	jbe    402784 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x184>
	    return 1;
  40277b:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  402782:	eb 07                	jmp    40278b <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x18b>
	return 0;
  402784:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  40278b:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  40278e:	c9                   	leaveq 
  40278f:	c3                   	retq   

0000000000402790 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak4nextMFZC8TypeInfo>:

    TypeInfo next()
  402790:	55                   	push   %rbp
  402791:	48 89 e5             	mov    %rsp,%rbp
  402794:	48 83 ec 10          	sub    $0x10,%rsp
  402798:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40279c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4027a0:	e8 07 67 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(uint);
  4027a5:	48 c7 c0 10 0f 41 00 	mov    $0x410f10,%rax
    }
  4027ac:	c9                   	leaveq 
  4027ad:	c3                   	retq   

00000000004027ae <_D3std8typeinfo7ti_Aint11TypeInfo_Aw8toStringMFZAa>:

// dchar[]

class TypeInfo_Aw : TypeInfo_Ak
{
    char[] toString() { return "dchar[]"; }
  4027ae:	55                   	push   %rbp
  4027af:	48 89 e5             	mov    %rsp,%rbp
  4027b2:	53                   	push   %rbx
  4027b3:	48 83 ec 08          	sub    $0x8,%rsp
  4027b7:	48 89 fb             	mov    %rdi,%rbx
  4027ba:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4027be:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4027c2:	e8 e5 66 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  4027c7:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  4027ce:	48 c7 43 08 f0 fa 40 	movq   $0x40faf0,0x8(%rbx)
  4027d5:	00 
  4027d6:	48 89 d8             	mov    %rbx,%rax
  4027d9:	48 83 c4 08          	add    $0x8,%rsp
  4027dd:	5b                   	pop    %rbx
  4027de:	c9                   	leaveq 
  4027df:	c3                   	retq   

00000000004027e0 <_D3std8typeinfo7ti_Aint11TypeInfo_Aw4nextMFZC8TypeInfo>:

    TypeInfo next()
  4027e0:	55                   	push   %rbp
  4027e1:	48 89 e5             	mov    %rsp,%rbp
  4027e4:	48 83 ec 10          	sub    $0x10,%rsp
  4027e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4027ec:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4027f0:	e8 b7 66 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(dchar);
  4027f5:	48 c7 c0 f0 04 41 00 	mov    $0x4104f0,%rax
    }
  4027fc:	c9                   	leaveq 
  4027fd:	c3                   	retq   
  4027fe:	90                   	nop    
  4027ff:	90                   	nop    

0000000000402800 <_D3std8typeinfo8ti_Along11TypeInfo_Al8toStringMFZAa>:

// long[]

class TypeInfo_Al : TypeInfo
{
    char[] toString() { return "long[]"; }
  402800:	55                   	push   %rbp
  402801:	48 89 e5             	mov    %rsp,%rbp
  402804:	53                   	push   %rbx
  402805:	48 83 ec 08          	sub    $0x8,%rsp
  402809:	48 89 fb             	mov    %rdi,%rbx
  40280c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402810:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402814:	e8 93 66 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  402819:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  402820:	48 c7 43 08 a0 fb 40 	movq   $0x40fba0,0x8(%rbx)
  402827:	00 
  402828:	48 89 d8             	mov    %rbx,%rax
  40282b:	48 83 c4 08          	add    $0x8,%rsp
  40282f:	5b                   	pop    %rbx
  402830:	c9                   	leaveq 
  402831:	c3                   	retq   

0000000000402832 <_D3std8typeinfo8ti_Along11TypeInfo_Al7getHashMFPvZm>:

    hash_t getHash(void *p)
  402832:	55                   	push   %rbp
  402833:	48 89 e5             	mov    %rsp,%rbp
  402836:	48 83 ec 40          	sub    $0x40,%rsp
  40283a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40283e:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  402842:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  402846:	e8 61 66 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {	long[] s = *cast(long[]*)p;
  40284b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40284f:	48 8b 02             	mov    (%rdx),%rax
  402852:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  402856:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40285a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  40285e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  402862:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto str = s.ptr;
  402866:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40286a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  40286e:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  402875:	00 

	while (len)
  402876:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40287b:	0f 95 c0             	setne  %al
  40287e:	83 f0 01             	xor    $0x1,%eax
  402881:	84 c0                	test   %al,%al
  402883:	75 36                	jne    4028bb <_D3std8typeinfo8ti_Along11TypeInfo_Al7getHashMFPvZm+0x89>
	{
	    hash *= 9;
  402885:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  402889:	48 89 d0             	mov    %rdx,%rax
  40288c:	48 c1 e0 03          	shl    $0x3,%rax
  402890:	48 01 d0             	add    %rdx,%rax
  402893:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += *cast(uint *)str + *(cast(uint *)str + 1);
  402897:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40289b:	8b 10                	mov    (%rax),%edx
  40289d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4028a1:	48 83 c0 04          	add    $0x4,%rax
  4028a5:	8b 00                	mov    (%rax),%eax
  4028a7:	8d 04 02             	lea    (%rdx,%rax,1),%eax
  4028aa:	89 c0                	mov    %eax,%eax
  4028ac:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  4028b0:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
	    len--;
  4028b5:	48 ff 4d f8          	decq   -0x8(%rbp)
  4028b9:	eb bb                	jmp    402876 <_D3std8typeinfo8ti_Along11TypeInfo_Al7getHashMFPvZm+0x44>
	}

	return hash;
  4028bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  4028bf:	c9                   	leaveq 
  4028c0:	c3                   	retq   

00000000004028c1 <_D3std8typeinfo8ti_Along11TypeInfo_Al6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4028c1:	55                   	push   %rbp
  4028c2:	48 89 e5             	mov    %rsp,%rbp
  4028c5:	48 83 ec 40          	sub    $0x40,%rsp
  4028c9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4028cd:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4028d1:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4028d5:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4028d9:	e8 ce 65 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	long[] s1 = *cast(long[]*)p1;
  4028de:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4028e2:	48 8b 02             	mov    (%rdx),%rax
  4028e5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4028e9:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4028ed:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	long[] s2 = *cast(long[]*)p2;
  4028f1:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4028f5:	48 8b 02             	mov    (%rdx),%rax
  4028f8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4028fc:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402900:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return s1.length == s2.length &&
  402904:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  402908:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40290c:	48 39 c2             	cmp    %rax,%rdx
  40290f:	75 2a                	jne    40293b <_D3std8typeinfo8ti_Along11TypeInfo_Al6equalsMFPvPvZi+0x7a>
  402911:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  402915:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  40291c:	00 
  40291d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402921:	48 89 c6             	mov    %rax,%rsi
  402924:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402928:	48 89 c7             	mov    %rax,%rdi
  40292b:	e8 b4 aa 00 00       	callq  40d3e4 <_D6kernel4core6system6memcmpFPvPvmZl>
  402930:	48 85 c0             	test   %rax,%rax
  402933:	75 06                	jne    40293b <_D3std8typeinfo8ti_Along11TypeInfo_Al6equalsMFPvPvZi+0x7a>
  402935:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
  402939:	eb 04                	jmp    40293f <_D3std8typeinfo8ti_Along11TypeInfo_Al6equalsMFPvPvZi+0x7e>
  40293b:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  40293f:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
	       memcmp(cast(ubyte*)s1.ptr, cast(ubyte*)s2.ptr, s1.length * long.sizeof) == 0;
    }
  402943:	c9                   	leaveq 
  402944:	c3                   	retq   

0000000000402945 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  402945:	55                   	push   %rbp
  402946:	48 89 e5             	mov    %rsp,%rbp
  402949:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  402950:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  402954:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  402958:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  40295f:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
  402963:	e8 44 65 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	long[] s1 = *cast(long[]*)p1;
  402968:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  40296c:	48 8b 02             	mov    (%rdx),%rax
  40296f:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  402973:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402977:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	long[] s2 = *cast(long[]*)p2;
  40297b:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  402982:	48 8b 02             	mov    (%rdx),%rax
  402985:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  402989:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40298d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	size_t len = s1.length;
  402991:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  402995:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	if (s2.length < len)
  402999:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40299d:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  4029a1:	73 08                	jae    4029ab <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x66>
	    len = s2.length;
  4029a3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4029a7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	for (size_t u = 0; u < len; u++)
  4029ab:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4029b2:	00 
  4029b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4029b7:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  4029bb:	0f 92 c0             	setb   %al
  4029be:	83 f0 01             	xor    $0x1,%eax
  4029c1:	84 c0                	test   %al,%al
  4029c3:	0f 85 a8 01 00 00    	jne    402b71 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x22c>
	{
	    if (s1[u] < s2[u])
  4029c9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4029cd:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  4029d4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4029d8:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  4029dc:	73 0d                	jae    4029eb <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0xa6>
  4029de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4029e2:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  4029e9:	eb 22                	jmp    402a0d <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0xc8>
  4029eb:	48 c7 45 b0 17 00 00 	movq   $0x17,-0x50(%rbp)
  4029f2:	00 
  4029f3:	48 c7 45 b8 a7 fb 40 	movq   $0x40fba7,-0x48(%rbp)
  4029fa:	00 
  4029fb:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  4029ff:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  402a03:	ba 30 00 00 00       	mov    $0x30,%edx
  402a08:	e8 68 7f 00 00       	callq  40a975 <_d_array_bounds>
  402a0d:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  402a14:	48 c1 e0 03          	shl    $0x3,%rax
  402a18:	48 03 85 20 ff ff ff 	add    -0xe0(%rbp),%rax
  402a1f:	48 8b 00             	mov    (%rax),%rax
  402a22:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  402a29:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  402a2d:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  402a34:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402a38:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  402a3c:	73 0d                	jae    402a4b <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x106>
  402a3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402a42:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  402a49:	eb 22                	jmp    402a6d <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x128>
  402a4b:	48 c7 45 c0 17 00 00 	movq   $0x17,-0x40(%rbp)
  402a52:	00 
  402a53:	48 c7 45 c8 a7 fb 40 	movq   $0x40fba7,-0x38(%rbp)
  402a5a:	00 
  402a5b:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  402a5f:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  402a63:	ba 30 00 00 00       	mov    $0x30,%edx
  402a68:	e8 08 7f 00 00       	callq  40a975 <_d_array_bounds>
  402a6d:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  402a74:	48 c1 e0 03          	shl    $0x3,%rax
  402a78:	48 03 85 38 ff ff ff 	add    -0xc8(%rbp),%rax
  402a7f:	48 8b 00             	mov    (%rax),%rax
  402a82:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
  402a89:	7d 0f                	jge    402a9a <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x155>
		return -1;
  402a8b:	c7 85 4c ff ff ff ff 	movl   $0xffffffff,-0xb4(%rbp)
  402a92:	ff ff ff 
  402a95:	e9 13 01 00 00       	jmpq   402bad <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x268>
	    else if (s1[u] > s2[u])
  402a9a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  402a9e:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  402aa5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  402aa9:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  402aad:	73 0d                	jae    402abc <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x177>
  402aaf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402ab3:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  402aba:	eb 22                	jmp    402ade <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x199>
  402abc:	48 c7 45 d0 17 00 00 	movq   $0x17,-0x30(%rbp)
  402ac3:	00 
  402ac4:	48 c7 45 d8 a7 fb 40 	movq   $0x40fba7,-0x28(%rbp)
  402acb:	00 
  402acc:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  402ad0:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  402ad4:	ba 32 00 00 00       	mov    $0x32,%edx
  402ad9:	e8 97 7e 00 00       	callq  40a975 <_d_array_bounds>
  402ade:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  402ae5:	48 c1 e0 03          	shl    $0x3,%rax
  402ae9:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  402af0:	48 8b 00             	mov    (%rax),%rax
  402af3:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  402afa:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  402afe:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  402b05:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402b09:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  402b0d:	73 0d                	jae    402b1c <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x1d7>
  402b0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402b13:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  402b1a:	eb 22                	jmp    402b3e <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x1f9>
  402b1c:	48 c7 45 e0 17 00 00 	movq   $0x17,-0x20(%rbp)
  402b23:	00 
  402b24:	48 c7 45 e8 a7 fb 40 	movq   $0x40fba7,-0x18(%rbp)
  402b2b:	00 
  402b2c:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  402b30:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  402b34:	ba 32 00 00 00       	mov    $0x32,%edx
  402b39:	e8 37 7e 00 00       	callq  40a975 <_d_array_bounds>
  402b3e:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  402b45:	48 c1 e0 03          	shl    $0x3,%rax
  402b49:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  402b50:	48 8b 00             	mov    (%rax),%rax
  402b53:	48 39 85 60 ff ff ff 	cmp    %rax,-0xa0(%rbp)
  402b5a:	7e 0c                	jle    402b68 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x223>
		return 1;
  402b5c:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  402b63:	00 00 00 
  402b66:	eb 45                	jmp    402bad <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x268>

	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    if (s1[u] < s2[u])
  402b68:	48 ff 45 f8          	incq   -0x8(%rbp)
  402b6c:	e9 42 fe ff ff       	jmpq   4029b3 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x6e>
		return -1;
	    else if (s1[u] > s2[u])
		return 1;
	}
	if (s1.length < s2.length)
  402b71:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  402b75:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402b79:	48 39 c2             	cmp    %rax,%rdx
  402b7c:	73 0c                	jae    402b8a <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x245>
	    return -1;
  402b7e:	c7 85 4c ff ff ff ff 	movl   $0xffffffff,-0xb4(%rbp)
  402b85:	ff ff ff 
  402b88:	eb 23                	jmp    402bad <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x268>
	else if (s1.length > s2.length)
  402b8a:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  402b8e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402b92:	48 39 c2             	cmp    %rax,%rdx
  402b95:	76 0c                	jbe    402ba3 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x25e>
	    return 1;
  402b97:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  402b9e:	00 00 00 
  402ba1:	eb 0a                	jmp    402bad <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x268>
	return 0;
  402ba3:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  402baa:	00 00 00 
  402bad:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
    }
  402bb3:	c9                   	leaveq 
  402bb4:	c3                   	retq   

0000000000402bb5 <_D3std8typeinfo8ti_Along11TypeInfo_Al5tsizeMFZm>:

    size_t tsize()
  402bb5:	55                   	push   %rbp
  402bb6:	48 89 e5             	mov    %rsp,%rbp
  402bb9:	48 83 ec 10          	sub    $0x10,%rsp
  402bbd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402bc1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402bc5:	e8 e2 62 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (long[]).sizeof;
  402bca:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  402bcf:	c9                   	leaveq 
  402bd0:	c3                   	retq   

0000000000402bd1 <_D3std8typeinfo8ti_Along11TypeInfo_Al5flagsMFZk>:

    uint flags()
  402bd1:	55                   	push   %rbp
  402bd2:	48 89 e5             	mov    %rsp,%rbp
  402bd5:	48 83 ec 10          	sub    $0x10,%rsp
  402bd9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402bdd:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402be1:	e8 c6 62 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  402be6:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  402beb:	c9                   	leaveq 
  402bec:	c3                   	retq   

0000000000402bed <_D3std8typeinfo8ti_Along11TypeInfo_Al4nextMFZC8TypeInfo>:

    TypeInfo next()
  402bed:	55                   	push   %rbp
  402bee:	48 89 e5             	mov    %rsp,%rbp
  402bf1:	48 83 ec 10          	sub    $0x10,%rsp
  402bf5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402bf9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402bfd:	e8 aa 62 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(long);
  402c02:	48 c7 c0 d0 0a 41 00 	mov    $0x410ad0,%rax
    }
  402c09:	c9                   	leaveq 
  402c0a:	c3                   	retq   

0000000000402c0b <_D3std8typeinfo8ti_Along11TypeInfo_Am8toStringMFZAa>:

// ulong[]

class TypeInfo_Am : TypeInfo_Al
{
    char[] toString() { return "ulong[]"; }
  402c0b:	55                   	push   %rbp
  402c0c:	48 89 e5             	mov    %rsp,%rbp
  402c0f:	53                   	push   %rbx
  402c10:	48 83 ec 08          	sub    $0x8,%rsp
  402c14:	48 89 fb             	mov    %rdi,%rbx
  402c17:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402c1b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402c1f:	e8 88 62 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  402c24:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  402c2b:	48 c7 43 08 50 fc 40 	movq   $0x40fc50,0x8(%rbx)
  402c32:	00 
  402c33:	48 89 d8             	mov    %rbx,%rax
  402c36:	48 83 c4 08          	add    $0x8,%rsp
  402c3a:	5b                   	pop    %rbx
  402c3b:	c9                   	leaveq 
  402c3c:	c3                   	retq   

0000000000402c3d <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  402c3d:	55                   	push   %rbp
  402c3e:	48 89 e5             	mov    %rsp,%rbp
  402c41:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  402c48:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  402c4c:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  402c50:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  402c57:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
  402c5b:	e8 4c 62 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ulong[] s1 = *cast(ulong[]*)p1;
  402c60:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  402c64:	48 8b 02             	mov    (%rdx),%rax
  402c67:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  402c6b:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402c6f:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	ulong[] s2 = *cast(ulong[]*)p2;
  402c73:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  402c7a:	48 8b 02             	mov    (%rdx),%rax
  402c7d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  402c81:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402c85:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	size_t len = s1.length;
  402c89:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  402c8d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	if (s2.length < len)
  402c91:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402c95:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  402c99:	73 08                	jae    402ca3 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x66>
	    len = s2.length;
  402c9b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402c9f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	for (size_t u = 0; u < len; u++)
  402ca3:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  402caa:	00 
  402cab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402caf:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  402cb3:	0f 92 c0             	setb   %al
  402cb6:	83 f0 01             	xor    $0x1,%eax
  402cb9:	84 c0                	test   %al,%al
  402cbb:	0f 85 a8 01 00 00    	jne    402e69 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x22c>
	{
	    if (s1[u] < s2[u])
  402cc1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  402cc5:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  402ccc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  402cd0:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  402cd4:	73 0d                	jae    402ce3 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0xa6>
  402cd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402cda:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  402ce1:	eb 22                	jmp    402d05 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0xc8>
  402ce3:	48 c7 45 b0 17 00 00 	movq   $0x17,-0x50(%rbp)
  402cea:	00 
  402ceb:	48 c7 45 b8 a7 fb 40 	movq   $0x40fba7,-0x48(%rbp)
  402cf2:	00 
  402cf3:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  402cf7:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  402cfb:	ba 5d 00 00 00       	mov    $0x5d,%edx
  402d00:	e8 70 7c 00 00       	callq  40a975 <_d_array_bounds>
  402d05:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  402d0c:	48 c1 e0 03          	shl    $0x3,%rax
  402d10:	48 03 85 20 ff ff ff 	add    -0xe0(%rbp),%rax
  402d17:	48 8b 00             	mov    (%rax),%rax
  402d1a:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  402d21:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  402d25:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  402d2c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402d30:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  402d34:	73 0d                	jae    402d43 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x106>
  402d36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402d3a:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  402d41:	eb 22                	jmp    402d65 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x128>
  402d43:	48 c7 45 c0 17 00 00 	movq   $0x17,-0x40(%rbp)
  402d4a:	00 
  402d4b:	48 c7 45 c8 a7 fb 40 	movq   $0x40fba7,-0x38(%rbp)
  402d52:	00 
  402d53:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  402d57:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  402d5b:	ba 5d 00 00 00       	mov    $0x5d,%edx
  402d60:	e8 10 7c 00 00       	callq  40a975 <_d_array_bounds>
  402d65:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  402d6c:	48 c1 e0 03          	shl    $0x3,%rax
  402d70:	48 03 85 38 ff ff ff 	add    -0xc8(%rbp),%rax
  402d77:	48 8b 00             	mov    (%rax),%rax
  402d7a:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
  402d81:	73 0f                	jae    402d92 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x155>
		return -1;
  402d83:	c7 85 4c ff ff ff ff 	movl   $0xffffffff,-0xb4(%rbp)
  402d8a:	ff ff ff 
  402d8d:	e9 13 01 00 00       	jmpq   402ea5 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x268>
	    else if (s1[u] > s2[u])
  402d92:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  402d96:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  402d9d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  402da1:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  402da5:	73 0d                	jae    402db4 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x177>
  402da7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402dab:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  402db2:	eb 22                	jmp    402dd6 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x199>
  402db4:	48 c7 45 d0 17 00 00 	movq   $0x17,-0x30(%rbp)
  402dbb:	00 
  402dbc:	48 c7 45 d8 a7 fb 40 	movq   $0x40fba7,-0x28(%rbp)
  402dc3:	00 
  402dc4:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  402dc8:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  402dcc:	ba 5f 00 00 00       	mov    $0x5f,%edx
  402dd1:	e8 9f 7b 00 00       	callq  40a975 <_d_array_bounds>
  402dd6:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  402ddd:	48 c1 e0 03          	shl    $0x3,%rax
  402de1:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  402de8:	48 8b 00             	mov    (%rax),%rax
  402deb:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  402df2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  402df6:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  402dfd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402e01:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  402e05:	73 0d                	jae    402e14 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x1d7>
  402e07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402e0b:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  402e12:	eb 22                	jmp    402e36 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x1f9>
  402e14:	48 c7 45 e0 17 00 00 	movq   $0x17,-0x20(%rbp)
  402e1b:	00 
  402e1c:	48 c7 45 e8 a7 fb 40 	movq   $0x40fba7,-0x18(%rbp)
  402e23:	00 
  402e24:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  402e28:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  402e2c:	ba 5f 00 00 00       	mov    $0x5f,%edx
  402e31:	e8 3f 7b 00 00       	callq  40a975 <_d_array_bounds>
  402e36:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  402e3d:	48 c1 e0 03          	shl    $0x3,%rax
  402e41:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  402e48:	48 8b 00             	mov    (%rax),%rax
  402e4b:	48 39 85 60 ff ff ff 	cmp    %rax,-0xa0(%rbp)
  402e52:	76 0c                	jbe    402e60 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x223>
		return 1;
  402e54:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  402e5b:	00 00 00 
  402e5e:	eb 45                	jmp    402ea5 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x268>

	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    if (s1[u] < s2[u])
  402e60:	48 ff 45 f8          	incq   -0x8(%rbp)
  402e64:	e9 42 fe ff ff       	jmpq   402cab <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x6e>
		return -1;
	    else if (s1[u] > s2[u])
		return 1;
	}
	if (s1.length < s2.length)
  402e69:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  402e6d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402e71:	48 39 c2             	cmp    %rax,%rdx
  402e74:	73 0c                	jae    402e82 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x245>
	    return -1;
  402e76:	c7 85 4c ff ff ff ff 	movl   $0xffffffff,-0xb4(%rbp)
  402e7d:	ff ff ff 
  402e80:	eb 23                	jmp    402ea5 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x268>
	else if (s1.length > s2.length)
  402e82:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  402e86:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402e8a:	48 39 c2             	cmp    %rax,%rdx
  402e8d:	76 0c                	jbe    402e9b <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x25e>
	    return 1;
  402e8f:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  402e96:	00 00 00 
  402e99:	eb 0a                	jmp    402ea5 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x268>
	return 0;
  402e9b:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  402ea2:	00 00 00 
  402ea5:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
    }
  402eab:	c9                   	leaveq 
  402eac:	c3                   	retq   

0000000000402ead <_D3std8typeinfo8ti_Along11TypeInfo_Am4nextMFZC8TypeInfo>:

    TypeInfo next()
  402ead:	55                   	push   %rbp
  402eae:	48 89 e5             	mov    %rsp,%rbp
  402eb1:	48 83 ec 10          	sub    $0x10,%rsp
  402eb5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402eb9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402ebd:	e8 ea 5f 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(ulong);
  402ec2:	48 c7 c0 d0 0f 41 00 	mov    $0x410fd0,%rax
    }
  402ec9:	c9                   	leaveq 
  402eca:	c3                   	retq   
  402ecb:	90                   	nop    

0000000000402ecc <_D3std8typeinfo8ti_Areal11TypeInfo_Ae8toStringMFZAa>:

// real[]

class TypeInfo_Ae : TypeInfo
{
    char[] toString() { return "real[]"; }
  402ecc:	55                   	push   %rbp
  402ecd:	48 89 e5             	mov    %rsp,%rbp
  402ed0:	53                   	push   %rbx
  402ed1:	48 83 ec 08          	sub    $0x8,%rsp
  402ed5:	48 89 fb             	mov    %rdi,%rbx
  402ed8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402edc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402ee0:	e8 c7 5f 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  402ee5:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  402eec:	48 c7 43 08 00 fd 40 	movq   $0x40fd00,0x8(%rbx)
  402ef3:	00 
  402ef4:	48 89 d8             	mov    %rbx,%rax
  402ef7:	48 83 c4 08          	add    $0x8,%rsp
  402efb:	5b                   	pop    %rbx
  402efc:	c9                   	leaveq 
  402efd:	c3                   	retq   

0000000000402efe <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7getHashMFPvZm>:

    hash_t getHash(void *p)
  402efe:	55                   	push   %rbp
  402eff:	48 89 e5             	mov    %rsp,%rbp
  402f02:	48 83 ec 40          	sub    $0x40,%rsp
  402f06:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  402f0a:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  402f0e:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  402f12:	e8 95 5f 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {	real[] s = *cast(real[]*)p;
  402f17:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  402f1b:	48 8b 02             	mov    (%rdx),%rax
  402f1e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  402f22:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402f26:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  402f2a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  402f2e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto str = s.ptr;
  402f32:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402f36:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  402f3a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  402f41:	00 

	while (len)
  402f42:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  402f47:	0f 95 c0             	setne  %al
  402f4a:	83 f0 01             	xor    $0x1,%eax
  402f4d:	84 c0                	test   %al,%al
  402f4f:	75 5e                	jne    402faf <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7getHashMFPvZm+0xb1>
	{
	    hash *= 9;
  402f51:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  402f55:	48 89 d0             	mov    %rdx,%rax
  402f58:	48 c1 e0 03          	shl    $0x3,%rax
  402f5c:	48 01 d0             	add    %rdx,%rax
  402f5f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[0];
  402f63:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  402f67:	b8 00 00 00 00       	mov    $0x0,%eax
  402f6c:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  402f70:	8b 00                	mov    (%rax),%eax
  402f72:	89 c0                	mov    %eax,%eax
  402f74:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[1];
  402f78:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  402f7c:	b8 04 00 00 00       	mov    $0x4,%eax
  402f81:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  402f85:	8b 00                	mov    (%rax),%eax
  402f87:	89 c0                	mov    %eax,%eax
  402f89:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(ushort *)str)[4];
  402f8d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  402f91:	b8 08 00 00 00       	mov    $0x8,%eax
  402f96:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  402f9a:	0f b7 00             	movzwl (%rax),%eax
  402f9d:	0f b7 c0             	movzwl %ax,%eax
  402fa0:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  402fa4:	48 83 45 f0 10       	addq   $0x10,-0x10(%rbp)
	    len--;
  402fa9:	48 ff 4d f8          	decq   -0x8(%rbp)
  402fad:	eb 93                	jmp    402f42 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7getHashMFPvZm+0x44>
	}

	return hash;
  402faf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  402fb3:	c9                   	leaveq 
  402fb4:	c3                   	retq   

0000000000402fb5 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  402fb5:	55                   	push   %rbp
  402fb6:	48 89 e5             	mov    %rsp,%rbp
  402fb9:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  402fc0:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  402fc4:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  402fc8:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  402fcc:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  402fd0:	e8 d7 5e 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	real[] s1 = *cast(real[]*)p1;
  402fd5:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  402fd9:	48 8b 02             	mov    (%rdx),%rax
  402fdc:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  402fe0:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402fe4:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	real[] s2 = *cast(real[]*)p2;
  402fe8:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  402fec:	48 8b 02             	mov    (%rdx),%rax
  402fef:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  402ff3:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402ff7:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  402ffb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402fff:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  403003:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403007:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40300b:	74 0f                	je     40301c <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x67>
	    return 0;
  40300d:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  403014:	00 00 00 
  403017:	e9 11 01 00 00       	jmpq   40312d <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x178>
	for (size_t u = 0; u < len; u++)
  40301c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  403023:	00 
  403024:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403028:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40302c:	0f 92 c0             	setb   %al
  40302f:	83 f0 01             	xor    $0x1,%eax
  403032:	84 c0                	test   %al,%al
  403034:	0f 85 e9 00 00 00    	jne    403123 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x16e>
	{
	    int c = TypeInfo_e._equals(s1[u], s2[u]);
  40303a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40303e:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  403045:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403049:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40304d:	73 0d                	jae    40305c <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0xa7>
  40304f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403053:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  40305a:	eb 22                	jmp    40307e <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0xc9>
  40305c:	48 c7 45 c0 17 00 00 	movq   $0x17,-0x40(%rbp)
  403063:	00 
  403064:	48 c7 45 c8 07 fd 40 	movq   $0x40fd07,-0x38(%rbp)
  40306b:	00 
  40306c:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  403070:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  403074:	ba 3f 00 00 00       	mov    $0x3f,%edx
  403079:	e8 f7 78 00 00       	callq  40a975 <_d_array_bounds>
  40307e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  403085:	48 c1 e0 04          	shl    $0x4,%rax
  403089:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  403090:	db 28                	fldt   (%rax)
  403092:	db bd 60 ff ff ff    	fstpt  -0xa0(%rbp)
  403098:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40309c:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4030a3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4030a7:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4030ab:	73 0a                	jae    4030b7 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x102>
  4030ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4030b1:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  4030b5:	eb 22                	jmp    4030d9 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x124>
  4030b7:	48 c7 45 d0 17 00 00 	movq   $0x17,-0x30(%rbp)
  4030be:	00 
  4030bf:	48 c7 45 d8 07 fd 40 	movq   $0x40fd07,-0x28(%rbp)
  4030c6:	00 
  4030c7:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4030cb:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4030cf:	ba 3f 00 00 00       	mov    $0x3f,%edx
  4030d4:	e8 9c 78 00 00       	callq  40a975 <_d_array_bounds>
  4030d9:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  4030dd:	48 c1 e0 04          	shl    $0x4,%rax
  4030e1:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  4030e8:	8b 50 08             	mov    0x8(%rax),%edx
  4030eb:	48 8b 00             	mov    (%rax),%rax
  4030ee:	db ad 60 ff ff ff    	fldt   -0xa0(%rbp)
  4030f4:	db 7c 24 10          	fstpt  0x10(%rsp)
  4030f8:	48 89 04 24          	mov    %rax,(%rsp)
  4030fc:	89 54 24 08          	mov    %edx,0x8(%rsp)
  403100:	e8 5c 22 00 00       	callq  405361 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi>
  403105:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  403108:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40310c:	75 0c                	jne    40311a <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x165>
		return 0;
  40310e:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  403115:	00 00 00 
  403118:	eb 13                	jmp    40312d <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x178>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_e._equals(s1[u], s2[u]);
	    if (c == 0)
  40311a:	48 ff 45 f0          	incq   -0x10(%rbp)
  40311e:	e9 01 ff ff ff       	jmpq   403024 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  403123:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  40312a:	00 00 00 
  40312d:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
    }
  403133:	c9                   	leaveq 
  403134:	c3                   	retq   

0000000000403135 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  403135:	55                   	push   %rbp
  403136:	48 89 e5             	mov    %rsp,%rbp
  403139:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  403140:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  403144:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  403148:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40314c:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  403150:	e8 57 5d 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	real[] s1 = *cast(real[]*)p1;
  403155:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  403159:	48 8b 02             	mov    (%rdx),%rax
  40315c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  403160:	48 8b 42 08          	mov    0x8(%rdx),%rax
  403164:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	real[] s2 = *cast(real[]*)p2;
  403168:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40316c:	48 8b 02             	mov    (%rdx),%rax
  40316f:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  403173:	48 8b 42 08          	mov    0x8(%rdx),%rax
  403177:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  40317b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40317f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  403183:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403187:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40318b:	73 08                	jae    403195 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x60>
	    len = s2.length;
  40318d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403191:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  403195:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40319c:	00 
  40319d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4031a1:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4031a5:	0f 92 c0             	setb   %al
  4031a8:	83 f0 01             	xor    $0x1,%eax
  4031ab:	84 c0                	test   %al,%al
  4031ad:	0f 85 eb 00 00 00    	jne    40329e <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x169>
	{
	    int c = TypeInfo_e._compare(s1[u], s2[u]);
  4031b3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4031b7:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  4031be:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4031c2:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4031c6:	73 0d                	jae    4031d5 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0xa0>
  4031c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4031cc:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  4031d3:	eb 22                	jmp    4031f7 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0xc2>
  4031d5:	48 c7 45 c0 17 00 00 	movq   $0x17,-0x40(%rbp)
  4031dc:	00 
  4031dd:	48 c7 45 c8 07 fd 40 	movq   $0x40fd07,-0x38(%rbp)
  4031e4:	00 
  4031e5:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4031e9:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4031ed:	ba 50 00 00 00       	mov    $0x50,%edx
  4031f2:	e8 7e 77 00 00       	callq  40a975 <_d_array_bounds>
  4031f7:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  4031fe:	48 c1 e0 04          	shl    $0x4,%rax
  403202:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  403209:	db 28                	fldt   (%rax)
  40320b:	db bd 60 ff ff ff    	fstpt  -0xa0(%rbp)
  403211:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  403215:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  40321c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403220:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  403224:	73 0d                	jae    403233 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0xfe>
  403226:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40322a:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  403231:	eb 22                	jmp    403255 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x120>
  403233:	48 c7 45 d0 17 00 00 	movq   $0x17,-0x30(%rbp)
  40323a:	00 
  40323b:	48 c7 45 d8 07 fd 40 	movq   $0x40fd07,-0x28(%rbp)
  403242:	00 
  403243:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  403247:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40324b:	ba 50 00 00 00       	mov    $0x50,%edx
  403250:	e8 20 77 00 00       	callq  40a975 <_d_array_bounds>
  403255:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40325c:	48 c1 e0 04          	shl    $0x4,%rax
  403260:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  403267:	8b 50 08             	mov    0x8(%rax),%edx
  40326a:	48 8b 00             	mov    (%rax),%rax
  40326d:	db ad 60 ff ff ff    	fldt   -0xa0(%rbp)
  403273:	db 7c 24 10          	fstpt  0x10(%rsp)
  403277:	48 89 04 24          	mov    %rax,(%rsp)
  40327b:	89 54 24 08          	mov    %edx,0x8(%rsp)
  40327f:	e8 35 21 00 00       	callq  4053b9 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi>
  403284:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  403287:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40328b:	74 08                	je     403295 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x160>
		return c;
  40328d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  403290:	89 45 84             	mov    %eax,-0x7c(%rbp)
  403293:	eb 3c                	jmp    4032d1 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x19c>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_e._compare(s1[u], s2[u]);
	    if (c)
  403295:	48 ff 45 f0          	incq   -0x10(%rbp)
  403299:	e9 ff fe ff ff       	jmpq   40319d <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  40329e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4032a2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4032a6:	48 39 c2             	cmp    %rax,%rdx
  4032a9:	73 09                	jae    4032b4 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x17f>
	    return -1;
  4032ab:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  4032b2:	eb 1d                	jmp    4032d1 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x19c>
	else if (s1.length > s2.length)
  4032b4:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4032b8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4032bc:	48 39 c2             	cmp    %rax,%rdx
  4032bf:	76 09                	jbe    4032ca <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x195>
	    return 1;
  4032c1:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  4032c8:	eb 07                	jmp    4032d1 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x19c>
	return 0;
  4032ca:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  4032d1:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  4032d4:	c9                   	leaveq 
  4032d5:	c3                   	retq   

00000000004032d6 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae5tsizeMFZm>:

    size_t tsize()
  4032d6:	55                   	push   %rbp
  4032d7:	48 89 e5             	mov    %rsp,%rbp
  4032da:	48 83 ec 10          	sub    $0x10,%rsp
  4032de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4032e2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4032e6:	e8 c1 5b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (real[]).sizeof;
  4032eb:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  4032f0:	c9                   	leaveq 
  4032f1:	c3                   	retq   

00000000004032f2 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae5flagsMFZk>:

    uint flags()
  4032f2:	55                   	push   %rbp
  4032f3:	48 89 e5             	mov    %rsp,%rbp
  4032f6:	48 83 ec 10          	sub    $0x10,%rsp
  4032fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4032fe:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403302:	e8 a5 5b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  403307:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  40330c:	c9                   	leaveq 
  40330d:	c3                   	retq   

000000000040330e <_D3std8typeinfo8ti_Areal11TypeInfo_Ae4nextMFZC8TypeInfo>:

    TypeInfo next()
  40330e:	55                   	push   %rbp
  40330f:	48 89 e5             	mov    %rsp,%rbp
  403312:	48 83 ec 10          	sub    $0x10,%rsp
  403316:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40331a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40331e:	e8 89 5b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(real);
  403323:	48 c7 c0 30 0c 41 00 	mov    $0x410c30,%rax
    }
  40332a:	c9                   	leaveq 
  40332b:	c3                   	retq   

000000000040332c <_D3std8typeinfo8ti_Areal11TypeInfo_Aj8toStringMFZAa>:

// ireal[]

class TypeInfo_Aj : TypeInfo_Ae
{
    char[] toString() { return "ireal[]"; }
  40332c:	55                   	push   %rbp
  40332d:	48 89 e5             	mov    %rsp,%rbp
  403330:	53                   	push   %rbx
  403331:	48 83 ec 08          	sub    $0x8,%rsp
  403335:	48 89 fb             	mov    %rdi,%rbx
  403338:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40333c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  403340:	e8 67 5b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  403345:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  40334c:	48 c7 43 08 b0 fd 40 	movq   $0x40fdb0,0x8(%rbx)
  403353:	00 
  403354:	48 89 d8             	mov    %rbx,%rax
  403357:	48 83 c4 08          	add    $0x8,%rsp
  40335b:	5b                   	pop    %rbx
  40335c:	c9                   	leaveq 
  40335d:	c3                   	retq   

000000000040335e <_D3std8typeinfo8ti_Areal11TypeInfo_Aj4nextMFZC8TypeInfo>:

    TypeInfo next()
  40335e:	55                   	push   %rbp
  40335f:	48 89 e5             	mov    %rsp,%rbp
  403362:	48 83 ec 10          	sub    $0x10,%rsp
  403366:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40336a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40336e:	e8 39 5b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(ireal);
  403373:	48 c7 c0 10 0a 41 00 	mov    $0x410a10,%rax
    }
  40337a:	c9                   	leaveq 
  40337b:	c3                   	retq   

000000000040337c <_D3std8typeinfo9ti_Ashort11TypeInfo_As8toStringMFZAa>:

// short[]

class TypeInfo_As : TypeInfo
{
    char[] toString() { return "short[]"; }
  40337c:	55                   	push   %rbp
  40337d:	48 89 e5             	mov    %rsp,%rbp
  403380:	53                   	push   %rbx
  403381:	48 83 ec 08          	sub    $0x8,%rsp
  403385:	48 89 fb             	mov    %rdi,%rbx
  403388:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40338c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  403390:	e8 17 5b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  403395:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  40339c:	48 c7 43 08 60 fe 40 	movq   $0x40fe60,0x8(%rbx)
  4033a3:	00 
  4033a4:	48 89 d8             	mov    %rbx,%rax
  4033a7:	48 83 c4 08          	add    $0x8,%rsp
  4033ab:	5b                   	pop    %rbx
  4033ac:	c9                   	leaveq 
  4033ad:	c3                   	retq   

00000000004033ae <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm>:

    hash_t getHash(void *p)
  4033ae:	55                   	push   %rbp
  4033af:	48 89 e5             	mov    %rsp,%rbp
  4033b2:	48 83 ec 50          	sub    $0x50,%rsp
  4033b6:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  4033ba:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  4033be:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4033c2:	e8 e5 5a 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {	short[] s = *cast(short[]*)p;
  4033c7:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4033cb:	48 8b 02             	mov    (%rdx),%rax
  4033ce:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4033d2:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4033d6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  4033da:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4033de:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	short *str = s.ptr;
  4033e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4033e6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  4033ea:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4033f1:	00 

	while (1)
  4033f2:	b8 00 00 00 00       	mov    $0x0,%eax
  4033f7:	84 c0                	test   %al,%al
  4033f9:	75 76                	jne    403471 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0xc3>
		default:
		    hash *= 9;
		    hash += *cast(uint *)str;
		    str += 2;
		    len -= 2;
		    break;
  4033fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4033ff:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  403403:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  403408:	74 09                	je     403413 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0x65>
  40340a:	48 83 7d b0 01       	cmpq   $0x1,-0x50(%rbp)
  40340f:	74 0c                	je     40341d <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0x6f>
  403411:	eb 34                	jmp    403447 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0x99>
	while (1)
	{
	    switch (len)
	    {
		case 0:
		    return hash;
  403413:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403417:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40341b:	eb 5c                	jmp    403479 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0xcb>

		case 1:
		    hash *= 9;
  40341d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  403421:	48 89 d0             	mov    %rdx,%rax
  403424:	48 c1 e0 03          	shl    $0x3,%rax
  403428:	48 01 d0             	add    %rdx,%rax
  40342b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += *cast(ushort *)str;
  40342f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403433:	0f b7 00             	movzwl (%rax),%eax
  403436:	0f b7 c0             	movzwl %ax,%eax
  403439:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		    return hash;
  40343d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403441:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  403445:	eb 32                	jmp    403479 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0xcb>

		default:
		    hash *= 9;
  403447:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40344b:	48 89 d0             	mov    %rdx,%rax
  40344e:	48 c1 e0 03          	shl    $0x3,%rax
  403452:	48 01 d0             	add    %rdx,%rax
  403455:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += *cast(uint *)str;
  403459:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40345d:	8b 00                	mov    (%rax),%eax
  40345f:	89 c0                	mov    %eax,%eax
  403461:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		    str += 2;
  403465:	48 83 45 f0 04       	addq   $0x4,-0x10(%rbp)
		    len -= 2;
  40346a:	48 83 6d f8 02       	subq   $0x2,-0x8(%rbp)
		    break;
  40346f:	eb 81                	jmp    4033f2 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0x44>
	    }
	}

	return hash;
  403471:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403475:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  403479:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    }
  40347d:	c9                   	leaveq 
  40347e:	c3                   	retq   

000000000040347f <_D3std8typeinfo9ti_Ashort11TypeInfo_As6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  40347f:	55                   	push   %rbp
  403480:	48 89 e5             	mov    %rsp,%rbp
  403483:	48 83 ec 40          	sub    $0x40,%rsp
  403487:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40348b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40348f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  403493:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  403497:	e8 10 5a 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	short[] s1 = *cast(short[]*)p1;
  40349c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4034a0:	48 8b 02             	mov    (%rdx),%rax
  4034a3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4034a7:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4034ab:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	short[] s2 = *cast(short[]*)p2;
  4034af:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4034b3:	48 8b 02             	mov    (%rdx),%rax
  4034b6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4034ba:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4034be:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return s1.length == s2.length &&
  4034c2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4034c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4034ca:	48 39 c2             	cmp    %rax,%rdx
  4034cd:	75 26                	jne    4034f5 <_D3std8typeinfo9ti_Ashort11TypeInfo_As6equalsMFPvPvZi+0x76>
  4034cf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4034d3:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  4034d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4034db:	48 89 c6             	mov    %rax,%rsi
  4034de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4034e2:	48 89 c7             	mov    %rax,%rdi
  4034e5:	e8 fa 9e 00 00       	callq  40d3e4 <_D6kernel4core6system6memcmpFPvPvmZl>
  4034ea:	48 85 c0             	test   %rax,%rax
  4034ed:	75 06                	jne    4034f5 <_D3std8typeinfo9ti_Ashort11TypeInfo_As6equalsMFPvPvZi+0x76>
  4034ef:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
  4034f3:	eb 04                	jmp    4034f9 <_D3std8typeinfo9ti_Ashort11TypeInfo_As6equalsMFPvPvZi+0x7a>
  4034f5:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  4034f9:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
	       memcmp(cast(ubyte*)s1.ptr, cast(ubyte*)s2.ptr, s1.length * short.sizeof) == 0;
    }
  4034fd:	c9                   	leaveq 
  4034fe:	c3                   	retq   

00000000004034ff <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4034ff:	55                   	push   %rbp
  403500:	48 89 e5             	mov    %rsp,%rbp
  403503:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  40350a:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40350e:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  403512:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  403516:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40351a:	e8 8d 59 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	short[] s1 = *cast(short[]*)p1;
  40351f:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  403523:	48 8b 02             	mov    (%rdx),%rax
  403526:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40352a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40352e:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	short[] s2 = *cast(short[]*)p2;
  403532:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  403536:	48 8b 02             	mov    (%rdx),%rax
  403539:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40353d:	48 8b 42 08          	mov    0x8(%rdx),%rax
  403541:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  403545:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403549:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  40354d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403551:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  403555:	73 08                	jae    40355f <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x60>
	    len = s2.length;
  403557:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40355b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  40355f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  403566:	00 
  403567:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40356b:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40356f:	0f 92 c0             	setb   %al
  403572:	83 f0 01             	xor    $0x1,%eax
  403575:	84 c0                	test   %al,%al
  403577:	0f 85 dc 00 00 00    	jne    403659 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x15a>
	{
	    int result = s1[u] - s2[u];
  40357d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  403581:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  403588:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40358c:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  403590:	73 0d                	jae    40359f <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0xa0>
  403592:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403596:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  40359d:	eb 22                	jmp    4035c1 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0xc2>
  40359f:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  4035a6:	00 
  4035a7:	48 c7 45 c8 68 fe 40 	movq   $0x40fe68,-0x38(%rbp)
  4035ae:	00 
  4035af:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4035b3:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4035b7:	ba 3d 00 00 00       	mov    $0x3d,%edx
  4035bc:	e8 b4 73 00 00       	callq  40a975 <_d_array_bounds>
  4035c1:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4035c8:	48 01 c0             	add    %rax,%rax
  4035cb:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  4035d2:	0f b7 00             	movzwl (%rax),%eax
  4035d5:	98                   	cwtl   
  4035d6:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  4035dc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4035e0:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  4035e7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4035eb:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4035ef:	73 0d                	jae    4035fe <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0xff>
  4035f1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4035f5:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  4035fc:	eb 22                	jmp    403620 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x121>
  4035fe:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  403605:	00 
  403606:	48 c7 45 d8 68 fe 40 	movq   $0x40fe68,-0x28(%rbp)
  40360d:	00 
  40360e:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  403612:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  403616:	ba 3d 00 00 00       	mov    $0x3d,%edx
  40361b:	e8 55 73 00 00       	callq  40a975 <_d_array_bounds>
  403620:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  403627:	48 01 c0             	add    %rax,%rax
  40362a:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  403631:	0f b7 00             	movzwl (%rax),%eax
  403634:	98                   	cwtl   
  403635:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  40363b:	29 c2                	sub    %eax,%edx
  40363d:	89 d0                	mov    %edx,%eax
  40363f:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (result)
  403642:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  403646:	74 08                	je     403650 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x151>
		return result;
  403648:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40364b:	89 45 84             	mov    %eax,-0x7c(%rbp)
  40364e:	eb 3c                	jmp    40368c <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x18d>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int result = s1[u] - s2[u];
	    if (result)
  403650:	48 ff 45 f0          	incq   -0x10(%rbp)
  403654:	e9 0e ff ff ff       	jmpq   403567 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x68>
		return result;
	}
	if (s1.length < s2.length)
  403659:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40365d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403661:	48 39 c2             	cmp    %rax,%rdx
  403664:	73 09                	jae    40366f <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x170>
	    return -1;
  403666:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  40366d:	eb 1d                	jmp    40368c <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x18d>
	else if (s1.length > s2.length)
  40366f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  403673:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403677:	48 39 c2             	cmp    %rax,%rdx
  40367a:	76 09                	jbe    403685 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x186>
	    return 1;
  40367c:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  403683:	eb 07                	jmp    40368c <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x18d>
	return 0;
  403685:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  40368c:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  40368f:	c9                   	leaveq 
  403690:	c3                   	retq   

0000000000403691 <_D3std8typeinfo9ti_Ashort11TypeInfo_As5tsizeMFZm>:

    size_t tsize()
  403691:	55                   	push   %rbp
  403692:	48 89 e5             	mov    %rsp,%rbp
  403695:	48 83 ec 10          	sub    $0x10,%rsp
  403699:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40369d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4036a1:	e8 06 58 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (short[]).sizeof;
  4036a6:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  4036ab:	c9                   	leaveq 
  4036ac:	c3                   	retq   

00000000004036ad <_D3std8typeinfo9ti_Ashort11TypeInfo_As5flagsMFZk>:

    uint flags()
  4036ad:	55                   	push   %rbp
  4036ae:	48 89 e5             	mov    %rsp,%rbp
  4036b1:	48 83 ec 10          	sub    $0x10,%rsp
  4036b5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4036b9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4036bd:	e8 ea 57 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  4036c2:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  4036c7:	c9                   	leaveq 
  4036c8:	c3                   	retq   

00000000004036c9 <_D3std8typeinfo9ti_Ashort11TypeInfo_As4nextMFZC8TypeInfo>:

    TypeInfo next()
  4036c9:	55                   	push   %rbp
  4036ca:	48 89 e5             	mov    %rsp,%rbp
  4036cd:	48 83 ec 10          	sub    $0x10,%rsp
  4036d1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4036d5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4036d9:	e8 ce 57 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(short);
  4036de:	48 c7 c0 f0 0c 41 00 	mov    $0x410cf0,%rax
    }
  4036e5:	c9                   	leaveq 
  4036e6:	c3                   	retq   

00000000004036e7 <_D3std8typeinfo9ti_Ashort11TypeInfo_At8toStringMFZAa>:

// ushort[]

class TypeInfo_At : TypeInfo_As
{
    char[] toString() { return "ushort[]"; }
  4036e7:	55                   	push   %rbp
  4036e8:	48 89 e5             	mov    %rsp,%rbp
  4036eb:	53                   	push   %rbx
  4036ec:	48 83 ec 08          	sub    $0x8,%rsp
  4036f0:	48 89 fb             	mov    %rdi,%rbx
  4036f3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4036f7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4036fb:	e8 ac 57 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  403700:	48 c7 03 08 00 00 00 	movq   $0x8,(%rbx)
  403707:	48 c7 43 08 30 ff 40 	movq   $0x40ff30,0x8(%rbx)
  40370e:	00 
  40370f:	48 89 d8             	mov    %rbx,%rax
  403712:	48 83 c4 08          	add    $0x8,%rsp
  403716:	5b                   	pop    %rbx
  403717:	c9                   	leaveq 
  403718:	c3                   	retq   

0000000000403719 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  403719:	55                   	push   %rbp
  40371a:	48 89 e5             	mov    %rsp,%rbp
  40371d:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  403724:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  403728:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  40372c:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  403730:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  403734:	e8 73 57 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ushort[] s1 = *cast(ushort[]*)p1;
  403739:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40373d:	48 8b 02             	mov    (%rdx),%rax
  403740:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  403744:	48 8b 42 08          	mov    0x8(%rdx),%rax
  403748:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	ushort[] s2 = *cast(ushort[]*)p2;
  40374c:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  403750:	48 8b 02             	mov    (%rdx),%rax
  403753:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  403757:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40375b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  40375f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403763:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  403767:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40376b:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40376f:	73 08                	jae    403779 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x60>
	    len = s2.length;
  403771:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403775:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  403779:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  403780:	00 
  403781:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403785:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  403789:	0f 92 c0             	setb   %al
  40378c:	83 f0 01             	xor    $0x1,%eax
  40378f:	84 c0                	test   %al,%al
  403791:	0f 85 e0 00 00 00    	jne    403877 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x15e>
	{
	    int result = s1[u] - s2[u];
  403797:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40379b:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  4037a2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4037a6:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4037aa:	73 0d                	jae    4037b9 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0xa0>
  4037ac:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4037b0:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  4037b7:	eb 22                	jmp    4037db <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0xc2>
  4037b9:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  4037c0:	00 
  4037c1:	48 c7 45 c8 68 fe 40 	movq   $0x40fe68,-0x38(%rbp)
  4037c8:	00 
  4037c9:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4037cd:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4037d1:	ba 69 00 00 00       	mov    $0x69,%edx
  4037d6:	e8 9a 71 00 00       	callq  40a975 <_d_array_bounds>
  4037db:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4037e2:	48 01 c0             	add    %rax,%rax
  4037e5:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  4037ec:	0f b7 00             	movzwl (%rax),%eax
  4037ef:	0f b7 c0             	movzwl %ax,%eax
  4037f2:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  4037f8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4037fc:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  403803:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403807:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40380b:	73 0d                	jae    40381a <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x101>
  40380d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403811:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  403818:	eb 22                	jmp    40383c <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x123>
  40381a:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  403821:	00 
  403822:	48 c7 45 d8 68 fe 40 	movq   $0x40fe68,-0x28(%rbp)
  403829:	00 
  40382a:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40382e:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  403832:	ba 69 00 00 00       	mov    $0x69,%edx
  403837:	e8 39 71 00 00       	callq  40a975 <_d_array_bounds>
  40383c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  403843:	48 01 c0             	add    %rax,%rax
  403846:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  40384d:	0f b7 00             	movzwl (%rax),%eax
  403850:	0f b7 c0             	movzwl %ax,%eax
  403853:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  403859:	29 c2                	sub    %eax,%edx
  40385b:	89 d0                	mov    %edx,%eax
  40385d:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (result)
  403860:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  403864:	74 08                	je     40386e <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x155>
		return result;
  403866:	8b 45 fc             	mov    -0x4(%rbp),%eax
  403869:	89 45 84             	mov    %eax,-0x7c(%rbp)
  40386c:	eb 3c                	jmp    4038aa <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x191>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int result = s1[u] - s2[u];
	    if (result)
  40386e:	48 ff 45 f0          	incq   -0x10(%rbp)
  403872:	e9 0a ff ff ff       	jmpq   403781 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x68>
		return result;
	}
	if (s1.length < s2.length)
  403877:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40387b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40387f:	48 39 c2             	cmp    %rax,%rdx
  403882:	73 09                	jae    40388d <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x174>
	    return -1;
  403884:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  40388b:	eb 1d                	jmp    4038aa <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x191>
	else if (s1.length > s2.length)
  40388d:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  403891:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403895:	48 39 c2             	cmp    %rax,%rdx
  403898:	76 09                	jbe    4038a3 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x18a>
	    return 1;
  40389a:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  4038a1:	eb 07                	jmp    4038aa <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x191>
	return 0;
  4038a3:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  4038aa:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  4038ad:	c9                   	leaveq 
  4038ae:	c3                   	retq   

00000000004038af <_D3std8typeinfo9ti_Ashort11TypeInfo_At4nextMFZC8TypeInfo>:

    TypeInfo next()
  4038af:	55                   	push   %rbp
  4038b0:	48 89 e5             	mov    %rsp,%rbp
  4038b3:	48 83 ec 10          	sub    $0x10,%rsp
  4038b7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4038bb:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4038bf:	e8 e8 55 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(ushort);
  4038c4:	48 c7 c0 90 10 41 00 	mov    $0x411090,%rax
    }
  4038cb:	c9                   	leaveq 
  4038cc:	c3                   	retq   

00000000004038cd <_D3std8typeinfo9ti_Ashort11TypeInfo_Au8toStringMFZAa>:

// wchar[]

class TypeInfo_Au : TypeInfo_At
{
    char[] toString() { return "wchar[]"; }
  4038cd:	55                   	push   %rbp
  4038ce:	48 89 e5             	mov    %rsp,%rbp
  4038d1:	53                   	push   %rbx
  4038d2:	48 83 ec 08          	sub    $0x8,%rsp
  4038d6:	48 89 fb             	mov    %rdi,%rbx
  4038d9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4038dd:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4038e1:	e8 c6 55 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  4038e6:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  4038ed:	48 c7 43 08 d0 ff 40 	movq   $0x40ffd0,0x8(%rbx)
  4038f4:	00 
  4038f5:	48 89 d8             	mov    %rbx,%rax
  4038f8:	48 83 c4 08          	add    $0x8,%rsp
  4038fc:	5b                   	pop    %rbx
  4038fd:	c9                   	leaveq 
  4038fe:	c3                   	retq   

00000000004038ff <_D3std8typeinfo9ti_Ashort11TypeInfo_Au4nextMFZC8TypeInfo>:

    TypeInfo next()
  4038ff:	55                   	push   %rbp
  403900:	48 89 e5             	mov    %rsp,%rbp
  403903:	48 83 ec 10          	sub    $0x10,%rsp
  403907:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40390b:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40390f:	e8 98 55 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(wchar);
  403914:	48 c7 c0 10 12 41 00 	mov    $0x411210,%rax
    }
  40391b:	c9                   	leaveq 
  40391c:	c3                   	retq   
  40391d:	90                   	nop    
  40391e:	90                   	nop    
  40391f:	90                   	nop    

0000000000403920 <_D3std8typeinfo7ti_byte10TypeInfo_g8toStringMFZAa>:

module std.typeinfo.ti_byte;

class TypeInfo_g : TypeInfo
{
    char[] toString() { return "byte"; }
  403920:	55                   	push   %rbp
  403921:	48 89 e5             	mov    %rsp,%rbp
  403924:	53                   	push   %rbx
  403925:	48 83 ec 08          	sub    $0x8,%rsp
  403929:	48 89 fb             	mov    %rdi,%rbx
  40392c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403930:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  403934:	e8 73 55 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  403939:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  403940:	48 c7 43 08 80 00 41 	movq   $0x410080,0x8(%rbx)
  403947:	00 
  403948:	48 89 d8             	mov    %rbx,%rax
  40394b:	48 83 c4 08          	add    $0x8,%rsp
  40394f:	5b                   	pop    %rbx
  403950:	c9                   	leaveq 
  403951:	c3                   	retq   

0000000000403952 <_D3std8typeinfo7ti_byte10TypeInfo_g7getHashMFPvZm>:

    hash_t getHash(void *p)
  403952:	55                   	push   %rbp
  403953:	48 89 e5             	mov    %rsp,%rbp
  403956:	48 83 ec 10          	sub    $0x10,%rsp
  40395a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40395e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403962:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403966:	e8 41 55 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(byte *)p;
  40396b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40396f:	0f b6 00             	movzbl (%rax),%eax
  403972:	48 0f be c0          	movsbq %al,%rax
    }
  403976:	c9                   	leaveq 
  403977:	c3                   	retq   

0000000000403978 <_D3std8typeinfo7ti_byte10TypeInfo_g6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  403978:	55                   	push   %rbp
  403979:	48 89 e5             	mov    %rsp,%rbp
  40397c:	48 83 ec 20          	sub    $0x20,%rsp
  403980:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403984:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403988:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40398c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403990:	e8 17 55 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(byte *)p1 == *cast(byte *)p2;
  403995:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403999:	0f b6 10             	movzbl (%rax),%edx
  40399c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4039a0:	0f b6 00             	movzbl (%rax),%eax
  4039a3:	38 c2                	cmp    %al,%dl
  4039a5:	0f 94 c0             	sete   %al
  4039a8:	0f b6 c0             	movzbl %al,%eax
    }
  4039ab:	c9                   	leaveq 
  4039ac:	c3                   	retq   

00000000004039ad <_D3std8typeinfo7ti_byte10TypeInfo_g7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4039ad:	55                   	push   %rbp
  4039ae:	48 89 e5             	mov    %rsp,%rbp
  4039b1:	48 83 ec 20          	sub    $0x20,%rsp
  4039b5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4039b9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4039bd:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4039c1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4039c5:	e8 e2 54 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(byte *)p1 - *cast(byte *)p2;
  4039ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4039ce:	0f b6 00             	movzbl (%rax),%eax
  4039d1:	0f be d0             	movsbl %al,%edx
  4039d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4039d8:	0f b6 00             	movzbl (%rax),%eax
  4039db:	0f be c0             	movsbl %al,%eax
  4039de:	89 d1                	mov    %edx,%ecx
  4039e0:	29 c1                	sub    %eax,%ecx
  4039e2:	89 c8                	mov    %ecx,%eax
    }
  4039e4:	c9                   	leaveq 
  4039e5:	c3                   	retq   

00000000004039e6 <_D3std8typeinfo7ti_byte10TypeInfo_g5tsizeMFZm>:

    size_t tsize()
  4039e6:	55                   	push   %rbp
  4039e7:	48 89 e5             	mov    %rsp,%rbp
  4039ea:	48 83 ec 10          	sub    $0x10,%rsp
  4039ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4039f2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4039f6:	e8 b1 54 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return byte.sizeof;
  4039fb:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  403a00:	c9                   	leaveq 
  403a01:	c3                   	retq   

0000000000403a02 <_D3std8typeinfo7ti_byte10TypeInfo_g4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  403a02:	55                   	push   %rbp
  403a03:	48 89 e5             	mov    %rsp,%rbp
  403a06:	48 83 ec 30          	sub    $0x30,%rsp
  403a0a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  403a0e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  403a12:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  403a16:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  403a1a:	e8 8d 54 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	byte t;
  403a1f:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)

	t = *cast(byte *)p1;
  403a23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  403a27:	0f b6 00             	movzbl (%rax),%eax
  403a2a:	88 45 ff             	mov    %al,-0x1(%rbp)
	*cast(byte *)p1 = *cast(byte *)p2;
  403a2d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  403a31:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403a35:	0f b6 00             	movzbl (%rax),%eax
  403a38:	88 02                	mov    %al,(%rdx)
	*cast(byte *)p2 = t;
  403a3a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  403a3e:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  403a42:	88 02                	mov    %al,(%rdx)
    }
  403a44:	c9                   	leaveq 
  403a45:	c3                   	retq   
  403a46:	90                   	nop    
  403a47:	90                   	nop    

0000000000403a48 <_D3std8typeinfo4ti_C10TypeInfo_C7getHashMFPvZm>:

// Object

class TypeInfo_C : TypeInfo
{
    hash_t getHash(void *p)
  403a48:	55                   	push   %rbp
  403a49:	48 89 e5             	mov    %rsp,%rbp
  403a4c:	48 83 ec 20          	sub    $0x20,%rsp
  403a50:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  403a54:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  403a58:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  403a5c:	e8 4b 54 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	Object o = *cast(Object*)p;
  403a61:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  403a65:	48 8b 00             	mov    (%rax),%rax
  403a68:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(o);
  403a6c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403a70:	e8 37 54 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	return o.toHash();
  403a75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403a79:	48 8b 00             	mov    (%rax),%rax
  403a7c:	48 83 c0 10          	add    $0x10,%rax
  403a80:	48 8b 00             	mov    (%rax),%rax
  403a83:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403a87:	ff d0                	callq  *%rax
    }
  403a89:	c9                   	leaveq 
  403a8a:	c3                   	retq   

0000000000403a8b <_D3std8typeinfo4ti_C10TypeInfo_C6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  403a8b:	55                   	push   %rbp
  403a8c:	48 89 e5             	mov    %rsp,%rbp
  403a8f:	48 83 ec 30          	sub    $0x30,%rsp
  403a93:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  403a97:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  403a9b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  403a9f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  403aa3:	e8 04 54 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	Object o1 = *cast(Object*)p1;
  403aa8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  403aac:	48 8b 00             	mov    (%rax),%rax
  403aaf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	Object o2 = *cast(Object*)p2;
  403ab3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403ab7:	48 8b 00             	mov    (%rax),%rax
  403aba:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	return o1 == o2;
  403abe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403ac2:	48 8b 00             	mov    (%rax),%rax
  403ac5:	48 83 c0 20          	add    $0x20,%rax
  403ac9:	48 8b 00             	mov    (%rax),%rax
  403acc:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  403ad0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403ad4:	ff d0                	callq  *%rax
    }
  403ad6:	c9                   	leaveq 
  403ad7:	c3                   	retq   

0000000000403ad8 <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  403ad8:	55                   	push   %rbp
  403ad9:	48 89 e5             	mov    %rsp,%rbp
  403adc:	48 83 ec 40          	sub    $0x40,%rsp
  403ae0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  403ae4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  403ae8:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  403aec:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  403af0:	e8 b7 53 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	Object o1 = *cast(Object*)p1;
  403af5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  403af9:	48 8b 00             	mov    (%rax),%rax
  403afc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	Object o2 = *cast(Object*)p2;
  403b00:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  403b04:	48 8b 00             	mov    (%rax),%rax
  403b07:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	int c = 0;
  403b0b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)

	// Regard null references as always being "less than"
	if (!(o1 is o2))
  403b12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403b16:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  403b1a:	0f 94 c0             	sete   %al
  403b1d:	83 f0 01             	xor    $0x1,%eax
  403b20:	84 c0                	test   %al,%al
  403b22:	74 43                	je     403b67 <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi+0x8f>
	{
	    if (o1)
  403b24:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  403b29:	74 35                	je     403b60 <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi+0x88>
	    {	if (!o2)
  403b2b:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  403b30:	0f 95 c0             	setne  %al
  403b33:	83 f0 01             	xor    $0x1,%eax
  403b36:	84 c0                	test   %al,%al
  403b38:	74 09                	je     403b43 <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi+0x6b>
		    c = 1;
  403b3a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  403b41:	eb 24                	jmp    403b67 <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi+0x8f>
		else
		    c = o1.opCmp(o2);
  403b43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403b47:	48 8b 00             	mov    (%rax),%rax
  403b4a:	48 83 c0 18          	add    $0x18,%rax
  403b4e:	48 8b 00             	mov    (%rax),%rax
  403b51:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  403b55:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403b59:	ff d0                	callq  *%rax
  403b5b:	89 45 ec             	mov    %eax,-0x14(%rbp)
  403b5e:	eb 07                	jmp    403b67 <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi+0x8f>
	    }
	    else
		c = -1;
  403b60:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rbp)
	}
	return c;
  403b67:	8b 45 ec             	mov    -0x14(%rbp),%eax
    }
  403b6a:	c9                   	leaveq 
  403b6b:	c3                   	retq   

0000000000403b6c <_D3std8typeinfo4ti_C10TypeInfo_C5tsizeMFZm>:

    size_t tsize()
  403b6c:	55                   	push   %rbp
  403b6d:	48 89 e5             	mov    %rsp,%rbp
  403b70:	48 83 ec 10          	sub    $0x10,%rsp
  403b74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403b78:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403b7c:	e8 2b 53 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return Object.sizeof;
  403b81:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  403b86:	c9                   	leaveq 
  403b87:	c3                   	retq   

0000000000403b88 <_D3std8typeinfo4ti_C10TypeInfo_C5flagsMFZk>:

    uint flags()
  403b88:	55                   	push   %rbp
  403b89:	48 89 e5             	mov    %rsp,%rbp
  403b8c:	48 83 ec 10          	sub    $0x10,%rsp
  403b90:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403b94:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403b98:	e8 0f 53 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  403b9d:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  403ba2:	c9                   	leaveq 
  403ba3:	c3                   	retq   

0000000000403ba4 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8toStringMFZAa>:

module std.typeinfo.ti_cdouble;

class TypeInfo_r : TypeInfo
{
    char[] toString() { return "cdouble"; }
  403ba4:	55                   	push   %rbp
  403ba5:	48 89 e5             	mov    %rsp,%rbp
  403ba8:	53                   	push   %rbx
  403ba9:	48 83 ec 08          	sub    $0x8,%rsp
  403bad:	48 89 fb             	mov    %rdi,%rbx
  403bb0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403bb4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  403bb8:	e8 ef 52 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  403bbd:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  403bc4:	48 c7 43 08 e0 01 41 	movq   $0x4101e0,0x8(%rbx)
  403bcb:	00 
  403bcc:	48 89 d8             	mov    %rbx,%rax
  403bcf:	48 83 c4 08          	add    $0x8,%rsp
  403bd3:	5b                   	pop    %rbx
  403bd4:	c9                   	leaveq 
  403bd5:	c3                   	retq   

0000000000403bd6 <_D3std8typeinfo10ti_cdouble10TypeInfo_r7getHashMFPvZm>:

    hash_t getHash(void *p)
  403bd6:	55                   	push   %rbp
  403bd7:	48 89 e5             	mov    %rsp,%rbp
  403bda:	48 83 ec 10          	sub    $0x10,%rsp
  403bde:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403be2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403be6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403bea:	e8 bd 52 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cast(uint *)p)[0] + (cast(uint *)p)[1] +
  403bef:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403bf3:	b8 00 00 00 00       	mov    $0x0,%eax
  403bf8:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  403bfc:	8b 08                	mov    (%rax),%ecx
  403bfe:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403c02:	b8 04 00 00 00       	mov    $0x4,%eax
  403c07:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  403c0b:	8b 00                	mov    (%rax),%eax
  403c0d:	01 c1                	add    %eax,%ecx
  403c0f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403c13:	b8 08 00 00 00       	mov    $0x8,%eax
  403c18:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  403c1c:	8b 00                	mov    (%rax),%eax
  403c1e:	01 c1                	add    %eax,%ecx
  403c20:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403c24:	b8 0c 00 00 00       	mov    $0xc,%eax
  403c29:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  403c2d:	8b 00                	mov    (%rax),%eax
  403c2f:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  403c32:	89 c0                	mov    %eax,%eax
	       (cast(uint *)p)[2] + (cast(uint *)p)[3];
    }
  403c34:	c9                   	leaveq 
  403c35:	c3                   	retq   

0000000000403c36 <_D3std8typeinfo10ti_cdouble10TypeInfo_r7_equalsFrrZi>:

    static int _equals(cdouble f1, cdouble f2)
  403c36:	55                   	push   %rbp
  403c37:	48 89 e5             	mov    %rsp,%rbp
  403c3a:	f2 0f 11 45 d8       	movsd  %xmm0,-0x28(%rbp)
  403c3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403c43:	f2 0f 11 4d d8       	movsd  %xmm1,-0x28(%rbp)
  403c48:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  403c4c:	f2 0f 11 55 d8       	movsd  %xmm2,-0x28(%rbp)
  403c51:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  403c55:	f2 0f 11 5d d8       	movsd  %xmm3,-0x28(%rbp)
  403c5a:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  403c5e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  403c62:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  403c66:	48 89 c8             	mov    %rcx,%rax
  403c69:	48 89 f2             	mov    %rsi,%rdx
  403c6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  403c70:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    {
	return f1 == f2;
  403c74:	66 0f 12 4d f0       	movlpd -0x10(%rbp),%xmm1
  403c79:	66 0f 12 5d f8       	movlpd -0x8(%rbp),%xmm3
  403c7e:	66 0f 12 45 e0       	movlpd -0x20(%rbp),%xmm0
  403c83:	66 0f 12 55 e8       	movlpd -0x18(%rbp),%xmm2
  403c88:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
  403c8c:	0f 94 c1             	sete   %cl
  403c8f:	0f 9b c0             	setnp  %al
  403c92:	21 c1                	and    %eax,%ecx
  403c94:	66 0f 2e da          	ucomisd %xmm2,%xmm3
  403c98:	0f 94 c0             	sete   %al
  403c9b:	0f 9b c2             	setnp  %dl
  403c9e:	21 d0                	and    %edx,%eax
  403ca0:	21 c8                	and    %ecx,%eax
  403ca2:	0f b6 c0             	movzbl %al,%eax
    }
  403ca5:	c9                   	leaveq 
  403ca6:	c3                   	retq   

0000000000403ca7 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi>:

    static int _compare(cdouble f1, cdouble f2)
  403ca7:	55                   	push   %rbp
  403ca8:	48 89 e5             	mov    %rsp,%rbp
  403cab:	f2 0f 11 45 c8       	movsd  %xmm0,-0x38(%rbp)
  403cb0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  403cb4:	f2 0f 11 4d c8       	movsd  %xmm1,-0x38(%rbp)
  403cb9:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  403cbd:	f2 0f 11 55 c8       	movsd  %xmm2,-0x38(%rbp)
  403cc2:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  403cc6:	f2 0f 11 5d c8       	movsd  %xmm3,-0x38(%rbp)
  403ccb:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  403ccf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  403cd3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  403cd7:	48 89 c8             	mov    %rcx,%rax
  403cda:	48 89 f2             	mov    %rsi,%rdx
  403cdd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  403ce1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    {   int result;
  403ce5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	if (f1.re < f2.re)
  403cec:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  403cf1:	66 0f 12 45 d0       	movlpd -0x30(%rbp),%xmm0
  403cf6:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  403cfa:	77 02                	ja     403cfe <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x57>
  403cfc:	eb 09                	jmp    403d07 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x60>
	    result = -1;
  403cfe:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  403d05:	eb 58                	jmp    403d5f <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xb8>
	else if (f1.re > f2.re)
  403d07:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  403d0c:	66 0f 12 45 d0       	movlpd -0x30(%rbp),%xmm0
  403d11:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
  403d15:	77 02                	ja     403d19 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x72>
  403d17:	eb 09                	jmp    403d22 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x7b>
	    result = 1;
  403d19:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  403d20:	eb 3d                	jmp    403d5f <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xb8>
	else if (f1.im < f2.im)
  403d22:	66 0f 12 4d e8       	movlpd -0x18(%rbp),%xmm1
  403d27:	66 0f 12 45 d8       	movlpd -0x28(%rbp),%xmm0
  403d2c:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  403d30:	77 02                	ja     403d34 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x8d>
  403d32:	eb 09                	jmp    403d3d <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x96>
	    result = -1;
  403d34:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  403d3b:	eb 22                	jmp    403d5f <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xb8>
	else if (f1.im > f2.im)
  403d3d:	66 0f 12 4d e8       	movlpd -0x18(%rbp),%xmm1
  403d42:	66 0f 12 45 d8       	movlpd -0x28(%rbp),%xmm0
  403d47:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
  403d4b:	77 02                	ja     403d4f <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xa8>
  403d4d:	eb 09                	jmp    403d58 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xb1>
	    result = 1;
  403d4f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  403d56:	eb 07                	jmp    403d5f <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xb8>
	else
	    result = 0;
  403d58:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
        return result;
  403d5f:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
  403d62:	c9                   	leaveq 
  403d63:	c3                   	retq   

0000000000403d64 <_D3std8typeinfo10ti_cdouble10TypeInfo_r6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  403d64:	55                   	push   %rbp
  403d65:	48 89 e5             	mov    %rsp,%rbp
  403d68:	48 83 ec 20          	sub    $0x20,%rsp
  403d6c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403d70:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403d74:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  403d78:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403d7c:	e8 2b 51 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(cdouble *)p1, *cast(cdouble *)p2);
  403d81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403d85:	48 8b 10             	mov    (%rax),%rdx
  403d88:	48 8b 48 08          	mov    0x8(%rax),%rcx
  403d8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403d90:	48 8b 30             	mov    (%rax),%rsi
  403d93:	48 8b 40 08          	mov    0x8(%rax),%rax
  403d97:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  403d9b:	66 0f 12 55 e0       	movlpd -0x20(%rbp),%xmm2
  403da0:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  403da4:	66 0f 12 5d e0       	movlpd -0x20(%rbp),%xmm3
  403da9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  403dad:	66 0f 12 45 e0       	movlpd -0x20(%rbp),%xmm0
  403db2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  403db6:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  403dbb:	e8 76 fe ff ff       	callq  403c36 <_D3std8typeinfo10ti_cdouble10TypeInfo_r7_equalsFrrZi>
    }
  403dc0:	c9                   	leaveq 
  403dc1:	c3                   	retq   

0000000000403dc2 <_D3std8typeinfo10ti_cdouble10TypeInfo_r7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  403dc2:	55                   	push   %rbp
  403dc3:	48 89 e5             	mov    %rsp,%rbp
  403dc6:	48 83 ec 20          	sub    $0x20,%rsp
  403dca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403dce:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403dd2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  403dd6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403dda:	e8 cd 50 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(cdouble *)p1, *cast(cdouble *)p2);
  403ddf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403de3:	48 8b 10             	mov    (%rax),%rdx
  403de6:	48 8b 48 08          	mov    0x8(%rax),%rcx
  403dea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403dee:	48 8b 30             	mov    (%rax),%rsi
  403df1:	48 8b 40 08          	mov    0x8(%rax),%rax
  403df5:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  403df9:	66 0f 12 55 e0       	movlpd -0x20(%rbp),%xmm2
  403dfe:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  403e02:	66 0f 12 5d e0       	movlpd -0x20(%rbp),%xmm3
  403e07:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  403e0b:	66 0f 12 45 e0       	movlpd -0x20(%rbp),%xmm0
  403e10:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  403e14:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  403e19:	e8 89 fe ff ff       	callq  403ca7 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi>
    }
  403e1e:	c9                   	leaveq 
  403e1f:	c3                   	retq   

0000000000403e20 <_D3std8typeinfo10ti_cdouble10TypeInfo_r5tsizeMFZm>:

    size_t tsize()
  403e20:	55                   	push   %rbp
  403e21:	48 89 e5             	mov    %rsp,%rbp
  403e24:	48 83 ec 10          	sub    $0x10,%rsp
  403e28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403e2c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403e30:	e8 77 50 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return cdouble.sizeof;
  403e35:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  403e3a:	c9                   	leaveq 
  403e3b:	c3                   	retq   

0000000000403e3c <_D3std8typeinfo10ti_cdouble10TypeInfo_r4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  403e3c:	55                   	push   %rbp
  403e3d:	48 89 e5             	mov    %rsp,%rbp
  403e40:	48 83 ec 30          	sub    $0x30,%rsp
  403e44:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  403e48:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  403e4c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  403e50:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  403e54:	e8 53 50 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cdouble t;
  403e59:	48 b8 00 00 00 00 00 	mov    $0x7ff8000000000000,%rax
  403e60:	00 f8 7f 
  403e63:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  403e67:	48 b8 00 00 00 00 00 	mov    $0x7ff8000000000000,%rax
  403e6e:	00 f8 7f 
  403e71:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	t = *cast(cdouble *)p1;
  403e75:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  403e79:	48 8b 02             	mov    (%rdx),%rax
  403e7c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  403e80:	48 8b 42 08          	mov    0x8(%rdx),%rax
  403e84:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(cdouble *)p1 = *cast(cdouble *)p2;
  403e88:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  403e8c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403e90:	48 8b 10             	mov    (%rax),%rdx
  403e93:	48 8b 40 08          	mov    0x8(%rax),%rax
  403e97:	48 89 11             	mov    %rdx,(%rcx)
  403e9a:	48 89 41 08          	mov    %rax,0x8(%rcx)
	*cast(cdouble *)p2 = t;
  403e9e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  403ea2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403ea6:	48 89 02             	mov    %rax,(%rdx)
  403ea9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403ead:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
  403eb1:	c9                   	leaveq 
  403eb2:	c3                   	retq   

0000000000403eb3 <_D3std8typeinfo10ti_cdouble10TypeInfo_r4initMFZAv>:

    void[] init()
  403eb3:	55                   	push   %rbp
  403eb4:	48 89 e5             	mov    %rsp,%rbp
  403eb7:	53                   	push   %rbx
  403eb8:	48 83 ec 28          	sub    $0x28,%rsp
  403ebc:	48 89 fb             	mov    %rdi,%rbx
  403ebf:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  403ec3:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  403ec7:	e8 e0 4f 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {	static cdouble r;

	return (cast(cdouble *)&r)[0 .. 1];
  403ecc:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  403ed3:	00 
  403ed4:	48 c7 45 e8 40 a7 41 	movq   $0x41a740,-0x18(%rbp)
  403edb:	00 
  403edc:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  403ee0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403ee4:	49 89 c0             	mov    %rax,%r8
  403ee7:	ba 10 00 00 00       	mov    $0x10,%edx
  403eec:	be 01 00 00 00       	mov    $0x1,%esi
  403ef1:	48 89 df             	mov    %rbx,%rdi
  403ef4:	e8 56 92 00 00       	callq  40d14f <_d_arraycast>
    }
  403ef9:	48 89 d8             	mov    %rbx,%rax
  403efc:	48 83 c4 28          	add    $0x28,%rsp
  403f00:	5b                   	pop    %rbx
  403f01:	c9                   	leaveq 
  403f02:	c3                   	retq   
  403f03:	90                   	nop    

0000000000403f04 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8toStringMFZAa>:

module std.typeinfo.ti_cfloat;

class TypeInfo_q : TypeInfo
{
    char[] toString() { return "cfloat"; }
  403f04:	55                   	push   %rbp
  403f05:	48 89 e5             	mov    %rsp,%rbp
  403f08:	53                   	push   %rbx
  403f09:	48 83 ec 08          	sub    $0x8,%rsp
  403f0d:	48 89 fb             	mov    %rdi,%rbx
  403f10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403f14:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  403f18:	e8 8f 4f 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  403f1d:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  403f24:	48 c7 43 08 a0 02 41 	movq   $0x4102a0,0x8(%rbx)
  403f2b:	00 
  403f2c:	48 89 d8             	mov    %rbx,%rax
  403f2f:	48 83 c4 08          	add    $0x8,%rsp
  403f33:	5b                   	pop    %rbx
  403f34:	c9                   	leaveq 
  403f35:	c3                   	retq   

0000000000403f36 <_D3std8typeinfo9ti_cfloat10TypeInfo_q7getHashMFPvZm>:

    hash_t getHash(void *p)
  403f36:	55                   	push   %rbp
  403f37:	48 89 e5             	mov    %rsp,%rbp
  403f3a:	48 83 ec 10          	sub    $0x10,%rsp
  403f3e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403f42:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403f46:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403f4a:	e8 5d 4f 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cast(uint *)p)[0] + (cast(uint *)p)[1];
  403f4f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403f53:	b8 00 00 00 00       	mov    $0x0,%eax
  403f58:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  403f5c:	8b 08                	mov    (%rax),%ecx
  403f5e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403f62:	b8 04 00 00 00       	mov    $0x4,%eax
  403f67:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  403f6b:	8b 00                	mov    (%rax),%eax
  403f6d:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  403f70:	89 c0                	mov    %eax,%eax
    }
  403f72:	c9                   	leaveq 
  403f73:	c3                   	retq   

0000000000403f74 <_D3std8typeinfo9ti_cfloat10TypeInfo_q7_equalsFqqZi>:

    static int _equals(cfloat f1, cfloat f2)
  403f74:	55                   	push   %rbp
  403f75:	48 89 e5             	mov    %rsp,%rbp
  403f78:	66 48 0f 7e c0       	movq   %xmm0,%rax
  403f7d:	66 48 0f 7e ca       	movq   %xmm1,%rdx
  403f82:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  403f86:	48 89 d0             	mov    %rdx,%rax
  403f89:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    {
	return f1 == f2;
  403f8d:	f3 0f 10 4d f8       	movss  -0x8(%rbp),%xmm1
  403f92:	f3 0f 10 5d fc       	movss  -0x4(%rbp),%xmm3
  403f97:	f3 0f 10 45 f0       	movss  -0x10(%rbp),%xmm0
  403f9c:	f3 0f 10 55 f4       	movss  -0xc(%rbp),%xmm2
  403fa1:	0f 2e c8             	ucomiss %xmm0,%xmm1
  403fa4:	0f 94 c1             	sete   %cl
  403fa7:	0f 9b c0             	setnp  %al
  403faa:	21 c1                	and    %eax,%ecx
  403fac:	0f 2e da             	ucomiss %xmm2,%xmm3
  403faf:	0f 94 c0             	sete   %al
  403fb2:	0f 9b c2             	setnp  %dl
  403fb5:	21 d0                	and    %edx,%eax
  403fb7:	21 c8                	and    %ecx,%eax
  403fb9:	0f b6 c0             	movzbl %al,%eax
    }
  403fbc:	c9                   	leaveq 
  403fbd:	c3                   	retq   

0000000000403fbe <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi>:

    static int _compare(cfloat f1, cfloat f2)
  403fbe:	55                   	push   %rbp
  403fbf:	48 89 e5             	mov    %rsp,%rbp
  403fc2:	66 48 0f 7e c0       	movq   %xmm0,%rax
  403fc7:	66 48 0f 7e ca       	movq   %xmm1,%rdx
  403fcc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  403fd0:	48 89 d0             	mov    %rdx,%rax
  403fd3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    {   int result;
  403fd7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	if (f1.re < f2.re)
  403fde:	f3 0f 10 4d e8       	movss  -0x18(%rbp),%xmm1
  403fe3:	f3 0f 10 45 e0       	movss  -0x20(%rbp),%xmm0
  403fe8:	0f 2e c1             	ucomiss %xmm1,%xmm0
  403feb:	77 02                	ja     403fef <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x31>
  403fed:	eb 09                	jmp    403ff8 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x3a>
	    result = -1;
  403fef:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  403ff6:	eb 55                	jmp    40404d <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x8f>
	else if (f1.re > f2.re)
  403ff8:	f3 0f 10 4d e8       	movss  -0x18(%rbp),%xmm1
  403ffd:	f3 0f 10 45 e0       	movss  -0x20(%rbp),%xmm0
  404002:	0f 2e c8             	ucomiss %xmm0,%xmm1
  404005:	77 02                	ja     404009 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x4b>
  404007:	eb 09                	jmp    404012 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x54>
	    result = 1;
  404009:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  404010:	eb 3b                	jmp    40404d <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x8f>
	else if (f1.im < f2.im)
  404012:	f3 0f 10 4d ec       	movss  -0x14(%rbp),%xmm1
  404017:	f3 0f 10 45 e4       	movss  -0x1c(%rbp),%xmm0
  40401c:	0f 2e c1             	ucomiss %xmm1,%xmm0
  40401f:	77 02                	ja     404023 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x65>
  404021:	eb 09                	jmp    40402c <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x6e>
	    result = -1;
  404023:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  40402a:	eb 21                	jmp    40404d <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x8f>
	else if (f1.im > f2.im)
  40402c:	f3 0f 10 4d ec       	movss  -0x14(%rbp),%xmm1
  404031:	f3 0f 10 45 e4       	movss  -0x1c(%rbp),%xmm0
  404036:	0f 2e c8             	ucomiss %xmm0,%xmm1
  404039:	77 02                	ja     40403d <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x7f>
  40403b:	eb 09                	jmp    404046 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x88>
	    result = 1;
  40403d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  404044:	eb 07                	jmp    40404d <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x8f>
	else
	    result = 0;
  404046:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
        return result;
  40404d:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
  404050:	c9                   	leaveq 
  404051:	c3                   	retq   

0000000000404052 <_D3std8typeinfo9ti_cfloat10TypeInfo_q6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  404052:	55                   	push   %rbp
  404053:	48 89 e5             	mov    %rsp,%rbp
  404056:	48 83 ec 30          	sub    $0x30,%rsp
  40405a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40405e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404062:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404066:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40406a:	e8 3d 4e 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(cfloat *)p1, *cast(cfloat *)p2);
  40406f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404073:	8b 10                	mov    (%rax),%edx
  404075:	8b 48 04             	mov    0x4(%rax),%ecx
  404078:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40407c:	8b 30                	mov    (%rax),%esi
  40407e:	8b 78 04             	mov    0x4(%rax),%edi
  404081:	89 d0                	mov    %edx,%eax
  404083:	89 ca                	mov    %ecx,%edx
  404085:	89 45 e0             	mov    %eax,-0x20(%rbp)
  404088:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  40408b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40408f:	89 f0                	mov    %esi,%eax
  404091:	89 fa                	mov    %edi,%edx
  404093:	89 45 d8             	mov    %eax,-0x28(%rbp)
  404096:	89 55 dc             	mov    %edx,-0x24(%rbp)
  404099:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40409d:	66 48 0f 6e c9       	movq   %rcx,%xmm1
  4040a2:	66 48 0f 6e c0       	movq   %rax,%xmm0
  4040a7:	e8 c8 fe ff ff       	callq  403f74 <_D3std8typeinfo9ti_cfloat10TypeInfo_q7_equalsFqqZi>
    }
  4040ac:	c9                   	leaveq 
  4040ad:	c3                   	retq   

00000000004040ae <_D3std8typeinfo9ti_cfloat10TypeInfo_q7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4040ae:	55                   	push   %rbp
  4040af:	48 89 e5             	mov    %rsp,%rbp
  4040b2:	48 83 ec 30          	sub    $0x30,%rsp
  4040b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4040ba:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4040be:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4040c2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4040c6:	e8 e1 4d 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(cfloat *)p1, *cast(cfloat *)p2);
  4040cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4040cf:	8b 10                	mov    (%rax),%edx
  4040d1:	8b 48 04             	mov    0x4(%rax),%ecx
  4040d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4040d8:	8b 30                	mov    (%rax),%esi
  4040da:	8b 78 04             	mov    0x4(%rax),%edi
  4040dd:	89 d0                	mov    %edx,%eax
  4040df:	89 ca                	mov    %ecx,%edx
  4040e1:	89 45 e0             	mov    %eax,-0x20(%rbp)
  4040e4:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  4040e7:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4040eb:	89 f0                	mov    %esi,%eax
  4040ed:	89 fa                	mov    %edi,%edx
  4040ef:	89 45 d8             	mov    %eax,-0x28(%rbp)
  4040f2:	89 55 dc             	mov    %edx,-0x24(%rbp)
  4040f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4040f9:	66 48 0f 6e c9       	movq   %rcx,%xmm1
  4040fe:	66 48 0f 6e c0       	movq   %rax,%xmm0
  404103:	e8 b6 fe ff ff       	callq  403fbe <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi>
    }
  404108:	c9                   	leaveq 
  404109:	c3                   	retq   

000000000040410a <_D3std8typeinfo9ti_cfloat10TypeInfo_q5tsizeMFZm>:

    size_t tsize()
  40410a:	55                   	push   %rbp
  40410b:	48 89 e5             	mov    %rsp,%rbp
  40410e:	48 83 ec 10          	sub    $0x10,%rsp
  404112:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404116:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40411a:	e8 8d 4d 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return cfloat.sizeof;
  40411f:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  404124:	c9                   	leaveq 
  404125:	c3                   	retq   

0000000000404126 <_D3std8typeinfo9ti_cfloat10TypeInfo_q4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  404126:	55                   	push   %rbp
  404127:	48 89 e5             	mov    %rsp,%rbp
  40412a:	48 83 ec 30          	sub    $0x30,%rsp
  40412e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404132:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  404136:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40413a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40413e:	e8 69 4d 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cfloat t;
  404143:	b8 00 00 c0 7f       	mov    $0x7fc00000,%eax
  404148:	89 45 f8             	mov    %eax,-0x8(%rbp)
  40414b:	b8 00 00 c0 7f       	mov    $0x7fc00000,%eax
  404150:	89 45 fc             	mov    %eax,-0x4(%rbp)

	t = *cast(cfloat *)p1;
  404153:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  404157:	8b 02                	mov    (%rdx),%eax
  404159:	89 45 f8             	mov    %eax,-0x8(%rbp)
  40415c:	8b 42 04             	mov    0x4(%rdx),%eax
  40415f:	89 45 fc             	mov    %eax,-0x4(%rbp)
	*cast(cfloat *)p1 = *cast(cfloat *)p2;
  404162:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  404166:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40416a:	8b 10                	mov    (%rax),%edx
  40416c:	8b 40 04             	mov    0x4(%rax),%eax
  40416f:	89 11                	mov    %edx,(%rcx)
  404171:	89 41 04             	mov    %eax,0x4(%rcx)
	*cast(cfloat *)p2 = t;
  404174:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  404178:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40417b:	89 02                	mov    %eax,(%rdx)
  40417d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404180:	89 42 04             	mov    %eax,0x4(%rdx)
    }
  404183:	c9                   	leaveq 
  404184:	c3                   	retq   

0000000000404185 <_D3std8typeinfo9ti_cfloat10TypeInfo_q4initMFZAv>:

    void[] init()
  404185:	55                   	push   %rbp
  404186:	48 89 e5             	mov    %rsp,%rbp
  404189:	53                   	push   %rbx
  40418a:	48 83 ec 28          	sub    $0x28,%rsp
  40418e:	48 89 fb             	mov    %rdi,%rbx
  404191:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  404195:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  404199:	e8 0e 4d 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {	static cfloat r;

	return (cast(cfloat *)&r)[0 .. 1];
  40419e:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  4041a5:	00 
  4041a6:	48 c7 45 e8 00 a8 41 	movq   $0x41a800,-0x18(%rbp)
  4041ad:	00 
  4041ae:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4041b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4041b6:	49 89 c0             	mov    %rax,%r8
  4041b9:	ba 08 00 00 00       	mov    $0x8,%edx
  4041be:	be 01 00 00 00       	mov    $0x1,%esi
  4041c3:	48 89 df             	mov    %rbx,%rdi
  4041c6:	e8 84 8f 00 00       	callq  40d14f <_d_arraycast>
    }
  4041cb:	48 89 d8             	mov    %rbx,%rax
  4041ce:	48 83 c4 28          	add    $0x28,%rsp
  4041d2:	5b                   	pop    %rbx
  4041d3:	c9                   	leaveq 
  4041d4:	c3                   	retq   
  4041d5:	90                   	nop    
  4041d6:	90                   	nop    
  4041d7:	90                   	nop    

00000000004041d8 <_D3std8typeinfo7ti_char10TypeInfo_a8toStringMFZAa>:

module std.typeinfo.ti_char;

class TypeInfo_a : TypeInfo
{
    char[] toString() { return "char"; }
  4041d8:	55                   	push   %rbp
  4041d9:	48 89 e5             	mov    %rsp,%rbp
  4041dc:	53                   	push   %rbx
  4041dd:	48 83 ec 08          	sub    $0x8,%rsp
  4041e1:	48 89 fb             	mov    %rdi,%rbx
  4041e4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4041e8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4041ec:	e8 bb 4c 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  4041f1:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  4041f8:	48 c7 43 08 60 03 41 	movq   $0x410360,0x8(%rbx)
  4041ff:	00 
  404200:	48 89 d8             	mov    %rbx,%rax
  404203:	48 83 c4 08          	add    $0x8,%rsp
  404207:	5b                   	pop    %rbx
  404208:	c9                   	leaveq 
  404209:	c3                   	retq   

000000000040420a <_D3std8typeinfo7ti_char10TypeInfo_a7getHashMFPvZm>:

    hash_t getHash(void *p)
  40420a:	55                   	push   %rbp
  40420b:	48 89 e5             	mov    %rsp,%rbp
  40420e:	48 83 ec 10          	sub    $0x10,%rsp
  404212:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404216:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40421a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40421e:	e8 89 4c 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(char *)p;
  404223:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404227:	0f b6 00             	movzbl (%rax),%eax
  40422a:	0f b6 c0             	movzbl %al,%eax
    }
  40422d:	c9                   	leaveq 
  40422e:	c3                   	retq   

000000000040422f <_D3std8typeinfo7ti_char10TypeInfo_a6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  40422f:	55                   	push   %rbp
  404230:	48 89 e5             	mov    %rsp,%rbp
  404233:	48 83 ec 20          	sub    $0x20,%rsp
  404237:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40423b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40423f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404243:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404247:	e8 60 4c 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(char *)p1 == *cast(char *)p2;
  40424c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404250:	0f b6 10             	movzbl (%rax),%edx
  404253:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404257:	0f b6 00             	movzbl (%rax),%eax
  40425a:	38 c2                	cmp    %al,%dl
  40425c:	0f 94 c0             	sete   %al
  40425f:	0f b6 c0             	movzbl %al,%eax
    }
  404262:	c9                   	leaveq 
  404263:	c3                   	retq   

0000000000404264 <_D3std8typeinfo7ti_char10TypeInfo_a7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  404264:	55                   	push   %rbp
  404265:	48 89 e5             	mov    %rsp,%rbp
  404268:	48 83 ec 20          	sub    $0x20,%rsp
  40426c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404270:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404274:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404278:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40427c:	e8 2b 4c 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(char *)p1 - *cast(char *)p2;
  404281:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404285:	0f b6 00             	movzbl (%rax),%eax
  404288:	0f b6 d0             	movzbl %al,%edx
  40428b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40428f:	0f b6 00             	movzbl (%rax),%eax
  404292:	0f b6 c0             	movzbl %al,%eax
  404295:	89 d1                	mov    %edx,%ecx
  404297:	29 c1                	sub    %eax,%ecx
  404299:	89 c8                	mov    %ecx,%eax
    }
  40429b:	c9                   	leaveq 
  40429c:	c3                   	retq   

000000000040429d <_D3std8typeinfo7ti_char10TypeInfo_a5tsizeMFZm>:

    size_t tsize()
  40429d:	55                   	push   %rbp
  40429e:	48 89 e5             	mov    %rsp,%rbp
  4042a1:	48 83 ec 10          	sub    $0x10,%rsp
  4042a5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4042a9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4042ad:	e8 fa 4b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return char.sizeof;
  4042b2:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  4042b7:	c9                   	leaveq 
  4042b8:	c3                   	retq   

00000000004042b9 <_D3std8typeinfo7ti_char10TypeInfo_a4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  4042b9:	55                   	push   %rbp
  4042ba:	48 89 e5             	mov    %rsp,%rbp
  4042bd:	48 83 ec 30          	sub    $0x30,%rsp
  4042c1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4042c5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4042c9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4042cd:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4042d1:	e8 d6 4b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	char t;
  4042d6:	c6 45 ff ff          	movb   $0xff,-0x1(%rbp)

	t = *cast(char *)p1;
  4042da:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4042de:	0f b6 00             	movzbl (%rax),%eax
  4042e1:	88 45 ff             	mov    %al,-0x1(%rbp)
	*cast(char *)p1 = *cast(char *)p2;
  4042e4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4042e8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4042ec:	0f b6 00             	movzbl (%rax),%eax
  4042ef:	88 02                	mov    %al,(%rdx)
	*cast(char *)p2 = t;
  4042f1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4042f5:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  4042f9:	88 02                	mov    %al,(%rdx)
    }
  4042fb:	c9                   	leaveq 
  4042fc:	c3                   	retq   

00000000004042fd <_D3std8typeinfo7ti_char10TypeInfo_a4initMFZAv>:

    void[] init()
  4042fd:	55                   	push   %rbp
  4042fe:	48 89 e5             	mov    %rsp,%rbp
  404301:	53                   	push   %rbx
  404302:	48 83 ec 28          	sub    $0x28,%rsp
  404306:	48 89 fb             	mov    %rdi,%rbx
  404309:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40430d:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  404311:	e8 96 4b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {	static char c;

	return (cast(char *)&c)[0 .. 1];
  404316:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  40431d:	00 
  40431e:	48 c7 45 e8 c0 a8 41 	movq   $0x41a8c0,-0x18(%rbp)
  404325:	00 
  404326:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40432a:	48 89 03             	mov    %rax,(%rbx)
  40432d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404331:	48 89 43 08          	mov    %rax,0x8(%rbx)
    }
  404335:	48 89 d8             	mov    %rbx,%rax
  404338:	48 83 c4 28          	add    $0x28,%rsp
  40433c:	5b                   	pop    %rbx
  40433d:	c9                   	leaveq 
  40433e:	c3                   	retq   
  40433f:	90                   	nop    

0000000000404340 <_D3std8typeinfo8ti_creal10TypeInfo_c8toStringMFZAa>:

module std.typeinfo.ti_creal;

class TypeInfo_c : TypeInfo
{
    char[] toString() { return "creal"; }
  404340:	55                   	push   %rbp
  404341:	48 89 e5             	mov    %rsp,%rbp
  404344:	53                   	push   %rbx
  404345:	48 83 ec 08          	sub    $0x8,%rsp
  404349:	48 89 fb             	mov    %rdi,%rbx
  40434c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404350:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  404354:	e8 53 4b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  404359:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  404360:	48 c7 43 08 20 04 41 	movq   $0x410420,0x8(%rbx)
  404367:	00 
  404368:	48 89 d8             	mov    %rbx,%rax
  40436b:	48 83 c4 08          	add    $0x8,%rsp
  40436f:	5b                   	pop    %rbx
  404370:	c9                   	leaveq 
  404371:	c3                   	retq   

0000000000404372 <_D3std8typeinfo8ti_creal10TypeInfo_c7getHashMFPvZm>:

    hash_t getHash(void *p)
  404372:	55                   	push   %rbp
  404373:	48 89 e5             	mov    %rsp,%rbp
  404376:	48 83 ec 10          	sub    $0x10,%rsp
  40437a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40437e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404382:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404386:	e8 21 4b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cast(uint *)p)[0] + (cast(uint *)p)[1] +
  40438b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40438f:	b8 00 00 00 00       	mov    $0x0,%eax
  404394:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  404398:	8b 08                	mov    (%rax),%ecx
  40439a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40439e:	b8 04 00 00 00       	mov    $0x4,%eax
  4043a3:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4043a7:	8b 00                	mov    (%rax),%eax
  4043a9:	01 c1                	add    %eax,%ecx
  4043ab:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4043af:	b8 08 00 00 00       	mov    $0x8,%eax
  4043b4:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4043b8:	8b 00                	mov    (%rax),%eax
  4043ba:	01 c1                	add    %eax,%ecx
  4043bc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4043c0:	b8 0c 00 00 00       	mov    $0xc,%eax
  4043c5:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4043c9:	8b 00                	mov    (%rax),%eax
  4043cb:	01 c1                	add    %eax,%ecx
  4043cd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4043d1:	b8 10 00 00 00       	mov    $0x10,%eax
  4043d6:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4043da:	8b 00                	mov    (%rax),%eax
  4043dc:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  4043df:	89 c0                	mov    %eax,%eax
	       (cast(uint *)p)[2] + (cast(uint *)p)[3] +
	       (cast(uint *)p)[4];
    }
  4043e1:	c9                   	leaveq 
  4043e2:	c3                   	retq   

00000000004043e3 <_D3std8typeinfo8ti_creal10TypeInfo_c7_equalsFccZi>:

    static int _equals(creal f1, creal f2)
  4043e3:	55                   	push   %rbp
  4043e4:	48 89 e5             	mov    %rsp,%rbp
    {
	return f1 == f2;
  4043e7:	db 6d 10             	fldt   0x10(%rbp)
  4043ea:	db 6d 20             	fldt   0x20(%rbp)
  4043ed:	db 6d 30             	fldt   0x30(%rbp)
  4043f0:	db 6d 40             	fldt   0x40(%rbp)
  4043f3:	d9 cb                	fxch   %st(3)
  4043f5:	df e9                	fucomip %st(1),%st
  4043f7:	df c0                	ffreep %st(0)
  4043f9:	0f 94 c1             	sete   %cl
  4043fc:	0f 9b c0             	setnp  %al
  4043ff:	21 c1                	and    %eax,%ecx
  404401:	df e9                	fucomip %st(1),%st
  404403:	df c0                	ffreep %st(0)
  404405:	0f 94 c0             	sete   %al
  404408:	0f 9b c2             	setnp  %dl
  40440b:	21 d0                	and    %edx,%eax
  40440d:	21 c8                	and    %ecx,%eax
  40440f:	0f b6 c0             	movzbl %al,%eax
    }
  404412:	c9                   	leaveq 
  404413:	c3                   	retq   

0000000000404414 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi>:

    static int _compare(creal f1, creal f2)
  404414:	55                   	push   %rbp
  404415:	48 89 e5             	mov    %rsp,%rbp
    {   int result;
  404418:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	if (f1.re < f2.re)
  40441f:	db 6d 10             	fldt   0x10(%rbp)
  404422:	db 6d 30             	fldt   0x30(%rbp)
  404425:	df e9                	fucomip %st(1),%st
  404427:	df c0                	ffreep %st(0)
  404429:	77 02                	ja     40442d <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x19>
  40442b:	eb 09                	jmp    404436 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x22>
	    result = -1;
  40442d:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  404434:	eb 50                	jmp    404486 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x72>
	else if (f1.re > f2.re)
  404436:	db 6d 10             	fldt   0x10(%rbp)
  404439:	db 6d 30             	fldt   0x30(%rbp)
  40443c:	d9 c9                	fxch   %st(1)
  40443e:	df e9                	fucomip %st(1),%st
  404440:	df c0                	ffreep %st(0)
  404442:	77 02                	ja     404446 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x32>
  404444:	eb 09                	jmp    40444f <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x3b>
	    result = 1;
  404446:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  40444d:	eb 37                	jmp    404486 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x72>
	else if (f1.im < f2.im)
  40444f:	db 6d 20             	fldt   0x20(%rbp)
  404452:	db 6d 40             	fldt   0x40(%rbp)
  404455:	df e9                	fucomip %st(1),%st
  404457:	df c0                	ffreep %st(0)
  404459:	77 02                	ja     40445d <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x49>
  40445b:	eb 09                	jmp    404466 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x52>
	    result = -1;
  40445d:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  404464:	eb 20                	jmp    404486 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x72>
	else if (f1.im > f2.im)
  404466:	db 6d 20             	fldt   0x20(%rbp)
  404469:	db 6d 40             	fldt   0x40(%rbp)
  40446c:	d9 c9                	fxch   %st(1)
  40446e:	df e9                	fucomip %st(1),%st
  404470:	df c0                	ffreep %st(0)
  404472:	77 02                	ja     404476 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x62>
  404474:	eb 09                	jmp    40447f <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x6b>
	    result = 1;
  404476:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  40447d:	eb 07                	jmp    404486 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x72>
	else
	    result = 0;
  40447f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
        return result;
  404486:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
  404489:	c9                   	leaveq 
  40448a:	c3                   	retq   

000000000040448b <_D3std8typeinfo8ti_creal10TypeInfo_c6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  40448b:	55                   	push   %rbp
  40448c:	48 89 e5             	mov    %rsp,%rbp
  40448f:	48 83 ec 60          	sub    $0x60,%rsp
  404493:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404497:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40449b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40449f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4044a3:	e8 04 4a 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(creal *)p1, *cast(creal *)p2);
  4044a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4044ac:	4c 8b 00             	mov    (%rax),%r8
  4044af:	44 8b 48 08          	mov    0x8(%rax),%r9d
  4044b3:	4c 8b 50 10          	mov    0x10(%rax),%r10
  4044b7:	44 8b 58 18          	mov    0x18(%rax),%r11d
  4044bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4044bf:	48 8b 10             	mov    (%rax),%rdx
  4044c2:	8b 48 08             	mov    0x8(%rax),%ecx
  4044c5:	48 8b 70 10          	mov    0x10(%rax),%rsi
  4044c9:	8b 78 18             	mov    0x18(%rax),%edi
  4044cc:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  4044d1:	44 89 4c 24 28       	mov    %r9d,0x28(%rsp)
  4044d6:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  4044db:	44 89 5c 24 38       	mov    %r11d,0x38(%rsp)
  4044e0:	48 89 14 24          	mov    %rdx,(%rsp)
  4044e4:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
  4044e8:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  4044ed:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  4044f1:	e8 ed fe ff ff       	callq  4043e3 <_D3std8typeinfo8ti_creal10TypeInfo_c7_equalsFccZi>
    }
  4044f6:	c9                   	leaveq 
  4044f7:	c3                   	retq   

00000000004044f8 <_D3std8typeinfo8ti_creal10TypeInfo_c7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4044f8:	55                   	push   %rbp
  4044f9:	48 89 e5             	mov    %rsp,%rbp
  4044fc:	48 83 ec 60          	sub    $0x60,%rsp
  404500:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404504:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404508:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40450c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404510:	e8 97 49 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(creal *)p1, *cast(creal *)p2);
  404515:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404519:	4c 8b 00             	mov    (%rax),%r8
  40451c:	44 8b 48 08          	mov    0x8(%rax),%r9d
  404520:	4c 8b 50 10          	mov    0x10(%rax),%r10
  404524:	44 8b 58 18          	mov    0x18(%rax),%r11d
  404528:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40452c:	48 8b 10             	mov    (%rax),%rdx
  40452f:	8b 48 08             	mov    0x8(%rax),%ecx
  404532:	48 8b 70 10          	mov    0x10(%rax),%rsi
  404536:	8b 78 18             	mov    0x18(%rax),%edi
  404539:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  40453e:	44 89 4c 24 28       	mov    %r9d,0x28(%rsp)
  404543:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  404548:	44 89 5c 24 38       	mov    %r11d,0x38(%rsp)
  40454d:	48 89 14 24          	mov    %rdx,(%rsp)
  404551:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
  404555:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  40455a:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  40455e:	e8 b1 fe ff ff       	callq  404414 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi>
    }
  404563:	c9                   	leaveq 
  404564:	c3                   	retq   

0000000000404565 <_D3std8typeinfo8ti_creal10TypeInfo_c5tsizeMFZm>:

    size_t tsize()
  404565:	55                   	push   %rbp
  404566:	48 89 e5             	mov    %rsp,%rbp
  404569:	48 83 ec 10          	sub    $0x10,%rsp
  40456d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404571:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404575:	e8 32 49 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return creal.sizeof;
  40457a:	b8 20 00 00 00       	mov    $0x20,%eax
    }
  40457f:	c9                   	leaveq 
  404580:	c3                   	retq   

0000000000404581 <_D3std8typeinfo8ti_creal10TypeInfo_c4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  404581:	55                   	push   %rbp
  404582:	48 89 e5             	mov    %rsp,%rbp
  404585:	53                   	push   %rbx
  404586:	48 83 ec 48          	sub    $0x48,%rsp
  40458a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40458e:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  404592:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  404596:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  40459a:	e8 0d 49 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	creal t;
  40459f:	48 b8 00 00 00 00 00 	mov    $0xc000000000000000,%rax
  4045a6:	00 00 c0 
  4045a9:	ba ff 7f 00 00       	mov    $0x7fff,%edx
  4045ae:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4045b2:	89 55 d8             	mov    %edx,-0x28(%rbp)
  4045b5:	48 b8 00 00 00 00 00 	mov    $0xc000000000000000,%rax
  4045bc:	00 00 c0 
  4045bf:	ba ff 7f 00 00       	mov    $0x7fff,%edx
  4045c4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4045c8:	89 55 e8             	mov    %edx,-0x18(%rbp)

	t = *cast(creal *)p1;
  4045cb:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  4045cf:	48 8b 01             	mov    (%rcx),%rax
  4045d2:	8b 51 08             	mov    0x8(%rcx),%edx
  4045d5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4045d9:	89 55 d8             	mov    %edx,-0x28(%rbp)
  4045dc:	48 8b 41 10          	mov    0x10(%rcx),%rax
  4045e0:	8b 51 18             	mov    0x18(%rcx),%edx
  4045e3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4045e7:	89 55 e8             	mov    %edx,-0x18(%rbp)
	*cast(creal *)p1 = *cast(creal *)p2;
  4045ea:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  4045ee:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  4045f2:	48 8b 01             	mov    (%rcx),%rax
  4045f5:	8b 51 08             	mov    0x8(%rcx),%edx
  4045f8:	8b 59 18             	mov    0x18(%rcx),%ebx
  4045fb:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  4045ff:	48 89 06             	mov    %rax,(%rsi)
  404602:	89 56 08             	mov    %edx,0x8(%rsi)
  404605:	48 89 4e 10          	mov    %rcx,0x10(%rsi)
  404609:	89 5e 18             	mov    %ebx,0x18(%rsi)
	*cast(creal *)p2 = t;
  40460c:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  404610:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  404614:	8b 55 d8             	mov    -0x28(%rbp),%edx
  404617:	48 89 01             	mov    %rax,(%rcx)
  40461a:	89 51 08             	mov    %edx,0x8(%rcx)
  40461d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  404621:	8b 55 e8             	mov    -0x18(%rbp),%edx
  404624:	48 89 41 10          	mov    %rax,0x10(%rcx)
  404628:	89 51 18             	mov    %edx,0x18(%rcx)
    }
  40462b:	48 83 c4 48          	add    $0x48,%rsp
  40462f:	5b                   	pop    %rbx
  404630:	c9                   	leaveq 
  404631:	c3                   	retq   

0000000000404632 <_D3std8typeinfo8ti_creal10TypeInfo_c4initMFZAv>:

    void[] init()
  404632:	55                   	push   %rbp
  404633:	48 89 e5             	mov    %rsp,%rbp
  404636:	53                   	push   %rbx
  404637:	48 83 ec 28          	sub    $0x28,%rsp
  40463b:	48 89 fb             	mov    %rdi,%rbx
  40463e:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  404642:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  404646:	e8 61 48 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {	static creal r;

	return (cast(creal *)&r)[0 .. 1];
  40464b:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  404652:	00 
  404653:	48 c7 45 e8 80 a9 41 	movq   $0x41a980,-0x18(%rbp)
  40465a:	00 
  40465b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40465f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404663:	49 89 c0             	mov    %rax,%r8
  404666:	ba 20 00 00 00       	mov    $0x20,%edx
  40466b:	be 01 00 00 00       	mov    $0x1,%esi
  404670:	48 89 df             	mov    %rbx,%rdi
  404673:	e8 d7 8a 00 00       	callq  40d14f <_d_arraycast>
    }
  404678:	48 89 d8             	mov    %rbx,%rax
  40467b:	48 83 c4 28          	add    $0x28,%rsp
  40467f:	5b                   	pop    %rbx
  404680:	c9                   	leaveq 
  404681:	c3                   	retq   
  404682:	90                   	nop    
  404683:	90                   	nop    

0000000000404684 <_D3std8typeinfo8ti_dchar10TypeInfo_w8toStringMFZAa>:

module std.typeinfo.ti_dchar;

class TypeInfo_w : TypeInfo
{
    char[] toString() { return "dchar"; }
  404684:	55                   	push   %rbp
  404685:	48 89 e5             	mov    %rsp,%rbp
  404688:	53                   	push   %rbx
  404689:	48 83 ec 08          	sub    $0x8,%rsp
  40468d:	48 89 fb             	mov    %rdi,%rbx
  404690:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404694:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  404698:	e8 0f 48 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  40469d:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  4046a4:	48 c7 43 08 e0 04 41 	movq   $0x4104e0,0x8(%rbx)
  4046ab:	00 
  4046ac:	48 89 d8             	mov    %rbx,%rax
  4046af:	48 83 c4 08          	add    $0x8,%rsp
  4046b3:	5b                   	pop    %rbx
  4046b4:	c9                   	leaveq 
  4046b5:	c3                   	retq   

00000000004046b6 <_D3std8typeinfo8ti_dchar10TypeInfo_w7getHashMFPvZm>:

    hash_t getHash(void *p)
  4046b6:	55                   	push   %rbp
  4046b7:	48 89 e5             	mov    %rsp,%rbp
  4046ba:	48 83 ec 10          	sub    $0x10,%rsp
  4046be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4046c2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4046c6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4046ca:	e8 dd 47 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(dchar *)p;
  4046cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4046d3:	8b 00                	mov    (%rax),%eax
  4046d5:	89 c0                	mov    %eax,%eax
    }
  4046d7:	c9                   	leaveq 
  4046d8:	c3                   	retq   

00000000004046d9 <_D3std8typeinfo8ti_dchar10TypeInfo_w6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4046d9:	55                   	push   %rbp
  4046da:	48 89 e5             	mov    %rsp,%rbp
  4046dd:	48 83 ec 20          	sub    $0x20,%rsp
  4046e1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4046e5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4046e9:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4046ed:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4046f1:	e8 b6 47 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(dchar *)p1 == *cast(dchar *)p2;
  4046f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4046fa:	8b 10                	mov    (%rax),%edx
  4046fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404700:	8b 00                	mov    (%rax),%eax
  404702:	39 c2                	cmp    %eax,%edx
  404704:	0f 94 c0             	sete   %al
  404707:	0f b6 c0             	movzbl %al,%eax
    }
  40470a:	c9                   	leaveq 
  40470b:	c3                   	retq   

000000000040470c <_D3std8typeinfo8ti_dchar10TypeInfo_w7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  40470c:	55                   	push   %rbp
  40470d:	48 89 e5             	mov    %rsp,%rbp
  404710:	48 83 ec 20          	sub    $0x20,%rsp
  404714:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404718:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40471c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404720:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404724:	e8 83 47 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(dchar *)p1 - *cast(dchar *)p2;
  404729:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40472d:	8b 10                	mov    (%rax),%edx
  40472f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404733:	8b 00                	mov    (%rax),%eax
  404735:	89 d1                	mov    %edx,%ecx
  404737:	29 c1                	sub    %eax,%ecx
  404739:	89 c8                	mov    %ecx,%eax
    }
  40473b:	c9                   	leaveq 
  40473c:	c3                   	retq   

000000000040473d <_D3std8typeinfo8ti_dchar10TypeInfo_w5tsizeMFZm>:

    size_t tsize()
  40473d:	55                   	push   %rbp
  40473e:	48 89 e5             	mov    %rsp,%rbp
  404741:	48 83 ec 10          	sub    $0x10,%rsp
  404745:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404749:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40474d:	e8 5a 47 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return dchar.sizeof;
  404752:	b8 04 00 00 00       	mov    $0x4,%eax
    }
  404757:	c9                   	leaveq 
  404758:	c3                   	retq   

0000000000404759 <_D3std8typeinfo8ti_dchar10TypeInfo_w4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  404759:	55                   	push   %rbp
  40475a:	48 89 e5             	mov    %rsp,%rbp
  40475d:	48 83 ec 30          	sub    $0x30,%rsp
  404761:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404765:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  404769:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40476d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  404771:	e8 36 47 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	dchar t;
  404776:	c7 45 fc ff ff 00 00 	movl   $0xffff,-0x4(%rbp)

	t = *cast(dchar *)p1;
  40477d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  404781:	8b 00                	mov    (%rax),%eax
  404783:	89 45 fc             	mov    %eax,-0x4(%rbp)
	*cast(dchar *)p1 = *cast(dchar *)p2;
  404786:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40478a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40478e:	8b 00                	mov    (%rax),%eax
  404790:	89 02                	mov    %eax,(%rdx)
	*cast(dchar *)p2 = t;
  404792:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  404796:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404799:	89 02                	mov    %eax,(%rdx)
    }
  40479b:	c9                   	leaveq 
  40479c:	c3                   	retq   

000000000040479d <_D3std8typeinfo8ti_dchar10TypeInfo_w4initMFZAv>:

    void[] init()
  40479d:	55                   	push   %rbp
  40479e:	48 89 e5             	mov    %rsp,%rbp
  4047a1:	53                   	push   %rbx
  4047a2:	48 83 ec 28          	sub    $0x28,%rsp
  4047a6:	48 89 fb             	mov    %rdi,%rbx
  4047a9:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  4047ad:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4047b1:	e8 f6 46 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {	static dchar c;

	return (cast(dchar *)&c)[0 .. 1];
  4047b6:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  4047bd:	00 
  4047be:	48 c7 45 e8 40 aa 41 	movq   $0x41aa40,-0x18(%rbp)
  4047c5:	00 
  4047c6:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4047ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4047ce:	49 89 c0             	mov    %rax,%r8
  4047d1:	ba 04 00 00 00       	mov    $0x4,%edx
  4047d6:	be 01 00 00 00       	mov    $0x1,%esi
  4047db:	48 89 df             	mov    %rbx,%rdi
  4047de:	e8 6c 89 00 00       	callq  40d14f <_d_arraycast>
    }
  4047e3:	48 89 d8             	mov    %rbx,%rax
  4047e6:	48 83 c4 28          	add    $0x28,%rsp
  4047ea:	5b                   	pop    %rbx
  4047eb:	c9                   	leaveq 
  4047ec:	c3                   	retq   
  4047ed:	90                   	nop    
  4047ee:	90                   	nop    
  4047ef:	90                   	nop    

00000000004047f0 <_D3std8typeinfo11ti_delegate10TypeInfo_D7getHashMFPvZm>:

alias void delegate(int) dg;

class TypeInfo_D : TypeInfo
{
    hash_t getHash(void *p)
  4047f0:	55                   	push   %rbp
  4047f1:	48 89 e5             	mov    %rsp,%rbp
  4047f4:	48 83 ec 20          	sub    $0x20,%rsp
  4047f8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4047fc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  404800:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  404804:	e8 a3 46 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {	long l = *cast(long *)p;
  404809:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40480d:	48 8b 00             	mov    (%rax),%rax
  404810:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return cast(uint)(l + (l >> 32));
  404814:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404818:	89 c2                	mov    %eax,%edx
  40481a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40481e:	48 c1 f8 20          	sar    $0x20,%rax
  404822:	8d 04 02             	lea    (%rdx,%rax,1),%eax
  404825:	89 c0                	mov    %eax,%eax
    }
  404827:	c9                   	leaveq 
  404828:	c3                   	retq   

0000000000404829 <_D3std8typeinfo11ti_delegate10TypeInfo_D6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  404829:	55                   	push   %rbp
  40482a:	48 89 e5             	mov    %rsp,%rbp
  40482d:	48 83 ec 30          	sub    $0x30,%rsp
  404831:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404835:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404839:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40483d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404841:	e8 66 46 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(dg *)p1 == *cast(dg *)p2;
  404846:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40484a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40484e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  404852:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  404856:	48 c7 45 d0 10 00 00 	movq   $0x10,-0x30(%rbp)
  40485d:	00 
  40485e:	fc                   	cld    
  40485f:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  404863:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  404867:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  40486b:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  40486d:	0f 97 c2             	seta   %dl
  404870:	0f 92 c0             	setb   %al
  404873:	89 d1                	mov    %edx,%ecx
  404875:	28 c1                	sub    %al,%cl
  404877:	89 c8                	mov    %ecx,%eax
  404879:	0f be c0             	movsbl %al,%eax
  40487c:	85 c0                	test   %eax,%eax
  40487e:	0f 94 c0             	sete   %al
  404881:	0f b6 c0             	movzbl %al,%eax
    }
  404884:	c9                   	leaveq 
  404885:	c3                   	retq   

0000000000404886 <_D3std8typeinfo11ti_delegate10TypeInfo_D5tsizeMFZm>:

    size_t tsize()
  404886:	55                   	push   %rbp
  404887:	48 89 e5             	mov    %rsp,%rbp
  40488a:	48 83 ec 10          	sub    $0x10,%rsp
  40488e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404892:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404896:	e8 11 46 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return dg.sizeof;
  40489b:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  4048a0:	c9                   	leaveq 
  4048a1:	c3                   	retq   

00000000004048a2 <_D3std8typeinfo11ti_delegate10TypeInfo_D4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  4048a2:	55                   	push   %rbp
  4048a3:	48 89 e5             	mov    %rsp,%rbp
  4048a6:	48 83 ec 30          	sub    $0x30,%rsp
  4048aa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4048ae:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4048b2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4048b6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4048ba:	e8 ed 45 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	dg t;
  4048bf:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4048c6:	00 
  4048c7:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4048ce:	00 

	t = *cast(dg *)p1;
  4048cf:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4048d3:	48 8b 02             	mov    (%rdx),%rax
  4048d6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4048da:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4048de:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(dg *)p1 = *cast(dg *)p2;
  4048e2:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4048e6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4048ea:	48 8b 02             	mov    (%rdx),%rax
  4048ed:	48 89 01             	mov    %rax,(%rcx)
  4048f0:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4048f4:	48 89 41 08          	mov    %rax,0x8(%rcx)
	*cast(dg *)p2 = t;
  4048f8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4048fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404900:	48 89 02             	mov    %rax,(%rdx)
  404903:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404907:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
  40490b:	c9                   	leaveq 
  40490c:	c3                   	retq   

000000000040490d <_D3std8typeinfo11ti_delegate10TypeInfo_D5flagsMFZk>:

    uint flags()
  40490d:	55                   	push   %rbp
  40490e:	48 89 e5             	mov    %rsp,%rbp
  404911:	48 83 ec 10          	sub    $0x10,%rsp
  404915:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404919:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40491d:	e8 8a 45 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  404922:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  404927:	c9                   	leaveq 
  404928:	c3                   	retq   
  404929:	90                   	nop    
  40492a:	90                   	nop    
  40492b:	90                   	nop    

000000000040492c <_D3std8typeinfo9ti_double10TypeInfo_d8toStringMFZAa>:
import kernel.core.system;
//private import std.math;

class TypeInfo_d : TypeInfo
{
    char[] toString() { return "double"; }
  40492c:	55                   	push   %rbp
  40492d:	48 89 e5             	mov    %rsp,%rbp
  404930:	53                   	push   %rbx
  404931:	48 83 ec 08          	sub    $0x8,%rsp
  404935:	48 89 fb             	mov    %rdi,%rbx
  404938:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40493c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  404940:	e8 67 45 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  404945:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  40494c:	48 c7 43 08 40 06 41 	movq   $0x410640,0x8(%rbx)
  404953:	00 
  404954:	48 89 d8             	mov    %rbx,%rax
  404957:	48 83 c4 08          	add    $0x8,%rsp
  40495b:	5b                   	pop    %rbx
  40495c:	c9                   	leaveq 
  40495d:	c3                   	retq   

000000000040495e <_D3std8typeinfo9ti_double10TypeInfo_d7getHashMFPvZm>:

    hash_t getHash(void *p)
  40495e:	55                   	push   %rbp
  40495f:	48 89 e5             	mov    %rsp,%rbp
  404962:	48 83 ec 10          	sub    $0x10,%rsp
  404966:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40496a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40496e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404972:	e8 35 45 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cast(uint *)p)[0] + (cast(uint *)p)[1];
  404977:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40497b:	b8 00 00 00 00       	mov    $0x0,%eax
  404980:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  404984:	8b 08                	mov    (%rax),%ecx
  404986:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40498a:	b8 04 00 00 00       	mov    $0x4,%eax
  40498f:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  404993:	8b 00                	mov    (%rax),%eax
  404995:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  404998:	89 c0                	mov    %eax,%eax
    }
  40499a:	c9                   	leaveq 
  40499b:	c3                   	retq   

000000000040499c <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi>:

    static int _equals(double f1, double f2)
  40499c:	55                   	push   %rbp
  40499d:	48 89 e5             	mov    %rsp,%rbp
  4049a0:	48 83 ec 30          	sub    $0x30,%rsp
  4049a4:	f2 0f 11 45 f8       	movsd  %xmm0,-0x8(%rbp)
  4049a9:	f2 0f 11 4d f0       	movsd  %xmm1,-0x10(%rbp)
    {
	return f1 == f2 ||
  4049ae:	66 0f 12 45 f8       	movlpd -0x8(%rbp),%xmm0
  4049b3:	66 0f 2e 45 f0       	ucomisd -0x10(%rbp),%xmm0
  4049b8:	7a 02                	jp     4049bc <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi+0x20>
  4049ba:	74 1e                	je     4049da <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi+0x3e>
  4049bc:	dd 45 f8             	fldl   -0x8(%rbp)
  4049bf:	db 3c 24             	fstpt  (%rsp)
  4049c2:	e8 5d 8b 00 00       	callq  40d524 <_D6kernel4core6system5isnanFeZi>
  4049c7:	85 c0                	test   %eax,%eax
  4049c9:	74 15                	je     4049e0 <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi+0x44>
  4049cb:	dd 45 f0             	fldl   -0x10(%rbp)
  4049ce:	db 3c 24             	fstpt  (%rsp)
  4049d1:	e8 4e 8b 00 00       	callq  40d524 <_D6kernel4core6system5isnanFeZi>
  4049d6:	85 c0                	test   %eax,%eax
  4049d8:	74 06                	je     4049e0 <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi+0x44>
  4049da:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  4049de:	eb 04                	jmp    4049e4 <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi+0x48>
  4049e0:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  4049e4:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
		(isnan(f1) && isnan(f2));
    }
  4049e8:	c9                   	leaveq 
  4049e9:	c3                   	retq   

00000000004049ea <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi>:

    static int _compare(double d1, double d2)
  4049ea:	55                   	push   %rbp
  4049eb:	48 89 e5             	mov    %rsp,%rbp
  4049ee:	48 83 ec 30          	sub    $0x30,%rsp
  4049f2:	f2 0f 11 45 f8       	movsd  %xmm0,-0x8(%rbp)
  4049f7:	f2 0f 11 4d f0       	movsd  %xmm1,-0x10(%rbp)
    {
	if (d1 !<>= d2)		// if either are NaN
  4049fc:	66 0f 12 45 f8       	movlpd -0x8(%rbp),%xmm0
  404a01:	66 0f 2e 45 f0       	ucomisd -0x10(%rbp),%xmm0
  404a06:	0f 9a c0             	setp   %al
  404a09:	84 c0                	test   %al,%al
  404a0b:	74 39                	je     404a46 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x5c>
	{
	    if (isnan(d1))
  404a0d:	dd 45 f8             	fldl   -0x8(%rbp)
  404a10:	db 3c 24             	fstpt  (%rsp)
  404a13:	e8 0c 8b 00 00       	callq  40d524 <_D6kernel4core6system5isnanFeZi>
  404a18:	85 c0                	test   %eax,%eax
  404a1a:	74 21                	je     404a3d <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x53>
	    {	if (isnan(d2))
  404a1c:	dd 45 f0             	fldl   -0x10(%rbp)
  404a1f:	db 3c 24             	fstpt  (%rsp)
  404a22:	e8 fd 8a 00 00       	callq  40d524 <_D6kernel4core6system5isnanFeZi>
  404a27:	85 c0                	test   %eax,%eax
  404a29:	74 09                	je     404a34 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x4a>
		    return 0;
  404a2b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  404a32:	eb 59                	jmp    404a8d <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0xa3>
		return -1;
  404a34:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  404a3b:	eb 50                	jmp    404a8d <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0xa3>
	    }
	    return 1;
  404a3d:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  404a44:	eb 47                	jmp    404a8d <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0xa3>
	}
	return (d1 == d2) ? 0 : ((d1 < d2) ? -1 : 1);
  404a46:	66 0f 12 45 f8       	movlpd -0x8(%rbp),%xmm0
  404a4b:	66 0f 2e 45 f0       	ucomisd -0x10(%rbp),%xmm0
  404a50:	7a 02                	jp     404a54 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x6a>
  404a52:	74 02                	je     404a56 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x6c>
  404a54:	eb 09                	jmp    404a5f <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x75>
  404a56:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  404a5d:	eb 28                	jmp    404a87 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x9d>
  404a5f:	66 0f 12 4d f8       	movlpd -0x8(%rbp),%xmm1
  404a64:	66 0f 12 45 f0       	movlpd -0x10(%rbp),%xmm0
  404a69:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  404a6d:	77 02                	ja     404a71 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x87>
  404a6f:	eb 09                	jmp    404a7a <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x90>
  404a71:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rbp)
  404a78:	eb 07                	jmp    404a81 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x97>
  404a7a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  404a81:	8b 45 ec             	mov    -0x14(%rbp),%eax
  404a84:	89 45 e8             	mov    %eax,-0x18(%rbp)
  404a87:	8b 45 e8             	mov    -0x18(%rbp),%eax
  404a8a:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  404a8d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    }
  404a90:	c9                   	leaveq 
  404a91:	c3                   	retq   

0000000000404a92 <_D3std8typeinfo9ti_double10TypeInfo_d6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  404a92:	55                   	push   %rbp
  404a93:	48 89 e5             	mov    %rsp,%rbp
  404a96:	48 83 ec 20          	sub    $0x20,%rsp
  404a9a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404a9e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404aa2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404aa6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404aaa:	e8 fd 43 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(double *)p1, *cast(double *)p2);
  404aaf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404ab3:	48 8b 10             	mov    (%rax),%rdx
  404ab6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404aba:	48 8b 00             	mov    (%rax),%rax
  404abd:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  404ac1:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  404ac6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  404aca:	66 0f 12 45 e0       	movlpd -0x20(%rbp),%xmm0
  404acf:	e8 c8 fe ff ff       	callq  40499c <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi>
    }
  404ad4:	c9                   	leaveq 
  404ad5:	c3                   	retq   

0000000000404ad6 <_D3std8typeinfo9ti_double10TypeInfo_d7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  404ad6:	55                   	push   %rbp
  404ad7:	48 89 e5             	mov    %rsp,%rbp
  404ada:	48 83 ec 20          	sub    $0x20,%rsp
  404ade:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404ae2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404ae6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404aea:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404aee:	e8 b9 43 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(double *)p1, *cast(double *)p2);
  404af3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404af7:	48 8b 10             	mov    (%rax),%rdx
  404afa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404afe:	48 8b 00             	mov    (%rax),%rax
  404b01:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  404b05:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  404b0a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  404b0e:	66 0f 12 45 e0       	movlpd -0x20(%rbp),%xmm0
  404b13:	e8 d2 fe ff ff       	callq  4049ea <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi>
    }
  404b18:	c9                   	leaveq 
  404b19:	c3                   	retq   

0000000000404b1a <_D3std8typeinfo9ti_double10TypeInfo_d5tsizeMFZm>:

    size_t tsize()
  404b1a:	55                   	push   %rbp
  404b1b:	48 89 e5             	mov    %rsp,%rbp
  404b1e:	48 83 ec 10          	sub    $0x10,%rsp
  404b22:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404b26:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404b2a:	e8 7d 43 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return double.sizeof;
  404b2f:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  404b34:	c9                   	leaveq 
  404b35:	c3                   	retq   

0000000000404b36 <_D3std8typeinfo9ti_double10TypeInfo_d4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  404b36:	55                   	push   %rbp
  404b37:	48 89 e5             	mov    %rsp,%rbp
  404b3a:	48 83 ec 30          	sub    $0x30,%rsp
  404b3e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404b42:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  404b46:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  404b4a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  404b4e:	e8 59 43 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	double t;
  404b53:	48 b8 00 00 00 00 00 	mov    $0x7ff8000000000000,%rax
  404b5a:	00 f8 7f 
  404b5d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	t = *cast(double *)p1;
  404b61:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  404b65:	48 8b 00             	mov    (%rax),%rax
  404b68:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(double *)p1 = *cast(double *)p2;
  404b6c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  404b70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404b74:	48 8b 00             	mov    (%rax),%rax
  404b77:	48 89 02             	mov    %rax,(%rdx)
	*cast(double *)p2 = t;
  404b7a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  404b7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404b82:	48 89 02             	mov    %rax,(%rdx)
    }
  404b85:	c9                   	leaveq 
  404b86:	c3                   	retq   

0000000000404b87 <_D3std8typeinfo9ti_double10TypeInfo_d4initMFZAv>:

    void[] init()
  404b87:	55                   	push   %rbp
  404b88:	48 89 e5             	mov    %rsp,%rbp
  404b8b:	53                   	push   %rbx
  404b8c:	48 83 ec 28          	sub    $0x28,%rsp
  404b90:	48 89 fb             	mov    %rdi,%rbx
  404b93:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  404b97:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  404b9b:	e8 0c 43 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {	static double r;

	return (cast(double *)&r)[0 .. 1];
  404ba0:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  404ba7:	00 
  404ba8:	48 c7 45 e8 a0 ab 41 	movq   $0x41aba0,-0x18(%rbp)
  404baf:	00 
  404bb0:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  404bb4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404bb8:	49 89 c0             	mov    %rax,%r8
  404bbb:	ba 08 00 00 00       	mov    $0x8,%edx
  404bc0:	be 01 00 00 00       	mov    $0x1,%esi
  404bc5:	48 89 df             	mov    %rbx,%rdi
  404bc8:	e8 82 85 00 00       	callq  40d14f <_d_arraycast>
    }
  404bcd:	48 89 d8             	mov    %rbx,%rax
  404bd0:	48 83 c4 28          	add    $0x28,%rsp
  404bd4:	5b                   	pop    %rbx
  404bd5:	c9                   	leaveq 
  404bd6:	c3                   	retq   
  404bd7:	90                   	nop    

0000000000404bd8 <_D3std8typeinfo8ti_float10TypeInfo_f8toStringMFZAa>:
import kernel.core.system;
//private import std.math;

class TypeInfo_f : TypeInfo
{
    char[] toString() { return "float"; }
  404bd8:	55                   	push   %rbp
  404bd9:	48 89 e5             	mov    %rsp,%rbp
  404bdc:	53                   	push   %rbx
  404bdd:	48 83 ec 08          	sub    $0x8,%rsp
  404be1:	48 89 fb             	mov    %rdi,%rbx
  404be4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404be8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  404bec:	e8 bb 42 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  404bf1:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  404bf8:	48 c7 43 08 00 07 41 	movq   $0x410700,0x8(%rbx)
  404bff:	00 
  404c00:	48 89 d8             	mov    %rbx,%rax
  404c03:	48 83 c4 08          	add    $0x8,%rsp
  404c07:	5b                   	pop    %rbx
  404c08:	c9                   	leaveq 
  404c09:	c3                   	retq   

0000000000404c0a <_D3std8typeinfo8ti_float10TypeInfo_f7getHashMFPvZm>:

    hash_t getHash(void *p)
  404c0a:	55                   	push   %rbp
  404c0b:	48 89 e5             	mov    %rsp,%rbp
  404c0e:	48 83 ec 10          	sub    $0x10,%rsp
  404c12:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404c16:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404c1a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404c1e:	e8 89 42 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p;
  404c23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404c27:	8b 00                	mov    (%rax),%eax
  404c29:	89 c0                	mov    %eax,%eax
    }
  404c2b:	c9                   	leaveq 
  404c2c:	c3                   	retq   

0000000000404c2d <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi>:

    static int _equals(float f1, float f2)
  404c2d:	55                   	push   %rbp
  404c2e:	48 89 e5             	mov    %rsp,%rbp
  404c31:	48 83 ec 20          	sub    $0x20,%rsp
  404c35:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  404c3a:	f3 0f 11 4d f8       	movss  %xmm1,-0x8(%rbp)
    {
	return f1 == f2 ||
  404c3f:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  404c44:	0f 2e 45 f8          	ucomiss -0x8(%rbp),%xmm0
  404c48:	7a 02                	jp     404c4c <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi+0x1f>
  404c4a:	74 1e                	je     404c6a <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi+0x3d>
  404c4c:	d9 45 fc             	flds   -0x4(%rbp)
  404c4f:	db 3c 24             	fstpt  (%rsp)
  404c52:	e8 cd 88 00 00       	callq  40d524 <_D6kernel4core6system5isnanFeZi>
  404c57:	85 c0                	test   %eax,%eax
  404c59:	74 15                	je     404c70 <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi+0x43>
  404c5b:	d9 45 f8             	flds   -0x8(%rbp)
  404c5e:	db 3c 24             	fstpt  (%rsp)
  404c61:	e8 be 88 00 00       	callq  40d524 <_D6kernel4core6system5isnanFeZi>
  404c66:	85 c0                	test   %eax,%eax
  404c68:	74 06                	je     404c70 <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi+0x43>
  404c6a:	c6 45 f7 01          	movb   $0x1,-0x9(%rbp)
  404c6e:	eb 04                	jmp    404c74 <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi+0x47>
  404c70:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
  404c74:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
		(isnan(f1) && isnan(f2));
    }
  404c78:	c9                   	leaveq 
  404c79:	c3                   	retq   

0000000000404c7a <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi>:

    static int _compare(float d1, float d2)
  404c7a:	55                   	push   %rbp
  404c7b:	48 89 e5             	mov    %rsp,%rbp
  404c7e:	48 83 ec 30          	sub    $0x30,%rsp
  404c82:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  404c87:	f3 0f 11 4d f8       	movss  %xmm1,-0x8(%rbp)
    {
	if (d1 !<>= d2)		// if either are NaN
  404c8c:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  404c91:	0f 2e 45 f8          	ucomiss -0x8(%rbp),%xmm0
  404c95:	0f 9a c0             	setp   %al
  404c98:	84 c0                	test   %al,%al
  404c9a:	74 39                	je     404cd5 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x5b>
	{
	    if (isnan(d1))
  404c9c:	d9 45 fc             	flds   -0x4(%rbp)
  404c9f:	db 3c 24             	fstpt  (%rsp)
  404ca2:	e8 7d 88 00 00       	callq  40d524 <_D6kernel4core6system5isnanFeZi>
  404ca7:	85 c0                	test   %eax,%eax
  404ca9:	74 21                	je     404ccc <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x52>
	    {	if (isnan(d2))
  404cab:	d9 45 f8             	flds   -0x8(%rbp)
  404cae:	db 3c 24             	fstpt  (%rsp)
  404cb1:	e8 6e 88 00 00       	callq  40d524 <_D6kernel4core6system5isnanFeZi>
  404cb6:	85 c0                	test   %eax,%eax
  404cb8:	74 09                	je     404cc3 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x49>
		    return 0;
  404cba:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  404cc1:	eb 57                	jmp    404d1a <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0xa0>
		return -1;
  404cc3:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rbp)
  404cca:	eb 4e                	jmp    404d1a <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0xa0>
	    }
	    return 1;
  404ccc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  404cd3:	eb 45                	jmp    404d1a <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0xa0>
	}
	return (d1 == d2) ? 0 : ((d1 < d2) ? -1 : 1);
  404cd5:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  404cda:	0f 2e 45 f8          	ucomiss -0x8(%rbp),%xmm0
  404cde:	7a 02                	jp     404ce2 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x68>
  404ce0:	74 02                	je     404ce4 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x6a>
  404ce2:	eb 09                	jmp    404ced <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x73>
  404ce4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  404ceb:	eb 27                	jmp    404d14 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x9a>
  404ced:	f3 0f 10 4d fc       	movss  -0x4(%rbp),%xmm1
  404cf2:	f3 0f 10 45 f8       	movss  -0x8(%rbp),%xmm0
  404cf7:	0f 2e c1             	ucomiss %xmm1,%xmm0
  404cfa:	77 02                	ja     404cfe <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x84>
  404cfc:	eb 09                	jmp    404d07 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x8d>
  404cfe:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%rbp)
  404d05:	eb 07                	jmp    404d0e <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x94>
  404d07:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  404d0e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  404d11:	89 45 f0             	mov    %eax,-0x10(%rbp)
  404d14:	8b 45 f0             	mov    -0x10(%rbp),%eax
  404d17:	89 45 ec             	mov    %eax,-0x14(%rbp)
  404d1a:	8b 45 ec             	mov    -0x14(%rbp),%eax
    }
  404d1d:	c9                   	leaveq 
  404d1e:	c3                   	retq   

0000000000404d1f <_D3std8typeinfo8ti_float10TypeInfo_f6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  404d1f:	55                   	push   %rbp
  404d20:	48 89 e5             	mov    %rsp,%rbp
  404d23:	48 83 ec 20          	sub    $0x20,%rsp
  404d27:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404d2b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404d2f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404d33:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404d37:	e8 70 41 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(float *)p1, *cast(float *)p2);
  404d3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404d40:	8b 10                	mov    (%rax),%edx
  404d42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404d46:	8b 00                	mov    (%rax),%eax
  404d48:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  404d4b:	f3 0f 10 4d e4       	movss  -0x1c(%rbp),%xmm1
  404d50:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  404d53:	f3 0f 10 45 e4       	movss  -0x1c(%rbp),%xmm0
  404d58:	e8 d0 fe ff ff       	callq  404c2d <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi>
    }
  404d5d:	c9                   	leaveq 
  404d5e:	c3                   	retq   

0000000000404d5f <_D3std8typeinfo8ti_float10TypeInfo_f7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  404d5f:	55                   	push   %rbp
  404d60:	48 89 e5             	mov    %rsp,%rbp
  404d63:	48 83 ec 20          	sub    $0x20,%rsp
  404d67:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404d6b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404d6f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404d73:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404d77:	e8 30 41 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(float *)p1, *cast(float *)p2);
  404d7c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404d80:	8b 10                	mov    (%rax),%edx
  404d82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404d86:	8b 00                	mov    (%rax),%eax
  404d88:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  404d8b:	f3 0f 10 4d e4       	movss  -0x1c(%rbp),%xmm1
  404d90:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  404d93:	f3 0f 10 45 e4       	movss  -0x1c(%rbp),%xmm0
  404d98:	e8 dd fe ff ff       	callq  404c7a <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi>
    }
  404d9d:	c9                   	leaveq 
  404d9e:	c3                   	retq   

0000000000404d9f <_D3std8typeinfo8ti_float10TypeInfo_f5tsizeMFZm>:

    size_t tsize()
  404d9f:	55                   	push   %rbp
  404da0:	48 89 e5             	mov    %rsp,%rbp
  404da3:	48 83 ec 10          	sub    $0x10,%rsp
  404da7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404dab:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404daf:	e8 f8 40 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return float.sizeof;
  404db4:	b8 04 00 00 00       	mov    $0x4,%eax
    }
  404db9:	c9                   	leaveq 
  404dba:	c3                   	retq   

0000000000404dbb <_D3std8typeinfo8ti_float10TypeInfo_f4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  404dbb:	55                   	push   %rbp
  404dbc:	48 89 e5             	mov    %rsp,%rbp
  404dbf:	48 83 ec 30          	sub    $0x30,%rsp
  404dc3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404dc7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  404dcb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  404dcf:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  404dd3:	e8 d4 40 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	float t;
  404dd8:	b8 00 00 c0 7f       	mov    $0x7fc00000,%eax
  404ddd:	89 45 fc             	mov    %eax,-0x4(%rbp)

	t = *cast(float *)p1;
  404de0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  404de4:	8b 00                	mov    (%rax),%eax
  404de6:	89 45 fc             	mov    %eax,-0x4(%rbp)
	*cast(float *)p1 = *cast(float *)p2;
  404de9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  404ded:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404df1:	8b 00                	mov    (%rax),%eax
  404df3:	89 02                	mov    %eax,(%rdx)
	*cast(float *)p2 = t;
  404df5:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  404df9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404dfc:	89 02                	mov    %eax,(%rdx)
    }
  404dfe:	c9                   	leaveq 
  404dff:	c3                   	retq   

0000000000404e00 <_D3std8typeinfo8ti_float10TypeInfo_f4initMFZAv>:

    void[] init()
  404e00:	55                   	push   %rbp
  404e01:	48 89 e5             	mov    %rsp,%rbp
  404e04:	53                   	push   %rbx
  404e05:	48 83 ec 28          	sub    $0x28,%rsp
  404e09:	48 89 fb             	mov    %rdi,%rbx
  404e0c:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  404e10:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  404e14:	e8 93 40 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {	static float r;

	return (cast(float *)&r)[0 .. 1];
  404e19:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  404e20:	00 
  404e21:	48 c7 45 e8 60 ac 41 	movq   $0x41ac60,-0x18(%rbp)
  404e28:	00 
  404e29:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  404e2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404e31:	49 89 c0             	mov    %rax,%r8
  404e34:	ba 04 00 00 00       	mov    $0x4,%edx
  404e39:	be 01 00 00 00       	mov    $0x1,%esi
  404e3e:	48 89 df             	mov    %rbx,%rdi
  404e41:	e8 09 83 00 00       	callq  40d14f <_d_arraycast>
    }
  404e46:	48 89 d8             	mov    %rbx,%rax
  404e49:	48 83 c4 28          	add    $0x28,%rsp
  404e4d:	5b                   	pop    %rbx
  404e4e:	c9                   	leaveq 
  404e4f:	c3                   	retq   

0000000000404e50 <_D3std8typeinfo10ti_idouble10TypeInfo_p8toStringMFZAa>:

private import std.typeinfo.ti_double;

class TypeInfo_p : TypeInfo_d
{
    char[] toString() { return "idouble"; }
  404e50:	55                   	push   %rbp
  404e51:	48 89 e5             	mov    %rsp,%rbp
  404e54:	53                   	push   %rbx
  404e55:	48 83 ec 08          	sub    $0x8,%rsp
  404e59:	48 89 fb             	mov    %rdi,%rbx
  404e5c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404e60:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  404e64:	e8 43 40 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  404e69:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  404e70:	48 c7 43 08 c0 07 41 	movq   $0x4107c0,0x8(%rbx)
  404e77:	00 
  404e78:	48 89 d8             	mov    %rbx,%rax
  404e7b:	48 83 c4 08          	add    $0x8,%rsp
  404e7f:	5b                   	pop    %rbx
  404e80:	c9                   	leaveq 
  404e81:	c3                   	retq   
  404e82:	90                   	nop    
  404e83:	90                   	nop    

0000000000404e84 <_D3std8typeinfo9ti_ifloat10TypeInfo_o8toStringMFZAa>:

private import std.typeinfo.ti_float;

class TypeInfo_o : TypeInfo_f
{
    char[] toString() { return "ifloat"; }
  404e84:	55                   	push   %rbp
  404e85:	48 89 e5             	mov    %rsp,%rbp
  404e88:	53                   	push   %rbx
  404e89:	48 83 ec 08          	sub    $0x8,%rsp
  404e8d:	48 89 fb             	mov    %rdi,%rbx
  404e90:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404e94:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  404e98:	e8 0f 40 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  404e9d:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  404ea4:	48 c7 43 08 80 08 41 	movq   $0x410880,0x8(%rbx)
  404eab:	00 
  404eac:	48 89 d8             	mov    %rbx,%rax
  404eaf:	48 83 c4 08          	add    $0x8,%rsp
  404eb3:	5b                   	pop    %rbx
  404eb4:	c9                   	leaveq 
  404eb5:	c3                   	retq   
  404eb6:	90                   	nop    
  404eb7:	90                   	nop    

0000000000404eb8 <_D3std8typeinfo6ti_int10TypeInfo_i8toStringMFZAa>:

module std.typeinfo.ti_int;

class TypeInfo_i : TypeInfo
{
    char[] toString() { return "int"; }
  404eb8:	55                   	push   %rbp
  404eb9:	48 89 e5             	mov    %rsp,%rbp
  404ebc:	53                   	push   %rbx
  404ebd:	48 83 ec 08          	sub    $0x8,%rsp
  404ec1:	48 89 fb             	mov    %rdi,%rbx
  404ec4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404ec8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  404ecc:	e8 db 3f 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  404ed1:	48 c7 03 03 00 00 00 	movq   $0x3,(%rbx)
  404ed8:	48 c7 43 08 40 09 41 	movq   $0x410940,0x8(%rbx)
  404edf:	00 
  404ee0:	48 89 d8             	mov    %rbx,%rax
  404ee3:	48 83 c4 08          	add    $0x8,%rsp
  404ee7:	5b                   	pop    %rbx
  404ee8:	c9                   	leaveq 
  404ee9:	c3                   	retq   

0000000000404eea <_D3std8typeinfo6ti_int10TypeInfo_i7getHashMFPvZm>:

    hash_t getHash(void *p)
  404eea:	55                   	push   %rbp
  404eeb:	48 89 e5             	mov    %rsp,%rbp
  404eee:	48 83 ec 10          	sub    $0x10,%rsp
  404ef2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404ef6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404efa:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404efe:	e8 a9 3f 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p;
  404f03:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404f07:	8b 00                	mov    (%rax),%eax
  404f09:	89 c0                	mov    %eax,%eax
    }
  404f0b:	c9                   	leaveq 
  404f0c:	c3                   	retq   

0000000000404f0d <_D3std8typeinfo6ti_int10TypeInfo_i6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  404f0d:	55                   	push   %rbp
  404f0e:	48 89 e5             	mov    %rsp,%rbp
  404f11:	48 83 ec 20          	sub    $0x20,%rsp
  404f15:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404f19:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404f1d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404f21:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404f25:	e8 82 3f 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p1 == *cast(uint *)p2;
  404f2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404f2e:	8b 10                	mov    (%rax),%edx
  404f30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404f34:	8b 00                	mov    (%rax),%eax
  404f36:	39 c2                	cmp    %eax,%edx
  404f38:	0f 94 c0             	sete   %al
  404f3b:	0f b6 c0             	movzbl %al,%eax
    }
  404f3e:	c9                   	leaveq 
  404f3f:	c3                   	retq   

0000000000404f40 <_D3std8typeinfo6ti_int10TypeInfo_i7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  404f40:	55                   	push   %rbp
  404f41:	48 89 e5             	mov    %rsp,%rbp
  404f44:	48 83 ec 20          	sub    $0x20,%rsp
  404f48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404f4c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404f50:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404f54:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404f58:	e8 4f 3f 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	if (*cast(int*) p1 < *cast(int*) p2)
  404f5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404f61:	8b 10                	mov    (%rax),%edx
  404f63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404f67:	8b 00                	mov    (%rax),%eax
  404f69:	39 c2                	cmp    %eax,%edx
  404f6b:	7d 09                	jge    404f76 <_D3std8typeinfo6ti_int10TypeInfo_i7compareMFPvPvZi+0x36>
	    return -1;
  404f6d:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  404f74:	eb 20                	jmp    404f96 <_D3std8typeinfo6ti_int10TypeInfo_i7compareMFPvPvZi+0x56>
	else if (*cast(int*) p1 > *cast(int*) p2)
  404f76:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404f7a:	8b 10                	mov    (%rax),%edx
  404f7c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404f80:	8b 00                	mov    (%rax),%eax
  404f82:	39 c2                	cmp    %eax,%edx
  404f84:	7e 09                	jle    404f8f <_D3std8typeinfo6ti_int10TypeInfo_i7compareMFPvPvZi+0x4f>
	    return 1;
  404f86:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  404f8d:	eb 07                	jmp    404f96 <_D3std8typeinfo6ti_int10TypeInfo_i7compareMFPvPvZi+0x56>
	return 0;
  404f8f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  404f96:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    }
  404f99:	c9                   	leaveq 
  404f9a:	c3                   	retq   

0000000000404f9b <_D3std8typeinfo6ti_int10TypeInfo_i5tsizeMFZm>:

    size_t tsize()
  404f9b:	55                   	push   %rbp
  404f9c:	48 89 e5             	mov    %rsp,%rbp
  404f9f:	48 83 ec 10          	sub    $0x10,%rsp
  404fa3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404fa7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404fab:	e8 fc 3e 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return int.sizeof;
  404fb0:	b8 04 00 00 00       	mov    $0x4,%eax
    }
  404fb5:	c9                   	leaveq 
  404fb6:	c3                   	retq   

0000000000404fb7 <_D3std8typeinfo6ti_int10TypeInfo_i4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  404fb7:	55                   	push   %rbp
  404fb8:	48 89 e5             	mov    %rsp,%rbp
  404fbb:	48 83 ec 30          	sub    $0x30,%rsp
  404fbf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404fc3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  404fc7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  404fcb:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  404fcf:	e8 d8 3e 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	int t;
  404fd4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	t = *cast(int *)p1;
  404fdb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  404fdf:	8b 00                	mov    (%rax),%eax
  404fe1:	89 45 fc             	mov    %eax,-0x4(%rbp)
	*cast(int *)p1 = *cast(int *)p2;
  404fe4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  404fe8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404fec:	8b 00                	mov    (%rax),%eax
  404fee:	89 02                	mov    %eax,(%rdx)
	*cast(int *)p2 = t;
  404ff0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  404ff4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404ff7:	89 02                	mov    %eax,(%rdx)
    }
  404ff9:	c9                   	leaveq 
  404ffa:	c3                   	retq   
  404ffb:	90                   	nop    

0000000000404ffc <_D3std8typeinfo8ti_ireal10TypeInfo_j8toStringMFZAa>:

private import std.typeinfo.ti_real;

class TypeInfo_j : TypeInfo_e
{
    char[] toString() { return "ireal"; }
  404ffc:	55                   	push   %rbp
  404ffd:	48 89 e5             	mov    %rsp,%rbp
  405000:	53                   	push   %rbx
  405001:	48 83 ec 08          	sub    $0x8,%rsp
  405005:	48 89 fb             	mov    %rdi,%rbx
  405008:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40500c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405010:	e8 97 3e 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  405015:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  40501c:	48 c7 43 08 00 0a 41 	movq   $0x410a00,0x8(%rbx)
  405023:	00 
  405024:	48 89 d8             	mov    %rbx,%rax
  405027:	48 83 c4 08          	add    $0x8,%rsp
  40502b:	5b                   	pop    %rbx
  40502c:	c9                   	leaveq 
  40502d:	c3                   	retq   
  40502e:	90                   	nop    
  40502f:	90                   	nop    

0000000000405030 <_D3std8typeinfo7ti_long10TypeInfo_l8toStringMFZAa>:

module std.typeinfo.ti_long;

class TypeInfo_l : TypeInfo
{
    char[] toString() { return "long"; }
  405030:	55                   	push   %rbp
  405031:	48 89 e5             	mov    %rsp,%rbp
  405034:	53                   	push   %rbx
  405035:	48 83 ec 08          	sub    $0x8,%rsp
  405039:	48 89 fb             	mov    %rdi,%rbx
  40503c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405040:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405044:	e8 63 3e 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  405049:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  405050:	48 c7 43 08 c0 0a 41 	movq   $0x410ac0,0x8(%rbx)
  405057:	00 
  405058:	48 89 d8             	mov    %rbx,%rax
  40505b:	48 83 c4 08          	add    $0x8,%rsp
  40505f:	5b                   	pop    %rbx
  405060:	c9                   	leaveq 
  405061:	c3                   	retq   

0000000000405062 <_D3std8typeinfo7ti_long10TypeInfo_l7getHashMFPvZm>:

    hash_t getHash(void *p)
  405062:	55                   	push   %rbp
  405063:	48 89 e5             	mov    %rsp,%rbp
  405066:	48 83 ec 10          	sub    $0x10,%rsp
  40506a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40506e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405072:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405076:	e8 31 3e 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p + (cast(uint *)p)[1];
  40507b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40507f:	8b 08                	mov    (%rax),%ecx
  405081:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  405085:	b8 04 00 00 00       	mov    $0x4,%eax
  40508a:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40508e:	8b 00                	mov    (%rax),%eax
  405090:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  405093:	89 c0                	mov    %eax,%eax
    }
  405095:	c9                   	leaveq 
  405096:	c3                   	retq   

0000000000405097 <_D3std8typeinfo7ti_long10TypeInfo_l6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405097:	55                   	push   %rbp
  405098:	48 89 e5             	mov    %rsp,%rbp
  40509b:	48 83 ec 20          	sub    $0x20,%rsp
  40509f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4050a3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4050a7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4050ab:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4050af:	e8 f8 3d 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(long *)p1 == *cast(long *)p2;
  4050b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4050b8:	48 8b 10             	mov    (%rax),%rdx
  4050bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4050bf:	48 8b 00             	mov    (%rax),%rax
  4050c2:	48 39 c2             	cmp    %rax,%rdx
  4050c5:	0f 94 c0             	sete   %al
  4050c8:	0f b6 c0             	movzbl %al,%eax
    }
  4050cb:	c9                   	leaveq 
  4050cc:	c3                   	retq   

00000000004050cd <_D3std8typeinfo7ti_long10TypeInfo_l7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4050cd:	55                   	push   %rbp
  4050ce:	48 89 e5             	mov    %rsp,%rbp
  4050d1:	48 83 ec 20          	sub    $0x20,%rsp
  4050d5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4050d9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4050dd:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4050e1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4050e5:	e8 c2 3d 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	if (*cast(long *)p1 < *cast(long *)p2)
  4050ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4050ee:	48 8b 10             	mov    (%rax),%rdx
  4050f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4050f5:	48 8b 00             	mov    (%rax),%rax
  4050f8:	48 39 c2             	cmp    %rax,%rdx
  4050fb:	7d 09                	jge    405106 <_D3std8typeinfo7ti_long10TypeInfo_l7compareMFPvPvZi+0x39>
	    return -1;
  4050fd:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  405104:	eb 23                	jmp    405129 <_D3std8typeinfo7ti_long10TypeInfo_l7compareMFPvPvZi+0x5c>
	else if (*cast(long *)p1 > *cast(long *)p2)
  405106:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40510a:	48 8b 10             	mov    (%rax),%rdx
  40510d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405111:	48 8b 00             	mov    (%rax),%rax
  405114:	48 39 c2             	cmp    %rax,%rdx
  405117:	7e 09                	jle    405122 <_D3std8typeinfo7ti_long10TypeInfo_l7compareMFPvPvZi+0x55>
	    return 1;
  405119:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  405120:	eb 07                	jmp    405129 <_D3std8typeinfo7ti_long10TypeInfo_l7compareMFPvPvZi+0x5c>
	return 0;
  405122:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  405129:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    }
  40512c:	c9                   	leaveq 
  40512d:	c3                   	retq   

000000000040512e <_D3std8typeinfo7ti_long10TypeInfo_l5tsizeMFZm>:

    size_t tsize()
  40512e:	55                   	push   %rbp
  40512f:	48 89 e5             	mov    %rsp,%rbp
  405132:	48 83 ec 10          	sub    $0x10,%rsp
  405136:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40513a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40513e:	e8 69 3d 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return long.sizeof;
  405143:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  405148:	c9                   	leaveq 
  405149:	c3                   	retq   

000000000040514a <_D3std8typeinfo7ti_long10TypeInfo_l4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  40514a:	55                   	push   %rbp
  40514b:	48 89 e5             	mov    %rsp,%rbp
  40514e:	48 83 ec 30          	sub    $0x30,%rsp
  405152:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405156:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40515a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40515e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405162:	e8 45 3d 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	long t;
  405167:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40516e:	00 

	t = *cast(long *)p1;
  40516f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405173:	48 8b 00             	mov    (%rax),%rax
  405176:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(long *)p1 = *cast(long *)p2;
  40517a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40517e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405182:	48 8b 00             	mov    (%rax),%rax
  405185:	48 89 02             	mov    %rax,(%rdx)
	*cast(long *)p2 = t;
  405188:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40518c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405190:	48 89 02             	mov    %rax,(%rdx)
    }
  405193:	c9                   	leaveq 
  405194:	c3                   	retq   
  405195:	90                   	nop    
  405196:	90                   	nop    
  405197:	90                   	nop    

0000000000405198 <_D3std8typeinfo6ti_ptr10TypeInfo_P7getHashMFPvZm>:

module std.typeinfo.ti_ptr;

class TypeInfo_P : TypeInfo
{
    hash_t getHash(void *p)
  405198:	55                   	push   %rbp
  405199:	48 89 e5             	mov    %rsp,%rbp
  40519c:	48 83 ec 10          	sub    $0x10,%rsp
  4051a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4051a4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4051a8:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4051ac:	e8 fb 3c 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return cast(uint)*cast(void* *)p;
  4051b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4051b5:	48 8b 00             	mov    (%rax),%rax
  4051b8:	89 c0                	mov    %eax,%eax
    }
  4051ba:	c9                   	leaveq 
  4051bb:	c3                   	retq   

00000000004051bc <_D3std8typeinfo6ti_ptr10TypeInfo_P6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4051bc:	55                   	push   %rbp
  4051bd:	48 89 e5             	mov    %rsp,%rbp
  4051c0:	48 83 ec 20          	sub    $0x20,%rsp
  4051c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4051c8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4051cc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4051d0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4051d4:	e8 d3 3c 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(void* *)p1 == *cast(void* *)p2;
  4051d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4051dd:	48 8b 10             	mov    (%rax),%rdx
  4051e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4051e4:	48 8b 00             	mov    (%rax),%rax
  4051e7:	48 39 c2             	cmp    %rax,%rdx
  4051ea:	0f 94 c0             	sete   %al
  4051ed:	0f b6 c0             	movzbl %al,%eax
    }
  4051f0:	c9                   	leaveq 
  4051f1:	c3                   	retq   

00000000004051f2 <_D3std8typeinfo6ti_ptr10TypeInfo_P7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4051f2:	55                   	push   %rbp
  4051f3:	48 89 e5             	mov    %rsp,%rbp
  4051f6:	48 83 ec 30          	sub    $0x30,%rsp
  4051fa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4051fe:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405202:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405206:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40520a:	e8 9d 3c 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	auto c = *cast(void* *)p1 - *cast(void* *)p2;
  40520f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405213:	48 8b 10             	mov    (%rax),%rdx
  405216:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40521a:	48 8b 00             	mov    (%rax),%rax
  40521d:	48 89 d1             	mov    %rdx,%rcx
  405220:	48 29 c1             	sub    %rax,%rcx
  405223:	48 89 c8             	mov    %rcx,%rax
  405226:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (c < 0)
  40522a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40522f:	79 09                	jns    40523a <_D3std8typeinfo6ti_ptr10TypeInfo_P7compareMFPvPvZi+0x48>
	    return -1;
  405231:	c7 45 d4 ff ff ff ff 	movl   $0xffffffff,-0x2c(%rbp)
  405238:	eb 17                	jmp    405251 <_D3std8typeinfo6ti_ptr10TypeInfo_P7compareMFPvPvZi+0x5f>
	else if (c > 0)
  40523a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40523f:	7e 09                	jle    40524a <_D3std8typeinfo6ti_ptr10TypeInfo_P7compareMFPvPvZi+0x58>
	    return 1;
  405241:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
  405248:	eb 07                	jmp    405251 <_D3std8typeinfo6ti_ptr10TypeInfo_P7compareMFPvPvZi+0x5f>
	return 0;
  40524a:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  405251:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    }
  405254:	c9                   	leaveq 
  405255:	c3                   	retq   

0000000000405256 <_D3std8typeinfo6ti_ptr10TypeInfo_P5tsizeMFZm>:

    size_t tsize()
  405256:	55                   	push   %rbp
  405257:	48 89 e5             	mov    %rsp,%rbp
  40525a:	48 83 ec 10          	sub    $0x10,%rsp
  40525e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405262:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405266:	e8 41 3c 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (void*).sizeof;
  40526b:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  405270:	c9                   	leaveq 
  405271:	c3                   	retq   

0000000000405272 <_D3std8typeinfo6ti_ptr10TypeInfo_P4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  405272:	55                   	push   %rbp
  405273:	48 89 e5             	mov    %rsp,%rbp
  405276:	48 83 ec 30          	sub    $0x30,%rsp
  40527a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40527e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405282:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405286:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40528a:	e8 1d 3c 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	void* t;
  40528f:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  405296:	00 

	t = *cast(void* *)p1;
  405297:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40529b:	48 8b 00             	mov    (%rax),%rax
  40529e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(void* *)p1 = *cast(void* *)p2;
  4052a2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4052a6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4052aa:	48 8b 00             	mov    (%rax),%rax
  4052ad:	48 89 02             	mov    %rax,(%rdx)
	*cast(void* *)p2 = t;
  4052b0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4052b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4052b8:	48 89 02             	mov    %rax,(%rdx)
    }
  4052bb:	c9                   	leaveq 
  4052bc:	c3                   	retq   

00000000004052bd <_D3std8typeinfo6ti_ptr10TypeInfo_P5flagsMFZk>:

    uint flags()
  4052bd:	55                   	push   %rbp
  4052be:	48 89 e5             	mov    %rsp,%rbp
  4052c1:	48 83 ec 10          	sub    $0x10,%rsp
  4052c5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4052c9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4052cd:	e8 da 3b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  4052d2:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  4052d7:	c9                   	leaveq 
  4052d8:	c3                   	retq   
  4052d9:	90                   	nop    
  4052da:	90                   	nop    
  4052db:	90                   	nop    

00000000004052dc <_D3std8typeinfo7ti_real10TypeInfo_e8toStringMFZAa>:
import kernel.core.system;
//private import std.math;

class TypeInfo_e : TypeInfo
{
    char[] toString() { return "real"; }
  4052dc:	55                   	push   %rbp
  4052dd:	48 89 e5             	mov    %rsp,%rbp
  4052e0:	53                   	push   %rbx
  4052e1:	48 83 ec 08          	sub    $0x8,%rsp
  4052e5:	48 89 fb             	mov    %rdi,%rbx
  4052e8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4052ec:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4052f0:	e8 b7 3b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  4052f5:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  4052fc:	48 c7 43 08 20 0c 41 	movq   $0x410c20,0x8(%rbx)
  405303:	00 
  405304:	48 89 d8             	mov    %rbx,%rax
  405307:	48 83 c4 08          	add    $0x8,%rsp
  40530b:	5b                   	pop    %rbx
  40530c:	c9                   	leaveq 
  40530d:	c3                   	retq   

000000000040530e <_D3std8typeinfo7ti_real10TypeInfo_e7getHashMFPvZm>:

    hash_t getHash(void *p)
  40530e:	55                   	push   %rbp
  40530f:	48 89 e5             	mov    %rsp,%rbp
  405312:	48 83 ec 10          	sub    $0x10,%rsp
  405316:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40531a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40531e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405322:	e8 85 3b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cast(uint *)p)[0] + (cast(uint *)p)[1] + (cast(ushort *)p)[4];
  405327:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40532b:	b8 00 00 00 00       	mov    $0x0,%eax
  405330:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  405334:	8b 08                	mov    (%rax),%ecx
  405336:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40533a:	b8 04 00 00 00       	mov    $0x4,%eax
  40533f:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  405343:	8b 00                	mov    (%rax),%eax
  405345:	01 c1                	add    %eax,%ecx
  405347:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40534b:	b8 08 00 00 00       	mov    $0x8,%eax
  405350:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  405354:	0f b7 00             	movzwl (%rax),%eax
  405357:	0f b7 c0             	movzwl %ax,%eax
  40535a:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  40535d:	89 c0                	mov    %eax,%eax
    }
  40535f:	c9                   	leaveq 
  405360:	c3                   	retq   

0000000000405361 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi>:

    static int _equals(real f1, real f2)
  405361:	55                   	push   %rbp
  405362:	48 89 e5             	mov    %rsp,%rbp
  405365:	48 83 ec 20          	sub    $0x20,%rsp
    {
	return f1 == f2 ||
  405369:	db 6d 10             	fldt   0x10(%rbp)
  40536c:	db 6d 20             	fldt   0x20(%rbp)
  40536f:	d9 c9                	fxch   %st(1)
  405371:	df e9                	fucomip %st(1),%st
  405373:	df c0                	ffreep %st(0)
  405375:	7a 02                	jp     405379 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi+0x18>
  405377:	74 30                	je     4053a9 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi+0x48>
  405379:	48 8b 45 10          	mov    0x10(%rbp),%rax
  40537d:	8b 55 18             	mov    0x18(%rbp),%edx
  405380:	48 89 04 24          	mov    %rax,(%rsp)
  405384:	89 54 24 08          	mov    %edx,0x8(%rsp)
  405388:	e8 97 81 00 00       	callq  40d524 <_D6kernel4core6system5isnanFeZi>
  40538d:	85 c0                	test   %eax,%eax
  40538f:	74 1e                	je     4053af <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi+0x4e>
  405391:	48 8b 45 20          	mov    0x20(%rbp),%rax
  405395:	8b 55 28             	mov    0x28(%rbp),%edx
  405398:	48 89 04 24          	mov    %rax,(%rsp)
  40539c:	89 54 24 08          	mov    %edx,0x8(%rsp)
  4053a0:	e8 7f 81 00 00       	callq  40d524 <_D6kernel4core6system5isnanFeZi>
  4053a5:	85 c0                	test   %eax,%eax
  4053a7:	74 06                	je     4053af <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi+0x4e>
  4053a9:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
  4053ad:	eb 04                	jmp    4053b3 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi+0x52>
  4053af:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
  4053b3:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
		(isnan(f1) && isnan(f2));
    }
  4053b7:	c9                   	leaveq 
  4053b8:	c3                   	retq   

00000000004053b9 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi>:

    static int _compare(real d1, real d2)
  4053b9:	55                   	push   %rbp
  4053ba:	48 89 e5             	mov    %rsp,%rbp
  4053bd:	48 83 ec 20          	sub    $0x20,%rsp
    {
	if (d1 !<>= d2)		// if either are NaN
  4053c1:	db 6d 10             	fldt   0x10(%rbp)
  4053c4:	db 6d 20             	fldt   0x20(%rbp)
  4053c7:	df e9                	fucomip %st(1),%st
  4053c9:	df c0                	ffreep %st(0)
  4053cb:	0f 9a c0             	setp   %al
  4053ce:	84 c0                	test   %al,%al
  4053d0:	74 4b                	je     40541d <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x64>
	{
	    if (isnan(d1))
  4053d2:	48 8b 45 10          	mov    0x10(%rbp),%rax
  4053d6:	8b 55 18             	mov    0x18(%rbp),%edx
  4053d9:	48 89 04 24          	mov    %rax,(%rsp)
  4053dd:	89 54 24 08          	mov    %edx,0x8(%rsp)
  4053e1:	e8 3e 81 00 00       	callq  40d524 <_D6kernel4core6system5isnanFeZi>
  4053e6:	85 c0                	test   %eax,%eax
  4053e8:	74 2a                	je     405414 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x5b>
	    {	if (isnan(d2))
  4053ea:	48 8b 45 20          	mov    0x20(%rbp),%rax
  4053ee:	8b 55 28             	mov    0x28(%rbp),%edx
  4053f1:	48 89 04 24          	mov    %rax,(%rsp)
  4053f5:	89 54 24 08          	mov    %edx,0x8(%rsp)
  4053f9:	e8 26 81 00 00       	callq  40d524 <_D6kernel4core6system5isnanFeZi>
  4053fe:	85 c0                	test   %eax,%eax
  405400:	74 09                	je     40540b <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x52>
		    return 0;
  405402:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  405409:	eb 57                	jmp    405462 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0xa9>
		return -1;
  40540b:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%rbp)
  405412:	eb 4e                	jmp    405462 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0xa9>
	    }
	    return 1;
  405414:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  40541b:	eb 45                	jmp    405462 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0xa9>
	}
	return (d1 == d2) ? 0 : ((d1 < d2) ? -1 : 1);
  40541d:	db 6d 10             	fldt   0x10(%rbp)
  405420:	db 6d 20             	fldt   0x20(%rbp)
  405423:	d9 c9                	fxch   %st(1)
  405425:	df e9                	fucomip %st(1),%st
  405427:	df c0                	ffreep %st(0)
  405429:	7a 02                	jp     40542d <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x74>
  40542b:	74 02                	je     40542f <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x76>
  40542d:	eb 09                	jmp    405438 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x7f>
  40542f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  405436:	eb 24                	jmp    40545c <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0xa3>
  405438:	db 6d 10             	fldt   0x10(%rbp)
  40543b:	db 6d 20             	fldt   0x20(%rbp)
  40543e:	df e9                	fucomip %st(1),%st
  405440:	df c0                	ffreep %st(0)
  405442:	77 02                	ja     405446 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x8d>
  405444:	eb 09                	jmp    40544f <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x96>
  405446:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  40544d:	eb 07                	jmp    405456 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x9d>
  40544f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  405456:	8b 45 fc             	mov    -0x4(%rbp),%eax
  405459:	89 45 f8             	mov    %eax,-0x8(%rbp)
  40545c:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40545f:	89 45 f4             	mov    %eax,-0xc(%rbp)
  405462:	8b 45 f4             	mov    -0xc(%rbp),%eax
    }
  405465:	c9                   	leaveq 
  405466:	c3                   	retq   

0000000000405467 <_D3std8typeinfo7ti_real10TypeInfo_e6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405467:	55                   	push   %rbp
  405468:	48 89 e5             	mov    %rsp,%rbp
  40546b:	53                   	push   %rbx
  40546c:	48 83 ec 48          	sub    $0x48,%rsp
  405470:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405474:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405478:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40547c:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405480:	e8 27 3a 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(real *)p1, *cast(real *)p2);
  405485:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405489:	48 8b 08             	mov    (%rax),%rcx
  40548c:	8b 58 08             	mov    0x8(%rax),%ebx
  40548f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405493:	8b 50 08             	mov    0x8(%rax),%edx
  405496:	48 8b 00             	mov    (%rax),%rax
  405499:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  40549e:	89 5c 24 18          	mov    %ebx,0x18(%rsp)
  4054a2:	48 89 04 24          	mov    %rax,(%rsp)
  4054a6:	89 54 24 08          	mov    %edx,0x8(%rsp)
  4054aa:	e8 b2 fe ff ff       	callq  405361 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi>
    }
  4054af:	48 83 c4 48          	add    $0x48,%rsp
  4054b3:	5b                   	pop    %rbx
  4054b4:	c9                   	leaveq 
  4054b5:	c3                   	retq   

00000000004054b6 <_D3std8typeinfo7ti_real10TypeInfo_e7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4054b6:	55                   	push   %rbp
  4054b7:	48 89 e5             	mov    %rsp,%rbp
  4054ba:	53                   	push   %rbx
  4054bb:	48 83 ec 48          	sub    $0x48,%rsp
  4054bf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4054c3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4054c7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4054cb:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4054cf:	e8 d8 39 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(real *)p1, *cast(real *)p2);
  4054d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4054d8:	48 8b 08             	mov    (%rax),%rcx
  4054db:	8b 58 08             	mov    0x8(%rax),%ebx
  4054de:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4054e2:	8b 50 08             	mov    0x8(%rax),%edx
  4054e5:	48 8b 00             	mov    (%rax),%rax
  4054e8:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  4054ed:	89 5c 24 18          	mov    %ebx,0x18(%rsp)
  4054f1:	48 89 04 24          	mov    %rax,(%rsp)
  4054f5:	89 54 24 08          	mov    %edx,0x8(%rsp)
  4054f9:	e8 bb fe ff ff       	callq  4053b9 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi>
    }
  4054fe:	48 83 c4 48          	add    $0x48,%rsp
  405502:	5b                   	pop    %rbx
  405503:	c9                   	leaveq 
  405504:	c3                   	retq   

0000000000405505 <_D3std8typeinfo7ti_real10TypeInfo_e5tsizeMFZm>:

    size_t tsize()
  405505:	55                   	push   %rbp
  405506:	48 89 e5             	mov    %rsp,%rbp
  405509:	48 83 ec 10          	sub    $0x10,%rsp
  40550d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405511:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405515:	e8 92 39 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return real.sizeof;
  40551a:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  40551f:	c9                   	leaveq 
  405520:	c3                   	retq   

0000000000405521 <_D3std8typeinfo7ti_real10TypeInfo_e4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  405521:	55                   	push   %rbp
  405522:	48 89 e5             	mov    %rsp,%rbp
  405525:	48 83 ec 30          	sub    $0x30,%rsp
  405529:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40552d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405531:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405535:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405539:	e8 6e 39 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	real t;
  40553e:	48 b8 00 00 00 00 00 	mov    $0xc000000000000000,%rax
  405545:	00 00 c0 
  405548:	ba ff 7f 00 00       	mov    $0x7fff,%edx
  40554d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  405551:	89 55 f8             	mov    %edx,-0x8(%rbp)

	t = *cast(real *)p1;
  405554:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405558:	8b 50 08             	mov    0x8(%rax),%edx
  40555b:	48 8b 00             	mov    (%rax),%rax
  40555e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  405562:	89 55 f8             	mov    %edx,-0x8(%rbp)
	*cast(real *)p1 = *cast(real *)p2;
  405565:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  405569:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40556d:	8b 50 08             	mov    0x8(%rax),%edx
  405570:	48 8b 00             	mov    (%rax),%rax
  405573:	48 89 01             	mov    %rax,(%rcx)
  405576:	89 51 08             	mov    %edx,0x8(%rcx)
	*cast(real *)p2 = t;
  405579:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  40557d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405581:	8b 55 f8             	mov    -0x8(%rbp),%edx
  405584:	48 89 01             	mov    %rax,(%rcx)
  405587:	89 51 08             	mov    %edx,0x8(%rcx)
    }
  40558a:	c9                   	leaveq 
  40558b:	c3                   	retq   

000000000040558c <_D3std8typeinfo7ti_real10TypeInfo_e4initMFZAv>:

    void[] init()
  40558c:	55                   	push   %rbp
  40558d:	48 89 e5             	mov    %rsp,%rbp
  405590:	53                   	push   %rbx
  405591:	48 83 ec 28          	sub    $0x28,%rsp
  405595:	48 89 fb             	mov    %rdi,%rbx
  405598:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40559c:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4055a0:	e8 07 39 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {	static real r;

	return (cast(real *)&r)[0 .. 1];
  4055a5:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  4055ac:	00 
  4055ad:	48 c7 45 e8 e0 b0 41 	movq   $0x41b0e0,-0x18(%rbp)
  4055b4:	00 
  4055b5:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4055b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4055bd:	49 89 c0             	mov    %rax,%r8
  4055c0:	ba 10 00 00 00       	mov    $0x10,%edx
  4055c5:	be 01 00 00 00       	mov    $0x1,%esi
  4055ca:	48 89 df             	mov    %rbx,%rdi
  4055cd:	e8 7d 7b 00 00       	callq  40d14f <_d_arraycast>
    }
  4055d2:	48 89 d8             	mov    %rbx,%rax
  4055d5:	48 83 c4 28          	add    $0x28,%rsp
  4055d9:	5b                   	pop    %rbx
  4055da:	c9                   	leaveq 
  4055db:	c3                   	retq   

00000000004055dc <_D3std8typeinfo8ti_short10TypeInfo_s8toStringMFZAa>:

module std.typeinfo.ti_short;

class TypeInfo_s : TypeInfo
{
    char[] toString() { return "short"; }
  4055dc:	55                   	push   %rbp
  4055dd:	48 89 e5             	mov    %rsp,%rbp
  4055e0:	53                   	push   %rbx
  4055e1:	48 83 ec 08          	sub    $0x8,%rsp
  4055e5:	48 89 fb             	mov    %rdi,%rbx
  4055e8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4055ec:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4055f0:	e8 b7 38 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  4055f5:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  4055fc:	48 c7 43 08 e0 0c 41 	movq   $0x410ce0,0x8(%rbx)
  405603:	00 
  405604:	48 89 d8             	mov    %rbx,%rax
  405607:	48 83 c4 08          	add    $0x8,%rsp
  40560b:	5b                   	pop    %rbx
  40560c:	c9                   	leaveq 
  40560d:	c3                   	retq   

000000000040560e <_D3std8typeinfo8ti_short10TypeInfo_s7getHashMFPvZm>:

    hash_t getHash(void *p)
  40560e:	55                   	push   %rbp
  40560f:	48 89 e5             	mov    %rsp,%rbp
  405612:	48 83 ec 10          	sub    $0x10,%rsp
  405616:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40561a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40561e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405622:	e8 85 38 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(short *)p;
  405627:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40562b:	0f b7 00             	movzwl (%rax),%eax
  40562e:	48 0f bf c0          	movswq %ax,%rax
    }
  405632:	c9                   	leaveq 
  405633:	c3                   	retq   

0000000000405634 <_D3std8typeinfo8ti_short10TypeInfo_s6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405634:	55                   	push   %rbp
  405635:	48 89 e5             	mov    %rsp,%rbp
  405638:	48 83 ec 20          	sub    $0x20,%rsp
  40563c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405640:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405644:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405648:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40564c:	e8 5b 38 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(short *)p1 == *cast(short *)p2;
  405651:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405655:	0f b7 10             	movzwl (%rax),%edx
  405658:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40565c:	0f b7 00             	movzwl (%rax),%eax
  40565f:	66 39 c2             	cmp    %ax,%dx
  405662:	0f 94 c0             	sete   %al
  405665:	0f b6 c0             	movzbl %al,%eax
    }
  405668:	c9                   	leaveq 
  405669:	c3                   	retq   

000000000040566a <_D3std8typeinfo8ti_short10TypeInfo_s7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  40566a:	55                   	push   %rbp
  40566b:	48 89 e5             	mov    %rsp,%rbp
  40566e:	48 83 ec 20          	sub    $0x20,%rsp
  405672:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405676:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40567a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40567e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405682:	e8 25 38 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(short *)p1 - *cast(short *)p2;
  405687:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40568b:	0f b7 00             	movzwl (%rax),%eax
  40568e:	0f bf d0             	movswl %ax,%edx
  405691:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405695:	0f b7 00             	movzwl (%rax),%eax
  405698:	98                   	cwtl   
  405699:	89 d1                	mov    %edx,%ecx
  40569b:	29 c1                	sub    %eax,%ecx
  40569d:	89 c8                	mov    %ecx,%eax
    }
  40569f:	c9                   	leaveq 
  4056a0:	c3                   	retq   

00000000004056a1 <_D3std8typeinfo8ti_short10TypeInfo_s5tsizeMFZm>:

    size_t tsize()
  4056a1:	55                   	push   %rbp
  4056a2:	48 89 e5             	mov    %rsp,%rbp
  4056a5:	48 83 ec 10          	sub    $0x10,%rsp
  4056a9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4056ad:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4056b1:	e8 f6 37 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return short.sizeof;
  4056b6:	b8 02 00 00 00       	mov    $0x2,%eax
    }
  4056bb:	c9                   	leaveq 
  4056bc:	c3                   	retq   

00000000004056bd <_D3std8typeinfo8ti_short10TypeInfo_s4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  4056bd:	55                   	push   %rbp
  4056be:	48 89 e5             	mov    %rsp,%rbp
  4056c1:	48 83 ec 30          	sub    $0x30,%rsp
  4056c5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4056c9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4056cd:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4056d1:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4056d5:	e8 d2 37 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	short t;
  4056da:	66 c7 45 fe 00 00    	movw   $0x0,-0x2(%rbp)

	t = *cast(short *)p1;
  4056e0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4056e4:	0f b7 00             	movzwl (%rax),%eax
  4056e7:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	*cast(short *)p1 = *cast(short *)p2;
  4056eb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4056ef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4056f3:	0f b7 00             	movzwl (%rax),%eax
  4056f6:	66 89 02             	mov    %ax,(%rdx)
	*cast(short *)p2 = t;
  4056f9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4056fd:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  405701:	66 89 02             	mov    %ax,(%rdx)
    }
  405704:	c9                   	leaveq 
  405705:	c3                   	retq   
  405706:	90                   	nop    
  405707:	90                   	nop    

0000000000405708 <_D3std8typeinfo8ti_ubyte10TypeInfo_h8toStringMFZAa>:

module std.typeinfo.ti_ubyte;

class TypeInfo_h : TypeInfo
{
    char[] toString() { return "ubyte"; }
  405708:	55                   	push   %rbp
  405709:	48 89 e5             	mov    %rsp,%rbp
  40570c:	53                   	push   %rbx
  40570d:	48 83 ec 08          	sub    $0x8,%rsp
  405711:	48 89 fb             	mov    %rdi,%rbx
  405714:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405718:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40571c:	e8 8b 37 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  405721:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  405728:	48 c7 43 08 a0 0d 41 	movq   $0x410da0,0x8(%rbx)
  40572f:	00 
  405730:	48 89 d8             	mov    %rbx,%rax
  405733:	48 83 c4 08          	add    $0x8,%rsp
  405737:	5b                   	pop    %rbx
  405738:	c9                   	leaveq 
  405739:	c3                   	retq   

000000000040573a <_D3std8typeinfo8ti_ubyte10TypeInfo_h7getHashMFPvZm>:

    hash_t getHash(void *p)
  40573a:	55                   	push   %rbp
  40573b:	48 89 e5             	mov    %rsp,%rbp
  40573e:	48 83 ec 10          	sub    $0x10,%rsp
  405742:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405746:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40574a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40574e:	e8 59 37 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ubyte *)p;
  405753:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405757:	0f b6 00             	movzbl (%rax),%eax
  40575a:	0f b6 c0             	movzbl %al,%eax
    }
  40575d:	c9                   	leaveq 
  40575e:	c3                   	retq   

000000000040575f <_D3std8typeinfo8ti_ubyte10TypeInfo_h6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  40575f:	55                   	push   %rbp
  405760:	48 89 e5             	mov    %rsp,%rbp
  405763:	48 83 ec 20          	sub    $0x20,%rsp
  405767:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40576b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40576f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405773:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405777:	e8 30 37 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ubyte *)p1 == *cast(ubyte *)p2;
  40577c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405780:	0f b6 10             	movzbl (%rax),%edx
  405783:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405787:	0f b6 00             	movzbl (%rax),%eax
  40578a:	38 c2                	cmp    %al,%dl
  40578c:	0f 94 c0             	sete   %al
  40578f:	0f b6 c0             	movzbl %al,%eax
    }
  405792:	c9                   	leaveq 
  405793:	c3                   	retq   

0000000000405794 <_D3std8typeinfo8ti_ubyte10TypeInfo_h7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  405794:	55                   	push   %rbp
  405795:	48 89 e5             	mov    %rsp,%rbp
  405798:	48 83 ec 20          	sub    $0x20,%rsp
  40579c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4057a0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4057a4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4057a8:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4057ac:	e8 fb 36 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ubyte *)p1 - *cast(ubyte *)p2;
  4057b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4057b5:	0f b6 00             	movzbl (%rax),%eax
  4057b8:	0f b6 d0             	movzbl %al,%edx
  4057bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4057bf:	0f b6 00             	movzbl (%rax),%eax
  4057c2:	0f b6 c0             	movzbl %al,%eax
  4057c5:	89 d1                	mov    %edx,%ecx
  4057c7:	29 c1                	sub    %eax,%ecx
  4057c9:	89 c8                	mov    %ecx,%eax
    }
  4057cb:	c9                   	leaveq 
  4057cc:	c3                   	retq   

00000000004057cd <_D3std8typeinfo8ti_ubyte10TypeInfo_h5tsizeMFZm>:

    size_t tsize()
  4057cd:	55                   	push   %rbp
  4057ce:	48 89 e5             	mov    %rsp,%rbp
  4057d1:	48 83 ec 10          	sub    $0x10,%rsp
  4057d5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4057d9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4057dd:	e8 ca 36 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return ubyte.sizeof;
  4057e2:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  4057e7:	c9                   	leaveq 
  4057e8:	c3                   	retq   

00000000004057e9 <_D3std8typeinfo8ti_ubyte10TypeInfo_h4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  4057e9:	55                   	push   %rbp
  4057ea:	48 89 e5             	mov    %rsp,%rbp
  4057ed:	48 83 ec 30          	sub    $0x30,%rsp
  4057f1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4057f5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4057f9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4057fd:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405801:	e8 a6 36 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ubyte t;
  405806:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)

	t = *cast(ubyte *)p1;
  40580a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40580e:	0f b6 00             	movzbl (%rax),%eax
  405811:	88 45 ff             	mov    %al,-0x1(%rbp)
	*cast(ubyte *)p1 = *cast(ubyte *)p2;
  405814:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405818:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40581c:	0f b6 00             	movzbl (%rax),%eax
  40581f:	88 02                	mov    %al,(%rdx)
	*cast(ubyte *)p2 = t;
  405821:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405825:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  405829:	88 02                	mov    %al,(%rdx)
    }
  40582b:	c9                   	leaveq 
  40582c:	c3                   	retq   

000000000040582d <_D3std8typeinfo8ti_ubyte10TypeInfo_b8toStringMFZAa>:
}

class TypeInfo_b : TypeInfo_h
{
    char[] toString() { return "bool"; }
  40582d:	55                   	push   %rbp
  40582e:	48 89 e5             	mov    %rsp,%rbp
  405831:	53                   	push   %rbx
  405832:	48 83 ec 08          	sub    $0x8,%rsp
  405836:	48 89 fb             	mov    %rdi,%rbx
  405839:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40583d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405841:	e8 66 36 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  405846:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  40584d:	48 c7 43 08 50 0e 41 	movq   $0x410e50,0x8(%rbx)
  405854:	00 
  405855:	48 89 d8             	mov    %rbx,%rax
  405858:	48 83 c4 08          	add    $0x8,%rsp
  40585c:	5b                   	pop    %rbx
  40585d:	c9                   	leaveq 
  40585e:	c3                   	retq   
  40585f:	90                   	nop    

0000000000405860 <_D3std8typeinfo7ti_uint10TypeInfo_k8toStringMFZAa>:

module std.typeinfo.ti_uint;

class TypeInfo_k : TypeInfo
{
    char[] toString() { return "uint"; }
  405860:	55                   	push   %rbp
  405861:	48 89 e5             	mov    %rsp,%rbp
  405864:	53                   	push   %rbx
  405865:	48 83 ec 08          	sub    $0x8,%rsp
  405869:	48 89 fb             	mov    %rdi,%rbx
  40586c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405870:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405874:	e8 33 36 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  405879:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  405880:	48 c7 43 08 00 0f 41 	movq   $0x410f00,0x8(%rbx)
  405887:	00 
  405888:	48 89 d8             	mov    %rbx,%rax
  40588b:	48 83 c4 08          	add    $0x8,%rsp
  40588f:	5b                   	pop    %rbx
  405890:	c9                   	leaveq 
  405891:	c3                   	retq   

0000000000405892 <_D3std8typeinfo7ti_uint10TypeInfo_k7getHashMFPvZm>:

    hash_t getHash(void *p)
  405892:	55                   	push   %rbp
  405893:	48 89 e5             	mov    %rsp,%rbp
  405896:	48 83 ec 10          	sub    $0x10,%rsp
  40589a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40589e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4058a2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4058a6:	e8 01 36 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p;
  4058ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4058af:	8b 00                	mov    (%rax),%eax
  4058b1:	89 c0                	mov    %eax,%eax
    }
  4058b3:	c9                   	leaveq 
  4058b4:	c3                   	retq   

00000000004058b5 <_D3std8typeinfo7ti_uint10TypeInfo_k6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4058b5:	55                   	push   %rbp
  4058b6:	48 89 e5             	mov    %rsp,%rbp
  4058b9:	48 83 ec 20          	sub    $0x20,%rsp
  4058bd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4058c1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4058c5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4058c9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4058cd:	e8 da 35 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p1 == *cast(uint *)p2;
  4058d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4058d6:	8b 10                	mov    (%rax),%edx
  4058d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4058dc:	8b 00                	mov    (%rax),%eax
  4058de:	39 c2                	cmp    %eax,%edx
  4058e0:	0f 94 c0             	sete   %al
  4058e3:	0f b6 c0             	movzbl %al,%eax
    }
  4058e6:	c9                   	leaveq 
  4058e7:	c3                   	retq   

00000000004058e8 <_D3std8typeinfo7ti_uint10TypeInfo_k7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4058e8:	55                   	push   %rbp
  4058e9:	48 89 e5             	mov    %rsp,%rbp
  4058ec:	48 83 ec 20          	sub    $0x20,%rsp
  4058f0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4058f4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4058f8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4058fc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405900:	e8 a7 35 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	if (*cast(uint*) p1 < *cast(uint*) p2)
  405905:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405909:	8b 10                	mov    (%rax),%edx
  40590b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40590f:	8b 00                	mov    (%rax),%eax
  405911:	39 c2                	cmp    %eax,%edx
  405913:	73 09                	jae    40591e <_D3std8typeinfo7ti_uint10TypeInfo_k7compareMFPvPvZi+0x36>
	    return -1;
  405915:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  40591c:	eb 20                	jmp    40593e <_D3std8typeinfo7ti_uint10TypeInfo_k7compareMFPvPvZi+0x56>
	else if (*cast(uint*) p1 > *cast(uint*) p2)
  40591e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405922:	8b 10                	mov    (%rax),%edx
  405924:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405928:	8b 00                	mov    (%rax),%eax
  40592a:	39 c2                	cmp    %eax,%edx
  40592c:	76 09                	jbe    405937 <_D3std8typeinfo7ti_uint10TypeInfo_k7compareMFPvPvZi+0x4f>
	    return 1;
  40592e:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  405935:	eb 07                	jmp    40593e <_D3std8typeinfo7ti_uint10TypeInfo_k7compareMFPvPvZi+0x56>
	return 0;
  405937:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40593e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    }
  405941:	c9                   	leaveq 
  405942:	c3                   	retq   

0000000000405943 <_D3std8typeinfo7ti_uint10TypeInfo_k5tsizeMFZm>:

    size_t tsize()
  405943:	55                   	push   %rbp
  405944:	48 89 e5             	mov    %rsp,%rbp
  405947:	48 83 ec 10          	sub    $0x10,%rsp
  40594b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40594f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405953:	e8 54 35 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return uint.sizeof;
  405958:	b8 04 00 00 00       	mov    $0x4,%eax
    }
  40595d:	c9                   	leaveq 
  40595e:	c3                   	retq   

000000000040595f <_D3std8typeinfo7ti_uint10TypeInfo_k4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  40595f:	55                   	push   %rbp
  405960:	48 89 e5             	mov    %rsp,%rbp
  405963:	48 83 ec 30          	sub    $0x30,%rsp
  405967:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40596b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40596f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405973:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405977:	e8 30 35 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	int t;
  40597c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	t = *cast(uint *)p1;
  405983:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405987:	8b 00                	mov    (%rax),%eax
  405989:	89 45 fc             	mov    %eax,-0x4(%rbp)
	*cast(uint *)p1 = *cast(uint *)p2;
  40598c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405990:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405994:	8b 00                	mov    (%rax),%eax
  405996:	89 02                	mov    %eax,(%rdx)
	*cast(uint *)p2 = t;
  405998:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40599c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40599f:	89 02                	mov    %eax,(%rdx)
    }
  4059a1:	c9                   	leaveq 
  4059a2:	c3                   	retq   
  4059a3:	90                   	nop    

00000000004059a4 <_D3std8typeinfo8ti_ulong10TypeInfo_m8toStringMFZAa>:

module std.typeinfo.ti_ulong;

class TypeInfo_m : TypeInfo
{
    char[] toString() { return "ulong"; }
  4059a4:	55                   	push   %rbp
  4059a5:	48 89 e5             	mov    %rsp,%rbp
  4059a8:	53                   	push   %rbx
  4059a9:	48 83 ec 08          	sub    $0x8,%rsp
  4059ad:	48 89 fb             	mov    %rdi,%rbx
  4059b0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4059b4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4059b8:	e8 ef 34 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  4059bd:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  4059c4:	48 c7 43 08 c0 0f 41 	movq   $0x410fc0,0x8(%rbx)
  4059cb:	00 
  4059cc:	48 89 d8             	mov    %rbx,%rax
  4059cf:	48 83 c4 08          	add    $0x8,%rsp
  4059d3:	5b                   	pop    %rbx
  4059d4:	c9                   	leaveq 
  4059d5:	c3                   	retq   

00000000004059d6 <_D3std8typeinfo8ti_ulong10TypeInfo_m7getHashMFPvZm>:

    hash_t getHash(void *p)
  4059d6:	55                   	push   %rbp
  4059d7:	48 89 e5             	mov    %rsp,%rbp
  4059da:	48 83 ec 10          	sub    $0x10,%rsp
  4059de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4059e2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4059e6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4059ea:	e8 bd 34 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p + (cast(uint *)p)[1];
  4059ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4059f3:	8b 08                	mov    (%rax),%ecx
  4059f5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4059f9:	b8 04 00 00 00       	mov    $0x4,%eax
  4059fe:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  405a02:	8b 00                	mov    (%rax),%eax
  405a04:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  405a07:	89 c0                	mov    %eax,%eax
    }
  405a09:	c9                   	leaveq 
  405a0a:	c3                   	retq   

0000000000405a0b <_D3std8typeinfo8ti_ulong10TypeInfo_m6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405a0b:	55                   	push   %rbp
  405a0c:	48 89 e5             	mov    %rsp,%rbp
  405a0f:	48 83 ec 20          	sub    $0x20,%rsp
  405a13:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405a17:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405a1b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405a1f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405a23:	e8 84 34 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ulong *)p1 == *cast(ulong *)p2;
  405a28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405a2c:	48 8b 10             	mov    (%rax),%rdx
  405a2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405a33:	48 8b 00             	mov    (%rax),%rax
  405a36:	48 39 c2             	cmp    %rax,%rdx
  405a39:	0f 94 c0             	sete   %al
  405a3c:	0f b6 c0             	movzbl %al,%eax
    }
  405a3f:	c9                   	leaveq 
  405a40:	c3                   	retq   

0000000000405a41 <_D3std8typeinfo8ti_ulong10TypeInfo_m7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  405a41:	55                   	push   %rbp
  405a42:	48 89 e5             	mov    %rsp,%rbp
  405a45:	48 83 ec 20          	sub    $0x20,%rsp
  405a49:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405a4d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405a51:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405a55:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405a59:	e8 4e 34 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	if (*cast(ulong *)p1 < *cast(ulong *)p2)
  405a5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405a62:	48 8b 10             	mov    (%rax),%rdx
  405a65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405a69:	48 8b 00             	mov    (%rax),%rax
  405a6c:	48 39 c2             	cmp    %rax,%rdx
  405a6f:	73 09                	jae    405a7a <_D3std8typeinfo8ti_ulong10TypeInfo_m7compareMFPvPvZi+0x39>
	    return -1;
  405a71:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  405a78:	eb 23                	jmp    405a9d <_D3std8typeinfo8ti_ulong10TypeInfo_m7compareMFPvPvZi+0x5c>
	else if (*cast(ulong *)p1 > *cast(ulong *)p2)
  405a7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405a7e:	48 8b 10             	mov    (%rax),%rdx
  405a81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405a85:	48 8b 00             	mov    (%rax),%rax
  405a88:	48 39 c2             	cmp    %rax,%rdx
  405a8b:	76 09                	jbe    405a96 <_D3std8typeinfo8ti_ulong10TypeInfo_m7compareMFPvPvZi+0x55>
	    return 1;
  405a8d:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  405a94:	eb 07                	jmp    405a9d <_D3std8typeinfo8ti_ulong10TypeInfo_m7compareMFPvPvZi+0x5c>
	return 0;
  405a96:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  405a9d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    }
  405aa0:	c9                   	leaveq 
  405aa1:	c3                   	retq   

0000000000405aa2 <_D3std8typeinfo8ti_ulong10TypeInfo_m5tsizeMFZm>:

    size_t tsize()
  405aa2:	55                   	push   %rbp
  405aa3:	48 89 e5             	mov    %rsp,%rbp
  405aa6:	48 83 ec 10          	sub    $0x10,%rsp
  405aaa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405aae:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405ab2:	e8 f5 33 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return ulong.sizeof;
  405ab7:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  405abc:	c9                   	leaveq 
  405abd:	c3                   	retq   

0000000000405abe <_D3std8typeinfo8ti_ulong10TypeInfo_m4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  405abe:	55                   	push   %rbp
  405abf:	48 89 e5             	mov    %rsp,%rbp
  405ac2:	48 83 ec 30          	sub    $0x30,%rsp
  405ac6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405aca:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405ace:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405ad2:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405ad6:	e8 d1 33 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ulong t;
  405adb:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  405ae2:	00 

	t = *cast(ulong *)p1;
  405ae3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405ae7:	48 8b 00             	mov    (%rax),%rax
  405aea:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(ulong *)p1 = *cast(ulong *)p2;
  405aee:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405af2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405af6:	48 8b 00             	mov    (%rax),%rax
  405af9:	48 89 02             	mov    %rax,(%rdx)
	*cast(ulong *)p2 = t;
  405afc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405b00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405b04:	48 89 02             	mov    %rax,(%rdx)
    }
  405b07:	c9                   	leaveq 
  405b08:	c3                   	retq   
  405b09:	90                   	nop    
  405b0a:	90                   	nop    
  405b0b:	90                   	nop    

0000000000405b0c <_D3std8typeinfo9ti_ushort10TypeInfo_t8toStringMFZAa>:

module std.typeinfo.ti_ushort;

class TypeInfo_t : TypeInfo
{
    char[] toString() { return "ushort"; }
  405b0c:	55                   	push   %rbp
  405b0d:	48 89 e5             	mov    %rsp,%rbp
  405b10:	53                   	push   %rbx
  405b11:	48 83 ec 08          	sub    $0x8,%rsp
  405b15:	48 89 fb             	mov    %rdi,%rbx
  405b18:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405b1c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405b20:	e8 87 33 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  405b25:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  405b2c:	48 c7 43 08 80 10 41 	movq   $0x411080,0x8(%rbx)
  405b33:	00 
  405b34:	48 89 d8             	mov    %rbx,%rax
  405b37:	48 83 c4 08          	add    $0x8,%rsp
  405b3b:	5b                   	pop    %rbx
  405b3c:	c9                   	leaveq 
  405b3d:	c3                   	retq   

0000000000405b3e <_D3std8typeinfo9ti_ushort10TypeInfo_t7getHashMFPvZm>:

    hash_t getHash(void *p)
  405b3e:	55                   	push   %rbp
  405b3f:	48 89 e5             	mov    %rsp,%rbp
  405b42:	48 83 ec 10          	sub    $0x10,%rsp
  405b46:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405b4a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405b4e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405b52:	e8 55 33 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ushort *)p;
  405b57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405b5b:	0f b7 00             	movzwl (%rax),%eax
  405b5e:	0f b7 c0             	movzwl %ax,%eax
    }
  405b61:	c9                   	leaveq 
  405b62:	c3                   	retq   

0000000000405b63 <_D3std8typeinfo9ti_ushort10TypeInfo_t6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405b63:	55                   	push   %rbp
  405b64:	48 89 e5             	mov    %rsp,%rbp
  405b67:	48 83 ec 20          	sub    $0x20,%rsp
  405b6b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405b6f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405b73:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405b77:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405b7b:	e8 2c 33 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ushort *)p1 == *cast(ushort *)p2;
  405b80:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405b84:	0f b7 10             	movzwl (%rax),%edx
  405b87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405b8b:	0f b7 00             	movzwl (%rax),%eax
  405b8e:	66 39 c2             	cmp    %ax,%dx
  405b91:	0f 94 c0             	sete   %al
  405b94:	0f b6 c0             	movzbl %al,%eax
    }
  405b97:	c9                   	leaveq 
  405b98:	c3                   	retq   

0000000000405b99 <_D3std8typeinfo9ti_ushort10TypeInfo_t7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  405b99:	55                   	push   %rbp
  405b9a:	48 89 e5             	mov    %rsp,%rbp
  405b9d:	48 83 ec 20          	sub    $0x20,%rsp
  405ba1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405ba5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405ba9:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405bad:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405bb1:	e8 f6 32 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ushort *)p1 - *cast(ushort *)p2;
  405bb6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405bba:	0f b7 00             	movzwl (%rax),%eax
  405bbd:	0f b7 d0             	movzwl %ax,%edx
  405bc0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405bc4:	0f b7 00             	movzwl (%rax),%eax
  405bc7:	0f b7 c0             	movzwl %ax,%eax
  405bca:	89 d1                	mov    %edx,%ecx
  405bcc:	29 c1                	sub    %eax,%ecx
  405bce:	89 c8                	mov    %ecx,%eax
    }
  405bd0:	c9                   	leaveq 
  405bd1:	c3                   	retq   

0000000000405bd2 <_D3std8typeinfo9ti_ushort10TypeInfo_t5tsizeMFZm>:

    size_t tsize()
  405bd2:	55                   	push   %rbp
  405bd3:	48 89 e5             	mov    %rsp,%rbp
  405bd6:	48 83 ec 10          	sub    $0x10,%rsp
  405bda:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405bde:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405be2:	e8 c5 32 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return ushort.sizeof;
  405be7:	b8 02 00 00 00       	mov    $0x2,%eax
    }
  405bec:	c9                   	leaveq 
  405bed:	c3                   	retq   

0000000000405bee <_D3std8typeinfo9ti_ushort10TypeInfo_t4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  405bee:	55                   	push   %rbp
  405bef:	48 89 e5             	mov    %rsp,%rbp
  405bf2:	48 83 ec 30          	sub    $0x30,%rsp
  405bf6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405bfa:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405bfe:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405c02:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405c06:	e8 a1 32 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ushort t;
  405c0b:	66 c7 45 fe 00 00    	movw   $0x0,-0x2(%rbp)

	t = *cast(ushort *)p1;
  405c11:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405c15:	0f b7 00             	movzwl (%rax),%eax
  405c18:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	*cast(ushort *)p1 = *cast(ushort *)p2;
  405c1c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405c20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405c24:	0f b7 00             	movzwl (%rax),%eax
  405c27:	66 89 02             	mov    %ax,(%rdx)
	*cast(ushort *)p2 = t;
  405c2a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405c2e:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  405c32:	66 89 02             	mov    %ax,(%rdx)
    }
  405c35:	c9                   	leaveq 
  405c36:	c3                   	retq   
  405c37:	90                   	nop    

0000000000405c38 <_D3std8typeinfo7ti_void10TypeInfo_v8toStringMFZAa>:

module std.typeinfo.ti_void;

class TypeInfo_v : TypeInfo
{
    char[] toString() { return "void"; }
  405c38:	55                   	push   %rbp
  405c39:	48 89 e5             	mov    %rsp,%rbp
  405c3c:	53                   	push   %rbx
  405c3d:	48 83 ec 08          	sub    $0x8,%rsp
  405c41:	48 89 fb             	mov    %rdi,%rbx
  405c44:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405c48:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405c4c:	e8 5b 32 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  405c51:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  405c58:	48 c7 43 08 40 11 41 	movq   $0x411140,0x8(%rbx)
  405c5f:	00 
  405c60:	48 89 d8             	mov    %rbx,%rax
  405c63:	48 83 c4 08          	add    $0x8,%rsp
  405c67:	5b                   	pop    %rbx
  405c68:	c9                   	leaveq 
  405c69:	c3                   	retq   

0000000000405c6a <_D3std8typeinfo7ti_void10TypeInfo_v7getHashMFPvZm>:

    hash_t getHash(void *p)
  405c6a:	55                   	push   %rbp
  405c6b:	48 89 e5             	mov    %rsp,%rbp
  405c6e:	48 83 ec 20          	sub    $0x20,%rsp
  405c72:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405c76:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405c7a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405c7e:	e8 29 32 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	assert(0);
  405c83:	48 c7 45 f0 16 00 00 	movq   $0x16,-0x10(%rbp)
  405c8a:	00 
  405c8b:	48 c7 45 f8 45 11 41 	movq   $0x411145,-0x8(%rbp)
  405c92:	00 
  405c93:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405c97:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  405c9b:	ba 0c 00 00 00       	mov    $0xc,%edx
  405ca0:	e8 5d 4c 00 00       	callq  40a902 <_d_assert>
    }
  405ca5:	c9                   	leaveq 
  405ca6:	c3                   	retq   

0000000000405ca7 <_D3std8typeinfo7ti_void10TypeInfo_v6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405ca7:	55                   	push   %rbp
  405ca8:	48 89 e5             	mov    %rsp,%rbp
  405cab:	48 83 ec 20          	sub    $0x20,%rsp
  405caf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405cb3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405cb7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405cbb:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405cbf:	e8 e8 31 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(byte *)p1 == *cast(byte *)p2;
  405cc4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405cc8:	0f b6 10             	movzbl (%rax),%edx
  405ccb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405ccf:	0f b6 00             	movzbl (%rax),%eax
  405cd2:	38 c2                	cmp    %al,%dl
  405cd4:	0f 94 c0             	sete   %al
  405cd7:	0f b6 c0             	movzbl %al,%eax
    }
  405cda:	c9                   	leaveq 
  405cdb:	c3                   	retq   

0000000000405cdc <_D3std8typeinfo7ti_void10TypeInfo_v7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  405cdc:	55                   	push   %rbp
  405cdd:	48 89 e5             	mov    %rsp,%rbp
  405ce0:	48 83 ec 20          	sub    $0x20,%rsp
  405ce4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405ce8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405cec:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405cf0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405cf4:	e8 b3 31 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(byte *)p1 - *cast(byte *)p2;
  405cf9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405cfd:	0f b6 00             	movzbl (%rax),%eax
  405d00:	0f be d0             	movsbl %al,%edx
  405d03:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405d07:	0f b6 00             	movzbl (%rax),%eax
  405d0a:	0f be c0             	movsbl %al,%eax
  405d0d:	89 d1                	mov    %edx,%ecx
  405d0f:	29 c1                	sub    %eax,%ecx
  405d11:	89 c8                	mov    %ecx,%eax
    }
  405d13:	c9                   	leaveq 
  405d14:	c3                   	retq   

0000000000405d15 <_D3std8typeinfo7ti_void10TypeInfo_v5tsizeMFZm>:

    size_t tsize()
  405d15:	55                   	push   %rbp
  405d16:	48 89 e5             	mov    %rsp,%rbp
  405d19:	48 83 ec 10          	sub    $0x10,%rsp
  405d1d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405d21:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405d25:	e8 82 31 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return void.sizeof;
  405d2a:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  405d2f:	c9                   	leaveq 
  405d30:	c3                   	retq   

0000000000405d31 <_D3std8typeinfo7ti_void10TypeInfo_v4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  405d31:	55                   	push   %rbp
  405d32:	48 89 e5             	mov    %rsp,%rbp
  405d35:	48 83 ec 30          	sub    $0x30,%rsp
  405d39:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405d3d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405d41:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405d45:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405d49:	e8 5e 31 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	byte t;
  405d4e:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)

	t = *cast(byte *)p1;
  405d52:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405d56:	0f b6 00             	movzbl (%rax),%eax
  405d59:	88 45 ff             	mov    %al,-0x1(%rbp)
	*cast(byte *)p1 = *cast(byte *)p2;
  405d5c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405d60:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405d64:	0f b6 00             	movzbl (%rax),%eax
  405d67:	88 02                	mov    %al,(%rdx)
	*cast(byte *)p2 = t;
  405d69:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405d6d:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  405d71:	88 02                	mov    %al,(%rdx)
    }
  405d73:	c9                   	leaveq 
  405d74:	c3                   	retq   

0000000000405d75 <_D3std8typeinfo7ti_void10TypeInfo_v5flagsMFZk>:

    uint flags()
  405d75:	55                   	push   %rbp
  405d76:	48 89 e5             	mov    %rsp,%rbp
  405d79:	48 83 ec 10          	sub    $0x10,%rsp
  405d7d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405d81:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405d85:	e8 22 31 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  405d8a:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  405d8f:	c9                   	leaveq 
  405d90:	c3                   	retq   
  405d91:	90                   	nop    
  405d92:	90                   	nop    
  405d93:	90                   	nop    

0000000000405d94 <_D3std8typeinfo8ti_wchar10TypeInfo_u8toStringMFZAa>:
module std.typeinfo.ti_wchar;


class TypeInfo_u : TypeInfo
{
    char[] toString() { return "wchar"; }
  405d94:	55                   	push   %rbp
  405d95:	48 89 e5             	mov    %rsp,%rbp
  405d98:	53                   	push   %rbx
  405d99:	48 83 ec 08          	sub    $0x8,%rsp
  405d9d:	48 89 fb             	mov    %rdi,%rbx
  405da0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405da4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405da8:	e8 ff 30 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  405dad:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  405db4:	48 c7 43 08 00 12 41 	movq   $0x411200,0x8(%rbx)
  405dbb:	00 
  405dbc:	48 89 d8             	mov    %rbx,%rax
  405dbf:	48 83 c4 08          	add    $0x8,%rsp
  405dc3:	5b                   	pop    %rbx
  405dc4:	c9                   	leaveq 
  405dc5:	c3                   	retq   

0000000000405dc6 <_D3std8typeinfo8ti_wchar10TypeInfo_u7getHashMFPvZm>:

    hash_t getHash(void *p)
  405dc6:	55                   	push   %rbp
  405dc7:	48 89 e5             	mov    %rsp,%rbp
  405dca:	48 83 ec 10          	sub    $0x10,%rsp
  405dce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405dd2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405dd6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405dda:	e8 cd 30 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(wchar *)p;
  405ddf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405de3:	0f b7 00             	movzwl (%rax),%eax
  405de6:	0f b7 c0             	movzwl %ax,%eax
    }
  405de9:	c9                   	leaveq 
  405dea:	c3                   	retq   

0000000000405deb <_D3std8typeinfo8ti_wchar10TypeInfo_u6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405deb:	55                   	push   %rbp
  405dec:	48 89 e5             	mov    %rsp,%rbp
  405def:	48 83 ec 20          	sub    $0x20,%rsp
  405df3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405df7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405dfb:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405dff:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405e03:	e8 a4 30 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(wchar *)p1 == *cast(wchar *)p2;
  405e08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405e0c:	0f b7 10             	movzwl (%rax),%edx
  405e0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405e13:	0f b7 00             	movzwl (%rax),%eax
  405e16:	66 39 c2             	cmp    %ax,%dx
  405e19:	0f 94 c0             	sete   %al
  405e1c:	0f b6 c0             	movzbl %al,%eax
    }
  405e1f:	c9                   	leaveq 
  405e20:	c3                   	retq   

0000000000405e21 <_D3std8typeinfo8ti_wchar10TypeInfo_u7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  405e21:	55                   	push   %rbp
  405e22:	48 89 e5             	mov    %rsp,%rbp
  405e25:	48 83 ec 20          	sub    $0x20,%rsp
  405e29:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405e2d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405e31:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405e35:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405e39:	e8 6e 30 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(wchar *)p1 - *cast(wchar *)p2;
  405e3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405e42:	0f b7 00             	movzwl (%rax),%eax
  405e45:	0f b7 d0             	movzwl %ax,%edx
  405e48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405e4c:	0f b7 00             	movzwl (%rax),%eax
  405e4f:	0f b7 c0             	movzwl %ax,%eax
  405e52:	89 d1                	mov    %edx,%ecx
  405e54:	29 c1                	sub    %eax,%ecx
  405e56:	89 c8                	mov    %ecx,%eax
    }
  405e58:	c9                   	leaveq 
  405e59:	c3                   	retq   

0000000000405e5a <_D3std8typeinfo8ti_wchar10TypeInfo_u5tsizeMFZm>:

    size_t tsize()
  405e5a:	55                   	push   %rbp
  405e5b:	48 89 e5             	mov    %rsp,%rbp
  405e5e:	48 83 ec 10          	sub    $0x10,%rsp
  405e62:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405e66:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405e6a:	e8 3d 30 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return wchar.sizeof;
  405e6f:	b8 02 00 00 00       	mov    $0x2,%eax
    }
  405e74:	c9                   	leaveq 
  405e75:	c3                   	retq   

0000000000405e76 <_D3std8typeinfo8ti_wchar10TypeInfo_u4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  405e76:	55                   	push   %rbp
  405e77:	48 89 e5             	mov    %rsp,%rbp
  405e7a:	48 83 ec 30          	sub    $0x30,%rsp
  405e7e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405e82:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405e86:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405e8a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405e8e:	e8 19 30 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {
	wchar t;
  405e93:	66 c7 45 fe ff ff    	movw   $0xffff,-0x2(%rbp)

	t = *cast(wchar *)p1;
  405e99:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405e9d:	0f b7 00             	movzwl (%rax),%eax
  405ea0:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	*cast(wchar *)p1 = *cast(wchar *)p2;
  405ea4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405ea8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405eac:	0f b7 00             	movzwl (%rax),%eax
  405eaf:	66 89 02             	mov    %ax,(%rdx)
	*cast(wchar *)p2 = t;
  405eb2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405eb6:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  405eba:	66 89 02             	mov    %ax,(%rdx)
    }
  405ebd:	c9                   	leaveq 
  405ebe:	c3                   	retq   

0000000000405ebf <_D3std8typeinfo8ti_wchar10TypeInfo_u4initMFZAv>:

    void[] init()
  405ebf:	55                   	push   %rbp
  405ec0:	48 89 e5             	mov    %rsp,%rbp
  405ec3:	53                   	push   %rbx
  405ec4:	48 83 ec 28          	sub    $0x28,%rsp
  405ec8:	48 89 fb             	mov    %rdi,%rbx
  405ecb:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  405ecf:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  405ed3:	e8 d4 2f 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
    {	static wchar c;

	return (cast(wchar *)&c)[0 .. 1];
  405ed8:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  405edf:	00 
  405ee0:	48 c7 45 e8 00 b6 41 	movq   $0x41b600,-0x18(%rbp)
  405ee7:	00 
  405ee8:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  405eec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405ef0:	49 89 c0             	mov    %rax,%r8
  405ef3:	ba 02 00 00 00       	mov    $0x2,%edx
  405ef8:	be 01 00 00 00       	mov    $0x1,%esi
  405efd:	48 89 df             	mov    %rbx,%rdi
  405f00:	e8 4a 72 00 00       	callq  40d14f <_d_arraycast>
    }
  405f05:	48 89 d8             	mov    %rbx,%rax
  405f08:	48 83 c4 28          	add    $0x28,%rsp
  405f0c:	5b                   	pop    %rbx
  405f0d:	c9                   	leaveq 
  405f0e:	c3                   	retq   
  405f0f:	90                   	nop    

0000000000405f10 <_D6object6Object8toStringMFZAa>:
class Object
{
	/**
	 * Convert Object to a human readable string.
	 */
	char[] toString()
  405f10:	55                   	push   %rbp
  405f11:	48 89 e5             	mov    %rsp,%rbp
  405f14:	53                   	push   %rbx
  405f15:	48 83 ec 08          	sub    $0x8,%rsp
  405f19:	48 89 fb             	mov    %rdi,%rbx
  405f1c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405f20:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405f24:	e8 83 2f 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return this.classinfo.name;
  405f29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405f2d:	48 8b 00             	mov    (%rax),%rax
  405f30:	48 8b 10             	mov    (%rax),%rdx
  405f33:	48 8b 42 20          	mov    0x20(%rdx),%rax
  405f37:	48 89 03             	mov    %rax,(%rbx)
  405f3a:	48 8b 42 28          	mov    0x28(%rdx),%rax
  405f3e:	48 89 43 08          	mov    %rax,0x8(%rbx)
	}
  405f42:	48 89 d8             	mov    %rbx,%rax
  405f45:	48 83 c4 08          	add    $0x8,%rsp
  405f49:	5b                   	pop    %rbx
  405f4a:	c9                   	leaveq 
  405f4b:	c3                   	retq   

0000000000405f4c <_D6object6Object6toHashMFZm>:

	/**
	 * Compute hash function for Object.
	 */
	hash_t toHash()
  405f4c:	55                   	push   %rbp
  405f4d:	48 89 e5             	mov    %rsp,%rbp
  405f50:	48 83 ec 10          	sub    $0x10,%rsp
  405f54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405f58:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405f5c:	e8 4b 2f 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		// BUG: this prevents a compacting GC from working, needs to be fixed
		return cast(uint)cast(void *)this;
  405f61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405f65:	89 c0                	mov    %eax,%eax
	}
  405f67:	c9                   	leaveq 
  405f68:	c3                   	retq   

0000000000405f69 <_D6object6Object5opCmpMFC6ObjectZi>:
	 *	$(TR $(TD this &lt; obj) $(TD &lt; 0))
	 *	$(TR $(TD this == obj) $(TD 0))
	 *	$(TR $(TD this &gt; obj) $(TD &gt; 0))
	 *	)
	 */
	int opCmp(Object o)
  405f69:	55                   	push   %rbp
  405f6a:	48 89 e5             	mov    %rsp,%rbp
  405f6d:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  405f74:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  405f78:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  405f7c:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
  405f80:	e8 27 2f 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		// BUG: this prevents a compacting GC from working, needs to be fixed
		//return cast(int)cast(void *)this - cast(int)cast(void *)o;

		throw new Error("need opCmp for class " ~ this.classinfo.name);
  405f85:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  405f89:	48 8b 00             	mov    (%rax),%rax
  405f8c:	48 8b 10             	mov    (%rax),%rdx
  405f8f:	48 8b 42 20          	mov    0x20(%rdx),%rax
  405f93:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  405f97:	48 8b 42 28          	mov    0x28(%rdx),%rax
  405f9b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  405f9f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  405fa3:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  405fa7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405fab:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  405faf:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  405fb3:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  405fb7:	48 8b 00             	mov    (%rax),%rax
  405fba:	48 8b 10             	mov    (%rax),%rdx
  405fbd:	48 8b 42 20          	mov    0x20(%rdx),%rax
  405fc1:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  405fc5:	48 8b 42 28          	mov    0x28(%rdx),%rax
  405fc9:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  405fcd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  405fd1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  405fd5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  405fd9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  405fdd:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  405fe1:	48 c7 45 d0 15 00 00 	movq   $0x15,-0x30(%rbp)
  405fe8:	00 
  405fe9:	48 c7 45 d8 d0 12 41 	movq   $0x4112d0,-0x28(%rbp)
  405ff0:	00 
  405ff1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  405ff5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  405ff9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405ffd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  406001:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406005:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406009:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
  40600d:	48 89 34 24          	mov    %rsi,(%rsp)
  406011:	49 89 d1             	mov    %rdx,%r9
  406014:	49 89 c0             	mov    %rax,%r8
  406017:	ba 02 00 00 00       	mov    $0x2,%edx
  40601c:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  406023:	b8 00 00 00 00       	mov    $0x0,%eax
  406028:	e8 2e 42 00 00       	callq  40a25b <_d_arraycatnT>
  40602d:	48 c7 c7 c0 c0 41 00 	mov    $0x41c0c0,%rdi
  406034:	e8 2c 3d 00 00       	callq  409d65 <_d_newclass>
  406039:	48 89 c7             	mov    %rax,%rdi
  40603c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  406040:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  406044:	e8 e4 2d 00 00       	callq  408e2d <_D6object5Error5_ctorMFAaZC6object5Error>
  406049:	48 89 c7             	mov    %rax,%rdi
  40604c:	e8 cd 4b 00 00       	callq  40ac1e <_d_throw>
	}
  406051:	c9                   	leaveq 
  406052:	c3                   	retq   

0000000000406053 <_D6object6Object8opEqualsMFC6ObjectZi>:

	/**
	 * Returns !=0 if this object does have the same contents as obj.
	 */
	int opEquals(Object o)
  406053:	55                   	push   %rbp
  406054:	48 89 e5             	mov    %rsp,%rbp
  406057:	48 83 ec 10          	sub    $0x10,%rsp
  40605b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40605f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406063:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406067:	e8 40 2e 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return cast(int)(this is o);
  40606c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406070:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  406074:	0f 94 c0             	sete   %al
  406077:	0f b6 c0             	movzbl %al,%eax
	}
  40607a:	c9                   	leaveq 
  40607b:	c3                   	retq   

000000000040607c <_D6object9ClassInfo6createMFZC6Object>:
	}*/

	/********************
	 * Create instance of Object represented by 'this'.
	 */
	Object create()
  40607c:	55                   	push   %rbp
  40607d:	48 89 e5             	mov    %rsp,%rbp
  406080:	48 83 ec 20          	sub    $0x20,%rsp
  406084:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406088:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40608c:	e8 1b 2e 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		if (flags & 8 && !defaultConstructor)
  406091:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406095:	8b 40 68             	mov    0x68(%rax),%eax
  406098:	83 e0 08             	and    $0x8,%eax
  40609b:	85 c0                	test   %eax,%eax
  40609d:	74 22                	je     4060c1 <_D6object9ClassInfo6createMFZC6Object+0x45>
  40609f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4060a3:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  4060aa:	48 85 c0             	test   %rax,%rax
  4060ad:	0f 95 c0             	setne  %al
  4060b0:	83 f0 01             	xor    $0x1,%eax
  4060b3:	84 c0                	test   %al,%al
  4060b5:	74 0a                	je     4060c1 <_D6object9ClassInfo6createMFZC6Object+0x45>
			return null;
  4060b7:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  4060be:	00 
  4060bf:	eb 44                	jmp    406105 <_D6object9ClassInfo6createMFZC6Object+0x89>
		Object o = _d_newclass(this);
  4060c1:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4060c5:	e8 9b 3c 00 00       	callq  409d65 <_d_newclass>
  4060ca:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (flags & 8 && defaultConstructor)
  4060ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4060d2:	8b 40 68             	mov    0x68(%rax),%eax
  4060d5:	83 e0 08             	and    $0x8,%eax
  4060d8:	85 c0                	test   %eax,%eax
  4060da:	74 21                	je     4060fd <_D6object9ClassInfo6createMFZC6Object+0x81>
  4060dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4060e0:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  4060e7:	48 85 c0             	test   %rax,%rax
  4060ea:	74 11                	je     4060fd <_D6object9ClassInfo6createMFZC6Object+0x81>
		{
			defaultConstructor(o);
  4060ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4060f0:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  4060f7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4060fb:	ff d0                	callq  *%rax
		}
		return o;
  4060fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406101:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  406105:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
	}
  406109:	c9                   	leaveq 
  40610a:	c3                   	retq   

000000000040610b <_D6object8TypeInfo6toHashMFZm>:
 * Can be retrieved for any type using a
 * <a href="../expression.html#typeidexpression">TypeidExpression</a>.
 */
class TypeInfo
{
	hash_t toHash()
  40610b:	55                   	push   %rbp
  40610c:	48 89 e5             	mov    %rsp,%rbp
  40610f:	48 83 ec 40          	sub    $0x40,%rsp
  406113:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  406117:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  40611b:	e8 8c 2d 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{	hash_t hash;
  406120:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  406127:	00 

		foreach (char c; this.toString())
  406128:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40612c:	48 8b 00             	mov    (%rax),%rax
  40612f:	48 83 c0 08          	add    $0x8,%rax
  406133:	48 8b 00             	mov    (%rax),%rax
  406136:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40613a:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
  40613e:	ff d0                	callq  *%rax
  406140:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406144:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  406148:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40614c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  406150:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406154:	48 03 45 c0          	add    -0x40(%rbp),%rax
  406158:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40615c:	0f 95 c0             	setne  %al
  40615f:	83 f0 01             	xor    $0x1,%eax
  406162:	84 c0                	test   %al,%al
  406164:	75 2b                	jne    406191 <_D6object8TypeInfo6toHashMFZm+0x86>
  406166:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40616a:	0f b6 00             	movzbl (%rax),%eax
  40616d:	88 45 ff             	mov    %al,-0x1(%rbp)
			hash = hash * 9 + c;
  406170:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406174:	48 89 d0             	mov    %rdx,%rax
  406177:	48 c1 e0 03          	shl    $0x3,%rax
  40617b:	48 8d 14 10          	lea    (%rax,%rdx,1),%rdx
  40617f:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  406183:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  406187:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40618b:	48 ff 45 f0          	incq   -0x10(%rbp)
  40618f:	eb bf                	jmp    406150 <_D6object8TypeInfo6toHashMFZm+0x45>
		return hash;
  406191:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  406195:	c9                   	leaveq 
  406196:	c3                   	retq   

0000000000406197 <_D6object8TypeInfo5opCmpMFC6ObjectZi>:

	int opCmp(Object o)
  406197:	55                   	push   %rbp
  406198:	48 89 e5             	mov    %rsp,%rbp
  40619b:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  4061a2:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  4061a6:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  4061aa:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  4061ae:	e8 f9 2c 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		if (this is o)
  4061b3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4061b7:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
  4061bb:	75 0f                	jne    4061cc <_D6object8TypeInfo5opCmpMFC6ObjectZi+0x35>
			return 0;
  4061bd:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%rbp)
  4061c4:	00 00 00 
  4061c7:	e9 d6 00 00 00       	jmpq   4062a2 <_D6object8TypeInfo5opCmpMFC6ObjectZi+0x10b>
		TypeInfo ti = cast(TypeInfo)o;
  4061cc:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  4061d0:	48 c7 c6 00 b8 41 00 	mov    $0x41b800,%rsi
  4061d7:	e8 13 2f 00 00       	callq  4090ef <_d_dynamic_cast>
  4061dc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (ti is null)
  4061e0:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4061e5:	75 0f                	jne    4061f6 <_D6object8TypeInfo5opCmpMFC6ObjectZi+0x5f>
			return 1;
  4061e7:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%rbp)
  4061ee:	00 00 00 
  4061f1:	e9 ac 00 00 00       	jmpq   4062a2 <_D6object8TypeInfo5opCmpMFC6ObjectZi+0x10b>
			
		char[] t = this.toString();
  4061f6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4061fa:	48 8b 00             	mov    (%rax),%rax
  4061fd:	48 83 c0 08          	add    $0x8,%rax
  406201:	48 8b 00             	mov    (%rax),%rax
  406204:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  406208:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40620c:	ff d0                	callq  *%rax
  40620e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  406212:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  406216:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40621a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		char[] other = this.toString();
  40621e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  406222:	48 8b 00             	mov    (%rax),%rax
  406225:	48 83 c0 08          	add    $0x8,%rax
  406229:	48 8b 00             	mov    (%rax),%rax
  40622c:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  406230:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  406234:	ff d0                	callq  *%rax
  406236:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40623a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40623e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  406242:	48 89 45 c8          	mov    %rax,-0x38(%rbp)

		typeid(typeof(this.toString())).compare(&t, &other);
  406246:	48 8b 05 b3 96 00 00 	mov    0x96b3(%rip),%rax        # 40f900 <_D11TypeInfo_Aa6__initZ>
  40624d:	48 83 c0 38          	add    $0x38,%rax
  406251:	48 8b 00             	mov    (%rax),%rax
  406254:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  406258:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
  40625c:	48 c7 c7 00 f9 40 00 	mov    $0x40f900,%rdi
  406263:	ff d0                	callq  *%rax
  406265:	48 c7 45 d0 08 00 00 	movq   $0x8,-0x30(%rbp)
  40626c:	00 
  40626d:	48 c7 45 d8 80 14 41 	movq   $0x411480,-0x28(%rbp)
  406274:	00 
  406275:	48 c7 45 e0 19 00 00 	movq   $0x19,-0x20(%rbp)
  40627c:	00 
  40627d:	48 c7 45 e8 89 14 41 	movq   $0x411489,-0x18(%rbp)
  406284:	00 
  406285:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  406289:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  40628d:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  406291:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  406295:	41 b8 60 01 00 00    	mov    $0x160,%r8d
  40629b:	e8 8d 46 00 00       	callq  40a92d <_d_assert_msg>
	}
  4062a0:	eb 0c                	jmp    4062ae <_D6object8TypeInfo5opCmpMFC6ObjectZi+0x117>
  4062a2:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  4062a8:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  4062ae:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
  4062b4:	c9                   	leaveq 
  4062b5:	c3                   	retq   

00000000004062b6 <_D6object8TypeInfo8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  4062b6:	55                   	push   %rbp
  4062b7:	48 89 e5             	mov    %rsp,%rbp
  4062ba:	53                   	push   %rbx
  4062bb:	48 83 ec 68          	sub    $0x68,%rsp
  4062bf:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  4062c3:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  4062c7:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  4062cb:	e8 dc 2b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		/* TypeInfo instances are singletons, but duplicates can exist
		 * across DLL's. Therefore, comparing for a name match is
		 * sufficient.
		 */
		if (this is o)
  4062d0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4062d4:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  4062d8:	75 0c                	jne    4062e6 <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0x30>
			return 1;
  4062da:	c7 45 a8 01 00 00 00 	movl   $0x1,-0x58(%rbp)
  4062e1:	e9 af 00 00 00       	jmpq   406395 <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0xdf>
		TypeInfo ti = cast(TypeInfo)o;
  4062e6:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  4062ea:	48 c7 c6 00 b8 41 00 	mov    $0x41b800,%rsi
  4062f1:	e8 f9 2d 00 00       	callq  4090ef <_d_dynamic_cast>
  4062f6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		return cast(int)(ti && this.toString() == ti.toString());
  4062fa:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  4062ff:	0f 84 85 00 00 00    	je     40638a <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0xd4>
  406305:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406309:	48 8b 00             	mov    (%rax),%rax
  40630c:	48 83 c0 08          	add    $0x8,%rax
  406310:	48 8b 00             	mov    (%rax),%rax
  406313:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  406317:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
  40631b:	ff d0                	callq  *%rax
  40631d:	48 8b 5d c0          	mov    -0x40(%rbp),%rbx
  406321:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406325:	48 8b 00             	mov    (%rax),%rax
  406328:	48 83 c0 08          	add    $0x8,%rax
  40632c:	48 8b 00             	mov    (%rax),%rax
  40632f:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  406333:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
  406337:	ff d0                	callq  *%rax
  406339:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40633d:	48 39 c3             	cmp    %rax,%rbx
  406340:	75 48                	jne    40638a <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0xd4>
  406342:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  406346:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40634a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40634e:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  406352:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  406356:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  40635a:	fc                   	cld    
  40635b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40635f:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
  406363:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  406367:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40636b:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  40636f:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  406371:	0f 97 c2             	seta   %dl
  406374:	0f 92 c0             	setb   %al
  406377:	89 d1                	mov    %edx,%ecx
  406379:	28 c1                	sub    %al,%cl
  40637b:	89 c8                	mov    %ecx,%eax
  40637d:	0f be c0             	movsbl %al,%eax
  406380:	85 c0                	test   %eax,%eax
  406382:	75 06                	jne    40638a <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0xd4>
  406384:	c6 45 af 01          	movb   $0x1,-0x51(%rbp)
  406388:	eb 04                	jmp    40638e <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0xd8>
  40638a:	c6 45 af 00          	movb   $0x0,-0x51(%rbp)
  40638e:	0f b6 75 af          	movzbl -0x51(%rbp),%esi
  406392:	89 75 a8             	mov    %esi,-0x58(%rbp)
  406395:	8b 45 a8             	mov    -0x58(%rbp),%eax
	}
  406398:	48 83 c4 68          	add    $0x68,%rsp
  40639c:	5b                   	pop    %rbx
  40639d:	c9                   	leaveq 
  40639e:	c3                   	retq   

000000000040639f <_D6object8TypeInfo7getHashMFPvZm>:

	/// Returns a hash of the instance of a type.
	hash_t getHash(void *p) { return cast(uint)p; }
  40639f:	55                   	push   %rbp
  4063a0:	48 89 e5             	mov    %rsp,%rbp
  4063a3:	48 83 ec 10          	sub    $0x10,%rsp
  4063a7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4063ab:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4063af:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4063b3:	e8 f4 2a 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  4063b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4063bc:	89 c0                	mov    %eax,%eax
  4063be:	c9                   	leaveq 
  4063bf:	c3                   	retq   

00000000004063c0 <_D6object8TypeInfo6equalsMFPvPvZi>:

	/// Compares two instances for equality.
	int equals(void *p1, void *p2) { return cast(int)(p1 == p2); }
  4063c0:	55                   	push   %rbp
  4063c1:	48 89 e5             	mov    %rsp,%rbp
  4063c4:	48 83 ec 20          	sub    $0x20,%rsp
  4063c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4063cc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4063d0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4063d4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4063d8:	e8 cf 2a 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  4063dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4063e1:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4063e5:	0f 94 c0             	sete   %al
  4063e8:	0f b6 c0             	movzbl %al,%eax
  4063eb:	c9                   	leaveq 
  4063ec:	c3                   	retq   

00000000004063ed <_D6object8TypeInfo7compareMFPvPvZi>:

	/// Compares two instances for &lt;, ==, or &gt;.
	int compare(void *p1, void *p2) { return 0; }
  4063ed:	55                   	push   %rbp
  4063ee:	48 89 e5             	mov    %rsp,%rbp
  4063f1:	48 83 ec 20          	sub    $0x20,%rsp
  4063f5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4063f9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4063fd:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  406401:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406405:	e8 a2 2a 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  40640a:	b8 00 00 00 00       	mov    $0x0,%eax
  40640f:	c9                   	leaveq 
  406410:	c3                   	retq   

0000000000406411 <_D6object8TypeInfo5tsizeMFZm>:

	/// Returns size of the type.
	size_t tsize() { return 0; }
  406411:	55                   	push   %rbp
  406412:	48 89 e5             	mov    %rsp,%rbp
  406415:	48 83 ec 10          	sub    $0x10,%rsp
  406419:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40641d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406421:	e8 86 2a 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  406426:	b8 00 00 00 00       	mov    $0x0,%eax
  40642b:	c9                   	leaveq 
  40642c:	c3                   	retq   

000000000040642d <_D6object8TypeInfo4swapMFPvPvZv>:

	/// Swaps two instances of the type.
	void swap(void *p1, void *p2)
  40642d:	55                   	push   %rbp
  40642e:	48 89 e5             	mov    %rsp,%rbp
  406431:	48 83 ec 40          	sub    $0x40,%rsp
  406435:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  406439:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40643d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  406441:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  406445:	e8 62 2a 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		size_t n = tsize();
  40644a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40644e:	48 8b 00             	mov    (%rax),%rax
  406451:	48 83 c0 40          	add    $0x40,%rax
  406455:	48 8b 00             	mov    (%rax),%rax
  406458:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  40645c:	ff d0                	callq  *%rax
  40645e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		for (size_t i = 0; i < n; i++)
  406462:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  406469:	00 
  40646a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40646e:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  406472:	0f 92 c0             	setb   %al
  406475:	83 f0 01             	xor    $0x1,%eax
  406478:	84 c0                	test   %al,%al
  40647a:	75 4a                	jne    4064c6 <_D6object8TypeInfo4swapMFPvPvZv+0x99>
		{	byte t;
  40647c:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)

			t = (cast(byte *)p1)[i];
  406480:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  406484:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406488:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40648c:	0f b6 00             	movzbl (%rax),%eax
  40648f:	88 45 ff             	mov    %al,-0x1(%rbp)
			(cast(byte *)p1)[i] = (cast(byte *)p2)[i];
  406492:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  406496:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40649a:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40649e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4064a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4064a6:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4064aa:	0f b6 00             	movzbl (%rax),%eax
  4064ad:	88 01                	mov    %al,(%rcx)
			(cast(byte *)p2)[i] = t;
  4064af:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4064b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4064b7:	48 01 c2             	add    %rax,%rdx
  4064ba:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  4064be:	88 02                	mov    %al,(%rdx)
  4064c0:	48 ff 45 f0          	incq   -0x10(%rbp)
  4064c4:	eb a4                	jmp    40646a <_D6object8TypeInfo4swapMFPvPvZv+0x3d>
		}
	}
  4064c6:	c9                   	leaveq 
  4064c7:	c3                   	retq   

00000000004064c8 <_D6object8TypeInfo4nextMFZC8TypeInfo>:

	/// Get TypeInfo for 'next' type, as defined by what kind of type this is,
	/// null if none.
	TypeInfo next() { return null; }
  4064c8:	55                   	push   %rbp
  4064c9:	48 89 e5             	mov    %rsp,%rbp
  4064cc:	48 83 ec 10          	sub    $0x10,%rsp
  4064d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4064d4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4064d8:	e8 cf 29 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  4064dd:	b8 00 00 00 00       	mov    $0x0,%eax
  4064e2:	c9                   	leaveq 
  4064e3:	c3                   	retq   

00000000004064e4 <_D6object8TypeInfo4initMFZAv>:

	/// Return default initializer, null if default initialize to 0
	void[] init() { return null; }
  4064e4:	55                   	push   %rbp
  4064e5:	48 89 e5             	mov    %rsp,%rbp
  4064e8:	53                   	push   %rbx
  4064e9:	48 83 ec 08          	sub    $0x8,%rsp
  4064ed:	48 89 fb             	mov    %rdi,%rbx
  4064f0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4064f4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4064f8:	e8 af 29 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  4064fd:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  406504:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  40650b:	00 
  40650c:	48 89 d8             	mov    %rbx,%rax
  40650f:	48 83 c4 08          	add    $0x8,%rsp
  406513:	5b                   	pop    %rbx
  406514:	c9                   	leaveq 
  406515:	c3                   	retq   

0000000000406516 <_D6object8TypeInfo5flagsMFZk>:

	/// Get flags for type: 1 means GC should scan for pointers
	uint flags() { return 0; }
  406516:	55                   	push   %rbp
  406517:	48 89 e5             	mov    %rsp,%rbp
  40651a:	48 83 ec 10          	sub    $0x10,%rsp
  40651e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406522:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406526:	e8 81 29 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  40652b:	b8 00 00 00 00       	mov    $0x0,%eax
  406530:	c9                   	leaveq 
  406531:	c3                   	retq   

0000000000406532 <_D6object8TypeInfo5offTiMFZAS6object14OffsetTypeInfo>:

	/// Get type information on the contents of the type; null if not available
	OffsetTypeInfo[] offTi() { return null; }
  406532:	55                   	push   %rbp
  406533:	48 89 e5             	mov    %rsp,%rbp
  406536:	53                   	push   %rbx
  406537:	48 83 ec 08          	sub    $0x8,%rsp
  40653b:	48 89 fb             	mov    %rdi,%rbx
  40653e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406542:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  406546:	e8 61 29 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  40654b:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  406552:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  406559:	00 
  40655a:	48 89 d8             	mov    %rbx,%rax
  40655d:	48 83 c4 08          	add    $0x8,%rsp
  406561:	5b                   	pop    %rbx
  406562:	c9                   	leaveq 
  406563:	c3                   	retq   

0000000000406564 <_D6object16TypeInfo_Typedef8toStringMFZAa>:
}

class TypeInfo_Typedef : TypeInfo
{
	char[] toString() { return name; }
  406564:	55                   	push   %rbp
  406565:	48 89 e5             	mov    %rsp,%rbp
  406568:	53                   	push   %rbx
  406569:	48 83 ec 08          	sub    $0x8,%rsp
  40656d:	48 89 fb             	mov    %rdi,%rbx
  406570:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406574:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  406578:	e8 2f 29 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  40657d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  406581:	48 8b 42 18          	mov    0x18(%rdx),%rax
  406585:	48 89 03             	mov    %rax,(%rbx)
  406588:	48 8b 42 20          	mov    0x20(%rdx),%rax
  40658c:	48 89 43 08          	mov    %rax,0x8(%rbx)
  406590:	48 89 d8             	mov    %rbx,%rax
  406593:	48 83 c4 08          	add    $0x8,%rsp
  406597:	5b                   	pop    %rbx
  406598:	c9                   	leaveq 
  406599:	c3                   	retq   

000000000040659a <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  40659a:	55                   	push   %rbp
  40659b:	48 89 e5             	mov    %rsp,%rbp
  40659e:	48 83 ec 40          	sub    $0x40,%rsp
  4065a2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4065a6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4065aa:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4065ae:	e8 f9 28 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Typedef c;
  4065b3:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4065ba:	00 

		return cast(int)
  4065bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4065bf:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  4065c3:	0f 84 ad 00 00 00    	je     406676 <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xdc>
  4065c9:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  4065cd:	48 c7 c6 a0 b8 41 00 	mov    $0x41b8a0,%rsi
  4065d4:	e8 16 2b 00 00       	callq  4090ef <_d_dynamic_cast>
  4065d9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4065dd:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4065e2:	0f 84 94 00 00 00    	je     40667c <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xe2>
  4065e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4065ec:	48 8b 50 18          	mov    0x18(%rax),%rdx
  4065f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4065f4:	48 8b 40 18          	mov    0x18(%rax),%rax
  4065f8:	48 39 c2             	cmp    %rax,%rdx
  4065fb:	75 7f                	jne    40667c <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xe2>
  4065fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406601:	48 8b 48 18          	mov    0x18(%rax),%rcx
  406605:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406609:	48 8b 50 20          	mov    0x20(%rax),%rdx
  40660d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406611:	48 8b 40 20          	mov    0x20(%rax),%rax
  406615:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  406619:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40661d:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  406621:	fc                   	cld    
  406622:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  406626:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  40662a:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40662e:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  406632:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  406636:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  406638:	0f 97 c2             	seta   %dl
  40663b:	0f 92 c0             	setb   %al
  40663e:	89 d1                	mov    %edx,%ecx
  406640:	28 c1                	sub    %al,%cl
  406642:	89 c8                	mov    %ecx,%eax
  406644:	0f be c0             	movsbl %al,%eax
  406647:	85 c0                	test   %eax,%eax
  406649:	75 31                	jne    40667c <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xe2>
  40664b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40664f:	48 8b 40 10          	mov    0x10(%rax),%rax
  406653:	48 8b 00             	mov    (%rax),%rax
  406656:	48 83 c0 20          	add    $0x20,%rax
  40665a:	48 8b 10             	mov    (%rax),%rdx
  40665d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406661:	48 8b 40 10          	mov    0x10(%rax),%rax
  406665:	48 89 c6             	mov    %rax,%rsi
  406668:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40666c:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406670:	ff d2                	callq  *%rdx
  406672:	85 c0                	test   %eax,%eax
  406674:	74 06                	je     40667c <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xe2>
  406676:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  40667a:	eb 04                	jmp    406680 <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xe6>
  40667c:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  406680:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				(this is o ||
				((c = cast(TypeInfo_Typedef)o) !is null &&
				 this.name == c.name &&
				 this.base == c.base));
	}
  406684:	c9                   	leaveq 
  406685:	c3                   	retq   

0000000000406686 <_D6object16TypeInfo_Typedef7getHashMFPvZm>:

	hash_t getHash(void *p) { return base.getHash(p); }
  406686:	55                   	push   %rbp
  406687:	48 89 e5             	mov    %rsp,%rbp
  40668a:	48 83 ec 10          	sub    $0x10,%rsp
  40668e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406692:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406696:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40669a:	e8 0d 28 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  40669f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4066a3:	48 8b 40 10          	mov    0x10(%rax),%rax
  4066a7:	48 8b 00             	mov    (%rax),%rax
  4066aa:	48 83 c0 28          	add    $0x28,%rax
  4066ae:	48 8b 10             	mov    (%rax),%rdx
  4066b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4066b5:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4066b9:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  4066bd:	ff d2                	callq  *%rdx
  4066bf:	c9                   	leaveq 
  4066c0:	c3                   	retq   

00000000004066c1 <_D6object16TypeInfo_Typedef6equalsMFPvPvZi>:
	int equals(void *p1, void *p2) { return base.equals(p1, p2); }
  4066c1:	55                   	push   %rbp
  4066c2:	48 89 e5             	mov    %rsp,%rbp
  4066c5:	48 83 ec 20          	sub    $0x20,%rsp
  4066c9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4066cd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4066d1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4066d5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4066d9:	e8 ce 27 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  4066de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4066e2:	48 8b 40 10          	mov    0x10(%rax),%rax
  4066e6:	48 8b 00             	mov    (%rax),%rax
  4066e9:	48 83 c0 30          	add    $0x30,%rax
  4066ed:	48 8b 08             	mov    (%rax),%rcx
  4066f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4066f4:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4066f8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4066fc:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  406700:	ff d1                	callq  *%rcx
  406702:	c9                   	leaveq 
  406703:	c3                   	retq   

0000000000406704 <_D6object16TypeInfo_Typedef7compareMFPvPvZi>:
	int compare(void *p1, void *p2) { return base.compare(p1, p2); }
  406704:	55                   	push   %rbp
  406705:	48 89 e5             	mov    %rsp,%rbp
  406708:	48 83 ec 20          	sub    $0x20,%rsp
  40670c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406710:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406714:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  406718:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40671c:	e8 8b 27 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  406721:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406725:	48 8b 40 10          	mov    0x10(%rax),%rax
  406729:	48 8b 00             	mov    (%rax),%rax
  40672c:	48 83 c0 38          	add    $0x38,%rax
  406730:	48 8b 08             	mov    (%rax),%rcx
  406733:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406737:	48 8b 78 10          	mov    0x10(%rax),%rdi
  40673b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40673f:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  406743:	ff d1                	callq  *%rcx
  406745:	c9                   	leaveq 
  406746:	c3                   	retq   

0000000000406747 <_D6object16TypeInfo_Typedef5tsizeMFZm>:
	size_t tsize() { return base.tsize(); }
  406747:	55                   	push   %rbp
  406748:	48 89 e5             	mov    %rsp,%rbp
  40674b:	48 83 ec 10          	sub    $0x10,%rsp
  40674f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406753:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406757:	e8 50 27 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  40675c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406760:	48 8b 40 10          	mov    0x10(%rax),%rax
  406764:	48 8b 00             	mov    (%rax),%rax
  406767:	48 83 c0 40          	add    $0x40,%rax
  40676b:	48 8b 10             	mov    (%rax),%rdx
  40676e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406772:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406776:	ff d2                	callq  *%rdx
  406778:	c9                   	leaveq 
  406779:	c3                   	retq   

000000000040677a <_D6object16TypeInfo_Typedef4swapMFPvPvZv>:
	void swap(void *p1, void *p2) { return base.swap(p1, p2); }
  40677a:	55                   	push   %rbp
  40677b:	48 89 e5             	mov    %rsp,%rbp
  40677e:	48 83 ec 20          	sub    $0x20,%rsp
  406782:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406786:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40678a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40678e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406792:	e8 15 27 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  406797:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40679b:	48 8b 40 10          	mov    0x10(%rax),%rax
  40679f:	48 8b 00             	mov    (%rax),%rax
  4067a2:	48 83 c0 48          	add    $0x48,%rax
  4067a6:	48 8b 08             	mov    (%rax),%rcx
  4067a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4067ad:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4067b1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4067b5:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  4067b9:	ff d1                	callq  *%rcx
  4067bb:	c9                   	leaveq 
  4067bc:	c3                   	retq   

00000000004067bd <_D6object16TypeInfo_Typedef4nextMFZC8TypeInfo>:

	TypeInfo next() { return base.next(); }
  4067bd:	55                   	push   %rbp
  4067be:	48 89 e5             	mov    %rsp,%rbp
  4067c1:	48 83 ec 10          	sub    $0x10,%rsp
  4067c5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4067c9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4067cd:	e8 da 26 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  4067d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4067d6:	48 8b 40 10          	mov    0x10(%rax),%rax
  4067da:	48 8b 00             	mov    (%rax),%rax
  4067dd:	48 83 c0 50          	add    $0x50,%rax
  4067e1:	48 8b 10             	mov    (%rax),%rdx
  4067e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4067e8:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4067ec:	ff d2                	callq  *%rdx
  4067ee:	c9                   	leaveq 
  4067ef:	c3                   	retq   

00000000004067f0 <_D6object16TypeInfo_Typedef5flagsMFZk>:
	uint flags() { return base.flags(); }
  4067f0:	55                   	push   %rbp
  4067f1:	48 89 e5             	mov    %rsp,%rbp
  4067f4:	48 83 ec 10          	sub    $0x10,%rsp
  4067f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4067fc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406800:	e8 a7 26 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  406805:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406809:	48 8b 40 10          	mov    0x10(%rax),%rax
  40680d:	48 8b 00             	mov    (%rax),%rax
  406810:	48 83 c0 60          	add    $0x60,%rax
  406814:	48 8b 10             	mov    (%rax),%rdx
  406817:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40681b:	48 8b 78 10          	mov    0x10(%rax),%rdi
  40681f:	ff d2                	callq  *%rdx
  406821:	c9                   	leaveq 
  406822:	c3                   	retq   

0000000000406823 <_D6object16TypeInfo_Typedef4initMFZAv>:
	void[] init() { return m_init.length ? m_init : base.init(); }
  406823:	55                   	push   %rbp
  406824:	48 89 e5             	mov    %rsp,%rbp
  406827:	48 83 ec 10          	sub    $0x10,%rsp
  40682b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  40682f:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
  406833:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406837:	e8 70 26 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  40683c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406840:	48 8b 40 28          	mov    0x28(%rax),%rax
  406844:	48 85 c0             	test   %rax,%rax
  406847:	74 1d                	je     406866 <_D6object16TypeInfo_Typedef4initMFZAv+0x43>
  406849:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40684d:	48 8b 50 28          	mov    0x28(%rax),%rdx
  406851:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  406855:	48 89 11             	mov    %rdx,(%rcx)
  406858:	48 8b 40 30          	mov    0x30(%rax),%rax
  40685c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  406860:	48 89 42 08          	mov    %rax,0x8(%rdx)
  406864:	eb 20                	jmp    406886 <_D6object16TypeInfo_Typedef4initMFZAv+0x63>
  406866:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40686a:	48 8b 40 10          	mov    0x10(%rax),%rax
  40686e:	48 8b 00             	mov    (%rax),%rax
  406871:	48 83 c0 58          	add    $0x58,%rax
  406875:	48 8b 10             	mov    (%rax),%rdx
  406878:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40687c:	48 8b 70 10          	mov    0x10(%rax),%rsi
  406880:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  406884:	ff d2                	callq  *%rdx
  406886:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40688a:	c9                   	leaveq 
  40688b:	c3                   	retq   

000000000040688c <_D6object16TypeInfo_Pointer8toStringMFZAa>:
{
}

class TypeInfo_Pointer : TypeInfo
{
	char[] toString() { return m_next.toString() ~ "*"; }
  40688c:	55                   	push   %rbp
  40688d:	48 89 e5             	mov    %rsp,%rbp
  406890:	41 55                	push   %r13
  406892:	41 54                	push   %r12
  406894:	53                   	push   %rbx
  406895:	48 83 ec 78          	sub    $0x78,%rsp
  406899:	48 89 fb             	mov    %rdi,%rbx
  40689c:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
  4068a0:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  4068a4:	e8 03 26 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  4068a9:	48 c7 45 a0 01 00 00 	movq   $0x1,-0x60(%rbp)
  4068b0:	00 
  4068b1:	48 c7 45 a8 10 17 41 	movq   $0x411710,-0x58(%rbp)
  4068b8:	00 
  4068b9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4068bd:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4068c1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4068c5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  4068c9:	4c 8b 65 b8          	mov    -0x48(%rbp),%r12
  4068cd:	4c 8b 6d b0          	mov    -0x50(%rbp),%r13
  4068d1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4068d5:	48 8b 40 10          	mov    0x10(%rax),%rax
  4068d9:	48 8b 00             	mov    (%rax),%rax
  4068dc:	48 83 c0 08          	add    $0x8,%rax
  4068e0:	48 8b 10             	mov    (%rax),%rdx
  4068e3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4068e7:	48 8b 70 10          	mov    0x10(%rax),%rsi
  4068eb:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  4068ef:	ff d2                	callq  *%rdx
  4068f1:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  4068f5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  4068f9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4068fd:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  406901:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  406905:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  406909:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40690d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  406911:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406915:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  406919:	4c 89 24 24          	mov    %r12,(%rsp)
  40691d:	4d 89 e9             	mov    %r13,%r9
  406920:	49 89 c0             	mov    %rax,%r8
  406923:	ba 02 00 00 00       	mov    $0x2,%edx
  406928:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  40692f:	48 89 df             	mov    %rbx,%rdi
  406932:	b8 00 00 00 00       	mov    $0x0,%eax
  406937:	e8 1f 39 00 00       	callq  40a25b <_d_arraycatnT>
  40693c:	48 89 d8             	mov    %rbx,%rax
  40693f:	48 83 c4 78          	add    $0x78,%rsp
  406943:	5b                   	pop    %rbx
  406944:	41 5c                	pop    %r12
  406946:	41 5d                	pop    %r13
  406948:	c9                   	leaveq 
  406949:	c3                   	retq   

000000000040694a <_D6object16TypeInfo_Pointer8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  40694a:	55                   	push   %rbp
  40694b:	48 89 e5             	mov    %rsp,%rbp
  40694e:	48 83 ec 30          	sub    $0x30,%rsp
  406952:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406956:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40695a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40695e:	e8 49 25 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Pointer c;
  406963:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40696a:	00 

		return this is o ||
  40696b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40696f:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  406973:	74 46                	je     4069bb <_D6object16TypeInfo_Pointer8opEqualsMFC6ObjectZi+0x71>
  406975:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  406979:	48 c7 c6 e0 b9 41 00 	mov    $0x41b9e0,%rsi
  406980:	e8 6a 27 00 00       	callq  4090ef <_d_dynamic_cast>
  406985:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  406989:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40698e:	74 31                	je     4069c1 <_D6object16TypeInfo_Pointer8opEqualsMFC6ObjectZi+0x77>
  406990:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406994:	48 8b 40 10          	mov    0x10(%rax),%rax
  406998:	48 8b 00             	mov    (%rax),%rax
  40699b:	48 83 c0 20          	add    $0x20,%rax
  40699f:	48 8b 10             	mov    (%rax),%rdx
  4069a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4069a6:	48 8b 40 10          	mov    0x10(%rax),%rax
  4069aa:	48 89 c6             	mov    %rax,%rsi
  4069ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4069b1:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4069b5:	ff d2                	callq  *%rdx
  4069b7:	85 c0                	test   %eax,%eax
  4069b9:	74 06                	je     4069c1 <_D6object16TypeInfo_Pointer8opEqualsMFC6ObjectZi+0x77>
  4069bb:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  4069bf:	eb 04                	jmp    4069c5 <_D6object16TypeInfo_Pointer8opEqualsMFC6ObjectZi+0x7b>
  4069c1:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  4069c5:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_Pointer)o) !is null &&
				 this.m_next == c.m_next);
	}
  4069c9:	c9                   	leaveq 
  4069ca:	c3                   	retq   

00000000004069cb <_D6object16TypeInfo_Pointer7getHashMFPvZm>:

	hash_t getHash(void *p)
  4069cb:	55                   	push   %rbp
  4069cc:	48 89 e5             	mov    %rsp,%rbp
  4069cf:	48 83 ec 10          	sub    $0x10,%rsp
  4069d3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4069d7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4069db:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4069df:	e8 c8 24 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return cast(uint)*cast(void* *)p;
  4069e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4069e8:	48 8b 00             	mov    (%rax),%rax
  4069eb:	89 c0                	mov    %eax,%eax
	}
  4069ed:	c9                   	leaveq 
  4069ee:	c3                   	retq   

00000000004069ef <_D6object16TypeInfo_Pointer6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  4069ef:	55                   	push   %rbp
  4069f0:	48 89 e5             	mov    %rsp,%rbp
  4069f3:	48 83 ec 20          	sub    $0x20,%rsp
  4069f7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4069fb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4069ff:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  406a03:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406a07:	e8 a0 24 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return cast(int)(*cast(void* *)p1 == *cast(void* *)p2);
  406a0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406a10:	48 8b 10             	mov    (%rax),%rdx
  406a13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406a17:	48 8b 00             	mov    (%rax),%rax
  406a1a:	48 39 c2             	cmp    %rax,%rdx
  406a1d:	0f 94 c0             	sete   %al
  406a20:	0f b6 c0             	movzbl %al,%eax
	}
  406a23:	c9                   	leaveq 
  406a24:	c3                   	retq   

0000000000406a25 <_D6object16TypeInfo_Pointer7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  406a25:	55                   	push   %rbp
  406a26:	48 89 e5             	mov    %rsp,%rbp
  406a29:	48 83 ec 20          	sub    $0x20,%rsp
  406a2d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406a31:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406a35:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  406a39:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406a3d:	e8 6a 24 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		if (*cast(void* *)p1 < *cast(void* *)p2)
  406a42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406a46:	48 8b 10             	mov    (%rax),%rdx
  406a49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406a4d:	48 8b 00             	mov    (%rax),%rax
  406a50:	48 39 c2             	cmp    %rax,%rdx
  406a53:	73 09                	jae    406a5e <_D6object16TypeInfo_Pointer7compareMFPvPvZi+0x39>
			return -1;
  406a55:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  406a5c:	eb 23                	jmp    406a81 <_D6object16TypeInfo_Pointer7compareMFPvPvZi+0x5c>
		else if (*cast(void* *)p1 > *cast(void* *)p2)
  406a5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406a62:	48 8b 10             	mov    (%rax),%rdx
  406a65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406a69:	48 8b 00             	mov    (%rax),%rax
  406a6c:	48 39 c2             	cmp    %rax,%rdx
  406a6f:	76 09                	jbe    406a7a <_D6object16TypeInfo_Pointer7compareMFPvPvZi+0x55>
			return 1;
  406a71:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  406a78:	eb 07                	jmp    406a81 <_D6object16TypeInfo_Pointer7compareMFPvPvZi+0x5c>
		else
			return 0;
  406a7a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  406a81:	8b 45 e4             	mov    -0x1c(%rbp),%eax
	}
  406a84:	c9                   	leaveq 
  406a85:	c3                   	retq   

0000000000406a86 <_D6object16TypeInfo_Pointer5tsizeMFZm>:

	size_t tsize()
  406a86:	55                   	push   %rbp
  406a87:	48 89 e5             	mov    %rsp,%rbp
  406a8a:	48 83 ec 10          	sub    $0x10,%rsp
  406a8e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406a92:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406a96:	e8 11 24 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return (void*).sizeof;
  406a9b:	b8 08 00 00 00       	mov    $0x8,%eax
	}
  406aa0:	c9                   	leaveq 
  406aa1:	c3                   	retq   

0000000000406aa2 <_D6object16TypeInfo_Pointer4swapMFPvPvZv>:

	void swap(void *p1, void *p2)
  406aa2:	55                   	push   %rbp
  406aa3:	48 89 e5             	mov    %rsp,%rbp
  406aa6:	48 83 ec 30          	sub    $0x30,%rsp
  406aaa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406aae:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  406ab2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  406ab6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  406aba:	e8 ed 23 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{	void* tmp;
  406abf:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  406ac6:	00 
		tmp = *cast(void**)p1;
  406ac7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406acb:	48 8b 00             	mov    (%rax),%rax
  406ace:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		*cast(void**)p1 = *cast(void**)p2;
  406ad2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  406ad6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406ada:	48 8b 00             	mov    (%rax),%rax
  406add:	48 89 02             	mov    %rax,(%rdx)
		*cast(void**)p2 = tmp;
  406ae0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  406ae4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406ae8:	48 89 02             	mov    %rax,(%rdx)
	}
  406aeb:	c9                   	leaveq 
  406aec:	c3                   	retq   

0000000000406aed <_D6object16TypeInfo_Pointer4nextMFZC8TypeInfo>:

	TypeInfo next() { return m_next; }
  406aed:	55                   	push   %rbp
  406aee:	48 89 e5             	mov    %rsp,%rbp
  406af1:	48 83 ec 10          	sub    $0x10,%rsp
  406af5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406af9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406afd:	e8 aa 23 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  406b02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406b06:	48 8b 40 10          	mov    0x10(%rax),%rax
  406b0a:	c9                   	leaveq 
  406b0b:	c3                   	retq   

0000000000406b0c <_D6object16TypeInfo_Pointer5flagsMFZk>:
	uint flags() { return 1; }
  406b0c:	55                   	push   %rbp
  406b0d:	48 89 e5             	mov    %rsp,%rbp
  406b10:	48 83 ec 10          	sub    $0x10,%rsp
  406b14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406b18:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406b1c:	e8 8b 23 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  406b21:	b8 01 00 00 00       	mov    $0x1,%eax
  406b26:	c9                   	leaveq 
  406b27:	c3                   	retq   

0000000000406b28 <_D6object14TypeInfo_Array8toStringMFZAa>:
	TypeInfo m_next;
}

class TypeInfo_Array : TypeInfo
{
	char[] toString() { return value.toString() ~ "[]"; }
  406b28:	55                   	push   %rbp
  406b29:	48 89 e5             	mov    %rsp,%rbp
  406b2c:	41 55                	push   %r13
  406b2e:	41 54                	push   %r12
  406b30:	53                   	push   %rbx
  406b31:	48 83 ec 78          	sub    $0x78,%rsp
  406b35:	48 89 fb             	mov    %rdi,%rbx
  406b38:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
  406b3c:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  406b40:	e8 67 23 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  406b45:	48 c7 45 a0 02 00 00 	movq   $0x2,-0x60(%rbp)
  406b4c:	00 
  406b4d:	48 c7 45 a8 d0 17 41 	movq   $0x4117d0,-0x58(%rbp)
  406b54:	00 
  406b55:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  406b59:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  406b5d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  406b61:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  406b65:	4c 8b 65 b8          	mov    -0x48(%rbp),%r12
  406b69:	4c 8b 6d b0          	mov    -0x50(%rbp),%r13
  406b6d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  406b71:	48 8b 40 10          	mov    0x10(%rax),%rax
  406b75:	48 8b 00             	mov    (%rax),%rax
  406b78:	48 83 c0 08          	add    $0x8,%rax
  406b7c:	48 8b 10             	mov    (%rax),%rdx
  406b7f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  406b83:	48 8b 70 10          	mov    0x10(%rax),%rsi
  406b87:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  406b8b:	ff d2                	callq  *%rdx
  406b8d:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  406b91:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  406b95:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  406b99:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  406b9d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  406ba1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  406ba5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406ba9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  406bad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406bb1:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  406bb5:	4c 89 24 24          	mov    %r12,(%rsp)
  406bb9:	4d 89 e9             	mov    %r13,%r9
  406bbc:	49 89 c0             	mov    %rax,%r8
  406bbf:	ba 02 00 00 00       	mov    $0x2,%edx
  406bc4:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  406bcb:	48 89 df             	mov    %rbx,%rdi
  406bce:	b8 00 00 00 00       	mov    $0x0,%eax
  406bd3:	e8 83 36 00 00       	callq  40a25b <_d_arraycatnT>
  406bd8:	48 89 d8             	mov    %rbx,%rax
  406bdb:	48 83 c4 78          	add    $0x78,%rsp
  406bdf:	5b                   	pop    %rbx
  406be0:	41 5c                	pop    %r12
  406be2:	41 5d                	pop    %r13
  406be4:	c9                   	leaveq 
  406be5:	c3                   	retq   

0000000000406be6 <_D6object14TypeInfo_Array8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  406be6:	55                   	push   %rbp
  406be7:	48 89 e5             	mov    %rsp,%rbp
  406bea:	48 83 ec 30          	sub    $0x30,%rsp
  406bee:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406bf2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  406bf6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  406bfa:	e8 ad 22 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Array c;
  406bff:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  406c06:	00 

		return cast(int)
  406c07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406c0b:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  406c0f:	74 46                	je     406c57 <_D6object14TypeInfo_Array8opEqualsMFC6ObjectZi+0x71>
  406c11:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  406c15:	48 c7 c6 80 ba 41 00 	mov    $0x41ba80,%rsi
  406c1c:	e8 ce 24 00 00       	callq  4090ef <_d_dynamic_cast>
  406c21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  406c25:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  406c2a:	74 31                	je     406c5d <_D6object14TypeInfo_Array8opEqualsMFC6ObjectZi+0x77>
  406c2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406c30:	48 8b 40 10          	mov    0x10(%rax),%rax
  406c34:	48 8b 00             	mov    (%rax),%rax
  406c37:	48 83 c0 20          	add    $0x20,%rax
  406c3b:	48 8b 10             	mov    (%rax),%rdx
  406c3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406c42:	48 8b 40 10          	mov    0x10(%rax),%rax
  406c46:	48 89 c6             	mov    %rax,%rsi
  406c49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406c4d:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406c51:	ff d2                	callq  *%rdx
  406c53:	85 c0                	test   %eax,%eax
  406c55:	74 06                	je     406c5d <_D6object14TypeInfo_Array8opEqualsMFC6ObjectZi+0x77>
  406c57:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  406c5b:	eb 04                	jmp    406c61 <_D6object14TypeInfo_Array8opEqualsMFC6ObjectZi+0x7b>
  406c5d:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  406c61:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
			   (this is o ||
				((c = cast(TypeInfo_Array)o) !is null &&
				 this.value == c.value));
	}
  406c65:	c9                   	leaveq 
  406c66:	c3                   	retq   

0000000000406c67 <_D6object14TypeInfo_Array7getHashMFPvZm>:

	hash_t getHash(void *p)
  406c67:	55                   	push   %rbp
  406c68:	48 89 e5             	mov    %rsp,%rbp
  406c6b:	48 83 ec 40          	sub    $0x40,%rsp
  406c6f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  406c73:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  406c77:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  406c7b:	e8 2c 22 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{	size_t sz = value.tsize();
  406c80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406c84:	48 8b 40 10          	mov    0x10(%rax),%rax
  406c88:	48 8b 00             	mov    (%rax),%rax
  406c8b:	48 83 c0 40          	add    $0x40,%rax
  406c8f:	48 8b 10             	mov    (%rax),%rdx
  406c92:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406c96:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406c9a:	ff d2                	callq  *%rdx
  406c9c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		hash_t hash = 0;
  406ca0:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  406ca7:	00 
		void[] a = *cast(void[]*)p;
  406ca8:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  406cac:	48 8b 02             	mov    (%rdx),%rax
  406caf:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  406cb3:	48 8b 42 08          	mov    0x8(%rdx),%rax
  406cb7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		for (size_t i = 0; i < a.length; i++)
  406cbb:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  406cc2:	00 
  406cc3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406cc7:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  406ccb:	0f 92 c0             	setb   %al
  406cce:	83 f0 01             	xor    $0x1,%eax
  406cd1:	84 c0                	test   %al,%al
  406cd3:	75 37                	jne    406d0c <_D6object14TypeInfo_Array7getHashMFPvZm+0xa5>
			hash += value.getHash(a.ptr + i * sz);
  406cd5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406cd9:	48 8b 40 10          	mov    0x10(%rax),%rax
  406cdd:	48 8b 00             	mov    (%rax),%rax
  406ce0:	48 83 c0 28          	add    $0x28,%rax
  406ce4:	48 8b 08             	mov    (%rax),%rcx
  406ce7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  406ceb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406cef:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  406cf4:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  406cf8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406cfc:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406d00:	ff d1                	callq  *%rcx
  406d02:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  406d06:	48 ff 45 f8          	incq   -0x8(%rbp)
  406d0a:	eb b7                	jmp    406cc3 <_D6object14TypeInfo_Array7getHashMFPvZm+0x5c>
		return hash;
  406d0c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  406d10:	c9                   	leaveq 
  406d11:	c3                   	retq   

0000000000406d12 <_D6object14TypeInfo_Array6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  406d12:	55                   	push   %rbp
  406d13:	48 89 e5             	mov    %rsp,%rbp
  406d16:	48 83 ec 50          	sub    $0x50,%rsp
  406d1a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  406d1e:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  406d22:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  406d26:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  406d2a:	e8 7d 21 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		void[] a1 = *cast(void[]*)p1;
  406d2f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  406d33:	48 8b 02             	mov    (%rdx),%rax
  406d36:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  406d3a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  406d3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		void[] a2 = *cast(void[]*)p2;
  406d42:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  406d46:	48 8b 02             	mov    (%rdx),%rax
  406d49:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  406d4d:	48 8b 42 08          	mov    0x8(%rdx),%rax
  406d51:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		if (a1.length != a2.length)
  406d55:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  406d59:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406d5d:	48 39 c2             	cmp    %rax,%rdx
  406d60:	74 0c                	je     406d6e <_D6object14TypeInfo_Array6equalsMFPvPvZi+0x5c>
			return 0;
  406d62:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  406d69:	e9 9e 00 00 00       	jmpq   406e0c <_D6object14TypeInfo_Array6equalsMFPvPvZi+0xfa>
		size_t sz = value.tsize();
  406d6e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406d72:	48 8b 40 10          	mov    0x10(%rax),%rax
  406d76:	48 8b 00             	mov    (%rax),%rax
  406d79:	48 83 c0 40          	add    $0x40,%rax
  406d7d:	48 8b 10             	mov    (%rax),%rdx
  406d80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406d84:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406d88:	ff d2                	callq  *%rdx
  406d8a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		for (size_t i = 0; i < a1.length; i++)
  406d8e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  406d95:	00 
  406d96:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406d9a:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  406d9e:	0f 92 c0             	setb   %al
  406da1:	83 f0 01             	xor    $0x1,%eax
  406da4:	84 c0                	test   %al,%al
  406da6:	75 5d                	jne    406e05 <_D6object14TypeInfo_Array6equalsMFPvPvZi+0xf3>
		{
			if (!value.equals(a1.ptr + i * sz, a2.ptr + i * sz))
  406da8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406dac:	48 8b 40 10          	mov    0x10(%rax),%rax
  406db0:	48 8b 00             	mov    (%rax),%rax
  406db3:	48 83 c0 30          	add    $0x30,%rax
  406db7:	4c 8b 00             	mov    (%rax),%r8
  406dba:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406dbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406dc2:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  406dc7:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  406dcb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  406dcf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406dd3:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  406dd8:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  406ddc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406de0:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406de4:	48 89 ca             	mov    %rcx,%rdx
  406de7:	41 ff d0             	callq  *%r8
  406dea:	85 c0                	test   %eax,%eax
  406dec:	0f 95 c0             	setne  %al
  406def:	83 f0 01             	xor    $0x1,%eax
  406df2:	84 c0                	test   %al,%al
  406df4:	74 09                	je     406dff <_D6object14TypeInfo_Array6equalsMFPvPvZi+0xed>
				return 0;
  406df6:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  406dfd:	eb 0d                	jmp    406e0c <_D6object14TypeInfo_Array6equalsMFPvPvZi+0xfa>
		if (a1.length != a2.length)
			return 0;
		size_t sz = value.tsize();
		for (size_t i = 0; i < a1.length; i++)
		{
			if (!value.equals(a1.ptr + i * sz, a2.ptr + i * sz))
  406dff:	48 ff 45 f8          	incq   -0x8(%rbp)
  406e03:	eb 91                	jmp    406d96 <_D6object14TypeInfo_Array6equalsMFPvPvZi+0x84>
				return 0;
		}
		return 1;
  406e05:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%rbp)
  406e0c:	8b 45 b4             	mov    -0x4c(%rbp),%eax
	}
  406e0f:	c9                   	leaveq 
  406e10:	c3                   	retq   

0000000000406e11 <_D6object14TypeInfo_Array7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  406e11:	55                   	push   %rbp
  406e12:	48 89 e5             	mov    %rsp,%rbp
  406e15:	48 83 ec 60          	sub    $0x60,%rsp
  406e19:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  406e1d:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  406e21:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  406e25:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  406e29:	e8 7e 20 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		void[] a1 = *cast(void[]*)p1;
  406e2e:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  406e32:	48 8b 02             	mov    (%rdx),%rax
  406e35:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  406e39:	48 8b 42 08          	mov    0x8(%rdx),%rax
  406e3d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		void[] a2 = *cast(void[]*)p2;
  406e41:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  406e45:	48 8b 02             	mov    (%rdx),%rax
  406e48:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  406e4c:	48 8b 42 08          	mov    0x8(%rdx),%rax
  406e50:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		size_t sz = value.tsize();
  406e54:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406e58:	48 8b 40 10          	mov    0x10(%rax),%rax
  406e5c:	48 8b 00             	mov    (%rax),%rax
  406e5f:	48 83 c0 40          	add    $0x40,%rax
  406e63:	48 8b 10             	mov    (%rax),%rdx
  406e66:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406e6a:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406e6e:	ff d2                	callq  *%rdx
  406e70:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		size_t len = a1.length;
  406e74:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  406e78:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

		if (a2.length < len)
  406e7c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406e80:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  406e84:	73 08                	jae    406e8e <_D6object14TypeInfo_Array7compareMFPvPvZi+0x7d>
			len = a2.length;
  406e86:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406e8a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		for (size_t u = 0; u < len; u++)
  406e8e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  406e95:	00 
  406e96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406e9a:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  406e9e:	0f 92 c0             	setb   %al
  406ea1:	83 f0 01             	xor    $0x1,%eax
  406ea4:	84 c0                	test   %al,%al
  406ea6:	75 59                	jne    406f01 <_D6object14TypeInfo_Array7compareMFPvPvZi+0xf0>
		{
			int result = value.compare(a1.ptr + u * sz, a2.ptr + u * sz);
  406ea8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406eac:	48 8b 40 10          	mov    0x10(%rax),%rax
  406eb0:	48 8b 00             	mov    (%rax),%rax
  406eb3:	48 83 c0 38          	add    $0x38,%rax
  406eb7:	4c 8b 00             	mov    (%rax),%r8
  406eba:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  406ebe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406ec2:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  406ec7:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  406ecb:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  406ecf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406ed3:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  406ed8:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  406edc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406ee0:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406ee4:	48 89 ca             	mov    %rcx,%rdx
  406ee7:	41 ff d0             	callq  *%r8
  406eea:	89 45 fc             	mov    %eax,-0x4(%rbp)
			if (result)
  406eed:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  406ef1:	74 08                	je     406efb <_D6object14TypeInfo_Array7compareMFPvPvZi+0xea>
				return result;
  406ef3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  406ef6:	89 45 a4             	mov    %eax,-0x5c(%rbp)
  406ef9:	eb 17                	jmp    406f12 <_D6object14TypeInfo_Array7compareMFPvPvZi+0x101>
		if (a2.length < len)
			len = a2.length;
		for (size_t u = 0; u < len; u++)
		{
			int result = value.compare(a1.ptr + u * sz, a2.ptr + u * sz);
			if (result)
  406efb:	48 ff 45 f0          	incq   -0x10(%rbp)
  406eff:	eb 95                	jmp    406e96 <_D6object14TypeInfo_Array7compareMFPvPvZi+0x85>
				return result;
		}
		return cast(int)a1.length - cast(int)a2.length;
  406f01:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  406f05:	89 c2                	mov    %eax,%edx
  406f07:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406f0b:	89 d1                	mov    %edx,%ecx
  406f0d:	29 c1                	sub    %eax,%ecx
  406f0f:	89 4d a4             	mov    %ecx,-0x5c(%rbp)
  406f12:	8b 45 a4             	mov    -0x5c(%rbp),%eax
	}
  406f15:	c9                   	leaveq 
  406f16:	c3                   	retq   

0000000000406f17 <_D6object14TypeInfo_Array5tsizeMFZm>:

	size_t tsize()
  406f17:	55                   	push   %rbp
  406f18:	48 89 e5             	mov    %rsp,%rbp
  406f1b:	48 83 ec 10          	sub    $0x10,%rsp
  406f1f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406f23:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406f27:	e8 80 1f 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return (void[]).sizeof;
  406f2c:	b8 10 00 00 00       	mov    $0x10,%eax
	}
  406f31:	c9                   	leaveq 
  406f32:	c3                   	retq   

0000000000406f33 <_D6object14TypeInfo_Array4swapMFPvPvZv>:

	void swap(void *p1, void *p2)
  406f33:	55                   	push   %rbp
  406f34:	48 89 e5             	mov    %rsp,%rbp
  406f37:	48 83 ec 30          	sub    $0x30,%rsp
  406f3b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406f3f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  406f43:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  406f47:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  406f4b:	e8 5c 1f 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{	void[] tmp;
  406f50:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  406f57:	00 
  406f58:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  406f5f:	00 
		tmp = *cast(void[]*)p1;
  406f60:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  406f64:	48 8b 02             	mov    (%rdx),%rax
  406f67:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  406f6b:	48 8b 42 08          	mov    0x8(%rdx),%rax
  406f6f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		*cast(void[]*)p1 = *cast(void[]*)p2;
  406f73:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406f77:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  406f7b:	48 8b 02             	mov    (%rdx),%rax
  406f7e:	48 89 01             	mov    %rax,(%rcx)
  406f81:	48 8b 42 08          	mov    0x8(%rdx),%rax
  406f85:	48 89 41 08          	mov    %rax,0x8(%rcx)
		*cast(void[]*)p2 = tmp;
  406f89:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  406f8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406f91:	48 89 02             	mov    %rax,(%rdx)
  406f94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406f98:	48 89 42 08          	mov    %rax,0x8(%rdx)
	}
  406f9c:	c9                   	leaveq 
  406f9d:	c3                   	retq   

0000000000406f9e <_D6object14TypeInfo_Array4nextMFZC8TypeInfo>:

	TypeInfo value;

	TypeInfo next()
  406f9e:	55                   	push   %rbp
  406f9f:	48 89 e5             	mov    %rsp,%rbp
  406fa2:	48 83 ec 10          	sub    $0x10,%rsp
  406fa6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406faa:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406fae:	e8 f9 1e 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return value;
  406fb3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406fb7:	48 8b 40 10          	mov    0x10(%rax),%rax
	}
  406fbb:	c9                   	leaveq 
  406fbc:	c3                   	retq   

0000000000406fbd <_D6object14TypeInfo_Array5flagsMFZk>:

	uint flags() { return 1; }
  406fbd:	55                   	push   %rbp
  406fbe:	48 89 e5             	mov    %rsp,%rbp
  406fc1:	48 83 ec 10          	sub    $0x10,%rsp
  406fc5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406fc9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406fcd:	e8 da 1e 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  406fd2:	b8 01 00 00 00       	mov    $0x1,%eax
  406fd7:	c9                   	leaveq 
  406fd8:	c3                   	retq   

0000000000406fd9 <_D6object20TypeInfo_StaticArray8toStringMFZAa>:
}

class TypeInfo_StaticArray : TypeInfo
{
	char[] toString()
  406fd9:	55                   	push   %rbp
  406fda:	48 89 e5             	mov    %rsp,%rbp
  406fdd:	41 57                	push   %r15
  406fdf:	41 56                	push   %r14
  406fe1:	41 55                	push   %r13
  406fe3:	41 54                	push   %r12
  406fe5:	53                   	push   %rbx
  406fe6:	48 81 ec 88 01 00 00 	sub    $0x188,%rsp
  406fed:	48 89 bd 60 fe ff ff 	mov    %rdi,-0x1a0(%rbp)
  406ff4:	48 89 b5 b8 fe ff ff 	mov    %rsi,-0x148(%rbp)
  406ffb:	48 8b bd b8 fe ff ff 	mov    -0x148(%rbp),%rdi
  407002:	e8 a5 1e 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		char[20] buf;
  407007:	48 c7 85 e0 fe ff ff 	movq   $0x14,-0x120(%rbp)
  40700e:	14 00 00 00 
  407012:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
  407019:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  407020:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  407027:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40702b:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  407032:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  407036:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  40703b:	0f 95 c0             	setne  %al
  40703e:	83 f0 01             	xor    $0x1,%eax
  407041:	84 c0                	test   %al,%al
  407043:	75 11                	jne    407056 <_D6object20TypeInfo_StaticArray8toStringMFZAa+0x7d>
  407045:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  407049:	c6 00 ff             	movb   $0xff,(%rax)
  40704c:	48 ff 45 c0          	incq   -0x40(%rbp)
  407050:	48 ff 4d c8          	decq   -0x38(%rbp)
  407054:	eb e0                	jmp    407036 <_D6object20TypeInfo_StaticArray8toStringMFZAa+0x5d>
		return value.toString() ~ "[" ~ itoa(buf, 'd', len) ~ "]";
  407056:	48 c7 85 f0 fe ff ff 	movq   $0x1,-0x110(%rbp)
  40705d:	01 00 00 00 
  407061:	48 c7 85 f8 fe ff ff 	movq   $0x411890,-0x108(%rbp)
  407068:	90 18 41 00 
  40706c:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  407073:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  40707a:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  407081:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  407088:	48 8b 9d 08 ff ff ff 	mov    -0xf8(%rbp),%rbx
  40708f:	4c 8b a5 00 ff ff ff 	mov    -0x100(%rbp),%r12
  407096:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  40709d:	48 8b 40 18          	mov    0x18(%rax),%rax
  4070a1:	48 89 c1             	mov    %rax,%rcx
  4070a4:	48 c7 85 10 ff ff ff 	movq   $0x14,-0xf0(%rbp)
  4070ab:	14 00 00 00 
  4070af:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
  4070b6:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  4070bd:	48 8d bd a0 fe ff ff 	lea    -0x160(%rbp),%rdi
  4070c4:	48 8b b5 10 ff ff ff 	mov    -0xf0(%rbp),%rsi
  4070cb:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  4070d2:	49 89 c8             	mov    %rcx,%r8
  4070d5:	b9 64 00 00 00       	mov    $0x64,%ecx
  4070da:	e8 ea 67 00 00       	callq  40d8c9 <_D6kernel4core4util4itoaFAaalZAa>
  4070df:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
  4070e6:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  4070ed:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  4070f4:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  4070fb:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  407102:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  407109:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  407110:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  407117:	4c 8b ad 38 ff ff ff 	mov    -0xc8(%rbp),%r13
  40711e:	4c 8b b5 30 ff ff ff 	mov    -0xd0(%rbp),%r14
  407125:	48 c7 85 40 ff ff ff 	movq   $0x1,-0xc0(%rbp)
  40712c:	01 00 00 00 
  407130:	48 c7 85 48 ff ff ff 	movq   $0x411892,-0xb8(%rbp)
  407137:	92 18 41 00 
  40713b:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  407142:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  407149:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  407150:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  407157:	4c 8b bd 58 ff ff ff 	mov    -0xa8(%rbp),%r15
  40715e:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  407165:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
  40716c:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  407173:	48 8b 40 10          	mov    0x10(%rax),%rax
  407177:	48 8b 00             	mov    (%rax),%rax
  40717a:	48 83 c0 08          	add    $0x8,%rax
  40717e:	48 8b 10             	mov    (%rax),%rdx
  407181:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  407188:	48 8b 70 10          	mov    0x10(%rax),%rsi
  40718c:	48 8d bd 90 fe ff ff 	lea    -0x170(%rbp),%rdi
  407193:	ff d2                	callq  *%rdx
  407195:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  40719c:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  4071a3:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
  4071aa:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  4071b1:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4071b8:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  4071bf:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  4071c6:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4071cd:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4071d4:	48 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%rcx
  4071db:	48 8d bd 80 fe ff ff 	lea    -0x180(%rbp),%rdi
  4071e2:	4c 89 3c 24          	mov    %r15,(%rsp)
  4071e6:	4c 8b 8d 68 fe ff ff 	mov    -0x198(%rbp),%r9
  4071ed:	49 89 c0             	mov    %rax,%r8
  4071f0:	ba 02 00 00 00       	mov    $0x2,%edx
  4071f5:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  4071fc:	b8 00 00 00 00       	mov    $0x0,%eax
  407201:	e8 55 30 00 00       	callq  40a25b <_d_arraycatnT>
  407206:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
  40720d:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  407211:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
  407218:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  40721c:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  407220:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  407224:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  407228:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  40722c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  407230:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  407234:	48 8d bd 70 fe ff ff 	lea    -0x190(%rbp),%rdi
  40723b:	4c 89 2c 24          	mov    %r13,(%rsp)
  40723f:	4d 89 f1             	mov    %r14,%r9
  407242:	49 89 c0             	mov    %rax,%r8
  407245:	ba 02 00 00 00       	mov    $0x2,%edx
  40724a:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  407251:	b8 00 00 00 00       	mov    $0x0,%eax
  407256:	e8 00 30 00 00       	callq  40a25b <_d_arraycatnT>
  40725b:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
  407262:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  407266:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
  40726d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  407271:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  407275:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  407279:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40727d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  407281:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407285:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  407289:	48 89 1c 24          	mov    %rbx,(%rsp)
  40728d:	4d 89 e1             	mov    %r12,%r9
  407290:	49 89 c0             	mov    %rax,%r8
  407293:	ba 02 00 00 00       	mov    $0x2,%edx
  407298:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  40729f:	48 8b bd 60 fe ff ff 	mov    -0x1a0(%rbp),%rdi
  4072a6:	b8 00 00 00 00       	mov    $0x0,%eax
  4072ab:	e8 ab 2f 00 00       	callq  40a25b <_d_arraycatnT>
	}
  4072b0:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  4072b7:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
  4072be:	5b                   	pop    %rbx
  4072bf:	41 5c                	pop    %r12
  4072c1:	41 5d                	pop    %r13
  4072c3:	41 5e                	pop    %r14
  4072c5:	41 5f                	pop    %r15
  4072c7:	c9                   	leaveq 
  4072c8:	c3                   	retq   

00000000004072c9 <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  4072c9:	55                   	push   %rbp
  4072ca:	48 89 e5             	mov    %rsp,%rbp
  4072cd:	48 83 ec 30          	sub    $0x30,%rsp
  4072d1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4072d5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4072d9:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4072dd:	e8 ca 1b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_StaticArray c;
  4072e2:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4072e9:	00 

		return cast(int)
  4072ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4072ee:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  4072f2:	74 5b                	je     40734f <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi+0x86>
  4072f4:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  4072f8:	48 c7 c6 20 bb 41 00 	mov    $0x41bb20,%rsi
  4072ff:	e8 eb 1d 00 00       	callq  4090ef <_d_dynamic_cast>
  407304:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  407308:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40730d:	74 46                	je     407355 <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi+0x8c>
  40730f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407313:	48 8b 50 18          	mov    0x18(%rax),%rdx
  407317:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40731b:	48 8b 40 18          	mov    0x18(%rax),%rax
  40731f:	48 39 c2             	cmp    %rax,%rdx
  407322:	75 31                	jne    407355 <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi+0x8c>
  407324:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407328:	48 8b 40 10          	mov    0x10(%rax),%rax
  40732c:	48 8b 00             	mov    (%rax),%rax
  40732f:	48 83 c0 20          	add    $0x20,%rax
  407333:	48 8b 10             	mov    (%rax),%rdx
  407336:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40733a:	48 8b 40 10          	mov    0x10(%rax),%rax
  40733e:	48 89 c6             	mov    %rax,%rsi
  407341:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407345:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407349:	ff d2                	callq  *%rdx
  40734b:	85 c0                	test   %eax,%eax
  40734d:	74 06                	je     407355 <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi+0x8c>
  40734f:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  407353:	eb 04                	jmp    407359 <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi+0x90>
  407355:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  407359:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
			   (this is o ||
				((c = cast(TypeInfo_StaticArray)o) !is null &&
				 this.len == c.len &&
				 this.value == c.value));
	}
  40735d:	c9                   	leaveq 
  40735e:	c3                   	retq   

000000000040735f <_D6object20TypeInfo_StaticArray7getHashMFPvZm>:

	hash_t getHash(void *p)
  40735f:	55                   	push   %rbp
  407360:	48 89 e5             	mov    %rsp,%rbp
  407363:	48 83 ec 30          	sub    $0x30,%rsp
  407367:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40736b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40736f:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  407373:	e8 34 1b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{	size_t sz = value.tsize();
  407378:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40737c:	48 8b 40 10          	mov    0x10(%rax),%rax
  407380:	48 8b 00             	mov    (%rax),%rax
  407383:	48 83 c0 40          	add    $0x40,%rax
  407387:	48 8b 10             	mov    (%rax),%rdx
  40738a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40738e:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407392:	ff d2                	callq  *%rdx
  407394:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		hash_t hash = 0;
  407398:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40739f:	00 
		for (size_t i = 0; i < len; i++)
  4073a0:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4073a7:	00 
  4073a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4073ac:	48 8b 40 18          	mov    0x18(%rax),%rax
  4073b0:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  4073b4:	0f 92 c0             	setb   %al
  4073b7:	83 f0 01             	xor    $0x1,%eax
  4073ba:	84 c0                	test   %al,%al
  4073bc:	75 36                	jne    4073f4 <_D6object20TypeInfo_StaticArray7getHashMFPvZm+0x95>
			hash += value.getHash(p + i * sz);
  4073be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4073c2:	48 8b 40 10          	mov    0x10(%rax),%rax
  4073c6:	48 8b 00             	mov    (%rax),%rax
  4073c9:	48 83 c0 28          	add    $0x28,%rax
  4073cd:	48 8b 10             	mov    (%rax),%rdx
  4073d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4073d4:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  4073d9:	48 89 c6             	mov    %rax,%rsi
  4073dc:	48 03 75 d0          	add    -0x30(%rbp),%rsi
  4073e0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4073e4:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4073e8:	ff d2                	callq  *%rdx
  4073ea:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  4073ee:	48 ff 45 f8          	incq   -0x8(%rbp)
  4073f2:	eb b4                	jmp    4073a8 <_D6object20TypeInfo_StaticArray7getHashMFPvZm+0x49>
		return hash;
  4073f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  4073f8:	c9                   	leaveq 
  4073f9:	c3                   	retq   

00000000004073fa <_D6object20TypeInfo_StaticArray6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  4073fa:	55                   	push   %rbp
  4073fb:	48 89 e5             	mov    %rsp,%rbp
  4073fe:	48 83 ec 30          	sub    $0x30,%rsp
  407402:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  407406:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40740a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40740e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  407412:	e8 95 1a 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		size_t sz = value.tsize();
  407417:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40741b:	48 8b 40 10          	mov    0x10(%rax),%rax
  40741f:	48 8b 00             	mov    (%rax),%rax
  407422:	48 83 c0 40          	add    $0x40,%rax
  407426:	48 8b 10             	mov    (%rax),%rdx
  407429:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40742d:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407431:	ff d2                	callq  *%rdx
  407433:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		for (size_t u = 0; u < len; u++)
  407437:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40743e:	00 
  40743f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407443:	48 8b 40 18          	mov    0x18(%rax),%rax
  407447:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  40744b:	0f 92 c0             	setb   %al
  40744e:	83 f0 01             	xor    $0x1,%eax
  407451:	84 c0                	test   %al,%al
  407453:	75 57                	jne    4074ac <_D6object20TypeInfo_StaticArray6equalsMFPvPvZi+0xb2>
		{
			if (!value.equals(p1 + u * sz, p2 + u * sz))
  407455:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407459:	48 8b 40 10          	mov    0x10(%rax),%rax
  40745d:	48 8b 00             	mov    (%rax),%rax
  407460:	48 83 c0 30          	add    $0x30,%rax
  407464:	48 8b 08             	mov    (%rax),%rcx
  407467:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40746b:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  407470:	48 89 c2             	mov    %rax,%rdx
  407473:	48 03 55 d8          	add    -0x28(%rbp),%rdx
  407477:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40747b:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  407480:	48 89 c6             	mov    %rax,%rsi
  407483:	48 03 75 e0          	add    -0x20(%rbp),%rsi
  407487:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40748b:	48 8b 78 10          	mov    0x10(%rax),%rdi
  40748f:	ff d1                	callq  *%rcx
  407491:	85 c0                	test   %eax,%eax
  407493:	0f 95 c0             	setne  %al
  407496:	83 f0 01             	xor    $0x1,%eax
  407499:	84 c0                	test   %al,%al
  40749b:	74 09                	je     4074a6 <_D6object20TypeInfo_StaticArray6equalsMFPvPvZi+0xac>
				return 0;
  40749d:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  4074a4:	eb 0d                	jmp    4074b3 <_D6object20TypeInfo_StaticArray6equalsMFPvPvZi+0xb9>
	{
		size_t sz = value.tsize();

		for (size_t u = 0; u < len; u++)
		{
			if (!value.equals(p1 + u * sz, p2 + u * sz))
  4074a6:	48 ff 45 f8          	incq   -0x8(%rbp)
  4074aa:	eb 93                	jmp    40743f <_D6object20TypeInfo_StaticArray6equalsMFPvPvZi+0x45>
				return 0;
		}
		return 1;
  4074ac:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
  4074b3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
	}
  4074b6:	c9                   	leaveq 
  4074b7:	c3                   	retq   

00000000004074b8 <_D6object20TypeInfo_StaticArray7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  4074b8:	55                   	push   %rbp
  4074b9:	48 89 e5             	mov    %rsp,%rbp
  4074bc:	48 83 ec 40          	sub    $0x40,%rsp
  4074c0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4074c4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4074c8:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4074cc:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4074d0:	e8 d7 19 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		size_t sz = value.tsize();
  4074d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4074d9:	48 8b 40 10          	mov    0x10(%rax),%rax
  4074dd:	48 8b 00             	mov    (%rax),%rax
  4074e0:	48 83 c0 40          	add    $0x40,%rax
  4074e4:	48 8b 10             	mov    (%rax),%rdx
  4074e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4074eb:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4074ef:	ff d2                	callq  *%rdx
  4074f1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		for (size_t u = 0; u < len; u++)
  4074f5:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4074fc:	00 
  4074fd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407501:	48 8b 40 18          	mov    0x18(%rax),%rax
  407505:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  407509:	0f 92 c0             	setb   %al
  40750c:	83 f0 01             	xor    $0x1,%eax
  40750f:	84 c0                	test   %al,%al
  407511:	75 53                	jne    407566 <_D6object20TypeInfo_StaticArray7compareMFPvPvZi+0xae>
		{
			int result = value.compare(p1 + u * sz, p2 + u * sz);
  407513:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407517:	48 8b 40 10          	mov    0x10(%rax),%rax
  40751b:	48 8b 00             	mov    (%rax),%rax
  40751e:	48 83 c0 38          	add    $0x38,%rax
  407522:	48 8b 08             	mov    (%rax),%rcx
  407525:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407529:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  40752e:	48 89 c2             	mov    %rax,%rdx
  407531:	48 03 55 c8          	add    -0x38(%rbp),%rdx
  407535:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407539:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  40753e:	48 89 c6             	mov    %rax,%rsi
  407541:	48 03 75 d0          	add    -0x30(%rbp),%rsi
  407545:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407549:	48 8b 78 10          	mov    0x10(%rax),%rdi
  40754d:	ff d1                	callq  *%rcx
  40754f:	89 45 fc             	mov    %eax,-0x4(%rbp)
			if (result)
  407552:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  407556:	74 08                	je     407560 <_D6object20TypeInfo_StaticArray7compareMFPvPvZi+0xa8>
				return result;
  407558:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40755b:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  40755e:	eb 0d                	jmp    40756d <_D6object20TypeInfo_StaticArray7compareMFPvPvZi+0xb5>
		size_t sz = value.tsize();

		for (size_t u = 0; u < len; u++)
		{
			int result = value.compare(p1 + u * sz, p2 + u * sz);
			if (result)
  407560:	48 ff 45 f0          	incq   -0x10(%rbp)
  407564:	eb 97                	jmp    4074fd <_D6object20TypeInfo_StaticArray7compareMFPvPvZi+0x45>
				return result;
		}
		return 0;
  407566:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  40756d:	8b 45 c4             	mov    -0x3c(%rbp),%eax
	}
  407570:	c9                   	leaveq 
  407571:	c3                   	retq   

0000000000407572 <_D6object20TypeInfo_StaticArray5tsizeMFZm>:

	size_t tsize()
  407572:	55                   	push   %rbp
  407573:	48 89 e5             	mov    %rsp,%rbp
  407576:	53                   	push   %rbx
  407577:	48 83 ec 08          	sub    $0x8,%rsp
  40757b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  40757f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  407583:	e8 24 19 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return len * value.tsize();
  407588:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40758c:	48 8b 58 18          	mov    0x18(%rax),%rbx
  407590:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407594:	48 8b 40 10          	mov    0x10(%rax),%rax
  407598:	48 8b 00             	mov    (%rax),%rax
  40759b:	48 83 c0 40          	add    $0x40,%rax
  40759f:	48 8b 10             	mov    (%rax),%rdx
  4075a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4075a6:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4075aa:	ff d2                	callq  *%rdx
  4075ac:	48 0f af c3          	imul   %rbx,%rax
	}
  4075b0:	48 83 c4 08          	add    $0x8,%rsp
  4075b4:	5b                   	pop    %rbx
  4075b5:	c9                   	leaveq 
  4075b6:	c3                   	retq   

00000000004075b7 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv>:

	void swap(void *p1, void *p2)
  4075b7:	55                   	push   %rbp
  4075b8:	48 89 e5             	mov    %rsp,%rbp
  4075bb:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp
  4075c2:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  4075c9:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
  4075d0:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  4075d7:	48 8b bd 28 ff ff ff 	mov    -0xd8(%rbp),%rdi
  4075de:	e8 c9 18 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{	void* tmp;
  4075e3:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  4075ea:	00 
		size_t sz = value.tsize();
  4075eb:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  4075f2:	48 8b 40 10          	mov    0x10(%rax),%rax
  4075f6:	48 8b 00             	mov    (%rax),%rax
  4075f9:	48 83 c0 40          	add    $0x40,%rax
  4075fd:	48 8b 10             	mov    (%rax),%rdx
  407600:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  407607:	48 8b 78 10          	mov    0x10(%rax),%rdi
  40760b:	ff d2                	callq  *%rdx
  40760d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		ubyte[16] buffer;
  407611:	48 c7 85 50 ff ff ff 	movq   $0x10,-0xb0(%rbp)
  407618:	10 00 00 00 
  40761c:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  407623:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  40762a:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  407631:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  407635:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  40763c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  407640:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  407645:	0f 95 c0             	setne  %al
  407648:	83 f0 01             	xor    $0x1,%eax
  40764b:	84 c0                	test   %al,%al
  40764d:	75 11                	jne    407660 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0xa9>
  40764f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407653:	c6 00 00             	movb   $0x0,(%rax)
  407656:	48 ff 45 e0          	incq   -0x20(%rbp)
  40765a:	48 ff 4d e8          	decq   -0x18(%rbp)
  40765e:	eb e0                	jmp    407640 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0x89>
		void* pbuffer;
  407660:	48 c7 85 48 ff ff ff 	movq   $0x0,-0xb8(%rbp)
  407667:	00 00 00 00 

		if (sz < buffer.sizeof)
  40766b:	48 83 7d d0 10       	cmpq   $0x10,-0x30(%rbp)
  407670:	73 0d                	jae    40767f <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0xc8>
			tmp = buffer.ptr;
  407672:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  407679:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40767d:	eb 30                	jmp    4076af <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0xf8>
		else
			tmp = pbuffer = (new void[sz]).ptr;
  40767f:	48 8d bd 60 ff ff ff 	lea    -0xa0(%rbp),%rdi
  407686:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40768a:	48 c7 c6 c0 f7 40 00 	mov    $0x40f7c0,%rsi
  407691:	e8 aa 27 00 00       	callq  409e40 <_d_newarrayT>
  407696:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  40769d:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  4076a4:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  4076ab:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

		for (size_t u = 0; u < len; u += sz)
  4076af:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4076b6:	00 
  4076b7:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  4076be:	48 8b 40 18          	mov    0x18(%rax),%rax
  4076c2:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4076c6:	0f 92 c0             	setb   %al
  4076c9:	83 f0 01             	xor    $0x1,%eax
  4076cc:	84 c0                	test   %al,%al
  4076ce:	0f 85 35 01 00 00    	jne    407809 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0x252>
		{	size_t o = u * sz;
  4076d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4076d8:	48 0f af 45 d0       	imul   -0x30(%rbp),%rax
  4076dd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			tmp[0 .. sz] = (p1 + o)[0 .. sz];
  4076e1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4076e5:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  4076ec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4076f0:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4076f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4076fb:	48 89 c2             	mov    %rax,%rdx
  4076fe:	48 03 95 20 ff ff ff 	add    -0xe0(%rbp),%rdx
  407705:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407709:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  40770d:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  407711:	48 8d bd 00 ff ff ff 	lea    -0x100(%rbp),%rdi
  407718:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40771f:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  407726:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
  40772a:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  40772e:	49 89 c0             	mov    %rax,%r8
  407731:	49 89 d1             	mov    %rdx,%r9
  407734:	48 89 ca             	mov    %rcx,%rdx
  407737:	48 89 f1             	mov    %rsi,%rcx
  40773a:	be 01 00 00 00       	mov    $0x1,%esi
  40773f:	e8 c4 5a 00 00       	callq  40d208 <_d_arraycopy>
			(p1 + o)[0 .. sz] = (p2 + o)[0 .. sz];
  407744:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407748:	48 89 c2             	mov    %rax,%rdx
  40774b:	48 03 95 20 ff ff ff 	add    -0xe0(%rbp),%rdx
  407752:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407756:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  40775a:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  40775e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407762:	48 89 c2             	mov    %rax,%rdx
  407765:	48 03 95 18 ff ff ff 	add    -0xe8(%rbp),%rdx
  40776c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407770:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  407774:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  407778:	48 8d bd f0 fe ff ff 	lea    -0x110(%rbp),%rdi
  40777f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  407783:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  407787:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  40778b:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40778f:	49 89 c0             	mov    %rax,%r8
  407792:	49 89 d1             	mov    %rdx,%r9
  407795:	48 89 ca             	mov    %rcx,%rdx
  407798:	48 89 f1             	mov    %rsi,%rcx
  40779b:	be 01 00 00 00       	mov    $0x1,%esi
  4077a0:	e8 63 5a 00 00       	callq  40d208 <_d_arraycopy>
			(p2 + o)[0 .. sz] = tmp[0 .. sz];
  4077a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4077a9:	48 89 c2             	mov    %rax,%rdx
  4077ac:	48 03 95 18 ff ff ff 	add    -0xe8(%rbp),%rdx
  4077b3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4077b7:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4077bb:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  4077bf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4077c3:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  4077c7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4077cb:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  4077cf:	48 8d bd e0 fe ff ff 	lea    -0x120(%rbp),%rdi
  4077d6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4077da:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  4077de:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  4077e2:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4077e6:	49 89 c0             	mov    %rax,%r8
  4077e9:	49 89 d1             	mov    %rdx,%r9
  4077ec:	48 89 ca             	mov    %rcx,%rdx
  4077ef:	48 89 f1             	mov    %rsi,%rcx
  4077f2:	be 01 00 00 00       	mov    $0x1,%esi
  4077f7:	e8 0c 5a 00 00       	callq  40d208 <_d_arraycopy>
  4077fc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407800:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  407804:	e9 ae fe ff ff       	jmpq   4076b7 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0x100>
		}
		if (pbuffer)
  407809:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  407810:	48 85 c0             	test   %rax,%rax
  407813:	74 0c                	je     407821 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0x26a>
			delete pbuffer;
  407815:	48 8d bd 48 ff ff ff 	lea    -0xb8(%rbp),%rdi
  40781c:	e8 a2 27 00 00       	callq  409fc3 <_d_delmemory>
	}
  407821:	c9                   	leaveq 
  407822:	c3                   	retq   

0000000000407823 <_D6object20TypeInfo_StaticArray4initMFZAv>:

	void[] init() { return value.init(); }
  407823:	55                   	push   %rbp
  407824:	48 89 e5             	mov    %rsp,%rbp
  407827:	53                   	push   %rbx
  407828:	48 83 ec 08          	sub    $0x8,%rsp
  40782c:	48 89 fb             	mov    %rdi,%rbx
  40782f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  407833:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  407837:	e8 70 16 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  40783c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407840:	48 8b 40 10          	mov    0x10(%rax),%rax
  407844:	48 8b 00             	mov    (%rax),%rax
  407847:	48 83 c0 58          	add    $0x58,%rax
  40784b:	48 8b 10             	mov    (%rax),%rdx
  40784e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407852:	48 8b 70 10          	mov    0x10(%rax),%rsi
  407856:	48 89 df             	mov    %rbx,%rdi
  407859:	ff d2                	callq  *%rdx
  40785b:	48 89 d8             	mov    %rbx,%rax
  40785e:	48 83 c4 08          	add    $0x8,%rsp
  407862:	5b                   	pop    %rbx
  407863:	c9                   	leaveq 
  407864:	c3                   	retq   

0000000000407865 <_D6object20TypeInfo_StaticArray4nextMFZC8TypeInfo>:
	TypeInfo next() { return value; }
  407865:	55                   	push   %rbp
  407866:	48 89 e5             	mov    %rsp,%rbp
  407869:	48 83 ec 10          	sub    $0x10,%rsp
  40786d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407871:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  407875:	e8 32 16 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  40787a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40787e:	48 8b 40 10          	mov    0x10(%rax),%rax
  407882:	c9                   	leaveq 
  407883:	c3                   	retq   

0000000000407884 <_D6object20TypeInfo_StaticArray5flagsMFZk>:
	uint flags() { return value.flags(); }
  407884:	55                   	push   %rbp
  407885:	48 89 e5             	mov    %rsp,%rbp
  407888:	48 83 ec 10          	sub    $0x10,%rsp
  40788c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407890:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  407894:	e8 13 16 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  407899:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40789d:	48 8b 40 10          	mov    0x10(%rax),%rax
  4078a1:	48 8b 00             	mov    (%rax),%rax
  4078a4:	48 83 c0 60          	add    $0x60,%rax
  4078a8:	48 8b 10             	mov    (%rax),%rdx
  4078ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4078af:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4078b3:	ff d2                	callq  *%rdx
  4078b5:	c9                   	leaveq 
  4078b6:	c3                   	retq   

00000000004078b7 <_D6object25TypeInfo_AssociativeArray8toStringMFZAa>:
	size_t len;
}

class TypeInfo_AssociativeArray : TypeInfo
{
	char[] toString()
  4078b7:	55                   	push   %rbp
  4078b8:	48 89 e5             	mov    %rsp,%rbp
  4078bb:	41 57                	push   %r15
  4078bd:	41 56                	push   %r14
  4078bf:	41 55                	push   %r13
  4078c1:	41 54                	push   %r12
  4078c3:	53                   	push   %rbx
  4078c4:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
  4078cb:	48 89 fb             	mov    %rdi,%rbx
  4078ce:	48 89 b5 08 ff ff ff 	mov    %rsi,-0xf8(%rbp)
  4078d5:	48 8b bd 08 ff ff ff 	mov    -0xf8(%rbp),%rdi
  4078dc:	e8 cb 15 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return value.toString() ~ "[" ~ key.toString() ~ "]";
  4078e1:	48 c7 85 10 ff ff ff 	movq   $0x1,-0xf0(%rbp)
  4078e8:	01 00 00 00 
  4078ec:	48 c7 85 18 ff ff ff 	movq   $0x411890,-0xe8(%rbp)
  4078f3:	90 18 41 00 
  4078f7:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  4078fe:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  407905:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40790c:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  407913:	4c 8b a5 28 ff ff ff 	mov    -0xd8(%rbp),%r12
  40791a:	4c 8b ad 20 ff ff ff 	mov    -0xe0(%rbp),%r13
  407921:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  407928:	48 8b 40 18          	mov    0x18(%rax),%rax
  40792c:	48 8b 00             	mov    (%rax),%rax
  40792f:	48 83 c0 08          	add    $0x8,%rax
  407933:	48 8b 10             	mov    (%rax),%rdx
  407936:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40793d:	48 8b 70 18          	mov    0x18(%rax),%rsi
  407941:	48 8d bd f0 fe ff ff 	lea    -0x110(%rbp),%rdi
  407948:	ff d2                	callq  *%rdx
  40794a:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  407951:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  407958:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  40795f:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  407966:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  40796d:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  407974:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  40797b:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  407982:	4c 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%r14
  407989:	4c 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%r15
  407990:	48 c7 85 50 ff ff ff 	movq   $0x1,-0xb0(%rbp)
  407997:	01 00 00 00 
  40799b:	48 c7 85 58 ff ff ff 	movq   $0x411892,-0xa8(%rbp)
  4079a2:	92 18 41 00 
  4079a6:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  4079ad:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  4079b4:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  4079bb:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  4079c2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  4079c9:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
  4079d0:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  4079d7:	48 89 95 b8 fe ff ff 	mov    %rdx,-0x148(%rbp)
  4079de:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  4079e5:	48 8b 40 10          	mov    0x10(%rax),%rax
  4079e9:	48 8b 00             	mov    (%rax),%rax
  4079ec:	48 83 c0 08          	add    $0x8,%rax
  4079f0:	48 8b 10             	mov    (%rax),%rdx
  4079f3:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  4079fa:	48 8b 70 10          	mov    0x10(%rax),%rsi
  4079fe:	48 8d bd e0 fe ff ff 	lea    -0x120(%rbp),%rdi
  407a05:	ff d2                	callq  *%rdx
  407a07:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  407a0e:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  407a15:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  407a1c:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  407a23:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  407a2a:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  407a2e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  407a35:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  407a39:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  407a3d:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
  407a41:	48 8d bd d0 fe ff ff 	lea    -0x130(%rbp),%rdi
  407a48:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
  407a4f:	48 89 14 24          	mov    %rdx,(%rsp)
  407a53:	4c 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%r9
  407a5a:	49 89 c0             	mov    %rax,%r8
  407a5d:	ba 02 00 00 00       	mov    $0x2,%edx
  407a62:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  407a69:	b8 00 00 00 00       	mov    $0x0,%eax
  407a6e:	e8 e8 27 00 00       	callq  40a25b <_d_arraycatnT>
  407a73:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  407a7a:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  407a7e:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  407a85:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  407a89:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  407a8d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  407a91:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  407a95:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  407a99:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  407a9d:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  407aa1:	48 8d bd c0 fe ff ff 	lea    -0x140(%rbp),%rdi
  407aa8:	4c 89 34 24          	mov    %r14,(%rsp)
  407aac:	4d 89 f9             	mov    %r15,%r9
  407aaf:	49 89 c0             	mov    %rax,%r8
  407ab2:	ba 02 00 00 00       	mov    $0x2,%edx
  407ab7:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  407abe:	b8 00 00 00 00       	mov    $0x0,%eax
  407ac3:	e8 93 27 00 00       	callq  40a25b <_d_arraycatnT>
  407ac8:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
  407acf:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  407ad3:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  407ada:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  407ade:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  407ae2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  407ae6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407aea:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  407aee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407af2:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  407af6:	4c 89 24 24          	mov    %r12,(%rsp)
  407afa:	4d 89 e9             	mov    %r13,%r9
  407afd:	49 89 c0             	mov    %rax,%r8
  407b00:	ba 02 00 00 00       	mov    $0x2,%edx
  407b05:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  407b0c:	48 89 df             	mov    %rbx,%rdi
  407b0f:	b8 00 00 00 00       	mov    $0x0,%eax
  407b14:	e8 42 27 00 00       	callq  40a25b <_d_arraycatnT>
	}
  407b19:	48 89 d8             	mov    %rbx,%rax
  407b1c:	48 81 c4 38 01 00 00 	add    $0x138,%rsp
  407b23:	5b                   	pop    %rbx
  407b24:	41 5c                	pop    %r12
  407b26:	41 5d                	pop    %r13
  407b28:	41 5e                	pop    %r14
  407b2a:	41 5f                	pop    %r15
  407b2c:	c9                   	leaveq 
  407b2d:	c3                   	retq   

0000000000407b2e <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  407b2e:	55                   	push   %rbp
  407b2f:	48 89 e5             	mov    %rsp,%rbp
  407b32:	48 83 ec 30          	sub    $0x30,%rsp
  407b36:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  407b3a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  407b3e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  407b42:	e8 65 13 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_AssociativeArray c;
  407b47:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  407b4e:	00 

		return this is o ||
  407b4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407b53:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  407b57:	74 71                	je     407bca <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi+0x9c>
  407b59:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  407b5d:	48 c7 c6 c0 bb 41 00 	mov    $0x41bbc0,%rsi
  407b64:	e8 86 15 00 00       	callq  4090ef <_d_dynamic_cast>
  407b69:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  407b6d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  407b72:	74 5c                	je     407bd0 <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi+0xa2>
  407b74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407b78:	48 8b 40 18          	mov    0x18(%rax),%rax
  407b7c:	48 8b 00             	mov    (%rax),%rax
  407b7f:	48 83 c0 20          	add    $0x20,%rax
  407b83:	48 8b 10             	mov    (%rax),%rdx
  407b86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407b8a:	48 8b 40 18          	mov    0x18(%rax),%rax
  407b8e:	48 89 c6             	mov    %rax,%rsi
  407b91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407b95:	48 8b 78 18          	mov    0x18(%rax),%rdi
  407b99:	ff d2                	callq  *%rdx
  407b9b:	85 c0                	test   %eax,%eax
  407b9d:	74 31                	je     407bd0 <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi+0xa2>
  407b9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407ba3:	48 8b 40 10          	mov    0x10(%rax),%rax
  407ba7:	48 8b 00             	mov    (%rax),%rax
  407baa:	48 83 c0 20          	add    $0x20,%rax
  407bae:	48 8b 10             	mov    (%rax),%rdx
  407bb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407bb5:	48 8b 40 10          	mov    0x10(%rax),%rax
  407bb9:	48 89 c6             	mov    %rax,%rsi
  407bbc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407bc0:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407bc4:	ff d2                	callq  *%rdx
  407bc6:	85 c0                	test   %eax,%eax
  407bc8:	74 06                	je     407bd0 <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi+0xa2>
  407bca:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  407bce:	eb 04                	jmp    407bd4 <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi+0xa6>
  407bd0:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  407bd4:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_AssociativeArray)o) !is null &&
				 this.key == c.key &&
				 this.value == c.value);
	}
  407bd8:	c9                   	leaveq 
  407bd9:	c3                   	retq   

0000000000407bda <_D6object25TypeInfo_AssociativeArray5tsizeMFZm>:

	// BUG: need to add the rest of the functions

	size_t tsize()
  407bda:	55                   	push   %rbp
  407bdb:	48 89 e5             	mov    %rsp,%rbp
  407bde:	48 83 ec 10          	sub    $0x10,%rsp
  407be2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407be6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  407bea:	e8 bd 12 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return (char[int]).sizeof;
  407bef:	b8 08 00 00 00       	mov    $0x8,%eax
	}
  407bf4:	c9                   	leaveq 
  407bf5:	c3                   	retq   

0000000000407bf6 <_D6object25TypeInfo_AssociativeArray4nextMFZC8TypeInfo>:

	TypeInfo next() { return value; }
  407bf6:	55                   	push   %rbp
  407bf7:	48 89 e5             	mov    %rsp,%rbp
  407bfa:	48 83 ec 10          	sub    $0x10,%rsp
  407bfe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407c02:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  407c06:	e8 a1 12 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  407c0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407c0f:	48 8b 40 10          	mov    0x10(%rax),%rax
  407c13:	c9                   	leaveq 
  407c14:	c3                   	retq   

0000000000407c15 <_D6object25TypeInfo_AssociativeArray5flagsMFZk>:
	uint flags() { return 1; }
  407c15:	55                   	push   %rbp
  407c16:	48 89 e5             	mov    %rsp,%rbp
  407c19:	48 83 ec 10          	sub    $0x10,%rsp
  407c1d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407c21:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  407c25:	e8 82 12 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  407c2a:	b8 01 00 00 00       	mov    $0x1,%eax
  407c2f:	c9                   	leaveq 
  407c30:	c3                   	retq   

0000000000407c31 <_D6object17TypeInfo_Function8toStringMFZAa>:
	TypeInfo key;
}

class TypeInfo_Function : TypeInfo
{
	char[] toString()
  407c31:	55                   	push   %rbp
  407c32:	48 89 e5             	mov    %rsp,%rbp
  407c35:	41 55                	push   %r13
  407c37:	41 54                	push   %r12
  407c39:	53                   	push   %rbx
  407c3a:	48 83 ec 78          	sub    $0x78,%rsp
  407c3e:	48 89 fb             	mov    %rdi,%rbx
  407c41:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
  407c45:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  407c49:	e8 5e 12 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return next.toString() ~ "()";
  407c4e:	48 c7 45 a0 02 00 00 	movq   $0x2,-0x60(%rbp)
  407c55:	00 
  407c56:	48 c7 45 a8 10 1a 41 	movq   $0x411a10,-0x58(%rbp)
  407c5d:	00 
  407c5e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  407c62:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  407c66:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  407c6a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  407c6e:	4c 8b 65 b8          	mov    -0x48(%rbp),%r12
  407c72:	4c 8b 6d b0          	mov    -0x50(%rbp),%r13
  407c76:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  407c7a:	48 8b 40 10          	mov    0x10(%rax),%rax
  407c7e:	48 8b 00             	mov    (%rax),%rax
  407c81:	48 83 c0 08          	add    $0x8,%rax
  407c85:	48 8b 10             	mov    (%rax),%rdx
  407c88:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  407c8c:	48 8b 70 10          	mov    0x10(%rax),%rsi
  407c90:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  407c94:	ff d2                	callq  *%rdx
  407c96:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  407c9a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  407c9e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  407ca2:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  407ca6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  407caa:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  407cae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407cb2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  407cb6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407cba:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  407cbe:	4c 89 24 24          	mov    %r12,(%rsp)
  407cc2:	4d 89 e9             	mov    %r13,%r9
  407cc5:	49 89 c0             	mov    %rax,%r8
  407cc8:	ba 02 00 00 00       	mov    $0x2,%edx
  407ccd:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  407cd4:	48 89 df             	mov    %rbx,%rdi
  407cd7:	b8 00 00 00 00       	mov    $0x0,%eax
  407cdc:	e8 7a 25 00 00       	callq  40a25b <_d_arraycatnT>
	}
  407ce1:	48 89 d8             	mov    %rbx,%rax
  407ce4:	48 83 c4 78          	add    $0x78,%rsp
  407ce8:	5b                   	pop    %rbx
  407ce9:	41 5c                	pop    %r12
  407ceb:	41 5d                	pop    %r13
  407ced:	c9                   	leaveq 
  407cee:	c3                   	retq   

0000000000407cef <_D6object17TypeInfo_Function8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  407cef:	55                   	push   %rbp
  407cf0:	48 89 e5             	mov    %rsp,%rbp
  407cf3:	48 83 ec 30          	sub    $0x30,%rsp
  407cf7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  407cfb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  407cff:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  407d03:	e8 a4 11 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Function c;
  407d08:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  407d0f:	00 

		return this is o ||
  407d10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407d14:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  407d18:	74 46                	je     407d60 <_D6object17TypeInfo_Function8opEqualsMFC6ObjectZi+0x71>
  407d1a:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  407d1e:	48 c7 c6 60 bc 41 00 	mov    $0x41bc60,%rsi
  407d25:	e8 c5 13 00 00       	callq  4090ef <_d_dynamic_cast>
  407d2a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  407d2e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  407d33:	74 31                	je     407d66 <_D6object17TypeInfo_Function8opEqualsMFC6ObjectZi+0x77>
  407d35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407d39:	48 8b 40 10          	mov    0x10(%rax),%rax
  407d3d:	48 8b 00             	mov    (%rax),%rax
  407d40:	48 83 c0 20          	add    $0x20,%rax
  407d44:	48 8b 10             	mov    (%rax),%rdx
  407d47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407d4b:	48 8b 40 10          	mov    0x10(%rax),%rax
  407d4f:	48 89 c6             	mov    %rax,%rsi
  407d52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407d56:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407d5a:	ff d2                	callq  *%rdx
  407d5c:	85 c0                	test   %eax,%eax
  407d5e:	74 06                	je     407d66 <_D6object17TypeInfo_Function8opEqualsMFC6ObjectZi+0x77>
  407d60:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  407d64:	eb 04                	jmp    407d6a <_D6object17TypeInfo_Function8opEqualsMFC6ObjectZi+0x7b>
  407d66:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  407d6a:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_Function)o) !is null &&
				 this.next == c.next);
	}
  407d6e:	c9                   	leaveq 
  407d6f:	c3                   	retq   

0000000000407d70 <_D6object17TypeInfo_Function5tsizeMFZm>:

	// BUG: need to add the rest of the functions

	size_t tsize()
  407d70:	55                   	push   %rbp
  407d71:	48 89 e5             	mov    %rsp,%rbp
  407d74:	48 83 ec 10          	sub    $0x10,%rsp
  407d78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407d7c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  407d80:	e8 27 11 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return 0;		// no size for functions
  407d85:	b8 00 00 00 00       	mov    $0x0,%eax
	}
  407d8a:	c9                   	leaveq 
  407d8b:	c3                   	retq   

0000000000407d8c <_D6object17TypeInfo_Delegate8toStringMFZAa>:
	TypeInfo next;
}

class TypeInfo_Delegate : TypeInfo
{
	char[] toString()
  407d8c:	55                   	push   %rbp
  407d8d:	48 89 e5             	mov    %rsp,%rbp
  407d90:	41 55                	push   %r13
  407d92:	41 54                	push   %r12
  407d94:	53                   	push   %rbx
  407d95:	48 83 ec 78          	sub    $0x78,%rsp
  407d99:	48 89 fb             	mov    %rdi,%rbx
  407d9c:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
  407da0:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  407da4:	e8 03 11 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return next.toString() ~ " delegate()";
  407da9:	48 c7 45 a0 0b 00 00 	movq   $0xb,-0x60(%rbp)
  407db0:	00 
  407db1:	48 c7 45 a8 d0 1a 41 	movq   $0x411ad0,-0x58(%rbp)
  407db8:	00 
  407db9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  407dbd:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  407dc1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  407dc5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  407dc9:	4c 8b 65 b8          	mov    -0x48(%rbp),%r12
  407dcd:	4c 8b 6d b0          	mov    -0x50(%rbp),%r13
  407dd1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  407dd5:	48 8b 40 10          	mov    0x10(%rax),%rax
  407dd9:	48 8b 00             	mov    (%rax),%rax
  407ddc:	48 83 c0 08          	add    $0x8,%rax
  407de0:	48 8b 10             	mov    (%rax),%rdx
  407de3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  407de7:	48 8b 70 10          	mov    0x10(%rax),%rsi
  407deb:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  407def:	ff d2                	callq  *%rdx
  407df1:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  407df5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  407df9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  407dfd:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  407e01:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  407e05:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  407e09:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407e0d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  407e11:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407e15:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  407e19:	4c 89 24 24          	mov    %r12,(%rsp)
  407e1d:	4d 89 e9             	mov    %r13,%r9
  407e20:	49 89 c0             	mov    %rax,%r8
  407e23:	ba 02 00 00 00       	mov    $0x2,%edx
  407e28:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  407e2f:	48 89 df             	mov    %rbx,%rdi
  407e32:	b8 00 00 00 00       	mov    $0x0,%eax
  407e37:	e8 1f 24 00 00       	callq  40a25b <_d_arraycatnT>
	}
  407e3c:	48 89 d8             	mov    %rbx,%rax
  407e3f:	48 83 c4 78          	add    $0x78,%rsp
  407e43:	5b                   	pop    %rbx
  407e44:	41 5c                	pop    %r12
  407e46:	41 5d                	pop    %r13
  407e48:	c9                   	leaveq 
  407e49:	c3                   	retq   

0000000000407e4a <_D6object17TypeInfo_Delegate8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  407e4a:	55                   	push   %rbp
  407e4b:	48 89 e5             	mov    %rsp,%rbp
  407e4e:	48 83 ec 30          	sub    $0x30,%rsp
  407e52:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  407e56:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  407e5a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  407e5e:	e8 49 10 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Delegate c;
  407e63:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  407e6a:	00 

		return this is o ||
  407e6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407e6f:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  407e73:	74 46                	je     407ebb <_D6object17TypeInfo_Delegate8opEqualsMFC6ObjectZi+0x71>
  407e75:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  407e79:	48 c7 c6 00 bd 41 00 	mov    $0x41bd00,%rsi
  407e80:	e8 6a 12 00 00       	callq  4090ef <_d_dynamic_cast>
  407e85:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  407e89:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  407e8e:	74 31                	je     407ec1 <_D6object17TypeInfo_Delegate8opEqualsMFC6ObjectZi+0x77>
  407e90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407e94:	48 8b 40 10          	mov    0x10(%rax),%rax
  407e98:	48 8b 00             	mov    (%rax),%rax
  407e9b:	48 83 c0 20          	add    $0x20,%rax
  407e9f:	48 8b 10             	mov    (%rax),%rdx
  407ea2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407ea6:	48 8b 40 10          	mov    0x10(%rax),%rax
  407eaa:	48 89 c6             	mov    %rax,%rsi
  407ead:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407eb1:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407eb5:	ff d2                	callq  *%rdx
  407eb7:	85 c0                	test   %eax,%eax
  407eb9:	74 06                	je     407ec1 <_D6object17TypeInfo_Delegate8opEqualsMFC6ObjectZi+0x77>
  407ebb:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  407ebf:	eb 04                	jmp    407ec5 <_D6object17TypeInfo_Delegate8opEqualsMFC6ObjectZi+0x7b>
  407ec1:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  407ec5:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_Delegate)o) !is null &&
				 this.next == c.next);
	}
  407ec9:	c9                   	leaveq 
  407eca:	c3                   	retq   

0000000000407ecb <_D6object17TypeInfo_Delegate5tsizeMFZm>:

	// BUG: need to add the rest of the functions

	size_t tsize()
  407ecb:	55                   	push   %rbp
  407ecc:	48 89 e5             	mov    %rsp,%rbp
  407ecf:	48 83 ec 10          	sub    $0x10,%rsp
  407ed3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407ed7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  407edb:	e8 cc 0f 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{	alias int delegate() dg;
		return dg.sizeof;
  407ee0:	b8 10 00 00 00       	mov    $0x10,%eax
	}
  407ee5:	c9                   	leaveq 
  407ee6:	c3                   	retq   

0000000000407ee7 <_D6object17TypeInfo_Delegate5flagsMFZk>:

	uint flags() { return 1; }
  407ee7:	55                   	push   %rbp
  407ee8:	48 89 e5             	mov    %rsp,%rbp
  407eeb:	48 83 ec 10          	sub    $0x10,%rsp
  407eef:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407ef3:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  407ef7:	e8 b0 0f 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  407efc:	b8 01 00 00 00       	mov    $0x1,%eax
  407f01:	c9                   	leaveq 
  407f02:	c3                   	retq   

0000000000407f03 <_D6object14TypeInfo_Class8toStringMFZAa>:
	TypeInfo next;
}

class TypeInfo_Class : TypeInfo
{
	char[] toString() { return info.name; }
  407f03:	55                   	push   %rbp
  407f04:	48 89 e5             	mov    %rsp,%rbp
  407f07:	53                   	push   %rbx
  407f08:	48 83 ec 08          	sub    $0x8,%rsp
  407f0c:	48 89 fb             	mov    %rdi,%rbx
  407f0f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  407f13:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  407f17:	e8 90 0f 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  407f1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407f20:	48 8b 50 10          	mov    0x10(%rax),%rdx
  407f24:	48 8b 42 20          	mov    0x20(%rdx),%rax
  407f28:	48 89 03             	mov    %rax,(%rbx)
  407f2b:	48 8b 42 28          	mov    0x28(%rdx),%rax
  407f2f:	48 89 43 08          	mov    %rax,0x8(%rbx)
  407f33:	48 89 d8             	mov    %rbx,%rax
  407f36:	48 83 c4 08          	add    $0x8,%rsp
  407f3a:	5b                   	pop    %rbx
  407f3b:	c9                   	leaveq 
  407f3c:	c3                   	retq   

0000000000407f3d <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  407f3d:	55                   	push   %rbp
  407f3e:	48 89 e5             	mov    %rsp,%rbp
  407f41:	48 83 ec 40          	sub    $0x40,%rsp
  407f45:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  407f49:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  407f4d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  407f51:	e8 56 0f 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Class c;
  407f56:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  407f5d:	00 

		return this is o ||
  407f5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407f62:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  407f66:	0f 84 9a 00 00 00    	je     408006 <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi+0xc9>
  407f6c:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  407f70:	48 c7 c6 a0 bd 41 00 	mov    $0x41bda0,%rsi
  407f77:	e8 73 11 00 00       	callq  4090ef <_d_dynamic_cast>
  407f7c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  407f80:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  407f85:	0f 84 81 00 00 00    	je     40800c <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi+0xcf>
  407f8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407f8f:	48 8b 40 10          	mov    0x10(%rax),%rax
  407f93:	48 8b 50 20          	mov    0x20(%rax),%rdx
  407f97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407f9b:	48 8b 00             	mov    (%rax),%rax
  407f9e:	48 8b 00             	mov    (%rax),%rax
  407fa1:	48 8b 40 20          	mov    0x20(%rax),%rax
  407fa5:	48 39 c2             	cmp    %rax,%rdx
  407fa8:	75 62                	jne    40800c <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi+0xcf>
  407faa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407fae:	48 8b 40 10          	mov    0x10(%rax),%rax
  407fb2:	48 8b 48 20          	mov    0x20(%rax),%rcx
  407fb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407fba:	48 8b 00             	mov    (%rax),%rax
  407fbd:	48 8b 00             	mov    (%rax),%rax
  407fc0:	48 8b 50 28          	mov    0x28(%rax),%rdx
  407fc4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407fc8:	48 8b 40 10          	mov    0x10(%rax),%rax
  407fcc:	48 8b 40 28          	mov    0x28(%rax),%rax
  407fd0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  407fd4:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  407fd8:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  407fdc:	fc                   	cld    
  407fdd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  407fe1:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  407fe5:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  407fe9:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  407fed:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  407ff1:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  407ff3:	0f 97 c2             	seta   %dl
  407ff6:	0f 92 c0             	setb   %al
  407ff9:	89 d1                	mov    %edx,%ecx
  407ffb:	28 c1                	sub    %al,%cl
  407ffd:	89 c8                	mov    %ecx,%eax
  407fff:	0f be c0             	movsbl %al,%eax
  408002:	85 c0                	test   %eax,%eax
  408004:	75 06                	jne    40800c <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi+0xcf>
  408006:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  40800a:	eb 04                	jmp    408010 <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi+0xd3>
  40800c:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  408010:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_Class)o) !is null &&
				 this.info.name == c.classinfo.name);
	}
  408014:	c9                   	leaveq 
  408015:	c3                   	retq   

0000000000408016 <_D6object14TypeInfo_Class7getHashMFPvZm>:

	hash_t getHash(void *p)
  408016:	55                   	push   %rbp
  408017:	48 89 e5             	mov    %rsp,%rbp
  40801a:	48 83 ec 20          	sub    $0x20,%rsp
  40801e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408022:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408026:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40802a:	e8 7d 0e 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Object o = *cast(Object*)p;
  40802f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408033:	48 8b 00             	mov    (%rax),%rax
  408036:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		assert(o);
  40803a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40803e:	e8 69 0e 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
		return o.toHash();
  408043:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408047:	48 8b 00             	mov    (%rax),%rax
  40804a:	48 83 c0 10          	add    $0x10,%rax
  40804e:	48 8b 00             	mov    (%rax),%rax
  408051:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  408055:	ff d0                	callq  *%rax
	}
  408057:	c9                   	leaveq 
  408058:	c3                   	retq   

0000000000408059 <_D6object14TypeInfo_Class6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  408059:	55                   	push   %rbp
  40805a:	48 89 e5             	mov    %rsp,%rbp
  40805d:	48 83 ec 30          	sub    $0x30,%rsp
  408061:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408065:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408069:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40806d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408071:	e8 36 0e 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Object o1 = *cast(Object*)p1;
  408076:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40807a:	48 8b 00             	mov    (%rax),%rax
  40807d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = *cast(Object*)p2;
  408081:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408085:	48 8b 00             	mov    (%rax),%rax
  408088:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		return (o1 is o2) || (o1 && o1.opEquals(o2));
  40808c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408090:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  408094:	74 23                	je     4080b9 <_D6object14TypeInfo_Class6equalsMFPvPvZi+0x60>
  408096:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40809b:	74 22                	je     4080bf <_D6object14TypeInfo_Class6equalsMFPvPvZi+0x66>
  40809d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4080a1:	48 8b 00             	mov    (%rax),%rax
  4080a4:	48 83 c0 20          	add    $0x20,%rax
  4080a8:	48 8b 00             	mov    (%rax),%rax
  4080ab:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  4080af:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4080b3:	ff d0                	callq  *%rax
  4080b5:	85 c0                	test   %eax,%eax
  4080b7:	74 06                	je     4080bf <_D6object14TypeInfo_Class6equalsMFPvPvZi+0x66>
  4080b9:	c6 45 d7 01          	movb   $0x1,-0x29(%rbp)
  4080bd:	eb 04                	jmp    4080c3 <_D6object14TypeInfo_Class6equalsMFPvPvZi+0x6a>
  4080bf:	c6 45 d7 00          	movb   $0x0,-0x29(%rbp)
  4080c3:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
	}
  4080c7:	c9                   	leaveq 
  4080c8:	c3                   	retq   

00000000004080c9 <_D6object14TypeInfo_Class7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  4080c9:	55                   	push   %rbp
  4080ca:	48 89 e5             	mov    %rsp,%rbp
  4080cd:	48 83 ec 40          	sub    $0x40,%rsp
  4080d1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4080d5:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4080d9:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4080dd:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4080e1:	e8 c6 0d 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Object o1 = *cast(Object*)p1;
  4080e6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4080ea:	48 8b 00             	mov    (%rax),%rax
  4080ed:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = *cast(Object*)p2;
  4080f1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4080f5:	48 8b 00             	mov    (%rax),%rax
  4080f8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		int c = 0;
  4080fc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)

		// Regard null references as always being "less than"
		if (o1 !is o2)
  408103:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408107:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  40810b:	74 43                	je     408150 <_D6object14TypeInfo_Class7compareMFPvPvZi+0x87>
		{
			if (o1)
  40810d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  408112:	74 35                	je     408149 <_D6object14TypeInfo_Class7compareMFPvPvZi+0x80>
			{	if (!o2)
  408114:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  408119:	0f 95 c0             	setne  %al
  40811c:	83 f0 01             	xor    $0x1,%eax
  40811f:	84 c0                	test   %al,%al
  408121:	74 09                	je     40812c <_D6object14TypeInfo_Class7compareMFPvPvZi+0x63>
					c = 1;
  408123:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  40812a:	eb 24                	jmp    408150 <_D6object14TypeInfo_Class7compareMFPvPvZi+0x87>
				else
					c = o1.opCmp(o2);
  40812c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408130:	48 8b 00             	mov    (%rax),%rax
  408133:	48 83 c0 18          	add    $0x18,%rax
  408137:	48 8b 00             	mov    (%rax),%rax
  40813a:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  40813e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  408142:	ff d0                	callq  *%rax
  408144:	89 45 ec             	mov    %eax,-0x14(%rbp)
  408147:	eb 07                	jmp    408150 <_D6object14TypeInfo_Class7compareMFPvPvZi+0x87>
			}
			else
				c = -1;
  408149:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rbp)
		}
		return c;
  408150:	8b 45 ec             	mov    -0x14(%rbp),%eax
	}
  408153:	c9                   	leaveq 
  408154:	c3                   	retq   

0000000000408155 <_D6object14TypeInfo_Class5tsizeMFZm>:

	size_t tsize()
  408155:	55                   	push   %rbp
  408156:	48 89 e5             	mov    %rsp,%rbp
  408159:	48 83 ec 10          	sub    $0x10,%rsp
  40815d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408161:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  408165:	e8 42 0d 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return Object.sizeof;
  40816a:	b8 08 00 00 00       	mov    $0x8,%eax
	}
  40816f:	c9                   	leaveq 
  408170:	c3                   	retq   

0000000000408171 <_D6object14TypeInfo_Class5flagsMFZk>:

	uint flags() { return 1; }
  408171:	55                   	push   %rbp
  408172:	48 89 e5             	mov    %rsp,%rbp
  408175:	48 83 ec 10          	sub    $0x10,%rsp
  408179:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40817d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  408181:	e8 26 0d 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  408186:	b8 01 00 00 00       	mov    $0x1,%eax
  40818b:	c9                   	leaveq 
  40818c:	c3                   	retq   

000000000040818d <_D6object14TypeInfo_Class5offTiMFZAS6object14OffsetTypeInfo>:

	OffsetTypeInfo[] offTi()
  40818d:	55                   	push   %rbp
  40818e:	48 89 e5             	mov    %rsp,%rbp
  408191:	48 83 ec 10          	sub    $0x10,%rsp
  408195:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  408199:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
  40819d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4081a1:	e8 06 0d 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return (info.flags & 4) ? info.offTi : null;
  4081a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4081aa:	48 8b 40 10          	mov    0x10(%rax),%rax
  4081ae:	8b 40 68             	mov    0x68(%rax),%eax
  4081b1:	83 e0 04             	and    $0x4,%eax
  4081b4:	85 c0                	test   %eax,%eax
  4081b6:	74 24                	je     4081dc <_D6object14TypeInfo_Class5offTiMFZAS6object14OffsetTypeInfo+0x4f>
  4081b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4081bc:	48 8b 50 10          	mov    0x10(%rax),%rdx
  4081c0:	48 8b 42 78          	mov    0x78(%rdx),%rax
  4081c4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4081c8:	48 89 01             	mov    %rax,(%rcx)
  4081cb:	48 8b 82 80 00 00 00 	mov    0x80(%rdx),%rax
  4081d2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4081d6:	48 89 42 08          	mov    %rax,0x8(%rdx)
  4081da:	eb 17                	jmp    4081f3 <_D6object14TypeInfo_Class5offTiMFZAS6object14OffsetTypeInfo+0x66>
  4081dc:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4081e0:	48 c7 01 00 00 00 00 	movq   $0x0,(%rcx)
  4081e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4081eb:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  4081f2:	00 
	}
  4081f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4081f7:	c9                   	leaveq 
  4081f8:	c3                   	retq   

00000000004081f9 <_D6object18TypeInfo_Interface8toStringMFZAa>:
	ClassInfo info;
}

class TypeInfo_Interface : TypeInfo
{
	char[] toString() { return info.name; }
  4081f9:	55                   	push   %rbp
  4081fa:	48 89 e5             	mov    %rsp,%rbp
  4081fd:	53                   	push   %rbx
  4081fe:	48 83 ec 08          	sub    $0x8,%rsp
  408202:	48 89 fb             	mov    %rdi,%rbx
  408205:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408209:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40820d:	e8 9a 0c 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  408212:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408216:	48 8b 50 10          	mov    0x10(%rax),%rdx
  40821a:	48 8b 42 20          	mov    0x20(%rdx),%rax
  40821e:	48 89 03             	mov    %rax,(%rbx)
  408221:	48 8b 42 28          	mov    0x28(%rdx),%rax
  408225:	48 89 43 08          	mov    %rax,0x8(%rbx)
  408229:	48 89 d8             	mov    %rbx,%rax
  40822c:	48 83 c4 08          	add    $0x8,%rsp
  408230:	5b                   	pop    %rbx
  408231:	c9                   	leaveq 
  408232:	c3                   	retq   

0000000000408233 <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  408233:	55                   	push   %rbp
  408234:	48 89 e5             	mov    %rsp,%rbp
  408237:	48 83 ec 40          	sub    $0x40,%rsp
  40823b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40823f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408243:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408247:	e8 60 0c 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Interface c;
  40824c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  408253:	00 

		return this is o ||
  408254:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408258:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40825c:	0f 84 9a 00 00 00    	je     4082fc <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi+0xc9>
  408262:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  408266:	48 c7 c6 40 be 41 00 	mov    $0x41be40,%rsi
  40826d:	e8 7d 0e 00 00       	callq  4090ef <_d_dynamic_cast>
  408272:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  408276:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40827b:	0f 84 81 00 00 00    	je     408302 <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi+0xcf>
  408281:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408285:	48 8b 40 10          	mov    0x10(%rax),%rax
  408289:	48 8b 50 20          	mov    0x20(%rax),%rdx
  40828d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408291:	48 8b 00             	mov    (%rax),%rax
  408294:	48 8b 00             	mov    (%rax),%rax
  408297:	48 8b 40 20          	mov    0x20(%rax),%rax
  40829b:	48 39 c2             	cmp    %rax,%rdx
  40829e:	75 62                	jne    408302 <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi+0xcf>
  4082a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4082a4:	48 8b 40 10          	mov    0x10(%rax),%rax
  4082a8:	48 8b 48 20          	mov    0x20(%rax),%rcx
  4082ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4082b0:	48 8b 00             	mov    (%rax),%rax
  4082b3:	48 8b 00             	mov    (%rax),%rax
  4082b6:	48 8b 50 28          	mov    0x28(%rax),%rdx
  4082ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4082be:	48 8b 40 10          	mov    0x10(%rax),%rax
  4082c2:	48 8b 40 28          	mov    0x28(%rax),%rax
  4082c6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4082ca:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4082ce:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  4082d2:	fc                   	cld    
  4082d3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4082d7:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  4082db:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  4082df:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4082e3:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  4082e7:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  4082e9:	0f 97 c2             	seta   %dl
  4082ec:	0f 92 c0             	setb   %al
  4082ef:	89 d1                	mov    %edx,%ecx
  4082f1:	28 c1                	sub    %al,%cl
  4082f3:	89 c8                	mov    %ecx,%eax
  4082f5:	0f be c0             	movsbl %al,%eax
  4082f8:	85 c0                	test   %eax,%eax
  4082fa:	75 06                	jne    408302 <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi+0xcf>
  4082fc:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  408300:	eb 04                	jmp    408306 <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi+0xd3>
  408302:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  408306:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_Interface)o) !is null &&
				 this.info.name == c.classinfo.name);
	}
  40830a:	c9                   	leaveq 
  40830b:	c3                   	retq   

000000000040830c <_D6object18TypeInfo_Interface7getHashMFPvZm>:

	hash_t getHash(void *p)
  40830c:	55                   	push   %rbp
  40830d:	48 89 e5             	mov    %rsp,%rbp
  408310:	48 83 ec 20          	sub    $0x20,%rsp
  408314:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408318:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40831c:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408320:	e8 87 0b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Interface* pi = **cast(Interface ***)*cast(void**)p;
  408325:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408329:	48 8b 00             	mov    (%rax),%rax
  40832c:	48 8b 00             	mov    (%rax),%rax
  40832f:	48 8b 00             	mov    (%rax),%rax
  408332:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o = cast(Object)(*cast(void**)p - pi.offset);
  408336:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40833a:	48 8b 10             	mov    (%rax),%rdx
  40833d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408341:	48 83 c0 18          	add    $0x18,%rax
  408345:	8b 00                	mov    (%rax),%eax
  408347:	48 98                	cltq   
  408349:	48 89 d1             	mov    %rdx,%rcx
  40834c:	48 29 c1             	sub    %rax,%rcx
  40834f:	48 89 c8             	mov    %rcx,%rax
  408352:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		assert(o);
  408356:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40835a:	e8 4d 0b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
		return o.toHash();
  40835f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408363:	48 8b 00             	mov    (%rax),%rax
  408366:	48 83 c0 10          	add    $0x10,%rax
  40836a:	48 8b 00             	mov    (%rax),%rax
  40836d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408371:	ff d0                	callq  *%rax
	}
  408373:	c9                   	leaveq 
  408374:	c3                   	retq   

0000000000408375 <_D6object18TypeInfo_Interface6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  408375:	55                   	push   %rbp
  408376:	48 89 e5             	mov    %rsp,%rbp
  408379:	48 83 ec 40          	sub    $0x40,%rsp
  40837d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408381:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408385:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  408389:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  40838d:	e8 1a 0b 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Interface* pi = **cast(Interface ***)*cast(void**)p1;
  408392:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408396:	48 8b 00             	mov    (%rax),%rax
  408399:	48 8b 00             	mov    (%rax),%rax
  40839c:	48 8b 00             	mov    (%rax),%rax
  40839f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o1 = cast(Object)(*cast(void**)p1 - pi.offset);
  4083a3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4083a7:	48 8b 10             	mov    (%rax),%rdx
  4083aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4083ae:	48 83 c0 18          	add    $0x18,%rax
  4083b2:	8b 00                	mov    (%rax),%eax
  4083b4:	48 98                	cltq   
  4083b6:	48 89 d1             	mov    %rdx,%rcx
  4083b9:	48 29 c1             	sub    %rax,%rcx
  4083bc:	48 89 c8             	mov    %rcx,%rax
  4083bf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		pi = **cast(Interface ***)*cast(void**)p2;
  4083c3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4083c7:	48 8b 00             	mov    (%rax),%rax
  4083ca:	48 8b 00             	mov    (%rax),%rax
  4083cd:	48 8b 00             	mov    (%rax),%rax
  4083d0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = cast(Object)(*cast(void**)p2 - pi.offset);
  4083d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4083d8:	48 8b 10             	mov    (%rax),%rdx
  4083db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4083df:	48 83 c0 18          	add    $0x18,%rax
  4083e3:	8b 00                	mov    (%rax),%eax
  4083e5:	48 98                	cltq   
  4083e7:	48 89 d1             	mov    %rdx,%rcx
  4083ea:	48 29 c1             	sub    %rax,%rcx
  4083ed:	48 89 c8             	mov    %rcx,%rax
  4083f0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		return o1 == o2 || (o1 && o1.opCmp(o2) == 0);
  4083f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4083f8:	48 8b 00             	mov    (%rax),%rax
  4083fb:	48 83 c0 20          	add    $0x20,%rax
  4083ff:	48 8b 00             	mov    (%rax),%rax
  408402:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  408406:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40840a:	ff d0                	callq  *%rax
  40840c:	85 c0                	test   %eax,%eax
  40840e:	75 23                	jne    408433 <_D6object18TypeInfo_Interface6equalsMFPvPvZi+0xbe>
  408410:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  408415:	74 22                	je     408439 <_D6object18TypeInfo_Interface6equalsMFPvPvZi+0xc4>
  408417:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40841b:	48 8b 00             	mov    (%rax),%rax
  40841e:	48 83 c0 18          	add    $0x18,%rax
  408422:	48 8b 00             	mov    (%rax),%rax
  408425:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  408429:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40842d:	ff d0                	callq  *%rax
  40842f:	85 c0                	test   %eax,%eax
  408431:	75 06                	jne    408439 <_D6object18TypeInfo_Interface6equalsMFPvPvZi+0xc4>
  408433:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
  408437:	eb 04                	jmp    40843d <_D6object18TypeInfo_Interface6equalsMFPvPvZi+0xc8>
  408439:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  40843d:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
	}
  408441:	c9                   	leaveq 
  408442:	c3                   	retq   

0000000000408443 <_D6object18TypeInfo_Interface7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  408443:	55                   	push   %rbp
  408444:	48 89 e5             	mov    %rsp,%rbp
  408447:	48 83 ec 40          	sub    $0x40,%rsp
  40844b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40844f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408453:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  408457:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  40845b:	e8 4c 0a 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Interface* pi = **cast(Interface ***)*cast(void**)p1;
  408460:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408464:	48 8b 00             	mov    (%rax),%rax
  408467:	48 8b 00             	mov    (%rax),%rax
  40846a:	48 8b 00             	mov    (%rax),%rax
  40846d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o1 = cast(Object)(*cast(void**)p1 - pi.offset);
  408471:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408475:	48 8b 10             	mov    (%rax),%rdx
  408478:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40847c:	48 83 c0 18          	add    $0x18,%rax
  408480:	8b 00                	mov    (%rax),%eax
  408482:	48 98                	cltq   
  408484:	48 89 d1             	mov    %rdx,%rcx
  408487:	48 29 c1             	sub    %rax,%rcx
  40848a:	48 89 c8             	mov    %rcx,%rax
  40848d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		pi = **cast(Interface ***)*cast(void**)p2;
  408491:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408495:	48 8b 00             	mov    (%rax),%rax
  408498:	48 8b 00             	mov    (%rax),%rax
  40849b:	48 8b 00             	mov    (%rax),%rax
  40849e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = cast(Object)(*cast(void**)p2 - pi.offset);
  4084a2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4084a6:	48 8b 10             	mov    (%rax),%rdx
  4084a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4084ad:	48 83 c0 18          	add    $0x18,%rax
  4084b1:	8b 00                	mov    (%rax),%eax
  4084b3:	48 98                	cltq   
  4084b5:	48 89 d1             	mov    %rdx,%rcx
  4084b8:	48 29 c1             	sub    %rax,%rcx
  4084bb:	48 89 c8             	mov    %rcx,%rax
  4084be:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		int c = 0;
  4084c2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)

		// Regard null references as always being "less than"
		if (o1 != o2)
  4084c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4084cd:	48 8b 00             	mov    (%rax),%rax
  4084d0:	48 83 c0 20          	add    $0x20,%rax
  4084d4:	48 8b 00             	mov    (%rax),%rax
  4084d7:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4084db:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4084df:	ff d0                	callq  *%rax
  4084e1:	85 c0                	test   %eax,%eax
  4084e3:	0f 95 c0             	setne  %al
  4084e6:	83 f0 01             	xor    $0x1,%eax
  4084e9:	84 c0                	test   %al,%al
  4084eb:	74 43                	je     408530 <_D6object18TypeInfo_Interface7compareMFPvPvZi+0xed>
		{
			if (o1)
  4084ed:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  4084f2:	74 35                	je     408529 <_D6object18TypeInfo_Interface7compareMFPvPvZi+0xe6>
			{	if (!o2)
  4084f4:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  4084f9:	0f 95 c0             	setne  %al
  4084fc:	83 f0 01             	xor    $0x1,%eax
  4084ff:	84 c0                	test   %al,%al
  408501:	74 09                	je     40850c <_D6object18TypeInfo_Interface7compareMFPvPvZi+0xc9>
					c = 1;
  408503:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  40850a:	eb 24                	jmp    408530 <_D6object18TypeInfo_Interface7compareMFPvPvZi+0xed>
				else
					c = o1.opCmp(o2);
  40850c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408510:	48 8b 00             	mov    (%rax),%rax
  408513:	48 83 c0 18          	add    $0x18,%rax
  408517:	48 8b 00             	mov    (%rax),%rax
  40851a:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40851e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408522:	ff d0                	callq  *%rax
  408524:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  408527:	eb 07                	jmp    408530 <_D6object18TypeInfo_Interface7compareMFPvPvZi+0xed>
			}
			else
				c = -1;
  408529:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
		}
		return c;
  408530:	8b 45 e4             	mov    -0x1c(%rbp),%eax
	}
  408533:	c9                   	leaveq 
  408534:	c3                   	retq   

0000000000408535 <_D6object18TypeInfo_Interface5tsizeMFZm>:

	size_t tsize()
  408535:	55                   	push   %rbp
  408536:	48 89 e5             	mov    %rsp,%rbp
  408539:	48 83 ec 10          	sub    $0x10,%rsp
  40853d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408541:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  408545:	e8 62 09 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return Object.sizeof;
  40854a:	b8 08 00 00 00       	mov    $0x8,%eax
	}
  40854f:	c9                   	leaveq 
  408550:	c3                   	retq   

0000000000408551 <_D6object18TypeInfo_Interface5flagsMFZk>:

	uint flags() { return 1; }
  408551:	55                   	push   %rbp
  408552:	48 89 e5             	mov    %rsp,%rbp
  408555:	48 83 ec 10          	sub    $0x10,%rsp
  408559:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40855d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  408561:	e8 46 09 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  408566:	b8 01 00 00 00       	mov    $0x1,%eax
  40856b:	c9                   	leaveq 
  40856c:	c3                   	retq   

000000000040856d <_D6object15TypeInfo_Struct8toStringMFZAa>:
	ClassInfo info;
}

class TypeInfo_Struct : TypeInfo
{
	char[] toString() { return name; }
  40856d:	55                   	push   %rbp
  40856e:	48 89 e5             	mov    %rsp,%rbp
  408571:	53                   	push   %rbx
  408572:	48 83 ec 08          	sub    $0x8,%rsp
  408576:	48 89 fb             	mov    %rdi,%rbx
  408579:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40857d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408581:	e8 26 09 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  408586:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40858a:	48 8b 42 10          	mov    0x10(%rdx),%rax
  40858e:	48 89 03             	mov    %rax,(%rbx)
  408591:	48 8b 42 18          	mov    0x18(%rdx),%rax
  408595:	48 89 43 08          	mov    %rax,0x8(%rbx)
  408599:	48 89 d8             	mov    %rbx,%rax
  40859c:	48 83 c4 08          	add    $0x8,%rsp
  4085a0:	5b                   	pop    %rbx
  4085a1:	c9                   	leaveq 
  4085a2:	c3                   	retq   

00000000004085a3 <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  4085a3:	55                   	push   %rbp
  4085a4:	48 89 e5             	mov    %rsp,%rbp
  4085a7:	53                   	push   %rbx
  4085a8:	48 83 ec 68          	sub    $0x68,%rsp
  4085ac:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  4085b0:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  4085b4:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  4085b8:	e8 ef 08 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Struct s;
  4085bd:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4085c4:	00 

		return this is o ||
  4085c5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4085c9:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  4085cd:	0f 84 c3 00 00 00    	je     408696 <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xf3>
  4085d3:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  4085d7:	48 c7 c6 e0 be 41 00 	mov    $0x41bee0,%rsi
  4085de:	e8 0c 0b 00 00       	callq  4090ef <_d_dynamic_cast>
  4085e3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4085e7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  4085ec:	0f 84 aa 00 00 00    	je     40869c <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xf9>
  4085f2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4085f6:	48 8b 50 10          	mov    0x10(%rax),%rdx
  4085fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4085fe:	48 8b 40 10          	mov    0x10(%rax),%rax
  408602:	48 39 c2             	cmp    %rax,%rdx
  408605:	0f 85 91 00 00 00    	jne    40869c <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xf9>
  40860b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40860f:	48 8b 48 10          	mov    0x10(%rax),%rcx
  408613:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408617:	48 8b 50 18          	mov    0x18(%rax),%rdx
  40861b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40861f:	48 8b 40 18          	mov    0x18(%rax),%rax
  408623:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  408627:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  40862b:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  40862f:	fc                   	cld    
  408630:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  408634:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
  408638:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  40863c:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  408640:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  408644:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  408646:	0f 97 c2             	seta   %dl
  408649:	0f 92 c0             	setb   %al
  40864c:	89 d1                	mov    %edx,%ecx
  40864e:	28 c1                	sub    %al,%cl
  408650:	89 c8                	mov    %ecx,%eax
  408652:	0f be c0             	movsbl %al,%eax
  408655:	85 c0                	test   %eax,%eax
  408657:	75 43                	jne    40869c <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xf9>
  408659:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40865d:	48 8b 00             	mov    (%rax),%rax
  408660:	48 83 c0 58          	add    $0x58,%rax
  408664:	48 8b 00             	mov    (%rax),%rax
  408667:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
  40866b:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40866f:	ff d0                	callq  *%rax
  408671:	48 8b 5d c0          	mov    -0x40(%rbp),%rbx
  408675:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408679:	48 8b 00             	mov    (%rax),%rax
  40867c:	48 83 c0 58          	add    $0x58,%rax
  408680:	48 8b 00             	mov    (%rax),%rax
  408683:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
  408687:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40868b:	ff d0                	callq  *%rax
  40868d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408691:	48 39 c3             	cmp    %rax,%rbx
  408694:	75 06                	jne    40869c <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xf9>
  408696:	c6 45 af 01          	movb   $0x1,-0x51(%rbp)
  40869a:	eb 04                	jmp    4086a0 <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xfd>
  40869c:	c6 45 af 00          	movb   $0x0,-0x51(%rbp)
  4086a0:	0f b6 45 af          	movzbl -0x51(%rbp),%eax
				((s = cast(TypeInfo_Struct)o) !is null &&
				 this.name == s.name &&
				 this.init.length == s.init.length);
	}
  4086a4:	48 83 c4 68          	add    $0x68,%rsp
  4086a8:	5b                   	pop    %rbx
  4086a9:	c9                   	leaveq 
  4086aa:	c3                   	retq   

00000000004086ab <_D6object15TypeInfo_Struct7getHashMFPvZm>:

	hash_t getHash(void *p)
  4086ab:	55                   	push   %rbp
  4086ac:	48 89 e5             	mov    %rsp,%rbp
  4086af:	48 83 ec 40          	sub    $0x40,%rsp
  4086b3:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  4086b7:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  4086bb:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4086bf:	e8 e8 07 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{	hash_t h;
  4086c4:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4086cb:	00 

		assert(p);
  4086cc:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  4086d1:	75 22                	jne    4086f5 <_D6object15TypeInfo_Struct7getHashMFPvZm+0x4a>
  4086d3:	48 c7 45 d0 08 00 00 	movq   $0x8,-0x30(%rbp)
  4086da:	00 
  4086db:	48 c7 45 d8 80 14 41 	movq   $0x411480,-0x28(%rbp)
  4086e2:	00 
  4086e3:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4086e7:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4086eb:	ba 6a 03 00 00       	mov    $0x36a,%edx
  4086f0:	e8 0d 22 00 00       	callq  40a902 <_d_assert>
		if (xtoHash)
  4086f5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4086f9:	48 8b 40 30          	mov    0x30(%rax),%rax
  4086fd:	48 85 c0             	test   %rax,%rax
  408700:	74 14                	je     408716 <_D6object15TypeInfo_Struct7getHashMFPvZm+0x6b>
		{	//printf("getHash() using xtoHash\n");
			h = (*xtoHash)(p);
  408702:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408706:	48 8b 40 30          	mov    0x30(%rax),%rax
  40870a:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40870e:	ff d0                	callq  *%rax
  408710:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  408714:	eb 5d                	jmp    408773 <_D6object15TypeInfo_Struct7getHashMFPvZm+0xc8>
		{
			//printf("getHash() using default hash\n");
			// A sorry hash algorithm.
			// Should use the one for strings.
			// BUG: relies on the GC not moving objects
			for (size_t i = 0; i < init.length; i++)
  408716:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40871d:	00 
  40871e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408722:	48 8b 00             	mov    (%rax),%rax
  408725:	48 83 c0 58          	add    $0x58,%rax
  408729:	48 8b 00             	mov    (%rax),%rax
  40872c:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  408730:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  408734:	ff d0                	callq  *%rax
  408736:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40873a:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  40873e:	0f 92 c0             	setb   %al
  408741:	83 f0 01             	xor    $0x1,%eax
  408744:	84 c0                	test   %al,%al
  408746:	75 2b                	jne    408773 <_D6object15TypeInfo_Struct7getHashMFPvZm+0xc8>
			{	h = h * 9 + *cast(ubyte*)p;
  408748:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40874c:	48 89 d0             	mov    %rdx,%rax
  40874f:	48 c1 e0 03          	shl    $0x3,%rax
  408753:	48 8d 14 10          	lea    (%rax,%rdx,1),%rdx
  408757:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40875b:	0f b6 00             	movzbl (%rax),%eax
  40875e:	0f b6 c0             	movzbl %al,%eax
  408761:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  408765:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
				p++;
  408769:	48 ff 45 c0          	incq   -0x40(%rbp)
  40876d:	48 ff 45 f8          	incq   -0x8(%rbp)
  408771:	eb ab                	jmp    40871e <_D6object15TypeInfo_Struct7getHashMFPvZm+0x73>
			}
		}
		return h;
  408773:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
	}
  408777:	c9                   	leaveq 
  408778:	c3                   	retq   

0000000000408779 <_D6object15TypeInfo_Struct6equalsMFPvPvZi>:

	int equals(void *p2, void *p1)
  408779:	55                   	push   %rbp
  40877a:	48 89 e5             	mov    %rsp,%rbp
  40877d:	48 83 ec 40          	sub    $0x40,%rsp
  408781:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408785:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408789:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40878d:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  408791:	e8 16 07 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{	int c;
  408796:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

		if (p1 == p2)
  40879d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4087a1:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  4087a5:	75 0c                	jne    4087b3 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0x3a>
			c = 1;
  4087a7:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  4087ae:	e9 80 00 00 00       	jmpq   408833 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0xba>
		else if (!p1 || !p2)
  4087b3:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  4087b8:	0f 95 c0             	setne  %al
  4087bb:	83 f0 01             	xor    $0x1,%eax
  4087be:	84 c0                	test   %al,%al
  4087c0:	75 0f                	jne    4087d1 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0x58>
  4087c2:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  4087c7:	0f 95 c0             	setne  %al
  4087ca:	83 f0 01             	xor    $0x1,%eax
  4087cd:	84 c0                	test   %al,%al
  4087cf:	74 09                	je     4087da <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0x61>
			c = 0;
  4087d1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	int equals(void *p2, void *p1)
	{	int c;

		if (p1 == p2)
			c = 1;
		else if (!p1 || !p2)
  4087d8:	eb 59                	jmp    408833 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0xba>
			c = 0;
		else if (xopEquals)
  4087da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4087de:	48 8b 40 38          	mov    0x38(%rax),%rax
  4087e2:	48 85 c0             	test   %rax,%rax
  4087e5:	74 17                	je     4087fe <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0x85>
			c = (*xopEquals)(p1, p2);
  4087e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4087eb:	48 8b 40 38          	mov    0x38(%rax),%rax
  4087ef:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  4087f3:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4087f7:	ff d0                	callq  *%rax
  4087f9:	89 45 fc             	mov    %eax,-0x4(%rbp)
  4087fc:	eb 35                	jmp    408833 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0xba>
		else
			// BUG: relies on the GC not moving objects
			c = (memcmp(cast(ubyte*)p1, cast(ubyte*)p2, init.length) == 0);
  4087fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408802:	48 8b 00             	mov    (%rax),%rax
  408805:	48 83 c0 58          	add    $0x58,%rax
  408809:	48 8b 00             	mov    (%rax),%rax
  40880c:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  408810:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  408814:	ff d0                	callq  *%rax
  408816:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40881a:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40881e:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  408822:	e8 bd 4b 00 00       	callq  40d3e4 <_D6kernel4core6system6memcmpFPvPvmZl>
  408827:	48 85 c0             	test   %rax,%rax
  40882a:	0f 94 c0             	sete   %al
  40882d:	0f b6 c0             	movzbl %al,%eax
  408830:	89 45 fc             	mov    %eax,-0x4(%rbp)
		return c;
  408833:	8b 45 fc             	mov    -0x4(%rbp),%eax
	}
  408836:	c9                   	leaveq 
  408837:	c3                   	retq   

0000000000408838 <_D6object15TypeInfo_Struct7compareMFPvPvZi>:

	int compare(void *p2, void *p1)
  408838:	55                   	push   %rbp
  408839:	48 89 e5             	mov    %rsp,%rbp
  40883c:	48 83 ec 40          	sub    $0x40,%rsp
  408840:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408844:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408848:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40884c:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  408850:	e8 57 06 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		int c = 0;
  408855:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

		// Regard null references as always being "less than"
		if (p1 != p2)
  40885c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408860:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  408864:	74 78                	je     4088de <_D6object15TypeInfo_Struct7compareMFPvPvZi+0xa6>
		{
			if (p1)
  408866:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  40886b:	74 6a                	je     4088d7 <_D6object15TypeInfo_Struct7compareMFPvPvZi+0x9f>
			{	if (!p2)
  40886d:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  408872:	0f 95 c0             	setne  %al
  408875:	83 f0 01             	xor    $0x1,%eax
  408878:	84 c0                	test   %al,%al
  40887a:	74 09                	je     408885 <_D6object15TypeInfo_Struct7compareMFPvPvZi+0x4d>
					c = 1;
  40887c:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  408883:	eb 59                	jmp    4088de <_D6object15TypeInfo_Struct7compareMFPvPvZi+0xa6>
				else if (xopCmp)
  408885:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408889:	48 8b 40 40          	mov    0x40(%rax),%rax
  40888d:	48 85 c0             	test   %rax,%rax
  408890:	74 17                	je     4088a9 <_D6object15TypeInfo_Struct7compareMFPvPvZi+0x71>
					c = (*xopCmp)(p1, p2);
  408892:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408896:	48 8b 40 40          	mov    0x40(%rax),%rax
  40889a:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40889e:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4088a2:	ff d0                	callq  *%rax
  4088a4:	89 45 fc             	mov    %eax,-0x4(%rbp)
  4088a7:	eb 35                	jmp    4088de <_D6object15TypeInfo_Struct7compareMFPvPvZi+0xa6>
				else
					// BUG: relies on the GC not moving objects
					c = memcmp(cast(ubyte*)p1, cast(ubyte*)p2, init.length);
  4088a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4088ad:	48 8b 00             	mov    (%rax),%rax
  4088b0:	48 83 c0 58          	add    $0x58,%rax
  4088b4:	48 8b 00             	mov    (%rax),%rax
  4088b7:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  4088bb:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4088bf:	ff d0                	callq  *%rax
  4088c1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4088c5:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  4088c9:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4088cd:	e8 12 4b 00 00       	callq  40d3e4 <_D6kernel4core6system6memcmpFPvPvmZl>
  4088d2:	89 45 fc             	mov    %eax,-0x4(%rbp)
  4088d5:	eb 07                	jmp    4088de <_D6object15TypeInfo_Struct7compareMFPvPvZi+0xa6>
			}
			else
				c = -1;
  4088d7:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
		}
		return c;
  4088de:	8b 45 fc             	mov    -0x4(%rbp),%eax
	}
  4088e1:	c9                   	leaveq 
  4088e2:	c3                   	retq   

00000000004088e3 <_D6object15TypeInfo_Struct5tsizeMFZm>:

	size_t tsize()
  4088e3:	55                   	push   %rbp
  4088e4:	48 89 e5             	mov    %rsp,%rbp
  4088e7:	48 83 ec 20          	sub    $0x20,%rsp
  4088eb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4088ef:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4088f3:	e8 b4 05 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return init.length;
  4088f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4088fc:	48 8b 00             	mov    (%rax),%rax
  4088ff:	48 83 c0 58          	add    $0x58,%rax
  408903:	48 8b 00             	mov    (%rax),%rax
  408906:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
  40890a:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40890e:	ff d0                	callq  *%rax
  408910:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
	}
  408914:	c9                   	leaveq 
  408915:	c3                   	retq   

0000000000408916 <_D6object15TypeInfo_Struct4initMFZAv>:

	void[] init() { return m_init; }
  408916:	55                   	push   %rbp
  408917:	48 89 e5             	mov    %rsp,%rbp
  40891a:	53                   	push   %rbx
  40891b:	48 83 ec 08          	sub    $0x8,%rsp
  40891f:	48 89 fb             	mov    %rdi,%rbx
  408922:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408926:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40892a:	e8 7d 05 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  40892f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  408933:	48 8b 42 20          	mov    0x20(%rdx),%rax
  408937:	48 89 03             	mov    %rax,(%rbx)
  40893a:	48 8b 42 28          	mov    0x28(%rdx),%rax
  40893e:	48 89 43 08          	mov    %rax,0x8(%rbx)
  408942:	48 89 d8             	mov    %rbx,%rax
  408945:	48 83 c4 08          	add    $0x8,%rsp
  408949:	5b                   	pop    %rbx
  40894a:	c9                   	leaveq 
  40894b:	c3                   	retq   

000000000040894c <_D6object15TypeInfo_Struct5flagsMFZk>:

	uint flags() { return m_flags; }
  40894c:	55                   	push   %rbp
  40894d:	48 89 e5             	mov    %rsp,%rbp
  408950:	48 83 ec 10          	sub    $0x10,%rsp
  408954:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408958:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40895c:	e8 4b 05 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  408961:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408965:	8b 40 50             	mov    0x50(%rax),%eax
  408968:	c9                   	leaveq 
  408969:	c3                   	retq   

000000000040896a <_D6object14TypeInfo_Tuple8toStringMFZAa>:

class TypeInfo_Tuple : TypeInfo
{
	TypeInfo[] elements;

	char[] toString()
  40896a:	55                   	push   %rbp
  40896b:	48 89 e5             	mov    %rsp,%rbp
  40896e:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  408975:	48 89 bd 30 ff ff ff 	mov    %rdi,-0xd0(%rbp)
  40897c:	48 89 b5 78 ff ff ff 	mov    %rsi,-0x88(%rbp)
  408983:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
  40898a:	e8 1d 05 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		char[] s;
  40898f:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  408996:	00 
  408997:	48 c7 45 88 00 00 00 	movq   $0x0,-0x78(%rbp)
  40899e:	00 
		s = "(";
  40899f:	48 c7 45 80 01 00 00 	movq   $0x1,-0x80(%rbp)
  4089a6:	00 
  4089a7:	48 c7 45 88 d0 1d 41 	movq   $0x411dd0,-0x78(%rbp)
  4089ae:	00 
		foreach (i, element; elements)
  4089af:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4089b6:	00 
  4089b7:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4089be:	48 8b 40 18          	mov    0x18(%rax),%rax
  4089c2:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  4089c9:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  4089d0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4089d4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4089db:	48 8b 40 10          	mov    0x10(%rax),%rax
  4089df:	48 c1 e0 03          	shl    $0x3,%rax
  4089e3:	48 03 85 38 ff ff ff 	add    -0xc8(%rbp),%rax
  4089ea:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  4089ee:	0f 95 c0             	setne  %al
  4089f1:	83 f0 01             	xor    $0x1,%eax
  4089f4:	84 c0                	test   %al,%al
  4089f6:	0f 85 9f 00 00 00    	jne    408a9b <_D6object14TypeInfo_Tuple8toStringMFZAa+0x131>
  4089fc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408a00:	48 8b 00             	mov    (%rax),%rax
  408a03:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		{
			if (i)
  408a07:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  408a0c:	74 1c                	je     408a2a <_D6object14TypeInfo_Tuple8toStringMFZAa+0xc0>
				s ~= ',';
  408a0e:	c6 45 ff 2c          	movb   $0x2c,-0x1(%rbp)
  408a12:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  408a16:	48 8d 4d ff          	lea    -0x1(%rbp),%rcx
  408a1a:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  408a1e:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  408a25:	e8 75 17 00 00       	callq  40a19f <_d_arrayappendcTp>
			s ~= element.toString();
  408a2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408a2e:	48 8b 00             	mov    (%rax),%rax
  408a31:	48 83 c0 08          	add    $0x8,%rax
  408a35:	48 8b 00             	mov    (%rax),%rax
  408a38:	48 8d bd 60 ff ff ff 	lea    -0xa0(%rbp),%rdi
  408a3f:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  408a43:	ff d0                	callq  *%rax
  408a45:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  408a4c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  408a50:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  408a57:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  408a5b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  408a5f:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  408a63:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  408a67:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  408a6b:	48 8d bd 50 ff ff ff 	lea    -0xb0(%rbp),%rdi
  408a72:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  408a76:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408a7a:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  408a7e:	49 89 c0             	mov    %rax,%r8
  408a81:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  408a88:	e8 b7 16 00 00       	callq  40a144 <_d_arrayappendT>
  408a8d:	48 83 45 e0 08       	addq   $0x8,-0x20(%rbp)
  408a92:	48 ff 45 e8          	incq   -0x18(%rbp)
  408a96:	e9 39 ff ff ff       	jmpq   4089d4 <_D6object14TypeInfo_Tuple8toStringMFZAa+0x6a>
		}
		s ~= ")";
  408a9b:	48 c7 45 c0 01 00 00 	movq   $0x1,-0x40(%rbp)
  408aa2:	00 
  408aa3:	48 c7 45 c8 d2 1d 41 	movq   $0x411dd2,-0x38(%rbp)
  408aaa:	00 
  408aab:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  408aaf:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  408ab3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408ab7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  408abb:	48 8d bd 40 ff ff ff 	lea    -0xc0(%rbp),%rdi
  408ac2:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  408ac6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408aca:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  408ace:	49 89 c0             	mov    %rax,%r8
  408ad1:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  408ad8:	e8 67 16 00 00       	callq  40a144 <_d_arrayappendT>
		return s;
  408add:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  408ae1:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  408ae8:	48 89 02             	mov    %rax,(%rdx)
  408aeb:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  408aef:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  408af6:	48 89 42 08          	mov    %rax,0x8(%rdx)
	}
  408afa:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  408b01:	c9                   	leaveq 
  408b02:	c3                   	retq   

0000000000408b03 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  408b03:	55                   	push   %rbp
  408b04:	48 89 e5             	mov    %rsp,%rbp
  408b07:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  408b0b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  408b0f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  408b13:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  408b17:	e8 90 03 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		if (this is o)
  408b1c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408b20:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  408b24:	75 0c                	jne    408b32 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x2f>
			return 1;
  408b26:	c7 45 8c 01 00 00 00 	movl   $0x1,-0x74(%rbp)
  408b2d:	e9 52 01 00 00       	jmpq   408c84 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x181>

		auto t = cast(TypeInfo_Tuple)o;
  408b32:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  408b36:	48 c7 c6 80 bf 41 00 	mov    $0x41bf80,%rsi
  408b3d:	e8 ad 05 00 00       	callq  4090ef <_d_dynamic_cast>
  408b42:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		if (t && elements.length == t.elements.length)
  408b46:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  408b4b:	0f 84 2c 01 00 00    	je     408c7d <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x17a>
  408b51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408b55:	48 8b 50 10          	mov    0x10(%rax),%rdx
  408b59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408b5d:	48 8b 40 10          	mov    0x10(%rax),%rax
  408b61:	48 39 c2             	cmp    %rax,%rdx
  408b64:	0f 85 13 01 00 00    	jne    408c7d <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x17a>
		{
			for (size_t i = 0; i < elements.length; i++)
  408b6a:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  408b71:	00 
  408b72:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408b76:	48 8b 40 10          	mov    0x10(%rax),%rax
  408b7a:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  408b7e:	0f 92 c0             	setb   %al
  408b81:	83 f0 01             	xor    $0x1,%eax
  408b84:	84 c0                	test   %al,%al
  408b86:	0f 85 e8 00 00 00    	jne    408c74 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x171>
			{
				if (elements[i] != t.elements[i])
  408b8c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408b90:	48 8b 40 18          	mov    0x18(%rax),%rax
  408b94:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  408b98:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408b9c:	48 8b 40 10          	mov    0x10(%rax),%rax
  408ba0:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  408ba4:	73 0a                	jae    408bb0 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0xad>
  408ba6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408baa:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  408bae:	eb 22                	jmp    408bd2 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0xcf>
  408bb0:	48 c7 45 d0 08 00 00 	movq   $0x8,-0x30(%rbp)
  408bb7:	00 
  408bb8:	48 c7 45 d8 80 14 41 	movq   $0x411480,-0x28(%rbp)
  408bbf:	00 
  408bc0:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  408bc4:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  408bc8:	ba d2 03 00 00       	mov    $0x3d2,%edx
  408bcd:	e8 a3 1d 00 00       	callq  40a975 <_d_array_bounds>
  408bd2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  408bd6:	48 c1 e0 03          	shl    $0x3,%rax
  408bda:	48 03 45 90          	add    -0x70(%rbp),%rax
  408bde:	48 8b 00             	mov    (%rax),%rax
  408be1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  408be5:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  408be9:	48 8b 02             	mov    (%rdx),%rax
  408bec:	48 83 c0 20          	add    $0x20,%rax
  408bf0:	48 8b 00             	mov    (%rax),%rax
  408bf3:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  408bf7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408bfb:	48 8b 40 18          	mov    0x18(%rax),%rax
  408bff:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  408c03:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408c07:	48 8b 40 10          	mov    0x10(%rax),%rax
  408c0b:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  408c0f:	73 0a                	jae    408c1b <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x118>
  408c11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408c15:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  408c19:	eb 22                	jmp    408c3d <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x13a>
  408c1b:	48 c7 45 e0 08 00 00 	movq   $0x8,-0x20(%rbp)
  408c22:	00 
  408c23:	48 c7 45 e8 80 14 41 	movq   $0x411480,-0x18(%rbp)
  408c2a:	00 
  408c2b:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  408c2f:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  408c33:	ba d2 03 00 00       	mov    $0x3d2,%edx
  408c38:	e8 38 1d 00 00       	callq  40a975 <_d_array_bounds>
  408c3d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408c41:	48 c1 e0 03          	shl    $0x3,%rax
  408c45:	48 03 45 b0          	add    -0x50(%rbp),%rax
  408c49:	48 8b 00             	mov    (%rax),%rax
  408c4c:	48 89 c6             	mov    %rax,%rsi
  408c4f:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  408c53:	ff 55 a8             	callq  *-0x58(%rbp)
  408c56:	85 c0                	test   %eax,%eax
  408c58:	0f 95 c0             	setne  %al
  408c5b:	83 f0 01             	xor    $0x1,%eax
  408c5e:	84 c0                	test   %al,%al
  408c60:	74 09                	je     408c6b <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x168>
					return 0;
  408c62:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)
  408c69:	eb 19                	jmp    408c84 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x181>
		auto t = cast(TypeInfo_Tuple)o;
		if (t && elements.length == t.elements.length)
		{
			for (size_t i = 0; i < elements.length; i++)
			{
				if (elements[i] != t.elements[i])
  408c6b:	48 ff 45 f8          	incq   -0x8(%rbp)
  408c6f:	e9 fe fe ff ff       	jmpq   408b72 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x6f>
					return 0;
			}
			return 1;
  408c74:	c7 45 8c 01 00 00 00 	movl   $0x1,-0x74(%rbp)
  408c7b:	eb 07                	jmp    408c84 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x181>
		}
		return 0;
  408c7d:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)
  408c84:	8b 45 8c             	mov    -0x74(%rbp),%eax
	}
  408c87:	c9                   	leaveq 
  408c88:	c3                   	retq   

0000000000408c89 <_D6object14TypeInfo_Tuple7getHashMFPvZm>:

	hash_t getHash(void *p)
  408c89:	55                   	push   %rbp
  408c8a:	48 89 e5             	mov    %rsp,%rbp
  408c8d:	48 83 ec 20          	sub    $0x20,%rsp
  408c91:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408c95:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408c99:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408c9d:	e8 0a 02 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		assert(0);
  408ca2:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
  408ca9:	00 
  408caa:	48 c7 45 f8 80 14 41 	movq   $0x411480,-0x8(%rbp)
  408cb1:	00 
  408cb2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408cb6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  408cba:	ba dc 03 00 00       	mov    $0x3dc,%edx
  408cbf:	e8 3e 1c 00 00       	callq  40a902 <_d_assert>
	}
  408cc4:	c9                   	leaveq 
  408cc5:	c3                   	retq   

0000000000408cc6 <_D6object14TypeInfo_Tuple6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  408cc6:	55                   	push   %rbp
  408cc7:	48 89 e5             	mov    %rsp,%rbp
  408cca:	48 83 ec 30          	sub    $0x30,%rsp
  408cce:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408cd2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408cd6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  408cda:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408cde:	e8 c9 01 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		assert(0);
  408ce3:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
  408cea:	00 
  408ceb:	48 c7 45 f8 80 14 41 	movq   $0x411480,-0x8(%rbp)
  408cf2:	00 
  408cf3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408cf7:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  408cfb:	ba e1 03 00 00       	mov    $0x3e1,%edx
  408d00:	e8 fd 1b 00 00       	callq  40a902 <_d_assert>
	}
  408d05:	c9                   	leaveq 
  408d06:	c3                   	retq   

0000000000408d07 <_D6object14TypeInfo_Tuple7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  408d07:	55                   	push   %rbp
  408d08:	48 89 e5             	mov    %rsp,%rbp
  408d0b:	48 83 ec 30          	sub    $0x30,%rsp
  408d0f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408d13:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408d17:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  408d1b:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408d1f:	e8 88 01 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		assert(0);
  408d24:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
  408d2b:	00 
  408d2c:	48 c7 45 f8 80 14 41 	movq   $0x411480,-0x8(%rbp)
  408d33:	00 
  408d34:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408d38:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  408d3c:	ba e6 03 00 00       	mov    $0x3e6,%edx
  408d41:	e8 bc 1b 00 00       	callq  40a902 <_d_assert>
	}
  408d46:	c9                   	leaveq 
  408d47:	c3                   	retq   

0000000000408d48 <_D6object14TypeInfo_Tuple5tsizeMFZm>:

	size_t tsize()
  408d48:	55                   	push   %rbp
  408d49:	48 89 e5             	mov    %rsp,%rbp
  408d4c:	48 83 ec 20          	sub    $0x20,%rsp
  408d50:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408d54:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408d58:	e8 4f 01 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		assert(0);
  408d5d:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
  408d64:	00 
  408d65:	48 c7 45 f8 80 14 41 	movq   $0x411480,-0x8(%rbp)
  408d6c:	00 
  408d6d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408d71:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  408d75:	ba eb 03 00 00       	mov    $0x3eb,%edx
  408d7a:	e8 83 1b 00 00       	callq  40a902 <_d_assert>
	}
  408d7f:	c9                   	leaveq 
  408d80:	c3                   	retq   

0000000000408d81 <_D6object14TypeInfo_Tuple4swapMFPvPvZv>:

	void swap(void *p1, void *p2)
  408d81:	55                   	push   %rbp
  408d82:	48 89 e5             	mov    %rsp,%rbp
  408d85:	48 83 ec 30          	sub    $0x30,%rsp
  408d89:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408d8d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408d91:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  408d95:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408d99:	e8 0e 01 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
	{
		assert(0);
  408d9e:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
  408da5:	00 
  408da6:	48 c7 45 f8 80 14 41 	movq   $0x411480,-0x8(%rbp)
  408dad:	00 
  408dae:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408db2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  408db6:	ba f0 03 00 00       	mov    $0x3f0,%edx
  408dbb:	e8 42 1b 00 00       	callq  40a902 <_d_assert>
	}
  408dc0:	c9                   	leaveq 
  408dc1:	c3                   	retq   

0000000000408dc2 <_D6object9Exception5_ctorMFAaZC9Exception>:
	char[] msg;

	/**
	 * Constructor; msg is a descriptive message for the exception.
	 */
	this(char[] msg)
  408dc2:	55                   	push   %rbp
  408dc3:	48 89 e5             	mov    %rsp,%rbp
  408dc6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408dca:	48 89 f0             	mov    %rsi,%rax
  408dcd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  408dd1:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  408dd5:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  408ddc:	00 
	{
		this.msg = msg;
  408ddd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408de1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408de5:	48 89 42 10          	mov    %rax,0x10(%rdx)
  408de9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408ded:	48 89 42 18          	mov    %rax,0x18(%rdx)
  408df1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  408df5:	c9                   	leaveq 
  408df6:	c3                   	retq   

0000000000408df7 <_D6object9Exception8toStringMFZAa>:

	char[] toString() { return msg; }
  408df7:	55                   	push   %rbp
  408df8:	48 89 e5             	mov    %rsp,%rbp
  408dfb:	53                   	push   %rbx
  408dfc:	48 83 ec 08          	sub    $0x8,%rsp
  408e00:	48 89 fb             	mov    %rdi,%rbx
  408e03:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408e07:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408e0b:	e8 9c 00 00 00       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>
  408e10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  408e14:	48 8b 42 10          	mov    0x10(%rdx),%rax
  408e18:	48 89 03             	mov    %rax,(%rbx)
  408e1b:	48 8b 42 18          	mov    0x18(%rdx),%rax
  408e1f:	48 89 43 08          	mov    %rax,0x8(%rbx)
  408e23:	48 89 d8             	mov    %rbx,%rax
  408e26:	48 83 c4 08          	add    $0x8,%rsp
  408e2a:	5b                   	pop    %rbx
  408e2b:	c9                   	leaveq 
  408e2c:	c3                   	retq   

0000000000408e2d <_D6object5Error5_ctorMFAaZC6object5Error>:
	Error next;

	/**
	 * Constructor; msg is a descriptive message for the exception.
	 */
	this(char[] msg)
  408e2d:	55                   	push   %rbp
  408e2e:	48 89 e5             	mov    %rsp,%rbp
  408e31:	48 83 ec 28          	sub    $0x28,%rsp
  408e35:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408e39:	48 89 f0             	mov    %rsi,%rax
  408e3c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  408e40:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  408e44:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  408e4b:	00 
	{
		super(msg);
  408e4c:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  408e50:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  408e54:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408e58:	e8 65 ff ff ff       	callq  408dc2 <_D6object9Exception5_ctorMFAaZC9Exception>
  408e5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  408e61:	c9                   	leaveq 
  408e62:	c3                   	retq   

0000000000408e63 <_D6object5Error5_ctorMFAaC6object5ErrorZC6object5Error>:

	this(char[] msg, Error next)
  408e63:	55                   	push   %rbp
  408e64:	48 89 e5             	mov    %rsp,%rbp
  408e67:	48 83 ec 30          	sub    $0x30,%rsp
  408e6b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408e6f:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  408e73:	48 89 f0             	mov    %rsi,%rax
  408e76:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  408e7a:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  408e7e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  408e85:	00 
	{
		super(msg);
  408e86:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  408e8a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  408e8e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408e92:	e8 2b ff ff ff       	callq  408dc2 <_D6object9Exception5_ctorMFAaZC9Exception>
		this.next = next;
  408e97:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408e9b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408e9f:	48 89 42 20          	mov    %rax,0x20(%rdx)
  408ea3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  408ea7:	c9                   	leaveq 
  408ea8:	c3                   	retq   
  408ea9:	90                   	nop    
  408eaa:	90                   	nop    
  408eab:	90                   	nop    

0000000000408eac <_D9invariant12_d_invariantFC6ObjectZv>:
 * Placed into the Public Domain
 * written by Walter Bright
 * www.digitalmars.com
 */

void _d_invariant(Object o)
  408eac:	55                   	push   %rbp
  408ead:	48 89 e5             	mov    %rsp,%rbp
  408eb0:	48 83 ec 30          	sub    $0x30,%rsp
  408eb4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
{
	ClassInfo c;
  408eb8:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  408ebf:	00 

	//printf("__d_invariant(%p)\n", o);

	// BUG: needs to be filename/line of caller, not library routine
	assert(o !is null); // just do null check, not invariant check
  408ec0:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  408ec5:	75 22                	jne    408ee9 <_D9invariant12_d_invariantFC6ObjectZv+0x3d>
  408ec7:	48 c7 45 e0 17 00 00 	movq   $0x17,-0x20(%rbp)
  408ece:	00 
  408ecf:	48 c7 45 e8 88 1f 41 	movq   $0x411f88,-0x18(%rbp)
  408ed6:	00 
  408ed7:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  408edb:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  408edf:	ba 0f 00 00 00       	mov    $0xf,%edx
  408ee4:	e8 19 1a 00 00       	callq  40a902 <_d_assert>

	c = o.classinfo;
  408ee9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408eed:	48 8b 00             	mov    (%rax),%rax
  408ef0:	48 8b 00             	mov    (%rax),%rax
  408ef3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	
	do
	{
		if(c.classInvariant)
  408ef7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408efb:	48 8b 40 60          	mov    0x60(%rax),%rax
  408eff:	48 85 c0             	test   %rax,%rax
  408f02:	74 0e                	je     408f12 <_D9invariant12_d_invariantFC6ObjectZv+0x66>
		{
			(*c.classInvariant)(o);
  408f04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408f08:	48 8b 40 60          	mov    0x60(%rax),%rax
  408f0c:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  408f10:	ff d0                	callq  *%rax
		}

		c = c.base;
  408f12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408f16:	48 8b 40 50          	mov    0x50(%rax),%rax
  408f1a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  408f1e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  408f23:	0f 95 c0             	setne  %al
  408f26:	83 f0 01             	xor    $0x1,%eax
  408f29:	84 c0                	test   %al,%al
  408f2b:	75 02                	jne    408f2f <_D9invariant12_d_invariantFC6ObjectZv+0x83>
  408f2d:	eb c8                	jmp    408ef7 <_D9invariant12_d_invariantFC6ObjectZv+0x4b>
	} while(c)
}
  408f2f:	c9                   	leaveq 
  408f30:	c3                   	retq   
  408f31:	90                   	nop    
  408f32:	90                   	nop    
  408f33:	90                   	nop    

0000000000408f34 <abort>:
/**************************************************
 Random stubs (they'll go somewhere eventually)
**************************************************/

//mixin(Stub!("void abort()"));
void abort() {
  408f34:	55                   	push   %rbp
  408f35:	48 89 e5             	mov    %rsp,%rbp
  exit(0);
  408f38:	bf 00 00 00 00       	mov    $0x0,%edi
  408f3d:	e8 ca 46 00 00       	callq  40d60c <_D4user7syscall4exitFlZv>
}
  408f42:	c9                   	leaveq 
  408f43:	c3                   	retq   

0000000000408f44 <rt_isHalting>:
  408f44:	55                   	push   %rbp
  408f45:	48 89 e5             	mov    %rsp,%rbp
  408f48:	48 83 ec 20          	sub    $0x20,%rsp
 Random stubs (they'll go somewhere eventually)
**************************************************/

//mixin(Stub!("void abort()"));
void abort() {
  exit(0);
  408f4c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  408f53:	00 
  408f54:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  408f5b:	00 
  408f5c:	48 c7 45 f0 34 00 00 	movq   $0x34,-0x10(%rbp)
  408f63:	00 
  408f64:	48 c7 45 f8 88 20 41 	movq   $0x412088,-0x8(%rbp)
  408f6b:	00 
  408f6c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  408f70:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  408f74:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408f78:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  408f7c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  408f82:	e8 a6 19 00 00       	callq  40a92d <_d_assert_msg>
  408f87:	c9                   	leaveq 
  408f88:	c3                   	retq   

0000000000408f89 <runModuleUnitTests>:
  408f89:	55                   	push   %rbp
  408f8a:	48 89 e5             	mov    %rsp,%rbp
  408f8d:	48 83 ec 20          	sub    $0x20,%rsp
  408f91:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  408f98:	00 
  408f99:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  408fa0:	00 
  408fa1:	48 c7 45 f0 3a 00 00 	movq   $0x3a,-0x10(%rbp)
  408fa8:	00 
  408fa9:	48 c7 45 f8 c0 20 41 	movq   $0x4120c0,-0x8(%rbp)
  408fb0:	00 
  408fb1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  408fb5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  408fb9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408fbd:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  408fc1:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  408fc7:	e8 61 19 00 00       	callq  40a92d <_d_assert_msg>
  408fcc:	c9                   	leaveq 
  408fcd:	c3                   	retq   

0000000000408fce <_d_monitordelete>:
  408fce:	55                   	push   %rbp
  408fcf:	48 89 e5             	mov    %rsp,%rbp
  408fd2:	48 83 ec 30          	sub    $0x30,%rsp
  408fd6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408fda:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  408fde:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  408fe5:	00 
  408fe6:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  408fed:	00 
  408fee:	48 c7 45 f0 51 00 00 	movq   $0x51,-0x10(%rbp)
  408ff5:	00 
  408ff6:	48 c7 45 f8 00 21 41 	movq   $0x412100,-0x8(%rbp)
  408ffd:	00 
  408ffe:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  409002:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  409006:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40900a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40900e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  409014:	e8 14 19 00 00       	callq  40a92d <_d_assert_msg>
  409019:	c9                   	leaveq 
  40901a:	c3                   	retq   

000000000040901b <_d_toObject>:
 *		If it is an interface, return the Object implementing the interface.
 *		If it is null, return null.
 *		Else, undefined crash
 */

Object _d_toObject(void* p)
  40901b:	55                   	push   %rbp
  40901c:	48 89 e5             	mov    %rsp,%rbp
  40901f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
{	Object o;
  409023:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40902a:	00 

	if (p)
  40902b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  409030:	74 4f                	je     409081 <_d_toObject+0x66>
	{
		o = cast(Object)p;
  409032:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409036:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		ClassInfo oc = o.classinfo;
  40903a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40903e:	48 8b 00             	mov    (%rax),%rax
  409041:	48 8b 00             	mov    (%rax),%rax
  409044:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Interface *pi = **cast(Interface ***)p;
  409048:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40904c:	48 8b 00             	mov    (%rax),%rax
  40904f:	48 8b 00             	mov    (%rax),%rax
  409052:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		/* Interface.offset lines up with ClassInfo.name.ptr,
		 * so we rely on pointers never being less than 64K,
		 * and Objects never being greater.
		 */
		if (pi.offset < 0x10000)
  409056:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40905a:	48 83 c0 18          	add    $0x18,%rax
  40905e:	8b 00                	mov    (%rax),%eax
  409060:	3d 00 00 01 00       	cmp    $0x10000,%eax
  409065:	7d 1a                	jge    409081 <_d_toObject+0x66>
		{
			//printf("\tpi.offset = %d\n", pi.offset);
			o = cast(Object)(p - pi.offset);
  409067:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40906b:	48 83 c0 18          	add    $0x18,%rax
  40906f:	8b 00                	mov    (%rax),%eax
  409071:	48 98                	cltq   
  409073:	48 89 c2             	mov    %rax,%rdx
  409076:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40907a:	48 29 d0             	sub    %rdx,%rax
  40907d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		}
	}
	return o;
  409081:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
  409085:	c9                   	leaveq 
  409086:	c3                   	retq   

0000000000409087 <_d_interface_cast>:
/*************************************
 * Attempts to cast Object o to class c.
 * Returns o if successful, null if not.
 */

Object _d_interface_cast(void* p, ClassInfo c)
  409087:	55                   	push   %rbp
  409088:	48 89 e5             	mov    %rsp,%rbp
  40908b:	48 83 ec 30          	sub    $0x30,%rsp
  40908f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  409093:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
{	Object o;
  409097:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40909e:	00 

	//printf("_d_interface_cast(p = %p, c = '%.*s')\n", p, c.name);
	if (p)
  40909f:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  4090a4:	74 3b                	je     4090e1 <_d_interface_cast+0x5a>
	{
		Interface *pi = **cast(Interface ***)p;
  4090a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4090aa:	48 8b 00             	mov    (%rax),%rax
  4090ad:	48 8b 00             	mov    (%rax),%rax
  4090b0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

		//printf("\tpi.offset = %d\n", pi.offset);
		o = cast(Object)(p - pi.offset);
  4090b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4090b8:	48 83 c0 18          	add    $0x18,%rax
  4090bc:	8b 00                	mov    (%rax),%eax
  4090be:	48 98                	cltq   
  4090c0:	48 89 c2             	mov    %rax,%rdx
  4090c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4090c7:	48 29 d0             	sub    %rdx,%rax
  4090ca:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		return _d_dynamic_cast(o, c);
  4090ce:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  4090d2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4090d6:	e8 14 00 00 00       	callq  4090ef <_d_dynamic_cast>
  4090db:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4090df:	eb 08                	jmp    4090e9 <_d_interface_cast+0x62>
	}
	return o;
  4090e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4090e5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4090e9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
  4090ed:	c9                   	leaveq 
  4090ee:	c3                   	retq   

00000000004090ef <_d_dynamic_cast>:

Object _d_dynamic_cast(Object o, ClassInfo c)
  4090ef:	55                   	push   %rbp
  4090f0:	48 89 e5             	mov    %rsp,%rbp
  4090f3:	48 83 ec 20          	sub    $0x20,%rsp
  4090f7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4090fb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
{	ClassInfo oc;
  4090ff:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  409106:	00 
	size_t offset = 0;
  409107:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40910e:	00 

	//printf("_d_dynamic_cast(o = %p, c = '%.*s')\n", o, c.name);

	if (o)
  40910f:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  409114:	74 39                	je     40914f <_d_dynamic_cast+0x60>
	{
		oc = o.classinfo;
  409116:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40911a:	48 8b 00             	mov    (%rax),%rax
  40911d:	48 8b 00             	mov    (%rax),%rax
  409120:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (_d_isbaseof2(oc, c, offset))
  409124:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  409128:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40912c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  409130:	e8 20 00 00 00       	callq  409155 <_d_isbaseof2>
  409135:	85 c0                	test   %eax,%eax
  409137:	74 0e                	je     409147 <_d_dynamic_cast+0x58>
		{
			//printf("\toffset = %d\n", offset);
			o = cast(Object)(cast(void*)o + offset);
  409139:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40913d:	48 03 45 e8          	add    -0x18(%rbp),%rax
  409141:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  409145:	eb 08                	jmp    40914f <_d_dynamic_cast+0x60>
		}
		else
			o = null;
  409147:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40914e:	00 
	}
	//printf("\tresult = %p\n", o);
	return o;
  40914f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
  409153:	c9                   	leaveq 
  409154:	c3                   	retq   

0000000000409155 <_d_isbaseof2>:

int _d_isbaseof2(ClassInfo oc, ClassInfo c, inout size_t offset)
  409155:	55                   	push   %rbp
  409156:	48 89 e5             	mov    %rsp,%rbp
  409159:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  409160:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  409164:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  409168:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
{	int i;
  40916c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)

	if (oc is c)
  409173:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409177:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  40917b:	75 0f                	jne    40918c <_d_isbaseof2+0x37>
		return 1;
  40917d:	c7 85 44 ff ff ff 01 	movl   $0x1,-0xbc(%rbp)
  409184:	00 00 00 
  409187:	e9 a3 02 00 00       	jmpq   40942f <_d_isbaseof2+0x2da>
	do
	{
		if (oc.base is c)
  40918c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409190:	48 8b 40 50          	mov    0x50(%rax),%rax
  409194:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  409198:	75 0f                	jne    4091a9 <_d_isbaseof2+0x54>
			return 1;
  40919a:	c7 85 44 ff ff ff 01 	movl   $0x1,-0xbc(%rbp)
  4091a1:	00 00 00 
  4091a4:	e9 86 02 00 00       	jmpq   40942f <_d_isbaseof2+0x2da>
		for (i = 0; i < oc.interfaces.length; i++)
  4091a9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  4091b0:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4091b3:	48 63 d0             	movslq %eax,%rdx
  4091b6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4091ba:	48 8b 40 40          	mov    0x40(%rax),%rax
  4091be:	48 39 c2             	cmp    %rax,%rdx
  4091c1:	0f 92 c0             	setb   %al
  4091c4:	83 f0 01             	xor    $0x1,%eax
  4091c7:	84 c0                	test   %al,%al
  4091c9:	0f 85 09 01 00 00    	jne    4092d8 <_d_isbaseof2+0x183>
		{
			ClassInfo ic;
  4091cf:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4091d6:	00 

			ic = oc.interfaces[i].classinfo;
  4091d7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4091db:	48 8b 40 48          	mov    0x48(%rax),%rax
  4091df:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  4091e6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4091e9:	48 63 d0             	movslq %eax,%rdx
  4091ec:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4091f0:	48 8b 40 40          	mov    0x40(%rax),%rax
  4091f4:	48 39 c2             	cmp    %rax,%rdx
  4091f7:	73 0e                	jae    409207 <_d_isbaseof2+0xb2>
  4091f9:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4091fc:	48 98                	cltq   
  4091fe:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  409205:	eb 22                	jmp    409229 <_d_isbaseof2+0xd4>
  409207:	48 c7 45 a0 0b 00 00 	movq   $0xb,-0x60(%rbp)
  40920e:	00 
  40920f:	48 c7 45 a8 52 21 41 	movq   $0x412152,-0x58(%rbp)
  409216:	00 
  409217:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  40921b:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40921f:	ba 9e 00 00 00       	mov    $0x9e,%edx
  409224:	e8 4c 17 00 00       	callq  40a975 <_d_array_bounds>
  409229:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  409230:	48 c1 e0 05          	shl    $0x5,%rax
  409234:	48 03 85 48 ff ff ff 	add    -0xb8(%rbp),%rax
  40923b:	48 8b 00             	mov    (%rax),%rax
  40923e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
			if (ic is c)
  409242:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  409246:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  40924a:	0f 85 80 00 00 00    	jne    4092d0 <_d_isbaseof2+0x17b>
			{	offset = oc.interfaces[i].offset;
  409250:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409254:	48 8b 40 48          	mov    0x48(%rax),%rax
  409258:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  40925f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  409262:	48 63 d0             	movslq %eax,%rdx
  409265:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409269:	48 8b 40 40          	mov    0x40(%rax),%rax
  40926d:	48 39 c2             	cmp    %rax,%rdx
  409270:	73 0e                	jae    409280 <_d_isbaseof2+0x12b>
  409272:	8b 45 ec             	mov    -0x14(%rbp),%eax
  409275:	48 98                	cltq   
  409277:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40927e:	eb 22                	jmp    4092a2 <_d_isbaseof2+0x14d>
  409280:	48 c7 45 b0 0b 00 00 	movq   $0xb,-0x50(%rbp)
  409287:	00 
  409288:	48 c7 45 b8 52 21 41 	movq   $0x412152,-0x48(%rbp)
  40928f:	00 
  409290:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  409294:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  409298:	ba a0 00 00 00       	mov    $0xa0,%edx
  40929d:	e8 d3 16 00 00       	callq  40a975 <_d_array_bounds>
  4092a2:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4092a9:	48 c1 e0 05          	shl    $0x5,%rax
  4092ad:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  4092b4:	8b 40 18             	mov    0x18(%rax),%eax
  4092b7:	48 63 d0             	movslq %eax,%rdx
  4092ba:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4092be:	48 89 10             	mov    %rdx,(%rax)
				return 1;
  4092c1:	c7 85 44 ff ff ff 01 	movl   $0x1,-0xbc(%rbp)
  4092c8:	00 00 00 
  4092cb:	e9 5f 01 00 00       	jmpq   40942f <_d_isbaseof2+0x2da>
		for (i = 0; i < oc.interfaces.length; i++)
		{
			ClassInfo ic;

			ic = oc.interfaces[i].classinfo;
			if (ic is c)
  4092d0:	ff 45 ec             	incl   -0x14(%rbp)
  4092d3:	e9 d8 fe ff ff       	jmpq   4091b0 <_d_isbaseof2+0x5b>
			{	offset = oc.interfaces[i].offset;
				return 1;
			}
		}
		for (i = 0; i < oc.interfaces.length; i++)
  4092d8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  4092df:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4092e2:	48 63 d0             	movslq %eax,%rdx
  4092e5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4092e9:	48 8b 40 40          	mov    0x40(%rax),%rax
  4092ed:	48 39 c2             	cmp    %rax,%rdx
  4092f0:	0f 92 c0             	setb   %al
  4092f3:	83 f0 01             	xor    $0x1,%eax
  4092f6:	84 c0                	test   %al,%al
  4092f8:	0f 85 07 01 00 00    	jne    409405 <_d_isbaseof2+0x2b0>
		{
			ClassInfo ic;
  4092fe:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  409305:	00 

			ic = oc.interfaces[i].classinfo;
  409306:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40930a:	48 8b 40 48          	mov    0x48(%rax),%rax
  40930e:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  409315:	8b 45 ec             	mov    -0x14(%rbp),%eax
  409318:	48 63 d0             	movslq %eax,%rdx
  40931b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40931f:	48 8b 40 40          	mov    0x40(%rax),%rax
  409323:	48 39 c2             	cmp    %rax,%rdx
  409326:	73 0e                	jae    409336 <_d_isbaseof2+0x1e1>
  409328:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40932b:	48 98                	cltq   
  40932d:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  409334:	eb 22                	jmp    409358 <_d_isbaseof2+0x203>
  409336:	48 c7 45 c0 0b 00 00 	movq   $0xb,-0x40(%rbp)
  40933d:	00 
  40933e:	48 c7 45 c8 52 21 41 	movq   $0x412152,-0x38(%rbp)
  409345:	00 
  409346:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40934a:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40934e:	ba a8 00 00 00       	mov    $0xa8,%edx
  409353:	e8 1d 16 00 00       	callq  40a975 <_d_array_bounds>
  409358:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40935f:	48 c1 e0 05          	shl    $0x5,%rax
  409363:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  40936a:	48 8b 00             	mov    (%rax),%rax
  40936d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			if (_d_isbaseof2(ic, c, offset))
  409371:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  409375:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
  409379:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40937d:	e8 d3 fd ff ff       	callq  409155 <_d_isbaseof2>
  409382:	85 c0                	test   %eax,%eax
  409384:	74 77                	je     4093fd <_d_isbaseof2+0x2a8>
			{	offset = oc.interfaces[i].offset;
  409386:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40938a:	48 8b 40 48          	mov    0x48(%rax),%rax
  40938e:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  409395:	8b 45 ec             	mov    -0x14(%rbp),%eax
  409398:	48 63 d0             	movslq %eax,%rdx
  40939b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40939f:	48 8b 40 40          	mov    0x40(%rax),%rax
  4093a3:	48 39 c2             	cmp    %rax,%rdx
  4093a6:	73 0b                	jae    4093b3 <_d_isbaseof2+0x25e>
  4093a8:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4093ab:	48 98                	cltq   
  4093ad:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  4093b1:	eb 22                	jmp    4093d5 <_d_isbaseof2+0x280>
  4093b3:	48 c7 45 d0 0b 00 00 	movq   $0xb,-0x30(%rbp)
  4093ba:	00 
  4093bb:	48 c7 45 d8 52 21 41 	movq   $0x412152,-0x28(%rbp)
  4093c2:	00 
  4093c3:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4093c7:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4093cb:	ba aa 00 00 00       	mov    $0xaa,%edx
  4093d0:	e8 a0 15 00 00       	callq  40a975 <_d_array_bounds>
  4093d5:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  4093d9:	48 c1 e0 05          	shl    $0x5,%rax
  4093dd:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  4093e4:	8b 40 18             	mov    0x18(%rax),%eax
  4093e7:	48 63 d0             	movslq %eax,%rdx
  4093ea:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4093ee:	48 89 10             	mov    %rdx,(%rax)
				return 1;
  4093f1:	c7 85 44 ff ff ff 01 	movl   $0x1,-0xbc(%rbp)
  4093f8:	00 00 00 
  4093fb:	eb 32                	jmp    40942f <_d_isbaseof2+0x2da>
		for (i = 0; i < oc.interfaces.length; i++)
		{
			ClassInfo ic;

			ic = oc.interfaces[i].classinfo;
			if (_d_isbaseof2(ic, c, offset))
  4093fd:	ff 45 ec             	incl   -0x14(%rbp)
  409400:	e9 da fe ff ff       	jmpq   4092df <_d_isbaseof2+0x18a>
			{	offset = oc.interfaces[i].offset;
				return 1;
			}
		}
		oc = oc.base;
  409405:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409409:	48 8b 40 50          	mov    0x50(%rax),%rax
  40940d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  409411:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
  409416:	0f 95 c0             	setne  %al
  409419:	83 f0 01             	xor    $0x1,%eax
  40941c:	84 c0                	test   %al,%al
  40941e:	75 05                	jne    409425 <_d_isbaseof2+0x2d0>
  409420:	e9 67 fd ff ff       	jmpq   40918c <_d_isbaseof2+0x37>
	} while (oc);
	return 0;
  409425:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%rbp)
  40942c:	00 00 00 
  40942f:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
}
  409435:	c9                   	leaveq 
  409436:	c3                   	retq   

0000000000409437 <_d_isbaseof>:

int _d_isbaseof(ClassInfo oc, ClassInfo c)
  409437:	55                   	push   %rbp
  409438:	48 89 e5             	mov    %rsp,%rbp
  40943b:	48 83 ec 50          	sub    $0x50,%rsp
  40943f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  409443:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
{	int i;
  409447:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	if (oc is c)
  40944e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409452:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  409456:	75 0c                	jne    409464 <_d_isbaseof+0x2d>
		return 1;
  409458:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%rbp)
  40945f:	e9 fa 00 00 00       	jmpq   40955e <_d_isbaseof+0x127>
	do
	{
		if (oc.base is c)
  409464:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409468:	48 8b 40 50          	mov    0x50(%rax),%rax
  40946c:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  409470:	75 0c                	jne    40947e <_d_isbaseof+0x47>
			return 1;
  409472:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%rbp)
  409479:	e9 e0 00 00 00       	jmpq   40955e <_d_isbaseof+0x127>
		for (i = 0; i < oc.interfaces.length; i++)
  40947e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  409485:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409488:	48 63 d0             	movslq %eax,%rdx
  40948b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40948f:	48 8b 40 40          	mov    0x40(%rax),%rax
  409493:	48 39 c2             	cmp    %rax,%rdx
  409496:	0f 92 c0             	setb   %al
  409499:	83 f0 01             	xor    $0x1,%eax
  40949c:	84 c0                	test   %al,%al
  40949e:	0f 85 93 00 00 00    	jne    409537 <_d_isbaseof+0x100>
		{
			ClassInfo ic;
  4094a4:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4094ab:	00 

			ic = oc.interfaces[i].classinfo;
  4094ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4094b0:	48 8b 40 48          	mov    0x48(%rax),%rax
  4094b4:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  4094b8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4094bb:	48 63 d0             	movslq %eax,%rdx
  4094be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4094c2:	48 8b 40 40          	mov    0x40(%rax),%rax
  4094c6:	48 39 c2             	cmp    %rax,%rdx
  4094c9:	73 0b                	jae    4094d6 <_d_isbaseof+0x9f>
  4094cb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4094ce:	48 98                	cltq   
  4094d0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  4094d4:	eb 22                	jmp    4094f8 <_d_isbaseof+0xc1>
  4094d6:	48 c7 45 e0 0b 00 00 	movq   $0xb,-0x20(%rbp)
  4094dd:	00 
  4094de:	48 c7 45 e8 52 21 41 	movq   $0x412152,-0x18(%rbp)
  4094e5:	00 
  4094e6:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  4094ea:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4094ee:	ba c0 00 00 00       	mov    $0xc0,%edx
  4094f3:	e8 7d 14 00 00       	callq  40a975 <_d_array_bounds>
  4094f8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4094fc:	48 c1 e0 05          	shl    $0x5,%rax
  409500:	48 03 45 c0          	add    -0x40(%rbp),%rax
  409504:	48 8b 00             	mov    (%rax),%rax
  409507:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			if (ic is c || _d_isbaseof(ic, c))
  40950b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40950f:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  409513:	74 11                	je     409526 <_d_isbaseof+0xef>
  409515:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  409519:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40951d:	e8 15 ff ff ff       	callq  409437 <_d_isbaseof>
  409522:	85 c0                	test   %eax,%eax
  409524:	74 09                	je     40952f <_d_isbaseof+0xf8>
				return 1;
  409526:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%rbp)
  40952d:	eb 2f                	jmp    40955e <_d_isbaseof+0x127>
		for (i = 0; i < oc.interfaces.length; i++)
		{
			ClassInfo ic;

			ic = oc.interfaces[i].classinfo;
			if (ic is c || _d_isbaseof(ic, c))
  40952f:	ff 45 f4             	incl   -0xc(%rbp)
  409532:	e9 4e ff ff ff       	jmpq   409485 <_d_isbaseof+0x4e>
				return 1;
		}
		oc = oc.base;
  409537:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40953b:	48 8b 40 50          	mov    0x50(%rax),%rax
  40953f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  409543:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  409548:	0f 95 c0             	setne  %al
  40954b:	83 f0 01             	xor    $0x1,%eax
  40954e:	84 c0                	test   %al,%al
  409550:	75 05                	jne    409557 <_d_isbaseof+0x120>
  409552:	e9 0d ff ff ff       	jmpq   409464 <_d_isbaseof+0x2d>
	} while (oc);
	return 0;
  409557:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%rbp)
  40955e:	8b 45 bc             	mov    -0x44(%rbp),%eax
}
  409561:	c9                   	leaveq 
  409562:	c3                   	retq   

0000000000409563 <_d_interface_vtbl>:

/*********************************
 * Find the vtbl[] associated with Interface ic.
 */

void *_d_interface_vtbl(ClassInfo ic, Object o)
  409563:	55                   	push   %rbp
  409564:	48 89 e5             	mov    %rsp,%rbp
  409567:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  40956e:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  409572:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
{	int i;
  409576:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	ClassInfo oc;
  40957d:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  409584:	00 

	//printf("__d_interface_vtbl(o = %p, ic = %p)\n", o, ic);

	assert(o);
  409585:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  409589:	e8 1e f9 ff ff       	callq  408eac <_D9invariant12_d_invariantFC6ObjectZv>

	oc = o.classinfo;
  40958e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  409592:	48 8b 00             	mov    (%rax),%rax
  409595:	48 8b 00             	mov    (%rax),%rax
  409598:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (i = 0; i < oc.interfaces.length; i++)
  40959c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  4095a3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4095a6:	48 63 d0             	movslq %eax,%rdx
  4095a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4095ad:	48 8b 40 40          	mov    0x40(%rax),%rax
  4095b1:	48 39 c2             	cmp    %rax,%rdx
  4095b4:	0f 92 c0             	setb   %al
  4095b7:	83 f0 01             	xor    $0x1,%eax
  4095ba:	84 c0                	test   %al,%al
  4095bc:	0f 85 de 00 00 00    	jne    4096a0 <_d_interface_vtbl+0x13d>
	{
		ClassInfo oic;
  4095c2:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4095c9:	00 

		oic = oc.interfaces[i].classinfo;
  4095ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4095ce:	48 8b 40 48          	mov    0x48(%rax),%rax
  4095d2:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  4095d6:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4095d9:	48 63 d0             	movslq %eax,%rdx
  4095dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4095e0:	48 8b 40 40          	mov    0x40(%rax),%rax
  4095e4:	48 39 c2             	cmp    %rax,%rdx
  4095e7:	73 0b                	jae    4095f4 <_d_interface_vtbl+0x91>
  4095e9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4095ec:	48 98                	cltq   
  4095ee:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  4095f2:	eb 22                	jmp    409616 <_d_interface_vtbl+0xb3>
  4095f4:	48 c7 45 b0 0b 00 00 	movq   $0xb,-0x50(%rbp)
  4095fb:	00 
  4095fc:	48 c7 45 b8 52 21 41 	movq   $0x412152,-0x48(%rbp)
  409603:	00 
  409604:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  409608:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40960c:	ba da 00 00 00       	mov    $0xda,%edx
  409611:	e8 5f 13 00 00       	callq  40a975 <_d_array_bounds>
  409616:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40961a:	48 c1 e0 05          	shl    $0x5,%rax
  40961e:	48 03 45 80          	add    -0x80(%rbp),%rax
  409622:	48 8b 00             	mov    (%rax),%rax
  409625:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (oic is ic)
  409629:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40962d:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  409631:	75 65                	jne    409698 <_d_interface_vtbl+0x135>
		{
			return cast(void *)oc.interfaces[i].vtbl;
  409633:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409637:	48 8b 40 48          	mov    0x48(%rax),%rax
  40963b:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  40963f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409642:	48 63 d0             	movslq %eax,%rdx
  409645:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409649:	48 8b 40 40          	mov    0x40(%rax),%rax
  40964d:	48 39 c2             	cmp    %rax,%rdx
  409650:	73 0b                	jae    40965d <_d_interface_vtbl+0xfa>
  409652:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409655:	48 98                	cltq   
  409657:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  40965b:	eb 22                	jmp    40967f <_d_interface_vtbl+0x11c>
  40965d:	48 c7 45 c0 0b 00 00 	movq   $0xb,-0x40(%rbp)
  409664:	00 
  409665:	48 c7 45 c8 52 21 41 	movq   $0x412152,-0x38(%rbp)
  40966c:	00 
  40966d:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  409671:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  409675:	ba dd 00 00 00       	mov    $0xdd,%edx
  40967a:	e8 f6 12 00 00       	callq  40a975 <_d_array_bounds>
  40967f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409683:	48 c1 e0 05          	shl    $0x5,%rax
  409687:	48 03 45 90          	add    -0x70(%rbp),%rax
  40968b:	48 8b 40 10          	mov    0x10(%rax),%rax
  40968f:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  409696:	eb 2c                	jmp    4096c4 <_d_interface_vtbl+0x161>
	for (i = 0; i < oc.interfaces.length; i++)
	{
		ClassInfo oic;

		oic = oc.interfaces[i].classinfo;
		if (oic is ic)
  409698:	ff 45 f4             	incl   -0xc(%rbp)
  40969b:	e9 03 ff ff ff       	jmpq   4095a3 <_d_interface_vtbl+0x40>
		{
			return cast(void *)oc.interfaces[i].vtbl;
		}
	}
	assert(0);
  4096a0:	48 c7 45 d0 0b 00 00 	movq   $0xb,-0x30(%rbp)
  4096a7:	00 
  4096a8:	48 c7 45 d8 52 21 41 	movq   $0x412152,-0x28(%rbp)
  4096af:	00 
  4096b0:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4096b4:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4096b8:	ba e0 00 00 00       	mov    $0xe0,%edx
  4096bd:	e8 40 12 00 00       	callq  40a902 <_d_assert>
}
  4096c2:	eb 07                	jmp    4096cb <_d_interface_vtbl+0x168>
  4096c4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4096cb:	c9                   	leaveq 
  4096cc:	c3                   	retq   

00000000004096cd <_d_obj_eq>:

int _d_obj_eq(Object o1, Object o2)
  4096cd:	55                   	push   %rbp
  4096ce:	48 89 e5             	mov    %rsp,%rbp
  4096d1:	48 83 ec 20          	sub    $0x20,%rsp
  4096d5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4096d9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
{
    return o1 is o2 || (o1 && o1.opEquals(o2));
  4096dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4096e1:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  4096e5:	74 23                	je     40970a <_d_obj_eq+0x3d>
  4096e7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4096ec:	74 22                	je     409710 <_d_obj_eq+0x43>
  4096ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4096f2:	48 8b 00             	mov    (%rax),%rax
  4096f5:	48 83 c0 20          	add    $0x20,%rax
  4096f9:	48 8b 00             	mov    (%rax),%rax
  4096fc:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  409700:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  409704:	ff d0                	callq  *%rax
  409706:	85 c0                	test   %eax,%eax
  409708:	74 06                	je     409710 <_d_obj_eq+0x43>
  40970a:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  40970e:	eb 04                	jmp    409714 <_d_obj_eq+0x47>
  409710:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  409714:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
}
  409718:	c9                   	leaveq 
  409719:	c3                   	retq   

000000000040971a <_d_obj_cmp>:

int _d_obj_cmp(Object o1, Object o2)
  40971a:	55                   	push   %rbp
  40971b:	48 89 e5             	mov    %rsp,%rbp
  40971e:	48 83 ec 10          	sub    $0x10,%rsp
  409722:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409726:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
{
    return o1.opCmp(o2);
  40972a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40972e:	48 8b 00             	mov    (%rax),%rax
  409731:	48 83 c0 18          	add    $0x18,%rax
  409735:	48 8b 00             	mov    (%rax),%rax
  409738:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  40973c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  409740:	ff d0                	callq  *%rax
}
  409742:	c9                   	leaveq 
  409743:	c3                   	retq   

0000000000409744 <_d_switch_string>:

int _d_switch_string(char[][] table, char[] ca)
  409744:	55                   	push   %rbp
  409745:	48 89 e5             	mov    %rsp,%rbp
  409748:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp
  40974f:	49 89 d0             	mov    %rdx,%r8
  409752:	48 89 f8             	mov    %rdi,%rax
  409755:	48 89 f2             	mov    %rsi,%rdx
  409758:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  40975f:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  409766:	4c 89 c0             	mov    %r8,%rax
  409769:	48 89 ca             	mov    %rcx,%rdx
  40976c:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  409773:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
{
	int low;
  40977a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	int high;
  409781:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	int mid;
  409788:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
	int c;
  40978f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	char[] pca;
  409796:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  40979d:	00 
  40979e:	48 c7 45 88 00 00 00 	movq   $0x0,-0x78(%rbp)
  4097a5:	00 

	low = 0;
  4097a6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	high = table.length;
  4097ad:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  4097b4:	89 45 f4             	mov    %eax,-0xc(%rbp)

	if (high &&
  4097b7:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  4097bb:	0f 84 f4 02 00 00    	je     409ab5 <_d_switch_string+0x371>
  4097c1:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4097c8:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  4097cf:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  4097d6:	48 89 95 f0 fe ff ff 	mov    %rdx,-0x110(%rbp)
  4097dd:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  4097e4:	48 83 f8 00          	cmp    $0x0,%rax
  4097e8:	76 0d                	jbe    4097f7 <_d_switch_string+0xb3>
  4097ea:	48 c7 85 f8 fe ff ff 	movq   $0x0,-0x108(%rbp)
  4097f1:	00 00 00 00 
  4097f5:	eb 22                	jmp    409819 <_d_switch_string+0xd5>
  4097f7:	48 c7 45 90 0b 00 00 	movq   $0xb,-0x70(%rbp)
  4097fe:	00 
  4097ff:	48 c7 45 98 52 21 41 	movq   $0x412152,-0x68(%rbp)
  409806:	00 
  409807:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  40980b:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  40980f:	ba f9 00 00 00       	mov    $0xf9,%edx
  409814:	e8 5c 11 00 00       	callq  40a975 <_d_array_bounds>
  409819:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  409820:	48 c1 e0 04          	shl    $0x4,%rax
  409824:	48 03 85 f0 fe ff ff 	add    -0x110(%rbp),%rax
  40982b:	48 8b 00             	mov    (%rax),%rax
  40982e:	48 39 85 e8 fe ff ff 	cmp    %rax,-0x118(%rbp)
  409835:	0f 82 7a 02 00 00    	jb     409ab5 <_d_switch_string+0x371>
  40983b:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  409842:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  409849:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  409850:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  409857:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40985a:	ff c8                	dec    %eax
  40985c:	48 98                	cltq   
  40985e:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  409865:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40986c:	48 39 85 18 ff ff ff 	cmp    %rax,-0xe8(%rbp)
  409873:	73 10                	jae    409885 <_d_switch_string+0x141>
  409875:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  40987c:	48 89 95 10 ff ff ff 	mov    %rdx,-0xf0(%rbp)
  409883:	eb 22                	jmp    4098a7 <_d_switch_string+0x163>
  409885:	48 c7 45 a0 0b 00 00 	movq   $0xb,-0x60(%rbp)
  40988c:	00 
  40988d:	48 c7 45 a8 52 21 41 	movq   $0x412152,-0x58(%rbp)
  409894:	00 
  409895:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  409899:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40989d:	ba fa 00 00 00       	mov    $0xfa,%edx
  4098a2:	e8 ce 10 00 00       	callq  40a975 <_d_array_bounds>
  4098a7:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  4098ae:	48 c1 e0 04          	shl    $0x4,%rax
  4098b2:	48 03 85 08 ff ff ff 	add    -0xf8(%rbp),%rax
  4098b9:	48 8b 00             	mov    (%rax),%rax
  4098bc:	48 39 85 00 ff ff ff 	cmp    %rax,-0x100(%rbp)
  4098c3:	0f 87 ec 01 00 00    	ja     409ab5 <_d_switch_string+0x371>
		ca.length >= table[0].length &&
		ca.length <= table[high - 1].length)
	{
		// Looking for 0 length string, which would only be at the beginning
		if (ca.length == 0)
  4098c9:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4098d0:	48 85 c0             	test   %rax,%rax
  4098d3:	75 0f                	jne    4098e4 <_d_switch_string+0x1a0>
			return 0;
  4098d5:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%rbp)
  4098dc:	00 00 00 
  4098df:	e9 db 01 00 00       	jmpq   409abf <_d_switch_string+0x37b>

		char c1 = ca[0];
  4098e4:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
  4098eb:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
  4098f2:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4098f9:	48 83 f8 00          	cmp    $0x0,%rax
  4098fd:	76 0d                	jbe    40990c <_d_switch_string+0x1c8>
  4098ff:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  409906:	00 00 00 00 
  40990a:	eb 22                	jmp    40992e <_d_switch_string+0x1ea>
  40990c:	48 c7 45 b0 0b 00 00 	movq   $0xb,-0x50(%rbp)
  409913:	00 
  409914:	48 c7 45 b8 52 21 41 	movq   $0x412152,-0x48(%rbp)
  40991b:	00 
  40991c:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  409920:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  409924:	ba 00 01 00 00       	mov    $0x100,%edx
  409929:	e8 47 10 00 00       	callq  40a975 <_d_array_bounds>
  40992e:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  409935:	48 03 85 28 ff ff ff 	add    -0xd8(%rbp),%rax
  40993c:	0f b6 00             	movzbl (%rax),%eax
  40993f:	88 45 ff             	mov    %al,-0x1(%rbp)
  409942:	eb 00                	jmp    409944 <_d_switch_string+0x200>

		// Do binary search
		while (low < high)
  409944:	8b 45 f8             	mov    -0x8(%rbp),%eax
  409947:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  40994a:	0f 9c c0             	setl   %al
  40994d:	83 f0 01             	xor    $0x1,%eax
  409950:	84 c0                	test   %al,%al
  409952:	0f 85 5d 01 00 00    	jne    409ab5 <_d_switch_string+0x371>
		{
			mid = (low + high) >> 1;
  409958:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40995b:	03 45 f8             	add    -0x8(%rbp),%eax
  40995e:	d1 f8                	sar    %eax
  409960:	89 45 f0             	mov    %eax,-0x10(%rbp)
			pca = table[mid];
  409963:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40996a:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  409971:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409974:	48 63 d0             	movslq %eax,%rdx
  409977:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40997e:	48 39 c2             	cmp    %rax,%rdx
  409981:	73 0e                	jae    409991 <_d_switch_string+0x24d>
  409983:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409986:	48 98                	cltq   
  409988:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40998f:	eb 22                	jmp    4099b3 <_d_switch_string+0x26f>
  409991:	48 c7 45 c0 0b 00 00 	movq   $0xb,-0x40(%rbp)
  409998:	00 
  409999:	48 c7 45 c8 52 21 41 	movq   $0x412152,-0x38(%rbp)
  4099a0:	00 
  4099a1:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4099a5:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4099a9:	ba 06 01 00 00       	mov    $0x106,%edx
  4099ae:	e8 c2 0f 00 00       	callq  40a975 <_d_array_bounds>
  4099b3:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  4099ba:	48 c1 e0 04          	shl    $0x4,%rax
  4099be:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  4099c5:	48 01 c2             	add    %rax,%rdx
  4099c8:	48 8b 02             	mov    (%rdx),%rax
  4099cb:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  4099cf:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4099d3:	48 89 45 88          	mov    %rax,-0x78(%rbp)
			c = ca.length - pca.length;
  4099d7:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4099de:	89 c2                	mov    %eax,%edx
  4099e0:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  4099e4:	89 d1                	mov    %edx,%ecx
  4099e6:	29 c1                	sub    %eax,%ecx
  4099e8:	89 c8                	mov    %ecx,%eax
  4099ea:	89 45 ec             	mov    %eax,-0x14(%rbp)
			if (c == 0)
  4099ed:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  4099f1:	0f 85 a0 00 00 00    	jne    409a97 <_d_switch_string+0x353>
			{
				c = cast(ubyte)c1 - cast(ubyte)pca[0];
  4099f7:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  4099fb:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  409a01:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  409a05:	48 89 95 50 ff ff ff 	mov    %rdx,-0xb0(%rbp)
  409a0c:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  409a10:	48 83 f8 00          	cmp    $0x0,%rax
  409a14:	76 0d                	jbe    409a23 <_d_switch_string+0x2df>
  409a16:	48 c7 85 58 ff ff ff 	movq   $0x0,-0xa8(%rbp)
  409a1d:	00 00 00 00 
  409a21:	eb 22                	jmp    409a45 <_d_switch_string+0x301>
  409a23:	48 c7 45 d0 0b 00 00 	movq   $0xb,-0x30(%rbp)
  409a2a:	00 
  409a2b:	48 c7 45 d8 52 21 41 	movq   $0x412152,-0x28(%rbp)
  409a32:	00 
  409a33:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  409a37:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  409a3b:	ba 0a 01 00 00       	mov    $0x10a,%edx
  409a40:	e8 30 0f 00 00       	callq  40a975 <_d_array_bounds>
  409a45:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  409a4c:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  409a53:	0f b6 00             	movzbl (%rax),%eax
  409a56:	0f b6 c0             	movzbl %al,%eax
  409a59:	8b 8d 4c ff ff ff    	mov    -0xb4(%rbp),%ecx
  409a5f:	29 c1                	sub    %eax,%ecx
  409a61:	89 c8                	mov    %ecx,%eax
  409a63:	89 45 ec             	mov    %eax,-0x14(%rbp)
				if (c == 0)
  409a66:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  409a6a:	75 2b                	jne    409a97 <_d_switch_string+0x353>
				{
					c = memcmp(ca.ptr, pca.ptr, ca.length);
  409a6c:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  409a73:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  409a77:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
  409a7e:	e8 61 39 00 00       	callq  40d3e4 <_D6kernel4core6system6memcmpFPvPvmZl>
  409a83:	89 45 ec             	mov    %eax,-0x14(%rbp)
					if (c == 0)
  409a86:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  409a8a:	75 0b                	jne    409a97 <_d_switch_string+0x353>
					{
						return mid;
  409a8c:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409a8f:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%rbp)
  409a95:	eb 28                	jmp    409abf <_d_switch_string+0x37b>
					}
				}
			}
			if (c < 0)
  409a97:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  409a9b:	79 0b                	jns    409aa8 <_d_switch_string+0x364>
			{
				high = mid;
  409a9d:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409aa0:	89 45 f4             	mov    %eax,-0xc(%rbp)
  409aa3:	e9 9c fe ff ff       	jmpq   409944 <_d_switch_string+0x200>
			}
			else
			{
				low = mid + 1;
  409aa8:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409aab:	ff c0                	inc    %eax
  409aad:	89 45 f8             	mov    %eax,-0x8(%rbp)
					{
						return mid;
					}
				}
			}
			if (c < 0)
  409ab0:	e9 8f fe ff ff       	jmpq   409944 <_d_switch_string+0x200>
				low = mid + 1;
			}
		}
	}

	return -1;				// not found
  409ab5:	c7 85 24 ff ff ff ff 	movl   $0xffffffff,-0xdc(%rbp)
  409abc:	ff ff ff 
  409abf:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
}
  409ac5:	c9                   	leaveq 
  409ac6:	c3                   	retq   

0000000000409ac7 <_d_switch_ustring>:

int _d_switch_ustring(wchar[][] table, wchar[] ca)
  409ac7:	55                   	push   %rbp
  409ac8:	48 89 e5             	mov    %rsp,%rbp
  409acb:	48 83 ec 70          	sub    $0x70,%rsp
  409acf:	49 89 d0             	mov    %rdx,%r8
  409ad2:	48 89 f8             	mov    %rdi,%rax
  409ad5:	48 89 f2             	mov    %rsi,%rdx
  409ad8:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  409adc:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  409ae0:	4c 89 c0             	mov    %r8,%rax
  409ae3:	48 89 ca             	mov    %rcx,%rdx
  409ae6:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  409aea:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
{
	int low;
  409aee:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	int high;
  409af5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	int mid;
  409afc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	int c;
  409b03:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
	wchar[] pca;
  409b0a:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  409b11:	00 
  409b12:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  409b19:	00 

	low = 0;
  409b1a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	high = table.length;
  409b21:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  409b25:	89 45 f8             	mov    %eax,-0x8(%rbp)
  409b28:	eb 00                	jmp    409b2a <_d_switch_ustring+0x63>

	// Do binary search
	while (low < high)
  409b2a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  409b2d:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  409b30:	0f 9c c0             	setl   %al
  409b33:	83 f0 01             	xor    $0x1,%eax
  409b36:	84 c0                	test   %al,%al
  409b38:	0f 85 ca 00 00 00    	jne    409c08 <_d_switch_ustring+0x141>
	{
		mid = (low + high) >> 1;
  409b3e:	8b 45 f8             	mov    -0x8(%rbp),%eax
  409b41:	03 45 fc             	add    -0x4(%rbp),%eax
  409b44:	d1 f8                	sar    %eax
  409b46:	89 45 f4             	mov    %eax,-0xc(%rbp)
		pca = table[mid];
  409b49:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409b4d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  409b51:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409b54:	48 63 d0             	movslq %eax,%rdx
  409b57:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  409b5b:	48 39 c2             	cmp    %rax,%rdx
  409b5e:	73 0b                	jae    409b6b <_d_switch_ustring+0xa4>
  409b60:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409b63:	48 98                	cltq   
  409b65:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  409b69:	eb 22                	jmp    409b8d <_d_switch_ustring+0xc6>
  409b6b:	48 c7 45 e0 0b 00 00 	movq   $0xb,-0x20(%rbp)
  409b72:	00 
  409b73:	48 c7 45 e8 52 21 41 	movq   $0x412152,-0x18(%rbp)
  409b7a:	00 
  409b7b:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  409b7f:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  409b83:	ba 31 01 00 00       	mov    $0x131,%edx
  409b88:	e8 e8 0d 00 00       	callq  40a975 <_d_array_bounds>
  409b8d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  409b91:	48 c1 e0 04          	shl    $0x4,%rax
  409b95:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  409b99:	48 01 c2             	add    %rax,%rdx
  409b9c:	48 8b 02             	mov    (%rdx),%rax
  409b9f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  409ba3:	48 8b 42 08          	mov    0x8(%rdx),%rax
  409ba7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		c = ca.length - pca.length;
  409bab:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  409baf:	89 c2                	mov    %eax,%edx
  409bb1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409bb5:	89 d1                	mov    %edx,%ecx
  409bb7:	29 c1                	sub    %eax,%ecx
  409bb9:	89 c8                	mov    %ecx,%eax
  409bbb:	89 45 f0             	mov    %eax,-0x10(%rbp)
		if (c == 0)
  409bbe:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  409bc2:	75 26                	jne    409bea <_d_switch_ustring+0x123>
		{
			c = memcmp(ca.ptr, pca.ptr, ca.length * wchar.sizeof);
  409bc4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  409bc8:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  409bcc:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  409bd0:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  409bd4:	e8 0b 38 00 00       	callq  40d3e4 <_D6kernel4core6system6memcmpFPvPvmZl>
  409bd9:	89 45 f0             	mov    %eax,-0x10(%rbp)
			if (c == 0)
  409bdc:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  409be0:	75 08                	jne    409bea <_d_switch_ustring+0x123>
			{
				return mid;
  409be2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409be5:	89 45 ac             	mov    %eax,-0x54(%rbp)
  409be8:	eb 25                	jmp    409c0f <_d_switch_ustring+0x148>
			}
		}
		if (c < 0)
  409bea:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  409bee:	79 0b                	jns    409bfb <_d_switch_ustring+0x134>
		{
			high = mid;
  409bf0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409bf3:	89 45 f8             	mov    %eax,-0x8(%rbp)
  409bf6:	e9 2f ff ff ff       	jmpq   409b2a <_d_switch_ustring+0x63>
		}
		else
		{
			low = mid + 1;
  409bfb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409bfe:	ff c0                	inc    %eax
  409c00:	89 45 fc             	mov    %eax,-0x4(%rbp)
			if (c == 0)
			{
				return mid;
			}
		}
		if (c < 0)
  409c03:	e9 22 ff ff ff       	jmpq   409b2a <_d_switch_ustring+0x63>
		{
			low = mid + 1;
		}
	}

	return -1;				// not found
  409c08:	c7 45 ac ff ff ff ff 	movl   $0xffffffff,-0x54(%rbp)
  409c0f:	8b 45 ac             	mov    -0x54(%rbp),%eax
}
  409c12:	c9                   	leaveq 
  409c13:	c3                   	retq   

0000000000409c14 <_d_switch_dstring>:

int _d_switch_dstring(dchar[][] table, dchar[] ca)
  409c14:	55                   	push   %rbp
  409c15:	48 89 e5             	mov    %rsp,%rbp
  409c18:	48 83 ec 70          	sub    $0x70,%rsp
  409c1c:	49 89 d0             	mov    %rdx,%r8
  409c1f:	48 89 f8             	mov    %rdi,%rax
  409c22:	48 89 f2             	mov    %rsi,%rdx
  409c25:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  409c29:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  409c2d:	4c 89 c0             	mov    %r8,%rax
  409c30:	48 89 ca             	mov    %rcx,%rdx
  409c33:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  409c37:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
{
	int low;
  409c3b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	int high;
  409c42:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	int mid;
  409c49:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	int c;
  409c50:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
	dchar[] pca;
  409c57:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  409c5e:	00 
  409c5f:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  409c66:	00 

	low = 0;
  409c67:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	high = table.length;
  409c6e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  409c72:	89 45 f8             	mov    %eax,-0x8(%rbp)
  409c75:	eb 00                	jmp    409c77 <_d_switch_dstring+0x63>

	// Do binary search
	while (low < high)
  409c77:	8b 45 fc             	mov    -0x4(%rbp),%eax
  409c7a:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  409c7d:	0f 9c c0             	setl   %al
  409c80:	83 f0 01             	xor    $0x1,%eax
  409c83:	84 c0                	test   %al,%al
  409c85:	0f 85 ce 00 00 00    	jne    409d59 <_d_switch_dstring+0x145>
	{
		mid = (low + high) >> 1;
  409c8b:	8b 45 f8             	mov    -0x8(%rbp),%eax
  409c8e:	03 45 fc             	add    -0x4(%rbp),%eax
  409c91:	d1 f8                	sar    %eax
  409c93:	89 45 f4             	mov    %eax,-0xc(%rbp)
		pca = table[mid];
  409c96:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409c9a:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  409c9e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409ca1:	48 63 d0             	movslq %eax,%rdx
  409ca4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  409ca8:	48 39 c2             	cmp    %rax,%rdx
  409cab:	73 0b                	jae    409cb8 <_d_switch_dstring+0xa4>
  409cad:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409cb0:	48 98                	cltq   
  409cb2:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  409cb6:	eb 22                	jmp    409cda <_d_switch_dstring+0xc6>
  409cb8:	48 c7 45 e0 0b 00 00 	movq   $0xb,-0x20(%rbp)
  409cbf:	00 
  409cc0:	48 c7 45 e8 52 21 41 	movq   $0x412152,-0x18(%rbp)
  409cc7:	00 
  409cc8:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  409ccc:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  409cd0:	ba 57 01 00 00       	mov    $0x157,%edx
  409cd5:	e8 9b 0c 00 00       	callq  40a975 <_d_array_bounds>
  409cda:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  409cde:	48 c1 e0 04          	shl    $0x4,%rax
  409ce2:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  409ce6:	48 01 c2             	add    %rax,%rdx
  409ce9:	48 8b 02             	mov    (%rdx),%rax
  409cec:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  409cf0:	48 8b 42 08          	mov    0x8(%rdx),%rax
  409cf4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		c = ca.length - pca.length;
  409cf8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  409cfc:	89 c2                	mov    %eax,%edx
  409cfe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409d02:	89 d1                	mov    %edx,%ecx
  409d04:	29 c1                	sub    %eax,%ecx
  409d06:	89 c8                	mov    %ecx,%eax
  409d08:	89 45 f0             	mov    %eax,-0x10(%rbp)
		if (c == 0)
  409d0b:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  409d0f:	75 2a                	jne    409d3b <_d_switch_dstring+0x127>
		{
			c = memcmp(ca.ptr, pca.ptr, ca.length * dchar.sizeof);
  409d11:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  409d15:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  409d1c:	00 
  409d1d:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  409d21:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  409d25:	e8 ba 36 00 00       	callq  40d3e4 <_D6kernel4core6system6memcmpFPvPvmZl>
  409d2a:	89 45 f0             	mov    %eax,-0x10(%rbp)
			if (c == 0)
  409d2d:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  409d31:	75 08                	jne    409d3b <_d_switch_dstring+0x127>
			{
				return mid;
  409d33:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409d36:	89 45 ac             	mov    %eax,-0x54(%rbp)
  409d39:	eb 25                	jmp    409d60 <_d_switch_dstring+0x14c>
			}
		}
		if (c < 0)
  409d3b:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  409d3f:	79 0b                	jns    409d4c <_d_switch_dstring+0x138>
		{
			high = mid;
  409d41:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409d44:	89 45 f8             	mov    %eax,-0x8(%rbp)
  409d47:	e9 2b ff ff ff       	jmpq   409c77 <_d_switch_dstring+0x63>
		}
		else
		{
			low = mid + 1;
  409d4c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409d4f:	ff c0                	inc    %eax
  409d51:	89 45 fc             	mov    %eax,-0x4(%rbp)
			if (c == 0)
			{
				return mid;
			}
		}
		if (c < 0)
  409d54:	e9 1e ff ff ff       	jmpq   409c77 <_d_switch_dstring+0x63>
		{
			low = mid + 1;
		}
	}

	return -1;				// not found
  409d59:	c7 45 ac ff ff ff ff 	movl   $0xffffffff,-0x54(%rbp)
  409d60:	8b 45 ac             	mov    -0x54(%rbp),%eax
}
  409d63:	c9                   	leaveq 
  409d64:	c3                   	retq   

0000000000409d65 <_d_newclass>:
  409d65:	55                   	push   %rbp
  409d66:	48 89 e5             	mov    %rsp,%rbp
  409d69:	48 83 ec 30          	sub    $0x30,%rsp
  409d6d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
		{
			low = mid + 1;
		}
	}

	return -1;				// not found
  409d71:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  409d78:	00 
  409d79:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  409d80:	00 
  409d81:	48 c7 45 f0 41 00 00 	movq   $0x41,-0x10(%rbp)
  409d88:	00 
  409d89:	48 c7 45 f8 60 21 41 	movq   $0x412160,-0x8(%rbp)
  409d90:	00 
  409d91:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  409d95:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  409d99:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  409d9d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  409da1:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  409da7:	e8 81 0b 00 00       	callq  40a92d <_d_assert_msg>
  409dac:	c9                   	leaveq 
  409dad:	c3                   	retq   

0000000000409dae <_d_delinterface>:
  409dae:	55                   	push   %rbp
  409daf:	48 89 e5             	mov    %rsp,%rbp
  409db2:	48 83 ec 30          	sub    $0x30,%rsp
  409db6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  409dba:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  409dc1:	00 
  409dc2:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  409dc9:	00 
  409dca:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  409dd1:	00 
  409dd2:	48 c7 45 f8 a8 21 41 	movq   $0x4121a8,-0x8(%rbp)
  409dd9:	00 
  409dda:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  409dde:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  409de2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  409de6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  409dea:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  409df0:	e8 38 0b 00 00       	callq  40a92d <_d_assert_msg>
  409df5:	c9                   	leaveq 
  409df6:	c3                   	retq   

0000000000409df7 <_d_delclass>:
  409df7:	55                   	push   %rbp
  409df8:	48 89 e5             	mov    %rsp,%rbp
  409dfb:	48 83 ec 30          	sub    $0x30,%rsp
  409dff:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  409e03:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  409e0a:	00 
  409e0b:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  409e12:	00 
  409e13:	48 c7 45 f0 3c 00 00 	movq   $0x3c,-0x10(%rbp)
  409e1a:	00 
  409e1b:	48 c7 45 f8 e8 21 41 	movq   $0x4121e8,-0x8(%rbp)
  409e22:	00 
  409e23:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  409e27:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  409e2b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  409e2f:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  409e33:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  409e39:	e8 ef 0a 00 00       	callq  40a92d <_d_assert_msg>
  409e3e:	c9                   	leaveq 
  409e3f:	c3                   	retq   

0000000000409e40 <_d_newarrayT>:
  409e40:	55                   	push   %rbp
  409e41:	48 89 e5             	mov    %rsp,%rbp
  409e44:	48 83 ec 30          	sub    $0x30,%rsp
  409e48:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  409e4c:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  409e50:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  409e57:	00 
  409e58:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  409e5f:	00 
  409e60:	48 c7 45 f0 4f 00 00 	movq   $0x4f,-0x10(%rbp)
  409e67:	00 
  409e68:	48 c7 45 f8 28 22 41 	movq   $0x412228,-0x8(%rbp)
  409e6f:	00 
  409e70:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  409e74:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  409e78:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  409e7c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  409e80:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  409e86:	e8 a2 0a 00 00       	callq  40a92d <_d_assert_msg>
  409e8b:	c9                   	leaveq 
  409e8c:	c3                   	retq   

0000000000409e8d <_d_newarrayiT>:
  409e8d:	55                   	push   %rbp
  409e8e:	48 89 e5             	mov    %rsp,%rbp
  409e91:	48 83 ec 30          	sub    $0x30,%rsp
  409e95:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  409e99:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  409e9d:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  409ea4:	00 
  409ea5:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  409eac:	00 
  409ead:	48 c7 45 f0 50 00 00 	movq   $0x50,-0x10(%rbp)
  409eb4:	00 
  409eb5:	48 c7 45 f8 78 22 41 	movq   $0x412278,-0x8(%rbp)
  409ebc:	00 
  409ebd:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  409ec1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  409ec5:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  409ec9:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  409ecd:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  409ed3:	e8 55 0a 00 00       	callq  40a92d <_d_assert_msg>
  409ed8:	c9                   	leaveq 
  409ed9:	c3                   	retq   

0000000000409eda <_d_newarraymTp>:
  409eda:	55                   	push   %rbp
  409edb:	48 89 e5             	mov    %rsp,%rbp
  409ede:	48 83 ec 40          	sub    $0x40,%rsp
  409ee2:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  409ee6:	89 55 d4             	mov    %edx,-0x2c(%rbp)
  409ee9:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  409eed:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  409ef4:	00 
  409ef5:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  409efc:	00 
  409efd:	48 c7 45 f0 5c 00 00 	movq   $0x5c,-0x10(%rbp)
  409f04:	00 
  409f05:	48 c7 45 f8 d0 22 41 	movq   $0x4122d0,-0x8(%rbp)
  409f0c:	00 
  409f0d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  409f11:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  409f15:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  409f19:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  409f1d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  409f23:	e8 05 0a 00 00       	callq  40a92d <_d_assert_msg>
  409f28:	c9                   	leaveq 
  409f29:	c3                   	retq   

0000000000409f2a <_d_newarraymiTp>:
  409f2a:	55                   	push   %rbp
  409f2b:	48 89 e5             	mov    %rsp,%rbp
  409f2e:	48 83 ec 40          	sub    $0x40,%rsp
  409f32:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  409f36:	89 55 d4             	mov    %edx,-0x2c(%rbp)
  409f39:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  409f3d:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  409f44:	00 
  409f45:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  409f4c:	00 
  409f4d:	48 c7 45 f0 5d 00 00 	movq   $0x5d,-0x10(%rbp)
  409f54:	00 
  409f55:	48 c7 45 f8 30 23 41 	movq   $0x412330,-0x8(%rbp)
  409f5c:	00 
  409f5d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  409f61:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  409f65:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  409f69:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  409f6d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  409f73:	e8 b5 09 00 00       	callq  40a92d <_d_assert_msg>
  409f78:	c9                   	leaveq 
  409f79:	c3                   	retq   

0000000000409f7a <_d_delarray>:
  409f7a:	55                   	push   %rbp
  409f7b:	48 89 e5             	mov    %rsp,%rbp
  409f7e:	48 83 ec 30          	sub    $0x30,%rsp
  409f82:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  409f86:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  409f8d:	00 
  409f8e:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  409f95:	00 
  409f96:	48 c7 45 f0 3b 00 00 	movq   $0x3b,-0x10(%rbp)
  409f9d:	00 
  409f9e:	48 c7 45 f8 90 23 41 	movq   $0x412390,-0x8(%rbp)
  409fa5:	00 
  409fa6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  409faa:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  409fae:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  409fb2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  409fb6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  409fbc:	e8 6c 09 00 00       	callq  40a92d <_d_assert_msg>
  409fc1:	c9                   	leaveq 
  409fc2:	c3                   	retq   

0000000000409fc3 <_d_delmemory>:
  409fc3:	55                   	push   %rbp
  409fc4:	48 89 e5             	mov    %rsp,%rbp
  409fc7:	48 83 ec 30          	sub    $0x30,%rsp
  409fcb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  409fcf:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  409fd6:	00 
  409fd7:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  409fde:	00 
  409fdf:	48 c7 45 f0 3c 00 00 	movq   $0x3c,-0x10(%rbp)
  409fe6:	00 
  409fe7:	48 c7 45 f8 d0 23 41 	movq   $0x4123d0,-0x8(%rbp)
  409fee:	00 
  409fef:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  409ff3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  409ff7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  409ffb:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  409fff:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a005:	e8 23 09 00 00       	callq  40a92d <_d_assert_msg>
  40a00a:	c9                   	leaveq 
  40a00b:	c3                   	retq   

000000000040a00c <_d_callfinalizer>:
  40a00c:	55                   	push   %rbp
  40a00d:	48 89 e5             	mov    %rsp,%rbp
  40a010:	48 83 ec 30          	sub    $0x30,%rsp
  40a014:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a018:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a01f:	00 
  40a020:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a027:	00 
  40a028:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40a02f:	00 
  40a030:	48 c7 45 f8 10 24 41 	movq   $0x412410,-0x8(%rbp)
  40a037:	00 
  40a038:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a03c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a040:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a044:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a048:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a04e:	e8 da 08 00 00       	callq  40a92d <_d_assert_msg>
  40a053:	c9                   	leaveq 
  40a054:	c3                   	retq   

000000000040a055 <rt_finalize>:
  40a055:	55                   	push   %rbp
  40a056:	48 89 e5             	mov    %rsp,%rbp
  40a059:	48 83 ec 30          	sub    $0x30,%rsp
  40a05d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a061:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  40a065:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a06c:	00 
  40a06d:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a074:	00 
  40a075:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40a07c:	00 
  40a07d:	48 c7 45 f8 50 24 41 	movq   $0x412450,-0x8(%rbp)
  40a084:	00 
  40a085:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a089:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a08d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a091:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a095:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a09b:	e8 8d 08 00 00       	callq  40a92d <_d_assert_msg>
  40a0a0:	c9                   	leaveq 
  40a0a1:	c3                   	retq   

000000000040a0a2 <_d_arraysetlengthT>:
  40a0a2:	55                   	push   %rbp
  40a0a3:	48 89 e5             	mov    %rsp,%rbp
  40a0a6:	48 83 ec 40          	sub    $0x40,%rsp
  40a0aa:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a0ae:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a0b2:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  40a0b6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a0bd:	00 
  40a0be:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a0c5:	00 
  40a0c6:	48 c7 45 f0 63 00 00 	movq   $0x63,-0x10(%rbp)
  40a0cd:	00 
  40a0ce:	48 c7 45 f8 a0 24 41 	movq   $0x4124a0,-0x8(%rbp)
  40a0d5:	00 
  40a0d6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a0da:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a0de:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a0e2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a0e6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a0ec:	e8 3c 08 00 00       	callq  40a92d <_d_assert_msg>
  40a0f1:	c9                   	leaveq 
  40a0f2:	c3                   	retq   

000000000040a0f3 <_d_arraysetlengthiT>:
  40a0f3:	55                   	push   %rbp
  40a0f4:	48 89 e5             	mov    %rsp,%rbp
  40a0f7:	48 83 ec 40          	sub    $0x40,%rsp
  40a0fb:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a0ff:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a103:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  40a107:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a10e:	00 
  40a10f:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a116:	00 
  40a117:	48 c7 45 f0 64 00 00 	movq   $0x64,-0x10(%rbp)
  40a11e:	00 
  40a11f:	48 c7 45 f8 08 25 41 	movq   $0x412508,-0x8(%rbp)
  40a126:	00 
  40a127:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a12b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a12f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a133:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a137:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a13d:	e8 eb 07 00 00       	callq  40a92d <_d_assert_msg>
  40a142:	c9                   	leaveq 
  40a143:	c3                   	retq   

000000000040a144 <_d_arrayappendT>:
  40a144:	55                   	push   %rbp
  40a145:	48 89 e5             	mov    %rsp,%rbp
  40a148:	48 83 ec 40          	sub    $0x40,%rsp
  40a14c:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a150:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a154:	4c 89 c0             	mov    %r8,%rax
  40a157:	48 89 ca             	mov    %rcx,%rdx
  40a15a:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  40a15e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40a162:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a169:	00 
  40a16a:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a171:	00 
  40a172:	48 c7 45 f0 58 00 00 	movq   $0x58,-0x10(%rbp)
  40a179:	00 
  40a17a:	48 c7 45 f8 70 25 41 	movq   $0x412570,-0x8(%rbp)
  40a181:	00 
  40a182:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a186:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a18a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a18e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a192:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a198:	e8 90 07 00 00       	callq  40a92d <_d_assert_msg>
  40a19d:	c9                   	leaveq 
  40a19e:	c3                   	retq   

000000000040a19f <_d_arrayappendcTp>:
  40a19f:	55                   	push   %rbp
  40a1a0:	48 89 e5             	mov    %rsp,%rbp
  40a1a3:	48 83 ec 40          	sub    $0x40,%rsp
  40a1a7:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a1ab:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a1af:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  40a1b3:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a1ba:	00 
  40a1bb:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a1c2:	00 
  40a1c3:	48 c7 45 f0 62 00 00 	movq   $0x62,-0x10(%rbp)
  40a1ca:	00 
  40a1cb:	48 c7 45 f8 d0 25 41 	movq   $0x4125d0,-0x8(%rbp)
  40a1d2:	00 
  40a1d3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a1d7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a1db:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a1df:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a1e3:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a1e9:	e8 3f 07 00 00       	callq  40a92d <_d_assert_msg>
  40a1ee:	c9                   	leaveq 
  40a1ef:	c3                   	retq   

000000000040a1f0 <_d_arraycatT>:
  40a1f0:	55                   	push   %rbp
  40a1f1:	48 89 e5             	mov    %rsp,%rbp
  40a1f4:	48 83 ec 50          	sub    $0x50,%rsp
  40a1f8:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a1fc:	4c 89 c6             	mov    %r8,%rsi
  40a1ff:	4c 89 cf             	mov    %r9,%rdi
  40a202:	48 89 d0             	mov    %rdx,%rax
  40a205:	48 89 ca             	mov    %rcx,%rdx
  40a208:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40a20c:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a210:	48 89 f0             	mov    %rsi,%rax
  40a213:	48 89 fa             	mov    %rdi,%rdx
  40a216:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40a21a:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  40a21e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a225:	00 
  40a226:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a22d:	00 
  40a22e:	48 c7 45 f0 55 00 00 	movq   $0x55,-0x10(%rbp)
  40a235:	00 
  40a236:	48 c7 45 f8 38 26 41 	movq   $0x412638,-0x8(%rbp)
  40a23d:	00 
  40a23e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a242:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a246:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a24a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a24e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a254:	e8 d4 06 00 00       	callq  40a92d <_d_assert_msg>
  40a259:	c9                   	leaveq 
  40a25a:	c3                   	retq   

000000000040a25b <_d_arraycatnT>:
  40a25b:	55                   	push   %rbp
  40a25c:	48 89 e5             	mov    %rsp,%rbp
  40a25f:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  40a266:	48 89 b5 28 ff ff ff 	mov    %rsi,-0xd8(%rbp)
  40a26d:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  40a274:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  40a27b:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  40a282:	0f b6 c0             	movzbl %al,%eax
  40a285:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  40a28c:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
  40a293:	48 8d 04 8d 00 00 00 	lea    0x0(,%rcx,4),%rax
  40a29a:	00 
  40a29b:	48 c7 85 18 ff ff ff 	movq   $0x40a2da,-0xe8(%rbp)
  40a2a2:	da a2 40 00 
  40a2a6:	48 29 85 18 ff ff ff 	sub    %rax,-0xe8(%rbp)
  40a2ad:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  40a2b1:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
  40a2b8:	ff e1                	jmpq   *%rcx
  40a2ba:	0f 29 78 f1          	movaps %xmm7,-0xf(%rax)
  40a2be:	0f 29 70 e1          	movaps %xmm6,-0x1f(%rax)
  40a2c2:	0f 29 68 d1          	movaps %xmm5,-0x2f(%rax)
  40a2c6:	0f 29 60 c1          	movaps %xmm4,-0x3f(%rax)
  40a2ca:	0f 29 58 b1          	movaps %xmm3,-0x4f(%rax)
  40a2ce:	0f 29 50 a1          	movaps %xmm2,-0x5f(%rax)
  40a2d2:	0f 29 48 91          	movaps %xmm1,-0x6f(%rax)
  40a2d6:	0f 29 40 81          	movaps %xmm0,-0x7f(%rax)
  40a2da:	89 95 24 ff ff ff    	mov    %edx,-0xdc(%rbp)
  40a2e0:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  40a2e7:	00 00 00 00 
  40a2eb:	48 c7 85 38 ff ff ff 	movq   $0x412082,-0xc8(%rbp)
  40a2f2:	82 20 41 00 
  40a2f6:	48 c7 85 40 ff ff ff 	movq   $0x4f,-0xc0(%rbp)
  40a2fd:	4f 00 00 00 
  40a301:	48 c7 85 48 ff ff ff 	movq   $0x412690,-0xb8(%rbp)
  40a308:	90 26 41 00 
  40a30c:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  40a313:	48 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%rcx
  40a31a:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
  40a321:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
  40a328:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a32e:	e8 fa 05 00 00       	callq  40a92d <_d_assert_msg>
  40a333:	c9                   	leaveq 
  40a334:	c3                   	retq   

000000000040a335 <_adDupT>:
  40a335:	55                   	push   %rbp
  40a336:	48 89 e5             	mov    %rsp,%rbp
  40a339:	48 83 ec 40          	sub    $0x40,%rsp
  40a33d:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a341:	48 89 d0             	mov    %rdx,%rax
  40a344:	48 89 ca             	mov    %rcx,%rdx
  40a347:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40a34b:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a34f:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a356:	00 
  40a357:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a35e:	00 
  40a35f:	48 c7 45 f0 44 00 00 	movq   $0x44,-0x10(%rbp)
  40a366:	00 
  40a367:	48 c7 45 f8 e0 26 41 	movq   $0x4126e0,-0x8(%rbp)
  40a36e:	00 
  40a36f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a373:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a377:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a37b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a37f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a385:	e8 a3 05 00 00       	callq  40a92d <_d_assert_msg>
  40a38a:	c9                   	leaveq 
  40a38b:	c3                   	retq   

000000000040a38c <gc_init>:
  40a38c:	55                   	push   %rbp
  40a38d:	48 89 e5             	mov    %rsp,%rbp
  40a390:	48 83 ec 20          	sub    $0x20,%rsp
  40a394:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a39b:	00 
  40a39c:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a3a3:	00 
  40a3a4:	48 c7 45 f0 2f 00 00 	movq   $0x2f,-0x10(%rbp)
  40a3ab:	00 
  40a3ac:	48 c7 45 f8 28 27 41 	movq   $0x412728,-0x8(%rbp)
  40a3b3:	00 
  40a3b4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a3b8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a3bc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a3c0:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a3c4:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a3ca:	e8 5e 05 00 00       	callq  40a92d <_d_assert_msg>
  40a3cf:	c9                   	leaveq 
  40a3d0:	c3                   	retq   

000000000040a3d1 <gc_term>:
  40a3d1:	55                   	push   %rbp
  40a3d2:	48 89 e5             	mov    %rsp,%rbp
  40a3d5:	48 83 ec 20          	sub    $0x20,%rsp
  40a3d9:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a3e0:	00 
  40a3e1:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a3e8:	00 
  40a3e9:	48 c7 45 f0 2f 00 00 	movq   $0x2f,-0x10(%rbp)
  40a3f0:	00 
  40a3f1:	48 c7 45 f8 58 27 41 	movq   $0x412758,-0x8(%rbp)
  40a3f8:	00 
  40a3f9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a3fd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a401:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a405:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a409:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a40f:	e8 19 05 00 00       	callq  40a92d <_d_assert_msg>
  40a414:	c9                   	leaveq 
  40a415:	c3                   	retq   

000000000040a416 <gc_enable>:
  40a416:	55                   	push   %rbp
  40a417:	48 89 e5             	mov    %rsp,%rbp
  40a41a:	48 83 ec 20          	sub    $0x20,%rsp
  40a41e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a425:	00 
  40a426:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a42d:	00 
  40a42e:	48 c7 45 f0 31 00 00 	movq   $0x31,-0x10(%rbp)
  40a435:	00 
  40a436:	48 c7 45 f8 88 27 41 	movq   $0x412788,-0x8(%rbp)
  40a43d:	00 
  40a43e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a442:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a446:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a44a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a44e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a454:	e8 d4 04 00 00       	callq  40a92d <_d_assert_msg>
  40a459:	c9                   	leaveq 
  40a45a:	c3                   	retq   

000000000040a45b <gc_disable>:
  40a45b:	55                   	push   %rbp
  40a45c:	48 89 e5             	mov    %rsp,%rbp
  40a45f:	48 83 ec 20          	sub    $0x20,%rsp
  40a463:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a46a:	00 
  40a46b:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a472:	00 
  40a473:	48 c7 45 f0 32 00 00 	movq   $0x32,-0x10(%rbp)
  40a47a:	00 
  40a47b:	48 c7 45 f8 c0 27 41 	movq   $0x4127c0,-0x8(%rbp)
  40a482:	00 
  40a483:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a487:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a48b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a48f:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a493:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a499:	e8 8f 04 00 00       	callq  40a92d <_d_assert_msg>
  40a49e:	c9                   	leaveq 
  40a49f:	c3                   	retq   

000000000040a4a0 <gc_collect>:
  40a4a0:	55                   	push   %rbp
  40a4a1:	48 89 e5             	mov    %rsp,%rbp
  40a4a4:	48 83 ec 20          	sub    $0x20,%rsp
  40a4a8:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a4af:	00 
  40a4b0:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a4b7:	00 
  40a4b8:	48 c7 45 f0 32 00 00 	movq   $0x32,-0x10(%rbp)
  40a4bf:	00 
  40a4c0:	48 c7 45 f8 f8 27 41 	movq   $0x4127f8,-0x8(%rbp)
  40a4c7:	00 
  40a4c8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a4cc:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a4d0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a4d4:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a4d8:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a4de:	e8 4a 04 00 00       	callq  40a92d <_d_assert_msg>
  40a4e3:	c9                   	leaveq 
  40a4e4:	c3                   	retq   

000000000040a4e5 <gc_getAttr>:
  40a4e5:	55                   	push   %rbp
  40a4e6:	48 89 e5             	mov    %rsp,%rbp
  40a4e9:	48 83 ec 30          	sub    $0x30,%rsp
  40a4ed:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a4f1:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a4f8:	00 
  40a4f9:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a500:	00 
  40a501:	48 c7 45 f0 3b 00 00 	movq   $0x3b,-0x10(%rbp)
  40a508:	00 
  40a509:	48 c7 45 f8 30 28 41 	movq   $0x412830,-0x8(%rbp)
  40a510:	00 
  40a511:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a515:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a519:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a51d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a521:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a527:	e8 01 04 00 00       	callq  40a92d <_d_assert_msg>
  40a52c:	c9                   	leaveq 
  40a52d:	c3                   	retq   

000000000040a52e <gc_setAttr>:
  40a52e:	55                   	push   %rbp
  40a52f:	48 89 e5             	mov    %rsp,%rbp
  40a532:	48 83 ec 30          	sub    $0x30,%rsp
  40a536:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a53a:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  40a53d:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a544:	00 
  40a545:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a54c:	00 
  40a54d:	48 c7 45 f0 43 00 00 	movq   $0x43,-0x10(%rbp)
  40a554:	00 
  40a555:	48 c7 45 f8 70 28 41 	movq   $0x412870,-0x8(%rbp)
  40a55c:	00 
  40a55d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a561:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a565:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a569:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a56d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a573:	e8 b5 03 00 00       	callq  40a92d <_d_assert_msg>
  40a578:	c9                   	leaveq 
  40a579:	c3                   	retq   

000000000040a57a <gc_clrAttr>:
  40a57a:	55                   	push   %rbp
  40a57b:	48 89 e5             	mov    %rsp,%rbp
  40a57e:	48 83 ec 30          	sub    $0x30,%rsp
  40a582:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a586:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  40a589:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a590:	00 
  40a591:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a598:	00 
  40a599:	48 c7 45 f0 43 00 00 	movq   $0x43,-0x10(%rbp)
  40a5a0:	00 
  40a5a1:	48 c7 45 f8 b8 28 41 	movq   $0x4128b8,-0x8(%rbp)
  40a5a8:	00 
  40a5a9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a5ad:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a5b1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a5b5:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a5b9:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a5bf:	e8 69 03 00 00       	callq  40a92d <_d_assert_msg>
  40a5c4:	c9                   	leaveq 
  40a5c5:	c3                   	retq   

000000000040a5c6 <gc_malloc>:
  40a5c6:	55                   	push   %rbp
  40a5c7:	48 89 e5             	mov    %rsp,%rbp
  40a5ca:	48 83 ec 30          	sub    $0x30,%rsp
  40a5ce:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a5d2:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  40a5d5:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a5dc:	00 
  40a5dd:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a5e4:	00 
  40a5e5:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40a5ec:	00 
  40a5ed:	48 c7 45 f8 00 29 41 	movq   $0x412900,-0x8(%rbp)
  40a5f4:	00 
  40a5f5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a5f9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a5fd:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a601:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a605:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a60b:	e8 1d 03 00 00       	callq  40a92d <_d_assert_msg>
  40a610:	c9                   	leaveq 
  40a611:	c3                   	retq   

000000000040a612 <gc_calloc>:
  40a612:	55                   	push   %rbp
  40a613:	48 89 e5             	mov    %rsp,%rbp
  40a616:	48 83 ec 30          	sub    $0x30,%rsp
  40a61a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a61e:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  40a621:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a628:	00 
  40a629:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a630:	00 
  40a631:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40a638:	00 
  40a639:	48 c7 45 f8 50 29 41 	movq   $0x412950,-0x8(%rbp)
  40a640:	00 
  40a641:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a645:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a649:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a64d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a651:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a657:	e8 d1 02 00 00       	callq  40a92d <_d_assert_msg>
  40a65c:	c9                   	leaveq 
  40a65d:	c3                   	retq   

000000000040a65e <gc_realloc>:
  40a65e:	55                   	push   %rbp
  40a65f:	48 89 e5             	mov    %rsp,%rbp
  40a662:	48 83 ec 40          	sub    $0x40,%rsp
  40a666:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a66a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40a66e:	89 55 cc             	mov    %edx,-0x34(%rbp)
  40a671:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a678:	00 
  40a679:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a680:	00 
  40a681:	48 c7 45 f0 54 00 00 	movq   $0x54,-0x10(%rbp)
  40a688:	00 
  40a689:	48 c7 45 f8 a0 29 41 	movq   $0x4129a0,-0x8(%rbp)
  40a690:	00 
  40a691:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a695:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a699:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a69d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a6a1:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a6a7:	e8 81 02 00 00       	callq  40a92d <_d_assert_msg>
  40a6ac:	c9                   	leaveq 
  40a6ad:	c3                   	retq   

000000000040a6ae <gc_extend>:
  40a6ae:	55                   	push   %rbp
  40a6af:	48 89 e5             	mov    %rsp,%rbp
  40a6b2:	48 83 ec 40          	sub    $0x40,%rsp
  40a6b6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a6ba:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40a6be:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40a6c2:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a6c9:	00 
  40a6ca:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a6d1:	00 
  40a6d2:	48 c7 45 f0 52 00 00 	movq   $0x52,-0x10(%rbp)
  40a6d9:	00 
  40a6da:	48 c7 45 f8 f8 29 41 	movq   $0x4129f8,-0x8(%rbp)
  40a6e1:	00 
  40a6e2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a6e6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a6ea:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a6ee:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a6f2:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a6f8:	e8 30 02 00 00       	callq  40a92d <_d_assert_msg>
  40a6fd:	c9                   	leaveq 
  40a6fe:	c3                   	retq   

000000000040a6ff <gc_free>:
  40a6ff:	55                   	push   %rbp
  40a700:	48 89 e5             	mov    %rsp,%rbp
  40a703:	48 83 ec 30          	sub    $0x30,%rsp
  40a707:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a70b:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a712:	00 
  40a713:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a71a:	00 
  40a71b:	48 c7 45 f0 38 00 00 	movq   $0x38,-0x10(%rbp)
  40a722:	00 
  40a723:	48 c7 45 f8 50 2a 41 	movq   $0x412a50,-0x8(%rbp)
  40a72a:	00 
  40a72b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a72f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a733:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a737:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a73b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a741:	e8 e7 01 00 00       	callq  40a92d <_d_assert_msg>
  40a746:	c9                   	leaveq 
  40a747:	c3                   	retq   

000000000040a748 <gc_sizeOf>:
  40a748:	55                   	push   %rbp
  40a749:	48 89 e5             	mov    %rsp,%rbp
  40a74c:	48 83 ec 30          	sub    $0x30,%rsp
  40a750:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a754:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a75b:	00 
  40a75c:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a763:	00 
  40a764:	48 c7 45 f0 3c 00 00 	movq   $0x3c,-0x10(%rbp)
  40a76b:	00 
  40a76c:	48 c7 45 f8 90 2a 41 	movq   $0x412a90,-0x8(%rbp)
  40a773:	00 
  40a774:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a778:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a77c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a780:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a784:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a78a:	e8 9e 01 00 00       	callq  40a92d <_d_assert_msg>
  40a78f:	c9                   	leaveq 
  40a790:	c3                   	retq   

000000000040a791 <gc_addRoot>:
  40a791:	55                   	push   %rbp
  40a792:	48 89 e5             	mov    %rsp,%rbp
  40a795:	48 83 ec 30          	sub    $0x30,%rsp
  40a799:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a79d:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a7a4:	00 
  40a7a5:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a7ac:	00 
  40a7ad:	48 c7 45 f0 3b 00 00 	movq   $0x3b,-0x10(%rbp)
  40a7b4:	00 
  40a7b5:	48 c7 45 f8 d0 2a 41 	movq   $0x412ad0,-0x8(%rbp)
  40a7bc:	00 
  40a7bd:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a7c1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a7c5:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a7c9:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a7cd:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a7d3:	e8 55 01 00 00       	callq  40a92d <_d_assert_msg>
  40a7d8:	c9                   	leaveq 
  40a7d9:	c3                   	retq   

000000000040a7da <gc_addRange>:
  40a7da:	55                   	push   %rbp
  40a7db:	48 89 e5             	mov    %rsp,%rbp
  40a7de:	48 83 ec 30          	sub    $0x30,%rsp
  40a7e2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a7e6:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40a7ea:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a7f1:	00 
  40a7f2:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a7f9:	00 
  40a7fa:	48 c7 45 f0 47 00 00 	movq   $0x47,-0x10(%rbp)
  40a801:	00 
  40a802:	48 c7 45 f8 10 2b 41 	movq   $0x412b10,-0x8(%rbp)
  40a809:	00 
  40a80a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a80e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a812:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a816:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a81a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a820:	e8 08 01 00 00       	callq  40a92d <_d_assert_msg>
  40a825:	c9                   	leaveq 
  40a826:	c3                   	retq   

000000000040a827 <gc_removeRoot>:
  40a827:	55                   	push   %rbp
  40a828:	48 89 e5             	mov    %rsp,%rbp
  40a82b:	48 83 ec 30          	sub    $0x30,%rsp
  40a82f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a833:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a83a:	00 
  40a83b:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a842:	00 
  40a843:	48 c7 45 f0 3e 00 00 	movq   $0x3e,-0x10(%rbp)
  40a84a:	00 
  40a84b:	48 c7 45 f8 58 2b 41 	movq   $0x412b58,-0x8(%rbp)
  40a852:	00 
  40a853:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a857:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a85b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a85f:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a863:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a869:	e8 bf 00 00 00       	callq  40a92d <_d_assert_msg>
  40a86e:	c9                   	leaveq 
  40a86f:	c3                   	retq   

000000000040a870 <gc_removeRange>:
  40a870:	55                   	push   %rbp
  40a871:	48 89 e5             	mov    %rsp,%rbp
  40a874:	48 83 ec 30          	sub    $0x30,%rsp
  40a878:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a87c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a883:	00 
  40a884:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a88b:	00 
  40a88c:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40a893:	00 
  40a894:	48 c7 45 f8 98 2b 41 	movq   $0x412b98,-0x8(%rbp)
  40a89b:	00 
  40a89c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a8a0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a8a4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a8a8:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a8ac:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a8b2:	e8 76 00 00 00       	callq  40a92d <_d_assert_msg>
  40a8b7:	c9                   	leaveq 
  40a8b8:	c3                   	retq   

000000000040a8b9 <onCollectResource>:
  40a8b9:	55                   	push   %rbp
  40a8ba:	48 89 e5             	mov    %rsp,%rbp
  40a8bd:	48 83 ec 30          	sub    $0x30,%rsp
  40a8c1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a8c5:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a8cc:	00 
  40a8cd:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40a8d4:	00 
  40a8d5:	48 c7 45 f0 45 00 00 	movq   $0x45,-0x10(%rbp)
  40a8dc:	00 
  40a8dd:	48 c7 45 f8 d8 2b 41 	movq   $0x412bd8,-0x8(%rbp)
  40a8e4:	00 
  40a8e5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a8e9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a8ed:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a8f1:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a8f5:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a8fb:	e8 2d 00 00 00       	callq  40a92d <_d_assert_msg>
  40a900:	c9                   	leaveq 
  40a901:	c3                   	retq   

000000000040a902 <_d_assert>:

/**************************************************
 Exception stubs
**************************************************/

void _d_assert( char[] file, uint line )
  40a902:	55                   	push   %rbp
  40a903:	48 89 e5             	mov    %rsp,%rbp
  40a906:	48 83 ec 20          	sub    $0x20,%rsp
  40a90a:	89 55 ec             	mov    %edx,-0x14(%rbp)
  40a90d:	48 89 f8             	mov    %rdi,%rax
  40a910:	48 89 f2             	mov    %rsi,%rdx
  40a913:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40a917:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
{
    onAssertError( file, line );
  40a91b:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40a91e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a922:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a926:	e8 a0 00 00 00       	callq  40a9cb <onAssertError>
}
  40a92b:	c9                   	leaveq 
  40a92c:	c3                   	retq   

000000000040a92d <_d_assert_msg>:

void _d_assert_msg( char[] msg, char[] file, uint line )
  40a92d:	55                   	push   %rbp
  40a92e:	48 89 e5             	mov    %rsp,%rbp
  40a931:	48 83 ec 30          	sub    $0x30,%rsp
  40a935:	49 89 d1             	mov    %rdx,%r9
  40a938:	44 89 45 dc          	mov    %r8d,-0x24(%rbp)
  40a93c:	48 89 f8             	mov    %rdi,%rax
  40a93f:	48 89 f2             	mov    %rsi,%rdx
  40a942:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40a946:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  40a94a:	4c 89 c8             	mov    %r9,%rax
  40a94d:	48 89 ca             	mov    %rcx,%rdx
  40a950:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40a954:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
{
    onAssertErrorMsg( file, line, msg );
  40a958:	8b 55 dc             	mov    -0x24(%rbp),%edx
  40a95b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40a95f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a963:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40a967:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40a96b:	49 89 c0             	mov    %rax,%r8
  40a96e:	e8 a1 00 00 00       	callq  40aa14 <onAssertErrorMsg>
}
  40a973:	c9                   	leaveq 
  40a974:	c3                   	retq   

000000000040a975 <_d_array_bounds>:

void _d_array_bounds( char[] file, uint line )
  40a975:	55                   	push   %rbp
  40a976:	48 89 e5             	mov    %rsp,%rbp
  40a979:	48 83 ec 20          	sub    $0x20,%rsp
  40a97d:	89 55 ec             	mov    %edx,-0x14(%rbp)
  40a980:	48 89 f8             	mov    %rdi,%rax
  40a983:	48 89 f2             	mov    %rsi,%rdx
  40a986:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40a98a:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
{
    onArrayBoundsError( file, line );
  40a98e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40a991:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a995:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a999:	e8 cd 00 00 00       	callq  40aa6b <onArrayBoundsError>
}
  40a99e:	c9                   	leaveq 
  40a99f:	c3                   	retq   

000000000040a9a0 <_d_switch_error>:

void _d_switch_error( char[] file, uint line )
  40a9a0:	55                   	push   %rbp
  40a9a1:	48 89 e5             	mov    %rsp,%rbp
  40a9a4:	48 83 ec 20          	sub    $0x20,%rsp
  40a9a8:	89 55 ec             	mov    %edx,-0x14(%rbp)
  40a9ab:	48 89 f8             	mov    %rdi,%rax
  40a9ae:	48 89 f2             	mov    %rsi,%rdx
  40a9b1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40a9b5:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
{
    onSwitchError( file, line );
  40a9b9:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40a9bc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a9c0:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a9c4:	e8 de 00 00 00       	callq  40aaa7 <onSwitchError>
}
  40a9c9:	c9                   	leaveq 
  40a9ca:	c3                   	retq   

000000000040a9cb <onAssertError>:

private void onAssertError(char[] file, size_t line)
  40a9cb:	55                   	push   %rbp
  40a9cc:	48 89 e5             	mov    %rsp,%rbp
  40a9cf:	48 83 ec 30          	sub    $0x30,%rsp
  40a9d3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40a9d7:	48 89 f8             	mov    %rdi,%rax
  40a9da:	48 89 f2             	mov    %rsi,%rdx
  40a9dd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40a9e1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
{
	error("assert failed:"); error(file);
  40a9e5:	48 c7 45 f0 0e 00 00 	movq   $0xe,-0x10(%rbp)
  40a9ec:	00 
  40a9ed:	48 c7 45 f8 1e 2c 41 	movq   $0x412c1e,-0x8(%rbp)
  40a9f4:	00 
  40a9f5:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a9f9:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a9fd:	e8 9e 2c 00 00       	callq  40d6a0 <_D4user7syscall5errorFAaZv>
  40aa02:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40aa06:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40aa0a:	e8 91 2c 00 00       	callq  40d6a0 <_D4user7syscall5errorFAaZv>
	//kprintfln!("Error in {}, line {}: assertion failed.")(file, line);
	asm { l: hlt; jmp l; }
  40aa0f:	f4                   	hlt    
  40aa10:	eb fd                	jmp    40aa0f <onAssertError+0x44>
}
  40aa12:	c9                   	leaveq 
  40aa13:	c3                   	retq   

000000000040aa14 <onAssertErrorMsg>:

private void onAssertErrorMsg(char[] file, size_t line, char[] msg)
  40aa14:	55                   	push   %rbp
  40aa15:	48 89 e5             	mov    %rsp,%rbp
  40aa18:	48 83 ec 40          	sub    $0x40,%rsp
  40aa1c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40aa20:	48 89 f8             	mov    %rdi,%rax
  40aa23:	48 89 f2             	mov    %rsi,%rdx
  40aa26:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40aa2a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40aa2e:	48 89 c8             	mov    %rcx,%rax
  40aa31:	4c 89 c2             	mov    %r8,%rdx
  40aa34:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40aa38:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
{
	//kprintfln!("Error in {}, line {}: assertion failed: \"{}\"")(file, line, msg);

	error("assert failed:"); error(file);
  40aa3c:	48 c7 45 f0 0e 00 00 	movq   $0xe,-0x10(%rbp)
  40aa43:	00 
  40aa44:	48 c7 45 f8 1e 2c 41 	movq   $0x412c1e,-0x8(%rbp)
  40aa4b:	00 
  40aa4c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40aa50:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40aa54:	e8 47 2c 00 00       	callq  40d6a0 <_D4user7syscall5errorFAaZv>
  40aa59:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40aa5d:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40aa61:	e8 3a 2c 00 00       	callq  40d6a0 <_D4user7syscall5errorFAaZv>
	asm { l: hlt; jmp l; }
  40aa66:	f4                   	hlt    
  40aa67:	eb fd                	jmp    40aa66 <onAssertErrorMsg+0x52>
}
  40aa69:	c9                   	leaveq 
  40aa6a:	c3                   	retq   

000000000040aa6b <onArrayBoundsError>:

private void onArrayBoundsError(char[] file, size_t line)
  40aa6b:	55                   	push   %rbp
  40aa6c:	48 89 e5             	mov    %rsp,%rbp
  40aa6f:	48 83 ec 30          	sub    $0x30,%rsp
  40aa73:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40aa77:	48 89 f8             	mov    %rdi,%rax
  40aa7a:	48 89 f2             	mov    %rsi,%rdx
  40aa7d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40aa81:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
{
	//kprintfln!("Error in {}, line {}: array index out of bounds.")(file, line);
	error("array index out of bounds:");
  40aa85:	48 c7 45 f0 1a 00 00 	movq   $0x1a,-0x10(%rbp)
  40aa8c:	00 
  40aa8d:	48 c7 45 f8 2d 2c 41 	movq   $0x412c2d,-0x8(%rbp)
  40aa94:	00 
  40aa95:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40aa99:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40aa9d:	e8 fe 2b 00 00       	callq  40d6a0 <_D4user7syscall5errorFAaZv>
	asm { l: hlt; jmp l; }
  40aaa2:	f4                   	hlt    
  40aaa3:	eb fd                	jmp    40aaa2 <onArrayBoundsError+0x37>
}
  40aaa5:	c9                   	leaveq 
  40aaa6:	c3                   	retq   

000000000040aaa7 <onSwitchError>:

private void onSwitchError(char[] file, size_t line)
  40aaa7:	55                   	push   %rbp
  40aaa8:	48 89 e5             	mov    %rsp,%rbp
  40aaab:	48 83 ec 30          	sub    $0x30,%rsp
  40aaaf:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40aab3:	48 89 f8             	mov    %rdi,%rax
  40aab6:	48 89 f2             	mov    %rsi,%rdx
  40aab9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40aabd:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
{
	//kprintfln!("Error in {}, line {}: switch has no case or default to handle the switched-upon value.")(file, line);
	error("switch error:"); error(file);
  40aac1:	48 c7 45 f0 0d 00 00 	movq   $0xd,-0x10(%rbp)
  40aac8:	00 
  40aac9:	48 c7 45 f8 48 2c 41 	movq   $0x412c48,-0x8(%rbp)
  40aad0:	00 
  40aad1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40aad5:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40aad9:	e8 c2 2b 00 00       	callq  40d6a0 <_D4user7syscall5errorFAaZv>
  40aade:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40aae2:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40aae6:	e8 b5 2b 00 00       	callq  40d6a0 <_D4user7syscall5errorFAaZv>
  asm { l: hlt; jmp l; }
  40aaeb:	f4                   	hlt    
  40aaec:	eb fd                	jmp    40aaeb <onSwitchError+0x44>
}
  40aaee:	c9                   	leaveq 
  40aaef:	c3                   	retq   

000000000040aaf0 <onFinalizeError>:
  40aaf0:	55                   	push   %rbp
  40aaf1:	48 89 e5             	mov    %rsp,%rbp
  40aaf4:	48 83 ec 30          	sub    $0x30,%rsp
  40aaf8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40aafc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)

private void onSwitchError(char[] file, size_t line)
{
	//kprintfln!("Error in {}, line {}: switch has no case or default to handle the switched-upon value.")(file, line);
	error("switch error:"); error(file);
  asm { l: hlt; jmp l; }
  40ab00:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ab07:	00 
  40ab08:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40ab0f:	00 
  40ab10:	48 c7 45 f0 55 00 00 	movq   $0x55,-0x10(%rbp)
  40ab17:	00 
  40ab18:	48 c7 45 f8 58 2c 41 	movq   $0x412c58,-0x8(%rbp)
  40ab1f:	00 
  40ab20:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ab24:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ab28:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ab2c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ab30:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ab36:	e8 f2 fd ff ff       	callq  40a92d <_d_assert_msg>
  40ab3b:	c9                   	leaveq 
  40ab3c:	c3                   	retq   

000000000040ab3d <onOutOfMemoryError>:
  40ab3d:	55                   	push   %rbp
  40ab3e:	48 89 e5             	mov    %rsp,%rbp
  40ab41:	48 83 ec 20          	sub    $0x20,%rsp
  40ab45:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ab4c:	00 
  40ab4d:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40ab54:	00 
  40ab55:	48 c7 45 f0 3a 00 00 	movq   $0x3a,-0x10(%rbp)
  40ab5c:	00 
  40ab5d:	48 c7 45 f8 b0 2c 41 	movq   $0x412cb0,-0x8(%rbp)
  40ab64:	00 
  40ab65:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ab69:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ab6d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ab71:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ab75:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ab7b:	e8 ad fd ff ff       	callq  40a92d <_d_assert_msg>
  40ab80:	c9                   	leaveq 
  40ab81:	c3                   	retq   

000000000040ab82 <onUnicodeError>:
  40ab82:	55                   	push   %rbp
  40ab83:	48 89 e5             	mov    %rsp,%rbp
  40ab86:	48 83 ec 40          	sub    $0x40,%rsp
  40ab8a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40ab8e:	48 89 f8             	mov    %rdi,%rax
  40ab91:	48 89 f2             	mov    %rsi,%rdx
  40ab94:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40ab98:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40ab9c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40aba3:	00 
  40aba4:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40abab:	00 
  40abac:	48 c7 45 f0 4e 00 00 	movq   $0x4e,-0x10(%rbp)
  40abb3:	00 
  40abb4:	48 c7 45 f8 f0 2c 41 	movq   $0x412cf0,-0x8(%rbp)
  40abbb:	00 
  40abbc:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40abc0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40abc4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40abc8:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40abcc:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40abd2:	e8 56 fd ff ff       	callq  40a92d <_d_assert_msg>
  40abd7:	c9                   	leaveq 
  40abd8:	c3                   	retq   

000000000040abd9 <_gdc_cleanupException>:
  40abd9:	55                   	push   %rbp
  40abda:	48 89 e5             	mov    %rsp,%rbp
  40abdd:	48 83 ec 20          	sub    $0x20,%rsp
  40abe1:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40abe8:	00 
  40abe9:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40abf0:	00 
  40abf1:	48 c7 45 f0 3d 00 00 	movq   $0x3d,-0x10(%rbp)
  40abf8:	00 
  40abf9:	48 c7 45 f8 40 2d 41 	movq   $0x412d40,-0x8(%rbp)
  40ac00:	00 
  40ac01:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ac05:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ac09:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ac0d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ac11:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ac17:	e8 11 fd ff ff       	callq  40a92d <_d_assert_msg>
  40ac1c:	c9                   	leaveq 
  40ac1d:	c3                   	retq   

000000000040ac1e <_d_throw>:
  40ac1e:	55                   	push   %rbp
  40ac1f:	48 89 e5             	mov    %rsp,%rbp
  40ac22:	48 83 ec 30          	sub    $0x30,%rsp
  40ac26:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40ac2a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ac31:	00 
  40ac32:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40ac39:	00 
  40ac3a:	48 c7 45 f0 3a 00 00 	movq   $0x3a,-0x10(%rbp)
  40ac41:	00 
  40ac42:	48 c7 45 f8 80 2d 41 	movq   $0x412d80,-0x8(%rbp)
  40ac49:	00 
  40ac4a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ac4e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ac52:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ac56:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ac5a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ac60:	e8 c8 fc ff ff       	callq  40a92d <_d_assert_msg>
  40ac65:	c9                   	leaveq 
  40ac66:	c3                   	retq   

000000000040ac67 <__gdc_personality_v0>:
  40ac67:	55                   	push   %rbp
  40ac68:	48 89 e5             	mov    %rsp,%rbp
  40ac6b:	48 83 ec 20          	sub    $0x20,%rsp
  40ac6f:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ac76:	00 
  40ac77:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40ac7e:	00 
  40ac7f:	48 c7 45 f0 3b 00 00 	movq   $0x3b,-0x10(%rbp)
  40ac86:	00 
  40ac87:	48 c7 45 f8 c0 2d 41 	movq   $0x412dc0,-0x8(%rbp)
  40ac8e:	00 
  40ac8f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ac93:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ac97:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ac9b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ac9f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40aca5:	e8 83 fc ff ff       	callq  40a92d <_d_assert_msg>
  40acaa:	c9                   	leaveq 
  40acab:	c3                   	retq   

000000000040acac <_Unwind_RaiseException>:
  40acac:	55                   	push   %rbp
  40acad:	48 89 e5             	mov    %rsp,%rbp
  40acb0:	48 83 ec 20          	sub    $0x20,%rsp
  40acb4:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40acbb:	00 
  40acbc:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40acc3:	00 
  40acc4:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40accb:	00 
  40accc:	48 c7 45 f8 00 2e 41 	movq   $0x412e00,-0x8(%rbp)
  40acd3:	00 
  40acd4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40acd8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40acdc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ace0:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ace4:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40acea:	e8 3e fc ff ff       	callq  40a92d <_d_assert_msg>
  40acef:	c9                   	leaveq 
  40acf0:	c3                   	retq   

000000000040acf1 <_Unwind_ForcedUnwind>:
  40acf1:	55                   	push   %rbp
  40acf2:	48 89 e5             	mov    %rsp,%rbp
  40acf5:	48 83 ec 20          	sub    $0x20,%rsp
  40acf9:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ad00:	00 
  40ad01:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40ad08:	00 
  40ad09:	48 c7 45 f0 3d 00 00 	movq   $0x3d,-0x10(%rbp)
  40ad10:	00 
  40ad11:	48 c7 45 f8 40 2e 41 	movq   $0x412e40,-0x8(%rbp)
  40ad18:	00 
  40ad19:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ad1d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ad21:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ad25:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ad29:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ad2f:	e8 f9 fb ff ff       	callq  40a92d <_d_assert_msg>
  40ad34:	c9                   	leaveq 
  40ad35:	c3                   	retq   

000000000040ad36 <_Unwind_DeleteException>:
  40ad36:	55                   	push   %rbp
  40ad37:	48 89 e5             	mov    %rsp,%rbp
  40ad3a:	48 83 ec 20          	sub    $0x20,%rsp
  40ad3e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ad45:	00 
  40ad46:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40ad4d:	00 
  40ad4e:	48 c7 45 f0 40 00 00 	movq   $0x40,-0x10(%rbp)
  40ad55:	00 
  40ad56:	48 c7 45 f8 80 2e 41 	movq   $0x412e80,-0x8(%rbp)
  40ad5d:	00 
  40ad5e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ad62:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ad66:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ad6a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ad6e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ad74:	e8 b4 fb ff ff       	callq  40a92d <_d_assert_msg>
  40ad79:	c9                   	leaveq 
  40ad7a:	c3                   	retq   

000000000040ad7b <_Unwind_Resume>:
  40ad7b:	55                   	push   %rbp
  40ad7c:	48 89 e5             	mov    %rsp,%rbp
  40ad7f:	48 83 ec 20          	sub    $0x20,%rsp
  40ad83:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ad8a:	00 
  40ad8b:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40ad92:	00 
  40ad93:	48 c7 45 f0 36 00 00 	movq   $0x36,-0x10(%rbp)
  40ad9a:	00 
  40ad9b:	48 c7 45 f8 c8 2e 41 	movq   $0x412ec8,-0x8(%rbp)
  40ada2:	00 
  40ada3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ada7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40adab:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40adaf:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40adb3:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40adb9:	e8 6f fb ff ff       	callq  40a92d <_d_assert_msg>
  40adbe:	c9                   	leaveq 
  40adbf:	c3                   	retq   

000000000040adc0 <_Unwind_Resume_or_Rethrow>:
  40adc0:	55                   	push   %rbp
  40adc1:	48 89 e5             	mov    %rsp,%rbp
  40adc4:	48 83 ec 20          	sub    $0x20,%rsp
  40adc8:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40adcf:	00 
  40add0:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40add7:	00 
  40add8:	48 c7 45 f0 42 00 00 	movq   $0x42,-0x10(%rbp)
  40addf:	00 
  40ade0:	48 c7 45 f8 00 2f 41 	movq   $0x412f00,-0x8(%rbp)
  40ade7:	00 
  40ade8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40adec:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40adf0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40adf4:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40adf8:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40adfe:	e8 2a fb ff ff       	callq  40a92d <_d_assert_msg>
  40ae03:	c9                   	leaveq 
  40ae04:	c3                   	retq   

000000000040ae05 <_Unwind_Backtrace>:
  40ae05:	55                   	push   %rbp
  40ae06:	48 89 e5             	mov    %rsp,%rbp
  40ae09:	48 83 ec 20          	sub    $0x20,%rsp
  40ae0d:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ae14:	00 
  40ae15:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40ae1c:	00 
  40ae1d:	48 c7 45 f0 3a 00 00 	movq   $0x3a,-0x10(%rbp)
  40ae24:	00 
  40ae25:	48 c7 45 f8 48 2f 41 	movq   $0x412f48,-0x8(%rbp)
  40ae2c:	00 
  40ae2d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ae31:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ae35:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ae39:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ae3d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ae43:	e8 e5 fa ff ff       	callq  40a92d <_d_assert_msg>
  40ae48:	c9                   	leaveq 
  40ae49:	c3                   	retq   

000000000040ae4a <_Unwind_GetGR>:
  40ae4a:	55                   	push   %rbp
  40ae4b:	48 89 e5             	mov    %rsp,%rbp
  40ae4e:	48 83 ec 20          	sub    $0x20,%rsp
  40ae52:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ae59:	00 
  40ae5a:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40ae61:	00 
  40ae62:	48 c7 45 f0 36 00 00 	movq   $0x36,-0x10(%rbp)
  40ae69:	00 
  40ae6a:	48 c7 45 f8 88 2f 41 	movq   $0x412f88,-0x8(%rbp)
  40ae71:	00 
  40ae72:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ae76:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ae7a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ae7e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ae82:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ae88:	e8 a0 fa ff ff       	callq  40a92d <_d_assert_msg>
  40ae8d:	c9                   	leaveq 
  40ae8e:	c3                   	retq   

000000000040ae8f <_Unwind_SetGR>:
  40ae8f:	55                   	push   %rbp
  40ae90:	48 89 e5             	mov    %rsp,%rbp
  40ae93:	48 83 ec 20          	sub    $0x20,%rsp
  40ae97:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ae9e:	00 
  40ae9f:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40aea6:	00 
  40aea7:	48 c7 45 f0 36 00 00 	movq   $0x36,-0x10(%rbp)
  40aeae:	00 
  40aeaf:	48 c7 45 f8 c0 2f 41 	movq   $0x412fc0,-0x8(%rbp)
  40aeb6:	00 
  40aeb7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40aebb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40aebf:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40aec3:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40aec7:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40aecd:	e8 5b fa ff ff       	callq  40a92d <_d_assert_msg>
  40aed2:	c9                   	leaveq 
  40aed3:	c3                   	retq   

000000000040aed4 <_Unwind_GetIP>:
  40aed4:	55                   	push   %rbp
  40aed5:	48 89 e5             	mov    %rsp,%rbp
  40aed8:	48 83 ec 20          	sub    $0x20,%rsp
  40aedc:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40aee3:	00 
  40aee4:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40aeeb:	00 
  40aeec:	48 c7 45 f0 36 00 00 	movq   $0x36,-0x10(%rbp)
  40aef3:	00 
  40aef4:	48 c7 45 f8 f8 2f 41 	movq   $0x412ff8,-0x8(%rbp)
  40aefb:	00 
  40aefc:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40af00:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40af04:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40af08:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40af0c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40af12:	e8 16 fa ff ff       	callq  40a92d <_d_assert_msg>
  40af17:	c9                   	leaveq 
  40af18:	c3                   	retq   

000000000040af19 <_Unwind_SetIP>:
  40af19:	55                   	push   %rbp
  40af1a:	48 89 e5             	mov    %rsp,%rbp
  40af1d:	48 83 ec 20          	sub    $0x20,%rsp
  40af21:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40af28:	00 
  40af29:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40af30:	00 
  40af31:	48 c7 45 f0 36 00 00 	movq   $0x36,-0x10(%rbp)
  40af38:	00 
  40af39:	48 c7 45 f8 30 30 41 	movq   $0x413030,-0x8(%rbp)
  40af40:	00 
  40af41:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40af45:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40af49:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40af4d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40af51:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40af57:	e8 d1 f9 ff ff       	callq  40a92d <_d_assert_msg>
  40af5c:	c9                   	leaveq 
  40af5d:	c3                   	retq   

000000000040af5e <_Unwind_GetCFA>:
  40af5e:	55                   	push   %rbp
  40af5f:	48 89 e5             	mov    %rsp,%rbp
  40af62:	48 83 ec 20          	sub    $0x20,%rsp
  40af66:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40af6d:	00 
  40af6e:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40af75:	00 
  40af76:	48 c7 45 f0 37 00 00 	movq   $0x37,-0x10(%rbp)
  40af7d:	00 
  40af7e:	48 c7 45 f8 68 30 41 	movq   $0x413068,-0x8(%rbp)
  40af85:	00 
  40af86:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40af8a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40af8e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40af92:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40af96:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40af9c:	e8 8c f9 ff ff       	callq  40a92d <_d_assert_msg>
  40afa1:	c9                   	leaveq 
  40afa2:	c3                   	retq   

000000000040afa3 <_Unwind_GetLanguageSpecificData>:
  40afa3:	55                   	push   %rbp
  40afa4:	48 89 e5             	mov    %rsp,%rbp
  40afa7:	48 83 ec 20          	sub    $0x20,%rsp
  40afab:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40afb2:	00 
  40afb3:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40afba:	00 
  40afbb:	48 c7 45 f0 49 00 00 	movq   $0x49,-0x10(%rbp)
  40afc2:	00 
  40afc3:	48 c7 45 f8 a0 30 41 	movq   $0x4130a0,-0x8(%rbp)
  40afca:	00 
  40afcb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40afcf:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40afd3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40afd7:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40afdb:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40afe1:	e8 47 f9 ff ff       	callq  40a92d <_d_assert_msg>
  40afe6:	c9                   	leaveq 
  40afe7:	c3                   	retq   

000000000040afe8 <_Unwind_GetRegionStart>:
  40afe8:	55                   	push   %rbp
  40afe9:	48 89 e5             	mov    %rsp,%rbp
  40afec:	48 83 ec 20          	sub    $0x20,%rsp
  40aff0:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40aff7:	00 
  40aff8:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40afff:	00 
  40b000:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40b007:	00 
  40b008:	48 c7 45 f8 f0 30 41 	movq   $0x4130f0,-0x8(%rbp)
  40b00f:	00 
  40b010:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b014:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b018:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b01c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b020:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b026:	e8 02 f9 ff ff       	callq  40a92d <_d_assert_msg>
  40b02b:	c9                   	leaveq 
  40b02c:	c3                   	retq   

000000000040b02d <_Unwind_SjLj_RaiseException>:
  40b02d:	55                   	push   %rbp
  40b02e:	48 89 e5             	mov    %rsp,%rbp
  40b031:	48 83 ec 20          	sub    $0x20,%rsp
  40b035:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b03c:	00 
  40b03d:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b044:	00 
  40b045:	48 c7 45 f0 43 00 00 	movq   $0x43,-0x10(%rbp)
  40b04c:	00 
  40b04d:	48 c7 45 f8 30 31 41 	movq   $0x413130,-0x8(%rbp)
  40b054:	00 
  40b055:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b059:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b05d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b061:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b065:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b06b:	e8 bd f8 ff ff       	callq  40a92d <_d_assert_msg>
  40b070:	c9                   	leaveq 
  40b071:	c3                   	retq   

000000000040b072 <_Unwind_SjLj_ForcedUnwind>:
  40b072:	55                   	push   %rbp
  40b073:	48 89 e5             	mov    %rsp,%rbp
  40b076:	48 83 ec 20          	sub    $0x20,%rsp
  40b07a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b081:	00 
  40b082:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b089:	00 
  40b08a:	48 c7 45 f0 41 00 00 	movq   $0x41,-0x10(%rbp)
  40b091:	00 
  40b092:	48 c7 45 f8 78 31 41 	movq   $0x413178,-0x8(%rbp)
  40b099:	00 
  40b09a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b09e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b0a2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b0a6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b0aa:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b0b0:	e8 78 f8 ff ff       	callq  40a92d <_d_assert_msg>
  40b0b5:	c9                   	leaveq 
  40b0b6:	c3                   	retq   

000000000040b0b7 <_Unwind_SjLj_Resume>:
  40b0b7:	55                   	push   %rbp
  40b0b8:	48 89 e5             	mov    %rsp,%rbp
  40b0bb:	48 83 ec 20          	sub    $0x20,%rsp
  40b0bf:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b0c6:	00 
  40b0c7:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b0ce:	00 
  40b0cf:	48 c7 45 f0 3c 00 00 	movq   $0x3c,-0x10(%rbp)
  40b0d6:	00 
  40b0d7:	48 c7 45 f8 c0 31 41 	movq   $0x4131c0,-0x8(%rbp)
  40b0de:	00 
  40b0df:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b0e3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b0e7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b0eb:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b0ef:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b0f5:	e8 33 f8 ff ff       	callq  40a92d <_d_assert_msg>
  40b0fa:	c9                   	leaveq 
  40b0fb:	c3                   	retq   

000000000040b0fc <_Unwind_GetDataRelBase>:
  40b0fc:	55                   	push   %rbp
  40b0fd:	48 89 e5             	mov    %rsp,%rbp
  40b100:	48 83 ec 20          	sub    $0x20,%rsp
  40b104:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b10b:	00 
  40b10c:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b113:	00 
  40b114:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40b11b:	00 
  40b11c:	48 c7 45 f8 00 32 41 	movq   $0x413200,-0x8(%rbp)
  40b123:	00 
  40b124:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b128:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b12c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b130:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b134:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b13a:	e8 ee f7 ff ff       	callq  40a92d <_d_assert_msg>
  40b13f:	c9                   	leaveq 
  40b140:	c3                   	retq   

000000000040b141 <_Unwind_GetTextRelBase>:
  40b141:	55                   	push   %rbp
  40b142:	48 89 e5             	mov    %rsp,%rbp
  40b145:	48 83 ec 20          	sub    $0x20,%rsp
  40b149:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b150:	00 
  40b151:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b158:	00 
  40b159:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40b160:	00 
  40b161:	48 c7 45 f8 40 32 41 	movq   $0x413240,-0x8(%rbp)
  40b168:	00 
  40b169:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b16d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b171:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b175:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b179:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b17f:	e8 a9 f7 ff ff       	callq  40a92d <_d_assert_msg>
  40b184:	c9                   	leaveq 
  40b185:	c3                   	retq   

000000000040b186 <size_of_encoded_value>:
  40b186:	55                   	push   %rbp
  40b187:	48 89 e5             	mov    %rsp,%rbp
  40b18a:	48 83 ec 30          	sub    $0x30,%rsp
  40b18e:	40 88 7d df          	mov    %dil,-0x21(%rbp)
  40b192:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b199:	00 
  40b19a:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b1a1:	00 
  40b1a2:	48 c7 45 f0 4c 00 00 	movq   $0x4c,-0x10(%rbp)
  40b1a9:	00 
  40b1aa:	48 c7 45 f8 80 32 41 	movq   $0x413280,-0x8(%rbp)
  40b1b1:	00 
  40b1b2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b1b6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b1ba:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b1be:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b1c2:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b1c8:	e8 60 f7 ff ff       	callq  40a92d <_d_assert_msg>
  40b1cd:	c9                   	leaveq 
  40b1ce:	c3                   	retq   

000000000040b1cf <base_of_encoded_value>:
  40b1cf:	55                   	push   %rbp
  40b1d0:	48 89 e5             	mov    %rsp,%rbp
  40b1d3:	48 83 ec 20          	sub    $0x20,%rsp
  40b1d7:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b1de:	00 
  40b1df:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b1e6:	00 
  40b1e7:	48 c7 45 f0 3e 00 00 	movq   $0x3e,-0x10(%rbp)
  40b1ee:	00 
  40b1ef:	48 c7 45 f8 d0 32 41 	movq   $0x4132d0,-0x8(%rbp)
  40b1f6:	00 
  40b1f7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b1fb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b1ff:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b203:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b207:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b20d:	e8 1b f7 ff ff       	callq  40a92d <_d_assert_msg>
  40b212:	c9                   	leaveq 
  40b213:	c3                   	retq   

000000000040b214 <read_uleb128>:
  40b214:	55                   	push   %rbp
  40b215:	48 89 e5             	mov    %rsp,%rbp
  40b218:	48 83 ec 20          	sub    $0x20,%rsp
  40b21c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b223:	00 
  40b224:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b22b:	00 
  40b22c:	48 c7 45 f0 34 00 00 	movq   $0x34,-0x10(%rbp)
  40b233:	00 
  40b234:	48 c7 45 f8 10 33 41 	movq   $0x413310,-0x8(%rbp)
  40b23b:	00 
  40b23c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b240:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b244:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b248:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b24c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b252:	e8 d6 f6 ff ff       	callq  40a92d <_d_assert_msg>
  40b257:	c9                   	leaveq 
  40b258:	c3                   	retq   

000000000040b259 <read_sleb128>:
  40b259:	55                   	push   %rbp
  40b25a:	48 89 e5             	mov    %rsp,%rbp
  40b25d:	48 83 ec 20          	sub    $0x20,%rsp
  40b261:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b268:	00 
  40b269:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b270:	00 
  40b271:	48 c7 45 f0 34 00 00 	movq   $0x34,-0x10(%rbp)
  40b278:	00 
  40b279:	48 c7 45 f8 48 33 41 	movq   $0x413348,-0x8(%rbp)
  40b280:	00 
  40b281:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b285:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b289:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b28d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b291:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b297:	e8 91 f6 ff ff       	callq  40a92d <_d_assert_msg>
  40b29c:	c9                   	leaveq 
  40b29d:	c3                   	retq   

000000000040b29e <read_encoded_value_with_base>:
  40b29e:	55                   	push   %rbp
  40b29f:	48 89 e5             	mov    %rsp,%rbp
  40b2a2:	48 83 ec 20          	sub    $0x20,%rsp
  40b2a6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b2ad:	00 
  40b2ae:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b2b5:	00 
  40b2b6:	48 c7 45 f0 44 00 00 	movq   $0x44,-0x10(%rbp)
  40b2bd:	00 
  40b2be:	48 c7 45 f8 80 33 41 	movq   $0x413380,-0x8(%rbp)
  40b2c5:	00 
  40b2c6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b2ca:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b2ce:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b2d2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b2d6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b2dc:	e8 4c f6 ff ff       	callq  40a92d <_d_assert_msg>
  40b2e1:	c9                   	leaveq 
  40b2e2:	c3                   	retq   

000000000040b2e3 <read_encoded_value>:
  40b2e3:	55                   	push   %rbp
  40b2e4:	48 89 e5             	mov    %rsp,%rbp
  40b2e7:	48 83 ec 20          	sub    $0x20,%rsp
  40b2eb:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b2f2:	00 
  40b2f3:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b2fa:	00 
  40b2fb:	48 c7 45 f0 3a 00 00 	movq   $0x3a,-0x10(%rbp)
  40b302:	00 
  40b303:	48 c7 45 f8 c8 33 41 	movq   $0x4133c8,-0x8(%rbp)
  40b30a:	00 
  40b30b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b30f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b313:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b317:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b31b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b321:	e8 07 f6 ff ff       	callq  40a92d <_d_assert_msg>
  40b326:	c9                   	leaveq 
  40b327:	c3                   	retq   

000000000040b328 <_aaLen>:
  40b328:	55                   	push   %rbp
  40b329:	48 89 e5             	mov    %rsp,%rbp
  40b32c:	48 83 ec 30          	sub    $0x30,%rsp
  40b330:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b334:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b33b:	00 
  40b33c:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b343:	00 
  40b344:	48 c7 45 f0 35 00 00 	movq   $0x35,-0x10(%rbp)
  40b34b:	00 
  40b34c:	48 c7 45 f8 08 34 41 	movq   $0x413408,-0x8(%rbp)
  40b353:	00 
  40b354:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b358:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b35c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b360:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b364:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b36a:	e8 be f5 ff ff       	callq  40a92d <_d_assert_msg>
  40b36f:	c9                   	leaveq 
  40b370:	c3                   	retq   

000000000040b371 <_aaGetp>:
  40b371:	55                   	push   %rbp
  40b372:	48 89 e5             	mov    %rsp,%rbp
  40b375:	48 83 ec 40          	sub    $0x40,%rsp
  40b379:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b37d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b381:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b385:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  40b389:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b390:	00 
  40b391:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b398:	00 
  40b399:	48 c7 45 f0 64 00 00 	movq   $0x64,-0x10(%rbp)
  40b3a0:	00 
  40b3a1:	48 c7 45 f8 40 34 41 	movq   $0x413440,-0x8(%rbp)
  40b3a8:	00 
  40b3a9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b3ad:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b3b1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b3b5:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b3b9:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b3bf:	e8 69 f5 ff ff       	callq  40a92d <_d_assert_msg>
  40b3c4:	c9                   	leaveq 
  40b3c5:	c3                   	retq   

000000000040b3c6 <_aaGetRvaluep>:
  40b3c6:	55                   	push   %rbp
  40b3c7:	48 89 e5             	mov    %rsp,%rbp
  40b3ca:	48 83 ec 40          	sub    $0x40,%rsp
  40b3ce:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b3d2:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b3d6:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b3da:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  40b3de:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b3e5:	00 
  40b3e6:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b3ed:	00 
  40b3ee:	48 c7 45 f0 69 00 00 	movq   $0x69,-0x10(%rbp)
  40b3f5:	00 
  40b3f6:	48 c7 45 f8 a8 34 41 	movq   $0x4134a8,-0x8(%rbp)
  40b3fd:	00 
  40b3fe:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b402:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b406:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b40a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b40e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b414:	e8 14 f5 ff ff       	callq  40a92d <_d_assert_msg>
  40b419:	c9                   	leaveq 
  40b41a:	c3                   	retq   

000000000040b41b <_aaInp>:
  40b41b:	55                   	push   %rbp
  40b41c:	48 89 e5             	mov    %rsp,%rbp
  40b41f:	48 83 ec 40          	sub    $0x40,%rsp
  40b423:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b427:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b42b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b42f:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b436:	00 
  40b437:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b43e:	00 
  40b43f:	48 c7 45 f0 50 00 00 	movq   $0x50,-0x10(%rbp)
  40b446:	00 
  40b447:	48 c7 45 f8 18 35 41 	movq   $0x413518,-0x8(%rbp)
  40b44e:	00 
  40b44f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b453:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b457:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b45b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b45f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b465:	e8 c3 f4 ff ff       	callq  40a92d <_d_assert_msg>
  40b46a:	c9                   	leaveq 
  40b46b:	c3                   	retq   

000000000040b46c <_aaDelp>:
  40b46c:	55                   	push   %rbp
  40b46d:	48 89 e5             	mov    %rsp,%rbp
  40b470:	48 83 ec 40          	sub    $0x40,%rsp
  40b474:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b478:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b47c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b480:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b487:	00 
  40b488:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b48f:	00 
  40b490:	48 c7 45 f0 50 00 00 	movq   $0x50,-0x10(%rbp)
  40b497:	00 
  40b498:	48 c7 45 f8 70 35 41 	movq   $0x413570,-0x8(%rbp)
  40b49f:	00 
  40b4a0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b4a4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b4a8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b4ac:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b4b0:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b4b6:	e8 72 f4 ff ff       	callq  40a92d <_d_assert_msg>
  40b4bb:	c9                   	leaveq 
  40b4bc:	c3                   	retq   

000000000040b4bd <_aaValues>:
  40b4bd:	55                   	push   %rbp
  40b4be:	48 89 e5             	mov    %rsp,%rbp
  40b4c1:	48 83 ec 40          	sub    $0x40,%rsp
  40b4c5:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40b4c9:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40b4cd:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  40b4d1:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b4d8:	00 
  40b4d9:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b4e0:	00 
  40b4e1:	48 c7 45 f0 59 00 00 	movq   $0x59,-0x10(%rbp)
  40b4e8:	00 
  40b4e9:	48 c7 45 f8 c8 35 41 	movq   $0x4135c8,-0x8(%rbp)
  40b4f0:	00 
  40b4f1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b4f5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b4f9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b4fd:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b501:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b507:	e8 21 f4 ff ff       	callq  40a92d <_d_assert_msg>
  40b50c:	c9                   	leaveq 
  40b50d:	c3                   	retq   

000000000040b50e <_aaRehash>:
  40b50e:	55                   	push   %rbp
  40b50f:	48 89 e5             	mov    %rsp,%rbp
  40b512:	48 83 ec 30          	sub    $0x30,%rsp
  40b516:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b51a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b51e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b525:	00 
  40b526:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b52d:	00 
  40b52e:	48 c7 45 f0 46 00 00 	movq   $0x46,-0x10(%rbp)
  40b535:	00 
  40b536:	48 c7 45 f8 28 36 41 	movq   $0x413628,-0x8(%rbp)
  40b53d:	00 
  40b53e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b542:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b546:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b54a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b54e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b554:	e8 d4 f3 ff ff       	callq  40a92d <_d_assert_msg>
  40b559:	c9                   	leaveq 
  40b55a:	c3                   	retq   

000000000040b55b <_aaKeys>:
  40b55b:	55                   	push   %rbp
  40b55c:	48 89 e5             	mov    %rsp,%rbp
  40b55f:	48 83 ec 30          	sub    $0x30,%rsp
  40b563:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40b567:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40b56b:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b572:	00 
  40b573:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b57a:	00 
  40b57b:	48 c7 45 f0 45 00 00 	movq   $0x45,-0x10(%rbp)
  40b582:	00 
  40b583:	48 c7 45 f8 70 36 41 	movq   $0x413670,-0x8(%rbp)
  40b58a:	00 
  40b58b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b58f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b593:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b597:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b59b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b5a1:	e8 87 f3 ff ff       	callq  40a92d <_d_assert_msg>
  40b5a6:	c9                   	leaveq 
  40b5a7:	c3                   	retq   

000000000040b5a8 <_aaApply>:
  40b5a8:	55                   	push   %rbp
  40b5a9:	48 89 e5             	mov    %rsp,%rbp
  40b5ac:	48 83 ec 40          	sub    $0x40,%rsp
  40b5b0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b5b4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b5b8:	48 89 d0             	mov    %rdx,%rax
  40b5bb:	48 89 ca             	mov    %rcx,%rdx
  40b5be:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b5c2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b5c6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b5cd:	00 
  40b5ce:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b5d5:	00 
  40b5d6:	48 c7 45 f0 50 00 00 	movq   $0x50,-0x10(%rbp)
  40b5dd:	00 
  40b5de:	48 c7 45 f8 b8 36 41 	movq   $0x4136b8,-0x8(%rbp)
  40b5e5:	00 
  40b5e6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b5ea:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b5ee:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b5f2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b5f6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b5fc:	e8 2c f3 ff ff       	callq  40a92d <_d_assert_msg>
  40b601:	c9                   	leaveq 
  40b602:	c3                   	retq   

000000000040b603 <_aaApply2>:
  40b603:	55                   	push   %rbp
  40b604:	48 89 e5             	mov    %rsp,%rbp
  40b607:	48 83 ec 40          	sub    $0x40,%rsp
  40b60b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b60f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b613:	48 89 d0             	mov    %rdx,%rax
  40b616:	48 89 ca             	mov    %rcx,%rdx
  40b619:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b61d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b621:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b628:	00 
  40b629:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b630:	00 
  40b631:	48 c7 45 f0 52 00 00 	movq   $0x52,-0x10(%rbp)
  40b638:	00 
  40b639:	48 c7 45 f8 10 37 41 	movq   $0x413710,-0x8(%rbp)
  40b640:	00 
  40b641:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b645:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b649:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b64d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b651:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b657:	e8 d1 f2 ff ff       	callq  40a92d <_d_assert_msg>
  40b65c:	c9                   	leaveq 
  40b65d:	c3                   	retq   

000000000040b65e <_d_assocarrayliteralTp>:
  40b65e:	55                   	push   %rbp
  40b65f:	48 89 e5             	mov    %rsp,%rbp
  40b662:	48 83 ec 40          	sub    $0x40,%rsp
  40b666:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b66a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b66e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b672:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  40b676:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b67d:	00 
  40b67e:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b685:	00 
  40b686:	48 c7 45 f0 82 00 00 	movq   $0x82,-0x10(%rbp)
  40b68d:	00 
  40b68e:	48 c7 45 f8 68 37 41 	movq   $0x413768,-0x8(%rbp)
  40b695:	00 
  40b696:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b69a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b69e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b6a2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b6a6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b6ac:	e8 7c f2 ff ff       	callq  40a92d <_d_assert_msg>
  40b6b1:	c9                   	leaveq 
  40b6b2:	c3                   	retq   

000000000040b6b3 <_aApplycw1>:
  40b6b3:	55                   	push   %rbp
  40b6b4:	48 89 e5             	mov    %rsp,%rbp
  40b6b7:	48 83 ec 40          	sub    $0x40,%rsp
  40b6bb:	49 89 d0             	mov    %rdx,%r8
  40b6be:	48 89 f8             	mov    %rdi,%rax
  40b6c1:	48 89 f2             	mov    %rsi,%rdx
  40b6c4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b6c8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40b6cc:	4c 89 c0             	mov    %r8,%rax
  40b6cf:	48 89 ca             	mov    %rcx,%rdx
  40b6d2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b6d6:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b6da:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b6e1:	00 
  40b6e2:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b6e9:	00 
  40b6ea:	48 c7 45 f0 49 00 00 	movq   $0x49,-0x10(%rbp)
  40b6f1:	00 
  40b6f2:	48 c7 45 f8 f0 37 41 	movq   $0x4137f0,-0x8(%rbp)
  40b6f9:	00 
  40b6fa:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b6fe:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b702:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b706:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b70a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b710:	e8 18 f2 ff ff       	callq  40a92d <_d_assert_msg>
  40b715:	c9                   	leaveq 
  40b716:	c3                   	retq   

000000000040b717 <_aApplycd1>:
  40b717:	55                   	push   %rbp
  40b718:	48 89 e5             	mov    %rsp,%rbp
  40b71b:	48 83 ec 40          	sub    $0x40,%rsp
  40b71f:	49 89 d0             	mov    %rdx,%r8
  40b722:	48 89 f8             	mov    %rdi,%rax
  40b725:	48 89 f2             	mov    %rsi,%rdx
  40b728:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b72c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40b730:	4c 89 c0             	mov    %r8,%rax
  40b733:	48 89 ca             	mov    %rcx,%rdx
  40b736:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b73a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b73e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b745:	00 
  40b746:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b74d:	00 
  40b74e:	48 c7 45 f0 49 00 00 	movq   $0x49,-0x10(%rbp)
  40b755:	00 
  40b756:	48 c7 45 f8 40 38 41 	movq   $0x413840,-0x8(%rbp)
  40b75d:	00 
  40b75e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b762:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b766:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b76a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b76e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b774:	e8 b4 f1 ff ff       	callq  40a92d <_d_assert_msg>
  40b779:	c9                   	leaveq 
  40b77a:	c3                   	retq   

000000000040b77b <_aApplywc1>:
  40b77b:	55                   	push   %rbp
  40b77c:	48 89 e5             	mov    %rsp,%rbp
  40b77f:	48 83 ec 40          	sub    $0x40,%rsp
  40b783:	49 89 d0             	mov    %rdx,%r8
  40b786:	48 89 f8             	mov    %rdi,%rax
  40b789:	48 89 f2             	mov    %rsi,%rdx
  40b78c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b790:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40b794:	4c 89 c0             	mov    %r8,%rax
  40b797:	48 89 ca             	mov    %rcx,%rdx
  40b79a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b79e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b7a2:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b7a9:	00 
  40b7aa:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b7b1:	00 
  40b7b2:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40b7b9:	00 
  40b7ba:	48 c7 45 f8 90 38 41 	movq   $0x413890,-0x8(%rbp)
  40b7c1:	00 
  40b7c2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b7c6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b7ca:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b7ce:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b7d2:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b7d8:	e8 50 f1 ff ff       	callq  40a92d <_d_assert_msg>
  40b7dd:	c9                   	leaveq 
  40b7de:	c3                   	retq   

000000000040b7df <_aApplywd1>:
  40b7df:	55                   	push   %rbp
  40b7e0:	48 89 e5             	mov    %rsp,%rbp
  40b7e3:	48 83 ec 40          	sub    $0x40,%rsp
  40b7e7:	49 89 d0             	mov    %rdx,%r8
  40b7ea:	48 89 f8             	mov    %rdi,%rax
  40b7ed:	48 89 f2             	mov    %rsi,%rdx
  40b7f0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b7f4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40b7f8:	4c 89 c0             	mov    %r8,%rax
  40b7fb:	48 89 ca             	mov    %rcx,%rdx
  40b7fe:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b802:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b806:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b80d:	00 
  40b80e:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b815:	00 
  40b816:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40b81d:	00 
  40b81e:	48 c7 45 f8 e0 38 41 	movq   $0x4138e0,-0x8(%rbp)
  40b825:	00 
  40b826:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b82a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b82e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b832:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b836:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b83c:	e8 ec f0 ff ff       	callq  40a92d <_d_assert_msg>
  40b841:	c9                   	leaveq 
  40b842:	c3                   	retq   

000000000040b843 <_aApplydc1>:
  40b843:	55                   	push   %rbp
  40b844:	48 89 e5             	mov    %rsp,%rbp
  40b847:	48 83 ec 40          	sub    $0x40,%rsp
  40b84b:	49 89 d0             	mov    %rdx,%r8
  40b84e:	48 89 f8             	mov    %rdi,%rax
  40b851:	48 89 f2             	mov    %rsi,%rdx
  40b854:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b858:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40b85c:	4c 89 c0             	mov    %r8,%rax
  40b85f:	48 89 ca             	mov    %rcx,%rdx
  40b862:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b866:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b86a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b871:	00 
  40b872:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b879:	00 
  40b87a:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40b881:	00 
  40b882:	48 c7 45 f8 30 39 41 	movq   $0x413930,-0x8(%rbp)
  40b889:	00 
  40b88a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b88e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b892:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b896:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b89a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b8a0:	e8 88 f0 ff ff       	callq  40a92d <_d_assert_msg>
  40b8a5:	c9                   	leaveq 
  40b8a6:	c3                   	retq   

000000000040b8a7 <_aApplydw1>:
  40b8a7:	55                   	push   %rbp
  40b8a8:	48 89 e5             	mov    %rsp,%rbp
  40b8ab:	48 83 ec 40          	sub    $0x40,%rsp
  40b8af:	49 89 d0             	mov    %rdx,%r8
  40b8b2:	48 89 f8             	mov    %rdi,%rax
  40b8b5:	48 89 f2             	mov    %rsi,%rdx
  40b8b8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b8bc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40b8c0:	4c 89 c0             	mov    %r8,%rax
  40b8c3:	48 89 ca             	mov    %rcx,%rdx
  40b8c6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b8ca:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b8ce:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b8d5:	00 
  40b8d6:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b8dd:	00 
  40b8de:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40b8e5:	00 
  40b8e6:	48 c7 45 f8 80 39 41 	movq   $0x413980,-0x8(%rbp)
  40b8ed:	00 
  40b8ee:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b8f2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b8f6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b8fa:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b8fe:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b904:	e8 24 f0 ff ff       	callq  40a92d <_d_assert_msg>
  40b909:	c9                   	leaveq 
  40b90a:	c3                   	retq   

000000000040b90b <_aApplycw2>:
  40b90b:	55                   	push   %rbp
  40b90c:	48 89 e5             	mov    %rsp,%rbp
  40b90f:	48 83 ec 40          	sub    $0x40,%rsp
  40b913:	49 89 d0             	mov    %rdx,%r8
  40b916:	48 89 f8             	mov    %rdi,%rax
  40b919:	48 89 f2             	mov    %rsi,%rdx
  40b91c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b920:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40b924:	4c 89 c0             	mov    %r8,%rax
  40b927:	48 89 ca             	mov    %rcx,%rdx
  40b92a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b92e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b932:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b939:	00 
  40b93a:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b941:	00 
  40b942:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40b949:	00 
  40b94a:	48 c7 45 f8 d0 39 41 	movq   $0x4139d0,-0x8(%rbp)
  40b951:	00 
  40b952:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b956:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b95a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b95e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b962:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b968:	e8 c0 ef ff ff       	callq  40a92d <_d_assert_msg>
  40b96d:	c9                   	leaveq 
  40b96e:	c3                   	retq   

000000000040b96f <_aApplycd2>:
  40b96f:	55                   	push   %rbp
  40b970:	48 89 e5             	mov    %rsp,%rbp
  40b973:	48 83 ec 40          	sub    $0x40,%rsp
  40b977:	49 89 d0             	mov    %rdx,%r8
  40b97a:	48 89 f8             	mov    %rdi,%rax
  40b97d:	48 89 f2             	mov    %rsi,%rdx
  40b980:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b984:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40b988:	4c 89 c0             	mov    %r8,%rax
  40b98b:	48 89 ca             	mov    %rcx,%rdx
  40b98e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b992:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b996:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b99d:	00 
  40b99e:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40b9a5:	00 
  40b9a6:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40b9ad:	00 
  40b9ae:	48 c7 45 f8 20 3a 41 	movq   $0x413a20,-0x8(%rbp)
  40b9b5:	00 
  40b9b6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b9ba:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b9be:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b9c2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b9c6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b9cc:	e8 5c ef ff ff       	callq  40a92d <_d_assert_msg>
  40b9d1:	c9                   	leaveq 
  40b9d2:	c3                   	retq   

000000000040b9d3 <_aApplywc2>:
  40b9d3:	55                   	push   %rbp
  40b9d4:	48 89 e5             	mov    %rsp,%rbp
  40b9d7:	48 83 ec 40          	sub    $0x40,%rsp
  40b9db:	49 89 d0             	mov    %rdx,%r8
  40b9de:	48 89 f8             	mov    %rdi,%rax
  40b9e1:	48 89 f2             	mov    %rsi,%rdx
  40b9e4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b9e8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40b9ec:	4c 89 c0             	mov    %r8,%rax
  40b9ef:	48 89 ca             	mov    %rcx,%rdx
  40b9f2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b9f6:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b9fa:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ba01:	00 
  40ba02:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40ba09:	00 
  40ba0a:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40ba11:	00 
  40ba12:	48 c7 45 f8 70 3a 41 	movq   $0x413a70,-0x8(%rbp)
  40ba19:	00 
  40ba1a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ba1e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ba22:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ba26:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ba2a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ba30:	e8 f8 ee ff ff       	callq  40a92d <_d_assert_msg>
  40ba35:	c9                   	leaveq 
  40ba36:	c3                   	retq   

000000000040ba37 <_aApplywd2>:
  40ba37:	55                   	push   %rbp
  40ba38:	48 89 e5             	mov    %rsp,%rbp
  40ba3b:	48 83 ec 40          	sub    $0x40,%rsp
  40ba3f:	49 89 d0             	mov    %rdx,%r8
  40ba42:	48 89 f8             	mov    %rdi,%rax
  40ba45:	48 89 f2             	mov    %rsi,%rdx
  40ba48:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40ba4c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40ba50:	4c 89 c0             	mov    %r8,%rax
  40ba53:	48 89 ca             	mov    %rcx,%rdx
  40ba56:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40ba5a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40ba5e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ba65:	00 
  40ba66:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40ba6d:	00 
  40ba6e:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40ba75:	00 
  40ba76:	48 c7 45 f8 c0 3a 41 	movq   $0x413ac0,-0x8(%rbp)
  40ba7d:	00 
  40ba7e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ba82:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ba86:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ba8a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ba8e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ba94:	e8 94 ee ff ff       	callq  40a92d <_d_assert_msg>
  40ba99:	c9                   	leaveq 
  40ba9a:	c3                   	retq   

000000000040ba9b <_aApplydc2>:
  40ba9b:	55                   	push   %rbp
  40ba9c:	48 89 e5             	mov    %rsp,%rbp
  40ba9f:	48 83 ec 40          	sub    $0x40,%rsp
  40baa3:	49 89 d0             	mov    %rdx,%r8
  40baa6:	48 89 f8             	mov    %rdi,%rax
  40baa9:	48 89 f2             	mov    %rsi,%rdx
  40baac:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bab0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bab4:	4c 89 c0             	mov    %r8,%rax
  40bab7:	48 89 ca             	mov    %rcx,%rdx
  40baba:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40babe:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bac2:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bac9:	00 
  40baca:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40bad1:	00 
  40bad2:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40bad9:	00 
  40bada:	48 c7 45 f8 10 3b 41 	movq   $0x413b10,-0x8(%rbp)
  40bae1:	00 
  40bae2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bae6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40baea:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40baee:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40baf2:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40baf8:	e8 30 ee ff ff       	callq  40a92d <_d_assert_msg>
  40bafd:	c9                   	leaveq 
  40bafe:	c3                   	retq   

000000000040baff <_aApplydw2>:
  40baff:	55                   	push   %rbp
  40bb00:	48 89 e5             	mov    %rsp,%rbp
  40bb03:	48 83 ec 40          	sub    $0x40,%rsp
  40bb07:	49 89 d0             	mov    %rdx,%r8
  40bb0a:	48 89 f8             	mov    %rdi,%rax
  40bb0d:	48 89 f2             	mov    %rsi,%rdx
  40bb10:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bb14:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bb18:	4c 89 c0             	mov    %r8,%rax
  40bb1b:	48 89 ca             	mov    %rcx,%rdx
  40bb1e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bb22:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bb26:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bb2d:	00 
  40bb2e:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40bb35:	00 
  40bb36:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40bb3d:	00 
  40bb3e:	48 c7 45 f8 60 3b 41 	movq   $0x413b60,-0x8(%rbp)
  40bb45:	00 
  40bb46:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bb4a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bb4e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bb52:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bb56:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bb5c:	e8 cc ed ff ff       	callq  40a92d <_d_assert_msg>
  40bb61:	c9                   	leaveq 
  40bb62:	c3                   	retq   

000000000040bb63 <_aApplyRcw1>:
  40bb63:	55                   	push   %rbp
  40bb64:	48 89 e5             	mov    %rsp,%rbp
  40bb67:	48 83 ec 40          	sub    $0x40,%rsp
  40bb6b:	49 89 d0             	mov    %rdx,%r8
  40bb6e:	48 89 f8             	mov    %rdi,%rax
  40bb71:	48 89 f2             	mov    %rsi,%rdx
  40bb74:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bb78:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bb7c:	4c 89 c0             	mov    %r8,%rax
  40bb7f:	48 89 ca             	mov    %rcx,%rdx
  40bb82:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bb86:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bb8a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bb91:	00 
  40bb92:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40bb99:	00 
  40bb9a:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40bba1:	00 
  40bba2:	48 c7 45 f8 b0 3b 41 	movq   $0x413bb0,-0x8(%rbp)
  40bba9:	00 
  40bbaa:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bbae:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bbb2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bbb6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bbba:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bbc0:	e8 68 ed ff ff       	callq  40a92d <_d_assert_msg>
  40bbc5:	c9                   	leaveq 
  40bbc6:	c3                   	retq   

000000000040bbc7 <_aApplyRcd1>:
  40bbc7:	55                   	push   %rbp
  40bbc8:	48 89 e5             	mov    %rsp,%rbp
  40bbcb:	48 83 ec 40          	sub    $0x40,%rsp
  40bbcf:	49 89 d0             	mov    %rdx,%r8
  40bbd2:	48 89 f8             	mov    %rdi,%rax
  40bbd5:	48 89 f2             	mov    %rsi,%rdx
  40bbd8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bbdc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bbe0:	4c 89 c0             	mov    %r8,%rax
  40bbe3:	48 89 ca             	mov    %rcx,%rdx
  40bbe6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bbea:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bbee:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bbf5:	00 
  40bbf6:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40bbfd:	00 
  40bbfe:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40bc05:	00 
  40bc06:	48 c7 45 f8 00 3c 41 	movq   $0x413c00,-0x8(%rbp)
  40bc0d:	00 
  40bc0e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bc12:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bc16:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bc1a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bc1e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bc24:	e8 04 ed ff ff       	callq  40a92d <_d_assert_msg>
  40bc29:	c9                   	leaveq 
  40bc2a:	c3                   	retq   

000000000040bc2b <_aApplyRwc1>:
  40bc2b:	55                   	push   %rbp
  40bc2c:	48 89 e5             	mov    %rsp,%rbp
  40bc2f:	48 83 ec 40          	sub    $0x40,%rsp
  40bc33:	49 89 d0             	mov    %rdx,%r8
  40bc36:	48 89 f8             	mov    %rdi,%rax
  40bc39:	48 89 f2             	mov    %rsi,%rdx
  40bc3c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bc40:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bc44:	4c 89 c0             	mov    %r8,%rax
  40bc47:	48 89 ca             	mov    %rcx,%rdx
  40bc4a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bc4e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bc52:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bc59:	00 
  40bc5a:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40bc61:	00 
  40bc62:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40bc69:	00 
  40bc6a:	48 c7 45 f8 50 3c 41 	movq   $0x413c50,-0x8(%rbp)
  40bc71:	00 
  40bc72:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bc76:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bc7a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bc7e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bc82:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bc88:	e8 a0 ec ff ff       	callq  40a92d <_d_assert_msg>
  40bc8d:	c9                   	leaveq 
  40bc8e:	c3                   	retq   

000000000040bc8f <_aApplyRwd1>:
  40bc8f:	55                   	push   %rbp
  40bc90:	48 89 e5             	mov    %rsp,%rbp
  40bc93:	48 83 ec 40          	sub    $0x40,%rsp
  40bc97:	49 89 d0             	mov    %rdx,%r8
  40bc9a:	48 89 f8             	mov    %rdi,%rax
  40bc9d:	48 89 f2             	mov    %rsi,%rdx
  40bca0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bca4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bca8:	4c 89 c0             	mov    %r8,%rax
  40bcab:	48 89 ca             	mov    %rcx,%rdx
  40bcae:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bcb2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bcb6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bcbd:	00 
  40bcbe:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40bcc5:	00 
  40bcc6:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40bccd:	00 
  40bcce:	48 c7 45 f8 a0 3c 41 	movq   $0x413ca0,-0x8(%rbp)
  40bcd5:	00 
  40bcd6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bcda:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bcde:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bce2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bce6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bcec:	e8 3c ec ff ff       	callq  40a92d <_d_assert_msg>
  40bcf1:	c9                   	leaveq 
  40bcf2:	c3                   	retq   

000000000040bcf3 <_aApplyRdc1>:
  40bcf3:	55                   	push   %rbp
  40bcf4:	48 89 e5             	mov    %rsp,%rbp
  40bcf7:	48 83 ec 40          	sub    $0x40,%rsp
  40bcfb:	49 89 d0             	mov    %rdx,%r8
  40bcfe:	48 89 f8             	mov    %rdi,%rax
  40bd01:	48 89 f2             	mov    %rsi,%rdx
  40bd04:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bd08:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bd0c:	4c 89 c0             	mov    %r8,%rax
  40bd0f:	48 89 ca             	mov    %rcx,%rdx
  40bd12:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bd16:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bd1a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bd21:	00 
  40bd22:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40bd29:	00 
  40bd2a:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40bd31:	00 
  40bd32:	48 c7 45 f8 f0 3c 41 	movq   $0x413cf0,-0x8(%rbp)
  40bd39:	00 
  40bd3a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bd3e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bd42:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bd46:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bd4a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bd50:	e8 d8 eb ff ff       	callq  40a92d <_d_assert_msg>
  40bd55:	c9                   	leaveq 
  40bd56:	c3                   	retq   

000000000040bd57 <_aApplyRdw1>:
  40bd57:	55                   	push   %rbp
  40bd58:	48 89 e5             	mov    %rsp,%rbp
  40bd5b:	48 83 ec 40          	sub    $0x40,%rsp
  40bd5f:	49 89 d0             	mov    %rdx,%r8
  40bd62:	48 89 f8             	mov    %rdi,%rax
  40bd65:	48 89 f2             	mov    %rsi,%rdx
  40bd68:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bd6c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bd70:	4c 89 c0             	mov    %r8,%rax
  40bd73:	48 89 ca             	mov    %rcx,%rdx
  40bd76:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bd7a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bd7e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bd85:	00 
  40bd86:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40bd8d:	00 
  40bd8e:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40bd95:	00 
  40bd96:	48 c7 45 f8 40 3d 41 	movq   $0x413d40,-0x8(%rbp)
  40bd9d:	00 
  40bd9e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bda2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bda6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bdaa:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bdae:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bdb4:	e8 74 eb ff ff       	callq  40a92d <_d_assert_msg>
  40bdb9:	c9                   	leaveq 
  40bdba:	c3                   	retq   

000000000040bdbb <_aApplyRcw2>:
  40bdbb:	55                   	push   %rbp
  40bdbc:	48 89 e5             	mov    %rsp,%rbp
  40bdbf:	48 83 ec 40          	sub    $0x40,%rsp
  40bdc3:	49 89 d0             	mov    %rdx,%r8
  40bdc6:	48 89 f8             	mov    %rdi,%rax
  40bdc9:	48 89 f2             	mov    %rsi,%rdx
  40bdcc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bdd0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bdd4:	4c 89 c0             	mov    %r8,%rax
  40bdd7:	48 89 ca             	mov    %rcx,%rdx
  40bdda:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bdde:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bde2:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bde9:	00 
  40bdea:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40bdf1:	00 
  40bdf2:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40bdf9:	00 
  40bdfa:	48 c7 45 f8 90 3d 41 	movq   $0x413d90,-0x8(%rbp)
  40be01:	00 
  40be02:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40be06:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40be0a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40be0e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40be12:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40be18:	e8 10 eb ff ff       	callq  40a92d <_d_assert_msg>
  40be1d:	c9                   	leaveq 
  40be1e:	c3                   	retq   

000000000040be1f <_aApplyRcd2>:
  40be1f:	55                   	push   %rbp
  40be20:	48 89 e5             	mov    %rsp,%rbp
  40be23:	48 83 ec 40          	sub    $0x40,%rsp
  40be27:	49 89 d0             	mov    %rdx,%r8
  40be2a:	48 89 f8             	mov    %rdi,%rax
  40be2d:	48 89 f2             	mov    %rsi,%rdx
  40be30:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40be34:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40be38:	4c 89 c0             	mov    %r8,%rax
  40be3b:	48 89 ca             	mov    %rcx,%rdx
  40be3e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40be42:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40be46:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40be4d:	00 
  40be4e:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40be55:	00 
  40be56:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40be5d:	00 
  40be5e:	48 c7 45 f8 e0 3d 41 	movq   $0x413de0,-0x8(%rbp)
  40be65:	00 
  40be66:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40be6a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40be6e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40be72:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40be76:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40be7c:	e8 ac ea ff ff       	callq  40a92d <_d_assert_msg>
  40be81:	c9                   	leaveq 
  40be82:	c3                   	retq   

000000000040be83 <_aApplyRwc2>:
  40be83:	55                   	push   %rbp
  40be84:	48 89 e5             	mov    %rsp,%rbp
  40be87:	48 83 ec 40          	sub    $0x40,%rsp
  40be8b:	49 89 d0             	mov    %rdx,%r8
  40be8e:	48 89 f8             	mov    %rdi,%rax
  40be91:	48 89 f2             	mov    %rsi,%rdx
  40be94:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40be98:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40be9c:	4c 89 c0             	mov    %r8,%rax
  40be9f:	48 89 ca             	mov    %rcx,%rdx
  40bea2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bea6:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40beaa:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40beb1:	00 
  40beb2:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40beb9:	00 
  40beba:	48 c7 45 f0 4c 00 00 	movq   $0x4c,-0x10(%rbp)
  40bec1:	00 
  40bec2:	48 c7 45 f8 30 3e 41 	movq   $0x413e30,-0x8(%rbp)
  40bec9:	00 
  40beca:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bece:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bed2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bed6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40beda:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bee0:	e8 48 ea ff ff       	callq  40a92d <_d_assert_msg>
  40bee5:	c9                   	leaveq 
  40bee6:	c3                   	retq   

000000000040bee7 <_aApplyRwd2>:
  40bee7:	55                   	push   %rbp
  40bee8:	48 89 e5             	mov    %rsp,%rbp
  40beeb:	48 83 ec 40          	sub    $0x40,%rsp
  40beef:	49 89 d0             	mov    %rdx,%r8
  40bef2:	48 89 f8             	mov    %rdi,%rax
  40bef5:	48 89 f2             	mov    %rsi,%rdx
  40bef8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40befc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bf00:	4c 89 c0             	mov    %r8,%rax
  40bf03:	48 89 ca             	mov    %rcx,%rdx
  40bf06:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bf0a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bf0e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bf15:	00 
  40bf16:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40bf1d:	00 
  40bf1e:	48 c7 45 f0 4c 00 00 	movq   $0x4c,-0x10(%rbp)
  40bf25:	00 
  40bf26:	48 c7 45 f8 80 3e 41 	movq   $0x413e80,-0x8(%rbp)
  40bf2d:	00 
  40bf2e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bf32:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bf36:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bf3a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bf3e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bf44:	e8 e4 e9 ff ff       	callq  40a92d <_d_assert_msg>
  40bf49:	c9                   	leaveq 
  40bf4a:	c3                   	retq   

000000000040bf4b <_aApplyRdc2>:
  40bf4b:	55                   	push   %rbp
  40bf4c:	48 89 e5             	mov    %rsp,%rbp
  40bf4f:	48 83 ec 40          	sub    $0x40,%rsp
  40bf53:	49 89 d0             	mov    %rdx,%r8
  40bf56:	48 89 f8             	mov    %rdi,%rax
  40bf59:	48 89 f2             	mov    %rsi,%rdx
  40bf5c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bf60:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bf64:	4c 89 c0             	mov    %r8,%rax
  40bf67:	48 89 ca             	mov    %rcx,%rdx
  40bf6a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bf6e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bf72:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bf79:	00 
  40bf7a:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40bf81:	00 
  40bf82:	48 c7 45 f0 4c 00 00 	movq   $0x4c,-0x10(%rbp)
  40bf89:	00 
  40bf8a:	48 c7 45 f8 d0 3e 41 	movq   $0x413ed0,-0x8(%rbp)
  40bf91:	00 
  40bf92:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bf96:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bf9a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bf9e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bfa2:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bfa8:	e8 80 e9 ff ff       	callq  40a92d <_d_assert_msg>
  40bfad:	c9                   	leaveq 
  40bfae:	c3                   	retq   

000000000040bfaf <_aApplyRdw2>:
  40bfaf:	55                   	push   %rbp
  40bfb0:	48 89 e5             	mov    %rsp,%rbp
  40bfb3:	48 83 ec 40          	sub    $0x40,%rsp
  40bfb7:	49 89 d0             	mov    %rdx,%r8
  40bfba:	48 89 f8             	mov    %rdi,%rax
  40bfbd:	48 89 f2             	mov    %rsi,%rdx
  40bfc0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bfc4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bfc8:	4c 89 c0             	mov    %r8,%rax
  40bfcb:	48 89 ca             	mov    %rcx,%rdx
  40bfce:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bfd2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bfd6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bfdd:	00 
  40bfde:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40bfe5:	00 
  40bfe6:	48 c7 45 f0 4c 00 00 	movq   $0x4c,-0x10(%rbp)
  40bfed:	00 
  40bfee:	48 c7 45 f8 20 3f 41 	movq   $0x413f20,-0x8(%rbp)
  40bff5:	00 
  40bff6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bffa:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bffe:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c002:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c006:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c00c:	e8 1c e9 ff ff       	callq  40a92d <_d_assert_msg>
  40c011:	c9                   	leaveq 
  40c012:	c3                   	retq   

000000000040c013 <_adSortChar>:
  40c013:	55                   	push   %rbp
  40c014:	48 89 e5             	mov    %rsp,%rbp
  40c017:	48 83 ec 30          	sub    $0x30,%rsp
  40c01b:	48 89 f0             	mov    %rsi,%rax
  40c01e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c022:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c026:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c02d:	00 
  40c02e:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40c035:	00 
  40c036:	48 c7 45 f0 3d 00 00 	movq   $0x3d,-0x10(%rbp)
  40c03d:	00 
  40c03e:	48 c7 45 f8 70 3f 41 	movq   $0x413f70,-0x8(%rbp)
  40c045:	00 
  40c046:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c04a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c04e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c052:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c056:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c05c:	e8 cc e8 ff ff       	callq  40a92d <_d_assert_msg>
  40c061:	c9                   	leaveq 
  40c062:	c3                   	retq   

000000000040c063 <_adSortWchar>:
  40c063:	55                   	push   %rbp
  40c064:	48 89 e5             	mov    %rsp,%rbp
  40c067:	48 83 ec 30          	sub    $0x30,%rsp
  40c06b:	48 89 f0             	mov    %rsi,%rax
  40c06e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c072:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c076:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c07d:	00 
  40c07e:	48 c7 45 e8 82 20 41 	movq   $0x412082,-0x18(%rbp)
  40c085:	00 
  40c086:	48 c7 45 f0 40 00 00 	movq   $0x40,-0x10(%rbp)
  40c08d:	00 
  40c08e:	48 c7 45 f8 b0 3f 41 	movq   $0x413fb0,-0x8(%rbp)
  40c095:	00 
  40c096:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c09a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c09e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c0a2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c0a6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c0ac:	e8 7c e8 ff ff       	callq  40a92d <_d_assert_msg>
  40c0b1:	c9                   	leaveq 
  40c0b2:	c3                   	retq   

000000000040c0b3 <_adReverseChar>:
	2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	4,4,4,4,4,4,4,4,5,5,5,5,6,6,0xFF,0xFF,
];

Array _adReverseChar(char[] a)
  40c0b3:	55                   	push   %rbp
  40c0b4:	48 89 e5             	mov    %rsp,%rbp
  40c0b7:	53                   	push   %rbx
  40c0b8:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  40c0bf:	48 89 bd e8 fe ff ff 	mov    %rdi,-0x118(%rbp)
  40c0c6:	48 89 f0             	mov    %rsi,%rax
  40c0c9:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  40c0d0:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
{
	if(a.length > 1)
  40c0d7:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40c0de:	48 83 f8 01          	cmp    $0x1,%rax
  40c0e2:	0f 86 5a 03 00 00    	jbe    40c442 <_adReverseChar+0x38f>
	{
		char[6] tmp;
  40c0e8:	48 c7 85 50 ff ff ff 	movq   $0x6,-0xb0(%rbp)
  40c0ef:	06 00 00 00 
  40c0f3:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  40c0fa:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  40c101:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  40c108:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c10c:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  40c113:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40c117:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  40c11c:	0f 95 c0             	setne  %al
  40c11f:	83 f0 01             	xor    $0x1,%eax
  40c122:	84 c0                	test   %al,%al
  40c124:	75 11                	jne    40c137 <_adReverseChar+0x84>
  40c126:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c12a:	c6 00 ff             	movb   $0xff,(%rax)
  40c12d:	48 ff 45 b8          	incq   -0x48(%rbp)
  40c131:	48 ff 4d c0          	decq   -0x40(%rbp)
  40c135:	eb e0                	jmp    40c117 <_adReverseChar+0x64>
		char[6] tmplo;
  40c137:	48 c7 85 60 ff ff ff 	movq   $0x6,-0xa0(%rbp)
  40c13e:	06 00 00 00 
  40c142:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40c149:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  40c150:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40c157:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c15b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  40c162:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40c166:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  40c16b:	0f 95 c0             	setne  %al
  40c16e:	83 f0 01             	xor    $0x1,%eax
  40c171:	84 c0                	test   %al,%al
  40c173:	75 11                	jne    40c186 <_adReverseChar+0xd3>
  40c175:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c179:	c6 00 ff             	movb   $0xff,(%rax)
  40c17c:	48 ff 45 c8          	incq   -0x38(%rbp)
  40c180:	48 ff 4d d0          	decq   -0x30(%rbp)
  40c184:	eb e0                	jmp    40c166 <_adReverseChar+0xb3>
		char* lo = a.ptr;
  40c186:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40c18d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		char* hi = &a[length - 1];
  40c191:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40c198:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40c19c:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40c1a3:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  40c1aa:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40c1ae:	48 ff ca             	dec    %rdx
  40c1b1:	48 89 95 00 ff ff ff 	mov    %rdx,-0x100(%rbp)
  40c1b8:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40c1bf:	48 39 85 00 ff ff ff 	cmp    %rax,-0x100(%rbp)
  40c1c6:	73 10                	jae    40c1d8 <_adReverseChar+0x125>
  40c1c8:	48 8b 8d 00 ff ff ff 	mov    -0x100(%rbp),%rcx
  40c1cf:	48 89 8d f8 fe ff ff 	mov    %rcx,-0x108(%rbp)
  40c1d6:	eb 2e                	jmp    40c206 <_adReverseChar+0x153>
  40c1d8:	48 c7 85 70 ff ff ff 	movq   $0xb,-0x90(%rbp)
  40c1df:	0b 00 00 00 
  40c1e3:	48 c7 85 78 ff ff ff 	movq   $0x412152,-0x88(%rbp)
  40c1ea:	52 21 41 00 
  40c1ee:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
  40c1f5:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
  40c1fc:	ba 41 02 00 00       	mov    $0x241,%edx
  40c201:	e8 6f e7 ff ff       	callq  40a975 <_d_array_bounds>
  40c206:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  40c20d:	48 03 85 f0 fe ff ff 	add    -0x110(%rbp),%rax
  40c214:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  40c218:	eb 00                	jmp    40c21a <_adReverseChar+0x167>

		while (lo < hi)
  40c21a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40c21e:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  40c222:	0f 92 c0             	setb   %al
  40c225:	83 f0 01             	xor    $0x1,%eax
  40c228:	84 c0                	test   %al,%al
  40c22a:	0f 85 12 02 00 00    	jne    40c442 <_adReverseChar+0x38f>
		{	auto clo = *lo;
  40c230:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40c234:	0f b6 00             	movzbl (%rax),%eax
  40c237:	88 45 ef             	mov    %al,-0x11(%rbp)
			auto chi = *hi;
  40c23a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40c23e:	0f b6 00             	movzbl (%rax),%eax
  40c241:	88 45 ee             	mov    %al,-0x12(%rbp)

			if (clo <= 0x7F && chi <= 0x7F)
  40c244:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  40c248:	83 f8 7f             	cmp    $0x7f,%eax
  40c24b:	7f 27                	jg     40c274 <_adReverseChar+0x1c1>
  40c24d:	0f b6 45 ee          	movzbl -0x12(%rbp),%eax
  40c251:	83 f8 7f             	cmp    $0x7f,%eax
  40c254:	7f 1e                	jg     40c274 <_adReverseChar+0x1c1>
			{
				*lo = chi;
  40c256:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40c25a:	0f b6 45 ee          	movzbl -0x12(%rbp),%eax
  40c25e:	88 02                	mov    %al,(%rdx)
				*hi = clo;
  40c260:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40c264:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  40c268:	88 02                	mov    %al,(%rdx)
				lo++;
  40c26a:	48 ff 45 b0          	incq   -0x50(%rbp)
				hi--;
  40c26e:	48 ff 4d a8          	decq   -0x58(%rbp)
				continue;
  40c272:	eb a6                	jmp    40c21a <_adReverseChar+0x167>
			}

			uint stridelo = UTF8stride[clo];
  40c274:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  40c278:	48 3d 00 01 00 00    	cmp    $0x100,%rax
  40c27e:	73 0d                	jae    40c28d <_adReverseChar+0x1da>
  40c280:	0f b6 5d ef          	movzbl -0x11(%rbp),%ebx
  40c284:	48 89 9d 08 ff ff ff 	mov    %rbx,-0xf8(%rbp)
  40c28b:	eb 22                	jmp    40c2af <_adReverseChar+0x1fc>
  40c28d:	48 c7 45 80 0b 00 00 	movq   $0xb,-0x80(%rbp)
  40c294:	00 
  40c295:	48 c7 45 88 52 21 41 	movq   $0x412152,-0x78(%rbp)
  40c29c:	00 
  40c29d:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  40c2a1:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  40c2a5:	ba 50 02 00 00       	mov    $0x250,%edx
  40c2aa:	e8 c6 e6 ff ff       	callq  40a975 <_d_array_bounds>
  40c2af:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40c2b6:	48 05 a0 c2 41 00    	add    $0x41c2a0,%rax
  40c2bc:	0f b6 00             	movzbl (%rax),%eax
  40c2bf:	0f b6 c0             	movzbl %al,%eax
  40c2c2:	89 45 e8             	mov    %eax,-0x18(%rbp)

			uint stridehi = 1;
  40c2c5:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  40c2cc:	eb 00                	jmp    40c2ce <_adReverseChar+0x21b>
			while ((chi & 0xC0) == 0x80)
  40c2ce:	0f b6 45 ee          	movzbl -0x12(%rbp),%eax
  40c2d2:	25 c0 00 00 00       	and    $0xc0,%eax
  40c2d7:	3d 80 00 00 00       	cmp    $0x80,%eax
  40c2dc:	0f 94 c0             	sete   %al
  40c2df:	83 f0 01             	xor    $0x1,%eax
  40c2e2:	84 c0                	test   %al,%al
  40c2e4:	75 3f                	jne    40c325 <_adReverseChar+0x272>
			{
				chi = *--hi;
  40c2e6:	48 ff 4d a8          	decq   -0x58(%rbp)
  40c2ea:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40c2ee:	0f b6 00             	movzbl (%rax),%eax
  40c2f1:	88 45 ee             	mov    %al,-0x12(%rbp)
				stridehi++;
  40c2f4:	ff 45 e4             	incl   -0x1c(%rbp)
				assert(hi >= lo);
  40c2f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40c2fb:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  40c2ff:	73 cd                	jae    40c2ce <_adReverseChar+0x21b>
  40c301:	48 c7 45 90 0b 00 00 	movq   $0xb,-0x70(%rbp)
  40c308:	00 
  40c309:	48 c7 45 98 52 21 41 	movq   $0x412152,-0x68(%rbp)
  40c310:	00 
  40c311:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  40c315:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  40c319:	ba 57 02 00 00       	mov    $0x257,%edx
  40c31e:	e8 df e5 ff ff       	callq  40a902 <_d_assert>
  40c323:	eb a9                	jmp    40c2ce <_adReverseChar+0x21b>
			}
			if (lo == hi)
  40c325:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40c329:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  40c32d:	0f 84 0f 01 00 00    	je     40c442 <_adReverseChar+0x38f>
				break;

			if (stridelo == stridehi)
  40c333:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40c336:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  40c339:	75 46                	jne    40c381 <_adReverseChar+0x2ce>
			{

				memcpy(tmp.ptr, lo, stridelo);
  40c33b:	8b 55 e8             	mov    -0x18(%rbp),%edx
  40c33e:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40c342:	48 8d bd 20 ff ff ff 	lea    -0xe0(%rbp),%rdi
  40c349:	e8 d2 0f 00 00       	callq  40d320 <memcpy>
				memcpy(lo, hi, stridelo);
  40c34e:	8b 55 e8             	mov    -0x18(%rbp),%edx
  40c351:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40c355:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  40c359:	e8 c2 0f 00 00       	callq  40d320 <memcpy>
				memcpy(hi, tmp.ptr, stridelo);
  40c35e:	8b 55 e8             	mov    -0x18(%rbp),%edx
  40c361:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
  40c368:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  40c36c:	e8 af 0f 00 00       	callq  40d320 <memcpy>
				lo += stridelo;
  40c371:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40c374:	48 01 45 b0          	add    %rax,-0x50(%rbp)
				hi--;
  40c378:	48 ff 4d a8          	decq   -0x58(%rbp)
				continue;
  40c37c:	e9 99 fe ff ff       	jmpq   40c21a <_adReverseChar+0x167>
			}

			/* Shift the whole array. This is woefully inefficient
			 */
			memcpy(tmp.ptr, hi, stridehi);
  40c381:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  40c384:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40c388:	48 8d bd 20 ff ff ff 	lea    -0xe0(%rbp),%rdi
  40c38f:	e8 8c 0f 00 00       	callq  40d320 <memcpy>
			memcpy(tmplo.ptr, lo, stridelo);
  40c394:	8b 55 e8             	mov    -0x18(%rbp),%edx
  40c397:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40c39b:	48 8d bd 30 ff ff ff 	lea    -0xd0(%rbp),%rdi
  40c3a2:	e8 79 0f 00 00       	callq  40d320 <memcpy>
			memmove(lo + stridehi, lo + stridelo , (hi - lo) - stridelo);
  40c3a7:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40c3ab:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40c3af:	48 29 d0             	sub    %rdx,%rax
  40c3b2:	48 89 c2             	mov    %rax,%rdx
  40c3b5:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40c3b8:	48 89 d1             	mov    %rdx,%rcx
  40c3bb:	48 29 c1             	sub    %rax,%rcx
  40c3be:	48 89 c8             	mov    %rcx,%rax
  40c3c1:	48 89 c2             	mov    %rax,%rdx
  40c3c4:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40c3c7:	48 89 c6             	mov    %rax,%rsi
  40c3ca:	48 03 75 b0          	add    -0x50(%rbp),%rsi
  40c3ce:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  40c3d1:	48 89 c7             	mov    %rax,%rdi
  40c3d4:	48 03 7d b0          	add    -0x50(%rbp),%rdi
  40c3d8:	e8 a5 0f 00 00       	callq  40d382 <memmove>
			memcpy(lo, tmp.ptr, stridehi);
  40c3dd:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  40c3e0:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
  40c3e7:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  40c3eb:	e8 30 0f 00 00       	callq  40d320 <memcpy>
			memcpy(hi + cast(int) stridehi - cast(int) stridelo, tmplo.ptr, stridelo);
  40c3f0:	8b 4d e8             	mov    -0x18(%rbp),%ecx
  40c3f3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  40c3f6:	48 98                	cltq   
  40c3f8:	48 89 c2             	mov    %rax,%rdx
  40c3fb:	48 03 55 a8          	add    -0x58(%rbp),%rdx
  40c3ff:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40c402:	48 98                	cltq   
  40c404:	48 89 d7             	mov    %rdx,%rdi
  40c407:	48 29 c7             	sub    %rax,%rdi
  40c40a:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
  40c411:	48 89 ca             	mov    %rcx,%rdx
  40c414:	e8 07 0f 00 00       	callq  40d320 <memcpy>

			lo += stridehi;
  40c419:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  40c41c:	48 01 45 b0          	add    %rax,-0x50(%rbp)
			hi = hi - 1 + (cast(int) stridehi - cast(int) stridelo);
  40c420:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  40c424:	48 ff c9             	dec    %rcx
  40c427:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  40c42a:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40c42d:	89 d3                	mov    %edx,%ebx
  40c42f:	29 c3                	sub    %eax,%ebx
  40c431:	89 d8                	mov    %ebx,%eax
  40c433:	48 98                	cltq   
  40c435:	48 8d 04 01          	lea    (%rcx,%rax,1),%rax
  40c439:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  40c43d:	e9 d8 fd ff ff       	jmpq   40c21a <_adReverseChar+0x167>
		}
	}

	Array aaa = *cast(Array*)(&a);
  40c442:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  40c449:	48 8b 02             	mov    (%rdx),%rax
  40c44c:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40c453:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40c457:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
	return aaa;
  40c45e:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40c465:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  40c46c:	48 89 02             	mov    %rax,(%rdx)
  40c46f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40c476:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
  40c47d:	48 89 41 08          	mov    %rax,0x8(%rcx)
}
  40c481:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  40c488:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  40c48f:	5b                   	pop    %rbx
  40c490:	c9                   	leaveq 
  40c491:	c3                   	retq   

000000000040c492 <_adReverseWchar>:

Array _adReverseWchar(wchar[] a)
  40c492:	55                   	push   %rbp
  40c493:	48 89 e5             	mov    %rsp,%rbp
  40c496:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  40c49d:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  40c4a4:	48 89 f0             	mov    %rsi,%rax
  40c4a7:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40c4ae:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
{
	if (a.length > 1)
  40c4b5:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40c4bc:	48 83 f8 01          	cmp    $0x1,%rax
  40c4c0:	0f 86 3f 03 00 00    	jbe    40c805 <_adReverseWchar+0x373>
	{
		wchar[2] tmp;
  40c4c6:	48 c7 85 70 ff ff ff 	movq   $0x2,-0x90(%rbp)
  40c4cd:	02 00 00 00 
  40c4d1:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40c4d8:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  40c4df:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40c4e6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40c4ea:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40c4f1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40c4f5:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  40c4fa:	0f 95 c0             	setne  %al
  40c4fd:	83 f0 01             	xor    $0x1,%eax
  40c500:	84 c0                	test   %al,%al
  40c502:	75 14                	jne    40c518 <_adReverseWchar+0x86>
  40c504:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c508:	66 c7 00 ff ff       	movw   $0xffff,(%rax)
  40c50d:	48 83 45 d8 02       	addq   $0x2,-0x28(%rbp)
  40c512:	48 ff 4d e0          	decq   -0x20(%rbp)
  40c516:	eb dd                	jmp    40c4f5 <_adReverseWchar+0x63>
		wchar* lo = a.ptr;
  40c518:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40c51f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		wchar* hi = &a[length - 1];
  40c523:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40c52a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40c52e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40c535:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  40c53c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40c540:	48 ff ca             	dec    %rdx
  40c543:	48 89 95 30 ff ff ff 	mov    %rdx,-0xd0(%rbp)
  40c54a:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40c551:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
  40c558:	73 10                	jae    40c56a <_adReverseWchar+0xd8>
  40c55a:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
  40c561:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
  40c568:	eb 22                	jmp    40c58c <_adReverseWchar+0xfa>
  40c56a:	48 c7 45 80 0b 00 00 	movq   $0xb,-0x80(%rbp)
  40c571:	00 
  40c572:	48 c7 45 88 52 21 41 	movq   $0x412152,-0x78(%rbp)
  40c579:	00 
  40c57a:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  40c57e:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  40c582:	ba 7e 02 00 00       	mov    $0x27e,%edx
  40c587:	e8 e9 e3 ff ff       	callq  40a975 <_d_array_bounds>
  40c58c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40c593:	48 01 c0             	add    %rax,%rax
  40c596:	48 03 85 20 ff ff ff 	add    -0xe0(%rbp),%rax
  40c59d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40c5a1:	eb 00                	jmp    40c5a3 <_adReverseWchar+0x111>

		while (lo < hi)
  40c5a3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40c5a7:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  40c5ab:	0f 92 c0             	setb   %al
  40c5ae:	83 f0 01             	xor    $0x1,%eax
  40c5b1:	84 c0                	test   %al,%al
  40c5b3:	0f 85 4c 02 00 00    	jne    40c805 <_adReverseWchar+0x373>
		{	auto clo = *lo;
  40c5b9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40c5bd:	0f b7 00             	movzwl (%rax),%eax
  40c5c0:	66 89 45 fa          	mov    %ax,-0x6(%rbp)
			auto chi = *hi;
  40c5c4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c5c8:	0f b7 00             	movzwl (%rax),%eax
  40c5cb:	66 89 45 f8          	mov    %ax,-0x8(%rbp)

			if ((clo < 0xD800 || clo > 0xDFFF) &&
  40c5cf:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  40c5d3:	3d 00 d8 00 00       	cmp    $0xd800,%eax
  40c5d8:	7c 0b                	jl     40c5e5 <_adReverseWchar+0x153>
  40c5da:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  40c5de:	3d ff df 00 00       	cmp    $0xdfff,%eax
  40c5e3:	7e 37                	jle    40c61c <_adReverseWchar+0x18a>
  40c5e5:	0f b7 45 f8          	movzwl -0x8(%rbp),%eax
  40c5e9:	3d 00 d8 00 00       	cmp    $0xd800,%eax
  40c5ee:	7c 0b                	jl     40c5fb <_adReverseWchar+0x169>
  40c5f0:	0f b7 45 f8          	movzwl -0x8(%rbp),%eax
  40c5f4:	3d ff df 00 00       	cmp    $0xdfff,%eax
  40c5f9:	7e 21                	jle    40c61c <_adReverseWchar+0x18a>
				(chi < 0xD800 || chi > 0xDFFF))
			{
				*lo = chi;
  40c5fb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40c5ff:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40c602:	66 89 02             	mov    %ax,(%rdx)
				*hi = clo;
  40c605:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40c609:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  40c60d:	66 89 02             	mov    %ax,(%rdx)
				lo++;
  40c610:	48 83 45 d0 02       	addq   $0x2,-0x30(%rbp)
				hi--;
  40c615:	48 83 6d c8 02       	subq   $0x2,-0x38(%rbp)
				continue;
  40c61a:	eb 87                	jmp    40c5a3 <_adReverseWchar+0x111>
			}

			int stridelo = 1 + (clo >= 0xD800 && clo <= 0xDBFF);
  40c61c:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  40c620:	3d 00 d8 00 00       	cmp    $0xd800,%eax
  40c625:	7c 14                	jl     40c63b <_adReverseWchar+0x1a9>
  40c627:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  40c62b:	3d ff db 00 00       	cmp    $0xdbff,%eax
  40c630:	7f 09                	jg     40c63b <_adReverseWchar+0x1a9>
  40c632:	c6 85 3f ff ff ff 01 	movb   $0x1,-0xc1(%rbp)
  40c639:	eb 07                	jmp    40c642 <_adReverseWchar+0x1b0>
  40c63b:	c6 85 3f ff ff ff 00 	movb   $0x0,-0xc1(%rbp)
  40c642:	0f b6 85 3f ff ff ff 	movzbl -0xc1(%rbp),%eax
  40c649:	ff c0                	inc    %eax
  40c64b:	89 45 f4             	mov    %eax,-0xc(%rbp)

			int stridehi = 1;
  40c64e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%rbp)
			if (chi >= 0xDC00 && chi <= 0xDFFF)
  40c655:	0f b7 45 f8          	movzwl -0x8(%rbp),%eax
  40c659:	3d 00 dc 00 00       	cmp    $0xdc00,%eax
  40c65e:	7c 4a                	jl     40c6aa <_adReverseWchar+0x218>
  40c660:	0f b7 45 f8          	movzwl -0x8(%rbp),%eax
  40c664:	3d ff df 00 00       	cmp    $0xdfff,%eax
  40c669:	7f 3f                	jg     40c6aa <_adReverseWchar+0x218>
			{
				chi = *--hi;
  40c66b:	48 83 6d c8 02       	subq   $0x2,-0x38(%rbp)
  40c670:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c674:	0f b7 00             	movzwl (%rax),%eax
  40c677:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
				stridehi++;
  40c67b:	ff 45 f0             	incl   -0x10(%rbp)
				assert(hi >= lo);
  40c67e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c682:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  40c686:	73 22                	jae    40c6aa <_adReverseWchar+0x218>
  40c688:	48 c7 45 90 0b 00 00 	movq   $0xb,-0x70(%rbp)
  40c68f:	00 
  40c690:	48 c7 45 98 52 21 41 	movq   $0x412152,-0x68(%rbp)
  40c697:	00 
  40c698:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  40c69c:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  40c6a0:	ba 95 02 00 00       	mov    $0x295,%edx
  40c6a5:	e8 58 e2 ff ff       	callq  40a902 <_d_assert>
			}
			if (lo == hi)
  40c6aa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40c6ae:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  40c6b2:	0f 84 4d 01 00 00    	je     40c805 <_adReverseWchar+0x373>
				break;

			if (stridelo == stridehi)
  40c6b8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40c6bb:	3b 45 f0             	cmp    -0x10(%rbp),%eax
  40c6be:	75 63                	jne    40c723 <_adReverseWchar+0x291>
			{	int stmp;
  40c6c0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

				assert(stridelo == 2);
  40c6c7:	83 7d f4 02          	cmpl   $0x2,-0xc(%rbp)
  40c6cb:	74 22                	je     40c6ef <_adReverseWchar+0x25d>
  40c6cd:	48 c7 45 a0 0b 00 00 	movq   $0xb,-0x60(%rbp)
  40c6d4:	00 
  40c6d5:	48 c7 45 a8 52 21 41 	movq   $0x412152,-0x58(%rbp)
  40c6dc:	00 
  40c6dd:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  40c6e1:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40c6e5:	ba 9d 02 00 00       	mov    $0x29d,%edx
  40c6ea:	e8 13 e2 ff ff       	callq  40a902 <_d_assert>
				assert(stmp.sizeof == 2 * (*lo).sizeof);
				stmp = *cast(int*)lo;
  40c6ef:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40c6f3:	8b 00                	mov    (%rax),%eax
  40c6f5:	89 45 fc             	mov    %eax,-0x4(%rbp)
				*cast(int*)lo = *cast(int*)hi;
  40c6f8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40c6fc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c700:	8b 00                	mov    (%rax),%eax
  40c702:	89 02                	mov    %eax,(%rdx)
				*cast(int*)hi = stmp;
  40c704:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40c708:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40c70b:	89 02                	mov    %eax,(%rdx)
				lo += stridelo;
  40c70d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40c710:	48 98                	cltq   
  40c712:	48 01 c0             	add    %rax,%rax
  40c715:	48 01 45 d0          	add    %rax,-0x30(%rbp)
				hi--;
  40c719:	48 83 6d c8 02       	subq   $0x2,-0x38(%rbp)
				continue;
  40c71e:	e9 80 fe ff ff       	jmpq   40c5a3 <_adReverseWchar+0x111>
			}

			/* Shift the whole array. This is woefully inefficient
			 */
			memcpy(tmp.ptr, hi, stridehi * wchar.sizeof);
  40c723:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40c726:	48 98                	cltq   
  40c728:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  40c72c:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40c730:	48 8d bd 50 ff ff ff 	lea    -0xb0(%rbp),%rdi
  40c737:	e8 e4 0b 00 00       	callq  40d320 <memcpy>
			memcpy(hi + cast(int) stridehi - cast(int) stridelo, lo, stridelo * wchar.sizeof);
  40c73c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40c73f:	48 98                	cltq   
  40c741:	48 8d 0c 00          	lea    (%rax,%rax,1),%rcx
  40c745:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40c748:	48 98                	cltq   
  40c74a:	48 01 c0             	add    %rax,%rax
  40c74d:	48 89 c2             	mov    %rax,%rdx
  40c750:	48 03 55 c8          	add    -0x38(%rbp),%rdx
  40c754:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40c757:	48 98                	cltq   
  40c759:	48 01 c0             	add    %rax,%rax
  40c75c:	48 89 d7             	mov    %rdx,%rdi
  40c75f:	48 29 c7             	sub    %rax,%rdi
  40c762:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40c766:	48 89 ca             	mov    %rcx,%rdx
  40c769:	e8 b2 0b 00 00       	callq  40d320 <memcpy>
			memmove(lo + stridehi, lo + stridelo , (hi - (lo + stridelo)) * wchar.sizeof);
  40c76e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40c771:	48 98                	cltq   
  40c773:	48 01 c0             	add    %rax,%rax
  40c776:	48 89 c2             	mov    %rax,%rdx
  40c779:	48 03 55 d0          	add    -0x30(%rbp),%rdx
  40c77d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c781:	48 89 c1             	mov    %rax,%rcx
  40c784:	48 29 d1             	sub    %rdx,%rcx
  40c787:	48 89 ca             	mov    %rcx,%rdx
  40c78a:	48 89 d0             	mov    %rdx,%rax
  40c78d:	48 c1 e8 3f          	shr    $0x3f,%rax
  40c791:	48 01 d0             	add    %rdx,%rax
  40c794:	48 d1 f8             	sar    %rax
  40c797:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  40c79b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40c79e:	48 98                	cltq   
  40c7a0:	48 01 c0             	add    %rax,%rax
  40c7a3:	48 89 c6             	mov    %rax,%rsi
  40c7a6:	48 03 75 d0          	add    -0x30(%rbp),%rsi
  40c7aa:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40c7ad:	48 98                	cltq   
  40c7af:	48 01 c0             	add    %rax,%rax
  40c7b2:	48 89 c7             	mov    %rax,%rdi
  40c7b5:	48 03 7d d0          	add    -0x30(%rbp),%rdi
  40c7b9:	e8 c4 0b 00 00       	callq  40d382 <memmove>
			memcpy(lo, tmp.ptr, stridehi * wchar.sizeof);
  40c7be:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40c7c1:	48 98                	cltq   
  40c7c3:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  40c7c7:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  40c7ce:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40c7d2:	e8 49 0b 00 00       	callq  40d320 <memcpy>

			lo += stridehi;
  40c7d7:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40c7da:	48 98                	cltq   
  40c7dc:	48 01 c0             	add    %rax,%rax
  40c7df:	48 01 45 d0          	add    %rax,-0x30(%rbp)
			hi = hi - 1 + (cast(int) stridehi - cast(int) stridelo);
  40c7e3:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  40c7e7:	48 83 e9 02          	sub    $0x2,%rcx
  40c7eb:	8b 55 f4             	mov    -0xc(%rbp),%edx
  40c7ee:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40c7f1:	29 d0                	sub    %edx,%eax
  40c7f3:	48 98                	cltq   
  40c7f5:	48 01 c0             	add    %rax,%rax
  40c7f8:	48 8d 04 01          	lea    (%rcx,%rax,1),%rax
  40c7fc:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40c800:	e9 9e fd ff ff       	jmpq   40c5a3 <_adReverseWchar+0x111>
		}
	}

	Array aaa = *cast(Array*)(&a);
  40c805:	48 8d 95 40 ff ff ff 	lea    -0xc0(%rbp),%rdx
  40c80c:	48 8b 02             	mov    (%rdx),%rax
  40c80f:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40c816:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40c81a:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
	return aaa;
  40c821:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40c828:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  40c82f:	48 89 02             	mov    %rax,(%rdx)
  40c832:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  40c839:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
  40c840:	48 89 41 08          	mov    %rax,0x8(%rcx)
}
  40c844:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40c84b:	c9                   	leaveq 
  40c84c:	c3                   	retq   

000000000040c84d <_adCmpChar>:

int _adCmpChar(Array a1, Array a2)
  40c84d:	55                   	push   %rbp
  40c84e:	48 89 e5             	mov    %rsp,%rbp
  40c851:	48 83 ec 30          	sub    $0x30,%rsp
  40c855:	49 89 d0             	mov    %rdx,%r8
  40c858:	48 89 f8             	mov    %rdi,%rax
  40c85b:	48 89 f2             	mov    %rsi,%rdx
  40c85e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40c862:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40c866:	4c 89 c0             	mov    %r8,%rax
  40c869:	48 89 ca             	mov    %rcx,%rdx
  40c86c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c870:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
			ret 					;
		}
	}
	else
	{
		int len;
  40c874:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
		int c;
  40c87b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)

		len = a1.length;
  40c882:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40c886:	89 45 fc             	mov    %eax,-0x4(%rbp)
		if (a2.length < len)
  40c889:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40c88d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40c890:	48 98                	cltq   
  40c892:	48 39 c2             	cmp    %rax,%rdx
  40c895:	73 07                	jae    40c89e <_adCmpChar+0x51>
			len = a2.length;
  40c897:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40c89b:	89 45 fc             	mov    %eax,-0x4(%rbp)
		c = memcmp(cast(char *)a1.data, cast(char *)a2.data, len);
  40c89e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40c8a1:	48 63 d0             	movslq %eax,%rdx
  40c8a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c8a8:	48 89 c6             	mov    %rax,%rsi
  40c8ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c8af:	48 89 c7             	mov    %rax,%rdi
  40c8b2:	e8 2d 0b 00 00       	callq  40d3e4 <_D6kernel4core6system6memcmpFPvPvmZl>
  40c8b7:	89 45 f8             	mov    %eax,-0x8(%rbp)
		if (!c)
  40c8ba:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  40c8be:	0f 95 c0             	setne  %al
  40c8c1:	83 f0 01             	xor    $0x1,%eax
  40c8c4:	84 c0                	test   %al,%al
  40c8c6:	74 13                	je     40c8db <_adCmpChar+0x8e>
			c = cast(int)a1.length - cast(int)a2.length;
  40c8c8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40c8cc:	89 c2                	mov    %eax,%edx
  40c8ce:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40c8d2:	89 d1                	mov    %edx,%ecx
  40c8d4:	29 c1                	sub    %eax,%ecx
  40c8d6:	89 c8                	mov    %ecx,%eax
  40c8d8:	89 45 f8             	mov    %eax,-0x8(%rbp)
		return c;
  40c8db:	8b 45 f8             	mov    -0x8(%rbp),%eax
	}
}
  40c8de:	c9                   	leaveq 
  40c8df:	c3                   	retq   

000000000040c8e0 <_adReverse>:

Array _adReverse(Array a, size_t szelem)
  40c8e0:	55                   	push   %rbp
  40c8e1:	48 89 e5             	mov    %rsp,%rbp
  40c8e4:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  40c8e8:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  40c8ec:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
  40c8f0:	48 89 f0             	mov    %rsi,%rax
  40c8f3:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40c8f7:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
{
	if (a.length >= 2)
  40c8fb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40c8ff:	48 83 f8 02          	cmp    $0x2,%rax
  40c903:	0f 82 05 01 00 00    	jb     40ca0e <_adReverse+0x12e>
	{
		byte*	 tmp;
  40c909:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40c910:	00 
		byte[16] buffer;
  40c911:	48 c7 45 c0 10 00 00 	movq   $0x10,-0x40(%rbp)
  40c918:	00 
  40c919:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40c91d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40c921:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40c925:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40c929:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c92d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40c931:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40c936:	0f 95 c0             	setne  %al
  40c939:	83 f0 01             	xor    $0x1,%eax
  40c93c:	84 c0                	test   %al,%al
  40c93e:	75 11                	jne    40c951 <_adReverse+0x71>
  40c940:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c944:	c6 00 00             	movb   $0x0,(%rax)
  40c947:	48 ff 45 f0          	incq   -0x10(%rbp)
  40c94b:	48 ff 4d f8          	decq   -0x8(%rbp)
  40c94f:	eb e0                	jmp    40c931 <_adReverse+0x51>

		void* lo = a.data;
  40c951:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40c955:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		void* hi = a.data + (a.length - 1) * szelem;
  40c959:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40c95d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40c961:	48 ff c8             	dec    %rax
  40c964:	48 0f af 45 98       	imul   -0x68(%rbp),%rax
  40c969:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40c96d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

		tmp = buffer.ptr;
  40c971:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40c975:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		if (szelem > 16)
  40c979:	48 83 7d 98 10       	cmpq   $0x10,-0x68(%rbp)
  40c97e:	76 37                	jbe    40c9b7 <_adReverse+0xd7>
			tmp = cast(byte*)alloca(szelem);
  40c980:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40c984:	48 83 c0 0f          	add    $0xf,%rax
  40c988:	48 83 c0 0f          	add    $0xf,%rax
  40c98c:	48 c1 e8 04          	shr    $0x4,%rax
  40c990:	48 c1 e0 04          	shl    $0x4,%rax
  40c994:	48 29 c4             	sub    %rax,%rsp
  40c997:	48 89 65 90          	mov    %rsp,-0x70(%rbp)
  40c99b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40c99f:	48 83 c0 0f          	add    $0xf,%rax
  40c9a3:	48 c1 e8 04          	shr    $0x4,%rax
  40c9a7:	48 c1 e0 04          	shl    $0x4,%rax
  40c9ab:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  40c9af:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40c9b3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		for (; lo < hi; lo += szelem, hi -= szelem)
  40c9b7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40c9bb:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  40c9bf:	0f 92 c0             	setb   %al
  40c9c2:	83 f0 01             	xor    $0x1,%eax
  40c9c5:	84 c0                	test   %al,%al
  40c9c7:	75 45                	jne    40ca0e <_adReverse+0x12e>
		{
			memcpy(tmp, lo,  szelem);
  40c9c9:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40c9cd:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40c9d1:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40c9d5:	e8 46 09 00 00       	callq  40d320 <memcpy>
			memcpy(lo,	hi,  szelem);
  40c9da:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40c9de:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40c9e2:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40c9e6:	e8 35 09 00 00       	callq  40d320 <memcpy>
			memcpy(hi,	tmp, szelem);
  40c9eb:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40c9ef:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40c9f3:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  40c9f7:	e8 24 09 00 00       	callq  40d320 <memcpy>
  40c9fc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40ca00:	48 01 45 e0          	add    %rax,-0x20(%rbp)
  40ca04:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40ca08:	48 29 45 d8          	sub    %rax,-0x28(%rbp)
  40ca0c:	eb a9                	jmp    40c9b7 <_adReverse+0xd7>
		}
	}
	return a;
  40ca0e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40ca12:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40ca16:	48 89 02             	mov    %rax,(%rdx)
  40ca19:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40ca1d:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40ca21:	48 89 42 08          	mov    %rax,0x8(%rdx)
}
  40ca25:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40ca29:	c9                   	leaveq 
  40ca2a:	c3                   	retq   

000000000040ca2b <_adEq>:

int _adEq(Array a1, Array a2, TypeInfo ti)
  40ca2b:	55                   	push   %rbp
  40ca2c:	48 89 e5             	mov    %rsp,%rbp
  40ca2f:	48 83 ec 50          	sub    $0x50,%rsp
  40ca33:	49 89 d1             	mov    %rdx,%r9
  40ca36:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  40ca3a:	48 89 f8             	mov    %rdi,%rax
  40ca3d:	48 89 f2             	mov    %rsi,%rdx
  40ca40:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40ca44:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40ca48:	4c 89 c8             	mov    %r9,%rax
  40ca4b:	48 89 ca             	mov    %rcx,%rdx
  40ca4e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40ca52:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
{
	if(a1.length != a2.length)
  40ca56:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40ca5a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40ca5e:	48 39 c2             	cmp    %rax,%rdx
  40ca61:	74 0c                	je     40ca6f <_adEq+0x44>
		return 0;				// not equal
  40ca63:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  40ca6a:	e9 be 00 00 00       	jmpq   40cb2d <_adEq+0x102>

	auto sz = ti.tsize();
  40ca6f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40ca73:	48 8b 00             	mov    (%rax),%rax
  40ca76:	48 83 c0 40          	add    $0x40,%rax
  40ca7a:	48 8b 00             	mov    (%rax),%rax
  40ca7d:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  40ca81:	ff d0                	callq  *%rax
  40ca83:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	auto p1 = a1.data;
  40ca87:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ca8b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	auto p2 = a2.data;
  40ca8f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40ca93:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	if(sz == 1)
  40ca97:	48 83 7d f0 01       	cmpq   $0x1,-0x10(%rbp)
  40ca9c:	75 1f                	jne    40cabd <_adEq+0x92>
		// We should really have a ti.isPOD() check for this
		return (memcmp(p1, p2, a1.length) == 0);
  40ca9e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40caa2:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40caa6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40caaa:	e8 35 09 00 00       	callq  40d3e4 <_D6kernel4core6system6memcmpFPvPvmZl>
  40caaf:	48 85 c0             	test   %rax,%rax
  40cab2:	0f 94 c0             	sete   %al
  40cab5:	0f b6 c0             	movzbl %al,%eax
  40cab8:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  40cabb:	eb 70                	jmp    40cb2d <_adEq+0x102>

	for(size_t i = 0; i < a1.length; i++)
  40cabd:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40cac4:	00 
  40cac5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40cac9:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  40cacd:	0f 92 c0             	setb   %al
  40cad0:	83 f0 01             	xor    $0x1,%eax
  40cad3:	84 c0                	test   %al,%al
  40cad5:	75 4f                	jne    40cb26 <_adEq+0xfb>
	{
		if(!ti.equals(p1 + i * sz, p2 + i * sz))
  40cad7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cadb:	48 8b 00             	mov    (%rax),%rax
  40cade:	48 83 c0 30          	add    $0x30,%rax
  40cae2:	48 8b 08             	mov    (%rax),%rcx
  40cae5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cae9:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  40caee:	48 89 c2             	mov    %rax,%rdx
  40caf1:	48 03 55 e0          	add    -0x20(%rbp),%rdx
  40caf5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40caf9:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  40cafe:	48 89 c6             	mov    %rax,%rsi
  40cb01:	48 03 75 e8          	add    -0x18(%rbp),%rsi
  40cb05:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  40cb09:	ff d1                	callq  *%rcx
  40cb0b:	85 c0                	test   %eax,%eax
  40cb0d:	0f 95 c0             	setne  %al
  40cb10:	83 f0 01             	xor    $0x1,%eax
  40cb13:	84 c0                	test   %al,%al
  40cb15:	74 09                	je     40cb20 <_adEq+0xf5>
			return 0;			// not equal
  40cb17:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  40cb1e:	eb 0d                	jmp    40cb2d <_adEq+0x102>
		// We should really have a ti.isPOD() check for this
		return (memcmp(p1, p2, a1.length) == 0);

	for(size_t i = 0; i < a1.length; i++)
	{
		if(!ti.equals(p1 + i * sz, p2 + i * sz))
  40cb20:	48 ff 45 f8          	incq   -0x8(%rbp)
  40cb24:	eb 9f                	jmp    40cac5 <_adEq+0x9a>
			return 0;			// not equal
	}

	return 1;					// equal
  40cb26:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%rbp)
  40cb2d:	8b 45 b4             	mov    -0x4c(%rbp),%eax
}
  40cb30:	c9                   	leaveq 
  40cb31:	c3                   	retq   

000000000040cb32 <_adCmp>:

int _adCmp(Array a1, Array a2, TypeInfo ti)
  40cb32:	55                   	push   %rbp
  40cb33:	48 89 e5             	mov    %rsp,%rbp
  40cb36:	48 83 ec 70          	sub    $0x70,%rsp
  40cb3a:	49 89 d1             	mov    %rdx,%r9
  40cb3d:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
  40cb41:	48 89 f8             	mov    %rdi,%rax
  40cb44:	48 89 f2             	mov    %rsi,%rdx
  40cb47:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40cb4b:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  40cb4f:	4c 89 c8             	mov    %r9,%rax
  40cb52:	48 89 ca             	mov    %rcx,%rdx
  40cb55:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40cb59:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
{
	//printf("adCmp()\n");
	auto len = a1.length;
  40cb5d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40cb61:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (a2.length < len)
  40cb65:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40cb69:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40cb6d:	73 08                	jae    40cb77 <_adCmp+0x45>
		len = a2.length;
  40cb6f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40cb73:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	auto sz = ti.tsize();
  40cb77:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40cb7b:	48 8b 00             	mov    (%rax),%rax
  40cb7e:	48 83 c0 40          	add    $0x40,%rax
  40cb82:	48 8b 00             	mov    (%rax),%rax
  40cb85:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40cb89:	ff d0                	callq  *%rax
  40cb8b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	void *p1 = a1.data;
  40cb8f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cb93:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	void *p2 = a2.data;
  40cb97:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40cb9b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)

	if (sz == 1)
  40cb9f:	48 83 7d d8 01       	cmpq   $0x1,-0x28(%rbp)
  40cba4:	75 28                	jne    40cbce <_adCmp+0x9c>
	{	// We should really have a ti.isPOD() check for this
		auto c = memcmp(p1, p2, len);
  40cba6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40cbaa:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40cbae:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40cbb2:	e8 2d 08 00 00       	callq  40d3e4 <_D6kernel4core6system6memcmpFPvPvmZl>
  40cbb7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		if (c)
  40cbbb:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  40cbc0:	74 71                	je     40cc33 <_adCmp+0x101>
			return c;
  40cbc2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cbc6:	89 45 90             	mov    %eax,-0x70(%rbp)
  40cbc9:	e9 9e 00 00 00       	jmpq   40cc6c <_adCmp+0x13a>
	}
	else
	{
		for (size_t i = 0; i < len; i++)
  40cbce:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40cbd5:	00 
  40cbd6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40cbda:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40cbde:	0f 92 c0             	setb   %al
  40cbe1:	83 f0 01             	xor    $0x1,%eax
  40cbe4:	84 c0                	test   %al,%al
  40cbe6:	75 4b                	jne    40cc33 <_adCmp+0x101>
		{
			auto c = ti.compare(p1 + i * sz, p2 + i * sz);
  40cbe8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40cbec:	48 8b 00             	mov    (%rax),%rax
  40cbef:	48 83 c0 38          	add    $0x38,%rax
  40cbf3:	48 8b 08             	mov    (%rax),%rcx
  40cbf6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40cbfa:	48 0f af 45 d8       	imul   -0x28(%rbp),%rax
  40cbff:	48 89 c2             	mov    %rax,%rdx
  40cc02:	48 03 55 c8          	add    -0x38(%rbp),%rdx
  40cc06:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40cc0a:	48 0f af 45 d8       	imul   -0x28(%rbp),%rax
  40cc0f:	48 89 c6             	mov    %rax,%rsi
  40cc12:	48 03 75 d0          	add    -0x30(%rbp),%rsi
  40cc16:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40cc1a:	ff d1                	callq  *%rcx
  40cc1c:	89 45 fc             	mov    %eax,-0x4(%rbp)
			if (c)
  40cc1f:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40cc23:	74 08                	je     40cc2d <_adCmp+0xfb>
				return c;
  40cc25:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40cc28:	89 45 90             	mov    %eax,-0x70(%rbp)
  40cc2b:	eb 3f                	jmp    40cc6c <_adCmp+0x13a>
	else
	{
		for (size_t i = 0; i < len; i++)
		{
			auto c = ti.compare(p1 + i * sz, p2 + i * sz);
			if (c)
  40cc2d:	48 ff 45 f0          	incq   -0x10(%rbp)
  40cc31:	eb a3                	jmp    40cbd6 <_adCmp+0xa4>
				return c;
		}
	}
	if (a1.length == a2.length)
  40cc33:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40cc37:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40cc3b:	48 39 c2             	cmp    %rax,%rdx
  40cc3e:	75 09                	jne    40cc49 <_adCmp+0x117>
		return 0;
  40cc40:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%rbp)
  40cc47:	eb 23                	jmp    40cc6c <_adCmp+0x13a>
	return (a1.length > a2.length) ? 1 : -1;
  40cc49:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40cc4d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40cc51:	48 39 c2             	cmp    %rax,%rdx
  40cc54:	76 09                	jbe    40cc5f <_adCmp+0x12d>
  40cc56:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%rbp)
  40cc5d:	eb 07                	jmp    40cc66 <_adCmp+0x134>
  40cc5f:	c7 45 94 ff ff ff ff 	movl   $0xffffffff,-0x6c(%rbp)
  40cc66:	8b 45 94             	mov    -0x6c(%rbp),%eax
  40cc69:	89 45 90             	mov    %eax,-0x70(%rbp)
  40cc6c:	8b 45 90             	mov    -0x70(%rbp),%eax
}
  40cc6f:	c9                   	leaveq 
  40cc70:	c3                   	retq   

000000000040cc71 <_adSort>:

Array _adSort(Array a, TypeInfo ti)
  40cc71:	55                   	push   %rbp
  40cc72:	48 89 e5             	mov    %rsp,%rbp
  40cc75:	48 81 ec a0 04 00 00 	sub    $0x4a0,%rsp
  40cc7c:	48 89 bd 60 fb ff ff 	mov    %rdi,-0x4a0(%rbp)
  40cc83:	48 89 8d 68 fb ff ff 	mov    %rcx,-0x498(%rbp)
  40cc8a:	48 89 f0             	mov    %rsi,%rax
  40cc8d:	48 89 85 70 fb ff ff 	mov    %rax,-0x490(%rbp)
  40cc94:	48 89 95 78 fb ff ff 	mov    %rdx,-0x488(%rbp)
	struct StackEntry {
		byte *l;
		byte *r;
	}

	size_t elem_size = ti.tsize();
  40cc9b:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40cca2:	48 8b 00             	mov    (%rax),%rax
  40cca5:	48 83 c0 40          	add    $0x40,%rax
  40cca9:	48 8b 00             	mov    (%rax),%rax
  40ccac:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40ccb3:	ff d0                	callq  *%rax
  40ccb5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	size_t qsort_limit = elem_size * Qsort_Threshold;
  40ccb9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ccbd:	48 89 d0             	mov    %rdx,%rax
  40ccc0:	48 c1 e0 03          	shl    $0x3,%rax
  40ccc4:	48 29 d0             	sub    %rdx,%rax
  40ccc7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	static assert(ubyte.sizeof == 1);
	static assert(ubyte.max == 255);

	StackEntry[size_t.sizeof * 8] stack; // log2( size_t.max )
  40cccb:	48 c7 45 80 40 00 00 	movq   $0x40,-0x80(%rbp)
  40ccd2:	00 
  40ccd3:	48 8d 85 80 fb ff ff 	lea    -0x480(%rbp),%rax
  40ccda:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  40ccde:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40cce2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40cce6:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40ccea:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40ccee:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40ccf3:	0f 95 c0             	setne  %al
  40ccf6:	83 f0 01             	xor    $0x1,%eax
  40ccf9:	84 c0                	test   %al,%al
  40ccfb:	75 24                	jne    40cd21 <_adSort+0xb0>
  40ccfd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40cd01:	48 8b 15 f8 72 00 00 	mov    0x72f8(%rip),%rdx        # 414000 <_D_adSort10StackEntry6__initZ>
  40cd08:	48 89 10             	mov    %rdx,(%rax)
  40cd0b:	48 8b 15 f6 72 00 00 	mov    0x72f6(%rip),%rdx        # 414008 <_D_adSort10StackEntry6__initZ+0x8>
  40cd12:	48 89 50 08          	mov    %rdx,0x8(%rax)
  40cd16:	48 83 45 f0 10       	addq   $0x10,-0x10(%rbp)
  40cd1b:	48 ff 4d f8          	decq   -0x8(%rbp)
  40cd1f:	eb cd                	jmp    40ccee <_adSort+0x7d>
	StackEntry * sp = stack.ptr;
  40cd21:	48 8d 85 80 fb ff ff 	lea    -0x480(%rbp),%rax
  40cd28:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	byte* lbound = cast(byte *) a.data;
  40cd2c:	48 8b 85 78 fb ff ff 	mov    -0x488(%rbp),%rax
  40cd33:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	byte* rbound = cast(byte *) a.data + a.length * elem_size;
  40cd37:	48 8b 95 78 fb ff ff 	mov    -0x488(%rbp),%rdx
  40cd3e:	48 8b 85 70 fb ff ff 	mov    -0x490(%rbp),%rax
  40cd45:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  40cd4a:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40cd4e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40cd52:	eb 00                	jmp    40cd54 <_adSort+0xe3>
	byte* li = void;
	byte* ri = void;

	while (1)
  40cd54:	b8 00 00 00 00       	mov    $0x0,%eax
  40cd59:	84 c0                	test   %al,%al
  40cd5b:	0f 85 a8 03 00 00    	jne    40d109 <_adSort+0x498>
	{
		if (rbound - lbound > qsort_limit)
  40cd61:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cd65:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cd69:	48 29 d0             	sub    %rdx,%rax
  40cd6c:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40cd70:	0f 86 8c 02 00 00    	jbe    40d002 <_adSort+0x391>
		{
			ti.swap(lbound,
  40cd76:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40cd7d:	48 8b 00             	mov    (%rax),%rax
  40cd80:	48 83 c0 48          	add    $0x48,%rax
  40cd84:	4c 8b 00             	mov    (%rax),%r8
  40cd87:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cd8b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cd8f:	48 29 d0             	sub    %rdx,%rax
  40cd92:	48 89 c1             	mov    %rax,%rcx
  40cd95:	48 d1 e9             	shr    %rcx
  40cd98:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cd9c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cda0:	48 29 d0             	sub    %rdx,%rax
  40cda3:	48 d1 e8             	shr    %rax
  40cda6:	ba 00 00 00 00       	mov    $0x0,%edx
  40cdab:	48 f7 75 e8          	divq   -0x18(%rbp)
  40cdaf:	48 89 d0             	mov    %rdx,%rax
  40cdb2:	48 89 ca             	mov    %rcx,%rdx
  40cdb5:	48 29 c2             	sub    %rax,%rdx
  40cdb8:	48 89 d0             	mov    %rdx,%rax
  40cdbb:	48 89 c2             	mov    %rax,%rdx
  40cdbe:	48 03 55 d0          	add    -0x30(%rbp),%rdx
  40cdc2:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40cdc6:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40cdcd:	41 ff d0             	callq  *%r8
				lbound + (
						  ((rbound - lbound) >>> 1) -
						  (((rbound - lbound) >>> 1) % elem_size)
						  ));

			li = lbound + elem_size;
  40cdd0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cdd4:	48 03 45 d0          	add    -0x30(%rbp),%rax
  40cdd8:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
			ri = rbound - elem_size;
  40cddc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cde0:	48 89 c2             	mov    %rax,%rdx
  40cde3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cde7:	48 29 d0             	sub    %rdx,%rax
  40cdea:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

			if (ti.compare(li, ri) > 0)
  40cdee:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40cdf5:	48 8b 00             	mov    (%rax),%rax
  40cdf8:	48 83 c0 38          	add    $0x38,%rax
  40cdfc:	48 8b 00             	mov    (%rax),%rax
  40cdff:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40ce03:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40ce07:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40ce0e:	ff d0                	callq  *%rax
  40ce10:	85 c0                	test   %eax,%eax
  40ce12:	7e 22                	jle    40ce36 <_adSort+0x1c5>
				ti.swap(li, ri);
  40ce14:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40ce1b:	48 8b 00             	mov    (%rax),%rax
  40ce1e:	48 83 c0 48          	add    $0x48,%rax
  40ce22:	48 8b 00             	mov    (%rax),%rax
  40ce25:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40ce29:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40ce2d:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40ce34:	ff d0                	callq  *%rax
			if (ti.compare(lbound, ri) > 0)
  40ce36:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40ce3d:	48 8b 00             	mov    (%rax),%rax
  40ce40:	48 83 c0 38          	add    $0x38,%rax
  40ce44:	48 8b 00             	mov    (%rax),%rax
  40ce47:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40ce4b:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40ce4f:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40ce56:	ff d0                	callq  *%rax
  40ce58:	85 c0                	test   %eax,%eax
  40ce5a:	7e 22                	jle    40ce7e <_adSort+0x20d>
				ti.swap(lbound, ri);
  40ce5c:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40ce63:	48 8b 00             	mov    (%rax),%rax
  40ce66:	48 83 c0 48          	add    $0x48,%rax
  40ce6a:	48 8b 00             	mov    (%rax),%rax
  40ce6d:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40ce71:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40ce75:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40ce7c:	ff d0                	callq  *%rax
			if (ti.compare(li, lbound) > 0)
  40ce7e:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40ce85:	48 8b 00             	mov    (%rax),%rax
  40ce88:	48 83 c0 38          	add    $0x38,%rax
  40ce8c:	48 8b 00             	mov    (%rax),%rax
  40ce8f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40ce93:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40ce97:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40ce9e:	ff d0                	callq  *%rax
  40cea0:	85 c0                	test   %eax,%eax
  40cea2:	7e 22                	jle    40cec6 <_adSort+0x255>
				ti.swap(li, lbound);
  40cea4:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40ceab:	48 8b 00             	mov    (%rax),%rax
  40ceae:	48 83 c0 48          	add    $0x48,%rax
  40ceb2:	48 8b 00             	mov    (%rax),%rax
  40ceb5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40ceb9:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40cebd:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40cec4:	ff d0                	callq  *%rax

			while (1)
  40cec6:	b8 00 00 00 00       	mov    $0x0,%eax
  40cecb:	84 c0                	test   %al,%al
  40cecd:	0f 85 9f 00 00 00    	jne    40cf72 <_adSort+0x301>
			{
				do
					li += elem_size;
  40ced3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ced7:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  40cedb:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40cee2:	48 8b 00             	mov    (%rax),%rax
  40cee5:	48 83 c0 38          	add    $0x38,%rax
  40cee9:	48 8b 00             	mov    (%rax),%rax
  40ceec:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cef0:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40cef4:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40cefb:	ff d0                	callq  *%rax
  40cefd:	c1 e8 1f             	shr    $0x1f,%eax
  40cf00:	83 f0 01             	xor    $0x1,%eax
  40cf03:	84 c0                	test   %al,%al
  40cf05:	75 02                	jne    40cf09 <_adSort+0x298>
  40cf07:	eb ca                	jmp    40ced3 <_adSort+0x262>
				while (ti.compare(li, lbound) < 0);
				do
					ri -= elem_size;
  40cf09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cf0d:	48 29 45 b8          	sub    %rax,-0x48(%rbp)
  40cf11:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40cf18:	48 8b 00             	mov    (%rax),%rax
  40cf1b:	48 83 c0 38          	add    $0x38,%rax
  40cf1f:	48 8b 00             	mov    (%rax),%rax
  40cf22:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cf26:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40cf2a:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40cf31:	ff d0                	callq  *%rax
  40cf33:	85 c0                	test   %eax,%eax
  40cf35:	0f 9f c0             	setg   %al
  40cf38:	83 f0 01             	xor    $0x1,%eax
  40cf3b:	84 c0                	test   %al,%al
  40cf3d:	75 02                	jne    40cf41 <_adSort+0x2d0>
  40cf3f:	eb c8                	jmp    40cf09 <_adSort+0x298>
				while (ti.compare(ri, lbound) > 0);
				if (li > ri)
  40cf41:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40cf45:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  40cf49:	77 27                	ja     40cf72 <_adSort+0x301>
					break;
				ti.swap(li, ri);
  40cf4b:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40cf52:	48 8b 00             	mov    (%rax),%rax
  40cf55:	48 83 c0 48          	add    $0x48,%rax
  40cf59:	48 8b 00             	mov    (%rax),%rax
  40cf5c:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40cf60:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40cf64:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40cf6b:	ff d0                	callq  *%rax
  40cf6d:	e9 54 ff ff ff       	jmpq   40cec6 <_adSort+0x255>
			}
			ti.swap(lbound, ri);
  40cf72:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40cf79:	48 8b 00             	mov    (%rax),%rax
  40cf7c:	48 83 c0 48          	add    $0x48,%rax
  40cf80:	48 8b 00             	mov    (%rax),%rax
  40cf83:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40cf87:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40cf8b:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40cf92:	ff d0                	callq  *%rax
			if (ri - lbound > rbound - li)
  40cf94:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cf98:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cf9c:	48 29 d0             	sub    %rdx,%rax
  40cf9f:	48 89 c1             	mov    %rax,%rcx
  40cfa2:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40cfa6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cfaa:	48 29 d0             	sub    %rdx,%rax
  40cfad:	48 39 c1             	cmp    %rax,%rcx
  40cfb0:	7e 24                	jle    40cfd6 <_adSort+0x365>
			{
				sp.l = lbound;
  40cfb2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40cfb6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40cfba:	48 89 02             	mov    %rax,(%rdx)
				sp.r = ri;
  40cfbd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40cfc1:	48 83 c2 08          	add    $0x8,%rdx
  40cfc5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cfc9:	48 89 02             	mov    %rax,(%rdx)
				lbound = li;
  40cfcc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40cfd0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40cfd4:	eb 22                	jmp    40cff8 <_adSort+0x387>
			}
			else
			{
				sp.l = li;
  40cfd6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40cfda:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40cfde:	48 89 02             	mov    %rax,(%rdx)
				sp.r = rbound;
  40cfe1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40cfe5:	48 83 c2 08          	add    $0x8,%rdx
  40cfe9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cfed:	48 89 02             	mov    %rax,(%rdx)
				rbound = ri;
  40cff0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cff4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			}
			++sp;
  40cff8:	48 83 45 d8 10       	addq   $0x10,-0x28(%rbp)
  40cffd:	e9 52 fd ff ff       	jmpq   40cd54 <_adSort+0xe3>
		} else {
			// Use insertion sort
			for (ri = lbound, li = lbound + elem_size;
  40d002:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d006:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40d00a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d00e:	48 03 45 d0          	add    -0x30(%rbp),%rax
  40d012:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40d016:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d01a:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  40d01e:	0f 92 c0             	setb   %al
  40d021:	83 f0 01             	xor    $0x1,%eax
  40d024:	84 c0                	test   %al,%al
  40d026:	0f 85 87 00 00 00    	jne    40d0b3 <_adSort+0x442>
				 li < rbound;
				 ri = li, li += elem_size)
			{
				for ( ; ti.compare(ri, ri + elem_size) > 0;
  40d02c:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d033:	48 8b 00             	mov    (%rax),%rax
  40d036:	48 83 c0 38          	add    $0x38,%rax
  40d03a:	48 8b 08             	mov    (%rax),%rcx
  40d03d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d041:	48 89 c2             	mov    %rax,%rdx
  40d044:	48 03 55 b8          	add    -0x48(%rbp),%rdx
  40d048:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40d04c:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d053:	ff d1                	callq  *%rcx
  40d055:	85 c0                	test   %eax,%eax
  40d057:	0f 9f c0             	setg   %al
  40d05a:	83 f0 01             	xor    $0x1,%eax
  40d05d:	84 c0                	test   %al,%al
  40d05f:	75 3d                	jne    40d09e <_adSort+0x42d>
					  ri -= elem_size)
				{
					ti.swap(ri, ri + elem_size);
  40d061:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d068:	48 8b 00             	mov    (%rax),%rax
  40d06b:	48 83 c0 48          	add    $0x48,%rax
  40d06f:	48 8b 08             	mov    (%rax),%rcx
  40d072:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d076:	48 89 c2             	mov    %rax,%rdx
  40d079:	48 03 55 b8          	add    -0x48(%rbp),%rdx
  40d07d:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40d081:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d088:	ff d1                	callq  *%rcx
					if (ri == lbound)
  40d08a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d08e:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  40d092:	74 0a                	je     40d09e <_adSort+0x42d>
  40d094:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d098:	48 29 45 b8          	sub    %rax,-0x48(%rbp)
  40d09c:	eb 8e                	jmp    40d02c <_adSort+0x3bb>
  40d09e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d0a2:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40d0a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d0aa:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  40d0ae:	e9 63 ff ff ff       	jmpq   40d016 <_adSort+0x3a5>
						break;
				}
			}
			if (sp != stack.ptr)
  40d0b3:	48 8d 85 80 fb ff ff 	lea    -0x480(%rbp),%rax
  40d0ba:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  40d0be:	74 24                	je     40d0e4 <_adSort+0x473>
			{
				--sp;
  40d0c0:	48 83 6d d8 10       	subq   $0x10,-0x28(%rbp)
				lbound = sp.l;
  40d0c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d0c9:	48 8b 00             	mov    (%rax),%rax
  40d0cc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
				rbound = sp.r;
  40d0d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d0d4:	48 83 c0 08          	add    $0x8,%rax
  40d0d8:	48 8b 00             	mov    (%rax),%rax
  40d0db:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40d0df:	e9 70 fc ff ff       	jmpq   40cd54 <_adSort+0xe3>
			}
			else
				return a;
  40d0e4:	48 8b 85 70 fb ff ff 	mov    -0x490(%rbp),%rax
  40d0eb:	48 8b 95 60 fb ff ff 	mov    -0x4a0(%rbp),%rdx
  40d0f2:	48 89 02             	mov    %rax,(%rdx)
  40d0f5:	48 8b 85 78 fb ff ff 	mov    -0x488(%rbp),%rax
  40d0fc:	48 8b 95 60 fb ff ff 	mov    -0x4a0(%rbp),%rdx
  40d103:	48 89 42 08          	mov    %rax,0x8(%rdx)
  40d107:	eb 3d                	jmp    40d146 <_adSort+0x4d5>
	byte* li = void;
	byte* ri = void;

	while (1)
	{
		if (rbound - lbound > qsort_limit)
  40d109:	48 c7 45 90 0b 00 00 	movq   $0xb,-0x70(%rbp)
  40d110:	00 
  40d111:	48 c7 45 98 52 21 41 	movq   $0x412152,-0x68(%rbp)
  40d118:	00 
  40d119:	48 c7 45 a0 19 00 00 	movq   $0x19,-0x60(%rbp)
  40d120:	00 
  40d121:	48 c7 45 a8 10 40 41 	movq   $0x414010,-0x58(%rbp)
  40d128:	00 
  40d129:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40d12d:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
  40d131:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  40d135:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40d139:	41 b8 db 03 00 00    	mov    $0x3db,%r8d
  40d13f:	e8 e9 d7 ff ff       	callq  40a92d <_d_assert_msg>
			}
			else
				return a;
		}
	}
}
  40d144:	eb 07                	jmp    40d14d <_adSort+0x4dc>
  40d146:	48 8b 85 60 fb ff ff 	mov    -0x4a0(%rbp),%rax
  40d14d:	c9                   	leaveq 
  40d14e:	c3                   	retq   

000000000040d14f <_d_arraycast>:

void[] _d_arraycast(size_t tsize, size_t fsize, void[] a)
  40d14f:	55                   	push   %rbp
  40d150:	48 89 e5             	mov    %rsp,%rbp
  40d153:	48 83 ec 50          	sub    $0x50,%rsp
  40d157:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40d15b:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40d15f:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40d163:	4c 89 c0             	mov    %r8,%rax
  40d166:	48 89 ca             	mov    %rcx,%rdx
  40d169:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  40d16d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
{
	auto length = a.length;
  40d171:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d175:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto nbytes = length * fsize;
  40d179:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d17d:	48 0f af 45 d0       	imul   -0x30(%rbp),%rax
  40d182:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	if(nbytes % tsize != 0)
  40d186:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d18a:	ba 00 00 00 00       	mov    $0x0,%edx
  40d18f:	48 f7 75 d8          	divq   -0x28(%rbp)
  40d193:	48 89 d0             	mov    %rdx,%rax
  40d196:	48 85 c0             	test   %rax,%rax
  40d199:	74 34                	je     40d1cf <_d_arraycast+0x80>
		throw new Exception("array cast misalignment");
  40d19b:	48 c7 45 e0 17 00 00 	movq   $0x17,-0x20(%rbp)
  40d1a2:	00 
  40d1a3:	48 c7 45 e8 2a 40 41 	movq   $0x41402a,-0x18(%rbp)
  40d1aa:	00 
  40d1ab:	48 c7 c7 20 c0 41 00 	mov    $0x41c020,%rdi
  40d1b2:	e8 ae cb ff ff       	callq  409d65 <_d_newclass>
  40d1b7:	48 89 c7             	mov    %rax,%rdi
  40d1ba:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40d1be:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d1c2:	e8 fb bb ff ff       	callq  408dc2 <_D6object9Exception5_ctorMFAaZC9Exception>
  40d1c7:	48 89 c7             	mov    %rax,%rdi
  40d1ca:	e8 4f da ff ff       	callq  40ac1e <_d_throw>

	length = nbytes / tsize;
  40d1cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d1d3:	ba 00 00 00 00       	mov    $0x0,%edx
  40d1d8:	48 f7 75 d8          	divq   -0x28(%rbp)
  40d1dc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(size_t *)&a = length; // jam new length
  40d1e0:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  40d1e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d1e8:	48 89 02             	mov    %rax,(%rdx)
	return a;
  40d1eb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d1ef:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d1f3:	48 89 02             	mov    %rax,(%rdx)
  40d1f6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d1fa:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d1fe:	48 89 42 08          	mov    %rax,0x8(%rdx)
}
  40d202:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d206:	c9                   	leaveq 
  40d207:	c3                   	retq   

000000000040d208 <_d_arraycopy>:

byte[] _d_arraycopy(size_t size, byte[] from, byte[] to)
  40d208:	55                   	push   %rbp
  40d209:	48 89 e5             	mov    %rsp,%rbp
  40d20c:	48 83 ec 50          	sub    $0x50,%rsp
  40d210:	48 89 7d b0          	mov    %rdi,-0x50(%rbp)
  40d214:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40d218:	4c 89 c6             	mov    %r8,%rsi
  40d21b:	4c 89 cf             	mov    %r9,%rdi
  40d21e:	48 89 d0             	mov    %rdx,%rax
  40d221:	48 89 ca             	mov    %rcx,%rdx
  40d224:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40d228:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40d22c:	48 89 f0             	mov    %rsi,%rax
  40d22f:	48 89 fa             	mov    %rdi,%rdx
  40d232:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40d236:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
{
	if(to.length != from.length)
  40d23a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d23e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d242:	48 39 c2             	cmp    %rax,%rdx
  40d245:	74 39                	je     40d280 <_d_arraycopy+0x78>
		throw new Exception("lengths don't match for array copy");
  40d247:	48 c7 45 e0 22 00 00 	movq   $0x22,-0x20(%rbp)
  40d24e:	00 
  40d24f:	48 c7 45 e8 48 40 41 	movq   $0x414048,-0x18(%rbp)
  40d256:	00 
  40d257:	48 c7 c7 20 c0 41 00 	mov    $0x41c020,%rdi
  40d25e:	e8 02 cb ff ff       	callq  409d65 <_d_newclass>
  40d263:	48 89 c7             	mov    %rax,%rdi
  40d266:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40d26a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d26e:	e8 4f bb ff ff       	callq  408dc2 <_D6object9Exception5_ctorMFAaZC9Exception>
  40d273:	48 89 c7             	mov    %rax,%rdi
  40d276:	e8 a3 d9 ff ff       	callq  40ac1e <_d_throw>
  40d27b:	e9 81 00 00 00       	jmpq   40d301 <_d_arraycopy+0xf9>
	else if(cast(byte *)to + to.length * size <= cast(byte *)from || cast(byte *)from + from.length * size <= cast(byte *)to)
  40d280:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40d284:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d288:	48 0f af 45 d8       	imul   -0x28(%rbp),%rax
  40d28d:	48 01 c2             	add    %rax,%rdx
  40d290:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d294:	48 39 c2             	cmp    %rax,%rdx
  40d297:	76 19                	jbe    40d2b2 <_d_arraycopy+0xaa>
  40d299:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d29d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d2a1:	48 0f af 45 d8       	imul   -0x28(%rbp),%rax
  40d2a6:	48 01 c2             	add    %rax,%rdx
  40d2a9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d2ad:	48 39 c2             	cmp    %rax,%rdx
  40d2b0:	77 1b                	ja     40d2cd <_d_arraycopy+0xc5>
		memcpy(cast(byte *)to, cast(byte *)from, to.length * size);
  40d2b2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d2b6:	48 89 c2             	mov    %rax,%rdx
  40d2b9:	48 0f af 55 d8       	imul   -0x28(%rbp),%rdx
  40d2be:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40d2c2:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40d2c6:	e8 55 00 00 00       	callq  40d320 <memcpy>

byte[] _d_arraycopy(size_t size, byte[] from, byte[] to)
{
	if(to.length != from.length)
		throw new Exception("lengths don't match for array copy");
	else if(cast(byte *)to + to.length * size <= cast(byte *)from || cast(byte *)from + from.length * size <= cast(byte *)to)
  40d2cb:	eb 34                	jmp    40d301 <_d_arraycopy+0xf9>
		memcpy(cast(byte *)to, cast(byte *)from, to.length * size);
	else
		throw new Exception("overlapping array copy");
  40d2cd:	48 c7 45 f0 16 00 00 	movq   $0x16,-0x10(%rbp)
  40d2d4:	00 
  40d2d5:	48 c7 45 f8 6b 40 41 	movq   $0x41406b,-0x8(%rbp)
  40d2dc:	00 
  40d2dd:	48 c7 c7 20 c0 41 00 	mov    $0x41c020,%rdi
  40d2e4:	e8 7c ca ff ff       	callq  409d65 <_d_newclass>
  40d2e9:	48 89 c7             	mov    %rax,%rdi
  40d2ec:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  40d2f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40d2f4:	e8 c9 ba ff ff       	callq  408dc2 <_D6object9Exception5_ctorMFAaZC9Exception>
  40d2f9:	48 89 c7             	mov    %rax,%rdi
  40d2fc:	e8 1d d9 ff ff       	callq  40ac1e <_d_throw>

	return to;
  40d301:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d305:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40d309:	48 89 02             	mov    %rax,(%rdx)
  40d30c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d310:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40d314:	48 89 42 08          	mov    %rax,0x8(%rdx)
}
  40d318:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40d31c:	c9                   	leaveq 
  40d31d:	c3                   	retq   
  40d31e:	90                   	nop    
  40d31f:	90                   	nop    

000000000040d320 <memcpy>:
		dest = A pointer to the piece of memory serving as the copy destination.
		src = A pointer to the piece of memory serving as the copy source.
		count = The number of bytes to copy form src to dest.
	Returns: A void pointer to the start of the destination data (dest).
*/
extern(C) void* memcpy(void* dest, void* src, size_t count)
  40d320:	55                   	push   %rbp
  40d321:	48 89 e5             	mov    %rsp,%rbp
  40d324:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d328:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40d32c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
{
	ubyte* d = cast(ubyte*)dest;
  40d330:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d334:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	ubyte* s = cast(ubyte*)src;
  40d338:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d33c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	for(size_t i = count; count; count--, d++, s++)
  40d340:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d344:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d348:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  40d34d:	0f 95 c0             	setne  %al
  40d350:	83 f0 01             	xor    $0x1,%eax
  40d353:	84 c0                	test   %al,%al
  40d355:	75 25                	jne    40d37c <memcpy+0x5c>
		*d = *s;
  40d357:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d35b:	0f b6 10             	movzbl (%rax),%edx
  40d35e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d362:	88 10                	mov    %dl,(%rax)
  40d364:	48 ff 4d c8          	decq   -0x38(%rbp)
  40d368:	b8 01 00 00 00       	mov    $0x1,%eax
  40d36d:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  40d371:	b8 01 00 00 00       	mov    $0x1,%eax
  40d376:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  40d37a:	eb cc                	jmp    40d348 <memcpy+0x28>

	return dest;
  40d37c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
  40d380:	c9                   	leaveq 
  40d381:	c3                   	retq   

000000000040d382 <memmove>:

/**
Memcpy and memmove only really have differences at the user level, where they have slightly
different semantics.  Here, they're pretty much the same.
*/
extern(C) void* memmove(void* dest, void* src, size_t count)
  40d382:	55                   	push   %rbp
  40d383:	48 89 e5             	mov    %rsp,%rbp
  40d386:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d38a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40d38e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
{
	ubyte* d = cast(ubyte*)dest;
  40d392:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d396:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	ubyte* s = cast(ubyte*)src;
  40d39a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d39e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	for(size_t i = count; count; count--, d++, s++)
  40d3a2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d3a6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d3aa:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  40d3af:	0f 95 c0             	setne  %al
  40d3b2:	83 f0 01             	xor    $0x1,%eax
  40d3b5:	84 c0                	test   %al,%al
  40d3b7:	75 25                	jne    40d3de <memmove+0x5c>
	  *d = *s;
  40d3b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d3bd:	0f b6 10             	movzbl (%rax),%edx
  40d3c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d3c4:	88 10                	mov    %dl,(%rax)
  40d3c6:	48 ff 4d c8          	decq   -0x38(%rbp)
  40d3ca:	b8 01 00 00 00       	mov    $0x1,%eax
  40d3cf:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  40d3d3:	b8 01 00 00 00       	mov    $0x1,%eax
  40d3d8:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  40d3dc:	eb cc                	jmp    40d3aa <memmove+0x28>

	return dest;
  40d3de:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
  40d3e2:	c9                   	leaveq 
  40d3e3:	c3                   	retq   

000000000040d3e4 <_D6kernel4core6system6memcmpFPvPvmZl>:
	n = The number of bytes to compare.

Returns:
	 0 if they are equal, < 0 if a is less than b, and > 0 if a is greater than b.
*/
long memcmp(void* a, void* b, size_t n)
  40d3e4:	55                   	push   %rbp
  40d3e5:	48 89 e5             	mov    %rsp,%rbp
  40d3e8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d3ec:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40d3f0:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
{
	ubyte* str_a = cast(ubyte*)a;
  40d3f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d3f8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	ubyte* str_b = cast(ubyte*)b;
  40d3fc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d400:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	for(size_t i = 0; i < n; i++)
  40d404:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40d40b:	00 
  40d40c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d410:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  40d414:	0f 92 c0             	setb   %al
  40d417:	83 f0 01             	xor    $0x1,%eax
  40d41a:	84 c0                	test   %al,%al
  40d41c:	75 48                	jne    40d466 <_D6kernel4core6system6memcmpFPvPvmZl+0x82>
	{
		if(*str_a != *str_b)
  40d41e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d422:	0f b6 00             	movzbl (%rax),%eax
  40d425:	0f b6 d0             	movzbl %al,%edx
  40d428:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d42c:	0f b6 00             	movzbl (%rax),%eax
  40d42f:	0f b6 c0             	movzbl %al,%eax
  40d432:	39 c2                	cmp    %eax,%edx
  40d434:	74 22                	je     40d458 <_D6kernel4core6system6memcmpFPvPvmZl+0x74>
			return *str_a - *str_b;
  40d436:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d43a:	0f b6 00             	movzbl (%rax),%eax
  40d43d:	0f b6 d0             	movzbl %al,%edx
  40d440:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d444:	0f b6 00             	movzbl (%rax),%eax
  40d447:	0f b6 c0             	movzbl %al,%eax
  40d44a:	89 d1                	mov    %edx,%ecx
  40d44c:	29 c1                	sub    %eax,%ecx
  40d44e:	89 c8                	mov    %ecx,%eax
  40d450:	48 98                	cltq   
  40d452:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40d456:	eb 16                	jmp    40d46e <_D6kernel4core6system6memcmpFPvPvmZl+0x8a>

		str_a++;
  40d458:	48 ff 45 f0          	incq   -0x10(%rbp)
		str_b++;
  40d45c:	48 ff 45 e8          	incq   -0x18(%rbp)
  40d460:	48 ff 45 f8          	incq   -0x8(%rbp)
  40d464:	eb a6                	jmp    40d40c <_D6kernel4core6system6memcmpFPvPvmZl+0x28>
	}
	
	return 0;
  40d466:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  40d46d:	00 
  40d46e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
}
  40d472:	c9                   	leaveq 
  40d473:	c3                   	retq   

000000000040d474 <_D6kernel4core6system6memsetFPvhkZv>:
	Params:
		addr = The address of the piece of memory you wish to write.
		val = The value you wish to write to memory.
		numBytes = The number of bytes you would like to write to memory.
*/
void memset(void *addr, ubyte val, uint numBytes){
  40d474:	55                   	push   %rbp
  40d475:	48 89 e5             	mov    %rsp,%rbp
  40d478:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40d47c:	40 88 75 e7          	mov    %sil,-0x19(%rbp)
  40d480:	89 55 e0             	mov    %edx,-0x20(%rbp)
     ubyte *data = cast(ubyte*) addr;
  40d483:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d487:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

     for(int i = 0; i < numBytes; i++){
  40d48b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40d492:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40d495:	3b 45 e0             	cmp    -0x20(%rbp),%eax
  40d498:	0f 92 c0             	setb   %al
  40d49b:	83 f0 01             	xor    $0x1,%eax
  40d49e:	84 c0                	test   %al,%al
  40d4a0:	75 17                	jne    40d4b9 <_D6kernel4core6system6memsetFPvhkZv+0x45>
          data[i] = val;
  40d4a2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40d4a5:	48 98                	cltq   
  40d4a7:	48 89 c2             	mov    %rax,%rdx
  40d4aa:	48 03 55 f0          	add    -0x10(%rbp),%rdx
  40d4ae:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  40d4b2:	88 02                	mov    %al,(%rdx)
  40d4b4:	ff 45 fc             	incl   -0x4(%rbp)
  40d4b7:	eb d9                	jmp    40d492 <_D6kernel4core6system6memsetFPvhkZv+0x1e>
     }
}
  40d4b9:	c9                   	leaveq 
  40d4ba:	c3                   	retq   

000000000040d4bb <_D6kernel4core6system6strlenFPaZm>:
This function determines the size of a passed-in string.
	Params: 
		s = A pointer to the beginning of a character array, declaring a string.
	Returns: The size of the string in size_t format.
*/
size_t strlen(char* s)
  40d4bb:	55                   	push   %rbp
  40d4bc:	48 89 e5             	mov    %rsp,%rbp
  40d4bf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
{
	size_t i = 0;
  40d4c3:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40d4ca:	00 
	for( ; *s != 0; i++, s++){}
  40d4cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d4cf:	0f b6 00             	movzbl (%rax),%eax
  40d4d2:	0f b6 c0             	movzbl %al,%eax
  40d4d5:	85 c0                	test   %eax,%eax
  40d4d7:	0f 95 c0             	setne  %al
  40d4da:	83 f0 01             	xor    $0x1,%eax
  40d4dd:	84 c0                	test   %al,%al
  40d4df:	75 0f                	jne    40d4f0 <_D6kernel4core6system6strlenFPaZm+0x35>
  40d4e1:	48 ff 45 f8          	incq   -0x8(%rbp)
  40d4e5:	b8 01 00 00 00       	mov    $0x1,%eax
  40d4ea:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  40d4ee:	eb db                	jmp    40d4cb <_D6kernel4core6system6strlenFPaZm+0x10>
	return i;
  40d4f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  40d4f4:	c9                   	leaveq 
  40d4f5:	c3                   	retq   

000000000040d4f6 <_D6kernel4core6system8toStringFPaZAa>:
This function takes in a character pointer and returns a character array, or a string.
	Params:
		s = A pointer to the character(s) you wish to translate to a string.
	Returns: A character array (string) containing the information.
*/
char[] toString(char* s)
  40d4f6:	55                   	push   %rbp
  40d4f7:	48 89 e5             	mov    %rsp,%rbp
  40d4fa:	53                   	push   %rbx
  40d4fb:	48 83 ec 08          	sub    $0x8,%rsp
  40d4ff:	48 89 fb             	mov    %rdi,%rbx
  40d502:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
{
	return s[0 .. strlen(s)];
  40d506:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40d50a:	e8 ac ff ff ff       	callq  40d4bb <_D6kernel4core6system6strlenFPaZm>
  40d50f:	48 89 03             	mov    %rax,(%rbx)
  40d512:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d516:	48 89 43 08          	mov    %rax,0x8(%rbx)
}
  40d51a:	48 89 d8             	mov    %rbx,%rax
  40d51d:	48 83 c4 08          	add    $0x8,%rsp
  40d521:	5b                   	pop    %rbx
  40d522:	c9                   	leaveq 
  40d523:	c3                   	retq   

000000000040d524 <_D6kernel4core6system5isnanFeZi>:
	Params:
		e = The value / piece of information you would like to check for number status.
	Returns: 
		0 if it isn't a NaN, non-zero if it is.
*/
int isnan(real e)
  40d524:	55                   	push   %rbp
  40d525:	48 89 e5             	mov    %rsp,%rbp
{
    ushort* pe = cast(ushort *)&e;
  40d528:	48 8d 45 10          	lea    0x10(%rbp),%rax
  40d52c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    ulong*  ps = cast(ulong *)&e;
  40d530:	48 8d 45 10          	lea    0x10(%rbp),%rax
  40d534:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    return (pe[4] & 0x7FFF) == 0x7FFF &&
  40d538:	b8 08 00 00 00       	mov    $0x8,%eax
  40d53d:	48 03 45 f8          	add    -0x8(%rbp),%rax
  40d541:	0f b7 00             	movzwl (%rax),%eax
  40d544:	0f b7 c0             	movzwl %ax,%eax
  40d547:	25 ff 7f 00 00       	and    $0x7fff,%eax
  40d54c:	3d ff 7f 00 00       	cmp    $0x7fff,%eax
  40d551:	75 1f                	jne    40d572 <_D6kernel4core6system5isnanFeZi+0x4e>
  40d553:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d557:	48 8b 10             	mov    (%rax),%rdx
  40d55a:	48 b8 ff ff ff ff ff 	mov    $0x7fffffffffffffff,%rax
  40d561:	ff ff 7f 
  40d564:	48 21 d0             	and    %rdx,%rax
  40d567:	48 85 c0             	test   %rax,%rax
  40d56a:	74 06                	je     40d572 <_D6kernel4core6system5isnanFeZi+0x4e>
  40d56c:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  40d570:	eb 04                	jmp    40d576 <_D6kernel4core6system5isnanFeZi+0x52>
  40d572:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  40d576:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
	    *ps & 0x7FFFFFFFFFFFFFFF;
}
  40d57a:	c9                   	leaveq 
  40d57b:	c3                   	retq   

000000000040d57c <_D4user7syscall3addFllZl>:
  40d57c:	55                   	push   %rbp
  40d57d:	48 89 e5             	mov    %rsp,%rbp
  40d580:	48 83 ec 50          	sub    $0x50,%rsp
  40d584:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40d588:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  40d58c:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  40d593:	00 
  40d594:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  40d59b:	00 
  40d59c:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40d5a3:	00 
  40d5a4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d5a8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40d5ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d5b0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40d5b4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40d5b8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d5bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d5c0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40d5c4:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  40d5c8:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
  40d5cc:	bf 00 00 00 00       	mov    $0x0,%edi
  40d5d1:	e8 fa 05 00 00       	callq  40dbd0 <nativeSyscall>
  40d5d6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40d5da:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d5de:	c9                   	leaveq 
  40d5df:	c3                   	retq   

000000000040d5e0 <_D4user7syscall9allocPageFZPv>:
  40d5e0:	55                   	push   %rbp
  40d5e1:	48 89 e5             	mov    %rsp,%rbp
  40d5e4:	48 83 ec 20          	sub    $0x20,%rsp
  40d5e8:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40d5ef:	00 
  40d5f0:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  40d5f4:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  40d5f8:	bf 01 00 00 00       	mov    $0x1,%edi
  40d5fd:	e8 ce 05 00 00       	callq  40dbd0 <nativeSyscall>
  40d602:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d606:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d60a:	c9                   	leaveq 
  40d60b:	c3                   	retq   

000000000040d60c <_D4user7syscall4exitFlZv>:
  40d60c:	55                   	push   %rbp
  40d60d:	48 89 e5             	mov    %rsp,%rbp
  40d610:	48 83 ec 40          	sub    $0x40,%rsp
  40d614:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40d618:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40d61f:	00 
  40d620:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40d627:	00 
  40d628:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d62c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d630:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d634:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40d638:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  40d63c:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  40d640:	bf 02 00 00 00       	mov    $0x2,%edi
  40d645:	e8 86 05 00 00       	callq  40dbd0 <nativeSyscall>
  40d64a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40d64e:	c9                   	leaveq 
  40d64f:	c3                   	retq   

000000000040d650 <_D4user7syscall8freePageFZv>:
  40d650:	55                   	push   %rbp
  40d651:	48 89 e5             	mov    %rsp,%rbp
  40d654:	48 83 ec 20          	sub    $0x20,%rsp
  40d658:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40d65f:	00 
  40d660:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  40d664:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  40d668:	bf 03 00 00 00       	mov    $0x3,%edi
  40d66d:	e8 5e 05 00 00       	callq  40dbd0 <nativeSyscall>
  40d672:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d676:	c9                   	leaveq 
  40d677:	c3                   	retq   

000000000040d678 <_D4user7syscall5yieldFZv>:
  40d678:	55                   	push   %rbp
  40d679:	48 89 e5             	mov    %rsp,%rbp
  40d67c:	48 83 ec 20          	sub    $0x20,%rsp
  40d680:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40d687:	00 
  40d688:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  40d68c:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  40d690:	bf 04 00 00 00       	mov    $0x4,%edi
  40d695:	e8 36 05 00 00       	callq  40dbd0 <nativeSyscall>
  40d69a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d69e:	c9                   	leaveq 
  40d69f:	c3                   	retq   

000000000040d6a0 <_D4user7syscall5errorFAaZv>:
  40d6a0:	55                   	push   %rbp
  40d6a1:	48 89 e5             	mov    %rsp,%rbp
  40d6a4:	48 83 ec 50          	sub    $0x50,%rsp
  40d6a8:	48 89 f8             	mov    %rdi,%rax
  40d6ab:	48 89 f2             	mov    %rsi,%rdx
  40d6ae:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40d6b2:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  40d6b6:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40d6bd:	00 
  40d6be:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40d6c5:	00 
  40d6c6:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40d6cd:	00 
  40d6ce:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40d6d2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40d6d6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d6da:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40d6de:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d6e2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40d6e6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d6ea:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40d6ee:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  40d6f2:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  40d6f6:	bf 05 00 00 00       	mov    $0x5,%edi
  40d6fb:	e8 d0 04 00 00       	callq  40dbd0 <nativeSyscall>
  40d700:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d704:	c9                   	leaveq 
  40d705:	c3                   	retq   

000000000040d706 <_D4user7syscall10depositKeyFsZv>:
  40d706:	55                   	push   %rbp
  40d707:	48 89 e5             	mov    %rsp,%rbp
  40d70a:	48 83 ec 40          	sub    $0x40,%rsp
  40d70e:	66 89 7d ce          	mov    %di,-0x32(%rbp)
  40d712:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40d719:	00 
  40d71a:	66 c7 45 e0 00 00    	movw   $0x0,-0x20(%rbp)
  40d720:	0f b7 45 ce          	movzwl -0x32(%rbp),%eax
  40d724:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
  40d728:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  40d72c:	66 89 45 e0          	mov    %ax,-0x20(%rbp)
  40d730:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  40d734:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  40d738:	bf 06 00 00 00       	mov    $0x6,%edi
  40d73d:	e8 8e 04 00 00       	callq  40dbd0 <nativeSyscall>
  40d742:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40d746:	c9                   	leaveq 
  40d747:	c3                   	retq   

000000000040d748 <_D4user7syscall12initKeyboardFZS4user7syscall12KeyboardInfo>:
  40d748:	55                   	push   %rbp
  40d749:	48 89 e5             	mov    %rsp,%rbp
  40d74c:	53                   	push   %rbx
  40d74d:	48 83 ec 38          	sub    $0x38,%rsp
  40d751:	48 89 fb             	mov    %rdi,%rbx
  40d754:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  40d75b:	00 
  40d75c:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  40d763:	00 
  40d764:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  40d76b:	00 
  40d76c:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40d773:	00 
  40d774:	48 8d 55 e7          	lea    -0x19(%rbp),%rdx
  40d778:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  40d77c:	bf 07 00 00 00       	mov    $0x7,%edi
  40d781:	e8 4a 04 00 00       	callq  40dbd0 <nativeSyscall>
  40d786:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40d78a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d78e:	48 89 03             	mov    %rax,(%rbx)
  40d791:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d795:	48 89 43 08          	mov    %rax,0x8(%rbx)
  40d799:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d79d:	48 89 43 10          	mov    %rax,0x10(%rbx)
  40d7a1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d7a5:	48 89 43 18          	mov    %rax,0x18(%rbx)
  40d7a9:	48 89 d8             	mov    %rbx,%rax
  40d7ac:	48 83 c4 38          	add    $0x38,%rsp
  40d7b0:	5b                   	pop    %rbx
  40d7b1:	c9                   	leaveq 
  40d7b2:	c3                   	retq   

000000000040d7b3 <_D4user7syscall11initConsoleFZS4user7syscall11ConsoleInfo>:
  40d7b3:	55                   	push   %rbp
  40d7b4:	48 89 e5             	mov    %rsp,%rbp
  40d7b7:	53                   	push   %rbx
  40d7b8:	48 83 ec 38          	sub    $0x38,%rsp
  40d7bc:	48 89 fb             	mov    %rdi,%rbx
  40d7bf:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  40d7c6:	00 
  40d7c7:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  40d7ce:	00 
  40d7cf:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  40d7d6:	00 
  40d7d7:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40d7de:	00 
  40d7df:	48 8d 55 e7          	lea    -0x19(%rbp),%rdx
  40d7e3:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  40d7e7:	bf 08 00 00 00       	mov    $0x8,%edi
  40d7ec:	e8 df 03 00 00       	callq  40dbd0 <nativeSyscall>
  40d7f1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40d7f5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d7f9:	48 89 03             	mov    %rax,(%rbx)
  40d7fc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d800:	48 89 43 08          	mov    %rax,0x8(%rbx)
  40d804:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d808:	48 89 43 10          	mov    %rax,0x10(%rbx)
  40d80c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d810:	48 89 43 18          	mov    %rax,0x18(%rbx)
  40d814:	48 89 d8             	mov    %rbx,%rax
  40d817:	48 83 c4 38          	add    $0x38,%rsp
  40d81b:	5b                   	pop    %rbx
  40d81c:	c9                   	leaveq 
  40d81d:	c3                   	retq   

000000000040d81e <_D4user7syscall15makeEnvironmentFiZv>:
  40d81e:	55                   	push   %rbp
  40d81f:	48 89 e5             	mov    %rsp,%rbp
  40d822:	48 83 ec 40          	sub    $0x40,%rsp
  40d826:	89 7d cc             	mov    %edi,-0x34(%rbp)
  40d829:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40d830:	00 
  40d831:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  40d838:	8b 45 cc             	mov    -0x34(%rbp),%eax
  40d83b:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40d83e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40d841:	89 45 e0             	mov    %eax,-0x20(%rbp)
  40d844:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  40d848:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  40d84c:	bf 09 00 00 00       	mov    $0x9,%edi
  40d851:	e8 7a 03 00 00       	callq  40dbd0 <nativeSyscall>
  40d856:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40d85a:	c9                   	leaveq 
  40d85b:	c3                   	retq   

000000000040d85c <_D4user7syscall4forkFZi>:
  40d85c:	55                   	push   %rbp
  40d85d:	48 89 e5             	mov    %rsp,%rbp
  40d860:	48 83 ec 10          	sub    $0x10,%rsp
  40d864:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  40d86b:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  40d86f:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  40d873:	bf 0a 00 00 00       	mov    $0xa,%edi
  40d878:	e8 53 03 00 00       	callq  40dbd0 <nativeSyscall>
  40d87d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d881:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40d884:	c9                   	leaveq 
  40d885:	c3                   	retq   

000000000040d886 <_D4user7syscall4execFZi>:
  40d886:	55                   	push   %rbp
  40d887:	48 89 e5             	mov    %rsp,%rbp
  40d88a:	48 83 ec 10          	sub    $0x10,%rsp
  40d88e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  40d895:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  40d899:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  40d89d:	bf 0b 00 00 00       	mov    $0xb,%edi
  40d8a2:	e8 29 03 00 00       	callq  40dbd0 <nativeSyscall>
  40d8a7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d8ab:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40d8ae:	c9                   	leaveq 
  40d8af:	c3                   	retq   

000000000040d8b0 <_D6kernel4core4util10CHECK_FLAGFkkZk>:
	Params:
		flags = The flags from the multiboot header the kernel wishes to check.
		bit = The number of the bit the kernel would like to check for data.
	Returns: Whether the bit "bit" in "flags" has a value (1 if it is set, 0 if it is not)
*/
uint CHECK_FLAG(uint flags, uint bit)
  40d8b0:	55                   	push   %rbp
  40d8b1:	48 89 e5             	mov    %rsp,%rbp
  40d8b4:	89 7d fc             	mov    %edi,-0x4(%rbp)
  40d8b7:	89 75 f8             	mov    %esi,-0x8(%rbp)
{
	return ((flags) & (1 << (bit)));
  40d8ba:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  40d8bd:	b8 01 00 00 00       	mov    $0x1,%eax
  40d8c2:	d3 e0                	shl    %cl,%eax
  40d8c4:	23 45 fc             	and    -0x4(%rbp),%eax
}
  40d8c7:	c9                   	leaveq 
  40d8c8:	c3                   	retq   

000000000040d8c9 <_D6kernel4core4util4itoaFAaalZAa>:
		base = The base of the integer value. If "d," it will be assumed to be decimal. If "x," the integer
			will be hexadecimal.
		d = The integer to translate.
	Returns: The translated string in a character array.
*/
char[] itoa(char[] buf, char base, long d)
  40d8c9:	55                   	push   %rbp
  40d8ca:	48 89 e5             	mov    %rsp,%rbp
  40d8cd:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  40d8d4:	48 89 bd f0 fe ff ff 	mov    %rdi,-0x110(%rbp)
  40d8db:	88 8d 6f ff ff ff    	mov    %cl,-0x91(%rbp)
  40d8e1:	4c 89 85 60 ff ff ff 	mov    %r8,-0xa0(%rbp)
  40d8e8:	48 89 f0             	mov    %rsi,%rax
  40d8eb:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  40d8f2:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
{
	size_t p = buf.length - 1;
  40d8f9:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40d900:	48 ff c8             	dec    %rax
  40d903:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	size_t startIdx = 0;
  40d907:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40d90e:	00 
	ulong ud = d;
  40d90f:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40d916:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	bool negative = false;
  40d91a:	c6 45 d7 00          	movb   $0x0,-0x29(%rbp)

	int divisor = 10;
  40d91e:	c7 45 d0 0a 00 00 00 	movl   $0xa,-0x30(%rbp)

	// If %d is specified and D is minus, put `-' in the head.
	if(base == 'd' && d < 0)
  40d925:	0f b6 85 6f ff ff ff 	movzbl -0x91(%rbp),%eax
  40d92c:	83 f8 64             	cmp    $0x64,%eax
  40d92f:	75 1e                	jne    40d94f <_D6kernel4core4util4itoaFAaalZAa+0x86>
  40d931:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  40d938:	00 
  40d939:	79 14                	jns    40d94f <_D6kernel4core4util4itoaFAaalZAa+0x86>
	{
		negative = true;
  40d93b:	c6 45 d7 01          	movb   $0x1,-0x29(%rbp)
		ud = -d;
  40d93f:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40d946:	48 f7 d8             	neg    %rax
  40d949:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	bool negative = false;

	int divisor = 10;

	// If %d is specified and D is minus, put `-' in the head.
	if(base == 'd' && d < 0)
  40d94d:	eb 13                	jmp    40d962 <_D6kernel4core4util4itoaFAaalZAa+0x99>
	{
		negative = true;
		ud = -d;
	}
	else if(base == 'x')
  40d94f:	0f b6 85 6f ff ff ff 	movzbl -0x91(%rbp),%eax
  40d956:	83 f8 78             	cmp    $0x78,%eax
  40d959:	75 07                	jne    40d962 <_D6kernel4core4util4itoaFAaalZAa+0x99>
		divisor = 16;
  40d95b:	c7 45 d0 10 00 00 00 	movl   $0x10,-0x30(%rbp)

	// Divide UD by DIVISOR until UD == 0.
	do
	{
		int remainder = ud % divisor;
  40d962:	8b 45 d0             	mov    -0x30(%rbp),%eax
  40d965:	48 63 d0             	movslq %eax,%rdx
  40d968:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d96c:	48 89 d1             	mov    %rdx,%rcx
  40d96f:	ba 00 00 00 00       	mov    $0x0,%edx
  40d974:	48 f7 f1             	div    %rcx
  40d977:	48 89 d0             	mov    %rdx,%rax
  40d97a:	89 45 f4             	mov    %eax,-0xc(%rbp)
		buf[p--] = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
  40d97d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40d984:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
  40d98b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d98f:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  40d996:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40d99d:	48 39 85 08 ff ff ff 	cmp    %rax,-0xf8(%rbp)
  40d9a4:	0f 92 c0             	setb   %al
  40d9a7:	48 ff 4d e8          	decq   -0x18(%rbp)
  40d9ab:	84 c0                	test   %al,%al
  40d9ad:	74 10                	je     40d9bf <_D6kernel4core4util4itoaFAaalZAa+0xf6>
  40d9af:	48 8b 8d 08 ff ff ff 	mov    -0xf8(%rbp),%rcx
  40d9b6:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  40d9bd:	eb 22                	jmp    40d9e1 <_D6kernel4core4util4itoaFAaalZAa+0x118>
  40d9bf:	48 c7 45 80 12 00 00 	movq   $0x12,-0x80(%rbp)
  40d9c6:	00 
  40d9c7:	48 c7 45 88 6a 41 41 	movq   $0x41416a,-0x78(%rbp)
  40d9ce:	00 
  40d9cf:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  40d9d3:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  40d9d7:	ba 77 01 00 00       	mov    $0x177,%edx
  40d9dc:	e8 94 cf ff ff       	callq  40a975 <_d_array_bounds>
  40d9e1:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40d9e8:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  40d9ef:	48 01 c2             	add    %rax,%rdx
  40d9f2:	48 89 95 10 ff ff ff 	mov    %rdx,-0xf0(%rbp)
  40d9f9:	83 7d f4 0a          	cmpl   $0xa,-0xc(%rbp)
  40d9fd:	7d 0e                	jge    40da0d <_D6kernel4core4util4itoaFAaalZAa+0x144>
  40d9ff:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40da02:	83 c0 30             	add    $0x30,%eax
  40da05:	88 85 1f ff ff ff    	mov    %al,-0xe1(%rbp)
  40da0b:	eb 0c                	jmp    40da19 <_D6kernel4core4util4itoaFAaalZAa+0x150>
  40da0d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40da10:	83 c0 57             	add    $0x57,%eax
  40da13:	88 85 1f ff ff ff    	mov    %al,-0xe1(%rbp)
  40da19:	0f b6 8d 1f ff ff ff 	movzbl -0xe1(%rbp),%ecx
  40da20:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40da27:	88 08                	mov    %cl,(%rax)
  40da29:	8b 45 d0             	mov    -0x30(%rbp),%eax
  40da2c:	48 63 d0             	movslq %eax,%rdx
  40da2f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40da33:	48 89 d1             	mov    %rdx,%rcx
  40da36:	ba 00 00 00 00       	mov    $0x0,%edx
  40da3b:	48 f7 f1             	div    %rcx
  40da3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40da42:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  40da47:	0f 95 c0             	setne  %al
  40da4a:	83 f0 01             	xor    $0x1,%eax
  40da4d:	84 c0                	test   %al,%al
  40da4f:	75 05                	jne    40da56 <_D6kernel4core4util4itoaFAaalZAa+0x18d>
  40da51:	e9 0c ff ff ff       	jmpq   40d962 <_D6kernel4core4util4itoaFAaalZAa+0x99>
	}
	while (ud /= divisor)

	if(negative)
  40da56:	80 7d d7 00          	cmpb   $0x0,-0x29(%rbp)
  40da5a:	74 75                	je     40dad1 <_D6kernel4core4util4itoaFAaalZAa+0x208>
		buf[p--] = '-';
  40da5c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40da63:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  40da6a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40da6e:	48 89 95 30 ff ff ff 	mov    %rdx,-0xd0(%rbp)
  40da75:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40da7c:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
  40da83:	0f 92 c0             	setb   %al
  40da86:	48 ff 4d e8          	decq   -0x18(%rbp)
  40da8a:	84 c0                	test   %al,%al
  40da8c:	74 10                	je     40da9e <_D6kernel4core4util4itoaFAaalZAa+0x1d5>
  40da8e:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
  40da95:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
  40da9c:	eb 22                	jmp    40dac0 <_D6kernel4core4util4itoaFAaalZAa+0x1f7>
  40da9e:	48 c7 45 90 12 00 00 	movq   $0x12,-0x70(%rbp)
  40daa5:	00 
  40daa6:	48 c7 45 98 6a 41 41 	movq   $0x41416a,-0x68(%rbp)
  40daad:	00 
  40daae:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  40dab2:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  40dab6:	ba 7c 01 00 00       	mov    $0x17c,%edx
  40dabb:	e8 b5 ce ff ff       	callq  40a975 <_d_array_bounds>
  40dac0:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40dac7:	48 03 85 20 ff ff ff 	add    -0xe0(%rbp),%rax
  40dace:	c6 00 2d             	movb   $0x2d,(%rax)

	return buf[p + 1 .. $];
  40dad1:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40dad8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40dadc:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40dae3:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  40dae7:	77 0d                	ja     40daf6 <_D6kernel4core4util4itoaFAaalZAa+0x22d>
  40dae9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40daed:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  40daf4:	eb 22                	jmp    40db18 <_D6kernel4core4util4itoaFAaalZAa+0x24f>
  40daf6:	48 c7 45 b0 12 00 00 	movq   $0x12,-0x50(%rbp)
  40dafd:	00 
  40dafe:	48 c7 45 b8 6a 41 41 	movq   $0x41416a,-0x48(%rbp)
  40db05:	00 
  40db06:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  40db0a:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40db0e:	ba 7e 01 00 00       	mov    $0x17e,%edx
  40db13:	e8 5d ce ff ff       	callq  40a975 <_d_array_bounds>
  40db18:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40db1c:	48 ff c2             	inc    %rdx
  40db1f:	48 89 95 40 ff ff ff 	mov    %rdx,-0xc0(%rbp)
  40db26:	48 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%rcx
  40db2d:	48 2b 8d 40 ff ff ff 	sub    -0xc0(%rbp),%rcx
  40db34:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
  40db3b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40db42:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  40db49:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40db50:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
  40db57:	77 10                	ja     40db69 <_D6kernel4core4util4itoaFAaalZAa+0x2a0>
  40db59:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
  40db60:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  40db67:	eb 22                	jmp    40db8b <_D6kernel4core4util4itoaFAaalZAa+0x2c2>
  40db69:	48 c7 45 c0 12 00 00 	movq   $0x12,-0x40(%rbp)
  40db70:	00 
  40db71:	48 c7 45 c8 6a 41 41 	movq   $0x41416a,-0x38(%rbp)
  40db78:	00 
  40db79:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40db7d:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40db81:	ba 7e 01 00 00       	mov    $0x17e,%edx
  40db86:	e8 ea cd ff ff       	callq  40a975 <_d_array_bounds>
  40db8b:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  40db92:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  40db99:	48 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%rcx
  40dba0:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
  40dba4:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  40dba8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40dbac:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  40dbb3:	48 89 02             	mov    %rax,(%rdx)
  40dbb6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40dbba:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  40dbc1:	48 89 41 08          	mov    %rax,0x8(%rcx)
}
  40dbc5:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  40dbcc:	c9                   	leaveq 
  40dbcd:	c3                   	retq   
  40dbce:	90                   	nop    
  40dbcf:	90                   	nop    

000000000040dbd0 <nativeSyscall>:
module kernel.arch.x86_64.usersyscall; // implements the native syscall function

import kernel.arch.x86_64.vmem;
import kernel.core.util;

extern(C) long nativeSyscall(ulong ID, void* ret, void* params)
  40dbd0:	48 89 7c 24 f8       	mov    %rdi,-0x8(%rsp)
  40dbd5:	48 89 74 24 f0       	mov    %rsi,-0x10(%rsp)
  40dbda:	48 89 54 24 e8       	mov    %rdx,-0x18(%rsp)
	// I assume such in the syscall handler
	asm
	{
		naked;
		"pushq %%rcx";
		"pushq %%r11";
  40dbdf:	51                   	push   %rcx
		"pushq %%rax";
  40dbe0:	41 53                	push   %r11
		"syscall";
  40dbe2:	50                   	push   %rax
		"popq %%rax";
  40dbe3:	0f 05                	syscall 
		"popq %%r11";
  40dbe5:	58                   	pop    %rax
		"popq %%rcx";
  40dbe6:	41 5b                	pop    %r11

		"retq";
  40dbe8:	59                   	pop    %rcx
	}
  40dbe9:	c3                   	retq   
  40dbea:	90                   	nop    
  40dbeb:	90                   	nop    

000000000040dbec <_D6malloc6mallocFmZPv>:
chunk *used_list = null;  //the list of allocated chunks
chunk *free_list = null;  //the list of freed chunks

//if you don't know what malloc does
//then you shouldn't be in my source code
void *malloc(size_t size) {
  40dbec:	55                   	push   %rbp
  40dbed:	48 89 e5             	mov    %rsp,%rbp
  40dbf0:	48 83 ec 60          	sub    $0x60,%rsp
  40dbf4:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  chunk *c = free_list;
  40dbf8:	48 8b 05 49 f5 00 00 	mov    0xf549(%rip),%rax        # 41d148 <_D6malloc9free_listPS6malloc5chunk>
  40dbff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

  //first we see if there's some free-d memory we can re-use
  while(c !is null) {
  40dc03:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40dc08:	0f 95 c0             	setne  %al
  40dc0b:	83 f0 01             	xor    $0x1,%eax
  40dc0e:	84 c0                	test   %al,%al
  40dc10:	75 43                	jne    40dc55 <_D6malloc6mallocFmZPv+0x69>
    print("in while");
  40dc12:	48 c7 45 b0 08 00 00 	movq   $0x8,-0x50(%rbp)
  40dc19:	00 
  40dc1a:	48 c7 45 b8 98 41 41 	movq   $0x414198,-0x48(%rbp)
  40dc21:	00 
  40dc22:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40dc26:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40dc2a:	48 c7 c7 c0 ce 41 00 	mov    $0x41cec0,%rdi
  40dc31:	b8 00 00 00 00       	mov    $0x0,%eax
  40dc36:	e8 61 01 00 00       	callq  40dd9c <_D4user7basicio5printFYv>
    if(size < c.size) { //if the size we want is less than the size of the chunk
  40dc3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40dc3f:	48 8b 00             	mov    (%rax),%rax
  40dc42:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
  40dc46:	73 bb                	jae    40dc03 <_D6malloc6mallocFmZPv+0x17>

      return cast(void *)1337;
  40dc48:	48 c7 45 a0 39 05 00 	movq   $0x539,-0x60(%rbp)
  40dc4f:	00 
  40dc50:	e9 c3 00 00 00       	jmpq   40dd18 <_D6malloc6mallocFmZPv+0x12c>
    }
  }
  //since c is null, we need to get a new page
  //void *h = allocPage(); //not till we have it
  //set the used list to start at the beginning of the page
  used_list = cast(chunk *)allocate(size + chunk.sizeof);
  40dc55:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  40dc59:	48 83 c7 18          	add    $0x18,%rdi
  40dc5d:	e8 bc 00 00 00       	callq  40dd1e <_D6malloc8allocateFmZPv>
  40dc62:	48 89 05 d7 f4 00 00 	mov    %rax,0xf4d7(%rip)        # 41d140 <_D6malloc9used_listPS6malloc5chunk>
  if(!used_list) { print("failure"); return null; }
  40dc69:	48 8b 05 d0 f4 00 00 	mov    0xf4d0(%rip),%rax        # 41d140 <_D6malloc9used_listPS6malloc5chunk>
  40dc70:	48 85 c0             	test   %rax,%rax
  40dc73:	0f 95 c0             	setne  %al
  40dc76:	83 f0 01             	xor    $0x1,%eax
  40dc79:	84 c0                	test   %al,%al
  40dc7b:	74 33                	je     40dcb0 <_D6malloc6mallocFmZPv+0xc4>
  40dc7d:	48 c7 45 c0 07 00 00 	movq   $0x7,-0x40(%rbp)
  40dc84:	00 
  40dc85:	48 c7 45 c8 a1 41 41 	movq   $0x4141a1,-0x38(%rbp)
  40dc8c:	00 
  40dc8d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40dc91:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40dc95:	48 c7 c7 c0 ce 41 00 	mov    $0x41cec0,%rdi
  40dc9c:	b8 00 00 00 00       	mov    $0x0,%eax
  40dca1:	e8 f6 00 00 00       	callq  40dd9c <_D4user7basicio5printFYv>
  40dca6:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  40dcad:	00 
  40dcae:	eb 68                	jmp    40dd18 <_D6malloc6mallocFmZPv+0x12c>
  //set up the struct
  print("%d", 15);
  40dcb0:	48 c7 45 d0 02 00 00 	movq   $0x2,-0x30(%rbp)
  40dcb7:	00 
  40dcb8:	48 c7 45 d8 a9 41 41 	movq   $0x4141a9,-0x28(%rbp)
  40dcbf:	00 
  40dcc0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40dcc4:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40dcc8:	b9 0f 00 00 00       	mov    $0xf,%ecx
  40dccd:	48 c7 c7 e0 ce 41 00 	mov    $0x41cee0,%rdi
  40dcd4:	b8 00 00 00 00       	mov    $0x0,%eax
  40dcd9:	e8 be 00 00 00       	callq  40dd9c <_D4user7basicio5printFYv>
  //used_list.size = size;
  //used_list.next = null;
  //used_list.prev = null;
  print("done with malloc");
  40dcde:	48 c7 45 e0 10 00 00 	movq   $0x10,-0x20(%rbp)
  40dce5:	00 
  40dce6:	48 c7 45 e8 ac 41 41 	movq   $0x4141ac,-0x18(%rbp)
  40dced:	00 
  40dcee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40dcf2:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40dcf6:	48 c7 c7 c0 ce 41 00 	mov    $0x41cec0,%rdi
  40dcfd:	b8 00 00 00 00       	mov    $0x0,%eax
  40dd02:	e8 95 00 00 00       	callq  40dd9c <_D4user7basicio5printFYv>
  return cast(void *)(used_list + chunk.sizeof);
  40dd07:	48 8b 05 32 f4 00 00 	mov    0xf432(%rip),%rax        # 41d140 <_D6malloc9used_listPS6malloc5chunk>
  40dd0e:	48 05 40 02 00 00    	add    $0x240,%rax
  40dd14:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40dd18:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
}
  40dd1c:	c9                   	leaveq 
  40dd1d:	c3                   	retq   

000000000040dd1e <_D6malloc8allocateFmZPv>:

ubyte[9000] buffer; //fake pages 'nat
int buff_pos = 0;

void *allocate(size_t size) {
  40dd1e:	55                   	push   %rbp
  40dd1f:	48 89 e5             	mov    %rsp,%rbp
  40dd22:	48 83 ec 20          	sub    $0x20,%rsp
  40dd26:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  print("in allocate");
  40dd2a:	48 c7 45 f0 0b 00 00 	movq   $0xb,-0x10(%rbp)
  40dd31:	00 
  40dd32:	48 c7 45 f8 bd 41 41 	movq   $0x4141bd,-0x8(%rbp)
  40dd39:	00 
  40dd3a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40dd3e:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  40dd42:	48 c7 c7 c0 ce 41 00 	mov    $0x41cec0,%rdi
  40dd49:	b8 00 00 00 00       	mov    $0x0,%eax
  40dd4e:	e8 49 00 00 00       	callq  40dd9c <_D4user7basicio5printFYv>
  return cast(void*)(buffer.ptr + buff_pos);
  40dd53:	8b 05 2f 17 01 00    	mov    0x1172f(%rip),%eax        # 41f488 <_D6malloc8buff_posi>
  40dd59:	48 98                	cltq   
  40dd5b:	48 05 60 d1 41 00    	add    $0x41d160,%rax
}
  40dd61:	c9                   	leaveq 
  40dd62:	c3                   	retq   

000000000040dd63 <_D6malloc4freeFPvZv>:

//see malloc's comment
void free(void *) {
  40dd63:	55                   	push   %rbp
  40dd64:	48 89 e5             	mov    %rsp,%rbp
  40dd67:	48 83 ec 20          	sub    $0x20,%rsp
  40dd6b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  print("in free");
  40dd6f:	48 c7 45 f0 07 00 00 	movq   $0x7,-0x10(%rbp)
  40dd76:	00 
  40dd77:	48 c7 45 f8 c9 41 41 	movq   $0x4141c9,-0x8(%rbp)
  40dd7e:	00 
  40dd7f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40dd83:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  40dd87:	48 c7 c7 c0 ce 41 00 	mov    $0x41cec0,%rdi
  40dd8e:	b8 00 00 00 00       	mov    $0x0,%eax
  40dd93:	e8 04 00 00 00       	callq  40dd9c <_D4user7basicio5printFYv>
}
  40dd98:	c9                   	leaveq 
  40dd99:	c3                   	retq   
  40dd9a:	90                   	nop    
  40dd9b:	90                   	nop    

000000000040dd9c <_D4user7basicio5printFYv>:
import user.syscall;
import std.stdarg;

import libos.console;

void print(...) {
  40dd9c:	55                   	push   %rbp
  40dd9d:	48 89 e5             	mov    %rsp,%rbp
  40dda0:	48 81 ec 50 02 00 00 	sub    $0x250,%rsp
  40dda7:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  40ddae:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  40ddb5:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  40ddbc:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  40ddc3:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  40ddca:	0f b6 c0             	movzbl %al,%eax
  40ddcd:	48 89 85 b8 fd ff ff 	mov    %rax,-0x248(%rbp)
  40ddd4:	48 8b 95 b8 fd ff ff 	mov    -0x248(%rbp),%rdx
  40dddb:	48 8d 04 95 00 00 00 	lea    0x0(,%rdx,4),%rax
  40dde2:	00 
  40dde3:	48 c7 85 b8 fd ff ff 	movq   $0x40de22,-0x248(%rbp)
  40ddea:	22 de 40 00 
  40ddee:	48 29 85 b8 fd ff ff 	sub    %rax,-0x248(%rbp)
  40ddf5:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  40ddf9:	48 8b 95 b8 fd ff ff 	mov    -0x248(%rbp),%rdx
  40de00:	ff e2                	jmpq   *%rdx
  40de02:	0f 29 78 f1          	movaps %xmm7,-0xf(%rax)
  40de06:	0f 29 70 e1          	movaps %xmm6,-0x1f(%rax)
  40de0a:	0f 29 68 d1          	movaps %xmm5,-0x2f(%rax)
  40de0e:	0f 29 60 c1          	movaps %xmm4,-0x3f(%rax)
  40de12:	0f 29 58 b1          	movaps %xmm3,-0x4f(%rax)
  40de16:	0f 29 50 a1          	movaps %xmm2,-0x5f(%rax)
  40de1a:	0f 29 48 91          	movaps %xmm1,-0x6f(%rax)
  40de1e:	0f 29 40 81          	movaps %xmm0,-0x7f(%rax)
  40de22:	48 89 bd f8 fd ff ff 	mov    %rdi,-0x208(%rbp)

	char[20] buff;

	foreach(arg; _arguments)
	{
		if (arg == typeid(char[]))
  40de29:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
  40de30:	c7 00 08 00 00 00    	movl   $0x8,(%rax)
  40de36:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
  40de3d:	c7 40 04 30 00 00 00 	movl   $0x30,0x4(%rax)
  40de44:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
  40de4b:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  40de4f:	48 89 50 08          	mov    %rdx,0x8(%rax)
  40de53:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
  40de5a:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
  40de61:	48 89 50 10          	mov    %rdx,0x10(%rax)
import user.syscall;
import std.stdarg;

import libos.console;

void print(...) {
  40de65:	48 8b 95 f8 fd ff ff 	mov    -0x208(%rbp),%rdx
  40de6c:	48 8b 42 10          	mov    0x10(%rdx),%rax
  40de70:	48 89 85 00 fe ff ff 	mov    %rax,-0x200(%rbp)
  40de77:	48 8b 42 18          	mov    0x18(%rdx),%rax
  40de7b:	48 89 85 08 fe ff ff 	mov    %rax,-0x1f8(%rbp)
	if (_arguments.length == 0)
  40de82:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax
  40de89:	48 85 c0             	test   %rax,%rax
  40de8c:	75 05                	jne    40de93 <_D4user7basicio5printFYv+0xf7>
  40de8e:	e9 e9 05 00 00       	jmpq   40e47c <_D4user7basicio5printFYv+0x6e0>
	{
		return;
	}

	char[20] buff;
  40de93:	48 c7 85 50 fe ff ff 	movq   $0x14,-0x1b0(%rbp)
  40de9a:	14 00 00 00 
  40de9e:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40dea5:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
  40deac:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  40deb3:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  40deba:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  40dec1:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  40dec8:	48 83 bd 10 ff ff ff 	cmpq   $0x0,-0xf0(%rbp)
  40decf:	00 
  40ded0:	0f 95 c0             	setne  %al
  40ded3:	83 f0 01             	xor    $0x1,%eax
  40ded6:	84 c0                	test   %al,%al
  40ded8:	75 1a                	jne    40def4 <_D4user7basicio5printFYv+0x158>
  40deda:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40dee1:	c6 00 ff             	movb   $0xff,(%rax)
  40dee4:	48 ff 85 08 ff ff ff 	incq   -0xf8(%rbp)
  40deeb:	48 ff 8d 10 ff ff ff 	decq   -0xf0(%rbp)
  40def2:	eb d4                	jmp    40dec8 <_D4user7basicio5printFYv+0x12c>

	foreach(arg; _arguments)
  40def4:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
  40defb:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
  40df02:	48 8b 95 c0 fd ff ff 	mov    -0x240(%rbp),%rdx
  40df09:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  40df10:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax
  40df17:	48 c1 e0 03          	shl    $0x3,%rax
  40df1b:	48 03 85 c0 fd ff ff 	add    -0x240(%rbp),%rax
  40df22:	48 39 85 18 ff ff ff 	cmp    %rax,-0xe8(%rbp)
  40df29:	0f 95 c0             	setne  %al
  40df2c:	83 f0 01             	xor    $0x1,%eax
  40df2f:	84 c0                	test   %al,%al
  40df31:	0f 85 22 05 00 00    	jne    40e459 <_D4user7basicio5printFYv+0x6bd>
  40df37:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40df3e:	48 8b 00             	mov    (%rax),%rax
  40df41:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
	{
		if (arg == typeid(char[]))
  40df48:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40df4f:	48 8b 00             	mov    (%rax),%rax
  40df52:	48 83 c0 20          	add    $0x20,%rax
  40df56:	48 8b 00             	mov    (%rax),%rax
  40df59:	48 c7 c6 00 f9 40 00 	mov    $0x40f900,%rsi
  40df60:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
  40df67:	ff d0                	callq  *%rax
  40df69:	85 c0                	test   %eax,%eax
  40df6b:	0f 84 0e 01 00 00    	je     40e07f <_D4user7basicio5printFYv+0x2e3>
		{
			Console.printString(va_arg!(char[])(_argptr));
  40df71:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40df77:	83 f8 30             	cmp    $0x30,%eax
  40df7a:	73 2a                	jae    40dfa6 <_D4user7basicio5printFYv+0x20a>
  40df7c:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  40df83:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40df89:	89 c0                	mov    %eax,%eax
  40df8b:	48 01 c2             	add    %rax,%rdx
  40df8e:	48 89 95 c8 fd ff ff 	mov    %rdx,-0x238(%rbp)
  40df95:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40df9b:	83 c0 08             	add    $0x8,%eax
  40df9e:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%rbp)
  40dfa4:	eb 19                	jmp    40dfbf <_D4user7basicio5printFYv+0x223>
  40dfa6:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  40dfad:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
  40dfb4:	48 83 c0 08          	add    $0x8,%rax
  40dfb8:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  40dfbf:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
  40dfc6:	48 8b 00             	mov    (%rax),%rax
  40dfc9:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  40dfd0:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40dfd6:	83 f8 30             	cmp    $0x30,%eax
  40dfd9:	73 2a                	jae    40e005 <_D4user7basicio5printFYv+0x269>
  40dfdb:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  40dfe2:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40dfe8:	89 c0                	mov    %eax,%eax
  40dfea:	48 01 c2             	add    %rax,%rdx
  40dfed:	48 89 95 d0 fd ff ff 	mov    %rdx,-0x230(%rbp)
  40dff4:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40dffa:	83 c0 08             	add    $0x8,%eax
  40dffd:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%rbp)
  40e003:	eb 19                	jmp    40e01e <_D4user7basicio5printFYv+0x282>
  40e005:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  40e00c:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
  40e013:	48 83 c0 08          	add    $0x8,%rax
  40e017:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  40e01e:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
  40e025:	48 8b 00             	mov    (%rax),%rax
  40e028:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  40e02f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40e036:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
  40e03d:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  40e044:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
  40e04b:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
  40e052:	48 89 85 60 fe ff ff 	mov    %rax,-0x1a0(%rbp)
  40e059:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
  40e060:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
  40e067:	48 8b bd 60 fe ff ff 	mov    -0x1a0(%rbp),%rdi
  40e06e:	48 8b b5 68 fe ff ff 	mov    -0x198(%rbp),%rsi
  40e075:	e8 b7 0b 00 00       	callq  40ec31 <_D5libos7console7Console11printStringFAaZv>
  40e07a:	e9 cd 03 00 00       	jmpq   40e44c <_D4user7basicio5printFYv+0x6b0>
		}
		else if (arg == typeid(long))
  40e07f:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40e086:	48 8b 00             	mov    (%rax),%rax
  40e089:	48 83 c0 20          	add    $0x20,%rax
  40e08d:	48 8b 00             	mov    (%rax),%rax
  40e090:	48 c7 c6 d0 0a 41 00 	mov    $0x410ad0,%rsi
  40e097:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
  40e09e:	ff d0                	callq  *%rax
  40e0a0:	85 c0                	test   %eax,%eax
  40e0a2:	0f 84 c4 00 00 00    	je     40e16c <_D4user7basicio5printFYv+0x3d0>
		{
			long val;
  40e0a8:	48 c7 85 38 ff ff ff 	movq   $0x0,-0xc8(%rbp)
  40e0af:	00 00 00 00 
			val = va_arg!(long)(_argptr);
  40e0b3:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e0b9:	83 f8 30             	cmp    $0x30,%eax
  40e0bc:	73 2a                	jae    40e0e8 <_D4user7basicio5printFYv+0x34c>
  40e0be:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  40e0c5:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e0cb:	89 c0                	mov    %eax,%eax
  40e0cd:	48 01 c2             	add    %rax,%rdx
  40e0d0:	48 89 95 d8 fd ff ff 	mov    %rdx,-0x228(%rbp)
  40e0d7:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e0dd:	83 c0 08             	add    $0x8,%eax
  40e0e0:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%rbp)
  40e0e6:	eb 19                	jmp    40e101 <_D4user7basicio5printFYv+0x365>
  40e0e8:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  40e0ef:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
  40e0f6:	48 83 c0 08          	add    $0x8,%rax
  40e0fa:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  40e101:	48 8b 85 d8 fd ff ff 	mov    -0x228(%rbp),%rax
  40e108:	48 8b 00             	mov    (%rax),%rax
  40e10b:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)

			Console.printString(itoa(buff, 'd', val));
  40e112:	48 c7 85 80 fe ff ff 	movq   $0x14,-0x180(%rbp)
  40e119:	14 00 00 00 
  40e11d:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40e124:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
  40e12b:	48 8d bd 90 fe ff ff 	lea    -0x170(%rbp),%rdi
  40e132:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  40e139:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  40e140:	48 8b 95 88 fe ff ff 	mov    -0x178(%rbp),%rdx
  40e147:	49 89 c0             	mov    %rax,%r8
  40e14a:	b9 64 00 00 00       	mov    $0x64,%ecx
  40e14f:	e8 2a 03 00 00       	callq  40e47e <_D4user7basicio4itoaFAaalZAa>
  40e154:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  40e15b:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  40e162:	e8 ca 0a 00 00       	callq  40ec31 <_D5libos7console7Console11printStringFAaZv>
  40e167:	e9 e0 02 00 00       	jmpq   40e44c <_D4user7basicio5printFYv+0x6b0>
		}
		else if (arg == typeid(ulong))
  40e16c:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40e173:	48 8b 00             	mov    (%rax),%rax
  40e176:	48 83 c0 20          	add    $0x20,%rax
  40e17a:	48 8b 00             	mov    (%rax),%rax
  40e17d:	48 c7 c6 d0 0f 41 00 	mov    $0x410fd0,%rsi
  40e184:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
  40e18b:	ff d0                	callq  *%rax
  40e18d:	85 c0                	test   %eax,%eax
  40e18f:	0f 84 c4 00 00 00    	je     40e259 <_D4user7basicio5printFYv+0x4bd>
		{
			ulong val;
  40e195:	48 c7 85 40 ff ff ff 	movq   $0x0,-0xc0(%rbp)
  40e19c:	00 00 00 00 
			val = va_arg!(ulong)(_argptr);
  40e1a0:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e1a6:	83 f8 30             	cmp    $0x30,%eax
  40e1a9:	73 2a                	jae    40e1d5 <_D4user7basicio5printFYv+0x439>
  40e1ab:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  40e1b2:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e1b8:	89 c0                	mov    %eax,%eax
  40e1ba:	48 01 c2             	add    %rax,%rdx
  40e1bd:	48 89 95 e0 fd ff ff 	mov    %rdx,-0x220(%rbp)
  40e1c4:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e1ca:	83 c0 08             	add    $0x8,%eax
  40e1cd:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%rbp)
  40e1d3:	eb 19                	jmp    40e1ee <_D4user7basicio5printFYv+0x452>
  40e1d5:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  40e1dc:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  40e1e3:	48 83 c0 08          	add    $0x8,%rax
  40e1e7:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  40e1ee:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
  40e1f5:	48 8b 00             	mov    (%rax),%rax
  40e1f8:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)

			Console.printString(itoa(buff, 'u', val));
  40e1ff:	48 8b 8d 40 ff ff ff 	mov    -0xc0(%rbp),%rcx
  40e206:	48 c7 85 a0 fe ff ff 	movq   $0x14,-0x160(%rbp)
  40e20d:	14 00 00 00 
  40e211:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40e218:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
  40e21f:	48 8d bd b0 fe ff ff 	lea    -0x150(%rbp),%rdi
  40e226:	48 8b b5 a0 fe ff ff 	mov    -0x160(%rbp),%rsi
  40e22d:	48 8b 95 a8 fe ff ff 	mov    -0x158(%rbp),%rdx
  40e234:	49 89 c8             	mov    %rcx,%r8
  40e237:	b9 75 00 00 00       	mov    $0x75,%ecx
  40e23c:	e8 3d 02 00 00       	callq  40e47e <_D4user7basicio4itoaFAaalZAa>
  40e241:	48 8b bd b0 fe ff ff 	mov    -0x150(%rbp),%rdi
  40e248:	48 8b b5 b8 fe ff ff 	mov    -0x148(%rbp),%rsi
  40e24f:	e8 dd 09 00 00       	callq  40ec31 <_D5libos7console7Console11printStringFAaZv>
  40e254:	e9 f3 01 00 00       	jmpq   40e44c <_D4user7basicio5printFYv+0x6b0>
		}
		else if (arg == typeid(int))
  40e259:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40e260:	48 8b 00             	mov    (%rax),%rax
  40e263:	48 83 c0 20          	add    $0x20,%rax
  40e267:	48 8b 00             	mov    (%rax),%rax
  40e26a:	48 c7 c6 50 09 41 00 	mov    $0x410950,%rsi
  40e271:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
  40e278:	ff d0                	callq  *%rax
  40e27a:	85 c0                	test   %eax,%eax
  40e27c:	0f 84 c3 00 00 00    	je     40e345 <_D4user7basicio5printFYv+0x5a9>
		{
			int val;
  40e282:	c7 85 48 ff ff ff 00 	movl   $0x0,-0xb8(%rbp)
  40e289:	00 00 00 
			val = va_arg!(int)(_argptr);
  40e28c:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e292:	83 f8 30             	cmp    $0x30,%eax
  40e295:	73 2a                	jae    40e2c1 <_D4user7basicio5printFYv+0x525>
  40e297:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  40e29e:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e2a4:	89 c0                	mov    %eax,%eax
  40e2a6:	48 01 c2             	add    %rax,%rdx
  40e2a9:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
  40e2b0:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e2b6:	83 c0 08             	add    $0x8,%eax
  40e2b9:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%rbp)
  40e2bf:	eb 19                	jmp    40e2da <_D4user7basicio5printFYv+0x53e>
  40e2c1:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  40e2c8:	48 89 85 e8 fd ff ff 	mov    %rax,-0x218(%rbp)
  40e2cf:	48 83 c0 08          	add    $0x8,%rax
  40e2d3:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  40e2da:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
  40e2e1:	8b 00                	mov    (%rax),%eax
  40e2e3:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)

			Console.printString(itoa(buff, 'd', val));
  40e2e9:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
  40e2ef:	48 63 c8             	movslq %eax,%rcx
  40e2f2:	48 c7 85 c0 fe ff ff 	movq   $0x14,-0x140(%rbp)
  40e2f9:	14 00 00 00 
  40e2fd:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40e304:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
  40e30b:	48 8d bd d0 fe ff ff 	lea    -0x130(%rbp),%rdi
  40e312:	48 8b b5 c0 fe ff ff 	mov    -0x140(%rbp),%rsi
  40e319:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
  40e320:	49 89 c8             	mov    %rcx,%r8
  40e323:	b9 64 00 00 00       	mov    $0x64,%ecx
  40e328:	e8 51 01 00 00       	callq  40e47e <_D4user7basicio4itoaFAaalZAa>
  40e32d:	48 8b bd d0 fe ff ff 	mov    -0x130(%rbp),%rdi
  40e334:	48 8b b5 d8 fe ff ff 	mov    -0x128(%rbp),%rsi
  40e33b:	e8 f1 08 00 00       	callq  40ec31 <_D5libos7console7Console11printStringFAaZv>
  40e340:	e9 07 01 00 00       	jmpq   40e44c <_D4user7basicio5printFYv+0x6b0>
		}
		else if (arg == typeid(uint))
  40e345:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40e34c:	48 8b 00             	mov    (%rax),%rax
  40e34f:	48 83 c0 20          	add    $0x20,%rax
  40e353:	48 8b 00             	mov    (%rax),%rax
  40e356:	48 c7 c6 10 0f 41 00 	mov    $0x410f10,%rsi
  40e35d:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
  40e364:	ff d0                	callq  *%rax
  40e366:	85 c0                	test   %eax,%eax
  40e368:	0f 84 bd 00 00 00    	je     40e42b <_D4user7basicio5printFYv+0x68f>
		{
			uint val;
  40e36e:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  40e375:	00 00 00 
			val = va_arg!(int)(_argptr);
  40e378:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e37e:	83 f8 30             	cmp    $0x30,%eax
  40e381:	73 2a                	jae    40e3ad <_D4user7basicio5printFYv+0x611>
  40e383:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  40e38a:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e390:	89 c0                	mov    %eax,%eax
  40e392:	48 01 c2             	add    %rax,%rdx
  40e395:	48 89 95 f0 fd ff ff 	mov    %rdx,-0x210(%rbp)
  40e39c:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e3a2:	83 c0 08             	add    $0x8,%eax
  40e3a5:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%rbp)
  40e3ab:	eb 19                	jmp    40e3c6 <_D4user7basicio5printFYv+0x62a>
  40e3ad:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  40e3b4:	48 89 85 f0 fd ff ff 	mov    %rax,-0x210(%rbp)
  40e3bb:	48 83 c0 08          	add    $0x8,%rax
  40e3bf:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  40e3c6:	48 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%rax
  40e3cd:	8b 00                	mov    (%rax),%eax
  40e3cf:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)

			Console.printString(itoa(buff, 'u', val));
  40e3d5:	8b 8d 4c ff ff ff    	mov    -0xb4(%rbp),%ecx
  40e3db:	48 c7 85 e0 fe ff ff 	movq   $0x14,-0x120(%rbp)
  40e3e2:	14 00 00 00 
  40e3e6:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40e3ed:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  40e3f4:	48 8d bd f0 fe ff ff 	lea    -0x110(%rbp),%rdi
  40e3fb:	48 8b b5 e0 fe ff ff 	mov    -0x120(%rbp),%rsi
  40e402:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  40e409:	49 89 c8             	mov    %rcx,%r8
  40e40c:	b9 75 00 00 00       	mov    $0x75,%ecx
  40e411:	e8 68 00 00 00       	callq  40e47e <_D4user7basicio4itoaFAaalZAa>
  40e416:	48 8b bd f0 fe ff ff 	mov    -0x110(%rbp),%rdi
  40e41d:	48 8b b5 f8 fe ff ff 	mov    -0x108(%rbp),%rsi
  40e424:	e8 08 08 00 00       	callq  40ec31 <_D5libos7console7Console11printStringFAaZv>
  40e429:	eb 21                	jmp    40e44c <_D4user7basicio5printFYv+0x6b0>
		}
		else if (arg == typeid(void*))
  40e42b:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40e432:	48 8b 00             	mov    (%rax),%rax
  40e435:	48 83 c0 20          	add    $0x20,%rax
  40e439:	48 8b 00             	mov    (%rax),%rax
  40e43c:	48 c7 c6 00 cf 41 00 	mov    $0x41cf00,%rsi
  40e443:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
  40e44a:	ff d0                	callq  *%rax

	char[20] buff;

	foreach(arg; _arguments)
	{
		if (arg == typeid(char[]))
  40e44c:	48 83 85 18 ff ff ff 	addq   $0x8,-0xe8(%rbp)
  40e453:	08 
  40e454:	e9 b7 fa ff ff       	jmpq   40df10 <_D4user7basicio5printFYv+0x174>
  40e459:	eb 21                	jmp    40e47c <_D4user7basicio5printFYv+0x6e0>
  40e45b:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
  40e462:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
  40e469:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
  40e470:	48 8b bd b0 fd ff ff 	mov    -0x250(%rbp),%rdi
  40e477:	e8 ff c8 ff ff       	callq  40ad7b <_Unwind_Resume>
		}
		else if (arg == typeid(void*))
		{
		}
	}
}
  40e47c:	c9                   	leaveq 
  40e47d:	c3                   	retq   

000000000040e47e <_D4user7basicio4itoaFAaalZAa>:
char[] itoa(char[] buf, char base, long d)
  40e47e:	55                   	push   %rbp
  40e47f:	48 89 e5             	mov    %rsp,%rbp
  40e482:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  40e489:	48 89 bd f0 fe ff ff 	mov    %rdi,-0x110(%rbp)
  40e490:	88 8d 6f ff ff ff    	mov    %cl,-0x91(%rbp)
  40e496:	4c 89 85 60 ff ff ff 	mov    %r8,-0xa0(%rbp)
  40e49d:	48 89 f0             	mov    %rsi,%rax
  40e4a0:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  40e4a7:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
{
  size_t p = buf.length - 1;
  40e4ae:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40e4b5:	48 ff c8             	dec    %rax
  40e4b8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  size_t startIdx = 0;
  40e4bc:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40e4c3:	00 
  ulong ud = d;
  40e4c4:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40e4cb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  bool negative = false;
  40e4cf:	c6 45 d7 00          	movb   $0x0,-0x29(%rbp)

  int divisor = 10;
  40e4d3:	c7 45 d0 0a 00 00 00 	movl   $0xa,-0x30(%rbp)

  // If %d is specified and D is minus, put `-' in the head.
  if(base == 'd' && d < 0)
  40e4da:	0f b6 85 6f ff ff ff 	movzbl -0x91(%rbp),%eax
  40e4e1:	83 f8 64             	cmp    $0x64,%eax
  40e4e4:	75 1e                	jne    40e504 <_D4user7basicio4itoaFAaalZAa+0x86>
  40e4e6:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  40e4ed:	00 
  40e4ee:	79 14                	jns    40e504 <_D4user7basicio4itoaFAaalZAa+0x86>
  {
    negative = true;
  40e4f0:	c6 45 d7 01          	movb   $0x1,-0x29(%rbp)
    ud = -d;
  40e4f4:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40e4fb:	48 f7 d8             	neg    %rax
  40e4fe:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  bool negative = false;

  int divisor = 10;

  // If %d is specified and D is minus, put `-' in the head.
  if(base == 'd' && d < 0)
  40e502:	eb 13                	jmp    40e517 <_D4user7basicio4itoaFAaalZAa+0x99>
  {
    negative = true;
    ud = -d;
  }
  else if(base == 'x')
  40e504:	0f b6 85 6f ff ff ff 	movzbl -0x91(%rbp),%eax
  40e50b:	83 f8 78             	cmp    $0x78,%eax
  40e50e:	75 07                	jne    40e517 <_D4user7basicio4itoaFAaalZAa+0x99>
    divisor = 16;
  40e510:	c7 45 d0 10 00 00 00 	movl   $0x10,-0x30(%rbp)

  // Divide UD by DIVISOR until UD == 0.
  do
  {
    int remainder = ud % divisor;
  40e517:	8b 45 d0             	mov    -0x30(%rbp),%eax
  40e51a:	48 63 d0             	movslq %eax,%rdx
  40e51d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40e521:	48 89 d1             	mov    %rdx,%rcx
  40e524:	ba 00 00 00 00       	mov    $0x0,%edx
  40e529:	48 f7 f1             	div    %rcx
  40e52c:	48 89 d0             	mov    %rdx,%rax
  40e52f:	89 45 f4             	mov    %eax,-0xc(%rbp)
    buf[p--] = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
  40e532:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40e539:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
  40e540:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40e544:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  40e54b:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40e552:	48 39 85 08 ff ff ff 	cmp    %rax,-0xf8(%rbp)
  40e559:	0f 92 c0             	setb   %al
  40e55c:	48 ff 4d e8          	decq   -0x18(%rbp)
  40e560:	84 c0                	test   %al,%al
  40e562:	74 10                	je     40e574 <_D4user7basicio4itoaFAaalZAa+0xf6>
  40e564:	48 8b 8d 08 ff ff ff 	mov    -0xf8(%rbp),%rcx
  40e56b:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  40e572:	eb 22                	jmp    40e596 <_D4user7basicio4itoaFAaalZAa+0x118>
  40e574:	48 c7 45 80 0e 00 00 	movq   $0xe,-0x80(%rbp)
  40e57b:	00 
  40e57c:	48 c7 45 88 d1 41 41 	movq   $0x4141d1,-0x78(%rbp)
  40e583:	00 
  40e584:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  40e588:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  40e58c:	ba 54 00 00 00       	mov    $0x54,%edx
  40e591:	e8 df c3 ff ff       	callq  40a975 <_d_array_bounds>
  40e596:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40e59d:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  40e5a4:	48 01 c2             	add    %rax,%rdx
  40e5a7:	48 89 95 10 ff ff ff 	mov    %rdx,-0xf0(%rbp)
  40e5ae:	83 7d f4 0a          	cmpl   $0xa,-0xc(%rbp)
  40e5b2:	7d 0e                	jge    40e5c2 <_D4user7basicio4itoaFAaalZAa+0x144>
  40e5b4:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40e5b7:	83 c0 30             	add    $0x30,%eax
  40e5ba:	88 85 1f ff ff ff    	mov    %al,-0xe1(%rbp)
  40e5c0:	eb 0c                	jmp    40e5ce <_D4user7basicio4itoaFAaalZAa+0x150>
  40e5c2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40e5c5:	83 c0 57             	add    $0x57,%eax
  40e5c8:	88 85 1f ff ff ff    	mov    %al,-0xe1(%rbp)
  40e5ce:	0f b6 8d 1f ff ff ff 	movzbl -0xe1(%rbp),%ecx
  40e5d5:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40e5dc:	88 08                	mov    %cl,(%rax)
  40e5de:	8b 45 d0             	mov    -0x30(%rbp),%eax
  40e5e1:	48 63 d0             	movslq %eax,%rdx
  40e5e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40e5e8:	48 89 d1             	mov    %rdx,%rcx
  40e5eb:	ba 00 00 00 00       	mov    $0x0,%edx
  40e5f0:	48 f7 f1             	div    %rcx
  40e5f3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40e5f7:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  40e5fc:	0f 95 c0             	setne  %al
  40e5ff:	83 f0 01             	xor    $0x1,%eax
  40e602:	84 c0                	test   %al,%al
  40e604:	75 05                	jne    40e60b <_D4user7basicio4itoaFAaalZAa+0x18d>
  40e606:	e9 0c ff ff ff       	jmpq   40e517 <_D4user7basicio4itoaFAaalZAa+0x99>
  }
  while (ud /= divisor)

    if(negative)
  40e60b:	80 7d d7 00          	cmpb   $0x0,-0x29(%rbp)
  40e60f:	74 75                	je     40e686 <_D4user7basicio4itoaFAaalZAa+0x208>
      buf[p--] = '-';
  40e611:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40e618:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  40e61f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40e623:	48 89 95 30 ff ff ff 	mov    %rdx,-0xd0(%rbp)
  40e62a:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40e631:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
  40e638:	0f 92 c0             	setb   %al
  40e63b:	48 ff 4d e8          	decq   -0x18(%rbp)
  40e63f:	84 c0                	test   %al,%al
  40e641:	74 10                	je     40e653 <_D4user7basicio4itoaFAaalZAa+0x1d5>
  40e643:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
  40e64a:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
  40e651:	eb 22                	jmp    40e675 <_D4user7basicio4itoaFAaalZAa+0x1f7>
  40e653:	48 c7 45 90 0e 00 00 	movq   $0xe,-0x70(%rbp)
  40e65a:	00 
  40e65b:	48 c7 45 98 d1 41 41 	movq   $0x4141d1,-0x68(%rbp)
  40e662:	00 
  40e663:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  40e667:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  40e66b:	ba 59 00 00 00       	mov    $0x59,%edx
  40e670:	e8 00 c3 ff ff       	callq  40a975 <_d_array_bounds>
  40e675:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40e67c:	48 03 85 20 ff ff ff 	add    -0xe0(%rbp),%rax
  40e683:	c6 00 2d             	movb   $0x2d,(%rax)

  return buf[p + 1 .. $];
  40e686:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40e68d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40e691:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40e698:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  40e69c:	77 0d                	ja     40e6ab <_D4user7basicio4itoaFAaalZAa+0x22d>
  40e69e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e6a2:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  40e6a9:	eb 22                	jmp    40e6cd <_D4user7basicio4itoaFAaalZAa+0x24f>
  40e6ab:	48 c7 45 b0 0e 00 00 	movq   $0xe,-0x50(%rbp)
  40e6b2:	00 
  40e6b3:	48 c7 45 b8 d1 41 41 	movq   $0x4141d1,-0x48(%rbp)
  40e6ba:	00 
  40e6bb:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  40e6bf:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40e6c3:	ba 5b 00 00 00       	mov    $0x5b,%edx
  40e6c8:	e8 a8 c2 ff ff       	callq  40a975 <_d_array_bounds>
  40e6cd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40e6d1:	48 ff c2             	inc    %rdx
  40e6d4:	48 89 95 40 ff ff ff 	mov    %rdx,-0xc0(%rbp)
  40e6db:	48 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%rcx
  40e6e2:	48 2b 8d 40 ff ff ff 	sub    -0xc0(%rbp),%rcx
  40e6e9:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
  40e6f0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40e6f7:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  40e6fe:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40e705:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
  40e70c:	77 10                	ja     40e71e <_D4user7basicio4itoaFAaalZAa+0x2a0>
  40e70e:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
  40e715:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  40e71c:	eb 22                	jmp    40e740 <_D4user7basicio4itoaFAaalZAa+0x2c2>
  40e71e:	48 c7 45 c0 0e 00 00 	movq   $0xe,-0x40(%rbp)
  40e725:	00 
  40e726:	48 c7 45 c8 d1 41 41 	movq   $0x4141d1,-0x38(%rbp)
  40e72d:	00 
  40e72e:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40e732:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40e736:	ba 5b 00 00 00       	mov    $0x5b,%edx
  40e73b:	e8 35 c2 ff ff       	callq  40a975 <_d_array_bounds>
  40e740:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  40e747:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  40e74e:	48 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%rcx
  40e755:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
  40e759:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  40e75d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40e761:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  40e768:	48 89 02             	mov    %rax,(%rdx)
  40e76b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40e76f:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  40e776:	48 89 41 08          	mov    %rax,0x8(%rcx)
}
  40e77a:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  40e781:	c9                   	leaveq 
  40e782:	c3                   	retq   

000000000040e783 <_D3std6stdarg14__T6va_argTAaZ6va_argFG1S3gcc8builtins13__va_list_tagZAa>:
    alias void* va_list;
}

template va_arg(T)
{
    T va_arg(inout va_list _argptr)
  40e783:	55                   	push   %rbp
  40e784:	48 89 e5             	mov    %rsp,%rbp
  40e787:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
	/*
	T arg = *cast(T*)_argptr;
	_argptr = _argptr + ((T.sizeof + int.sizeof - 1) & ~(int.sizeof - 1));
	return arg;
	*/
	T t; return t;
  40e78b:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40e792:	00 
  40e793:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40e79a:	00 
  40e79b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40e79f:	48 89 07             	mov    %rax,(%rdi)
  40e7a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e7a6:	48 89 47 08          	mov    %rax,0x8(%rdi)
    }
  40e7aa:	48 89 f8             	mov    %rdi,%rax
  40e7ad:	c9                   	leaveq 
  40e7ae:	c3                   	retq   

000000000040e7af <_D3std6stdarg13__T6va_argTlZ6va_argFG1S3gcc8builtins13__va_list_tagZl>:
    alias void* va_list;
}

template va_arg(T)
{
    T va_arg(inout va_list _argptr)
  40e7af:	55                   	push   %rbp
  40e7b0:	48 89 e5             	mov    %rsp,%rbp
  40e7b3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	/*
	T arg = *cast(T*)_argptr;
	_argptr = _argptr + ((T.sizeof + int.sizeof - 1) & ~(int.sizeof - 1));
	return arg;
	*/
	T t; return t;
  40e7b7:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40e7be:	00 
  40e7bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  40e7c3:	c9                   	leaveq 
  40e7c4:	c3                   	retq   

000000000040e7c5 <_D3std6stdarg13__T6va_argTmZ6va_argFG1S3gcc8builtins13__va_list_tagZm>:
    alias void* va_list;
}

template va_arg(T)
{
    T va_arg(inout va_list _argptr)
  40e7c5:	55                   	push   %rbp
  40e7c6:	48 89 e5             	mov    %rsp,%rbp
  40e7c9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	/*
	T arg = *cast(T*)_argptr;
	_argptr = _argptr + ((T.sizeof + int.sizeof - 1) & ~(int.sizeof - 1));
	return arg;
	*/
	T t; return t;
  40e7cd:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40e7d4:	00 
  40e7d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  40e7d9:	c9                   	leaveq 
  40e7da:	c3                   	retq   

000000000040e7db <_D3std6stdarg13__T6va_argTiZ6va_argFG1S3gcc8builtins13__va_list_tagZi>:
    alias void* va_list;
}

template va_arg(T)
{
    T va_arg(inout va_list _argptr)
  40e7db:	55                   	push   %rbp
  40e7dc:	48 89 e5             	mov    %rsp,%rbp
  40e7df:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	/*
	T arg = *cast(T*)_argptr;
	_argptr = _argptr + ((T.sizeof + int.sizeof - 1) & ~(int.sizeof - 1));
	return arg;
	*/
	T t; return t;
  40e7e3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40e7ea:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
  40e7ed:	c9                   	leaveq 
  40e7ee:	c3                   	retq   
  40e7ef:	90                   	nop    

000000000040e7f0 <_D5libos8keyboard8Keyboard4initFZv>:
struct Keyboard
{

static:

	void init()
  40e7f0:	55                   	push   %rbp
  40e7f1:	48 89 e5             	mov    %rsp,%rbp
  40e7f4:	48 83 ec 20          	sub    $0x20,%rsp
	{
		kInfo = Syscall.initKeyboard();
  40e7f8:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  40e7fc:	e8 47 ef ff ff       	callq  40d748 <_D4user7syscall12initKeyboardFZS4user7syscall12KeyboardInfo>
  40e801:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e805:	48 89 05 94 0c 01 00 	mov    %rax,0x10c94(%rip)        # 41f4a0 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo>
  40e80c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e810:	48 89 05 91 0c 01 00 	mov    %rax,0x10c91(%rip)        # 41f4a8 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x8>
  40e817:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40e81b:	48 89 05 8e 0c 01 00 	mov    %rax,0x10c8e(%rip)        # 41f4b0 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x10>
  40e822:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e826:	48 89 05 8b 0c 01 00 	mov    %rax,0x10c8b(%rip)        # 41f4b8 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x18>
	}
  40e82d:	c9                   	leaveq 
  40e82e:	c3                   	retq   

000000000040e82f <_D5libos8keyboard8Keyboard7grabKeyFZs>:

	short grabKey()
  40e82f:	55                   	push   %rbp
  40e830:	48 89 e5             	mov    %rsp,%rbp
  40e833:	48 83 ec 30          	sub    $0x30,%rsp
	{
		short ret = bufferGrabKey();
  40e837:	e8 5d 02 00 00       	callq  40ea99 <_D5libos8keyboard8Keyboard13bufferGrabKeyFZs>
  40e83c:	66 89 45 fe          	mov    %ax,-0x2(%rbp)

		short key = ret;
  40e840:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  40e844:	66 89 45 fc          	mov    %ax,-0x4(%rbp)

		bool up;
  40e848:	c6 45 fb 00          	movb   $0x0,-0x5(%rbp)

		if (ret < 0)
  40e84c:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40e850:	85 c0                	test   %eax,%eax
  40e852:	79 08                	jns    40e85c <_D5libos8keyboard8Keyboard7grabKeyFZs+0x2d>
		{
			up = true;
  40e854:	c6 45 fb 01          	movb   $0x1,-0x5(%rbp)
			ret = -ret;
  40e858:	66 f7 5d fe          	negw   -0x2(%rbp)
		}

		if (ret >= Key.max)
  40e85c:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40e860:	83 f8 78             	cmp    $0x78,%eax
  40e863:	7c 0b                	jl     40e870 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x41>
		{
			return Key.Null;
  40e865:	66 c7 45 d6 00 00    	movw   $0x0,-0x2a(%rbp)
  40e86b:	e9 f9 00 00 00       	jmpq   40e969 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x13a>
		}

		keyState[ret] = !up;
  40e870:	48 0f bf 45 fe       	movswq -0x2(%rbp),%rax
  40e875:	48 83 f8 78          	cmp    $0x78,%rax
  40e879:	73 0b                	jae    40e886 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x57>
  40e87b:	48 0f bf 45 fe       	movswq -0x2(%rbp),%rax
  40e880:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40e884:	eb 22                	jmp    40e8a8 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x79>
  40e886:	48 c7 45 e0 10 00 00 	movq   $0x10,-0x20(%rbp)
  40e88d:	00 
  40e88e:	48 c7 45 e8 e1 41 41 	movq   $0x4141e1,-0x18(%rbp)
  40e895:	00 
  40e896:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40e89a:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40e89e:	ba 23 00 00 00       	mov    $0x23,%edx
  40e8a3:	e8 cd c0 ff ff       	callq  40a975 <_d_array_bounds>
  40e8a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40e8ac:	48 8d 90 e0 f4 41 00 	lea    0x41f4e0(%rax),%rdx
  40e8b3:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  40e8b7:	83 f0 01             	xor    $0x1,%eax
  40e8ba:	88 02                	mov    %al,(%rdx)

		if (ret == Key.LeftShift || ret == Key.RightShift)
  40e8bc:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40e8c0:	83 f8 2d             	cmp    $0x2d,%eax
  40e8c3:	74 09                	je     40e8ce <_D5libos8keyboard8Keyboard7grabKeyFZs+0x9f>
  40e8c5:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40e8c9:	83 f8 30             	cmp    $0x30,%eax
  40e8cc:	75 26                	jne    40e8f4 <_D5libos8keyboard8Keyboard7grabKeyFZs+0xc5>
		{
			shiftState = keyState[Key.LeftShift] | keyState[Key.RightShift];
  40e8ce:	b8 2d 00 00 00       	mov    $0x2d,%eax
  40e8d3:	48 05 e0 f4 41 00    	add    $0x41f4e0,%rax
  40e8d9:	0f b6 10             	movzbl (%rax),%edx
  40e8dc:	b8 30 00 00 00       	mov    $0x30,%eax
  40e8e1:	48 05 e0 f4 41 00    	add    $0x41f4e0,%rax
  40e8e7:	0f b6 00             	movzbl (%rax),%eax
  40e8ea:	09 d0                	or     %edx,%eax
  40e8ec:	88 05 ce 0b 01 00    	mov    %al,0x10bce(%rip)        # 41f4c0 <_D5libos8keyboard8Keyboard10shiftStateb>
			return Key.Null;
		}

		keyState[ret] = !up;

		if (ret == Key.LeftShift || ret == Key.RightShift)
  40e8f2:	eb 6e                	jmp    40e962 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x133>
		{
			shiftState = keyState[Key.LeftShift] | keyState[Key.RightShift];
		}
		else if (ret == Key.LeftControl || ret == Key.RightControl)
  40e8f4:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40e8f8:	83 f8 2e             	cmp    $0x2e,%eax
  40e8fb:	74 09                	je     40e906 <_D5libos8keyboard8Keyboard7grabKeyFZs+0xd7>
  40e8fd:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40e901:	83 f8 57             	cmp    $0x57,%eax
  40e904:	75 26                	jne    40e92c <_D5libos8keyboard8Keyboard7grabKeyFZs+0xfd>
		{
			ctrlState = keyState[Key.LeftControl] | keyState[Key.RightControl];
  40e906:	b8 2e 00 00 00       	mov    $0x2e,%eax
  40e90b:	48 05 e0 f4 41 00    	add    $0x41f4e0,%rax
  40e911:	0f b6 10             	movzbl (%rax),%edx
  40e914:	b8 57 00 00 00       	mov    $0x57,%eax
  40e919:	48 05 e0 f4 41 00    	add    $0x41f4e0,%rax
  40e91f:	0f b6 00             	movzbl (%rax),%eax
  40e922:	09 d0                	or     %edx,%eax
  40e924:	88 05 98 0b 01 00    	mov    %al,0x10b98(%rip)        # 41f4c2 <_D5libos8keyboard8Keyboard9ctrlStateb>

		if (ret == Key.LeftShift || ret == Key.RightShift)
		{
			shiftState = keyState[Key.LeftShift] | keyState[Key.RightShift];
		}
		else if (ret == Key.LeftControl || ret == Key.RightControl)
  40e92a:	eb 36                	jmp    40e962 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x133>
		{
			ctrlState = keyState[Key.LeftControl] | keyState[Key.RightControl];
		}
		else if (ret == Key.LeftAlt || ret == Key.RightAlt)
  40e92c:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40e930:	83 f8 2f             	cmp    $0x2f,%eax
  40e933:	74 09                	je     40e93e <_D5libos8keyboard8Keyboard7grabKeyFZs+0x10f>
  40e935:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40e939:	83 f8 59             	cmp    $0x59,%eax
  40e93c:	75 24                	jne    40e962 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x133>
		{
			altState = keyState[Key.LeftAlt] | keyState[Key.RightAlt];
  40e93e:	b8 2f 00 00 00       	mov    $0x2f,%eax
  40e943:	48 05 e0 f4 41 00    	add    $0x41f4e0,%rax
  40e949:	0f b6 10             	movzbl (%rax),%edx
  40e94c:	b8 59 00 00 00       	mov    $0x59,%eax
  40e951:	48 05 e0 f4 41 00    	add    $0x41f4e0,%rax
  40e957:	0f b6 00             	movzbl (%rax),%eax
  40e95a:	09 d0                	or     %edx,%eax
  40e95c:	88 05 5f 0b 01 00    	mov    %al,0x10b5f(%rip)        # 41f4c1 <_D5libos8keyboard8Keyboard8altStateb>
		}

		return key;
  40e962:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40e965:	66 89 45 d6          	mov    %ax,-0x2a(%rbp)
  40e969:	0f b7 45 d6          	movzwl -0x2a(%rbp),%eax
	}
  40e96d:	c9                   	leaveq 
  40e96e:	c3                   	retq   

000000000040e96f <_D5libos8keyboard8Keyboard13translateCodeFsZa>:

	char translateCode(short code)
  40e96f:	55                   	push   %rbp
  40e970:	48 89 e5             	mov    %rsp,%rbp
  40e973:	48 83 ec 50          	sub    $0x50,%rsp
  40e977:	66 89 7d ce          	mov    %di,-0x32(%rbp)
	{
		if (code <= 0) { return '\0'; }
  40e97b:	0f bf 45 ce          	movswl -0x32(%rbp),%eax
  40e97f:	85 c0                	test   %eax,%eax
  40e981:	7f 09                	jg     40e98c <_D5libos8keyboard8Keyboard13translateCodeFsZa+0x1d>
  40e983:	c6 45 b7 00          	movb   $0x0,-0x49(%rbp)
  40e987:	e9 b9 00 00 00       	jmpq   40ea45 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0xd6>

		// these translations only work on positive values
		// therefore, all up states must be ignored

		char ret;
  40e98c:	c6 45 ff ff          	movb   $0xff,-0x1(%rbp)
		if (shiftState)
  40e990:	0f b6 05 29 0b 01 00 	movzbl 0x10b29(%rip),%eax        # 41f4c0 <_D5libos8keyboard8Keyboard10shiftStateb>
  40e997:	84 c0                	test   %al,%al
  40e999:	74 4a                	je     40e9e5 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0x76>
		{
			ret = translateShift[code];
  40e99b:	48 0f bf 45 ce       	movswq -0x32(%rbp),%rax
  40e9a0:	48 83 f8 78          	cmp    $0x78,%rax
  40e9a4:	73 0b                	jae    40e9b1 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0x42>
  40e9a6:	48 0f bf 45 ce       	movswq -0x32(%rbp),%rax
  40e9ab:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40e9af:	eb 22                	jmp    40e9d3 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0x64>
  40e9b1:	48 c7 45 d0 10 00 00 	movq   $0x10,-0x30(%rbp)
  40e9b8:	00 
  40e9b9:	48 c7 45 d8 e1 41 41 	movq   $0x4141e1,-0x28(%rbp)
  40e9c0:	00 
  40e9c1:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40e9c5:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40e9c9:	ba 3f 00 00 00       	mov    $0x3f,%edx
  40e9ce:	e8 a2 bf ff ff       	callq  40a975 <_d_array_bounds>
  40e9d3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40e9d7:	48 05 a0 cf 41 00    	add    $0x41cfa0,%rax
  40e9dd:	0f b6 00             	movzbl (%rax),%eax
  40e9e0:	88 45 ff             	mov    %al,-0x1(%rbp)
  40e9e3:	eb 48                	jmp    40ea2d <_D5libos8keyboard8Keyboard13translateCodeFsZa+0xbe>
		}
		else
		{
			ret = translate[code];
  40e9e5:	48 0f bf 45 ce       	movswq -0x32(%rbp),%rax
  40e9ea:	48 83 f8 78          	cmp    $0x78,%rax
  40e9ee:	73 0b                	jae    40e9fb <_D5libos8keyboard8Keyboard13translateCodeFsZa+0x8c>
  40e9f0:	48 0f bf 45 ce       	movswq -0x32(%rbp),%rax
  40e9f5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40e9f9:	eb 22                	jmp    40ea1d <_D5libos8keyboard8Keyboard13translateCodeFsZa+0xae>
  40e9fb:	48 c7 45 e0 10 00 00 	movq   $0x10,-0x20(%rbp)
  40ea02:	00 
  40ea03:	48 c7 45 e8 e1 41 41 	movq   $0x4141e1,-0x18(%rbp)
  40ea0a:	00 
  40ea0b:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40ea0f:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40ea13:	ba 43 00 00 00       	mov    $0x43,%edx
  40ea18:	e8 58 bf ff ff       	callq  40a975 <_d_array_bounds>
  40ea1d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40ea21:	48 05 20 cf 41 00    	add    $0x41cf20,%rax
  40ea27:	0f b6 00             	movzbl (%rax),%eax
  40ea2a:	88 45 ff             	mov    %al,-0x1(%rbp)
		}

		if (ret != '\xFF')
  40ea2d:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40ea31:	3d ff 00 00 00       	cmp    $0xff,%eax
  40ea36:	74 09                	je     40ea41 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0xd2>
		{
			return ret;
  40ea38:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40ea3c:	88 45 b7             	mov    %al,-0x49(%rbp)
  40ea3f:	eb 04                	jmp    40ea45 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0xd6>
		}

		return '\0';
  40ea41:	c6 45 b7 00          	movb   $0x0,-0x49(%rbp)
  40ea45:	0f b6 45 b7          	movzbl -0x49(%rbp),%eax
	}
  40ea49:	c9                   	leaveq 
  40ea4a:	c3                   	retq   

000000000040ea4b <_D5libos8keyboard8Keyboard8grabCharFZa>:

	// block until a printable character is detected
	char grabChar()
  40ea4b:	55                   	push   %rbp
  40ea4c:	48 89 e5             	mov    %rsp,%rbp
  40ea4f:	48 83 ec 20          	sub    $0x20,%rsp
	{
		short key;
  40ea53:	66 c7 45 fe 00 00    	movw   $0x0,-0x2(%rbp)
		char ret;
  40ea59:	c6 45 fd ff          	movb   $0xff,-0x3(%rbp)

		for(;;)
  40ea5d:	b8 00 00 00 00       	mov    $0x0,%eax
  40ea62:	84 c0                	test   %al,%al
  40ea64:	75 29                	jne    40ea8f <_D5libos8keyboard8Keyboard8grabCharFZa+0x44>
		{
			key = grabKey();
  40ea66:	e8 c4 fd ff ff       	callq  40e82f <_D5libos8keyboard8Keyboard7grabKeyFZs>
  40ea6b:	66 89 45 fe          	mov    %ax,-0x2(%rbp)

			ret = translateCode(key);
  40ea6f:	0f bf 7d fe          	movswl -0x2(%rbp),%edi
  40ea73:	e8 f7 fe ff ff       	callq  40e96f <_D5libos8keyboard8Keyboard13translateCodeFsZa>
  40ea78:	88 45 fd             	mov    %al,-0x3(%rbp)

			if (ret != '\xFF')
  40ea7b:	0f b6 45 fd          	movzbl -0x3(%rbp),%eax
  40ea7f:	3d ff 00 00 00       	cmp    $0xff,%eax
  40ea84:	74 d7                	je     40ea5d <_D5libos8keyboard8Keyboard8grabCharFZa+0x12>
			{
				return ret;
  40ea86:	0f b6 45 fd          	movzbl -0x3(%rbp),%eax
  40ea8a:	88 45 ef             	mov    %al,-0x11(%rbp)
  40ea8d:	eb 04                	jmp    40ea93 <_D5libos8keyboard8Keyboard8grabCharFZa+0x48>
			}
		}

		return 0;
  40ea8f:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  40ea93:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
	}
  40ea97:	c9                   	leaveq 
  40ea98:	c3                   	retq   

000000000040ea99 <_D5libos8keyboard8Keyboard13bufferGrabKeyFZs>:
		Key.Minus: '_', Key.Equals: '+', Key.Quote: '~', Key.Apostrophe: '"',

		Key.Return: '\n', Key.Space: ' ',
	];

	short bufferGrabKey()
  40ea99:	55                   	push   %rbp
  40ea9a:	48 89 e5             	mov    %rsp,%rbp
	{
		if ((*kInfo.writePointer) != (*kInfo.readPointer) &&
  40ea9d:	48 8b 05 0c 0a 01 00 	mov    0x10a0c(%rip),%rax        # 41f4b0 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x10>
  40eaa4:	8b 10                	mov    (%rax),%edx
  40eaa6:	48 8b 05 0b 0a 01 00 	mov    0x10a0b(%rip),%rax        # 41f4b8 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x18>
  40eaad:	8b 00                	mov    (%rax),%eax
  40eaaf:	39 c2                	cmp    %eax,%edx
  40eab1:	74 3d                	je     40eaf0 <_D5libos8keyboard8Keyboard13bufferGrabKeyFZs+0x57>
  40eab3:	48 8b 05 fe 09 01 00 	mov    0x109fe(%rip),%rax        # 41f4b8 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x18>
  40eaba:	8b 00                	mov    (%rax),%eax
  40eabc:	89 c2                	mov    %eax,%edx
  40eabe:	8b 05 e4 09 01 00    	mov    0x109e4(%rip),%eax        # 41f4a8 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x8>
  40eac4:	39 c2                	cmp    %eax,%edx
  40eac6:	73 28                	jae    40eaf0 <_D5libos8keyboard8Keyboard13bufferGrabKeyFZs+0x57>
			((*kInfo.readPointer) < (kInfo.bufferLength)))
		{
			return kInfo.buffer[(*kInfo.readPointer)++];
  40eac8:	48 8b 0d d1 09 01 00 	mov    0x109d1(%rip),%rcx        # 41f4a0 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo>
  40eacf:	48 8b 35 e2 09 01 00 	mov    0x109e2(%rip),%rsi        # 41f4b8 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x18>
  40ead6:	8b 16                	mov    (%rsi),%edx
  40ead8:	48 63 c2             	movslq %edx,%rax
  40eadb:	48 01 c0             	add    %rax,%rax
  40eade:	48 8d 04 01          	lea    (%rcx,%rax,1),%rax
  40eae2:	0f b7 00             	movzwl (%rax),%eax
  40eae5:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
  40eae9:	8d 42 01             	lea    0x1(%rdx),%eax
  40eaec:	89 06                	mov    %eax,(%rsi)
  40eaee:	eb 1f                	jmp    40eb0f <_D5libos8keyboard8Keyboard13bufferGrabKeyFZs+0x76>
		}
		else
		{
			return kInfo.buffer[kInfo.bufferLength - 1];
  40eaf0:	48 8b 15 a9 09 01 00 	mov    0x109a9(%rip),%rdx        # 41f4a0 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo>
  40eaf7:	8b 05 ab 09 01 00    	mov    0x109ab(%rip),%eax        # 41f4a8 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x8>
  40eafd:	ff c8                	dec    %eax
  40eaff:	89 c0                	mov    %eax,%eax
  40eb01:	48 01 c0             	add    %rax,%rax
  40eb04:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40eb08:	0f b7 00             	movzwl (%rax),%eax
  40eb0b:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
  40eb0f:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
		}

		return 0;
	}
  40eb13:	c9                   	leaveq 
  40eb14:	c3                   	retq   
  40eb15:	90                   	nop    
  40eb16:	90                   	nop    
  40eb17:	90                   	nop    

000000000040eb18 <_D5libos7console7Console4initFZv>:

struct Console {

static:

	void init()
  40eb18:	55                   	push   %rbp
  40eb19:	48 89 e5             	mov    %rsp,%rbp
  40eb1c:	48 83 ec 20          	sub    $0x20,%rsp
	{
		cInfo = initConsole();
  40eb20:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  40eb24:	e8 8a ec ff ff       	callq  40d7b3 <_D4user7syscall11initConsoleFZS4user7syscall11ConsoleInfo>
  40eb29:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40eb2d:	48 89 05 2c 0a 01 00 	mov    %rax,0x10a2c(%rip)        # 41f560 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40eb34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40eb38:	48 89 05 29 0a 01 00 	mov    %rax,0x10a29(%rip)        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40eb3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40eb43:	48 89 05 26 0a 01 00 	mov    %rax,0x10a26(%rip)        # 41f570 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x10>
  40eb4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40eb4e:	48 89 05 23 0a 01 00 	mov    %rax,0x10a23(%rip)        # 41f578 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
	}
  40eb55:	c9                   	leaveq 
  40eb56:	c3                   	retq   

000000000040eb57 <_D5libos7console7Console11setPositionFiiZv>:

	void setPosition(int x, int y)
  40eb57:	55                   	push   %rbp
  40eb58:	48 89 e5             	mov    %rsp,%rbp
  40eb5b:	89 7d fc             	mov    %edi,-0x4(%rbp)
  40eb5e:	89 75 f8             	mov    %esi,-0x8(%rbp)
	{
		if ((x < 0 || x >= cInfo.xMax) &&
  40eb61:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40eb65:	78 0b                	js     40eb72 <_D5libos7console7Console11setPositionFiiZv+0x1b>
  40eb67:	8b 05 f3 09 01 00    	mov    0x109f3(%rip),%eax        # 41f560 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40eb6d:	39 45 fc             	cmp    %eax,-0x4(%rbp)
  40eb70:	7c 13                	jl     40eb85 <_D5libos7console7Console11setPositionFiiZv+0x2e>
  40eb72:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  40eb76:	78 1f                	js     40eb97 <_D5libos7console7Console11setPositionFiiZv+0x40>
  40eb78:	8b 05 e6 09 01 00    	mov    0x109e6(%rip),%eax        # 41f564 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x4>
  40eb7e:	39 45 f8             	cmp    %eax,-0x8(%rbp)
  40eb81:	7c 02                	jl     40eb85 <_D5libos7console7Console11setPositionFiiZv+0x2e>
			(y < 0 || y >= cInfo.yMax))
		{
			return;
  40eb83:	eb 12                	jmp    40eb97 <_D5libos7console7Console11setPositionFiiZv+0x40>
		}

		// XXX: LOCK!!!
		cInfo.xPos = x;
  40eb85:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40eb88:	89 05 da 09 01 00    	mov    %eax,0x109da(%rip)        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
		cInfo.yPos = y;
  40eb8e:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40eb91:	89 05 d5 09 01 00    	mov    %eax,0x109d5(%rip)        # 41f56c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
	}
  40eb97:	c9                   	leaveq 
  40eb98:	c3                   	retq   

000000000040eb99 <_D5libos7console7Console11getPositionFJiJiZv>:

	void getPosition(out int x, out int y)
  40eb99:	55                   	push   %rbp
  40eb9a:	48 89 e5             	mov    %rsp,%rbp
  40eb9d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40eba1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40eba5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40eba9:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  40ebaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40ebb3:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
	{
		x = cInfo.xPos;
  40ebb9:	8b 15 a9 09 01 00    	mov    0x109a9(%rip),%edx        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40ebbf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ebc3:	89 10                	mov    %edx,(%rax)
		y = cInfo.yPos;
  40ebc5:	8b 15 a1 09 01 00    	mov    0x109a1(%rip),%edx        # 41f56c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40ebcb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40ebcf:	89 10                	mov    %edx,(%rax)
	}
  40ebd1:	c9                   	leaveq 
  40ebd2:	c3                   	retq   

000000000040ebd3 <_D5libos7console7Console5clearFZv>:

	void clear()
  40ebd3:	55                   	push   %rbp
  40ebd4:	48 89 e5             	mov    %rsp,%rbp
	{
		// LOCK
		for (int i = 0; i < cInfo.xMax * cInfo.yMax * 2; i++)
  40ebd7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40ebde:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  40ebe1:	8b 15 79 09 01 00    	mov    0x10979(%rip),%edx        # 41f560 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40ebe7:	8b 05 77 09 01 00    	mov    0x10977(%rip),%eax        # 41f564 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x4>
  40ebed:	0f af c2             	imul   %edx,%eax
  40ebf0:	01 c0                	add    %eax,%eax
  40ebf2:	39 c1                	cmp    %eax,%ecx
  40ebf4:	0f 9c c0             	setl   %al
  40ebf7:	83 f0 01             	xor    $0x1,%eax
  40ebfa:	84 c0                	test   %al,%al
  40ebfc:	75 31                	jne    40ec2f <_D5libos7console7Console5clearFZv+0x5c>
		{
			volatile *(cInfo.buffer + i) = 0;
  40ebfe:	48 8b 15 73 09 01 00 	mov    0x10973(%rip),%rdx        # 41f578 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40ec05:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40ec08:	48 98                	cltq   
  40ec0a:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40ec0e:	c6 00 00             	movb   $0x0,(%rax)

			cInfo.xPos = 0;
  40ec11:	c7 05 4d 09 01 00 00 	movl   $0x0,0x1094d(%rip)        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40ec18:	00 00 00 
			cInfo.yPos = 0;
  40ec1b:	c7 05 47 09 01 00 00 	movl   $0x0,0x10947(%rip)        # 41f56c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40ec22:	00 00 00 
  40ec25:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40ec28:	ff c0                	inc    %eax
  40ec2a:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40ec2d:	eb af                	jmp    40ebde <_D5libos7console7Console5clearFZv+0xb>
		}
	}
  40ec2f:	c9                   	leaveq 
  40ec30:	c3                   	retq   

000000000040ec31 <_D5libos7console7Console11printStringFAaZv>:

	void printString(char[] str)
  40ec31:	55                   	push   %rbp
  40ec32:	48 89 e5             	mov    %rsp,%rbp
  40ec35:	48 83 ec 10          	sub    $0x10,%rsp
  40ec39:	48 89 f8             	mov    %rdi,%rax
  40ec3c:	48 89 f2             	mov    %rsi,%rdx
  40ec3f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40ec43:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
	{
		// LOCK
		putString(str);
  40ec47:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ec4b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ec4f:	e8 2b 02 00 00       	callq  40ee7f <_D5libos7console7Console9putStringFAaZv>
	}
  40ec54:	c9                   	leaveq 
  40ec55:	c3                   	retq   

000000000040ec56 <_D5libos7console7Console9printCharFaZv>:

	void printChar(char c)
  40ec56:	55                   	push   %rbp
  40ec57:	48 89 e5             	mov    %rsp,%rbp
  40ec5a:	48 83 ec 10          	sub    $0x10,%rsp
  40ec5e:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
	{
		// LOCK
		putChar(c);
  40ec62:	0f b6 7d ff          	movzbl -0x1(%rbp),%edi
  40ec66:	e8 6b 02 00 00       	callq  40eed6 <_D5libos7console7Console7putCharFaZv>
	}
  40ec6b:	c9                   	leaveq 
  40ec6c:	c3                   	retq   

000000000040ec6d <_D5libos7console7Console11resetColorsFZv>:

	void resetColors()
  40ec6d:	55                   	push   %rbp
  40ec6e:	48 89 e5             	mov    %rsp,%rbp
	{
		curColor = Color.LightGray;
  40ec71:	c6 05 14 e4 00 00 07 	movb   $0x7,0xe414(%rip)        # 41d08c <_D5libos7console7Console8curColorh>
	}
  40ec78:	c9                   	leaveq 
  40ec79:	c3                   	retq   

000000000040ec7a <_D5libos7console7Console12setForeColorFE5libos7console5ColorZv>:

	void setForeColor(Color newColor)
  40ec7a:	55                   	push   %rbp
  40ec7b:	48 89 e5             	mov    %rsp,%rbp
  40ec7e:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
	{
		curColor &= newColor | 0xF0;
  40ec82:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  40ec86:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
  40ec8b:	09 c2                	or     %eax,%edx
  40ec8d:	0f b6 05 f8 e3 00 00 	movzbl 0xe3f8(%rip),%eax        # 41d08c <_D5libos7console7Console8curColorh>
  40ec94:	21 d0                	and    %edx,%eax
  40ec96:	88 05 f0 e3 00 00    	mov    %al,0xe3f0(%rip)        # 41d08c <_D5libos7console7Console8curColorh>
	}
  40ec9c:	c9                   	leaveq 
  40ec9d:	c3                   	retq   

000000000040ec9e <_D5libos7console7Console12setBackColorFE5libos7console5ColorZv>:

	void setBackColor(Color newColor)
  40ec9e:	55                   	push   %rbp
  40ec9f:	48 89 e5             	mov    %rsp,%rbp
  40eca2:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
	{
		curColor &= (newColor << 4) | 0x0F;
  40eca6:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40ecaa:	c1 e0 04             	shl    $0x4,%eax
  40ecad:	89 c2                	mov    %eax,%edx
  40ecaf:	83 ca 0f             	or     $0xf,%edx
  40ecb2:	0f b6 05 d3 e3 00 00 	movzbl 0xe3d3(%rip),%eax        # 41d08c <_D5libos7console7Console8curColorh>
  40ecb9:	21 d0                	and    %edx,%eax
  40ecbb:	88 05 cb e3 00 00    	mov    %al,0xe3cb(%rip)        # 41d08c <_D5libos7console7Console8curColorh>
	}
  40ecc1:	c9                   	leaveq 
  40ecc2:	c3                   	retq   

000000000040ecc3 <_D5libos7console7Console9setColorsFE5libos7console5ColorE5libos7console5ColorZv>:

	void setColors(Color foreColor, Color backColor)
  40ecc3:	55                   	push   %rbp
  40ecc4:	48 89 e5             	mov    %rsp,%rbp
  40ecc7:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
  40eccb:	40 88 75 fe          	mov    %sil,-0x2(%rbp)
	{
		curColor = (foreColor & 0x0F) | (backColor << 4);
  40eccf:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40ecd3:	89 c2                	mov    %eax,%edx
  40ecd5:	83 e2 0f             	and    $0xf,%edx
  40ecd8:	0f b6 45 fe          	movzbl -0x2(%rbp),%eax
  40ecdc:	c1 e0 04             	shl    $0x4,%eax
  40ecdf:	09 d0                	or     %edx,%eax
  40ece1:	88 05 a5 e3 00 00    	mov    %al,0xe3a5(%rip)        # 41d08c <_D5libos7console7Console8curColorh>
	}
  40ece7:	c9                   	leaveq 
  40ece8:	c3                   	retq   

000000000040ece9 <_D5libos7console7Console6scrollFiZv>:

	void scroll(int amt)
  40ece9:	55                   	push   %rbp
  40ecea:	48 89 e5             	mov    %rsp,%rbp
  40eced:	48 83 ec 28          	sub    $0x28,%rsp
  40ecf1:	89 7d dc             	mov    %edi,-0x24(%rbp)
	{
		// do nothing for invalid line count
		if (amt <= 0) { return; }
  40ecf4:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  40ecf8:	0f 8e 7f 01 00 00    	jle    40ee7d <_D5libos7console7Console6scrollFiZv+0x194>

		// just clear if it wants to scroll everything
		if (amt >= cInfo.yMax) { clear(); return; }
  40ecfe:	8b 05 60 08 01 00    	mov    0x10860(%rip),%eax        # 41f564 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x4>
  40ed04:	39 45 dc             	cmp    %eax,-0x24(%rbp)
  40ed07:	7c 0a                	jl     40ed13 <_D5libos7console7Console6scrollFiZv+0x2a>
  40ed09:	e8 c5 fe ff ff       	callq  40ebd3 <_D5libos7console7Console5clearFZv>
  40ed0e:	e9 6a 01 00 00       	jmpq   40ee7d <_D5libos7console7Console6scrollFiZv+0x194>

		// go through and copy the proper amount to increase
		// the lines on the screen
		int cury = 0;
  40ed13:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
		int offset1 = 0 * cInfo.xMax;
  40ed1a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
		int offset2 = amt * cInfo.xMax;
  40ed21:	8b 05 39 08 01 00    	mov    0x10839(%rip),%eax        # 41f560 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40ed27:	8b 55 dc             	mov    -0x24(%rbp),%edx
  40ed2a:	0f af c2             	imul   %edx,%eax
  40ed2d:	89 45 ec             	mov    %eax,-0x14(%rbp)

		for(; cury <= cInfo.yMax - amt; cury++)
  40ed30:	8b 05 2e 08 01 00    	mov    0x1082e(%rip),%eax        # 41f564 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x4>
  40ed36:	2b 45 dc             	sub    -0x24(%rbp),%eax
  40ed39:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  40ed3c:	0f 9e c0             	setle  %al
  40ed3f:	83 f0 01             	xor    $0x1,%eax
  40ed42:	84 c0                	test   %al,%al
  40ed44:	0f 85 9d 00 00 00    	jne    40ede7 <_D5libos7console7Console6scrollFiZv+0xfe>
		{
			for (int curx = 0; curx < cInfo.xMax; curx++)
  40ed4a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  40ed51:	8b 05 09 08 01 00    	mov    0x10809(%rip),%eax        # 41f560 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40ed57:	39 45 f8             	cmp    %eax,-0x8(%rbp)
  40ed5a:	0f 9c c0             	setl   %al
  40ed5d:	83 f0 01             	xor    $0x1,%eax
  40ed60:	84 c0                	test   %al,%al
  40ed62:	75 72                	jne    40edd6 <_D5libos7console7Console6scrollFiZv+0xed>
			{
				*(cInfo.buffer + (curx + offset1) * 2) =
  40ed64:	48 8b 15 0d 08 01 00 	mov    0x1080d(%rip),%rdx        # 41f578 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40ed6b:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40ed6e:	03 45 f8             	add    -0x8(%rbp),%eax
  40ed71:	01 c0                	add    %eax,%eax
  40ed73:	48 98                	cltq   
  40ed75:	48 01 c2             	add    %rax,%rdx
  40ed78:	48 8b 0d f9 07 01 00 	mov    0x107f9(%rip),%rcx        # 41f578 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40ed7f:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40ed82:	03 45 f8             	add    -0x8(%rbp),%eax
  40ed85:	03 45 ec             	add    -0x14(%rbp),%eax
  40ed88:	01 c0                	add    %eax,%eax
  40ed8a:	48 98                	cltq   
  40ed8c:	48 8d 04 01          	lea    (%rcx,%rax,1),%rax
  40ed90:	0f b6 00             	movzbl (%rax),%eax
  40ed93:	88 02                	mov    %al,(%rdx)
					*(cInfo.buffer + (curx + offset1 + offset2) * 2);
				*(cInfo.buffer + (curx + offset1) * 2 + 1) =
  40ed95:	48 8b 15 dc 07 01 00 	mov    0x107dc(%rip),%rdx        # 41f578 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40ed9c:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40ed9f:	03 45 f8             	add    -0x8(%rbp),%eax
  40eda2:	01 c0                	add    %eax,%eax
  40eda4:	48 98                	cltq   
  40eda6:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40edaa:	48 8d 48 01          	lea    0x1(%rax),%rcx
  40edae:	48 8b 15 c3 07 01 00 	mov    0x107c3(%rip),%rdx        # 41f578 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40edb5:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40edb8:	03 45 f8             	add    -0x8(%rbp),%eax
  40edbb:	03 45 ec             	add    -0x14(%rbp),%eax
  40edbe:	01 c0                	add    %eax,%eax
  40edc0:	48 98                	cltq   
  40edc2:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40edc6:	48 ff c0             	inc    %rax
  40edc9:	0f b6 00             	movzbl (%rax),%eax
  40edcc:	88 01                	mov    %al,(%rcx)
  40edce:	ff 45 f8             	incl   -0x8(%rbp)
  40edd1:	e9 7b ff ff ff       	jmpq   40ed51 <_D5libos7console7Console6scrollFiZv+0x68>
					*(cInfo.buffer + (curx + offset1 + offset2) * 2 + 1);
			}

			offset1 += cInfo.xMax;
  40edd6:	8b 05 84 07 01 00    	mov    0x10784(%rip),%eax        # 41f560 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40eddc:	01 45 f0             	add    %eax,-0x10(%rbp)
  40eddf:	ff 45 f4             	incl   -0xc(%rbp)
  40ede2:	e9 49 ff ff ff       	jmpq   40ed30 <_D5libos7console7Console6scrollFiZv+0x47>
		}

		for(; cury <= cInfo.yMax; cury++)
  40ede7:	8b 05 77 07 01 00    	mov    0x10777(%rip),%eax        # 41f564 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x4>
  40eded:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  40edf0:	0f 9e c0             	setle  %al
  40edf3:	83 f0 01             	xor    $0x1,%eax
  40edf6:	84 c0                	test   %al,%al
  40edf8:	75 60                	jne    40ee5a <_D5libos7console7Console6scrollFiZv+0x171>
		{
			for (int curx = 0; curx < cInfo.xMax; curx++)
  40edfa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40ee01:	8b 05 59 07 01 00    	mov    0x10759(%rip),%eax        # 41f560 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40ee07:	39 45 fc             	cmp    %eax,-0x4(%rbp)
  40ee0a:	0f 9c c0             	setl   %al
  40ee0d:	83 f0 01             	xor    $0x1,%eax
  40ee10:	84 c0                	test   %al,%al
  40ee12:	75 38                	jne    40ee4c <_D5libos7console7Console6scrollFiZv+0x163>
			{
				*(cInfo.buffer + (curx + offset1) * 2) = 0x00;
  40ee14:	48 8b 15 5d 07 01 00 	mov    0x1075d(%rip),%rdx        # 41f578 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40ee1b:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40ee1e:	03 45 fc             	add    -0x4(%rbp),%eax
  40ee21:	01 c0                	add    %eax,%eax
  40ee23:	48 98                	cltq   
  40ee25:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40ee29:	c6 00 00             	movb   $0x0,(%rax)
				*(cInfo.buffer + (curx + offset1) * 2 + 1) = 0x00;
  40ee2c:	48 8b 15 45 07 01 00 	mov    0x10745(%rip),%rdx        # 41f578 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40ee33:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40ee36:	03 45 fc             	add    -0x4(%rbp),%eax
  40ee39:	01 c0                	add    %eax,%eax
  40ee3b:	48 98                	cltq   
  40ee3d:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40ee41:	48 ff c0             	inc    %rax
  40ee44:	c6 00 00             	movb   $0x0,(%rax)
  40ee47:	ff 45 fc             	incl   -0x4(%rbp)
  40ee4a:	eb b5                	jmp    40ee01 <_D5libos7console7Console6scrollFiZv+0x118>
			}

			offset1 += cInfo.xMax;
  40ee4c:	8b 05 0e 07 01 00    	mov    0x1070e(%rip),%eax        # 41f560 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40ee52:	01 45 f0             	add    %eax,-0x10(%rbp)
  40ee55:	ff 45 f4             	incl   -0xc(%rbp)
  40ee58:	eb 8d                	jmp    40ede7 <_D5libos7console7Console6scrollFiZv+0xfe>
		}

		cInfo.yPos -= amt;
  40ee5a:	8b 05 0c 07 01 00    	mov    0x1070c(%rip),%eax        # 41f56c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40ee60:	2b 45 dc             	sub    -0x24(%rbp),%eax
  40ee63:	89 05 03 07 01 00    	mov    %eax,0x10703(%rip)        # 41f56c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>

		if (cInfo.yPos < 0)
  40ee69:	8b 05 fd 06 01 00    	mov    0x106fd(%rip),%eax        # 41f56c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40ee6f:	85 c0                	test   %eax,%eax
  40ee71:	79 0a                	jns    40ee7d <_D5libos7console7Console6scrollFiZv+0x194>
		{
			cInfo.yPos = 0;
  40ee73:	c7 05 ef 06 01 00 00 	movl   $0x0,0x106ef(%rip)        # 41f56c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40ee7a:	00 00 00 
		}
	}
  40ee7d:	c9                   	leaveq 
  40ee7e:	c3                   	retq   

000000000040ee7f <_D5libos7console7Console9putStringFAaZv>:

	ubyte curColor = Color.LightGray;


	// non-locked functions
	void putString(char[] str)
  40ee7f:	55                   	push   %rbp
  40ee80:	48 89 e5             	mov    %rsp,%rbp
  40ee83:	48 83 ec 30          	sub    $0x30,%rsp
  40ee87:	48 89 f8             	mov    %rdi,%rax
  40ee8a:	48 89 f2             	mov    %rsi,%rdx
  40ee8d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40ee91:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{
		foreach(chr; str)
  40ee95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ee99:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40ee9d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40eea1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40eea5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40eea9:	48 03 45 d8          	add    -0x28(%rbp),%rax
  40eead:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40eeb1:	0f 95 c0             	setne  %al
  40eeb4:	83 f0 01             	xor    $0x1,%eax
  40eeb7:	84 c0                	test   %al,%al
  40eeb9:	75 19                	jne    40eed4 <_D5libos7console7Console9putStringFAaZv+0x55>
  40eebb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40eebf:	0f b6 00             	movzbl (%rax),%eax
  40eec2:	88 45 ff             	mov    %al,-0x1(%rbp)
		{
			printChar(chr);
  40eec5:	0f b6 7d ff          	movzbl -0x1(%rbp),%edi
  40eec9:	e8 88 fd ff ff       	callq  40ec56 <_D5libos7console7Console9printCharFaZv>
  40eece:	48 ff 45 f0          	incq   -0x10(%rbp)
  40eed2:	eb d1                	jmp    40eea5 <_D5libos7console7Console9putStringFAaZv+0x26>
		}
	}
  40eed4:	c9                   	leaveq 
  40eed5:	c3                   	retq   

000000000040eed6 <_D5libos7console7Console7putCharFaZv>:

	void putChar(char c)
  40eed6:	55                   	push   %rbp
  40eed7:	48 89 e5             	mov    %rsp,%rbp
  40eeda:	48 83 ec 08          	sub    $0x8,%rsp
  40eede:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
	{
		if (c == '\n' || c == '\r')
  40eee2:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40eee6:	0f b6 c0             	movzbl %al,%eax
  40eee9:	83 f8 0a             	cmp    $0xa,%eax
  40eeec:	74 0c                	je     40eefa <_D5libos7console7Console7putCharFaZv+0x24>
  40eeee:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40eef2:	0f b6 c0             	movzbl %al,%eax
  40eef5:	83 f8 0d             	cmp    $0xd,%eax
  40eef8:	75 11                	jne    40ef0b <_D5libos7console7Console7putCharFaZv+0x35>
		{
			// this will force a new line
			cInfo.xPos = cInfo.xMax;
  40eefa:	8b 05 60 06 01 00    	mov    0x10660(%rip),%eax        # 41f560 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40ef00:	89 05 62 06 01 00    	mov    %eax,0x10662(%rip)        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
		}
	}

	void putChar(char c)
	{
		if (c == '\n' || c == '\r')
  40ef06:	e9 93 00 00 00       	jmpq   40ef9e <_D5libos7console7Console7putCharFaZv+0xc8>
		{
			// this will force a new line
			cInfo.xPos = cInfo.xMax;
		}
		else if (c == '\t')
  40ef0b:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40ef0f:	0f b6 c0             	movzbl %al,%eax
  40ef12:	83 f8 09             	cmp    $0x9,%eax
  40ef15:	75 11                	jne    40ef28 <_D5libos7console7Console7putCharFaZv+0x52>
		{
			// increment by the tab length
			cInfo.xPos += Tabstop;
  40ef17:	8b 05 4b 06 01 00    	mov    0x1064b(%rip),%eax        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40ef1d:	83 c0 04             	add    $0x4,%eax
  40ef20:	89 05 42 06 01 00    	mov    %eax,0x10642(%rip)        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40ef26:	eb 76                	jmp    40ef9e <_D5libos7console7Console7putCharFaZv+0xc8>
		}
		else
		{
			volatile *(cInfo.buffer + (cInfo.xPos + (cInfo.yPos * cInfo.xMax)) * 2) = c & 0xFF;
  40ef28:	48 8b 35 49 06 01 00 	mov    0x10649(%rip),%rsi        # 41f578 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40ef2f:	8b 0d 33 06 01 00    	mov    0x10633(%rip),%ecx        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40ef35:	8b 15 31 06 01 00    	mov    0x10631(%rip),%edx        # 41f56c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40ef3b:	8b 05 1f 06 01 00    	mov    0x1061f(%rip),%eax        # 41f560 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40ef41:	0f af c2             	imul   %edx,%eax
  40ef44:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  40ef47:	01 c0                	add    %eax,%eax
  40ef49:	48 98                	cltq   
  40ef4b:	48 8d 0c 06          	lea    (%rsi,%rax,1),%rcx
  40ef4f:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  40ef53:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  40ef58:	21 d0                	and    %edx,%eax
  40ef5a:	88 01                	mov    %al,(%rcx)
			volatile *(cInfo.buffer + (cInfo.xPos + (cInfo.yPos * cInfo.xMax)) * 2 + 1) = curColor;
  40ef5c:	48 8b 35 15 06 01 00 	mov    0x10615(%rip),%rsi        # 41f578 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40ef63:	8b 0d ff 05 01 00    	mov    0x105ff(%rip),%ecx        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40ef69:	8b 15 fd 05 01 00    	mov    0x105fd(%rip),%edx        # 41f56c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40ef6f:	8b 05 eb 05 01 00    	mov    0x105eb(%rip),%eax        # 41f560 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40ef75:	0f af c2             	imul   %edx,%eax
  40ef78:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  40ef7b:	01 c0                	add    %eax,%eax
  40ef7d:	48 98                	cltq   
  40ef7f:	48 8d 04 06          	lea    (%rsi,%rax,1),%rax
  40ef83:	48 8d 50 01          	lea    0x1(%rax),%rdx
  40ef87:	0f b6 05 fe e0 00 00 	movzbl 0xe0fe(%rip),%eax        # 41d08c <_D5libos7console7Console8curColorh>
  40ef8e:	88 02                	mov    %al,(%rdx)

			cInfo.xPos++;
  40ef90:	8b 05 d2 05 01 00    	mov    0x105d2(%rip),%eax        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40ef96:	ff c0                	inc    %eax
  40ef98:	89 05 ca 05 01 00    	mov    %eax,0x105ca(%rip)        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
		}

		if (cInfo.xPos >= cInfo.xMax)
  40ef9e:	8b 15 c4 05 01 00    	mov    0x105c4(%rip),%edx        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40efa4:	8b 05 b6 05 01 00    	mov    0x105b6(%rip),%eax        # 41f560 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40efaa:	39 c2                	cmp    %eax,%edx
  40efac:	7c 32                	jl     40efe0 <_D5libos7console7Console7putCharFaZv+0x10a>
		{
			cInfo.xPos = 0;
  40efae:	c7 05 b0 05 01 00 00 	movl   $0x0,0x105b0(%rip)        # 41f568 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40efb5:	00 00 00 
			cInfo.yPos ++;
  40efb8:	8b 05 ae 05 01 00    	mov    0x105ae(%rip),%eax        # 41f56c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40efbe:	ff c0                	inc    %eax
  40efc0:	89 05 a6 05 01 00    	mov    %eax,0x105a6(%rip)        # 41f56c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>

			if (cInfo.yPos >= cInfo.yMax)
  40efc6:	8b 15 a0 05 01 00    	mov    0x105a0(%rip),%edx        # 41f56c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40efcc:	8b 05 92 05 01 00    	mov    0x10592(%rip),%eax        # 41f564 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x4>
  40efd2:	39 c2                	cmp    %eax,%edx
  40efd4:	7c 0a                	jl     40efe0 <_D5libos7console7Console7putCharFaZv+0x10a>
			{
				scroll(1);
  40efd6:	bf 01 00 00 00       	mov    $0x1,%edi
  40efdb:	e8 09 fd ff ff       	callq  40ece9 <_D5libos7console7Console6scrollFiZv>
			}
		}
	}
  40efe0:	c9                   	leaveq 
  40efe1:	c3                   	retq   
