
application/intfic:     file format elf64-x86-64

Disassembly of section .text:

0000000000400078 <_Dmain>:
import libos.keyboard;
import libos.console;

char[] prompt = "$> ";

int main() {
  400078:	55                   	push   %rbp
  400079:	48 89 e5             	mov    %rsp,%rbp
  40007c:	48 81 ec 00 03 00 00 	sub    $0x300,%rsp

  yield(); //lol
  400083:	e8 54 d9 00 00       	callq  40d9dc <_D4user7syscall5yieldFZv>

  // init the keyboard libOS
  Keyboard.init();
  400088:	e8 c7 ea 00 00       	callq  40eb54 <_D5libos8keyboard8Keyboard4initFZv>
  Console.init();
  40008d:	e8 ea ed 00 00       	callq  40ee7c <_D5libos7console7Console4initFZv>

  //Console.clear();
  Console.setColors(Color.White, Color.Black);
  400092:	be 00 00 00 00       	mov    $0x0,%esi
  400097:	bf 0f 00 00 00       	mov    $0xf,%edi
  40009c:	e8 86 ef 00 00       	callq  40f027 <_D5libos7console7Console9setColorsFE5libos7console5ColorE5libos7console5ColorZv>

  // print the initial text
  Console.printString("intfic: Interactive Fiction for XOmB\n\n");
  4000a1:	48 c7 85 30 ff ff ff 	movq   $0x26,-0xd0(%rbp)
  4000a8:	26 00 00 00 
  4000ac:	48 c7 85 38 ff ff ff 	movq   $0x40f3a0,-0xc8(%rbp)
  4000b3:	a0 f3 40 00 
  4000b7:	48 8b bd 30 ff ff ff 	mov    -0xd0(%rbp),%rdi
  4000be:	48 8b b5 38 ff ff ff 	mov    -0xc8(%rbp),%rsi
  4000c5:	e8 cb ee 00 00       	callq  40ef95 <_D5libos7console7Console11printStringFAaZv>

  // print the prompt
  print(prompt);
  4000ca:	48 8b 15 b7 9a 01 00 	mov    0x19ab7(%rip),%rdx        # 419b88 <_D11application3xsh6promptAa+0x8>
  4000d1:	48 8b 35 a8 9a 01 00 	mov    0x19aa8(%rip),%rsi        # 419b80 <_D11application3xsh6promptAa>
  4000d8:	48 c7 c7 a0 9b 41 00 	mov    $0x419ba0,%rdi
  4000df:	b8 00 00 00 00       	mov    $0x0,%eax
  4000e4:	e8 17 e0 00 00       	callq  40e100 <_D4user7basicio5printFYv>

  // for grabing the key
  short keyCode;
  4000e9:	66 c7 45 de 00 00    	movw   $0x0,-0x22(%rbp)
  char key;
  4000ef:	c6 45 dd ff          	movb   $0xff,-0x23(%rbp)

  char[1] echoStr;
  4000f3:	48 c7 85 40 ff ff ff 	movq   $0x1,-0xc0(%rbp)
  4000fa:	01 00 00 00 
  4000fe:	48 8d 85 2f ff ff ff 	lea    -0xd1(%rbp),%rax
  400105:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  40010c:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  400113:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  400117:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40011e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  400122:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  400127:	0f 95 c0             	setne  %al
  40012a:	83 f0 01             	xor    $0x1,%eax
  40012d:	84 c0                	test   %al,%al
  40012f:	75 11                	jne    400142 <_Dmain+0xca>
  400131:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  400135:	c6 00 ff             	movb   $0xff,(%rax)
  400138:	48 ff 45 e0          	incq   -0x20(%rbp)
  40013c:	48 ff 4d e8          	decq   -0x18(%rbp)
  400140:	eb e0                	jmp    400122 <_Dmain+0xaa>

  char[512] lineBuffer;
  400142:	48 c7 85 50 ff ff ff 	movq   $0x200,-0xb0(%rbp)
  400149:	00 02 00 00 
  40014d:	48 8d 85 20 fd ff ff 	lea    -0x2e0(%rbp),%rax
  400154:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  40015b:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  400162:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  400166:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  40016d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  400171:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  400176:	0f 95 c0             	setne  %al
  400179:	83 f0 01             	xor    $0x1,%eax
  40017c:	84 c0                	test   %al,%al
  40017e:	75 11                	jne    400191 <_Dmain+0x119>
  400180:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400184:	c6 00 ff             	movb   $0xff,(%rax)
  400187:	48 ff 45 f0          	incq   -0x10(%rbp)
  40018b:	48 ff 4d f8          	decq   -0x8(%rbp)
  40018f:	eb e0                	jmp    400171 <_Dmain+0xf9>
  int lineBufferPos = 0;
  400191:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)

  void* buff;
  400198:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  40019f:	00 
  4001a0:	eb 00                	jmp    4001a2 <_Dmain+0x12a>

  while(true) {
  4001a2:	b8 00 00 00 00       	mov    $0x0,%eax
  4001a7:	84 c0                	test   %al,%al
  4001a9:	0f 85 36 02 00 00    	jne    4003e5 <_Dmain+0x36d>
    keyCode = Keyboard.grabKey();
  4001af:	e8 df e9 00 00       	callq  40eb93 <_D5libos8keyboard8Keyboard7grabKeyFZs>
  4001b4:	66 89 45 de          	mov    %ax,-0x22(%rbp)

    if(keyCode != Key.Null)
  4001b8:	0f bf 45 de          	movswl -0x22(%rbp),%eax
  4001bc:	85 c0                	test   %eax,%eax
  4001be:	74 e2                	je     4001a2 <_Dmain+0x12a>
    {
      key = Keyboard.translateCode(keyCode);
  4001c0:	0f bf 7d de          	movswl -0x22(%rbp),%edi
  4001c4:	e8 0a eb 00 00       	callq  40ecd3 <_D5libos8keyboard8Keyboard13translateCodeFsZa>
  4001c9:	88 45 dd             	mov    %al,-0x23(%rbp)

      if (key != '\0')
  4001cc:	0f b6 45 dd          	movzbl -0x23(%rbp),%eax
  4001d0:	85 c0                	test   %eax,%eax
  4001d2:	74 ce                	je     4001a2 <_Dmain+0x12a>
      {
        // echo the character (should allow this to be turned off by forked apps)
        echoStr[0] = key;
  4001d4:	b8 00 00 00 00       	mov    $0x0,%eax
  4001d9:	48 89 c2             	mov    %rax,%rdx
  4001dc:	48 8d 85 2f ff ff ff 	lea    -0xd1(%rbp),%rax
  4001e3:	48 01 d0             	add    %rdx,%rax
  4001e6:	0f b6 55 dd          	movzbl -0x23(%rbp),%edx
  4001ea:	88 10                	mov    %dl,(%rax)
        print(echoStr);
  4001ec:	48 c7 85 60 ff ff ff 	movq   $0x1,-0xa0(%rbp)
  4001f3:	01 00 00 00 
  4001f7:	48 8d 85 2f ff ff ff 	lea    -0xd1(%rbp),%rax
  4001fe:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  400205:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  40020c:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  400213:	48 c7 c7 a0 9b 41 00 	mov    $0x419ba0,%rdi
  40021a:	b8 00 00 00 00       	mov    $0x0,%eax
  40021f:	e8 dc de 00 00       	callq  40e100 <_D4user7basicio5printFYv>

        if (key == '\n')
  400224:	0f b6 45 dd          	movzbl -0x23(%rbp),%eax
  400228:	83 f8 0a             	cmp    $0xa,%eax
  40022b:	0f 85 2e 01 00 00    	jne    40035f <_Dmain+0x2e7>
        {
          // interpret line
          if (lineBufferPos > 0)
  400231:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  400235:	0f 8e f9 00 00 00    	jle    400334 <_Dmain+0x2bc>
              case "yield":
                yield();
                break;
              default:
              print("Error: Unknown Command\n");
              break;
  40023b:	8b 45 d8             	mov    -0x28(%rbp),%eax
  40023e:	48 98                	cltq   
  400240:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  400246:	77 0e                	ja     400256 <_Dmain+0x1de>
  400248:	8b 45 d8             	mov    -0x28(%rbp),%eax
  40024b:	48 98                	cltq   
  40024d:	48 89 85 00 fd ff ff 	mov    %rax,-0x300(%rbp)
  400254:	eb 22                	jmp    400278 <_Dmain+0x200>
  400256:	48 c7 45 80 14 00 00 	movq   $0x14,-0x80(%rbp)
  40025d:	00 
  40025e:	48 c7 45 88 c7 f3 40 	movq   $0x40f3c7,-0x78(%rbp)
  400265:	00 
  400266:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  40026a:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  40026e:	ba 3b 00 00 00       	mov    $0x3b,%edx
  400273:	e8 61 aa 00 00       	callq  40acd9 <_d_array_bounds>
  400278:	48 8b 85 00 fd ff ff 	mov    -0x300(%rbp),%rax
  40027f:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  400286:	48 8d 85 20 fd ff ff 	lea    -0x2e0(%rbp),%rax
  40028d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  400294:	48 c7 45 90 02 00 00 	movq   $0x2,-0x70(%rbp)
  40029b:	00 
  40029c:	48 c7 45 98 80 f3 40 	movq   $0x40f380,-0x68(%rbp)
  4002a3:	00 
  4002a4:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  4002ab:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
  4002b2:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  4002b6:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  4002ba:	e8 e9 97 00 00       	callq  409aa8 <_d_switch_string>
  4002bf:	89 85 0c fd ff ff    	mov    %eax,-0x2f4(%rbp)
  4002c5:	83 bd 0c fd ff ff 00 	cmpl   $0x0,-0x2f4(%rbp)
  4002cc:	74 36                	je     400304 <_Dmain+0x28c>
  4002ce:	83 bd 0c fd ff ff 01 	cmpl   $0x1,-0x2f4(%rbp)
  4002d5:	74 02                	je     4002d9 <_Dmain+0x261>
  4002d7:	eb 32                	jmp    40030b <_Dmain+0x293>
          if (lineBufferPos > 0)
          {
            switch (lineBuffer[0..lineBufferPos])
            {
              case "secret":
                print("lol\n");
  4002d9:	48 c7 45 a0 04 00 00 	movq   $0x4,-0x60(%rbp)
  4002e0:	00 
  4002e1:	48 c7 45 a8 dc f3 40 	movq   $0x40f3dc,-0x58(%rbp)
  4002e8:	00 
  4002e9:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  4002ed:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  4002f1:	48 c7 c7 a0 9b 41 00 	mov    $0x419ba0,%rdi
  4002f8:	b8 00 00 00 00       	mov    $0x0,%eax
  4002fd:	e8 fe dd 00 00       	callq  40e100 <_D4user7basicio5printFYv>
              break;
  400302:	eb 30                	jmp    400334 <_Dmain+0x2bc>
              case "yield":
                yield();
  400304:	e8 d3 d6 00 00       	callq  40d9dc <_D4user7syscall5yieldFZv>
                break;
  400309:	eb 29                	jmp    400334 <_Dmain+0x2bc>
              default:
              print("Error: Unknown Command\n");
  40030b:	48 c7 45 b0 17 00 00 	movq   $0x17,-0x50(%rbp)
  400312:	00 
  400313:	48 c7 45 b8 e1 f3 40 	movq   $0x40f3e1,-0x48(%rbp)
  40031a:	00 
  40031b:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40031f:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  400323:	48 c7 c7 a0 9b 41 00 	mov    $0x419ba0,%rdi
  40032a:	b8 00 00 00 00       	mov    $0x0,%eax
  40032f:	e8 cc dd 00 00       	callq  40e100 <_D4user7basicio5printFYv>
              break;
            }
          }

          lineBufferPos = 0;
  400334:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)

          // echo next line
          print(prompt);
  40033b:	48 8b 15 46 98 01 00 	mov    0x19846(%rip),%rdx        # 419b88 <_D11application3xsh6promptAa+0x8>
  400342:	48 8b 35 37 98 01 00 	mov    0x19837(%rip),%rsi        # 419b80 <_D11application3xsh6promptAa>
  400349:	48 c7 c7 a0 9b 41 00 	mov    $0x419ba0,%rdi
  400350:	b8 00 00 00 00       	mov    $0x0,%eax
  400355:	e8 a6 dd 00 00       	callq  40e100 <_D4user7basicio5printFYv>
  40035a:	e9 43 fe ff ff       	jmpq   4001a2 <_Dmain+0x12a>
        }
        else
        {
          // add to the line buffer
          // note, if we go over the max, the line will be misinterpreted
          lineBuffer[lineBufferPos++] = key;
  40035f:	8b 45 d8             	mov    -0x28(%rbp),%eax
  400362:	48 98                	cltq   
  400364:	48 89 85 18 fd ff ff 	mov    %rax,-0x2e8(%rbp)
  40036b:	48 81 bd 18 fd ff ff 	cmpq   $0x1ff,-0x2e8(%rbp)
  400372:	ff 01 00 00 
  400376:	0f 96 c0             	setbe  %al
  400379:	ff 45 d8             	incl   -0x28(%rbp)
  40037c:	84 c0                	test   %al,%al
  40037e:	74 10                	je     400390 <_Dmain+0x318>
  400380:	48 8b 85 18 fd ff ff 	mov    -0x2e8(%rbp),%rax
  400387:	48 89 85 10 fd ff ff 	mov    %rax,-0x2f0(%rbp)
  40038e:	eb 22                	jmp    4003b2 <_Dmain+0x33a>
  400390:	48 c7 45 c0 14 00 00 	movq   $0x14,-0x40(%rbp)
  400397:	00 
  400398:	48 c7 45 c8 c7 f3 40 	movq   $0x40f3c7,-0x38(%rbp)
  40039f:	00 
  4003a0:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4003a4:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4003a8:	ba 52 00 00 00       	mov    $0x52,%edx
  4003ad:	e8 27 a9 00 00       	callq  40acd9 <_d_array_bounds>
  4003b2:	48 8b 85 10 fd ff ff 	mov    -0x2f0(%rbp),%rax
  4003b9:	48 89 c2             	mov    %rax,%rdx
  4003bc:	48 8d 85 20 fd ff ff 	lea    -0x2e0(%rbp),%rax
  4003c3:	48 01 d0             	add    %rdx,%rax
  4003c6:	0f b6 55 dd          	movzbl -0x23(%rbp),%edx
  4003ca:	88 10                	mov    %dl,(%rax)
          if (lineBufferPos == lineBuffer.length) { lineBufferPos--; }
  4003cc:	8b 45 d8             	mov    -0x28(%rbp),%eax
  4003cf:	48 98                	cltq   
  4003d1:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  4003d7:	0f 85 c5 fd ff ff    	jne    4001a2 <_Dmain+0x12a>
  4003dd:	ff 4d d8             	decl   -0x28(%rbp)
  void* buff;

  while(true) {
    keyCode = Keyboard.grabKey();

    if(keyCode != Key.Null)
  4003e0:	e9 bd fd ff ff       	jmpq   4001a2 <_Dmain+0x12a>
        }
      }
    }
  }

  exit(0);
  4003e5:	bf 00 00 00 00       	mov    $0x0,%edi
  4003ea:	e8 81 d5 00 00       	callq  40d970 <_D4user7syscall4exitFlZv>

  //d is awesome
  return 0;
  4003ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
  4003f4:	c9                   	leaveq 
  4003f5:	c3                   	retq   
  4003f6:	90                   	nop    
  4003f7:	90                   	nop    

00000000004003f8 <_D3std8typeinfo5ti_AC11TypeInfo_AC7getHashMFPvZm>:

// Object[]

class TypeInfo_AC : TypeInfo
{
    hash_t getHash(void *p)
  4003f8:	55                   	push   %rbp
  4003f9:	48 89 e5             	mov    %rsp,%rbp
  4003fc:	48 83 ec 50          	sub    $0x50,%rsp
  400400:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  400404:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  400408:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  40040c:	e8 ff 8d 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {	Object[] s = *cast(Object[]*)p;
  400411:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  400415:	48 8b 02             	mov    (%rdx),%rax
  400418:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40041c:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400420:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	hash_t hash = 0;
  400424:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40042b:	00 

	foreach (Object o; s)
  40042c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400430:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  400434:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  400438:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40043c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  400440:	48 c1 e0 03          	shl    $0x3,%rax
  400444:	48 03 45 b8          	add    -0x48(%rbp),%rax
  400448:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40044c:	0f 95 c0             	setne  %al
  40044f:	83 f0 01             	xor    $0x1,%eax
  400452:	84 c0                	test   %al,%al
  400454:	75 31                	jne    400487 <_D3std8typeinfo5ti_AC11TypeInfo_AC7getHashMFPvZm+0x8f>
  400456:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40045a:	48 8b 00             	mov    (%rax),%rax
  40045d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	{
	    if (o)
  400461:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  400466:	74 18                	je     400480 <_D3std8typeinfo5ti_AC11TypeInfo_AC7getHashMFPvZm+0x88>
		hash += o.toHash();
  400468:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40046c:	48 8b 00             	mov    (%rax),%rax
  40046f:	48 83 c0 10          	add    $0x10,%rax
  400473:	48 8b 00             	mov    (%rax),%rax
  400476:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40047a:	ff d0                	callq  *%rax
  40047c:	48 01 45 e8          	add    %rax,-0x18(%rbp)
    {	Object[] s = *cast(Object[]*)p;
	hash_t hash = 0;

	foreach (Object o; s)
	{
	    if (o)
  400480:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
  400485:	eb b5                	jmp    40043c <_D3std8typeinfo5ti_AC11TypeInfo_AC7getHashMFPvZm+0x44>
		hash += o.toHash();
	}
	return hash;
  400487:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  40048b:	c9                   	leaveq 
  40048c:	c3                   	retq   

000000000040048d <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  40048d:	55                   	push   %rbp
  40048e:	48 89 e5             	mov    %rsp,%rbp
  400491:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  400498:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40049c:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  4004a0:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  4004a4:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  4004a8:	e8 63 8d 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	Object[] s1 = *cast(Object[]*)p1;
  4004ad:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4004b1:	48 8b 02             	mov    (%rdx),%rax
  4004b4:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  4004b8:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4004bc:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	Object[] s2 = *cast(Object[]*)p2;
  4004c0:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4004c4:	48 8b 02             	mov    (%rdx),%rax
  4004c7:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4004cb:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4004cf:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

	if (s1.length == s2.length)
  4004d3:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4004d7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4004db:	48 39 c2             	cmp    %rax,%rdx
  4004de:	0f 85 3d 01 00 00    	jne    400621 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x194>
	{
	    for (size_t u = 0; u < s1.length; u++)
  4004e4:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4004eb:	00 
  4004ec:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4004f0:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  4004f4:	0f 92 c0             	setb   %al
  4004f7:	83 f0 01             	xor    $0x1,%eax
  4004fa:	84 c0                	test   %al,%al
  4004fc:	0f 85 16 01 00 00    	jne    400618 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x18b>
	    {	Object o1 = s1[u];
  400502:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  400506:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40050d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400511:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  400515:	73 0d                	jae    400524 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x97>
  400517:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40051b:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  400522:	eb 22                	jmp    400546 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0xb9>
  400524:	48 c7 45 c0 14 00 00 	movq   $0x14,-0x40(%rbp)
  40052b:	00 
  40052c:	48 c7 45 c8 00 f4 40 	movq   $0x40f400,-0x38(%rbp)
  400533:	00 
  400534:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  400538:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40053c:	ba 1b 00 00 00       	mov    $0x1b,%edx
  400541:	e8 93 a7 00 00       	callq  40acd9 <_d_array_bounds>
  400546:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  40054d:	48 c1 e0 03          	shl    $0x3,%rax
  400551:	48 03 85 60 ff ff ff 	add    -0xa0(%rbp),%rax
  400558:	48 8b 00             	mov    (%rax),%rax
  40055b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = s2[u];
  40055f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  400563:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  40056a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40056e:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  400572:	73 0d                	jae    400581 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0xf4>
  400574:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400578:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  40057f:	eb 22                	jmp    4005a3 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x116>
  400581:	48 c7 45 d0 14 00 00 	movq   $0x14,-0x30(%rbp)
  400588:	00 
  400589:	48 c7 45 d8 00 f4 40 	movq   $0x40f400,-0x28(%rbp)
  400590:	00 
  400591:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  400595:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  400599:	ba 1c 00 00 00       	mov    $0x1c,%edx
  40059e:	e8 36 a7 00 00       	callq  40acd9 <_d_array_bounds>
  4005a3:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4005aa:	48 c1 e0 03          	shl    $0x3,%rax
  4005ae:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  4005b5:	48 8b 00             	mov    (%rax),%rax
  4005b8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		// Do not pass null's to Object.opEquals()
		if (o1 is o2 ||
  4005bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4005c0:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  4005c4:	74 49                	je     40060f <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x182>
  4005c6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4005cb:	0f 94 c0             	sete   %al
  4005ce:	83 f0 01             	xor    $0x1,%eax
  4005d1:	83 f0 01             	xor    $0x1,%eax
  4005d4:	84 c0                	test   %al,%al
  4005d6:	75 2e                	jne    400606 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x179>
  4005d8:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  4005dd:	0f 94 c0             	sete   %al
  4005e0:	83 f0 01             	xor    $0x1,%eax
  4005e3:	83 f0 01             	xor    $0x1,%eax
  4005e6:	84 c0                	test   %al,%al
  4005e8:	75 1c                	jne    400606 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x179>
  4005ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4005ee:	48 8b 00             	mov    (%rax),%rax
  4005f1:	48 83 c0 20          	add    $0x20,%rax
  4005f5:	48 8b 00             	mov    (%rax),%rax
  4005f8:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  4005fc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  400600:	ff d0                	callq  *%rax
  400602:	85 c0                	test   %eax,%eax
  400604:	75 09                	jne    40060f <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x182>
		    (!(o1 is null) && !(o2 is null) && o1.opEquals(o2)))
		    continue;
		return 0;
  400606:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  40060d:	eb 19                	jmp    400628 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x19b>
  40060f:	48 ff 45 e8          	incq   -0x18(%rbp)
  400613:	e9 d4 fe ff ff       	jmpq   4004ec <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x5f>
	    }
	    return 1;
  400618:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  40061f:	eb 07                	jmp    400628 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x19b>
	}
	return 0;
  400621:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  400628:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  40062b:	c9                   	leaveq 
  40062c:	c3                   	retq   

000000000040062d <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  40062d:	55                   	push   %rbp
  40062e:	48 89 e5             	mov    %rsp,%rbp
  400631:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  400638:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40063c:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  400640:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  400644:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  400648:	e8 c3 8b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	Object[] s1 = *cast(Object[]*)p1;
  40064d:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  400651:	48 8b 02             	mov    (%rdx),%rax
  400654:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  400658:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40065c:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	Object[] s2 = *cast(Object[]*)p2;
  400660:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  400664:	48 8b 02             	mov    (%rdx),%rax
  400667:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40066b:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40066f:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	ptrdiff_t c;
  400673:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40067a:	00 

	c = cast(ptrdiff_t)s1.length - cast(ptrdiff_t)s2.length;
  40067b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40067f:	48 89 c2             	mov    %rax,%rdx
  400682:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400686:	48 89 d1             	mov    %rdx,%rcx
  400689:	48 29 c1             	sub    %rax,%rcx
  40068c:	48 89 c8             	mov    %rcx,%rax
  40068f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (c == 0)
  400693:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  400698:	0f 85 36 01 00 00    	jne    4007d4 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1a7>
	{
	    for (size_t u = 0; u < s1.length; u++)
  40069e:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4006a5:	00 
  4006a6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4006aa:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  4006ae:	0f 92 c0             	setb   %al
  4006b1:	83 f0 01             	xor    $0x1,%eax
  4006b4:	84 c0                	test   %al,%al
  4006b6:	0f 85 18 01 00 00    	jne    4007d4 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1a7>
	    {	Object o1 = s1[u];
  4006bc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4006c0:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  4006c7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4006cb:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  4006cf:	73 0d                	jae    4006de <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0xb1>
  4006d1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4006d5:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
  4006dc:	eb 22                	jmp    400700 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0xd3>
  4006de:	48 c7 45 c0 14 00 00 	movq   $0x14,-0x40(%rbp)
  4006e5:	00 
  4006e6:	48 c7 45 c8 00 f4 40 	movq   $0x40f400,-0x38(%rbp)
  4006ed:	00 
  4006ee:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4006f2:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4006f6:	ba 33 00 00 00       	mov    $0x33,%edx
  4006fb:	e8 d9 a5 00 00       	callq  40acd9 <_d_array_bounds>
  400700:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  400707:	48 c1 e0 03          	shl    $0x3,%rax
  40070b:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  400712:	48 8b 00             	mov    (%rax),%rax
  400715:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = s2[u];
  400719:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40071d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  400724:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400728:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40072c:	73 0a                	jae    400738 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x10b>
  40072e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  400732:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  400736:	eb 22                	jmp    40075a <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x12d>
  400738:	48 c7 45 d0 14 00 00 	movq   $0x14,-0x30(%rbp)
  40073f:	00 
  400740:	48 c7 45 d8 00 f4 40 	movq   $0x40f400,-0x28(%rbp)
  400747:	00 
  400748:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40074c:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  400750:	ba 34 00 00 00       	mov    $0x34,%edx
  400755:	e8 7f a5 00 00       	callq  40acd9 <_d_array_bounds>
  40075a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40075e:	48 c1 e0 03          	shl    $0x3,%rax
  400762:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  400769:	48 8b 00             	mov    (%rax),%rax
  40076c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		if (o1 is o2)
  400770:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400774:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  400778:	74 51                	je     4007cb <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x19e>
		    continue;

		// Regard null references as always being "less than"
		if (o1)
  40077a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40077f:	74 40                	je     4007c1 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x194>
		{
		    if (!o2)
  400781:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  400786:	0f 95 c0             	setne  %al
  400789:	83 f0 01             	xor    $0x1,%eax
  40078c:	84 c0                	test   %al,%al
  40078e:	74 0a                	je     40079a <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x16d>
		    {	c = 1;
  400790:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  400797:	00 
			break;
  400798:	eb 3a                	jmp    4007d4 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1a7>
		    }
		    c = o1.opCmp(o2);
  40079a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40079e:	48 8b 00             	mov    (%rax),%rax
  4007a1:	48 83 c0 18          	add    $0x18,%rax
  4007a5:	48 8b 00             	mov    (%rax),%rax
  4007a8:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  4007ac:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4007b0:	ff d0                	callq  *%rax
  4007b2:	48 98                	cltq   
  4007b4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		    if (c)
  4007b8:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  4007bd:	75 15                	jne    4007d4 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1a7>
			break;
  4007bf:	eb 0a                	jmp    4007cb <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x19e>
		}
		else
		{   c = -1;
  4007c1:	48 c7 45 e0 ff ff ff 	movq   $0xffffffffffffffff,-0x20(%rbp)
  4007c8:	ff 
		    break;
  4007c9:	eb 09                	jmp    4007d4 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1a7>

		if (o1 is o2)
		    continue;

		// Regard null references as always being "less than"
		if (o1)
  4007cb:	48 ff 45 e8          	incq   -0x18(%rbp)
  4007cf:	e9 d2 fe ff ff       	jmpq   4006a6 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x79>
		{   c = -1;
		    break;
		}
	    }
	}
	if (c < 0)
  4007d4:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  4007d9:	79 0a                	jns    4007e5 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1b8>
	    c = -1;
  4007db:	48 c7 45 e0 ff ff ff 	movq   $0xffffffffffffffff,-0x20(%rbp)
  4007e2:	ff 
  4007e3:	eb 0f                	jmp    4007f4 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1c7>
	else if (c > 0)
  4007e5:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  4007ea:	7e 08                	jle    4007f4 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1c7>
	    c = 1;
  4007ec:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  4007f3:	00 
	return c;
  4007f4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    }
  4007f8:	c9                   	leaveq 
  4007f9:	c3                   	retq   

00000000004007fa <_D3std8typeinfo5ti_AC11TypeInfo_AC5tsizeMFZm>:

    size_t tsize()
  4007fa:	55                   	push   %rbp
  4007fb:	48 89 e5             	mov    %rsp,%rbp
  4007fe:	48 83 ec 10          	sub    $0x10,%rsp
  400802:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400806:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40080a:	e8 01 8a 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (Object[]).sizeof;
  40080f:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  400814:	c9                   	leaveq 
  400815:	c3                   	retq   

0000000000400816 <_D3std8typeinfo5ti_AC11TypeInfo_AC5flagsMFZk>:

    uint flags()
  400816:	55                   	push   %rbp
  400817:	48 89 e5             	mov    %rsp,%rbp
  40081a:	48 83 ec 10          	sub    $0x10,%rsp
  40081e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400822:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  400826:	e8 e5 89 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  40082b:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  400830:	c9                   	leaveq 
  400831:	c3                   	retq   

0000000000400832 <_D3std8typeinfo5ti_AC11TypeInfo_AC4nextMFZC8TypeInfo>:

    TypeInfo next()
  400832:	55                   	push   %rbp
  400833:	48 89 e5             	mov    %rsp,%rbp
  400836:	48 83 ec 10          	sub    $0x10,%rsp
  40083a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40083e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  400842:	e8 c9 89 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(Object);
  400847:	48 c7 c0 50 9c 41 00 	mov    $0x419c50,%rax
    }
  40084e:	c9                   	leaveq 
  40084f:	c3                   	retq   

0000000000400850 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar8toStringMFZAa>:

// cdouble[]

class TypeInfo_Ar : TypeInfo
{
    char[] toString() { return "cdouble[]"; }
  400850:	55                   	push   %rbp
  400851:	48 89 e5             	mov    %rsp,%rbp
  400854:	53                   	push   %rbx
  400855:	48 83 ec 08          	sub    $0x8,%rsp
  400859:	48 89 fb             	mov    %rdi,%rbx
  40085c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  400860:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  400864:	e8 a7 89 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  400869:	48 c7 03 09 00 00 00 	movq   $0x9,(%rbx)
  400870:	48 c7 43 08 c0 f4 40 	movq   $0x40f4c0,0x8(%rbx)
  400877:	00 
  400878:	48 89 d8             	mov    %rbx,%rax
  40087b:	48 83 c4 08          	add    $0x8,%rsp
  40087f:	5b                   	pop    %rbx
  400880:	c9                   	leaveq 
  400881:	c3                   	retq   

0000000000400882 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7getHashMFPvZm>:

    hash_t getHash(void *p)
  400882:	55                   	push   %rbp
  400883:	48 89 e5             	mov    %rsp,%rbp
  400886:	48 83 ec 40          	sub    $0x40,%rsp
  40088a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40088e:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  400892:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  400896:	e8 75 89 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {	cdouble[] s = *cast(cdouble[]*)p;
  40089b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40089f:	48 8b 02             	mov    (%rdx),%rax
  4008a2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4008a6:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4008aa:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  4008ae:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4008b2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	cdouble *str = s.ptr;
  4008b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4008ba:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  4008be:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4008c5:	00 

	while (len)
  4008c6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4008cb:	0f 95 c0             	setne  %al
  4008ce:	83 f0 01             	xor    $0x1,%eax
  4008d1:	84 c0                	test   %al,%al
  4008d3:	75 71                	jne    400946 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7getHashMFPvZm+0xc4>
	{
	    hash *= 9;
  4008d5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4008d9:	48 89 d0             	mov    %rdx,%rax
  4008dc:	48 c1 e0 03          	shl    $0x3,%rax
  4008e0:	48 01 d0             	add    %rdx,%rax
  4008e3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[0];
  4008e7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4008eb:	b8 00 00 00 00       	mov    $0x0,%eax
  4008f0:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4008f4:	8b 00                	mov    (%rax),%eax
  4008f6:	89 c0                	mov    %eax,%eax
  4008f8:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[1];
  4008fc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400900:	b8 04 00 00 00       	mov    $0x4,%eax
  400905:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  400909:	8b 00                	mov    (%rax),%eax
  40090b:	89 c0                	mov    %eax,%eax
  40090d:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[2];
  400911:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400915:	b8 08 00 00 00       	mov    $0x8,%eax
  40091a:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40091e:	8b 00                	mov    (%rax),%eax
  400920:	89 c0                	mov    %eax,%eax
  400922:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[3];
  400926:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40092a:	b8 0c 00 00 00       	mov    $0xc,%eax
  40092f:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  400933:	8b 00                	mov    (%rax),%eax
  400935:	89 c0                	mov    %eax,%eax
  400937:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  40093b:	48 83 45 f0 10       	addq   $0x10,-0x10(%rbp)
	    len--;
  400940:	48 ff 4d f8          	decq   -0x8(%rbp)
  400944:	eb 80                	jmp    4008c6 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7getHashMFPvZm+0x44>
	}

	return hash;
  400946:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  40094a:	c9                   	leaveq 
  40094b:	c3                   	retq   

000000000040094c <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  40094c:	55                   	push   %rbp
  40094d:	48 89 e5             	mov    %rsp,%rbp
  400950:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  400957:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40095b:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  40095f:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  400963:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  400967:	e8 a4 88 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cdouble[] s1 = *cast(cdouble[]*)p1;
  40096c:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  400970:	48 8b 02             	mov    (%rdx),%rax
  400973:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  400977:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40097b:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	cdouble[] s2 = *cast(cdouble[]*)p2;
  40097f:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  400983:	48 8b 02             	mov    (%rdx),%rax
  400986:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40098a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40098e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  400992:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400996:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  40099a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40099e:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  4009a2:	74 0f                	je     4009b3 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x67>
	    return 0;
  4009a4:	c7 85 54 ff ff ff 00 	movl   $0x0,-0xac(%rbp)
  4009ab:	00 00 00 
  4009ae:	e9 53 01 00 00       	jmpq   400b06 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x1ba>
	for (size_t u = 0; u < len; u++)
  4009b3:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4009ba:	00 
  4009bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4009bf:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4009c3:	0f 92 c0             	setb   %al
  4009c6:	83 f0 01             	xor    $0x1,%eax
  4009c9:	84 c0                	test   %al,%al
  4009cb:	0f 85 2b 01 00 00    	jne    400afc <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x1b0>
	{
	    int c = TypeInfo_r._equals(s1[u], s2[u]);
  4009d1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4009d5:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  4009dc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4009e0:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4009e4:	73 0d                	jae    4009f3 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0xa7>
  4009e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4009ea:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  4009f1:	eb 22                	jmp    400a15 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0xc9>
  4009f3:	48 c7 45 c0 1a 00 00 	movq   $0x1a,-0x40(%rbp)
  4009fa:	00 
  4009fb:	48 c7 45 c8 ca f4 40 	movq   $0x40f4ca,-0x38(%rbp)
  400a02:	00 
  400a03:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  400a07:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  400a0b:	ba 40 00 00 00       	mov    $0x40,%edx
  400a10:	e8 c4 a2 00 00       	callq  40acd9 <_d_array_bounds>
  400a15:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  400a1c:	48 c1 e0 04          	shl    $0x4,%rax
  400a20:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  400a27:	dd 00                	fldl   (%rax)
  400a29:	dd 9d 70 ff ff ff    	fstpl  -0x90(%rbp)
  400a2f:	dd 40 08             	fldl   0x8(%rax)
  400a32:	dd 9d 68 ff ff ff    	fstpl  -0x98(%rbp)
  400a38:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  400a3c:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  400a43:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400a47:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  400a4b:	73 0a                	jae    400a57 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x10b>
  400a4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400a51:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  400a55:	eb 22                	jmp    400a79 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x12d>
  400a57:	48 c7 45 d0 1a 00 00 	movq   $0x1a,-0x30(%rbp)
  400a5e:	00 
  400a5f:	48 c7 45 d8 ca f4 40 	movq   $0x40f4ca,-0x28(%rbp)
  400a66:	00 
  400a67:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  400a6b:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  400a6f:	ba 40 00 00 00       	mov    $0x40,%edx
  400a74:	e8 60 a2 00 00       	callq  40acd9 <_d_array_bounds>
  400a79:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  400a7d:	48 c1 e0 04          	shl    $0x4,%rax
  400a81:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  400a88:	48 8b 10             	mov    (%rax),%rdx
  400a8b:	48 8b 40 08          	mov    0x8(%rax),%rax
  400a8f:	48 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%rcx
  400a96:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
  400a9d:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
  400aa4:	66 0f 12 95 48 ff ff 	movlpd -0xb8(%rbp),%xmm2
  400aab:	ff 
  400aac:	48 89 b5 48 ff ff ff 	mov    %rsi,-0xb8(%rbp)
  400ab3:	66 0f 12 9d 48 ff ff 	movlpd -0xb8(%rbp),%xmm3
  400aba:	ff 
  400abb:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  400ac2:	66 0f 12 85 48 ff ff 	movlpd -0xb8(%rbp),%xmm0
  400ac9:	ff 
  400aca:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  400ad1:	66 0f 12 8d 48 ff ff 	movlpd -0xb8(%rbp),%xmm1
  400ad8:	ff 
  400ad9:	e8 bc 34 00 00       	callq  403f9a <_D3std8typeinfo10ti_cdouble10TypeInfo_r7_equalsFrrZi>
  400ade:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  400ae1:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  400ae5:	75 0c                	jne    400af3 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x1a7>
		return 0;
  400ae7:	c7 85 54 ff ff ff 00 	movl   $0x0,-0xac(%rbp)
  400aee:	00 00 00 
  400af1:	eb 13                	jmp    400b06 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x1ba>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_r._equals(s1[u], s2[u]);
	    if (c == 0)
  400af3:	48 ff 45 f0          	incq   -0x10(%rbp)
  400af7:	e9 bf fe ff ff       	jmpq   4009bb <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  400afc:	c7 85 54 ff ff ff 01 	movl   $0x1,-0xac(%rbp)
  400b03:	00 00 00 
  400b06:	8b 85 54 ff ff ff    	mov    -0xac(%rbp),%eax
    }
  400b0c:	c9                   	leaveq 
  400b0d:	c3                   	retq   

0000000000400b0e <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  400b0e:	55                   	push   %rbp
  400b0f:	48 89 e5             	mov    %rsp,%rbp
  400b12:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  400b19:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  400b1d:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  400b21:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  400b25:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  400b29:	e8 e2 86 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cdouble[] s1 = *cast(cdouble[]*)p1;
  400b2e:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  400b32:	48 8b 02             	mov    (%rdx),%rax
  400b35:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  400b39:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400b3d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	cdouble[] s2 = *cast(cdouble[]*)p2;
  400b41:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  400b45:	48 8b 02             	mov    (%rdx),%rax
  400b48:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  400b4c:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400b50:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  400b54:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400b58:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  400b5c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400b60:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  400b64:	73 08                	jae    400b6e <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x60>
	    len = s2.length;
  400b66:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400b6a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  400b6e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  400b75:	00 
  400b76:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400b7a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  400b7e:	0f 92 c0             	setb   %al
  400b81:	83 f0 01             	xor    $0x1,%eax
  400b84:	84 c0                	test   %al,%al
  400b86:	0f 85 2d 01 00 00    	jne    400cb9 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1ab>
	{
	    int c = TypeInfo_r._compare(s1[u], s2[u]);
  400b8c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  400b90:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  400b97:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400b9b:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  400b9f:	73 0d                	jae    400bae <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0xa0>
  400ba1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400ba5:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  400bac:	eb 22                	jmp    400bd0 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0xc2>
  400bae:	48 c7 45 c0 1a 00 00 	movq   $0x1a,-0x40(%rbp)
  400bb5:	00 
  400bb6:	48 c7 45 c8 ca f4 40 	movq   $0x40f4ca,-0x38(%rbp)
  400bbd:	00 
  400bbe:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  400bc2:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  400bc6:	ba 51 00 00 00       	mov    $0x51,%edx
  400bcb:	e8 09 a1 00 00       	callq  40acd9 <_d_array_bounds>
  400bd0:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  400bd7:	48 c1 e0 04          	shl    $0x4,%rax
  400bdb:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  400be2:	dd 00                	fldl   (%rax)
  400be4:	dd 9d 68 ff ff ff    	fstpl  -0x98(%rbp)
  400bea:	dd 40 08             	fldl   0x8(%rax)
  400bed:	dd 9d 60 ff ff ff    	fstpl  -0xa0(%rbp)
  400bf3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  400bf7:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  400bfe:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400c02:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  400c06:	73 0d                	jae    400c15 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x107>
  400c08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400c0c:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  400c13:	eb 22                	jmp    400c37 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x129>
  400c15:	48 c7 45 d0 1a 00 00 	movq   $0x1a,-0x30(%rbp)
  400c1c:	00 
  400c1d:	48 c7 45 d8 ca f4 40 	movq   $0x40f4ca,-0x28(%rbp)
  400c24:	00 
  400c25:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  400c29:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  400c2d:	ba 51 00 00 00       	mov    $0x51,%edx
  400c32:	e8 a2 a0 00 00       	callq  40acd9 <_d_array_bounds>
  400c37:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  400c3e:	48 c1 e0 04          	shl    $0x4,%rax
  400c42:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  400c49:	48 8b 10             	mov    (%rax),%rdx
  400c4c:	48 8b 40 08          	mov    0x8(%rax),%rax
  400c50:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
  400c57:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  400c5e:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
  400c65:	66 0f 12 95 48 ff ff 	movlpd -0xb8(%rbp),%xmm2
  400c6c:	ff 
  400c6d:	48 89 b5 48 ff ff ff 	mov    %rsi,-0xb8(%rbp)
  400c74:	66 0f 12 9d 48 ff ff 	movlpd -0xb8(%rbp),%xmm3
  400c7b:	ff 
  400c7c:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  400c83:	66 0f 12 85 48 ff ff 	movlpd -0xb8(%rbp),%xmm0
  400c8a:	ff 
  400c8b:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  400c92:	66 0f 12 8d 48 ff ff 	movlpd -0xb8(%rbp),%xmm1
  400c99:	ff 
  400c9a:	e8 6c 33 00 00       	callq  40400b <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi>
  400c9f:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  400ca2:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  400ca6:	74 08                	je     400cb0 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1a2>
		return c;
  400ca8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400cab:	89 45 84             	mov    %eax,-0x7c(%rbp)
  400cae:	eb 3c                	jmp    400cec <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1de>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_r._compare(s1[u], s2[u]);
	    if (c)
  400cb0:	48 ff 45 f0          	incq   -0x10(%rbp)
  400cb4:	e9 bd fe ff ff       	jmpq   400b76 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  400cb9:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  400cbd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400cc1:	48 39 c2             	cmp    %rax,%rdx
  400cc4:	73 09                	jae    400ccf <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1c1>
	    return -1;
  400cc6:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  400ccd:	eb 1d                	jmp    400cec <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1de>
	else if (s1.length > s2.length)
  400ccf:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  400cd3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400cd7:	48 39 c2             	cmp    %rax,%rdx
  400cda:	76 09                	jbe    400ce5 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1d7>
	    return 1;
  400cdc:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  400ce3:	eb 07                	jmp    400cec <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1de>
	return 0;
  400ce5:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  400cec:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  400cef:	c9                   	leaveq 
  400cf0:	c3                   	retq   

0000000000400cf1 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar5tsizeMFZm>:

    size_t tsize()
  400cf1:	55                   	push   %rbp
  400cf2:	48 89 e5             	mov    %rsp,%rbp
  400cf5:	48 83 ec 10          	sub    $0x10,%rsp
  400cf9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400cfd:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  400d01:	e8 0a 85 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cdouble[]).sizeof;
  400d06:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  400d0b:	c9                   	leaveq 
  400d0c:	c3                   	retq   

0000000000400d0d <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar5flagsMFZk>:

    uint flags()
  400d0d:	55                   	push   %rbp
  400d0e:	48 89 e5             	mov    %rsp,%rbp
  400d11:	48 83 ec 10          	sub    $0x10,%rsp
  400d15:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400d19:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  400d1d:	e8 ee 84 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  400d22:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  400d27:	c9                   	leaveq 
  400d28:	c3                   	retq   

0000000000400d29 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar4nextMFZC8TypeInfo>:

    TypeInfo next()
  400d29:	55                   	push   %rbp
  400d2a:	48 89 e5             	mov    %rsp,%rbp
  400d2d:	48 83 ec 10          	sub    $0x10,%rsp
  400d31:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400d35:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  400d39:	e8 d2 84 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(cdouble);
  400d3e:	48 c7 c0 f0 05 41 00 	mov    $0x4105f0,%rax
    }
  400d45:	c9                   	leaveq 
  400d46:	c3                   	retq   
  400d47:	90                   	nop    

0000000000400d48 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq8toStringMFZAa>:

// cfloat[]

class TypeInfo_Aq : TypeInfo
{
    char[] toString() { return "cfloat[]"; }
  400d48:	55                   	push   %rbp
  400d49:	48 89 e5             	mov    %rsp,%rbp
  400d4c:	53                   	push   %rbx
  400d4d:	48 83 ec 08          	sub    $0x8,%rsp
  400d51:	48 89 fb             	mov    %rdi,%rbx
  400d54:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  400d58:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  400d5c:	e8 af 84 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  400d61:	48 c7 03 08 00 00 00 	movq   $0x8,(%rbx)
  400d68:	48 c7 43 08 a0 f5 40 	movq   $0x40f5a0,0x8(%rbx)
  400d6f:	00 
  400d70:	48 89 d8             	mov    %rbx,%rax
  400d73:	48 83 c4 08          	add    $0x8,%rsp
  400d77:	5b                   	pop    %rbx
  400d78:	c9                   	leaveq 
  400d79:	c3                   	retq   

0000000000400d7a <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7getHashMFPvZm>:

    hash_t getHash(void *p)
  400d7a:	55                   	push   %rbp
  400d7b:	48 89 e5             	mov    %rsp,%rbp
  400d7e:	48 83 ec 40          	sub    $0x40,%rsp
  400d82:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  400d86:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  400d8a:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  400d8e:	e8 7d 84 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {	cfloat[] s = *cast(cfloat[]*)p;
  400d93:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  400d97:	48 8b 02             	mov    (%rdx),%rax
  400d9a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  400d9e:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400da2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  400da6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  400daa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	cfloat *str = s.ptr;
  400dae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400db2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  400db6:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  400dbd:	00 

	while (len)
  400dbe:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  400dc3:	0f 95 c0             	setne  %al
  400dc6:	83 f0 01             	xor    $0x1,%eax
  400dc9:	84 c0                	test   %al,%al
  400dcb:	75 47                	jne    400e14 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7getHashMFPvZm+0x9a>
	{
	    hash *= 9;
  400dcd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  400dd1:	48 89 d0             	mov    %rdx,%rax
  400dd4:	48 c1 e0 03          	shl    $0x3,%rax
  400dd8:	48 01 d0             	add    %rdx,%rax
  400ddb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[0];
  400ddf:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400de3:	b8 00 00 00 00       	mov    $0x0,%eax
  400de8:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  400dec:	8b 00                	mov    (%rax),%eax
  400dee:	89 c0                	mov    %eax,%eax
  400df0:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[1];
  400df4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400df8:	b8 04 00 00 00       	mov    $0x4,%eax
  400dfd:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  400e01:	8b 00                	mov    (%rax),%eax
  400e03:	89 c0                	mov    %eax,%eax
  400e05:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  400e09:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
	    len--;
  400e0e:	48 ff 4d f8          	decq   -0x8(%rbp)
  400e12:	eb aa                	jmp    400dbe <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7getHashMFPvZm+0x44>
	}

	return hash;
  400e14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  400e18:	c9                   	leaveq 
  400e19:	c3                   	retq   

0000000000400e1a <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  400e1a:	55                   	push   %rbp
  400e1b:	48 89 e5             	mov    %rsp,%rbp
  400e1e:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  400e25:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  400e29:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  400e2d:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  400e31:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  400e35:	e8 d6 83 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cfloat[] s1 = *cast(cfloat[]*)p1;
  400e3a:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  400e3e:	48 8b 02             	mov    (%rdx),%rax
  400e41:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  400e45:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400e49:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	cfloat[] s2 = *cast(cfloat[]*)p2;
  400e4d:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  400e51:	48 8b 02             	mov    (%rdx),%rax
  400e54:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  400e58:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400e5c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  400e60:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400e64:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  400e68:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400e6c:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  400e70:	74 0f                	je     400e81 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x67>
	    return 0;
  400e72:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  400e79:	00 00 00 
  400e7c:	e9 44 01 00 00       	jmpq   400fc5 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x1ab>
	for (size_t u = 0; u < len; u++)
  400e81:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  400e88:	00 
  400e89:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400e8d:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  400e91:	0f 92 c0             	setb   %al
  400e94:	83 f0 01             	xor    $0x1,%eax
  400e97:	84 c0                	test   %al,%al
  400e99:	0f 85 1c 01 00 00    	jne    400fbb <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x1a1>
	{
	    int c = TypeInfo_q._equals(s1[u], s2[u]);
  400e9f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  400ea3:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  400eaa:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400eae:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  400eb2:	73 0d                	jae    400ec1 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0xa7>
  400eb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400eb8:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  400ebf:	eb 22                	jmp    400ee3 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0xc9>
  400ec1:	48 c7 45 c0 19 00 00 	movq   $0x19,-0x40(%rbp)
  400ec8:	00 
  400ec9:	48 c7 45 c8 a9 f5 40 	movq   $0x40f5a9,-0x38(%rbp)
  400ed0:	00 
  400ed1:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  400ed5:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  400ed9:	ba 3e 00 00 00       	mov    $0x3e,%edx
  400ede:	e8 f6 9d 00 00       	callq  40acd9 <_d_array_bounds>
  400ee3:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  400eea:	48 c1 e0 03          	shl    $0x3,%rax
  400eee:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  400ef5:	d9 00                	flds   (%rax)
  400ef7:	d9 9d 64 ff ff ff    	fstps  -0x9c(%rbp)
  400efd:	d9 40 04             	flds   0x4(%rax)
  400f00:	d9 9d 60 ff ff ff    	fstps  -0xa0(%rbp)
  400f06:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  400f0a:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  400f11:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400f15:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  400f19:	73 0d                	jae    400f28 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x10e>
  400f1b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400f1f:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  400f26:	eb 22                	jmp    400f4a <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x130>
  400f28:	48 c7 45 d0 19 00 00 	movq   $0x19,-0x30(%rbp)
  400f2f:	00 
  400f30:	48 c7 45 d8 a9 f5 40 	movq   $0x40f5a9,-0x28(%rbp)
  400f37:	00 
  400f38:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  400f3c:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  400f40:	ba 3e 00 00 00       	mov    $0x3e,%edx
  400f45:	e8 8f 9d 00 00       	callq  40acd9 <_d_array_bounds>
  400f4a:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  400f51:	48 c1 e0 03          	shl    $0x3,%rax
  400f55:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  400f5c:	8b 08                	mov    (%rax),%ecx
  400f5e:	8b 70 04             	mov    0x4(%rax),%esi
  400f61:	8b 85 64 ff ff ff    	mov    -0x9c(%rbp),%eax
  400f67:	8b 95 60 ff ff ff    	mov    -0xa0(%rbp),%edx
  400f6d:	89 45 80             	mov    %eax,-0x80(%rbp)
  400f70:	89 55 84             	mov    %edx,-0x7c(%rbp)
  400f73:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  400f77:	89 c8                	mov    %ecx,%eax
  400f79:	89 f2                	mov    %esi,%edx
  400f7b:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  400f81:	89 95 7c ff ff ff    	mov    %edx,-0x84(%rbp)
  400f87:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  400f8e:	66 48 0f 6e cf       	movq   %rdi,%xmm1
  400f93:	66 48 0f 6e c0       	movq   %rax,%xmm0
  400f98:	e8 3b 33 00 00       	callq  4042d8 <_D3std8typeinfo9ti_cfloat10TypeInfo_q7_equalsFqqZi>
  400f9d:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  400fa0:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  400fa4:	75 0c                	jne    400fb2 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x198>
		return 0;
  400fa6:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  400fad:	00 00 00 
  400fb0:	eb 13                	jmp    400fc5 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x1ab>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_q._equals(s1[u], s2[u]);
	    if (c == 0)
  400fb2:	48 ff 45 f0          	incq   -0x10(%rbp)
  400fb6:	e9 ce fe ff ff       	jmpq   400e89 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  400fbb:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  400fc2:	00 00 00 
  400fc5:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
    }
  400fcb:	c9                   	leaveq 
  400fcc:	c3                   	retq   

0000000000400fcd <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  400fcd:	55                   	push   %rbp
  400fce:	48 89 e5             	mov    %rsp,%rbp
  400fd1:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  400fd8:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  400fdc:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  400fe0:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  400fe4:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  400fe8:	e8 23 82 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cfloat[] s1 = *cast(cfloat[]*)p1;
  400fed:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  400ff1:	48 8b 02             	mov    (%rdx),%rax
  400ff4:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  400ff8:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400ffc:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	cfloat[] s2 = *cast(cfloat[]*)p2;
  401000:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  401004:	48 8b 02             	mov    (%rdx),%rax
  401007:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40100b:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40100f:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  401013:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401017:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  40101b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40101f:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  401023:	73 08                	jae    40102d <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x60>
	    len = s2.length;
  401025:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401029:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  40102d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  401034:	00 
  401035:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401039:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40103d:	0f 92 c0             	setb   %al
  401040:	83 f0 01             	xor    $0x1,%eax
  401043:	84 c0                	test   %al,%al
  401045:	0f 85 1b 01 00 00    	jne    401166 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x199>
	{
	    int c = TypeInfo_q._compare(s1[u], s2[u]);
  40104b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40104f:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  401056:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40105a:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40105e:	73 0d                	jae    40106d <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0xa0>
  401060:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401064:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  40106b:	eb 22                	jmp    40108f <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0xc2>
  40106d:	48 c7 45 c0 19 00 00 	movq   $0x19,-0x40(%rbp)
  401074:	00 
  401075:	48 c7 45 c8 a9 f5 40 	movq   $0x40f5a9,-0x38(%rbp)
  40107c:	00 
  40107d:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  401081:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  401085:	ba 4f 00 00 00       	mov    $0x4f,%edx
  40108a:	e8 4a 9c 00 00       	callq  40acd9 <_d_array_bounds>
  40108f:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  401096:	48 c1 e0 03          	shl    $0x3,%rax
  40109a:	48 03 85 48 ff ff ff 	add    -0xb8(%rbp),%rax
  4010a1:	d9 00                	flds   (%rax)
  4010a3:	d9 9d 5c ff ff ff    	fstps  -0xa4(%rbp)
  4010a9:	d9 40 04             	flds   0x4(%rax)
  4010ac:	d9 9d 58 ff ff ff    	fstps  -0xa8(%rbp)
  4010b2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4010b6:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  4010bd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4010c1:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4010c5:	73 0d                	jae    4010d4 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x107>
  4010c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4010cb:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  4010d2:	eb 22                	jmp    4010f6 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x129>
  4010d4:	48 c7 45 d0 19 00 00 	movq   $0x19,-0x30(%rbp)
  4010db:	00 
  4010dc:	48 c7 45 d8 a9 f5 40 	movq   $0x40f5a9,-0x28(%rbp)
  4010e3:	00 
  4010e4:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4010e8:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4010ec:	ba 4f 00 00 00       	mov    $0x4f,%edx
  4010f1:	e8 e3 9b 00 00       	callq  40acd9 <_d_array_bounds>
  4010f6:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  4010fd:	48 c1 e0 03          	shl    $0x3,%rax
  401101:	48 03 85 60 ff ff ff 	add    -0xa0(%rbp),%rax
  401108:	8b 08                	mov    (%rax),%ecx
  40110a:	8b 70 04             	mov    0x4(%rax),%esi
  40110d:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  401113:	8b 95 58 ff ff ff    	mov    -0xa8(%rbp),%edx
  401119:	89 45 80             	mov    %eax,-0x80(%rbp)
  40111c:	89 55 84             	mov    %edx,-0x7c(%rbp)
  40111f:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  401123:	89 c8                	mov    %ecx,%eax
  401125:	89 f2                	mov    %esi,%edx
  401127:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  40112d:	89 95 7c ff ff ff    	mov    %edx,-0x84(%rbp)
  401133:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40113a:	66 48 0f 6e cf       	movq   %rdi,%xmm1
  40113f:	66 48 0f 6e c0       	movq   %rax,%xmm0
  401144:	e8 d9 31 00 00       	callq  404322 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi>
  401149:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  40114c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  401150:	74 0b                	je     40115d <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x190>
		return c;
  401152:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401155:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
  40115b:	eb 45                	jmp    4011a2 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x1d5>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_q._compare(s1[u], s2[u]);
	    if (c)
  40115d:	48 ff 45 f0          	incq   -0x10(%rbp)
  401161:	e9 cf fe ff ff       	jmpq   401035 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  401166:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40116a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40116e:	48 39 c2             	cmp    %rax,%rdx
  401171:	73 0c                	jae    40117f <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x1b2>
	    return -1;
  401173:	c7 85 74 ff ff ff ff 	movl   $0xffffffff,-0x8c(%rbp)
  40117a:	ff ff ff 
  40117d:	eb 23                	jmp    4011a2 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x1d5>
	else if (s1.length > s2.length)
  40117f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  401183:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401187:	48 39 c2             	cmp    %rax,%rdx
  40118a:	76 0c                	jbe    401198 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x1cb>
	    return 1;
  40118c:	c7 85 74 ff ff ff 01 	movl   $0x1,-0x8c(%rbp)
  401193:	00 00 00 
  401196:	eb 0a                	jmp    4011a2 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x1d5>
	return 0;
  401198:	c7 85 74 ff ff ff 00 	movl   $0x0,-0x8c(%rbp)
  40119f:	00 00 00 
  4011a2:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
    }
  4011a8:	c9                   	leaveq 
  4011a9:	c3                   	retq   

00000000004011aa <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq5tsizeMFZm>:

    size_t tsize()
  4011aa:	55                   	push   %rbp
  4011ab:	48 89 e5             	mov    %rsp,%rbp
  4011ae:	48 83 ec 10          	sub    $0x10,%rsp
  4011b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4011b6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4011ba:	e8 51 80 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cfloat[]).sizeof;
  4011bf:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  4011c4:	c9                   	leaveq 
  4011c5:	c3                   	retq   

00000000004011c6 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq5flagsMFZk>:

    uint flags()
  4011c6:	55                   	push   %rbp
  4011c7:	48 89 e5             	mov    %rsp,%rbp
  4011ca:	48 83 ec 10          	sub    $0x10,%rsp
  4011ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4011d2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4011d6:	e8 35 80 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  4011db:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  4011e0:	c9                   	leaveq 
  4011e1:	c3                   	retq   

00000000004011e2 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq4nextMFZC8TypeInfo>:

    TypeInfo next()
  4011e2:	55                   	push   %rbp
  4011e3:	48 89 e5             	mov    %rsp,%rbp
  4011e6:	48 83 ec 10          	sub    $0x10,%rsp
  4011ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4011ee:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4011f2:	e8 19 80 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(cfloat);
  4011f7:	48 c7 c0 b0 06 41 00 	mov    $0x4106b0,%rax
    }
  4011fe:	c9                   	leaveq 
  4011ff:	c3                   	retq   

0000000000401200 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac8toStringMFZAa>:

// creal[]

class TypeInfo_Ac : TypeInfo
{
    char[] toString() { return "creal[]"; }
  401200:	55                   	push   %rbp
  401201:	48 89 e5             	mov    %rsp,%rbp
  401204:	53                   	push   %rbx
  401205:	48 83 ec 08          	sub    $0x8,%rsp
  401209:	48 89 fb             	mov    %rdi,%rbx
  40120c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  401210:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  401214:	e8 f7 7f 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  401219:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  401220:	48 c7 43 08 80 f6 40 	movq   $0x40f680,0x8(%rbx)
  401227:	00 
  401228:	48 89 d8             	mov    %rbx,%rax
  40122b:	48 83 c4 08          	add    $0x8,%rsp
  40122f:	5b                   	pop    %rbx
  401230:	c9                   	leaveq 
  401231:	c3                   	retq   

0000000000401232 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7getHashMFPvZm>:

    hash_t getHash(void *p)
  401232:	55                   	push   %rbp
  401233:	48 89 e5             	mov    %rsp,%rbp
  401236:	48 83 ec 40          	sub    $0x40,%rsp
  40123a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40123e:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  401242:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  401246:	e8 c5 7f 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {	creal[] s = *cast(creal[]*)p;
  40124b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40124f:	48 8b 02             	mov    (%rdx),%rax
  401252:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  401256:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40125a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  40125e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  401262:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	creal *str = s.ptr;
  401266:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40126a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  40126e:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  401275:	00 

	while (len)
  401276:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40127b:	0f 95 c0             	setne  %al
  40127e:	83 f0 01             	xor    $0x1,%eax
  401281:	84 c0                	test   %al,%al
  401283:	0f 85 89 00 00 00    	jne    401312 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7getHashMFPvZm+0xe0>
	{
	    hash *= 9;
  401289:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40128d:	48 89 d0             	mov    %rdx,%rax
  401290:	48 c1 e0 03          	shl    $0x3,%rax
  401294:	48 01 d0             	add    %rdx,%rax
  401297:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[0];
  40129b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40129f:	b8 00 00 00 00       	mov    $0x0,%eax
  4012a4:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4012a8:	8b 00                	mov    (%rax),%eax
  4012aa:	89 c0                	mov    %eax,%eax
  4012ac:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[1];
  4012b0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4012b4:	b8 04 00 00 00       	mov    $0x4,%eax
  4012b9:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4012bd:	8b 00                	mov    (%rax),%eax
  4012bf:	89 c0                	mov    %eax,%eax
  4012c1:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[2];
  4012c5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4012c9:	b8 08 00 00 00       	mov    $0x8,%eax
  4012ce:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4012d2:	8b 00                	mov    (%rax),%eax
  4012d4:	89 c0                	mov    %eax,%eax
  4012d6:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[3];
  4012da:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4012de:	b8 0c 00 00 00       	mov    $0xc,%eax
  4012e3:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4012e7:	8b 00                	mov    (%rax),%eax
  4012e9:	89 c0                	mov    %eax,%eax
  4012eb:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[4];
  4012ef:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4012f3:	b8 10 00 00 00       	mov    $0x10,%eax
  4012f8:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4012fc:	8b 00                	mov    (%rax),%eax
  4012fe:	89 c0                	mov    %eax,%eax
  401300:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  401304:	48 83 45 f0 20       	addq   $0x20,-0x10(%rbp)
	    len--;
  401309:	48 ff 4d f8          	decq   -0x8(%rbp)
  40130d:	e9 64 ff ff ff       	jmpq   401276 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7getHashMFPvZm+0x44>
	}

	return hash;
  401312:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  401316:	c9                   	leaveq 
  401317:	c3                   	retq   

0000000000401318 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  401318:	55                   	push   %rbp
  401319:	48 89 e5             	mov    %rsp,%rbp
  40131c:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  401323:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  401327:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  40132b:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40132f:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  401333:	e8 d8 7e 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	creal[] s1 = *cast(creal[]*)p1;
  401338:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40133c:	48 8b 02             	mov    (%rdx),%rax
  40133f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  401343:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401347:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	creal[] s2 = *cast(creal[]*)p2;
  40134b:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40134f:	48 8b 02             	mov    (%rdx),%rax
  401352:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  401356:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40135a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  40135e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401362:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  401366:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40136a:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40136e:	74 0f                	je     40137f <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x67>
	    return 0;
  401370:	c7 85 3c ff ff ff 00 	movl   $0x0,-0xc4(%rbp)
  401377:	00 00 00 
  40137a:	e9 34 01 00 00       	jmpq   4014b3 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x19b>
	for (size_t u = 0; u < len; u++)
  40137f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  401386:	00 
  401387:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40138b:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40138f:	0f 92 c0             	setb   %al
  401392:	83 f0 01             	xor    $0x1,%eax
  401395:	84 c0                	test   %al,%al
  401397:	0f 85 0c 01 00 00    	jne    4014a9 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x191>
	{
	    int c = TypeInfo_c._equals(s1[u], s2[u]);
  40139d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4013a1:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  4013a8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4013ac:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4013b0:	73 0d                	jae    4013bf <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0xa7>
  4013b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4013b6:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  4013bd:	eb 22                	jmp    4013e1 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0xc9>
  4013bf:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  4013c6:	00 
  4013c7:	48 c7 45 c8 88 f6 40 	movq   $0x40f688,-0x38(%rbp)
  4013ce:	00 
  4013cf:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4013d3:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4013d7:	ba 41 00 00 00       	mov    $0x41,%edx
  4013dc:	e8 f8 98 00 00       	callq  40acd9 <_d_array_bounds>
  4013e1:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  4013e8:	48 c1 e0 05          	shl    $0x5,%rax
  4013ec:	48 03 85 40 ff ff ff 	add    -0xc0(%rbp),%rax
  4013f3:	db 28                	fldt   (%rax)
  4013f5:	db bd 60 ff ff ff    	fstpt  -0xa0(%rbp)
  4013fb:	db 68 10             	fldt   0x10(%rax)
  4013fe:	db bd 50 ff ff ff    	fstpt  -0xb0(%rbp)
  401404:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401408:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  40140f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401413:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401417:	73 0a                	jae    401423 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x10b>
  401419:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40141d:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  401421:	eb 22                	jmp    401445 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x12d>
  401423:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  40142a:	00 
  40142b:	48 c7 45 d8 88 f6 40 	movq   $0x40f688,-0x28(%rbp)
  401432:	00 
  401433:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  401437:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40143b:	ba 41 00 00 00       	mov    $0x41,%edx
  401440:	e8 94 98 00 00       	callq  40acd9 <_d_array_bounds>
  401445:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  401449:	48 c1 e0 05          	shl    $0x5,%rax
  40144d:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  401454:	48 8b 10             	mov    (%rax),%rdx
  401457:	8b 48 08             	mov    0x8(%rax),%ecx
  40145a:	48 8b 70 10          	mov    0x10(%rax),%rsi
  40145e:	8b 78 18             	mov    0x18(%rax),%edi
  401461:	db ad 60 ff ff ff    	fldt   -0xa0(%rbp)
  401467:	db 7c 24 20          	fstpt  0x20(%rsp)
  40146b:	db ad 50 ff ff ff    	fldt   -0xb0(%rbp)
  401471:	db 7c 24 30          	fstpt  0x30(%rsp)
  401475:	48 89 14 24          	mov    %rdx,(%rsp)
  401479:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
  40147d:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  401482:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  401486:	e8 bc 32 00 00       	callq  404747 <_D3std8typeinfo8ti_creal10TypeInfo_c7_equalsFccZi>
  40148b:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  40148e:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  401492:	75 0c                	jne    4014a0 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x188>
		return 0;
  401494:	c7 85 3c ff ff ff 00 	movl   $0x0,-0xc4(%rbp)
  40149b:	00 00 00 
  40149e:	eb 13                	jmp    4014b3 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x19b>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_c._equals(s1[u], s2[u]);
	    if (c == 0)
  4014a0:	48 ff 45 f0          	incq   -0x10(%rbp)
  4014a4:	e9 de fe ff ff       	jmpq   401387 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  4014a9:	c7 85 3c ff ff ff 01 	movl   $0x1,-0xc4(%rbp)
  4014b0:	00 00 00 
  4014b3:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
    }
  4014b9:	c9                   	leaveq 
  4014ba:	c3                   	retq   

00000000004014bb <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4014bb:	55                   	push   %rbp
  4014bc:	48 89 e5             	mov    %rsp,%rbp
  4014bf:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
  4014c6:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  4014ca:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  4014ce:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  4014d2:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  4014d6:	e8 35 7d 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	creal[] s1 = *cast(creal[]*)p1;
  4014db:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4014df:	48 8b 02             	mov    (%rdx),%rax
  4014e2:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  4014e6:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4014ea:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	creal[] s2 = *cast(creal[]*)p2;
  4014ee:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4014f2:	48 8b 02             	mov    (%rdx),%rax
  4014f5:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4014f9:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4014fd:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  401501:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401505:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  401509:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40150d:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  401511:	73 08                	jae    40151b <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x60>
	    len = s2.length;
  401513:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401517:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  40151b:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  401522:	00 
  401523:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401527:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40152b:	0f 92 c0             	setb   %al
  40152e:	83 f0 01             	xor    $0x1,%eax
  401531:	84 c0                	test   %al,%al
  401533:	0f 85 0e 01 00 00    	jne    401647 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x18c>
	{
	    int c = TypeInfo_c._compare(s1[u], s2[u]);
  401539:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40153d:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  401544:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401548:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40154c:	73 0d                	jae    40155b <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0xa0>
  40154e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401552:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  401559:	eb 22                	jmp    40157d <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0xc2>
  40155b:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  401562:	00 
  401563:	48 c7 45 c8 88 f6 40 	movq   $0x40f688,-0x38(%rbp)
  40156a:	00 
  40156b:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40156f:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  401573:	ba 52 00 00 00       	mov    $0x52,%edx
  401578:	e8 5c 97 00 00       	callq  40acd9 <_d_array_bounds>
  40157d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  401584:	48 c1 e0 05          	shl    $0x5,%rax
  401588:	48 03 85 40 ff ff ff 	add    -0xc0(%rbp),%rax
  40158f:	db 28                	fldt   (%rax)
  401591:	db bd 60 ff ff ff    	fstpt  -0xa0(%rbp)
  401597:	db 68 10             	fldt   0x10(%rax)
  40159a:	db bd 50 ff ff ff    	fstpt  -0xb0(%rbp)
  4015a0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4015a4:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  4015ab:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4015af:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4015b3:	73 0d                	jae    4015c2 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x107>
  4015b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4015b9:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4015c0:	eb 22                	jmp    4015e4 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x129>
  4015c2:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  4015c9:	00 
  4015ca:	48 c7 45 d8 88 f6 40 	movq   $0x40f688,-0x28(%rbp)
  4015d1:	00 
  4015d2:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4015d6:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4015da:	ba 52 00 00 00       	mov    $0x52,%edx
  4015df:	e8 f5 96 00 00       	callq  40acd9 <_d_array_bounds>
  4015e4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4015eb:	48 c1 e0 05          	shl    $0x5,%rax
  4015ef:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  4015f6:	48 8b 10             	mov    (%rax),%rdx
  4015f9:	8b 48 08             	mov    0x8(%rax),%ecx
  4015fc:	48 8b 70 10          	mov    0x10(%rax),%rsi
  401600:	8b 78 18             	mov    0x18(%rax),%edi
  401603:	db ad 60 ff ff ff    	fldt   -0xa0(%rbp)
  401609:	db 7c 24 20          	fstpt  0x20(%rsp)
  40160d:	db ad 50 ff ff ff    	fldt   -0xb0(%rbp)
  401613:	db 7c 24 30          	fstpt  0x30(%rsp)
  401617:	48 89 14 24          	mov    %rdx,(%rsp)
  40161b:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
  40161f:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  401624:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  401628:	e8 4b 31 00 00       	callq  404778 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi>
  40162d:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  401630:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  401634:	74 08                	je     40163e <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x183>
		return c;
  401636:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401639:	89 45 84             	mov    %eax,-0x7c(%rbp)
  40163c:	eb 3c                	jmp    40167a <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x1bf>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_c._compare(s1[u], s2[u]);
	    if (c)
  40163e:	48 ff 45 f0          	incq   -0x10(%rbp)
  401642:	e9 dc fe ff ff       	jmpq   401523 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  401647:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40164b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40164f:	48 39 c2             	cmp    %rax,%rdx
  401652:	73 09                	jae    40165d <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x1a2>
	    return -1;
  401654:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  40165b:	eb 1d                	jmp    40167a <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x1bf>
	else if (s1.length > s2.length)
  40165d:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  401661:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401665:	48 39 c2             	cmp    %rax,%rdx
  401668:	76 09                	jbe    401673 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x1b8>
	    return 1;
  40166a:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  401671:	eb 07                	jmp    40167a <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x1bf>
	return 0;
  401673:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  40167a:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  40167d:	c9                   	leaveq 
  40167e:	c3                   	retq   

000000000040167f <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac5tsizeMFZm>:

    size_t tsize()
  40167f:	55                   	push   %rbp
  401680:	48 89 e5             	mov    %rsp,%rbp
  401683:	48 83 ec 10          	sub    $0x10,%rsp
  401687:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40168b:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40168f:	e8 7c 7b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (creal[]).sizeof;
  401694:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  401699:	c9                   	leaveq 
  40169a:	c3                   	retq   

000000000040169b <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac5flagsMFZk>:

    uint flags()
  40169b:	55                   	push   %rbp
  40169c:	48 89 e5             	mov    %rsp,%rbp
  40169f:	48 83 ec 10          	sub    $0x10,%rsp
  4016a3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4016a7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4016ab:	e8 60 7b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  4016b0:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  4016b5:	c9                   	leaveq 
  4016b6:	c3                   	retq   

00000000004016b7 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac4nextMFZC8TypeInfo>:

    TypeInfo next()
  4016b7:	55                   	push   %rbp
  4016b8:	48 89 e5             	mov    %rsp,%rbp
  4016bb:	48 83 ec 10          	sub    $0x10,%rsp
  4016bf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4016c3:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4016c7:	e8 44 7b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(creal);
  4016cc:	48 c7 c0 30 08 41 00 	mov    $0x410830,%rax
    }
  4016d3:	c9                   	leaveq 
  4016d4:	c3                   	retq   
  4016d5:	90                   	nop    
  4016d6:	90                   	nop    
  4016d7:	90                   	nop    

00000000004016d8 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad8toStringMFZAa>:

// double[]

class TypeInfo_Ad : TypeInfo
{
    char[] toString() { return "double[]"; }
  4016d8:	55                   	push   %rbp
  4016d9:	48 89 e5             	mov    %rsp,%rbp
  4016dc:	53                   	push   %rbx
  4016dd:	48 83 ec 08          	sub    $0x8,%rsp
  4016e1:	48 89 fb             	mov    %rdi,%rbx
  4016e4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4016e8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4016ec:	e8 1f 7b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  4016f1:	48 c7 03 08 00 00 00 	movq   $0x8,(%rbx)
  4016f8:	48 c7 43 08 60 f7 40 	movq   $0x40f760,0x8(%rbx)
  4016ff:	00 
  401700:	48 89 d8             	mov    %rbx,%rax
  401703:	48 83 c4 08          	add    $0x8,%rsp
  401707:	5b                   	pop    %rbx
  401708:	c9                   	leaveq 
  401709:	c3                   	retq   

000000000040170a <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7getHashMFPvZm>:

    hash_t getHash(void *p)
  40170a:	55                   	push   %rbp
  40170b:	48 89 e5             	mov    %rsp,%rbp
  40170e:	48 83 ec 40          	sub    $0x40,%rsp
  401712:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  401716:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  40171a:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  40171e:	e8 ed 7a 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {	double[] s = *cast(double[]*)p;
  401723:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  401727:	48 8b 02             	mov    (%rdx),%rax
  40172a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40172e:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401732:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  401736:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40173a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto str = s.ptr;
  40173e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  401742:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  401746:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40174d:	00 

	while (len)
  40174e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  401753:	0f 95 c0             	setne  %al
  401756:	83 f0 01             	xor    $0x1,%eax
  401759:	84 c0                	test   %al,%al
  40175b:	75 47                	jne    4017a4 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7getHashMFPvZm+0x9a>
	{
	    hash *= 9;
  40175d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  401761:	48 89 d0             	mov    %rdx,%rax
  401764:	48 c1 e0 03          	shl    $0x3,%rax
  401768:	48 01 d0             	add    %rdx,%rax
  40176b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[0];
  40176f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  401773:	b8 00 00 00 00       	mov    $0x0,%eax
  401778:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40177c:	8b 00                	mov    (%rax),%eax
  40177e:	89 c0                	mov    %eax,%eax
  401780:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[1];
  401784:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  401788:	b8 04 00 00 00       	mov    $0x4,%eax
  40178d:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  401791:	8b 00                	mov    (%rax),%eax
  401793:	89 c0                	mov    %eax,%eax
  401795:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  401799:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
	    len--;
  40179e:	48 ff 4d f8          	decq   -0x8(%rbp)
  4017a2:	eb aa                	jmp    40174e <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7getHashMFPvZm+0x44>
	}

	return hash;
  4017a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  4017a8:	c9                   	leaveq 
  4017a9:	c3                   	retq   

00000000004017aa <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4017aa:	55                   	push   %rbp
  4017ab:	48 89 e5             	mov    %rsp,%rbp
  4017ae:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  4017b5:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  4017b9:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  4017bd:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  4017c1:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  4017c5:	e8 46 7a 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	double[] s1 = *cast(double[]*)p1;
  4017ca:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4017ce:	48 8b 02             	mov    (%rdx),%rax
  4017d1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  4017d5:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4017d9:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	double[] s2 = *cast(double[]*)p2;
  4017dd:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4017e1:	48 8b 02             	mov    (%rdx),%rax
  4017e4:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4017e8:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4017ec:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  4017f0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4017f4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  4017f8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4017fc:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  401800:	74 0f                	je     401811 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x67>
	    return 0;
  401802:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
  401809:	00 00 00 
  40180c:	e9 13 01 00 00       	jmpq   401924 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x17a>
	for (size_t u = 0; u < len; u++)
  401811:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  401818:	00 
  401819:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40181d:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  401821:	0f 92 c0             	setb   %al
  401824:	83 f0 01             	xor    $0x1,%eax
  401827:	84 c0                	test   %al,%al
  401829:	0f 85 eb 00 00 00    	jne    40191a <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x170>
	{
	    int c = TypeInfo_d._equals(s1[u], s2[u]);
  40182f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401833:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40183a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40183e:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401842:	73 0d                	jae    401851 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0xa7>
  401844:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401848:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  40184f:	eb 22                	jmp    401873 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0xc9>
  401851:	48 c7 45 c0 19 00 00 	movq   $0x19,-0x40(%rbp)
  401858:	00 
  401859:	48 c7 45 c8 69 f7 40 	movq   $0x40f769,-0x38(%rbp)
  401860:	00 
  401861:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  401865:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  401869:	ba 3e 00 00 00       	mov    $0x3e,%edx
  40186e:	e8 66 94 00 00       	callq  40acd9 <_d_array_bounds>
  401873:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  40187a:	48 c1 e0 03          	shl    $0x3,%rax
  40187e:	48 03 85 60 ff ff ff 	add    -0xa0(%rbp),%rax
  401885:	dd 00                	fldl   (%rax)
  401887:	dd 9d 70 ff ff ff    	fstpl  -0x90(%rbp)
  40188d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401891:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  401898:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40189c:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4018a0:	73 0a                	jae    4018ac <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x102>
  4018a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4018a6:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  4018aa:	eb 22                	jmp    4018ce <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x124>
  4018ac:	48 c7 45 d0 19 00 00 	movq   $0x19,-0x30(%rbp)
  4018b3:	00 
  4018b4:	48 c7 45 d8 69 f7 40 	movq   $0x40f769,-0x28(%rbp)
  4018bb:	00 
  4018bc:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4018c0:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4018c4:	ba 3e 00 00 00       	mov    $0x3e,%edx
  4018c9:	e8 0b 94 00 00       	callq  40acd9 <_d_array_bounds>
  4018ce:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  4018d2:	48 c1 e0 03          	shl    $0x3,%rax
  4018d6:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  4018dd:	48 8b 00             	mov    (%rax),%rax
  4018e0:	66 0f 12 8d 70 ff ff 	movlpd -0x90(%rbp),%xmm1
  4018e7:	ff 
  4018e8:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  4018ef:	66 0f 12 85 48 ff ff 	movlpd -0xb8(%rbp),%xmm0
  4018f6:	ff 
  4018f7:	e8 04 34 00 00       	callq  404d00 <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi>
  4018fc:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  4018ff:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  401903:	75 0c                	jne    401911 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x167>
		return 0;
  401905:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
  40190c:	00 00 00 
  40190f:	eb 13                	jmp    401924 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x17a>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_d._equals(s1[u], s2[u]);
	    if (c == 0)
  401911:	48 ff 45 f0          	incq   -0x10(%rbp)
  401915:	e9 ff fe ff ff       	jmpq   401819 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  40191a:	c7 85 5c ff ff ff 01 	movl   $0x1,-0xa4(%rbp)
  401921:	00 00 00 
  401924:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
    }
  40192a:	c9                   	leaveq 
  40192b:	c3                   	retq   

000000000040192c <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  40192c:	55                   	push   %rbp
  40192d:	48 89 e5             	mov    %rsp,%rbp
  401930:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  401937:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40193b:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  40193f:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  401943:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  401947:	e8 c4 78 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	double[] s1 = *cast(double[]*)p1;
  40194c:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  401950:	48 8b 02             	mov    (%rdx),%rax
  401953:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  401957:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40195b:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	double[] s2 = *cast(double[]*)p2;
  40195f:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  401963:	48 8b 02             	mov    (%rdx),%rax
  401966:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40196a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40196e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  401972:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401976:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  40197a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40197e:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  401982:	73 08                	jae    40198c <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x60>
	    len = s2.length;
  401984:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401988:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  40198c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  401993:	00 
  401994:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401998:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40199c:	0f 92 c0             	setb   %al
  40199f:	83 f0 01             	xor    $0x1,%eax
  4019a2:	84 c0                	test   %al,%al
  4019a4:	0f 85 ed 00 00 00    	jne    401a97 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x16b>
	{
	    int c = TypeInfo_d._compare(s1[u], s2[u]);
  4019aa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4019ae:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  4019b5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4019b9:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4019bd:	73 0d                	jae    4019cc <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0xa0>
  4019bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4019c3:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  4019ca:	eb 22                	jmp    4019ee <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0xc2>
  4019cc:	48 c7 45 c0 19 00 00 	movq   $0x19,-0x40(%rbp)
  4019d3:	00 
  4019d4:	48 c7 45 c8 69 f7 40 	movq   $0x40f769,-0x38(%rbp)
  4019db:	00 
  4019dc:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4019e0:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4019e4:	ba 4f 00 00 00       	mov    $0x4f,%edx
  4019e9:	e8 eb 92 00 00       	callq  40acd9 <_d_array_bounds>
  4019ee:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4019f5:	48 c1 e0 03          	shl    $0x3,%rax
  4019f9:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  401a00:	dd 00                	fldl   (%rax)
  401a02:	dd 9d 68 ff ff ff    	fstpl  -0x98(%rbp)
  401a08:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401a0c:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  401a13:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401a17:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401a1b:	73 0d                	jae    401a2a <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0xfe>
  401a1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401a21:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  401a28:	eb 22                	jmp    401a4c <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x120>
  401a2a:	48 c7 45 d0 19 00 00 	movq   $0x19,-0x30(%rbp)
  401a31:	00 
  401a32:	48 c7 45 d8 69 f7 40 	movq   $0x40f769,-0x28(%rbp)
  401a39:	00 
  401a3a:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  401a3e:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  401a42:	ba 4f 00 00 00       	mov    $0x4f,%edx
  401a47:	e8 8d 92 00 00       	callq  40acd9 <_d_array_bounds>
  401a4c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  401a53:	48 c1 e0 03          	shl    $0x3,%rax
  401a57:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  401a5e:	48 8b 00             	mov    (%rax),%rax
  401a61:	66 0f 12 8d 68 ff ff 	movlpd -0x98(%rbp),%xmm1
  401a68:	ff 
  401a69:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  401a70:	66 0f 12 85 48 ff ff 	movlpd -0xb8(%rbp),%xmm0
  401a77:	ff 
  401a78:	e8 d1 32 00 00       	callq  404d4e <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi>
  401a7d:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  401a80:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  401a84:	74 08                	je     401a8e <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x162>
		return c;
  401a86:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401a89:	89 45 84             	mov    %eax,-0x7c(%rbp)
  401a8c:	eb 3c                	jmp    401aca <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x19e>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_d._compare(s1[u], s2[u]);
	    if (c)
  401a8e:	48 ff 45 f0          	incq   -0x10(%rbp)
  401a92:	e9 fd fe ff ff       	jmpq   401994 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  401a97:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  401a9b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401a9f:	48 39 c2             	cmp    %rax,%rdx
  401aa2:	73 09                	jae    401aad <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x181>
	    return -1;
  401aa4:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  401aab:	eb 1d                	jmp    401aca <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x19e>
	else if (s1.length > s2.length)
  401aad:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  401ab1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401ab5:	48 39 c2             	cmp    %rax,%rdx
  401ab8:	76 09                	jbe    401ac3 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x197>
	    return 1;
  401aba:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  401ac1:	eb 07                	jmp    401aca <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x19e>
	return 0;
  401ac3:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  401aca:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  401acd:	c9                   	leaveq 
  401ace:	c3                   	retq   

0000000000401acf <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad5tsizeMFZm>:

    size_t tsize()
  401acf:	55                   	push   %rbp
  401ad0:	48 89 e5             	mov    %rsp,%rbp
  401ad3:	48 83 ec 10          	sub    $0x10,%rsp
  401ad7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401adb:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401adf:	e8 2c 77 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (double[]).sizeof;
  401ae4:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  401ae9:	c9                   	leaveq 
  401aea:	c3                   	retq   

0000000000401aeb <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad5flagsMFZk>:

    uint flags()
  401aeb:	55                   	push   %rbp
  401aec:	48 89 e5             	mov    %rsp,%rbp
  401aef:	48 83 ec 10          	sub    $0x10,%rsp
  401af3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401af7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401afb:	e8 10 77 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  401b00:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  401b05:	c9                   	leaveq 
  401b06:	c3                   	retq   

0000000000401b07 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad4nextMFZC8TypeInfo>:

    TypeInfo next()
  401b07:	55                   	push   %rbp
  401b08:	48 89 e5             	mov    %rsp,%rbp
  401b0b:	48 83 ec 10          	sub    $0x10,%rsp
  401b0f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401b13:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401b17:	e8 f4 76 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(double);
  401b1c:	48 c7 c0 50 0a 41 00 	mov    $0x410a50,%rax
    }
  401b23:	c9                   	leaveq 
  401b24:	c3                   	retq   

0000000000401b25 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ap8toStringMFZAa>:

// idouble[]

class TypeInfo_Ap : TypeInfo_Ad
{
    char[] toString() { return "idouble[]"; }
  401b25:	55                   	push   %rbp
  401b26:	48 89 e5             	mov    %rsp,%rbp
  401b29:	53                   	push   %rbx
  401b2a:	48 83 ec 08          	sub    $0x8,%rsp
  401b2e:	48 89 fb             	mov    %rdi,%rbx
  401b31:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  401b35:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  401b39:	e8 d2 76 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  401b3e:	48 c7 03 09 00 00 00 	movq   $0x9,(%rbx)
  401b45:	48 c7 43 08 30 f8 40 	movq   $0x40f830,0x8(%rbx)
  401b4c:	00 
  401b4d:	48 89 d8             	mov    %rbx,%rax
  401b50:	48 83 c4 08          	add    $0x8,%rsp
  401b54:	5b                   	pop    %rbx
  401b55:	c9                   	leaveq 
  401b56:	c3                   	retq   

0000000000401b57 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ap4nextMFZC8TypeInfo>:

    TypeInfo next()
  401b57:	55                   	push   %rbp
  401b58:	48 89 e5             	mov    %rsp,%rbp
  401b5b:	48 83 ec 10          	sub    $0x10,%rsp
  401b5f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401b63:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401b67:	e8 a4 76 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(idouble);
  401b6c:	48 c7 c0 d0 0b 41 00 	mov    $0x410bd0,%rax
    }
  401b73:	c9                   	leaveq 
  401b74:	c3                   	retq   
  401b75:	90                   	nop    
  401b76:	90                   	nop    
  401b77:	90                   	nop    

0000000000401b78 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af8toStringMFZAa>:

// float[]

class TypeInfo_Af : TypeInfo
{
    char[] toString() { return "float[]"; }
  401b78:	55                   	push   %rbp
  401b79:	48 89 e5             	mov    %rsp,%rbp
  401b7c:	53                   	push   %rbx
  401b7d:	48 83 ec 08          	sub    $0x8,%rsp
  401b81:	48 89 fb             	mov    %rdi,%rbx
  401b84:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  401b88:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  401b8c:	e8 7f 76 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  401b91:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  401b98:	48 c7 43 08 e0 f8 40 	movq   $0x40f8e0,0x8(%rbx)
  401b9f:	00 
  401ba0:	48 89 d8             	mov    %rbx,%rax
  401ba3:	48 83 c4 08          	add    $0x8,%rsp
  401ba7:	5b                   	pop    %rbx
  401ba8:	c9                   	leaveq 
  401ba9:	c3                   	retq   

0000000000401baa <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7getHashMFPvZm>:

    hash_t getHash(void *p)
  401baa:	55                   	push   %rbp
  401bab:	48 89 e5             	mov    %rsp,%rbp
  401bae:	48 83 ec 40          	sub    $0x40,%rsp
  401bb2:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  401bb6:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  401bba:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  401bbe:	e8 4d 76 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {	float[] s = *cast(float[]*)p;
  401bc3:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  401bc7:	48 8b 02             	mov    (%rdx),%rax
  401bca:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  401bce:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401bd2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  401bd6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  401bda:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto str = s.ptr;
  401bde:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  401be2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  401be6:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  401bed:	00 

	while (len)
  401bee:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  401bf3:	0f 95 c0             	setne  %al
  401bf6:	83 f0 01             	xor    $0x1,%eax
  401bf9:	84 c0                	test   %al,%al
  401bfb:	75 29                	jne    401c26 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7getHashMFPvZm+0x7c>
	{
	    hash *= 9;
  401bfd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  401c01:	48 89 d0             	mov    %rdx,%rax
  401c04:	48 c1 e0 03          	shl    $0x3,%rax
  401c08:	48 01 d0             	add    %rdx,%rax
  401c0b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += *cast(uint *)str;
  401c0f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401c13:	8b 00                	mov    (%rax),%eax
  401c15:	89 c0                	mov    %eax,%eax
  401c17:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  401c1b:	48 83 45 f0 04       	addq   $0x4,-0x10(%rbp)
	    len--;
  401c20:	48 ff 4d f8          	decq   -0x8(%rbp)
  401c24:	eb c8                	jmp    401bee <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7getHashMFPvZm+0x44>
	}

	return hash;
  401c26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  401c2a:	c9                   	leaveq 
  401c2b:	c3                   	retq   

0000000000401c2c <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  401c2c:	55                   	push   %rbp
  401c2d:	48 89 e5             	mov    %rsp,%rbp
  401c30:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  401c37:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  401c3b:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  401c3f:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  401c43:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  401c47:	e8 c4 75 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	float[] s1 = *cast(float[]*)p1;
  401c4c:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  401c50:	48 8b 02             	mov    (%rdx),%rax
  401c53:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  401c57:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401c5b:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	float[] s2 = *cast(float[]*)p2;
  401c5f:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  401c63:	48 8b 02             	mov    (%rdx),%rax
  401c66:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  401c6a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401c6e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  401c72:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401c76:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  401c7a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401c7e:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  401c82:	74 0f                	je     401c93 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x67>
	    return 0;
  401c84:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
  401c8b:	00 00 00 
  401c8e:	e9 11 01 00 00       	jmpq   401da4 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x178>
	for (size_t u = 0; u < len; u++)
  401c93:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  401c9a:	00 
  401c9b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401c9f:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  401ca3:	0f 92 c0             	setb   %al
  401ca6:	83 f0 01             	xor    $0x1,%eax
  401ca9:	84 c0                	test   %al,%al
  401cab:	0f 85 e9 00 00 00    	jne    401d9a <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x16e>
	{
	    int c = TypeInfo_f._equals(s1[u], s2[u]);
  401cb1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401cb5:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  401cbc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401cc0:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401cc4:	73 0d                	jae    401cd3 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0xa7>
  401cc6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401cca:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  401cd1:	eb 22                	jmp    401cf5 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0xc9>
  401cd3:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  401cda:	00 
  401cdb:	48 c7 45 c8 e8 f8 40 	movq   $0x40f8e8,-0x38(%rbp)
  401ce2:	00 
  401ce3:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  401ce7:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  401ceb:	ba 3d 00 00 00       	mov    $0x3d,%edx
  401cf0:	e8 e4 8f 00 00       	callq  40acd9 <_d_array_bounds>
  401cf5:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  401cfc:	48 c1 e0 02          	shl    $0x2,%rax
  401d00:	48 03 85 60 ff ff ff 	add    -0xa0(%rbp),%rax
  401d07:	d9 00                	flds   (%rax)
  401d09:	d9 9d 74 ff ff ff    	fstps  -0x8c(%rbp)
  401d0f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401d13:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  401d1a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401d1e:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401d22:	73 0a                	jae    401d2e <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x102>
  401d24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401d28:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  401d2c:	eb 22                	jmp    401d50 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x124>
  401d2e:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  401d35:	00 
  401d36:	48 c7 45 d8 e8 f8 40 	movq   $0x40f8e8,-0x28(%rbp)
  401d3d:	00 
  401d3e:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  401d42:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  401d46:	ba 3d 00 00 00       	mov    $0x3d,%edx
  401d4b:	e8 89 8f 00 00       	callq  40acd9 <_d_array_bounds>
  401d50:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  401d54:	48 c1 e0 02          	shl    $0x2,%rax
  401d58:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  401d5f:	8b 00                	mov    (%rax),%eax
  401d61:	f3 0f 10 8d 74 ff ff 	movss  -0x8c(%rbp),%xmm1
  401d68:	ff 
  401d69:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  401d6f:	f3 0f 10 85 4c ff ff 	movss  -0xb4(%rbp),%xmm0
  401d76:	ff 
  401d77:	e8 15 32 00 00       	callq  404f91 <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi>
  401d7c:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  401d7f:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  401d83:	75 0c                	jne    401d91 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x165>
		return 0;
  401d85:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
  401d8c:	00 00 00 
  401d8f:	eb 13                	jmp    401da4 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x178>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_f._equals(s1[u], s2[u]);
	    if (c == 0)
  401d91:	48 ff 45 f0          	incq   -0x10(%rbp)
  401d95:	e9 01 ff ff ff       	jmpq   401c9b <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  401d9a:	c7 85 5c ff ff ff 01 	movl   $0x1,-0xa4(%rbp)
  401da1:	00 00 00 
  401da4:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
    }
  401daa:	c9                   	leaveq 
  401dab:	c3                   	retq   

0000000000401dac <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  401dac:	55                   	push   %rbp
  401dad:	48 89 e5             	mov    %rsp,%rbp
  401db0:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  401db7:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  401dbb:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  401dbf:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  401dc3:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  401dc7:	e8 44 74 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	float[] s1 = *cast(float[]*)p1;
  401dcc:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  401dd0:	48 8b 02             	mov    (%rdx),%rax
  401dd3:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  401dd7:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401ddb:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	float[] s2 = *cast(float[]*)p2;
  401ddf:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  401de3:	48 8b 02             	mov    (%rdx),%rax
  401de6:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  401dea:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401dee:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  401df2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401df6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  401dfa:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401dfe:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  401e02:	73 08                	jae    401e0c <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x60>
	    len = s2.length;
  401e04:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401e08:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  401e0c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  401e13:	00 
  401e14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401e18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  401e1c:	0f 92 c0             	setb   %al
  401e1f:	83 f0 01             	xor    $0x1,%eax
  401e22:	84 c0                	test   %al,%al
  401e24:	0f 85 eb 00 00 00    	jne    401f15 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x169>
	{
	    int c = TypeInfo_f._compare(s1[u], s2[u]);
  401e2a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401e2e:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  401e35:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401e39:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401e3d:	73 0d                	jae    401e4c <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0xa0>
  401e3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401e43:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  401e4a:	eb 22                	jmp    401e6e <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0xc2>
  401e4c:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  401e53:	00 
  401e54:	48 c7 45 c8 e8 f8 40 	movq   $0x40f8e8,-0x38(%rbp)
  401e5b:	00 
  401e5c:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  401e60:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  401e64:	ba 4e 00 00 00       	mov    $0x4e,%edx
  401e69:	e8 6b 8e 00 00       	callq  40acd9 <_d_array_bounds>
  401e6e:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  401e75:	48 c1 e0 02          	shl    $0x2,%rax
  401e79:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  401e80:	d9 00                	flds   (%rax)
  401e82:	d9 9d 6c ff ff ff    	fstps  -0x94(%rbp)
  401e88:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401e8c:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  401e93:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401e97:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401e9b:	73 0d                	jae    401eaa <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0xfe>
  401e9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401ea1:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  401ea8:	eb 22                	jmp    401ecc <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x120>
  401eaa:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  401eb1:	00 
  401eb2:	48 c7 45 d8 e8 f8 40 	movq   $0x40f8e8,-0x28(%rbp)
  401eb9:	00 
  401eba:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  401ebe:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  401ec2:	ba 4e 00 00 00       	mov    $0x4e,%edx
  401ec7:	e8 0d 8e 00 00       	callq  40acd9 <_d_array_bounds>
  401ecc:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  401ed3:	48 c1 e0 02          	shl    $0x2,%rax
  401ed7:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  401ede:	8b 00                	mov    (%rax),%eax
  401ee0:	f3 0f 10 8d 6c ff ff 	movss  -0x94(%rbp),%xmm1
  401ee7:	ff 
  401ee8:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  401eee:	f3 0f 10 85 4c ff ff 	movss  -0xb4(%rbp),%xmm0
  401ef5:	ff 
  401ef6:	e8 e3 30 00 00       	callq  404fde <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi>
  401efb:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  401efe:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  401f02:	74 08                	je     401f0c <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x160>
		return c;
  401f04:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401f07:	89 45 84             	mov    %eax,-0x7c(%rbp)
  401f0a:	eb 3c                	jmp    401f48 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x19c>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_f._compare(s1[u], s2[u]);
	    if (c)
  401f0c:	48 ff 45 f0          	incq   -0x10(%rbp)
  401f10:	e9 ff fe ff ff       	jmpq   401e14 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  401f15:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  401f19:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401f1d:	48 39 c2             	cmp    %rax,%rdx
  401f20:	73 09                	jae    401f2b <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x17f>
	    return -1;
  401f22:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  401f29:	eb 1d                	jmp    401f48 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x19c>
	else if (s1.length > s2.length)
  401f2b:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  401f2f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401f33:	48 39 c2             	cmp    %rax,%rdx
  401f36:	76 09                	jbe    401f41 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x195>
	    return 1;
  401f38:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  401f3f:	eb 07                	jmp    401f48 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x19c>
	return 0;
  401f41:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  401f48:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  401f4b:	c9                   	leaveq 
  401f4c:	c3                   	retq   

0000000000401f4d <_D3std8typeinfo9ti_Afloat11TypeInfo_Af5tsizeMFZm>:

    size_t tsize()
  401f4d:	55                   	push   %rbp
  401f4e:	48 89 e5             	mov    %rsp,%rbp
  401f51:	48 83 ec 10          	sub    $0x10,%rsp
  401f55:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401f59:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401f5d:	e8 ae 72 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (float[]).sizeof;
  401f62:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  401f67:	c9                   	leaveq 
  401f68:	c3                   	retq   

0000000000401f69 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af5flagsMFZk>:

    uint flags()
  401f69:	55                   	push   %rbp
  401f6a:	48 89 e5             	mov    %rsp,%rbp
  401f6d:	48 83 ec 10          	sub    $0x10,%rsp
  401f71:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401f75:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401f79:	e8 92 72 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  401f7e:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  401f83:	c9                   	leaveq 
  401f84:	c3                   	retq   

0000000000401f85 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af4nextMFZC8TypeInfo>:

    TypeInfo next()
  401f85:	55                   	push   %rbp
  401f86:	48 89 e5             	mov    %rsp,%rbp
  401f89:	48 83 ec 10          	sub    $0x10,%rsp
  401f8d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401f91:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401f95:	e8 76 72 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(float);
  401f9a:	48 c7 c0 10 0b 41 00 	mov    $0x410b10,%rax
    }
  401fa1:	c9                   	leaveq 
  401fa2:	c3                   	retq   

0000000000401fa3 <_D3std8typeinfo9ti_Afloat11TypeInfo_Ao8toStringMFZAa>:

// ifloat[]

class TypeInfo_Ao : TypeInfo_Af
{
    char[] toString() { return "ifloat[]"; }
  401fa3:	55                   	push   %rbp
  401fa4:	48 89 e5             	mov    %rsp,%rbp
  401fa7:	53                   	push   %rbx
  401fa8:	48 83 ec 08          	sub    $0x8,%rsp
  401fac:	48 89 fb             	mov    %rdi,%rbx
  401faf:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  401fb3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  401fb7:	e8 54 72 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  401fbc:	48 c7 03 08 00 00 00 	movq   $0x8,(%rbx)
  401fc3:	48 c7 43 08 b0 f9 40 	movq   $0x40f9b0,0x8(%rbx)
  401fca:	00 
  401fcb:	48 89 d8             	mov    %rbx,%rax
  401fce:	48 83 c4 08          	add    $0x8,%rsp
  401fd2:	5b                   	pop    %rbx
  401fd3:	c9                   	leaveq 
  401fd4:	c3                   	retq   

0000000000401fd5 <_D3std8typeinfo9ti_Afloat11TypeInfo_Ao4nextMFZC8TypeInfo>:

    TypeInfo next()
  401fd5:	55                   	push   %rbp
  401fd6:	48 89 e5             	mov    %rsp,%rbp
  401fd9:	48 83 ec 10          	sub    $0x10,%rsp
  401fdd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401fe1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401fe5:	e8 26 72 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(ifloat);
  401fea:	48 c7 c0 90 0c 41 00 	mov    $0x410c90,%rax
    }
  401ff1:	c9                   	leaveq 
  401ff2:	c3                   	retq   
  401ff3:	90                   	nop    

0000000000401ff4 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag8toStringMFZAa>:
import kernel.core.system;
// byte[]

class TypeInfo_Ag : TypeInfo
{
    char[] toString() { return "byte[]"; }
  401ff4:	55                   	push   %rbp
  401ff5:	48 89 e5             	mov    %rsp,%rbp
  401ff8:	53                   	push   %rbx
  401ff9:	48 83 ec 08          	sub    $0x8,%rsp
  401ffd:	48 89 fb             	mov    %rdi,%rbx
  402000:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402004:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402008:	e8 03 72 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  40200d:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  402014:	48 c7 43 08 60 fa 40 	movq   $0x40fa60,0x8(%rbx)
  40201b:	00 
  40201c:	48 89 d8             	mov    %rbx,%rax
  40201f:	48 83 c4 08          	add    $0x8,%rsp
  402023:	5b                   	pop    %rbx
  402024:	c9                   	leaveq 
  402025:	c3                   	retq   

0000000000402026 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm>:

    hash_t getHash(void *p)
  402026:	55                   	push   %rbp
  402027:	48 89 e5             	mov    %rsp,%rbp
  40202a:	48 83 ec 50          	sub    $0x50,%rsp
  40202e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  402032:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  402036:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  40203a:	e8 d1 71 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {	byte[] s = *cast(byte[]*)p;
  40203f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  402043:	48 8b 02             	mov    (%rdx),%rax
  402046:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40204a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40204e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  402052:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  402056:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	byte *str = s.ptr;
  40205a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40205e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  402062:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  402069:	00 

	while (1)
  40206a:	b8 00 00 00 00       	mov    $0x0,%eax
  40206f:	84 c0                	test   %al,%al
  402071:	0f 85 01 01 00 00    	jne    402178 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x152>
		default:
		    hash *= 9;
		    hash += *cast(uint *)str;
		    str += 4;
		    len -= 4;
		    break;
  402077:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40207b:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40207f:	48 83 7d b0 01       	cmpq   $0x1,-0x50(%rbp)
  402084:	74 27                	je     4020ad <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x87>
  402086:	48 83 7d b0 01       	cmpq   $0x1,-0x50(%rbp)
  40208b:	72 13                	jb     4020a0 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x7a>
  40208d:	48 83 7d b0 02       	cmpq   $0x2,-0x50(%rbp)
  402092:	74 46                	je     4020da <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0xb4>
  402094:	48 83 7d b0 03       	cmpq   $0x3,-0x50(%rbp)
  402099:	74 69                	je     402104 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0xde>
  40209b:	e9 ab 00 00 00       	jmpq   40214b <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x125>
	while (1)
	{
	    switch (len)
	    {
		case 0:
		    return hash;
  4020a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4020a4:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  4020a8:	e9 d3 00 00 00       	jmpq   402180 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x15a>

		case 1:
		    hash *= 9;
  4020ad:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4020b1:	48 89 d0             	mov    %rdx,%rax
  4020b4:	48 c1 e0 03          	shl    $0x3,%rax
  4020b8:	48 01 d0             	add    %rdx,%rax
  4020bb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += *cast(ubyte *)str;
  4020bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4020c3:	0f b6 00             	movzbl (%rax),%eax
  4020c6:	0f b6 c0             	movzbl %al,%eax
  4020c9:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		    return hash;
  4020cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4020d1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  4020d5:	e9 a6 00 00 00       	jmpq   402180 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x15a>

		case 2:
		    hash *= 9;
  4020da:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4020de:	48 89 d0             	mov    %rdx,%rax
  4020e1:	48 c1 e0 03          	shl    $0x3,%rax
  4020e5:	48 01 d0             	add    %rdx,%rax
  4020e8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += *cast(ushort *)str;
  4020ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4020f0:	0f b7 00             	movzwl (%rax),%eax
  4020f3:	0f b7 c0             	movzwl %ax,%eax
  4020f6:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		    return hash;
  4020fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4020fe:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  402102:	eb 7c                	jmp    402180 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x15a>

		case 3:
		    hash *= 9;
  402104:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  402108:	48 89 d0             	mov    %rdx,%rax
  40210b:	48 c1 e0 03          	shl    $0x3,%rax
  40210f:	48 01 d0             	add    %rdx,%rax
  402112:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += (*cast(ushort *)str << 8) +
  402116:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40211a:	0f b7 00             	movzwl (%rax),%eax
  40211d:	0f b7 c0             	movzwl %ax,%eax
  402120:	89 c1                	mov    %eax,%ecx
  402122:	c1 e1 08             	shl    $0x8,%ecx
  402125:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  402129:	b8 02 00 00 00       	mov    $0x2,%eax
  40212e:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  402132:	0f b6 00             	movzbl (%rax),%eax
  402135:	0f b6 c0             	movzbl %al,%eax
  402138:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  40213b:	48 98                	cltq   
  40213d:	48 01 45 e8          	add    %rax,-0x18(%rbp)
			    (cast(ubyte *)str)[2];
		    return hash;
  402141:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402145:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  402149:	eb 35                	jmp    402180 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x15a>

		default:
		    hash *= 9;
  40214b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40214f:	48 89 d0             	mov    %rdx,%rax
  402152:	48 c1 e0 03          	shl    $0x3,%rax
  402156:	48 01 d0             	add    %rdx,%rax
  402159:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += *cast(uint *)str;
  40215d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402161:	8b 00                	mov    (%rax),%eax
  402163:	89 c0                	mov    %eax,%eax
  402165:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		    str += 4;
  402169:	48 83 45 f0 04       	addq   $0x4,-0x10(%rbp)
		    len -= 4;
  40216e:	48 83 6d f8 04       	subq   $0x4,-0x8(%rbp)
		    break;
  402173:	e9 f2 fe ff ff       	jmpq   40206a <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x44>
	    }
	}

	return hash;
  402178:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40217c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  402180:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    }
  402184:	c9                   	leaveq 
  402185:	c3                   	retq   

0000000000402186 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  402186:	55                   	push   %rbp
  402187:	48 89 e5             	mov    %rsp,%rbp
  40218a:	48 83 ec 40          	sub    $0x40,%rsp
  40218e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  402192:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  402196:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40219a:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  40219e:	e8 6d 70 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ubyte[] s1 = *cast(ubyte[]*)p1;
  4021a3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4021a7:	48 8b 02             	mov    (%rdx),%rax
  4021aa:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4021ae:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4021b2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	ubyte[] s2 = *cast(ubyte[]*)p2;
  4021b6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4021ba:	48 8b 02             	mov    (%rdx),%rax
  4021bd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4021c1:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4021c5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return s1.length == s2.length &&
  4021c9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4021cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4021d1:	48 39 c2             	cmp    %rax,%rdx
  4021d4:	75 1c                	jne    4021f2 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag6equalsMFPvPvZi+0x6c>
  4021d6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4021da:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  4021de:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4021e2:	e8 61 b5 00 00       	callq  40d748 <_D6kernel4core6system6memcmpFPvPvmZl>
  4021e7:	48 85 c0             	test   %rax,%rax
  4021ea:	75 06                	jne    4021f2 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag6equalsMFPvPvZi+0x6c>
  4021ec:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
  4021f0:	eb 04                	jmp    4021f6 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag6equalsMFPvPvZi+0x70>
  4021f2:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  4021f6:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
	       memcmp(s1.ptr, s2.ptr, s1.length) == 0;
    }
  4021fa:	c9                   	leaveq 
  4021fb:	c3                   	retq   

00000000004021fc <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4021fc:	55                   	push   %rbp
  4021fd:	48 89 e5             	mov    %rsp,%rbp
  402200:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  402207:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40220b:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  40220f:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  402213:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  402217:	e8 f4 6f 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	byte[] s1 = *cast(byte[]*)p1;
  40221c:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  402220:	48 8b 02             	mov    (%rdx),%rax
  402223:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  402227:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40222b:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	byte[] s2 = *cast(byte[]*)p2;
  40222f:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  402233:	48 8b 02             	mov    (%rdx),%rax
  402236:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40223a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40223e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  402242:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402246:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  40224a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40224e:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  402252:	73 08                	jae    40225c <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x60>
	    len = s2.length;
  402254:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402258:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  40225c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  402263:	00 
  402264:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402268:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40226c:	0f 92 c0             	setb   %al
  40226f:	83 f0 01             	xor    $0x1,%eax
  402272:	84 c0                	test   %al,%al
  402274:	0f 85 da 00 00 00    	jne    402354 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x158>
	{
	    int result = s1[u] - s2[u];
  40227a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40227e:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  402285:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402289:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40228d:	73 0d                	jae    40229c <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0xa0>
  40228f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  402293:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  40229a:	eb 22                	jmp    4022be <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0xc2>
  40229c:	48 c7 45 c0 14 00 00 	movq   $0x14,-0x40(%rbp)
  4022a3:	00 
  4022a4:	48 c7 45 c8 67 fa 40 	movq   $0x40fa67,-0x38(%rbp)
  4022ab:	00 
  4022ac:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4022b0:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4022b4:	ba 46 00 00 00       	mov    $0x46,%edx
  4022b9:	e8 1b 8a 00 00       	callq  40acd9 <_d_array_bounds>
  4022be:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4022c5:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  4022cc:	0f b6 00             	movzbl (%rax),%eax
  4022cf:	0f be c0             	movsbl %al,%eax
  4022d2:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  4022d8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4022dc:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  4022e3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4022e7:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4022eb:	73 0d                	jae    4022fa <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0xfe>
  4022ed:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4022f1:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  4022f8:	eb 22                	jmp    40231c <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x120>
  4022fa:	48 c7 45 d0 14 00 00 	movq   $0x14,-0x30(%rbp)
  402301:	00 
  402302:	48 c7 45 d8 67 fa 40 	movq   $0x40fa67,-0x28(%rbp)
  402309:	00 
  40230a:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40230e:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  402312:	ba 46 00 00 00       	mov    $0x46,%edx
  402317:	e8 bd 89 00 00       	callq  40acd9 <_d_array_bounds>
  40231c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  402323:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  40232a:	0f b6 00             	movzbl (%rax),%eax
  40232d:	0f be c0             	movsbl %al,%eax
  402330:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  402336:	29 c2                	sub    %eax,%edx
  402338:	89 d0                	mov    %edx,%eax
  40233a:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (result)
  40233d:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  402341:	74 08                	je     40234b <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x14f>
		return result;
  402343:	8b 45 fc             	mov    -0x4(%rbp),%eax
  402346:	89 45 84             	mov    %eax,-0x7c(%rbp)
  402349:	eb 3c                	jmp    402387 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x18b>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int result = s1[u] - s2[u];
	    if (result)
  40234b:	48 ff 45 f0          	incq   -0x10(%rbp)
  40234f:	e9 10 ff ff ff       	jmpq   402264 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x68>
		return result;
	}
	if (s1.length < s2.length)
  402354:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  402358:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40235c:	48 39 c2             	cmp    %rax,%rdx
  40235f:	73 09                	jae    40236a <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x16e>
	    return -1;
  402361:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  402368:	eb 1d                	jmp    402387 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x18b>
	else if (s1.length > s2.length)
  40236a:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40236e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402372:	48 39 c2             	cmp    %rax,%rdx
  402375:	76 09                	jbe    402380 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x184>
	    return 1;
  402377:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  40237e:	eb 07                	jmp    402387 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x18b>
	return 0;
  402380:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  402387:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  40238a:	c9                   	leaveq 
  40238b:	c3                   	retq   

000000000040238c <_D3std8typeinfo5ti_Ag11TypeInfo_Ag5tsizeMFZm>:

    size_t tsize()
  40238c:	55                   	push   %rbp
  40238d:	48 89 e5             	mov    %rsp,%rbp
  402390:	48 83 ec 10          	sub    $0x10,%rsp
  402394:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402398:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40239c:	e8 6f 6e 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (byte[]).sizeof;
  4023a1:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  4023a6:	c9                   	leaveq 
  4023a7:	c3                   	retq   

00000000004023a8 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag5flagsMFZk>:

    uint flags()
  4023a8:	55                   	push   %rbp
  4023a9:	48 89 e5             	mov    %rsp,%rbp
  4023ac:	48 83 ec 10          	sub    $0x10,%rsp
  4023b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4023b4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4023b8:	e8 53 6e 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  4023bd:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  4023c2:	c9                   	leaveq 
  4023c3:	c3                   	retq   

00000000004023c4 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag4nextMFZC8TypeInfo>:

    TypeInfo next()
  4023c4:	55                   	push   %rbp
  4023c5:	48 89 e5             	mov    %rsp,%rbp
  4023c8:	48 83 ec 10          	sub    $0x10,%rsp
  4023cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4023d0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4023d4:	e8 37 6e 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(byte);
  4023d9:	48 c7 c0 90 04 41 00 	mov    $0x410490,%rax
    }
  4023e0:	c9                   	leaveq 
  4023e1:	c3                   	retq   

00000000004023e2 <_D3std8typeinfo5ti_Ag11TypeInfo_Ah8toStringMFZAa>:

// ubyte[]

class TypeInfo_Ah : TypeInfo_Ag
{
    char[] toString() { return "ubyte[]"; }
  4023e2:	55                   	push   %rbp
  4023e3:	48 89 e5             	mov    %rsp,%rbp
  4023e6:	53                   	push   %rbx
  4023e7:	48 83 ec 08          	sub    $0x8,%rsp
  4023eb:	48 89 fb             	mov    %rdi,%rbx
  4023ee:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4023f2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4023f6:	e8 15 6e 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  4023fb:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  402402:	48 c7 43 08 10 fb 40 	movq   $0x40fb10,0x8(%rbx)
  402409:	00 
  40240a:	48 89 d8             	mov    %rbx,%rax
  40240d:	48 83 c4 08          	add    $0x8,%rsp
  402411:	5b                   	pop    %rbx
  402412:	c9                   	leaveq 
  402413:	c3                   	retq   

0000000000402414 <_D3std8typeinfo5ti_Ag11TypeInfo_Ah7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  402414:	55                   	push   %rbp
  402415:	48 89 e5             	mov    %rsp,%rbp
  402418:	48 83 ec 40          	sub    $0x40,%rsp
  40241c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  402420:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  402424:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  402428:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  40242c:	e8 df 6d 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ubyte[] s1 = *cast(ubyte[]*)p1;
  402431:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  402435:	48 8b 02             	mov    (%rdx),%rax
  402438:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40243c:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402440:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	ubyte[] s2 = *cast(ubyte[]*)p2;
  402444:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  402448:	48 8b 02             	mov    (%rdx),%rax
  40244b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40244f:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402453:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return memcmp(s1.ptr, s2.ptr, s1.length);
  402457:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40245b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40245f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  402463:	e8 e0 b2 00 00       	callq  40d748 <_D6kernel4core6system6memcmpFPvPvmZl>
    }
  402468:	c9                   	leaveq 
  402469:	c3                   	retq   

000000000040246a <_D3std8typeinfo5ti_Ag11TypeInfo_Ah4nextMFZC8TypeInfo>:

    TypeInfo next()
  40246a:	55                   	push   %rbp
  40246b:	48 89 e5             	mov    %rsp,%rbp
  40246e:	48 83 ec 10          	sub    $0x10,%rsp
  402472:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402476:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40247a:	e8 91 6d 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(ubyte);
  40247f:	48 c7 c0 b0 11 41 00 	mov    $0x4111b0,%rax
    }
  402486:	c9                   	leaveq 
  402487:	c3                   	retq   

0000000000402488 <_D3std8typeinfo5ti_Ag11TypeInfo_Av8toStringMFZAa>:

// void[]

class TypeInfo_Av : TypeInfo_Ah
{
    char[] toString() { return "void[]"; }
  402488:	55                   	push   %rbp
  402489:	48 89 e5             	mov    %rsp,%rbp
  40248c:	53                   	push   %rbx
  40248d:	48 83 ec 08          	sub    $0x8,%rsp
  402491:	48 89 fb             	mov    %rdi,%rbx
  402494:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402498:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40249c:	e8 6f 6d 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  4024a1:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  4024a8:	48 c7 43 08 b0 fb 40 	movq   $0x40fbb0,0x8(%rbx)
  4024af:	00 
  4024b0:	48 89 d8             	mov    %rbx,%rax
  4024b3:	48 83 c4 08          	add    $0x8,%rsp
  4024b7:	5b                   	pop    %rbx
  4024b8:	c9                   	leaveq 
  4024b9:	c3                   	retq   

00000000004024ba <_D3std8typeinfo5ti_Ag11TypeInfo_Av4nextMFZC8TypeInfo>:

    TypeInfo next()
  4024ba:	55                   	push   %rbp
  4024bb:	48 89 e5             	mov    %rsp,%rbp
  4024be:	48 83 ec 10          	sub    $0x10,%rsp
  4024c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4024c6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4024ca:	e8 41 6d 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(void);
  4024cf:	48 c7 c0 60 15 41 00 	mov    $0x411560,%rax
    }
  4024d6:	c9                   	leaveq 
  4024d7:	c3                   	retq   

00000000004024d8 <_D3std8typeinfo5ti_Ag11TypeInfo_Ab8toStringMFZAa>:

// bool[]

class TypeInfo_Ab : TypeInfo_Ah
{
    char[] toString() { return "bool[]"; }
  4024d8:	55                   	push   %rbp
  4024d9:	48 89 e5             	mov    %rsp,%rbp
  4024dc:	53                   	push   %rbx
  4024dd:	48 83 ec 08          	sub    $0x8,%rsp
  4024e1:	48 89 fb             	mov    %rdi,%rbx
  4024e4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4024e8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4024ec:	e8 1f 6d 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  4024f1:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  4024f8:	48 c7 43 08 50 fc 40 	movq   $0x40fc50,0x8(%rbx)
  4024ff:	00 
  402500:	48 89 d8             	mov    %rbx,%rax
  402503:	48 83 c4 08          	add    $0x8,%rsp
  402507:	5b                   	pop    %rbx
  402508:	c9                   	leaveq 
  402509:	c3                   	retq   

000000000040250a <_D3std8typeinfo5ti_Ag11TypeInfo_Ab4nextMFZC8TypeInfo>:

    TypeInfo next()
  40250a:	55                   	push   %rbp
  40250b:	48 89 e5             	mov    %rsp,%rbp
  40250e:	48 83 ec 10          	sub    $0x10,%rsp
  402512:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402516:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40251a:	e8 f1 6c 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(bool);
  40251f:	48 c7 c0 60 12 41 00 	mov    $0x411260,%rax
    }
  402526:	c9                   	leaveq 
  402527:	c3                   	retq   

0000000000402528 <_D3std8typeinfo5ti_Ag11TypeInfo_Aa8toStringMFZAa>:

// char[]

class TypeInfo_Aa : TypeInfo_Ag
{
    char[] toString() { return "char[]"; }
  402528:	55                   	push   %rbp
  402529:	48 89 e5             	mov    %rsp,%rbp
  40252c:	53                   	push   %rbx
  40252d:	48 83 ec 08          	sub    $0x8,%rsp
  402531:	48 89 fb             	mov    %rdi,%rbx
  402534:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402538:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40253c:	e8 cf 6c 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  402541:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  402548:	48 c7 43 08 f0 fc 40 	movq   $0x40fcf0,0x8(%rbx)
  40254f:	00 
  402550:	48 89 d8             	mov    %rbx,%rax
  402553:	48 83 c4 08          	add    $0x8,%rsp
  402557:	5b                   	pop    %rbx
  402558:	c9                   	leaveq 
  402559:	c3                   	retq   

000000000040255a <_D3std8typeinfo5ti_Ag11TypeInfo_Aa7getHashMFPvZm>:

    hash_t getHash(void *p)
  40255a:	55                   	push   %rbp
  40255b:	48 89 e5             	mov    %rsp,%rbp
  40255e:	48 83 ec 50          	sub    $0x50,%rsp
  402562:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  402566:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  40256a:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  40256e:	e8 9d 6c 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {	char[] s = *cast(char[]*)p;
  402573:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  402577:	48 8b 02             	mov    (%rdx),%rax
  40257a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40257e:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402582:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	hash_t hash = 0;
  402586:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40258d:	00 

version (all)
{
	foreach (char c; s)
  40258e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402592:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  402596:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40259a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40259e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4025a2:	48 03 45 b8          	add    -0x48(%rbp),%rax
  4025a6:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4025aa:	0f 95 c0             	setne  %al
  4025ad:	83 f0 01             	xor    $0x1,%eax
  4025b0:	84 c0                	test   %al,%al
  4025b2:	75 3c                	jne    4025f0 <_D3std8typeinfo5ti_Ag11TypeInfo_Aa7getHashMFPvZm+0x96>
  4025b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4025b8:	0f b6 00             	movzbl (%rax),%eax
  4025bb:	88 45 ff             	mov    %al,-0x1(%rbp)
	    hash = hash * 11 + c;
  4025be:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4025c2:	48 89 c8             	mov    %rcx,%rax
  4025c5:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  4025cc:	00 
  4025cd:	48 8d 04 95 00 00 00 	lea    0x0(,%rdx,4),%rax
  4025d4:	00 
  4025d5:	48 29 d0             	sub    %rdx,%rax
  4025d8:	48 89 c2             	mov    %rax,%rdx
  4025db:	48 29 ca             	sub    %rcx,%rdx
  4025de:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  4025e2:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4025e6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4025ea:	48 ff 45 f0          	incq   -0x10(%rbp)
  4025ee:	eb ae                	jmp    40259e <_D3std8typeinfo5ti_Ag11TypeInfo_Aa7getHashMFPvZm+0x44>
		    len -= 4;
		    break;
	    }
	}
}
	return hash;
  4025f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  4025f4:	c9                   	leaveq 
  4025f5:	c3                   	retq   

00000000004025f6 <_D3std8typeinfo5ti_Ag11TypeInfo_Aa4nextMFZC8TypeInfo>:

    TypeInfo next()
  4025f6:	55                   	push   %rbp
  4025f7:	48 89 e5             	mov    %rsp,%rbp
  4025fa:	48 83 ec 10          	sub    $0x10,%rsp
  4025fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402602:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402606:	e8 05 6c 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(char);
  40260b:	48 c7 c0 70 07 41 00 	mov    $0x410770,%rax
    }
  402612:	c9                   	leaveq 
  402613:	c3                   	retq   

0000000000402614 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai8toStringMFZAa>:

// int[]

class TypeInfo_Ai : TypeInfo
{
    char[] toString() { return "int[]"; }
  402614:	55                   	push   %rbp
  402615:	48 89 e5             	mov    %rsp,%rbp
  402618:	53                   	push   %rbx
  402619:	48 83 ec 08          	sub    $0x8,%rsp
  40261d:	48 89 fb             	mov    %rdi,%rbx
  402620:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402624:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402628:	e8 e3 6b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  40262d:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  402634:	48 c7 43 08 a0 fd 40 	movq   $0x40fda0,0x8(%rbx)
  40263b:	00 
  40263c:	48 89 d8             	mov    %rbx,%rax
  40263f:	48 83 c4 08          	add    $0x8,%rsp
  402643:	5b                   	pop    %rbx
  402644:	c9                   	leaveq 
  402645:	c3                   	retq   

0000000000402646 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7getHashMFPvZm>:

    hash_t getHash(void *p)
  402646:	55                   	push   %rbp
  402647:	48 89 e5             	mov    %rsp,%rbp
  40264a:	48 83 ec 40          	sub    $0x40,%rsp
  40264e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  402652:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  402656:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  40265a:	e8 b1 6b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {	int[] s = *cast(int[]*)p;
  40265f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  402663:	48 8b 02             	mov    (%rdx),%rax
  402666:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40266a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40266e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	auto len = s.length;
  402672:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  402676:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto str = s.ptr;
  40267a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40267e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  402682:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  402689:	00 

	while (len)
  40268a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40268f:	0f 95 c0             	setne  %al
  402692:	83 f0 01             	xor    $0x1,%eax
  402695:	84 c0                	test   %al,%al
  402697:	75 29                	jne    4026c2 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7getHashMFPvZm+0x7c>
	{
	    hash *= 9;
  402699:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40269d:	48 89 d0             	mov    %rdx,%rax
  4026a0:	48 c1 e0 03          	shl    $0x3,%rax
  4026a4:	48 01 d0             	add    %rdx,%rax
  4026a7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += *cast(uint *)str;
  4026ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4026af:	8b 00                	mov    (%rax),%eax
  4026b1:	89 c0                	mov    %eax,%eax
  4026b3:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  4026b7:	48 83 45 f0 04       	addq   $0x4,-0x10(%rbp)
	    len--;
  4026bc:	48 ff 4d f8          	decq   -0x8(%rbp)
  4026c0:	eb c8                	jmp    40268a <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7getHashMFPvZm+0x44>
	}

	return hash;
  4026c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  4026c6:	c9                   	leaveq 
  4026c7:	c3                   	retq   

00000000004026c8 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4026c8:	55                   	push   %rbp
  4026c9:	48 89 e5             	mov    %rsp,%rbp
  4026cc:	48 83 ec 40          	sub    $0x40,%rsp
  4026d0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4026d4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4026d8:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4026dc:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4026e0:	e8 2b 6b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	int[] s1 = *cast(int[]*)p1;
  4026e5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4026e9:	48 8b 02             	mov    (%rdx),%rax
  4026ec:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4026f0:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4026f4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	int[] s2 = *cast(int[]*)p2;
  4026f8:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4026fc:	48 8b 02             	mov    (%rdx),%rax
  4026ff:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  402703:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402707:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return s1.length == s2.length &&
  40270b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40270f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402713:	48 39 c2             	cmp    %rax,%rdx
  402716:	75 2a                	jne    402742 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai6equalsMFPvPvZi+0x7a>
  402718:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40271c:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  402723:	00 
  402724:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402728:	48 89 c6             	mov    %rax,%rsi
  40272b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40272f:	48 89 c7             	mov    %rax,%rdi
  402732:	e8 11 b0 00 00       	callq  40d748 <_D6kernel4core6system6memcmpFPvPvmZl>
  402737:	48 85 c0             	test   %rax,%rax
  40273a:	75 06                	jne    402742 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai6equalsMFPvPvZi+0x7a>
  40273c:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
  402740:	eb 04                	jmp    402746 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai6equalsMFPvPvZi+0x7e>
  402742:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  402746:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
	       memcmp(cast(ubyte*)s1.ptr, cast(ubyte*)s2.ptr, s1.length * int.sizeof) == 0;
    }
  40274a:	c9                   	leaveq 
  40274b:	c3                   	retq   

000000000040274c <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  40274c:	55                   	push   %rbp
  40274d:	48 89 e5             	mov    %rsp,%rbp
  402750:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  402757:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40275b:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  40275f:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  402763:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  402767:	e8 a4 6a 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	int[] s1 = *cast(int[]*)p1;
  40276c:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  402770:	48 8b 02             	mov    (%rdx),%rax
  402773:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  402777:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40277b:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	int[] s2 = *cast(int[]*)p2;
  40277f:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  402783:	48 8b 02             	mov    (%rdx),%rax
  402786:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40278a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40278e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  402792:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402796:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  40279a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40279e:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4027a2:	73 08                	jae    4027ac <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x60>
	    len = s2.length;
  4027a4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4027a8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  4027ac:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4027b3:	00 
  4027b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4027b8:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4027bc:	0f 92 c0             	setb   %al
  4027bf:	83 f0 01             	xor    $0x1,%eax
  4027c2:	84 c0                	test   %al,%al
  4027c4:	0f 85 da 00 00 00    	jne    4028a4 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x158>
	{
	    int result = s1[u] - s2[u];
  4027ca:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4027ce:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  4027d5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4027d9:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4027dd:	73 0d                	jae    4027ec <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0xa0>
  4027df:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4027e3:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  4027ea:	eb 22                	jmp    40280e <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0xc2>
  4027ec:	48 c7 45 c0 16 00 00 	movq   $0x16,-0x40(%rbp)
  4027f3:	00 
  4027f4:	48 c7 45 c8 a6 fd 40 	movq   $0x40fda6,-0x38(%rbp)
  4027fb:	00 
  4027fc:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  402800:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  402804:	ba 30 00 00 00       	mov    $0x30,%edx
  402809:	e8 cb 84 00 00       	callq  40acd9 <_d_array_bounds>
  40280e:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  402815:	48 c1 e0 02          	shl    $0x2,%rax
  402819:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  402820:	8b 00                	mov    (%rax),%eax
  402822:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  402828:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40282c:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  402833:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402837:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40283b:	73 0d                	jae    40284a <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0xfe>
  40283d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  402841:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  402848:	eb 22                	jmp    40286c <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x120>
  40284a:	48 c7 45 d0 16 00 00 	movq   $0x16,-0x30(%rbp)
  402851:	00 
  402852:	48 c7 45 d8 a6 fd 40 	movq   $0x40fda6,-0x28(%rbp)
  402859:	00 
  40285a:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40285e:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  402862:	ba 30 00 00 00       	mov    $0x30,%edx
  402867:	e8 6d 84 00 00       	callq  40acd9 <_d_array_bounds>
  40286c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  402873:	48 c1 e0 02          	shl    $0x2,%rax
  402877:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  40287e:	8b 00                	mov    (%rax),%eax
  402880:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  402886:	29 c2                	sub    %eax,%edx
  402888:	89 d0                	mov    %edx,%eax
  40288a:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (result)
  40288d:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  402891:	74 08                	je     40289b <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x14f>
		return result;
  402893:	8b 45 fc             	mov    -0x4(%rbp),%eax
  402896:	89 45 84             	mov    %eax,-0x7c(%rbp)
  402899:	eb 3c                	jmp    4028d7 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x18b>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int result = s1[u] - s2[u];
	    if (result)
  40289b:	48 ff 45 f0          	incq   -0x10(%rbp)
  40289f:	e9 10 ff ff ff       	jmpq   4027b4 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x68>
		return result;
	}
	if (s1.length < s2.length)
  4028a4:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4028a8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4028ac:	48 39 c2             	cmp    %rax,%rdx
  4028af:	73 09                	jae    4028ba <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x16e>
	    return -1;
  4028b1:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  4028b8:	eb 1d                	jmp    4028d7 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x18b>
	else if (s1.length > s2.length)
  4028ba:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4028be:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4028c2:	48 39 c2             	cmp    %rax,%rdx
  4028c5:	76 09                	jbe    4028d0 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x184>
	    return 1;
  4028c7:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  4028ce:	eb 07                	jmp    4028d7 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x18b>
	return 0;
  4028d0:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  4028d7:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  4028da:	c9                   	leaveq 
  4028db:	c3                   	retq   

00000000004028dc <_D3std8typeinfo7ti_Aint11TypeInfo_Ai5tsizeMFZm>:

    size_t tsize()
  4028dc:	55                   	push   %rbp
  4028dd:	48 89 e5             	mov    %rsp,%rbp
  4028e0:	48 83 ec 10          	sub    $0x10,%rsp
  4028e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4028e8:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4028ec:	e8 1f 69 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (int[]).sizeof;
  4028f1:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  4028f6:	c9                   	leaveq 
  4028f7:	c3                   	retq   

00000000004028f8 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai5flagsMFZk>:

    uint flags()
  4028f8:	55                   	push   %rbp
  4028f9:	48 89 e5             	mov    %rsp,%rbp
  4028fc:	48 83 ec 10          	sub    $0x10,%rsp
  402900:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402904:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402908:	e8 03 69 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  40290d:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  402912:	c9                   	leaveq 
  402913:	c3                   	retq   

0000000000402914 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai4nextMFZC8TypeInfo>:

    TypeInfo next()
  402914:	55                   	push   %rbp
  402915:	48 89 e5             	mov    %rsp,%rbp
  402918:	48 83 ec 10          	sub    $0x10,%rsp
  40291c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402920:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402924:	e8 e7 68 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(int);
  402929:	48 c7 c0 50 0d 41 00 	mov    $0x410d50,%rax
    }
  402930:	c9                   	leaveq 
  402931:	c3                   	retq   

0000000000402932 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak8toStringMFZAa>:

// uint[]

class TypeInfo_Ak : TypeInfo_Ai
{
    char[] toString() { return "uint[]"; }
  402932:	55                   	push   %rbp
  402933:	48 89 e5             	mov    %rsp,%rbp
  402936:	53                   	push   %rbx
  402937:	48 83 ec 08          	sub    $0x8,%rsp
  40293b:	48 89 fb             	mov    %rdi,%rbx
  40293e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402942:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402946:	e8 c5 68 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  40294b:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  402952:	48 c7 43 08 50 fe 40 	movq   $0x40fe50,0x8(%rbx)
  402959:	00 
  40295a:	48 89 d8             	mov    %rbx,%rax
  40295d:	48 83 c4 08          	add    $0x8,%rsp
  402961:	5b                   	pop    %rbx
  402962:	c9                   	leaveq 
  402963:	c3                   	retq   

0000000000402964 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  402964:	55                   	push   %rbp
  402965:	48 89 e5             	mov    %rsp,%rbp
  402968:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  40296f:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  402973:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  402977:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40297b:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40297f:	e8 8c 68 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	uint[] s1 = *cast(uint[]*)p1;
  402984:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  402988:	48 8b 02             	mov    (%rdx),%rax
  40298b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40298f:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402993:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	uint[] s2 = *cast(uint[]*)p2;
  402997:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40299b:	48 8b 02             	mov    (%rdx),%rax
  40299e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4029a2:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4029a6:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  4029aa:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4029ae:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  4029b2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4029b6:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4029ba:	73 08                	jae    4029c4 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x60>
	    len = s2.length;
  4029bc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4029c0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  4029c4:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4029cb:	00 
  4029cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4029d0:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4029d4:	0f 92 c0             	setb   %al
  4029d7:	83 f0 01             	xor    $0x1,%eax
  4029da:	84 c0                	test   %al,%al
  4029dc:	0f 85 da 00 00 00    	jne    402abc <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x158>
	{
	    int result = s1[u] - s2[u];
  4029e2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4029e6:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  4029ed:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4029f1:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4029f5:	73 0d                	jae    402a04 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0xa0>
  4029f7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4029fb:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  402a02:	eb 22                	jmp    402a26 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0xc2>
  402a04:	48 c7 45 c0 16 00 00 	movq   $0x16,-0x40(%rbp)
  402a0b:	00 
  402a0c:	48 c7 45 c8 a6 fd 40 	movq   $0x40fda6,-0x38(%rbp)
  402a13:	00 
  402a14:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  402a18:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  402a1c:	ba 5b 00 00 00       	mov    $0x5b,%edx
  402a21:	e8 b3 82 00 00       	callq  40acd9 <_d_array_bounds>
  402a26:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  402a2d:	48 c1 e0 02          	shl    $0x2,%rax
  402a31:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  402a38:	8b 00                	mov    (%rax),%eax
  402a3a:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  402a40:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402a44:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  402a4b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402a4f:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  402a53:	73 0d                	jae    402a62 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0xfe>
  402a55:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  402a59:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  402a60:	eb 22                	jmp    402a84 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x120>
  402a62:	48 c7 45 d0 16 00 00 	movq   $0x16,-0x30(%rbp)
  402a69:	00 
  402a6a:	48 c7 45 d8 a6 fd 40 	movq   $0x40fda6,-0x28(%rbp)
  402a71:	00 
  402a72:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  402a76:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  402a7a:	ba 5b 00 00 00       	mov    $0x5b,%edx
  402a7f:	e8 55 82 00 00       	callq  40acd9 <_d_array_bounds>
  402a84:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  402a8b:	48 c1 e0 02          	shl    $0x2,%rax
  402a8f:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  402a96:	8b 00                	mov    (%rax),%eax
  402a98:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  402a9e:	29 c2                	sub    %eax,%edx
  402aa0:	89 d0                	mov    %edx,%eax
  402aa2:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (result)
  402aa5:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  402aa9:	74 08                	je     402ab3 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x14f>
		return result;
  402aab:	8b 45 fc             	mov    -0x4(%rbp),%eax
  402aae:	89 45 84             	mov    %eax,-0x7c(%rbp)
  402ab1:	eb 3c                	jmp    402aef <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x18b>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int result = s1[u] - s2[u];
	    if (result)
  402ab3:	48 ff 45 f0          	incq   -0x10(%rbp)
  402ab7:	e9 10 ff ff ff       	jmpq   4029cc <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x68>
		return result;
	}
	if (s1.length < s2.length)
  402abc:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  402ac0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402ac4:	48 39 c2             	cmp    %rax,%rdx
  402ac7:	73 09                	jae    402ad2 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x16e>
	    return -1;
  402ac9:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  402ad0:	eb 1d                	jmp    402aef <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x18b>
	else if (s1.length > s2.length)
  402ad2:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  402ad6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402ada:	48 39 c2             	cmp    %rax,%rdx
  402add:	76 09                	jbe    402ae8 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x184>
	    return 1;
  402adf:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  402ae6:	eb 07                	jmp    402aef <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x18b>
	return 0;
  402ae8:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  402aef:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  402af2:	c9                   	leaveq 
  402af3:	c3                   	retq   

0000000000402af4 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak4nextMFZC8TypeInfo>:

    TypeInfo next()
  402af4:	55                   	push   %rbp
  402af5:	48 89 e5             	mov    %rsp,%rbp
  402af8:	48 83 ec 10          	sub    $0x10,%rsp
  402afc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402b00:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402b04:	e8 07 67 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(uint);
  402b09:	48 c7 c0 10 13 41 00 	mov    $0x411310,%rax
    }
  402b10:	c9                   	leaveq 
  402b11:	c3                   	retq   

0000000000402b12 <_D3std8typeinfo7ti_Aint11TypeInfo_Aw8toStringMFZAa>:

// dchar[]

class TypeInfo_Aw : TypeInfo_Ak
{
    char[] toString() { return "dchar[]"; }
  402b12:	55                   	push   %rbp
  402b13:	48 89 e5             	mov    %rsp,%rbp
  402b16:	53                   	push   %rbx
  402b17:	48 83 ec 08          	sub    $0x8,%rsp
  402b1b:	48 89 fb             	mov    %rdi,%rbx
  402b1e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402b22:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402b26:	e8 e5 66 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  402b2b:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  402b32:	48 c7 43 08 f0 fe 40 	movq   $0x40fef0,0x8(%rbx)
  402b39:	00 
  402b3a:	48 89 d8             	mov    %rbx,%rax
  402b3d:	48 83 c4 08          	add    $0x8,%rsp
  402b41:	5b                   	pop    %rbx
  402b42:	c9                   	leaveq 
  402b43:	c3                   	retq   

0000000000402b44 <_D3std8typeinfo7ti_Aint11TypeInfo_Aw4nextMFZC8TypeInfo>:

    TypeInfo next()
  402b44:	55                   	push   %rbp
  402b45:	48 89 e5             	mov    %rsp,%rbp
  402b48:	48 83 ec 10          	sub    $0x10,%rsp
  402b4c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402b50:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402b54:	e8 b7 66 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(dchar);
  402b59:	48 c7 c0 f0 08 41 00 	mov    $0x4108f0,%rax
    }
  402b60:	c9                   	leaveq 
  402b61:	c3                   	retq   
  402b62:	90                   	nop    
  402b63:	90                   	nop    

0000000000402b64 <_D3std8typeinfo8ti_Along11TypeInfo_Al8toStringMFZAa>:

// long[]

class TypeInfo_Al : TypeInfo
{
    char[] toString() { return "long[]"; }
  402b64:	55                   	push   %rbp
  402b65:	48 89 e5             	mov    %rsp,%rbp
  402b68:	53                   	push   %rbx
  402b69:	48 83 ec 08          	sub    $0x8,%rsp
  402b6d:	48 89 fb             	mov    %rdi,%rbx
  402b70:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402b74:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402b78:	e8 93 66 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  402b7d:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  402b84:	48 c7 43 08 a0 ff 40 	movq   $0x40ffa0,0x8(%rbx)
  402b8b:	00 
  402b8c:	48 89 d8             	mov    %rbx,%rax
  402b8f:	48 83 c4 08          	add    $0x8,%rsp
  402b93:	5b                   	pop    %rbx
  402b94:	c9                   	leaveq 
  402b95:	c3                   	retq   

0000000000402b96 <_D3std8typeinfo8ti_Along11TypeInfo_Al7getHashMFPvZm>:

    hash_t getHash(void *p)
  402b96:	55                   	push   %rbp
  402b97:	48 89 e5             	mov    %rsp,%rbp
  402b9a:	48 83 ec 40          	sub    $0x40,%rsp
  402b9e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  402ba2:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  402ba6:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  402baa:	e8 61 66 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {	long[] s = *cast(long[]*)p;
  402baf:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  402bb3:	48 8b 02             	mov    (%rdx),%rax
  402bb6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  402bba:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402bbe:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  402bc2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  402bc6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto str = s.ptr;
  402bca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402bce:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  402bd2:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  402bd9:	00 

	while (len)
  402bda:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  402bdf:	0f 95 c0             	setne  %al
  402be2:	83 f0 01             	xor    $0x1,%eax
  402be5:	84 c0                	test   %al,%al
  402be7:	75 36                	jne    402c1f <_D3std8typeinfo8ti_Along11TypeInfo_Al7getHashMFPvZm+0x89>
	{
	    hash *= 9;
  402be9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  402bed:	48 89 d0             	mov    %rdx,%rax
  402bf0:	48 c1 e0 03          	shl    $0x3,%rax
  402bf4:	48 01 d0             	add    %rdx,%rax
  402bf7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += *cast(uint *)str + *(cast(uint *)str + 1);
  402bfb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402bff:	8b 10                	mov    (%rax),%edx
  402c01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402c05:	48 83 c0 04          	add    $0x4,%rax
  402c09:	8b 00                	mov    (%rax),%eax
  402c0b:	8d 04 02             	lea    (%rdx,%rax,1),%eax
  402c0e:	89 c0                	mov    %eax,%eax
  402c10:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  402c14:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
	    len--;
  402c19:	48 ff 4d f8          	decq   -0x8(%rbp)
  402c1d:	eb bb                	jmp    402bda <_D3std8typeinfo8ti_Along11TypeInfo_Al7getHashMFPvZm+0x44>
	}

	return hash;
  402c1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  402c23:	c9                   	leaveq 
  402c24:	c3                   	retq   

0000000000402c25 <_D3std8typeinfo8ti_Along11TypeInfo_Al6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  402c25:	55                   	push   %rbp
  402c26:	48 89 e5             	mov    %rsp,%rbp
  402c29:	48 83 ec 40          	sub    $0x40,%rsp
  402c2d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  402c31:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  402c35:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  402c39:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  402c3d:	e8 ce 65 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	long[] s1 = *cast(long[]*)p1;
  402c42:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  402c46:	48 8b 02             	mov    (%rdx),%rax
  402c49:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  402c4d:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402c51:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	long[] s2 = *cast(long[]*)p2;
  402c55:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  402c59:	48 8b 02             	mov    (%rdx),%rax
  402c5c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  402c60:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402c64:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return s1.length == s2.length &&
  402c68:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  402c6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402c70:	48 39 c2             	cmp    %rax,%rdx
  402c73:	75 2a                	jne    402c9f <_D3std8typeinfo8ti_Along11TypeInfo_Al6equalsMFPvPvZi+0x7a>
  402c75:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  402c79:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  402c80:	00 
  402c81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402c85:	48 89 c6             	mov    %rax,%rsi
  402c88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402c8c:	48 89 c7             	mov    %rax,%rdi
  402c8f:	e8 b4 aa 00 00       	callq  40d748 <_D6kernel4core6system6memcmpFPvPvmZl>
  402c94:	48 85 c0             	test   %rax,%rax
  402c97:	75 06                	jne    402c9f <_D3std8typeinfo8ti_Along11TypeInfo_Al6equalsMFPvPvZi+0x7a>
  402c99:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
  402c9d:	eb 04                	jmp    402ca3 <_D3std8typeinfo8ti_Along11TypeInfo_Al6equalsMFPvPvZi+0x7e>
  402c9f:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  402ca3:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
	       memcmp(cast(ubyte*)s1.ptr, cast(ubyte*)s2.ptr, s1.length * long.sizeof) == 0;
    }
  402ca7:	c9                   	leaveq 
  402ca8:	c3                   	retq   

0000000000402ca9 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  402ca9:	55                   	push   %rbp
  402caa:	48 89 e5             	mov    %rsp,%rbp
  402cad:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  402cb4:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  402cb8:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  402cbc:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  402cc3:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
  402cc7:	e8 44 65 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	long[] s1 = *cast(long[]*)p1;
  402ccc:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  402cd0:	48 8b 02             	mov    (%rdx),%rax
  402cd3:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  402cd7:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402cdb:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	long[] s2 = *cast(long[]*)p2;
  402cdf:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  402ce6:	48 8b 02             	mov    (%rdx),%rax
  402ce9:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  402ced:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402cf1:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	size_t len = s1.length;
  402cf5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  402cf9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	if (s2.length < len)
  402cfd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402d01:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  402d05:	73 08                	jae    402d0f <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x66>
	    len = s2.length;
  402d07:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402d0b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	for (size_t u = 0; u < len; u++)
  402d0f:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  402d16:	00 
  402d17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402d1b:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  402d1f:	0f 92 c0             	setb   %al
  402d22:	83 f0 01             	xor    $0x1,%eax
  402d25:	84 c0                	test   %al,%al
  402d27:	0f 85 a8 01 00 00    	jne    402ed5 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x22c>
	{
	    if (s1[u] < s2[u])
  402d2d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  402d31:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  402d38:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  402d3c:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  402d40:	73 0d                	jae    402d4f <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0xa6>
  402d42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402d46:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  402d4d:	eb 22                	jmp    402d71 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0xc8>
  402d4f:	48 c7 45 b0 17 00 00 	movq   $0x17,-0x50(%rbp)
  402d56:	00 
  402d57:	48 c7 45 b8 a7 ff 40 	movq   $0x40ffa7,-0x48(%rbp)
  402d5e:	00 
  402d5f:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  402d63:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  402d67:	ba 30 00 00 00       	mov    $0x30,%edx
  402d6c:	e8 68 7f 00 00       	callq  40acd9 <_d_array_bounds>
  402d71:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  402d78:	48 c1 e0 03          	shl    $0x3,%rax
  402d7c:	48 03 85 20 ff ff ff 	add    -0xe0(%rbp),%rax
  402d83:	48 8b 00             	mov    (%rax),%rax
  402d86:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  402d8d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  402d91:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  402d98:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402d9c:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  402da0:	73 0d                	jae    402daf <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x106>
  402da2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402da6:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  402dad:	eb 22                	jmp    402dd1 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x128>
  402daf:	48 c7 45 c0 17 00 00 	movq   $0x17,-0x40(%rbp)
  402db6:	00 
  402db7:	48 c7 45 c8 a7 ff 40 	movq   $0x40ffa7,-0x38(%rbp)
  402dbe:	00 
  402dbf:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  402dc3:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  402dc7:	ba 30 00 00 00       	mov    $0x30,%edx
  402dcc:	e8 08 7f 00 00       	callq  40acd9 <_d_array_bounds>
  402dd1:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  402dd8:	48 c1 e0 03          	shl    $0x3,%rax
  402ddc:	48 03 85 38 ff ff ff 	add    -0xc8(%rbp),%rax
  402de3:	48 8b 00             	mov    (%rax),%rax
  402de6:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
  402ded:	7d 0f                	jge    402dfe <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x155>
		return -1;
  402def:	c7 85 4c ff ff ff ff 	movl   $0xffffffff,-0xb4(%rbp)
  402df6:	ff ff ff 
  402df9:	e9 13 01 00 00       	jmpq   402f11 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x268>
	    else if (s1[u] > s2[u])
  402dfe:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  402e02:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  402e09:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  402e0d:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  402e11:	73 0d                	jae    402e20 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x177>
  402e13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402e17:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  402e1e:	eb 22                	jmp    402e42 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x199>
  402e20:	48 c7 45 d0 17 00 00 	movq   $0x17,-0x30(%rbp)
  402e27:	00 
  402e28:	48 c7 45 d8 a7 ff 40 	movq   $0x40ffa7,-0x28(%rbp)
  402e2f:	00 
  402e30:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  402e34:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  402e38:	ba 32 00 00 00       	mov    $0x32,%edx
  402e3d:	e8 97 7e 00 00       	callq  40acd9 <_d_array_bounds>
  402e42:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  402e49:	48 c1 e0 03          	shl    $0x3,%rax
  402e4d:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  402e54:	48 8b 00             	mov    (%rax),%rax
  402e57:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  402e5e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  402e62:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  402e69:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402e6d:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  402e71:	73 0d                	jae    402e80 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x1d7>
  402e73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402e77:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  402e7e:	eb 22                	jmp    402ea2 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x1f9>
  402e80:	48 c7 45 e0 17 00 00 	movq   $0x17,-0x20(%rbp)
  402e87:	00 
  402e88:	48 c7 45 e8 a7 ff 40 	movq   $0x40ffa7,-0x18(%rbp)
  402e8f:	00 
  402e90:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  402e94:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  402e98:	ba 32 00 00 00       	mov    $0x32,%edx
  402e9d:	e8 37 7e 00 00       	callq  40acd9 <_d_array_bounds>
  402ea2:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  402ea9:	48 c1 e0 03          	shl    $0x3,%rax
  402ead:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  402eb4:	48 8b 00             	mov    (%rax),%rax
  402eb7:	48 39 85 60 ff ff ff 	cmp    %rax,-0xa0(%rbp)
  402ebe:	7e 0c                	jle    402ecc <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x223>
		return 1;
  402ec0:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  402ec7:	00 00 00 
  402eca:	eb 45                	jmp    402f11 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x268>

	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    if (s1[u] < s2[u])
  402ecc:	48 ff 45 f8          	incq   -0x8(%rbp)
  402ed0:	e9 42 fe ff ff       	jmpq   402d17 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x6e>
		return -1;
	    else if (s1[u] > s2[u])
		return 1;
	}
	if (s1.length < s2.length)
  402ed5:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  402ed9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402edd:	48 39 c2             	cmp    %rax,%rdx
  402ee0:	73 0c                	jae    402eee <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x245>
	    return -1;
  402ee2:	c7 85 4c ff ff ff ff 	movl   $0xffffffff,-0xb4(%rbp)
  402ee9:	ff ff ff 
  402eec:	eb 23                	jmp    402f11 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x268>
	else if (s1.length > s2.length)
  402eee:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  402ef2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402ef6:	48 39 c2             	cmp    %rax,%rdx
  402ef9:	76 0c                	jbe    402f07 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x25e>
	    return 1;
  402efb:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  402f02:	00 00 00 
  402f05:	eb 0a                	jmp    402f11 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x268>
	return 0;
  402f07:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  402f0e:	00 00 00 
  402f11:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
    }
  402f17:	c9                   	leaveq 
  402f18:	c3                   	retq   

0000000000402f19 <_D3std8typeinfo8ti_Along11TypeInfo_Al5tsizeMFZm>:

    size_t tsize()
  402f19:	55                   	push   %rbp
  402f1a:	48 89 e5             	mov    %rsp,%rbp
  402f1d:	48 83 ec 10          	sub    $0x10,%rsp
  402f21:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402f25:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402f29:	e8 e2 62 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (long[]).sizeof;
  402f2e:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  402f33:	c9                   	leaveq 
  402f34:	c3                   	retq   

0000000000402f35 <_D3std8typeinfo8ti_Along11TypeInfo_Al5flagsMFZk>:

    uint flags()
  402f35:	55                   	push   %rbp
  402f36:	48 89 e5             	mov    %rsp,%rbp
  402f39:	48 83 ec 10          	sub    $0x10,%rsp
  402f3d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402f41:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402f45:	e8 c6 62 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  402f4a:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  402f4f:	c9                   	leaveq 
  402f50:	c3                   	retq   

0000000000402f51 <_D3std8typeinfo8ti_Along11TypeInfo_Al4nextMFZC8TypeInfo>:

    TypeInfo next()
  402f51:	55                   	push   %rbp
  402f52:	48 89 e5             	mov    %rsp,%rbp
  402f55:	48 83 ec 10          	sub    $0x10,%rsp
  402f59:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402f5d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402f61:	e8 aa 62 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(long);
  402f66:	48 c7 c0 d0 0e 41 00 	mov    $0x410ed0,%rax
    }
  402f6d:	c9                   	leaveq 
  402f6e:	c3                   	retq   

0000000000402f6f <_D3std8typeinfo8ti_Along11TypeInfo_Am8toStringMFZAa>:

// ulong[]

class TypeInfo_Am : TypeInfo_Al
{
    char[] toString() { return "ulong[]"; }
  402f6f:	55                   	push   %rbp
  402f70:	48 89 e5             	mov    %rsp,%rbp
  402f73:	53                   	push   %rbx
  402f74:	48 83 ec 08          	sub    $0x8,%rsp
  402f78:	48 89 fb             	mov    %rdi,%rbx
  402f7b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402f7f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402f83:	e8 88 62 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  402f88:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  402f8f:	48 c7 43 08 50 00 41 	movq   $0x410050,0x8(%rbx)
  402f96:	00 
  402f97:	48 89 d8             	mov    %rbx,%rax
  402f9a:	48 83 c4 08          	add    $0x8,%rsp
  402f9e:	5b                   	pop    %rbx
  402f9f:	c9                   	leaveq 
  402fa0:	c3                   	retq   

0000000000402fa1 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  402fa1:	55                   	push   %rbp
  402fa2:	48 89 e5             	mov    %rsp,%rbp
  402fa5:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  402fac:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  402fb0:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  402fb4:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  402fbb:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
  402fbf:	e8 4c 62 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ulong[] s1 = *cast(ulong[]*)p1;
  402fc4:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  402fc8:	48 8b 02             	mov    (%rdx),%rax
  402fcb:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  402fcf:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402fd3:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	ulong[] s2 = *cast(ulong[]*)p2;
  402fd7:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  402fde:	48 8b 02             	mov    (%rdx),%rax
  402fe1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  402fe5:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402fe9:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	size_t len = s1.length;
  402fed:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  402ff1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	if (s2.length < len)
  402ff5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402ff9:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  402ffd:	73 08                	jae    403007 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x66>
	    len = s2.length;
  402fff:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403003:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	for (size_t u = 0; u < len; u++)
  403007:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40300e:	00 
  40300f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403013:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  403017:	0f 92 c0             	setb   %al
  40301a:	83 f0 01             	xor    $0x1,%eax
  40301d:	84 c0                	test   %al,%al
  40301f:	0f 85 a8 01 00 00    	jne    4031cd <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x22c>
	{
	    if (s1[u] < s2[u])
  403025:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  403029:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  403030:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  403034:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  403038:	73 0d                	jae    403047 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0xa6>
  40303a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40303e:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  403045:	eb 22                	jmp    403069 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0xc8>
  403047:	48 c7 45 b0 17 00 00 	movq   $0x17,-0x50(%rbp)
  40304e:	00 
  40304f:	48 c7 45 b8 a7 ff 40 	movq   $0x40ffa7,-0x48(%rbp)
  403056:	00 
  403057:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  40305b:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40305f:	ba 5d 00 00 00       	mov    $0x5d,%edx
  403064:	e8 70 7c 00 00       	callq  40acd9 <_d_array_bounds>
  403069:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  403070:	48 c1 e0 03          	shl    $0x3,%rax
  403074:	48 03 85 20 ff ff ff 	add    -0xe0(%rbp),%rax
  40307b:	48 8b 00             	mov    (%rax),%rax
  40307e:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  403085:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  403089:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  403090:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403094:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  403098:	73 0d                	jae    4030a7 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x106>
  40309a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40309e:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  4030a5:	eb 22                	jmp    4030c9 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x128>
  4030a7:	48 c7 45 c0 17 00 00 	movq   $0x17,-0x40(%rbp)
  4030ae:	00 
  4030af:	48 c7 45 c8 a7 ff 40 	movq   $0x40ffa7,-0x38(%rbp)
  4030b6:	00 
  4030b7:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4030bb:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4030bf:	ba 5d 00 00 00       	mov    $0x5d,%edx
  4030c4:	e8 10 7c 00 00       	callq  40acd9 <_d_array_bounds>
  4030c9:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  4030d0:	48 c1 e0 03          	shl    $0x3,%rax
  4030d4:	48 03 85 38 ff ff ff 	add    -0xc8(%rbp),%rax
  4030db:	48 8b 00             	mov    (%rax),%rax
  4030de:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
  4030e5:	73 0f                	jae    4030f6 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x155>
		return -1;
  4030e7:	c7 85 4c ff ff ff ff 	movl   $0xffffffff,-0xb4(%rbp)
  4030ee:	ff ff ff 
  4030f1:	e9 13 01 00 00       	jmpq   403209 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x268>
	    else if (s1[u] > s2[u])
  4030f6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4030fa:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  403101:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  403105:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  403109:	73 0d                	jae    403118 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x177>
  40310b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40310f:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  403116:	eb 22                	jmp    40313a <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x199>
  403118:	48 c7 45 d0 17 00 00 	movq   $0x17,-0x30(%rbp)
  40311f:	00 
  403120:	48 c7 45 d8 a7 ff 40 	movq   $0x40ffa7,-0x28(%rbp)
  403127:	00 
  403128:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40312c:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  403130:	ba 5f 00 00 00       	mov    $0x5f,%edx
  403135:	e8 9f 7b 00 00       	callq  40acd9 <_d_array_bounds>
  40313a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  403141:	48 c1 e0 03          	shl    $0x3,%rax
  403145:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  40314c:	48 8b 00             	mov    (%rax),%rax
  40314f:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  403156:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40315a:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  403161:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403165:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  403169:	73 0d                	jae    403178 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x1d7>
  40316b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40316f:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  403176:	eb 22                	jmp    40319a <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x1f9>
  403178:	48 c7 45 e0 17 00 00 	movq   $0x17,-0x20(%rbp)
  40317f:	00 
  403180:	48 c7 45 e8 a7 ff 40 	movq   $0x40ffa7,-0x18(%rbp)
  403187:	00 
  403188:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40318c:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  403190:	ba 5f 00 00 00       	mov    $0x5f,%edx
  403195:	e8 3f 7b 00 00       	callq  40acd9 <_d_array_bounds>
  40319a:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  4031a1:	48 c1 e0 03          	shl    $0x3,%rax
  4031a5:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  4031ac:	48 8b 00             	mov    (%rax),%rax
  4031af:	48 39 85 60 ff ff ff 	cmp    %rax,-0xa0(%rbp)
  4031b6:	76 0c                	jbe    4031c4 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x223>
		return 1;
  4031b8:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  4031bf:	00 00 00 
  4031c2:	eb 45                	jmp    403209 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x268>

	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    if (s1[u] < s2[u])
  4031c4:	48 ff 45 f8          	incq   -0x8(%rbp)
  4031c8:	e9 42 fe ff ff       	jmpq   40300f <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x6e>
		return -1;
	    else if (s1[u] > s2[u])
		return 1;
	}
	if (s1.length < s2.length)
  4031cd:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4031d1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4031d5:	48 39 c2             	cmp    %rax,%rdx
  4031d8:	73 0c                	jae    4031e6 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x245>
	    return -1;
  4031da:	c7 85 4c ff ff ff ff 	movl   $0xffffffff,-0xb4(%rbp)
  4031e1:	ff ff ff 
  4031e4:	eb 23                	jmp    403209 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x268>
	else if (s1.length > s2.length)
  4031e6:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4031ea:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4031ee:	48 39 c2             	cmp    %rax,%rdx
  4031f1:	76 0c                	jbe    4031ff <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x25e>
	    return 1;
  4031f3:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  4031fa:	00 00 00 
  4031fd:	eb 0a                	jmp    403209 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x268>
	return 0;
  4031ff:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  403206:	00 00 00 
  403209:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
    }
  40320f:	c9                   	leaveq 
  403210:	c3                   	retq   

0000000000403211 <_D3std8typeinfo8ti_Along11TypeInfo_Am4nextMFZC8TypeInfo>:

    TypeInfo next()
  403211:	55                   	push   %rbp
  403212:	48 89 e5             	mov    %rsp,%rbp
  403215:	48 83 ec 10          	sub    $0x10,%rsp
  403219:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40321d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403221:	e8 ea 5f 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(ulong);
  403226:	48 c7 c0 d0 13 41 00 	mov    $0x4113d0,%rax
    }
  40322d:	c9                   	leaveq 
  40322e:	c3                   	retq   
  40322f:	90                   	nop    

0000000000403230 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae8toStringMFZAa>:

// real[]

class TypeInfo_Ae : TypeInfo
{
    char[] toString() { return "real[]"; }
  403230:	55                   	push   %rbp
  403231:	48 89 e5             	mov    %rsp,%rbp
  403234:	53                   	push   %rbx
  403235:	48 83 ec 08          	sub    $0x8,%rsp
  403239:	48 89 fb             	mov    %rdi,%rbx
  40323c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403240:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  403244:	e8 c7 5f 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  403249:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  403250:	48 c7 43 08 00 01 41 	movq   $0x410100,0x8(%rbx)
  403257:	00 
  403258:	48 89 d8             	mov    %rbx,%rax
  40325b:	48 83 c4 08          	add    $0x8,%rsp
  40325f:	5b                   	pop    %rbx
  403260:	c9                   	leaveq 
  403261:	c3                   	retq   

0000000000403262 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7getHashMFPvZm>:

    hash_t getHash(void *p)
  403262:	55                   	push   %rbp
  403263:	48 89 e5             	mov    %rsp,%rbp
  403266:	48 83 ec 40          	sub    $0x40,%rsp
  40326a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40326e:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  403272:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  403276:	e8 95 5f 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {	real[] s = *cast(real[]*)p;
  40327b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40327f:	48 8b 02             	mov    (%rdx),%rax
  403282:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  403286:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40328a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  40328e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  403292:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto str = s.ptr;
  403296:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40329a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  40329e:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4032a5:	00 

	while (len)
  4032a6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4032ab:	0f 95 c0             	setne  %al
  4032ae:	83 f0 01             	xor    $0x1,%eax
  4032b1:	84 c0                	test   %al,%al
  4032b3:	75 5e                	jne    403313 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7getHashMFPvZm+0xb1>
	{
	    hash *= 9;
  4032b5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4032b9:	48 89 d0             	mov    %rdx,%rax
  4032bc:	48 c1 e0 03          	shl    $0x3,%rax
  4032c0:	48 01 d0             	add    %rdx,%rax
  4032c3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[0];
  4032c7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4032cb:	b8 00 00 00 00       	mov    $0x0,%eax
  4032d0:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4032d4:	8b 00                	mov    (%rax),%eax
  4032d6:	89 c0                	mov    %eax,%eax
  4032d8:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[1];
  4032dc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4032e0:	b8 04 00 00 00       	mov    $0x4,%eax
  4032e5:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4032e9:	8b 00                	mov    (%rax),%eax
  4032eb:	89 c0                	mov    %eax,%eax
  4032ed:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(ushort *)str)[4];
  4032f1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4032f5:	b8 08 00 00 00       	mov    $0x8,%eax
  4032fa:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4032fe:	0f b7 00             	movzwl (%rax),%eax
  403301:	0f b7 c0             	movzwl %ax,%eax
  403304:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  403308:	48 83 45 f0 10       	addq   $0x10,-0x10(%rbp)
	    len--;
  40330d:	48 ff 4d f8          	decq   -0x8(%rbp)
  403311:	eb 93                	jmp    4032a6 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7getHashMFPvZm+0x44>
	}

	return hash;
  403313:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  403317:	c9                   	leaveq 
  403318:	c3                   	retq   

0000000000403319 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  403319:	55                   	push   %rbp
  40331a:	48 89 e5             	mov    %rsp,%rbp
  40331d:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  403324:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  403328:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  40332c:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  403330:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  403334:	e8 d7 5e 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	real[] s1 = *cast(real[]*)p1;
  403339:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40333d:	48 8b 02             	mov    (%rdx),%rax
  403340:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  403344:	48 8b 42 08          	mov    0x8(%rdx),%rax
  403348:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	real[] s2 = *cast(real[]*)p2;
  40334c:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  403350:	48 8b 02             	mov    (%rdx),%rax
  403353:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  403357:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40335b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  40335f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403363:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  403367:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40336b:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40336f:	74 0f                	je     403380 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x67>
	    return 0;
  403371:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  403378:	00 00 00 
  40337b:	e9 11 01 00 00       	jmpq   403491 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x178>
	for (size_t u = 0; u < len; u++)
  403380:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  403387:	00 
  403388:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40338c:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  403390:	0f 92 c0             	setb   %al
  403393:	83 f0 01             	xor    $0x1,%eax
  403396:	84 c0                	test   %al,%al
  403398:	0f 85 e9 00 00 00    	jne    403487 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x16e>
	{
	    int c = TypeInfo_e._equals(s1[u], s2[u]);
  40339e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4033a2:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  4033a9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4033ad:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4033b1:	73 0d                	jae    4033c0 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0xa7>
  4033b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4033b7:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  4033be:	eb 22                	jmp    4033e2 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0xc9>
  4033c0:	48 c7 45 c0 17 00 00 	movq   $0x17,-0x40(%rbp)
  4033c7:	00 
  4033c8:	48 c7 45 c8 07 01 41 	movq   $0x410107,-0x38(%rbp)
  4033cf:	00 
  4033d0:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4033d4:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4033d8:	ba 3f 00 00 00       	mov    $0x3f,%edx
  4033dd:	e8 f7 78 00 00       	callq  40acd9 <_d_array_bounds>
  4033e2:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  4033e9:	48 c1 e0 04          	shl    $0x4,%rax
  4033ed:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  4033f4:	db 28                	fldt   (%rax)
  4033f6:	db bd 60 ff ff ff    	fstpt  -0xa0(%rbp)
  4033fc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  403400:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  403407:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40340b:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40340f:	73 0a                	jae    40341b <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x102>
  403411:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403415:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  403419:	eb 22                	jmp    40343d <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x124>
  40341b:	48 c7 45 d0 17 00 00 	movq   $0x17,-0x30(%rbp)
  403422:	00 
  403423:	48 c7 45 d8 07 01 41 	movq   $0x410107,-0x28(%rbp)
  40342a:	00 
  40342b:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40342f:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  403433:	ba 3f 00 00 00       	mov    $0x3f,%edx
  403438:	e8 9c 78 00 00       	callq  40acd9 <_d_array_bounds>
  40343d:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  403441:	48 c1 e0 04          	shl    $0x4,%rax
  403445:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  40344c:	8b 50 08             	mov    0x8(%rax),%edx
  40344f:	48 8b 00             	mov    (%rax),%rax
  403452:	db ad 60 ff ff ff    	fldt   -0xa0(%rbp)
  403458:	db 7c 24 10          	fstpt  0x10(%rsp)
  40345c:	48 89 04 24          	mov    %rax,(%rsp)
  403460:	89 54 24 08          	mov    %edx,0x8(%rsp)
  403464:	e8 5c 22 00 00       	callq  4056c5 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi>
  403469:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  40346c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  403470:	75 0c                	jne    40347e <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x165>
		return 0;
  403472:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  403479:	00 00 00 
  40347c:	eb 13                	jmp    403491 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x178>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_e._equals(s1[u], s2[u]);
	    if (c == 0)
  40347e:	48 ff 45 f0          	incq   -0x10(%rbp)
  403482:	e9 01 ff ff ff       	jmpq   403388 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  403487:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  40348e:	00 00 00 
  403491:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
    }
  403497:	c9                   	leaveq 
  403498:	c3                   	retq   

0000000000403499 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  403499:	55                   	push   %rbp
  40349a:	48 89 e5             	mov    %rsp,%rbp
  40349d:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  4034a4:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  4034a8:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  4034ac:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  4034b0:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  4034b4:	e8 57 5d 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	real[] s1 = *cast(real[]*)p1;
  4034b9:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4034bd:	48 8b 02             	mov    (%rdx),%rax
  4034c0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  4034c4:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4034c8:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	real[] s2 = *cast(real[]*)p2;
  4034cc:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4034d0:	48 8b 02             	mov    (%rdx),%rax
  4034d3:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4034d7:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4034db:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  4034df:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4034e3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  4034e7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4034eb:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4034ef:	73 08                	jae    4034f9 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x60>
	    len = s2.length;
  4034f1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4034f5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  4034f9:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  403500:	00 
  403501:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403505:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  403509:	0f 92 c0             	setb   %al
  40350c:	83 f0 01             	xor    $0x1,%eax
  40350f:	84 c0                	test   %al,%al
  403511:	0f 85 eb 00 00 00    	jne    403602 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x169>
	{
	    int c = TypeInfo_e._compare(s1[u], s2[u]);
  403517:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40351b:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  403522:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403526:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40352a:	73 0d                	jae    403539 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0xa0>
  40352c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403530:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  403537:	eb 22                	jmp    40355b <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0xc2>
  403539:	48 c7 45 c0 17 00 00 	movq   $0x17,-0x40(%rbp)
  403540:	00 
  403541:	48 c7 45 c8 07 01 41 	movq   $0x410107,-0x38(%rbp)
  403548:	00 
  403549:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40354d:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  403551:	ba 50 00 00 00       	mov    $0x50,%edx
  403556:	e8 7e 77 00 00       	callq  40acd9 <_d_array_bounds>
  40355b:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  403562:	48 c1 e0 04          	shl    $0x4,%rax
  403566:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  40356d:	db 28                	fldt   (%rax)
  40356f:	db bd 60 ff ff ff    	fstpt  -0xa0(%rbp)
  403575:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  403579:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  403580:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403584:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  403588:	73 0d                	jae    403597 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0xfe>
  40358a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40358e:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  403595:	eb 22                	jmp    4035b9 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x120>
  403597:	48 c7 45 d0 17 00 00 	movq   $0x17,-0x30(%rbp)
  40359e:	00 
  40359f:	48 c7 45 d8 07 01 41 	movq   $0x410107,-0x28(%rbp)
  4035a6:	00 
  4035a7:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4035ab:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4035af:	ba 50 00 00 00       	mov    $0x50,%edx
  4035b4:	e8 20 77 00 00       	callq  40acd9 <_d_array_bounds>
  4035b9:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4035c0:	48 c1 e0 04          	shl    $0x4,%rax
  4035c4:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  4035cb:	8b 50 08             	mov    0x8(%rax),%edx
  4035ce:	48 8b 00             	mov    (%rax),%rax
  4035d1:	db ad 60 ff ff ff    	fldt   -0xa0(%rbp)
  4035d7:	db 7c 24 10          	fstpt  0x10(%rsp)
  4035db:	48 89 04 24          	mov    %rax,(%rsp)
  4035df:	89 54 24 08          	mov    %edx,0x8(%rsp)
  4035e3:	e8 35 21 00 00       	callq  40571d <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi>
  4035e8:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  4035eb:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  4035ef:	74 08                	je     4035f9 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x160>
		return c;
  4035f1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4035f4:	89 45 84             	mov    %eax,-0x7c(%rbp)
  4035f7:	eb 3c                	jmp    403635 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x19c>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_e._compare(s1[u], s2[u]);
	    if (c)
  4035f9:	48 ff 45 f0          	incq   -0x10(%rbp)
  4035fd:	e9 ff fe ff ff       	jmpq   403501 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  403602:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  403606:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40360a:	48 39 c2             	cmp    %rax,%rdx
  40360d:	73 09                	jae    403618 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x17f>
	    return -1;
  40360f:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  403616:	eb 1d                	jmp    403635 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x19c>
	else if (s1.length > s2.length)
  403618:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40361c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403620:	48 39 c2             	cmp    %rax,%rdx
  403623:	76 09                	jbe    40362e <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x195>
	    return 1;
  403625:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  40362c:	eb 07                	jmp    403635 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x19c>
	return 0;
  40362e:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  403635:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  403638:	c9                   	leaveq 
  403639:	c3                   	retq   

000000000040363a <_D3std8typeinfo8ti_Areal11TypeInfo_Ae5tsizeMFZm>:

    size_t tsize()
  40363a:	55                   	push   %rbp
  40363b:	48 89 e5             	mov    %rsp,%rbp
  40363e:	48 83 ec 10          	sub    $0x10,%rsp
  403642:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403646:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40364a:	e8 c1 5b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (real[]).sizeof;
  40364f:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  403654:	c9                   	leaveq 
  403655:	c3                   	retq   

0000000000403656 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae5flagsMFZk>:

    uint flags()
  403656:	55                   	push   %rbp
  403657:	48 89 e5             	mov    %rsp,%rbp
  40365a:	48 83 ec 10          	sub    $0x10,%rsp
  40365e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403662:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403666:	e8 a5 5b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  40366b:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  403670:	c9                   	leaveq 
  403671:	c3                   	retq   

0000000000403672 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae4nextMFZC8TypeInfo>:

    TypeInfo next()
  403672:	55                   	push   %rbp
  403673:	48 89 e5             	mov    %rsp,%rbp
  403676:	48 83 ec 10          	sub    $0x10,%rsp
  40367a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40367e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403682:	e8 89 5b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(real);
  403687:	48 c7 c0 30 10 41 00 	mov    $0x411030,%rax
    }
  40368e:	c9                   	leaveq 
  40368f:	c3                   	retq   

0000000000403690 <_D3std8typeinfo8ti_Areal11TypeInfo_Aj8toStringMFZAa>:

// ireal[]

class TypeInfo_Aj : TypeInfo_Ae
{
    char[] toString() { return "ireal[]"; }
  403690:	55                   	push   %rbp
  403691:	48 89 e5             	mov    %rsp,%rbp
  403694:	53                   	push   %rbx
  403695:	48 83 ec 08          	sub    $0x8,%rsp
  403699:	48 89 fb             	mov    %rdi,%rbx
  40369c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4036a0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4036a4:	e8 67 5b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  4036a9:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  4036b0:	48 c7 43 08 b0 01 41 	movq   $0x4101b0,0x8(%rbx)
  4036b7:	00 
  4036b8:	48 89 d8             	mov    %rbx,%rax
  4036bb:	48 83 c4 08          	add    $0x8,%rsp
  4036bf:	5b                   	pop    %rbx
  4036c0:	c9                   	leaveq 
  4036c1:	c3                   	retq   

00000000004036c2 <_D3std8typeinfo8ti_Areal11TypeInfo_Aj4nextMFZC8TypeInfo>:

    TypeInfo next()
  4036c2:	55                   	push   %rbp
  4036c3:	48 89 e5             	mov    %rsp,%rbp
  4036c6:	48 83 ec 10          	sub    $0x10,%rsp
  4036ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4036ce:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4036d2:	e8 39 5b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(ireal);
  4036d7:	48 c7 c0 10 0e 41 00 	mov    $0x410e10,%rax
    }
  4036de:	c9                   	leaveq 
  4036df:	c3                   	retq   

00000000004036e0 <_D3std8typeinfo9ti_Ashort11TypeInfo_As8toStringMFZAa>:

// short[]

class TypeInfo_As : TypeInfo
{
    char[] toString() { return "short[]"; }
  4036e0:	55                   	push   %rbp
  4036e1:	48 89 e5             	mov    %rsp,%rbp
  4036e4:	53                   	push   %rbx
  4036e5:	48 83 ec 08          	sub    $0x8,%rsp
  4036e9:	48 89 fb             	mov    %rdi,%rbx
  4036ec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4036f0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4036f4:	e8 17 5b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  4036f9:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  403700:	48 c7 43 08 60 02 41 	movq   $0x410260,0x8(%rbx)
  403707:	00 
  403708:	48 89 d8             	mov    %rbx,%rax
  40370b:	48 83 c4 08          	add    $0x8,%rsp
  40370f:	5b                   	pop    %rbx
  403710:	c9                   	leaveq 
  403711:	c3                   	retq   

0000000000403712 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm>:

    hash_t getHash(void *p)
  403712:	55                   	push   %rbp
  403713:	48 89 e5             	mov    %rsp,%rbp
  403716:	48 83 ec 50          	sub    $0x50,%rsp
  40371a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40371e:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  403722:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  403726:	e8 e5 5a 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {	short[] s = *cast(short[]*)p;
  40372b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40372f:	48 8b 02             	mov    (%rdx),%rax
  403732:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  403736:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40373a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  40373e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  403742:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	short *str = s.ptr;
  403746:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40374a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  40374e:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  403755:	00 

	while (1)
  403756:	b8 00 00 00 00       	mov    $0x0,%eax
  40375b:	84 c0                	test   %al,%al
  40375d:	75 76                	jne    4037d5 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0xc3>
		default:
		    hash *= 9;
		    hash += *cast(uint *)str;
		    str += 2;
		    len -= 2;
		    break;
  40375f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403763:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  403767:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  40376c:	74 09                	je     403777 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0x65>
  40376e:	48 83 7d b0 01       	cmpq   $0x1,-0x50(%rbp)
  403773:	74 0c                	je     403781 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0x6f>
  403775:	eb 34                	jmp    4037ab <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0x99>
	while (1)
	{
	    switch (len)
	    {
		case 0:
		    return hash;
  403777:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40377b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40377f:	eb 5c                	jmp    4037dd <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0xcb>

		case 1:
		    hash *= 9;
  403781:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  403785:	48 89 d0             	mov    %rdx,%rax
  403788:	48 c1 e0 03          	shl    $0x3,%rax
  40378c:	48 01 d0             	add    %rdx,%rax
  40378f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += *cast(ushort *)str;
  403793:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403797:	0f b7 00             	movzwl (%rax),%eax
  40379a:	0f b7 c0             	movzwl %ax,%eax
  40379d:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		    return hash;
  4037a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4037a5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  4037a9:	eb 32                	jmp    4037dd <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0xcb>

		default:
		    hash *= 9;
  4037ab:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4037af:	48 89 d0             	mov    %rdx,%rax
  4037b2:	48 c1 e0 03          	shl    $0x3,%rax
  4037b6:	48 01 d0             	add    %rdx,%rax
  4037b9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += *cast(uint *)str;
  4037bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4037c1:	8b 00                	mov    (%rax),%eax
  4037c3:	89 c0                	mov    %eax,%eax
  4037c5:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		    str += 2;
  4037c9:	48 83 45 f0 04       	addq   $0x4,-0x10(%rbp)
		    len -= 2;
  4037ce:	48 83 6d f8 02       	subq   $0x2,-0x8(%rbp)
		    break;
  4037d3:	eb 81                	jmp    403756 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0x44>
	    }
	}

	return hash;
  4037d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4037d9:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  4037dd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    }
  4037e1:	c9                   	leaveq 
  4037e2:	c3                   	retq   

00000000004037e3 <_D3std8typeinfo9ti_Ashort11TypeInfo_As6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4037e3:	55                   	push   %rbp
  4037e4:	48 89 e5             	mov    %rsp,%rbp
  4037e7:	48 83 ec 40          	sub    $0x40,%rsp
  4037eb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4037ef:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4037f3:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4037f7:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4037fb:	e8 10 5a 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	short[] s1 = *cast(short[]*)p1;
  403800:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  403804:	48 8b 02             	mov    (%rdx),%rax
  403807:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40380b:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40380f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	short[] s2 = *cast(short[]*)p2;
  403813:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  403817:	48 8b 02             	mov    (%rdx),%rax
  40381a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40381e:	48 8b 42 08          	mov    0x8(%rdx),%rax
  403822:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return s1.length == s2.length &&
  403826:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40382a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40382e:	48 39 c2             	cmp    %rax,%rdx
  403831:	75 26                	jne    403859 <_D3std8typeinfo9ti_Ashort11TypeInfo_As6equalsMFPvPvZi+0x76>
  403833:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  403837:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  40383b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40383f:	48 89 c6             	mov    %rax,%rsi
  403842:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403846:	48 89 c7             	mov    %rax,%rdi
  403849:	e8 fa 9e 00 00       	callq  40d748 <_D6kernel4core6system6memcmpFPvPvmZl>
  40384e:	48 85 c0             	test   %rax,%rax
  403851:	75 06                	jne    403859 <_D3std8typeinfo9ti_Ashort11TypeInfo_As6equalsMFPvPvZi+0x76>
  403853:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
  403857:	eb 04                	jmp    40385d <_D3std8typeinfo9ti_Ashort11TypeInfo_As6equalsMFPvPvZi+0x7a>
  403859:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  40385d:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
	       memcmp(cast(ubyte*)s1.ptr, cast(ubyte*)s2.ptr, s1.length * short.sizeof) == 0;
    }
  403861:	c9                   	leaveq 
  403862:	c3                   	retq   

0000000000403863 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  403863:	55                   	push   %rbp
  403864:	48 89 e5             	mov    %rsp,%rbp
  403867:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  40386e:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  403872:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  403876:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40387a:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40387e:	e8 8d 59 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	short[] s1 = *cast(short[]*)p1;
  403883:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  403887:	48 8b 02             	mov    (%rdx),%rax
  40388a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40388e:	48 8b 42 08          	mov    0x8(%rdx),%rax
  403892:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	short[] s2 = *cast(short[]*)p2;
  403896:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40389a:	48 8b 02             	mov    (%rdx),%rax
  40389d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4038a1:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4038a5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  4038a9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4038ad:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  4038b1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4038b5:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4038b9:	73 08                	jae    4038c3 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x60>
	    len = s2.length;
  4038bb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4038bf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  4038c3:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4038ca:	00 
  4038cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4038cf:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4038d3:	0f 92 c0             	setb   %al
  4038d6:	83 f0 01             	xor    $0x1,%eax
  4038d9:	84 c0                	test   %al,%al
  4038db:	0f 85 dc 00 00 00    	jne    4039bd <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x15a>
	{
	    int result = s1[u] - s2[u];
  4038e1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4038e5:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  4038ec:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4038f0:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4038f4:	73 0d                	jae    403903 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0xa0>
  4038f6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4038fa:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  403901:	eb 22                	jmp    403925 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0xc2>
  403903:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  40390a:	00 
  40390b:	48 c7 45 c8 68 02 41 	movq   $0x410268,-0x38(%rbp)
  403912:	00 
  403913:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  403917:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40391b:	ba 3d 00 00 00       	mov    $0x3d,%edx
  403920:	e8 b4 73 00 00       	callq  40acd9 <_d_array_bounds>
  403925:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40392c:	48 01 c0             	add    %rax,%rax
  40392f:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  403936:	0f b7 00             	movzwl (%rax),%eax
  403939:	98                   	cwtl   
  40393a:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  403940:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  403944:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  40394b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40394f:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  403953:	73 0d                	jae    403962 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0xff>
  403955:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403959:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  403960:	eb 22                	jmp    403984 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x121>
  403962:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  403969:	00 
  40396a:	48 c7 45 d8 68 02 41 	movq   $0x410268,-0x28(%rbp)
  403971:	00 
  403972:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  403976:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40397a:	ba 3d 00 00 00       	mov    $0x3d,%edx
  40397f:	e8 55 73 00 00       	callq  40acd9 <_d_array_bounds>
  403984:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40398b:	48 01 c0             	add    %rax,%rax
  40398e:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  403995:	0f b7 00             	movzwl (%rax),%eax
  403998:	98                   	cwtl   
  403999:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  40399f:	29 c2                	sub    %eax,%edx
  4039a1:	89 d0                	mov    %edx,%eax
  4039a3:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (result)
  4039a6:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  4039aa:	74 08                	je     4039b4 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x151>
		return result;
  4039ac:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4039af:	89 45 84             	mov    %eax,-0x7c(%rbp)
  4039b2:	eb 3c                	jmp    4039f0 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x18d>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int result = s1[u] - s2[u];
	    if (result)
  4039b4:	48 ff 45 f0          	incq   -0x10(%rbp)
  4039b8:	e9 0e ff ff ff       	jmpq   4038cb <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x68>
		return result;
	}
	if (s1.length < s2.length)
  4039bd:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4039c1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4039c5:	48 39 c2             	cmp    %rax,%rdx
  4039c8:	73 09                	jae    4039d3 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x170>
	    return -1;
  4039ca:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  4039d1:	eb 1d                	jmp    4039f0 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x18d>
	else if (s1.length > s2.length)
  4039d3:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4039d7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4039db:	48 39 c2             	cmp    %rax,%rdx
  4039de:	76 09                	jbe    4039e9 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x186>
	    return 1;
  4039e0:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  4039e7:	eb 07                	jmp    4039f0 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x18d>
	return 0;
  4039e9:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  4039f0:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  4039f3:	c9                   	leaveq 
  4039f4:	c3                   	retq   

00000000004039f5 <_D3std8typeinfo9ti_Ashort11TypeInfo_As5tsizeMFZm>:

    size_t tsize()
  4039f5:	55                   	push   %rbp
  4039f6:	48 89 e5             	mov    %rsp,%rbp
  4039f9:	48 83 ec 10          	sub    $0x10,%rsp
  4039fd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403a01:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403a05:	e8 06 58 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (short[]).sizeof;
  403a0a:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  403a0f:	c9                   	leaveq 
  403a10:	c3                   	retq   

0000000000403a11 <_D3std8typeinfo9ti_Ashort11TypeInfo_As5flagsMFZk>:

    uint flags()
  403a11:	55                   	push   %rbp
  403a12:	48 89 e5             	mov    %rsp,%rbp
  403a15:	48 83 ec 10          	sub    $0x10,%rsp
  403a19:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403a1d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403a21:	e8 ea 57 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  403a26:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  403a2b:	c9                   	leaveq 
  403a2c:	c3                   	retq   

0000000000403a2d <_D3std8typeinfo9ti_Ashort11TypeInfo_As4nextMFZC8TypeInfo>:

    TypeInfo next()
  403a2d:	55                   	push   %rbp
  403a2e:	48 89 e5             	mov    %rsp,%rbp
  403a31:	48 83 ec 10          	sub    $0x10,%rsp
  403a35:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403a39:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403a3d:	e8 ce 57 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(short);
  403a42:	48 c7 c0 f0 10 41 00 	mov    $0x4110f0,%rax
    }
  403a49:	c9                   	leaveq 
  403a4a:	c3                   	retq   

0000000000403a4b <_D3std8typeinfo9ti_Ashort11TypeInfo_At8toStringMFZAa>:

// ushort[]

class TypeInfo_At : TypeInfo_As
{
    char[] toString() { return "ushort[]"; }
  403a4b:	55                   	push   %rbp
  403a4c:	48 89 e5             	mov    %rsp,%rbp
  403a4f:	53                   	push   %rbx
  403a50:	48 83 ec 08          	sub    $0x8,%rsp
  403a54:	48 89 fb             	mov    %rdi,%rbx
  403a57:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403a5b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  403a5f:	e8 ac 57 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  403a64:	48 c7 03 08 00 00 00 	movq   $0x8,(%rbx)
  403a6b:	48 c7 43 08 30 03 41 	movq   $0x410330,0x8(%rbx)
  403a72:	00 
  403a73:	48 89 d8             	mov    %rbx,%rax
  403a76:	48 83 c4 08          	add    $0x8,%rsp
  403a7a:	5b                   	pop    %rbx
  403a7b:	c9                   	leaveq 
  403a7c:	c3                   	retq   

0000000000403a7d <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  403a7d:	55                   	push   %rbp
  403a7e:	48 89 e5             	mov    %rsp,%rbp
  403a81:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  403a88:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  403a8c:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  403a90:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  403a94:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  403a98:	e8 73 57 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ushort[] s1 = *cast(ushort[]*)p1;
  403a9d:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  403aa1:	48 8b 02             	mov    (%rdx),%rax
  403aa4:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  403aa8:	48 8b 42 08          	mov    0x8(%rdx),%rax
  403aac:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	ushort[] s2 = *cast(ushort[]*)p2;
  403ab0:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  403ab4:	48 8b 02             	mov    (%rdx),%rax
  403ab7:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  403abb:	48 8b 42 08          	mov    0x8(%rdx),%rax
  403abf:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  403ac3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403ac7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  403acb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403acf:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  403ad3:	73 08                	jae    403add <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x60>
	    len = s2.length;
  403ad5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403ad9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  403add:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  403ae4:	00 
  403ae5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403ae9:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  403aed:	0f 92 c0             	setb   %al
  403af0:	83 f0 01             	xor    $0x1,%eax
  403af3:	84 c0                	test   %al,%al
  403af5:	0f 85 e0 00 00 00    	jne    403bdb <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x15e>
	{
	    int result = s1[u] - s2[u];
  403afb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  403aff:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  403b06:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403b0a:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  403b0e:	73 0d                	jae    403b1d <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0xa0>
  403b10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403b14:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  403b1b:	eb 22                	jmp    403b3f <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0xc2>
  403b1d:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  403b24:	00 
  403b25:	48 c7 45 c8 68 02 41 	movq   $0x410268,-0x38(%rbp)
  403b2c:	00 
  403b2d:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  403b31:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  403b35:	ba 69 00 00 00       	mov    $0x69,%edx
  403b3a:	e8 9a 71 00 00       	callq  40acd9 <_d_array_bounds>
  403b3f:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  403b46:	48 01 c0             	add    %rax,%rax
  403b49:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  403b50:	0f b7 00             	movzwl (%rax),%eax
  403b53:	0f b7 c0             	movzwl %ax,%eax
  403b56:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  403b5c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  403b60:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  403b67:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403b6b:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  403b6f:	73 0d                	jae    403b7e <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x101>
  403b71:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403b75:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  403b7c:	eb 22                	jmp    403ba0 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x123>
  403b7e:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  403b85:	00 
  403b86:	48 c7 45 d8 68 02 41 	movq   $0x410268,-0x28(%rbp)
  403b8d:	00 
  403b8e:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  403b92:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  403b96:	ba 69 00 00 00       	mov    $0x69,%edx
  403b9b:	e8 39 71 00 00       	callq  40acd9 <_d_array_bounds>
  403ba0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  403ba7:	48 01 c0             	add    %rax,%rax
  403baa:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  403bb1:	0f b7 00             	movzwl (%rax),%eax
  403bb4:	0f b7 c0             	movzwl %ax,%eax
  403bb7:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  403bbd:	29 c2                	sub    %eax,%edx
  403bbf:	89 d0                	mov    %edx,%eax
  403bc1:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (result)
  403bc4:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  403bc8:	74 08                	je     403bd2 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x155>
		return result;
  403bca:	8b 45 fc             	mov    -0x4(%rbp),%eax
  403bcd:	89 45 84             	mov    %eax,-0x7c(%rbp)
  403bd0:	eb 3c                	jmp    403c0e <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x191>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int result = s1[u] - s2[u];
	    if (result)
  403bd2:	48 ff 45 f0          	incq   -0x10(%rbp)
  403bd6:	e9 0a ff ff ff       	jmpq   403ae5 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x68>
		return result;
	}
	if (s1.length < s2.length)
  403bdb:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  403bdf:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403be3:	48 39 c2             	cmp    %rax,%rdx
  403be6:	73 09                	jae    403bf1 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x174>
	    return -1;
  403be8:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  403bef:	eb 1d                	jmp    403c0e <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x191>
	else if (s1.length > s2.length)
  403bf1:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  403bf5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403bf9:	48 39 c2             	cmp    %rax,%rdx
  403bfc:	76 09                	jbe    403c07 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x18a>
	    return 1;
  403bfe:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  403c05:	eb 07                	jmp    403c0e <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x191>
	return 0;
  403c07:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  403c0e:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  403c11:	c9                   	leaveq 
  403c12:	c3                   	retq   

0000000000403c13 <_D3std8typeinfo9ti_Ashort11TypeInfo_At4nextMFZC8TypeInfo>:

    TypeInfo next()
  403c13:	55                   	push   %rbp
  403c14:	48 89 e5             	mov    %rsp,%rbp
  403c17:	48 83 ec 10          	sub    $0x10,%rsp
  403c1b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403c1f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403c23:	e8 e8 55 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(ushort);
  403c28:	48 c7 c0 90 14 41 00 	mov    $0x411490,%rax
    }
  403c2f:	c9                   	leaveq 
  403c30:	c3                   	retq   

0000000000403c31 <_D3std8typeinfo9ti_Ashort11TypeInfo_Au8toStringMFZAa>:

// wchar[]

class TypeInfo_Au : TypeInfo_At
{
    char[] toString() { return "wchar[]"; }
  403c31:	55                   	push   %rbp
  403c32:	48 89 e5             	mov    %rsp,%rbp
  403c35:	53                   	push   %rbx
  403c36:	48 83 ec 08          	sub    $0x8,%rsp
  403c3a:	48 89 fb             	mov    %rdi,%rbx
  403c3d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403c41:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  403c45:	e8 c6 55 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  403c4a:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  403c51:	48 c7 43 08 d0 03 41 	movq   $0x4103d0,0x8(%rbx)
  403c58:	00 
  403c59:	48 89 d8             	mov    %rbx,%rax
  403c5c:	48 83 c4 08          	add    $0x8,%rsp
  403c60:	5b                   	pop    %rbx
  403c61:	c9                   	leaveq 
  403c62:	c3                   	retq   

0000000000403c63 <_D3std8typeinfo9ti_Ashort11TypeInfo_Au4nextMFZC8TypeInfo>:

    TypeInfo next()
  403c63:	55                   	push   %rbp
  403c64:	48 89 e5             	mov    %rsp,%rbp
  403c67:	48 83 ec 10          	sub    $0x10,%rsp
  403c6b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403c6f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403c73:	e8 98 55 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(wchar);
  403c78:	48 c7 c0 10 16 41 00 	mov    $0x411610,%rax
    }
  403c7f:	c9                   	leaveq 
  403c80:	c3                   	retq   
  403c81:	90                   	nop    
  403c82:	90                   	nop    
  403c83:	90                   	nop    

0000000000403c84 <_D3std8typeinfo7ti_byte10TypeInfo_g8toStringMFZAa>:

module std.typeinfo.ti_byte;

class TypeInfo_g : TypeInfo
{
    char[] toString() { return "byte"; }
  403c84:	55                   	push   %rbp
  403c85:	48 89 e5             	mov    %rsp,%rbp
  403c88:	53                   	push   %rbx
  403c89:	48 83 ec 08          	sub    $0x8,%rsp
  403c8d:	48 89 fb             	mov    %rdi,%rbx
  403c90:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403c94:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  403c98:	e8 73 55 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  403c9d:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  403ca4:	48 c7 43 08 80 04 41 	movq   $0x410480,0x8(%rbx)
  403cab:	00 
  403cac:	48 89 d8             	mov    %rbx,%rax
  403caf:	48 83 c4 08          	add    $0x8,%rsp
  403cb3:	5b                   	pop    %rbx
  403cb4:	c9                   	leaveq 
  403cb5:	c3                   	retq   

0000000000403cb6 <_D3std8typeinfo7ti_byte10TypeInfo_g7getHashMFPvZm>:

    hash_t getHash(void *p)
  403cb6:	55                   	push   %rbp
  403cb7:	48 89 e5             	mov    %rsp,%rbp
  403cba:	48 83 ec 10          	sub    $0x10,%rsp
  403cbe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403cc2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403cc6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403cca:	e8 41 55 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(byte *)p;
  403ccf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403cd3:	0f b6 00             	movzbl (%rax),%eax
  403cd6:	48 0f be c0          	movsbq %al,%rax
    }
  403cda:	c9                   	leaveq 
  403cdb:	c3                   	retq   

0000000000403cdc <_D3std8typeinfo7ti_byte10TypeInfo_g6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  403cdc:	55                   	push   %rbp
  403cdd:	48 89 e5             	mov    %rsp,%rbp
  403ce0:	48 83 ec 20          	sub    $0x20,%rsp
  403ce4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403ce8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403cec:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  403cf0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403cf4:	e8 17 55 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(byte *)p1 == *cast(byte *)p2;
  403cf9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403cfd:	0f b6 10             	movzbl (%rax),%edx
  403d00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403d04:	0f b6 00             	movzbl (%rax),%eax
  403d07:	38 c2                	cmp    %al,%dl
  403d09:	0f 94 c0             	sete   %al
  403d0c:	0f b6 c0             	movzbl %al,%eax
    }
  403d0f:	c9                   	leaveq 
  403d10:	c3                   	retq   

0000000000403d11 <_D3std8typeinfo7ti_byte10TypeInfo_g7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  403d11:	55                   	push   %rbp
  403d12:	48 89 e5             	mov    %rsp,%rbp
  403d15:	48 83 ec 20          	sub    $0x20,%rsp
  403d19:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403d1d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403d21:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  403d25:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403d29:	e8 e2 54 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(byte *)p1 - *cast(byte *)p2;
  403d2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403d32:	0f b6 00             	movzbl (%rax),%eax
  403d35:	0f be d0             	movsbl %al,%edx
  403d38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403d3c:	0f b6 00             	movzbl (%rax),%eax
  403d3f:	0f be c0             	movsbl %al,%eax
  403d42:	89 d1                	mov    %edx,%ecx
  403d44:	29 c1                	sub    %eax,%ecx
  403d46:	89 c8                	mov    %ecx,%eax
    }
  403d48:	c9                   	leaveq 
  403d49:	c3                   	retq   

0000000000403d4a <_D3std8typeinfo7ti_byte10TypeInfo_g5tsizeMFZm>:

    size_t tsize()
  403d4a:	55                   	push   %rbp
  403d4b:	48 89 e5             	mov    %rsp,%rbp
  403d4e:	48 83 ec 10          	sub    $0x10,%rsp
  403d52:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403d56:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403d5a:	e8 b1 54 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return byte.sizeof;
  403d5f:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  403d64:	c9                   	leaveq 
  403d65:	c3                   	retq   

0000000000403d66 <_D3std8typeinfo7ti_byte10TypeInfo_g4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  403d66:	55                   	push   %rbp
  403d67:	48 89 e5             	mov    %rsp,%rbp
  403d6a:	48 83 ec 30          	sub    $0x30,%rsp
  403d6e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  403d72:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  403d76:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  403d7a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  403d7e:	e8 8d 54 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	byte t;
  403d83:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)

	t = *cast(byte *)p1;
  403d87:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  403d8b:	0f b6 00             	movzbl (%rax),%eax
  403d8e:	88 45 ff             	mov    %al,-0x1(%rbp)
	*cast(byte *)p1 = *cast(byte *)p2;
  403d91:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  403d95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403d99:	0f b6 00             	movzbl (%rax),%eax
  403d9c:	88 02                	mov    %al,(%rdx)
	*cast(byte *)p2 = t;
  403d9e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  403da2:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  403da6:	88 02                	mov    %al,(%rdx)
    }
  403da8:	c9                   	leaveq 
  403da9:	c3                   	retq   
  403daa:	90                   	nop    
  403dab:	90                   	nop    

0000000000403dac <_D3std8typeinfo4ti_C10TypeInfo_C7getHashMFPvZm>:

// Object

class TypeInfo_C : TypeInfo
{
    hash_t getHash(void *p)
  403dac:	55                   	push   %rbp
  403dad:	48 89 e5             	mov    %rsp,%rbp
  403db0:	48 83 ec 20          	sub    $0x20,%rsp
  403db4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  403db8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  403dbc:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  403dc0:	e8 4b 54 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	Object o = *cast(Object*)p;
  403dc5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  403dc9:	48 8b 00             	mov    (%rax),%rax
  403dcc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(o);
  403dd0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403dd4:	e8 37 54 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	return o.toHash();
  403dd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403ddd:	48 8b 00             	mov    (%rax),%rax
  403de0:	48 83 c0 10          	add    $0x10,%rax
  403de4:	48 8b 00             	mov    (%rax),%rax
  403de7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403deb:	ff d0                	callq  *%rax
    }
  403ded:	c9                   	leaveq 
  403dee:	c3                   	retq   

0000000000403def <_D3std8typeinfo4ti_C10TypeInfo_C6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  403def:	55                   	push   %rbp
  403df0:	48 89 e5             	mov    %rsp,%rbp
  403df3:	48 83 ec 30          	sub    $0x30,%rsp
  403df7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  403dfb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  403dff:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  403e03:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  403e07:	e8 04 54 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	Object o1 = *cast(Object*)p1;
  403e0c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  403e10:	48 8b 00             	mov    (%rax),%rax
  403e13:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	Object o2 = *cast(Object*)p2;
  403e17:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403e1b:	48 8b 00             	mov    (%rax),%rax
  403e1e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	return o1 == o2;
  403e22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403e26:	48 8b 00             	mov    (%rax),%rax
  403e29:	48 83 c0 20          	add    $0x20,%rax
  403e2d:	48 8b 00             	mov    (%rax),%rax
  403e30:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  403e34:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403e38:	ff d0                	callq  *%rax
    }
  403e3a:	c9                   	leaveq 
  403e3b:	c3                   	retq   

0000000000403e3c <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  403e3c:	55                   	push   %rbp
  403e3d:	48 89 e5             	mov    %rsp,%rbp
  403e40:	48 83 ec 40          	sub    $0x40,%rsp
  403e44:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  403e48:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  403e4c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  403e50:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  403e54:	e8 b7 53 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	Object o1 = *cast(Object*)p1;
  403e59:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  403e5d:	48 8b 00             	mov    (%rax),%rax
  403e60:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	Object o2 = *cast(Object*)p2;
  403e64:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  403e68:	48 8b 00             	mov    (%rax),%rax
  403e6b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	int c = 0;
  403e6f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)

	// Regard null references as always being "less than"
	if (!(o1 is o2))
  403e76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403e7a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  403e7e:	0f 94 c0             	sete   %al
  403e81:	83 f0 01             	xor    $0x1,%eax
  403e84:	84 c0                	test   %al,%al
  403e86:	74 43                	je     403ecb <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi+0x8f>
	{
	    if (o1)
  403e88:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  403e8d:	74 35                	je     403ec4 <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi+0x88>
	    {	if (!o2)
  403e8f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  403e94:	0f 95 c0             	setne  %al
  403e97:	83 f0 01             	xor    $0x1,%eax
  403e9a:	84 c0                	test   %al,%al
  403e9c:	74 09                	je     403ea7 <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi+0x6b>
		    c = 1;
  403e9e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  403ea5:	eb 24                	jmp    403ecb <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi+0x8f>
		else
		    c = o1.opCmp(o2);
  403ea7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403eab:	48 8b 00             	mov    (%rax),%rax
  403eae:	48 83 c0 18          	add    $0x18,%rax
  403eb2:	48 8b 00             	mov    (%rax),%rax
  403eb5:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  403eb9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403ebd:	ff d0                	callq  *%rax
  403ebf:	89 45 ec             	mov    %eax,-0x14(%rbp)
  403ec2:	eb 07                	jmp    403ecb <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi+0x8f>
	    }
	    else
		c = -1;
  403ec4:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rbp)
	}
	return c;
  403ecb:	8b 45 ec             	mov    -0x14(%rbp),%eax
    }
  403ece:	c9                   	leaveq 
  403ecf:	c3                   	retq   

0000000000403ed0 <_D3std8typeinfo4ti_C10TypeInfo_C5tsizeMFZm>:

    size_t tsize()
  403ed0:	55                   	push   %rbp
  403ed1:	48 89 e5             	mov    %rsp,%rbp
  403ed4:	48 83 ec 10          	sub    $0x10,%rsp
  403ed8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403edc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403ee0:	e8 2b 53 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return Object.sizeof;
  403ee5:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  403eea:	c9                   	leaveq 
  403eeb:	c3                   	retq   

0000000000403eec <_D3std8typeinfo4ti_C10TypeInfo_C5flagsMFZk>:

    uint flags()
  403eec:	55                   	push   %rbp
  403eed:	48 89 e5             	mov    %rsp,%rbp
  403ef0:	48 83 ec 10          	sub    $0x10,%rsp
  403ef4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403ef8:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403efc:	e8 0f 53 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  403f01:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  403f06:	c9                   	leaveq 
  403f07:	c3                   	retq   

0000000000403f08 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8toStringMFZAa>:

module std.typeinfo.ti_cdouble;

class TypeInfo_r : TypeInfo
{
    char[] toString() { return "cdouble"; }
  403f08:	55                   	push   %rbp
  403f09:	48 89 e5             	mov    %rsp,%rbp
  403f0c:	53                   	push   %rbx
  403f0d:	48 83 ec 08          	sub    $0x8,%rsp
  403f11:	48 89 fb             	mov    %rdi,%rbx
  403f14:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403f18:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  403f1c:	e8 ef 52 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  403f21:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  403f28:	48 c7 43 08 e0 05 41 	movq   $0x4105e0,0x8(%rbx)
  403f2f:	00 
  403f30:	48 89 d8             	mov    %rbx,%rax
  403f33:	48 83 c4 08          	add    $0x8,%rsp
  403f37:	5b                   	pop    %rbx
  403f38:	c9                   	leaveq 
  403f39:	c3                   	retq   

0000000000403f3a <_D3std8typeinfo10ti_cdouble10TypeInfo_r7getHashMFPvZm>:

    hash_t getHash(void *p)
  403f3a:	55                   	push   %rbp
  403f3b:	48 89 e5             	mov    %rsp,%rbp
  403f3e:	48 83 ec 10          	sub    $0x10,%rsp
  403f42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403f46:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403f4a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403f4e:	e8 bd 52 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cast(uint *)p)[0] + (cast(uint *)p)[1] +
  403f53:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403f57:	b8 00 00 00 00       	mov    $0x0,%eax
  403f5c:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  403f60:	8b 08                	mov    (%rax),%ecx
  403f62:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403f66:	b8 04 00 00 00       	mov    $0x4,%eax
  403f6b:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  403f6f:	8b 00                	mov    (%rax),%eax
  403f71:	01 c1                	add    %eax,%ecx
  403f73:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403f77:	b8 08 00 00 00       	mov    $0x8,%eax
  403f7c:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  403f80:	8b 00                	mov    (%rax),%eax
  403f82:	01 c1                	add    %eax,%ecx
  403f84:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403f88:	b8 0c 00 00 00       	mov    $0xc,%eax
  403f8d:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  403f91:	8b 00                	mov    (%rax),%eax
  403f93:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  403f96:	89 c0                	mov    %eax,%eax
	       (cast(uint *)p)[2] + (cast(uint *)p)[3];
    }
  403f98:	c9                   	leaveq 
  403f99:	c3                   	retq   

0000000000403f9a <_D3std8typeinfo10ti_cdouble10TypeInfo_r7_equalsFrrZi>:

    static int _equals(cdouble f1, cdouble f2)
  403f9a:	55                   	push   %rbp
  403f9b:	48 89 e5             	mov    %rsp,%rbp
  403f9e:	f2 0f 11 45 d8       	movsd  %xmm0,-0x28(%rbp)
  403fa3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403fa7:	f2 0f 11 4d d8       	movsd  %xmm1,-0x28(%rbp)
  403fac:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  403fb0:	f2 0f 11 55 d8       	movsd  %xmm2,-0x28(%rbp)
  403fb5:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  403fb9:	f2 0f 11 5d d8       	movsd  %xmm3,-0x28(%rbp)
  403fbe:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  403fc2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  403fc6:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  403fca:	48 89 c8             	mov    %rcx,%rax
  403fcd:	48 89 f2             	mov    %rsi,%rdx
  403fd0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  403fd4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    {
	return f1 == f2;
  403fd8:	66 0f 12 4d f0       	movlpd -0x10(%rbp),%xmm1
  403fdd:	66 0f 12 5d f8       	movlpd -0x8(%rbp),%xmm3
  403fe2:	66 0f 12 45 e0       	movlpd -0x20(%rbp),%xmm0
  403fe7:	66 0f 12 55 e8       	movlpd -0x18(%rbp),%xmm2
  403fec:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
  403ff0:	0f 94 c1             	sete   %cl
  403ff3:	0f 9b c0             	setnp  %al
  403ff6:	21 c1                	and    %eax,%ecx
  403ff8:	66 0f 2e da          	ucomisd %xmm2,%xmm3
  403ffc:	0f 94 c0             	sete   %al
  403fff:	0f 9b c2             	setnp  %dl
  404002:	21 d0                	and    %edx,%eax
  404004:	21 c8                	and    %ecx,%eax
  404006:	0f b6 c0             	movzbl %al,%eax
    }
  404009:	c9                   	leaveq 
  40400a:	c3                   	retq   

000000000040400b <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi>:

    static int _compare(cdouble f1, cdouble f2)
  40400b:	55                   	push   %rbp
  40400c:	48 89 e5             	mov    %rsp,%rbp
  40400f:	f2 0f 11 45 c8       	movsd  %xmm0,-0x38(%rbp)
  404014:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  404018:	f2 0f 11 4d c8       	movsd  %xmm1,-0x38(%rbp)
  40401d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  404021:	f2 0f 11 55 c8       	movsd  %xmm2,-0x38(%rbp)
  404026:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  40402a:	f2 0f 11 5d c8       	movsd  %xmm3,-0x38(%rbp)
  40402f:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  404033:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  404037:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40403b:	48 89 c8             	mov    %rcx,%rax
  40403e:	48 89 f2             	mov    %rsi,%rdx
  404041:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  404045:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    {   int result;
  404049:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	if (f1.re < f2.re)
  404050:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  404055:	66 0f 12 45 d0       	movlpd -0x30(%rbp),%xmm0
  40405a:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  40405e:	77 02                	ja     404062 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x57>
  404060:	eb 09                	jmp    40406b <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x60>
	    result = -1;
  404062:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  404069:	eb 58                	jmp    4040c3 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xb8>
	else if (f1.re > f2.re)
  40406b:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  404070:	66 0f 12 45 d0       	movlpd -0x30(%rbp),%xmm0
  404075:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
  404079:	77 02                	ja     40407d <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x72>
  40407b:	eb 09                	jmp    404086 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x7b>
	    result = 1;
  40407d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  404084:	eb 3d                	jmp    4040c3 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xb8>
	else if (f1.im < f2.im)
  404086:	66 0f 12 4d e8       	movlpd -0x18(%rbp),%xmm1
  40408b:	66 0f 12 45 d8       	movlpd -0x28(%rbp),%xmm0
  404090:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  404094:	77 02                	ja     404098 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x8d>
  404096:	eb 09                	jmp    4040a1 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x96>
	    result = -1;
  404098:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  40409f:	eb 22                	jmp    4040c3 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xb8>
	else if (f1.im > f2.im)
  4040a1:	66 0f 12 4d e8       	movlpd -0x18(%rbp),%xmm1
  4040a6:	66 0f 12 45 d8       	movlpd -0x28(%rbp),%xmm0
  4040ab:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
  4040af:	77 02                	ja     4040b3 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xa8>
  4040b1:	eb 09                	jmp    4040bc <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xb1>
	    result = 1;
  4040b3:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  4040ba:	eb 07                	jmp    4040c3 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xb8>
	else
	    result = 0;
  4040bc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
        return result;
  4040c3:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
  4040c6:	c9                   	leaveq 
  4040c7:	c3                   	retq   

00000000004040c8 <_D3std8typeinfo10ti_cdouble10TypeInfo_r6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4040c8:	55                   	push   %rbp
  4040c9:	48 89 e5             	mov    %rsp,%rbp
  4040cc:	48 83 ec 20          	sub    $0x20,%rsp
  4040d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4040d4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4040d8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4040dc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4040e0:	e8 2b 51 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(cdouble *)p1, *cast(cdouble *)p2);
  4040e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4040e9:	48 8b 10             	mov    (%rax),%rdx
  4040ec:	48 8b 48 08          	mov    0x8(%rax),%rcx
  4040f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4040f4:	48 8b 30             	mov    (%rax),%rsi
  4040f7:	48 8b 40 08          	mov    0x8(%rax),%rax
  4040fb:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  4040ff:	66 0f 12 55 e0       	movlpd -0x20(%rbp),%xmm2
  404104:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  404108:	66 0f 12 5d e0       	movlpd -0x20(%rbp),%xmm3
  40410d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  404111:	66 0f 12 45 e0       	movlpd -0x20(%rbp),%xmm0
  404116:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40411a:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  40411f:	e8 76 fe ff ff       	callq  403f9a <_D3std8typeinfo10ti_cdouble10TypeInfo_r7_equalsFrrZi>
    }
  404124:	c9                   	leaveq 
  404125:	c3                   	retq   

0000000000404126 <_D3std8typeinfo10ti_cdouble10TypeInfo_r7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  404126:	55                   	push   %rbp
  404127:	48 89 e5             	mov    %rsp,%rbp
  40412a:	48 83 ec 20          	sub    $0x20,%rsp
  40412e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404132:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404136:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40413a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40413e:	e8 cd 50 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(cdouble *)p1, *cast(cdouble *)p2);
  404143:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404147:	48 8b 10             	mov    (%rax),%rdx
  40414a:	48 8b 48 08          	mov    0x8(%rax),%rcx
  40414e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404152:	48 8b 30             	mov    (%rax),%rsi
  404155:	48 8b 40 08          	mov    0x8(%rax),%rax
  404159:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  40415d:	66 0f 12 55 e0       	movlpd -0x20(%rbp),%xmm2
  404162:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  404166:	66 0f 12 5d e0       	movlpd -0x20(%rbp),%xmm3
  40416b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40416f:	66 0f 12 45 e0       	movlpd -0x20(%rbp),%xmm0
  404174:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  404178:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  40417d:	e8 89 fe ff ff       	callq  40400b <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi>
    }
  404182:	c9                   	leaveq 
  404183:	c3                   	retq   

0000000000404184 <_D3std8typeinfo10ti_cdouble10TypeInfo_r5tsizeMFZm>:

    size_t tsize()
  404184:	55                   	push   %rbp
  404185:	48 89 e5             	mov    %rsp,%rbp
  404188:	48 83 ec 10          	sub    $0x10,%rsp
  40418c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404190:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404194:	e8 77 50 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return cdouble.sizeof;
  404199:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  40419e:	c9                   	leaveq 
  40419f:	c3                   	retq   

00000000004041a0 <_D3std8typeinfo10ti_cdouble10TypeInfo_r4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  4041a0:	55                   	push   %rbp
  4041a1:	48 89 e5             	mov    %rsp,%rbp
  4041a4:	48 83 ec 30          	sub    $0x30,%rsp
  4041a8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4041ac:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4041b0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4041b4:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4041b8:	e8 53 50 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cdouble t;
  4041bd:	48 b8 00 00 00 00 00 	mov    $0x7ff8000000000000,%rax
  4041c4:	00 f8 7f 
  4041c7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4041cb:	48 b8 00 00 00 00 00 	mov    $0x7ff8000000000000,%rax
  4041d2:	00 f8 7f 
  4041d5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	t = *cast(cdouble *)p1;
  4041d9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4041dd:	48 8b 02             	mov    (%rdx),%rax
  4041e0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4041e4:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4041e8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(cdouble *)p1 = *cast(cdouble *)p2;
  4041ec:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4041f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4041f4:	48 8b 10             	mov    (%rax),%rdx
  4041f7:	48 8b 40 08          	mov    0x8(%rax),%rax
  4041fb:	48 89 11             	mov    %rdx,(%rcx)
  4041fe:	48 89 41 08          	mov    %rax,0x8(%rcx)
	*cast(cdouble *)p2 = t;
  404202:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  404206:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40420a:	48 89 02             	mov    %rax,(%rdx)
  40420d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404211:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
  404215:	c9                   	leaveq 
  404216:	c3                   	retq   

0000000000404217 <_D3std8typeinfo10ti_cdouble10TypeInfo_r4initMFZAv>:

    void[] init()
  404217:	55                   	push   %rbp
  404218:	48 89 e5             	mov    %rsp,%rbp
  40421b:	53                   	push   %rbx
  40421c:	48 83 ec 28          	sub    $0x28,%rsp
  404220:	48 89 fb             	mov    %rdi,%rbx
  404223:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  404227:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  40422b:	e8 e0 4f 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {	static cdouble r;

	return (cast(cdouble *)&r)[0 .. 1];
  404230:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  404237:	00 
  404238:	48 c7 45 e8 80 ab 41 	movq   $0x41ab80,-0x18(%rbp)
  40423f:	00 
  404240:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  404244:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404248:	49 89 c0             	mov    %rax,%r8
  40424b:	ba 10 00 00 00       	mov    $0x10,%edx
  404250:	be 01 00 00 00       	mov    $0x1,%esi
  404255:	48 89 df             	mov    %rbx,%rdi
  404258:	e8 56 92 00 00       	callq  40d4b3 <_d_arraycast>
    }
  40425d:	48 89 d8             	mov    %rbx,%rax
  404260:	48 83 c4 28          	add    $0x28,%rsp
  404264:	5b                   	pop    %rbx
  404265:	c9                   	leaveq 
  404266:	c3                   	retq   
  404267:	90                   	nop    

0000000000404268 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8toStringMFZAa>:

module std.typeinfo.ti_cfloat;

class TypeInfo_q : TypeInfo
{
    char[] toString() { return "cfloat"; }
  404268:	55                   	push   %rbp
  404269:	48 89 e5             	mov    %rsp,%rbp
  40426c:	53                   	push   %rbx
  40426d:	48 83 ec 08          	sub    $0x8,%rsp
  404271:	48 89 fb             	mov    %rdi,%rbx
  404274:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404278:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40427c:	e8 8f 4f 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  404281:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  404288:	48 c7 43 08 a0 06 41 	movq   $0x4106a0,0x8(%rbx)
  40428f:	00 
  404290:	48 89 d8             	mov    %rbx,%rax
  404293:	48 83 c4 08          	add    $0x8,%rsp
  404297:	5b                   	pop    %rbx
  404298:	c9                   	leaveq 
  404299:	c3                   	retq   

000000000040429a <_D3std8typeinfo9ti_cfloat10TypeInfo_q7getHashMFPvZm>:

    hash_t getHash(void *p)
  40429a:	55                   	push   %rbp
  40429b:	48 89 e5             	mov    %rsp,%rbp
  40429e:	48 83 ec 10          	sub    $0x10,%rsp
  4042a2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4042a6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4042aa:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4042ae:	e8 5d 4f 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cast(uint *)p)[0] + (cast(uint *)p)[1];
  4042b3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4042b7:	b8 00 00 00 00       	mov    $0x0,%eax
  4042bc:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4042c0:	8b 08                	mov    (%rax),%ecx
  4042c2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4042c6:	b8 04 00 00 00       	mov    $0x4,%eax
  4042cb:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4042cf:	8b 00                	mov    (%rax),%eax
  4042d1:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  4042d4:	89 c0                	mov    %eax,%eax
    }
  4042d6:	c9                   	leaveq 
  4042d7:	c3                   	retq   

00000000004042d8 <_D3std8typeinfo9ti_cfloat10TypeInfo_q7_equalsFqqZi>:

    static int _equals(cfloat f1, cfloat f2)
  4042d8:	55                   	push   %rbp
  4042d9:	48 89 e5             	mov    %rsp,%rbp
  4042dc:	66 48 0f 7e c0       	movq   %xmm0,%rax
  4042e1:	66 48 0f 7e ca       	movq   %xmm1,%rdx
  4042e6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4042ea:	48 89 d0             	mov    %rdx,%rax
  4042ed:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    {
	return f1 == f2;
  4042f1:	f3 0f 10 4d f8       	movss  -0x8(%rbp),%xmm1
  4042f6:	f3 0f 10 5d fc       	movss  -0x4(%rbp),%xmm3
  4042fb:	f3 0f 10 45 f0       	movss  -0x10(%rbp),%xmm0
  404300:	f3 0f 10 55 f4       	movss  -0xc(%rbp),%xmm2
  404305:	0f 2e c8             	ucomiss %xmm0,%xmm1
  404308:	0f 94 c1             	sete   %cl
  40430b:	0f 9b c0             	setnp  %al
  40430e:	21 c1                	and    %eax,%ecx
  404310:	0f 2e da             	ucomiss %xmm2,%xmm3
  404313:	0f 94 c0             	sete   %al
  404316:	0f 9b c2             	setnp  %dl
  404319:	21 d0                	and    %edx,%eax
  40431b:	21 c8                	and    %ecx,%eax
  40431d:	0f b6 c0             	movzbl %al,%eax
    }
  404320:	c9                   	leaveq 
  404321:	c3                   	retq   

0000000000404322 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi>:

    static int _compare(cfloat f1, cfloat f2)
  404322:	55                   	push   %rbp
  404323:	48 89 e5             	mov    %rsp,%rbp
  404326:	66 48 0f 7e c0       	movq   %xmm0,%rax
  40432b:	66 48 0f 7e ca       	movq   %xmm1,%rdx
  404330:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  404334:	48 89 d0             	mov    %rdx,%rax
  404337:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    {   int result;
  40433b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	if (f1.re < f2.re)
  404342:	f3 0f 10 4d e8       	movss  -0x18(%rbp),%xmm1
  404347:	f3 0f 10 45 e0       	movss  -0x20(%rbp),%xmm0
  40434c:	0f 2e c1             	ucomiss %xmm1,%xmm0
  40434f:	77 02                	ja     404353 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x31>
  404351:	eb 09                	jmp    40435c <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x3a>
	    result = -1;
  404353:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  40435a:	eb 55                	jmp    4043b1 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x8f>
	else if (f1.re > f2.re)
  40435c:	f3 0f 10 4d e8       	movss  -0x18(%rbp),%xmm1
  404361:	f3 0f 10 45 e0       	movss  -0x20(%rbp),%xmm0
  404366:	0f 2e c8             	ucomiss %xmm0,%xmm1
  404369:	77 02                	ja     40436d <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x4b>
  40436b:	eb 09                	jmp    404376 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x54>
	    result = 1;
  40436d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  404374:	eb 3b                	jmp    4043b1 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x8f>
	else if (f1.im < f2.im)
  404376:	f3 0f 10 4d ec       	movss  -0x14(%rbp),%xmm1
  40437b:	f3 0f 10 45 e4       	movss  -0x1c(%rbp),%xmm0
  404380:	0f 2e c1             	ucomiss %xmm1,%xmm0
  404383:	77 02                	ja     404387 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x65>
  404385:	eb 09                	jmp    404390 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x6e>
	    result = -1;
  404387:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  40438e:	eb 21                	jmp    4043b1 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x8f>
	else if (f1.im > f2.im)
  404390:	f3 0f 10 4d ec       	movss  -0x14(%rbp),%xmm1
  404395:	f3 0f 10 45 e4       	movss  -0x1c(%rbp),%xmm0
  40439a:	0f 2e c8             	ucomiss %xmm0,%xmm1
  40439d:	77 02                	ja     4043a1 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x7f>
  40439f:	eb 09                	jmp    4043aa <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x88>
	    result = 1;
  4043a1:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  4043a8:	eb 07                	jmp    4043b1 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x8f>
	else
	    result = 0;
  4043aa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
        return result;
  4043b1:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
  4043b4:	c9                   	leaveq 
  4043b5:	c3                   	retq   

00000000004043b6 <_D3std8typeinfo9ti_cfloat10TypeInfo_q6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4043b6:	55                   	push   %rbp
  4043b7:	48 89 e5             	mov    %rsp,%rbp
  4043ba:	48 83 ec 30          	sub    $0x30,%rsp
  4043be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4043c2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4043c6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4043ca:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4043ce:	e8 3d 4e 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(cfloat *)p1, *cast(cfloat *)p2);
  4043d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4043d7:	8b 10                	mov    (%rax),%edx
  4043d9:	8b 48 04             	mov    0x4(%rax),%ecx
  4043dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4043e0:	8b 30                	mov    (%rax),%esi
  4043e2:	8b 78 04             	mov    0x4(%rax),%edi
  4043e5:	89 d0                	mov    %edx,%eax
  4043e7:	89 ca                	mov    %ecx,%edx
  4043e9:	89 45 e0             	mov    %eax,-0x20(%rbp)
  4043ec:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  4043ef:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4043f3:	89 f0                	mov    %esi,%eax
  4043f5:	89 fa                	mov    %edi,%edx
  4043f7:	89 45 d8             	mov    %eax,-0x28(%rbp)
  4043fa:	89 55 dc             	mov    %edx,-0x24(%rbp)
  4043fd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404401:	66 48 0f 6e c9       	movq   %rcx,%xmm1
  404406:	66 48 0f 6e c0       	movq   %rax,%xmm0
  40440b:	e8 c8 fe ff ff       	callq  4042d8 <_D3std8typeinfo9ti_cfloat10TypeInfo_q7_equalsFqqZi>
    }
  404410:	c9                   	leaveq 
  404411:	c3                   	retq   

0000000000404412 <_D3std8typeinfo9ti_cfloat10TypeInfo_q7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  404412:	55                   	push   %rbp
  404413:	48 89 e5             	mov    %rsp,%rbp
  404416:	48 83 ec 30          	sub    $0x30,%rsp
  40441a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40441e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404422:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404426:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40442a:	e8 e1 4d 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(cfloat *)p1, *cast(cfloat *)p2);
  40442f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404433:	8b 10                	mov    (%rax),%edx
  404435:	8b 48 04             	mov    0x4(%rax),%ecx
  404438:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40443c:	8b 30                	mov    (%rax),%esi
  40443e:	8b 78 04             	mov    0x4(%rax),%edi
  404441:	89 d0                	mov    %edx,%eax
  404443:	89 ca                	mov    %ecx,%edx
  404445:	89 45 e0             	mov    %eax,-0x20(%rbp)
  404448:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  40444b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40444f:	89 f0                	mov    %esi,%eax
  404451:	89 fa                	mov    %edi,%edx
  404453:	89 45 d8             	mov    %eax,-0x28(%rbp)
  404456:	89 55 dc             	mov    %edx,-0x24(%rbp)
  404459:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40445d:	66 48 0f 6e c9       	movq   %rcx,%xmm1
  404462:	66 48 0f 6e c0       	movq   %rax,%xmm0
  404467:	e8 b6 fe ff ff       	callq  404322 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi>
    }
  40446c:	c9                   	leaveq 
  40446d:	c3                   	retq   

000000000040446e <_D3std8typeinfo9ti_cfloat10TypeInfo_q5tsizeMFZm>:

    size_t tsize()
  40446e:	55                   	push   %rbp
  40446f:	48 89 e5             	mov    %rsp,%rbp
  404472:	48 83 ec 10          	sub    $0x10,%rsp
  404476:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40447a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40447e:	e8 8d 4d 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return cfloat.sizeof;
  404483:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  404488:	c9                   	leaveq 
  404489:	c3                   	retq   

000000000040448a <_D3std8typeinfo9ti_cfloat10TypeInfo_q4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  40448a:	55                   	push   %rbp
  40448b:	48 89 e5             	mov    %rsp,%rbp
  40448e:	48 83 ec 30          	sub    $0x30,%rsp
  404492:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404496:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40449a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40449e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4044a2:	e8 69 4d 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cfloat t;
  4044a7:	b8 00 00 c0 7f       	mov    $0x7fc00000,%eax
  4044ac:	89 45 f8             	mov    %eax,-0x8(%rbp)
  4044af:	b8 00 00 c0 7f       	mov    $0x7fc00000,%eax
  4044b4:	89 45 fc             	mov    %eax,-0x4(%rbp)

	t = *cast(cfloat *)p1;
  4044b7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4044bb:	8b 02                	mov    (%rdx),%eax
  4044bd:	89 45 f8             	mov    %eax,-0x8(%rbp)
  4044c0:	8b 42 04             	mov    0x4(%rdx),%eax
  4044c3:	89 45 fc             	mov    %eax,-0x4(%rbp)
	*cast(cfloat *)p1 = *cast(cfloat *)p2;
  4044c6:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4044ca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4044ce:	8b 10                	mov    (%rax),%edx
  4044d0:	8b 40 04             	mov    0x4(%rax),%eax
  4044d3:	89 11                	mov    %edx,(%rcx)
  4044d5:	89 41 04             	mov    %eax,0x4(%rcx)
	*cast(cfloat *)p2 = t;
  4044d8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4044dc:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4044df:	89 02                	mov    %eax,(%rdx)
  4044e1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4044e4:	89 42 04             	mov    %eax,0x4(%rdx)
    }
  4044e7:	c9                   	leaveq 
  4044e8:	c3                   	retq   

00000000004044e9 <_D3std8typeinfo9ti_cfloat10TypeInfo_q4initMFZAv>:

    void[] init()
  4044e9:	55                   	push   %rbp
  4044ea:	48 89 e5             	mov    %rsp,%rbp
  4044ed:	53                   	push   %rbx
  4044ee:	48 83 ec 28          	sub    $0x28,%rsp
  4044f2:	48 89 fb             	mov    %rdi,%rbx
  4044f5:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  4044f9:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4044fd:	e8 0e 4d 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {	static cfloat r;

	return (cast(cfloat *)&r)[0 .. 1];
  404502:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  404509:	00 
  40450a:	48 c7 45 e8 40 ac 41 	movq   $0x41ac40,-0x18(%rbp)
  404511:	00 
  404512:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  404516:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40451a:	49 89 c0             	mov    %rax,%r8
  40451d:	ba 08 00 00 00       	mov    $0x8,%edx
  404522:	be 01 00 00 00       	mov    $0x1,%esi
  404527:	48 89 df             	mov    %rbx,%rdi
  40452a:	e8 84 8f 00 00       	callq  40d4b3 <_d_arraycast>
    }
  40452f:	48 89 d8             	mov    %rbx,%rax
  404532:	48 83 c4 28          	add    $0x28,%rsp
  404536:	5b                   	pop    %rbx
  404537:	c9                   	leaveq 
  404538:	c3                   	retq   
  404539:	90                   	nop    
  40453a:	90                   	nop    
  40453b:	90                   	nop    

000000000040453c <_D3std8typeinfo7ti_char10TypeInfo_a8toStringMFZAa>:

module std.typeinfo.ti_char;

class TypeInfo_a : TypeInfo
{
    char[] toString() { return "char"; }
  40453c:	55                   	push   %rbp
  40453d:	48 89 e5             	mov    %rsp,%rbp
  404540:	53                   	push   %rbx
  404541:	48 83 ec 08          	sub    $0x8,%rsp
  404545:	48 89 fb             	mov    %rdi,%rbx
  404548:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40454c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  404550:	e8 bb 4c 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  404555:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  40455c:	48 c7 43 08 60 07 41 	movq   $0x410760,0x8(%rbx)
  404563:	00 
  404564:	48 89 d8             	mov    %rbx,%rax
  404567:	48 83 c4 08          	add    $0x8,%rsp
  40456b:	5b                   	pop    %rbx
  40456c:	c9                   	leaveq 
  40456d:	c3                   	retq   

000000000040456e <_D3std8typeinfo7ti_char10TypeInfo_a7getHashMFPvZm>:

    hash_t getHash(void *p)
  40456e:	55                   	push   %rbp
  40456f:	48 89 e5             	mov    %rsp,%rbp
  404572:	48 83 ec 10          	sub    $0x10,%rsp
  404576:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40457a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40457e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404582:	e8 89 4c 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(char *)p;
  404587:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40458b:	0f b6 00             	movzbl (%rax),%eax
  40458e:	0f b6 c0             	movzbl %al,%eax
    }
  404591:	c9                   	leaveq 
  404592:	c3                   	retq   

0000000000404593 <_D3std8typeinfo7ti_char10TypeInfo_a6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  404593:	55                   	push   %rbp
  404594:	48 89 e5             	mov    %rsp,%rbp
  404597:	48 83 ec 20          	sub    $0x20,%rsp
  40459b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40459f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4045a3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4045a7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4045ab:	e8 60 4c 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(char *)p1 == *cast(char *)p2;
  4045b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4045b4:	0f b6 10             	movzbl (%rax),%edx
  4045b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4045bb:	0f b6 00             	movzbl (%rax),%eax
  4045be:	38 c2                	cmp    %al,%dl
  4045c0:	0f 94 c0             	sete   %al
  4045c3:	0f b6 c0             	movzbl %al,%eax
    }
  4045c6:	c9                   	leaveq 
  4045c7:	c3                   	retq   

00000000004045c8 <_D3std8typeinfo7ti_char10TypeInfo_a7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4045c8:	55                   	push   %rbp
  4045c9:	48 89 e5             	mov    %rsp,%rbp
  4045cc:	48 83 ec 20          	sub    $0x20,%rsp
  4045d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4045d4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4045d8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4045dc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4045e0:	e8 2b 4c 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(char *)p1 - *cast(char *)p2;
  4045e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4045e9:	0f b6 00             	movzbl (%rax),%eax
  4045ec:	0f b6 d0             	movzbl %al,%edx
  4045ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4045f3:	0f b6 00             	movzbl (%rax),%eax
  4045f6:	0f b6 c0             	movzbl %al,%eax
  4045f9:	89 d1                	mov    %edx,%ecx
  4045fb:	29 c1                	sub    %eax,%ecx
  4045fd:	89 c8                	mov    %ecx,%eax
    }
  4045ff:	c9                   	leaveq 
  404600:	c3                   	retq   

0000000000404601 <_D3std8typeinfo7ti_char10TypeInfo_a5tsizeMFZm>:

    size_t tsize()
  404601:	55                   	push   %rbp
  404602:	48 89 e5             	mov    %rsp,%rbp
  404605:	48 83 ec 10          	sub    $0x10,%rsp
  404609:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40460d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404611:	e8 fa 4b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return char.sizeof;
  404616:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  40461b:	c9                   	leaveq 
  40461c:	c3                   	retq   

000000000040461d <_D3std8typeinfo7ti_char10TypeInfo_a4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  40461d:	55                   	push   %rbp
  40461e:	48 89 e5             	mov    %rsp,%rbp
  404621:	48 83 ec 30          	sub    $0x30,%rsp
  404625:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404629:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40462d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  404631:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  404635:	e8 d6 4b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	char t;
  40463a:	c6 45 ff ff          	movb   $0xff,-0x1(%rbp)

	t = *cast(char *)p1;
  40463e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  404642:	0f b6 00             	movzbl (%rax),%eax
  404645:	88 45 ff             	mov    %al,-0x1(%rbp)
	*cast(char *)p1 = *cast(char *)p2;
  404648:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40464c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404650:	0f b6 00             	movzbl (%rax),%eax
  404653:	88 02                	mov    %al,(%rdx)
	*cast(char *)p2 = t;
  404655:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  404659:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40465d:	88 02                	mov    %al,(%rdx)
    }
  40465f:	c9                   	leaveq 
  404660:	c3                   	retq   

0000000000404661 <_D3std8typeinfo7ti_char10TypeInfo_a4initMFZAv>:

    void[] init()
  404661:	55                   	push   %rbp
  404662:	48 89 e5             	mov    %rsp,%rbp
  404665:	53                   	push   %rbx
  404666:	48 83 ec 28          	sub    $0x28,%rsp
  40466a:	48 89 fb             	mov    %rdi,%rbx
  40466d:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  404671:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  404675:	e8 96 4b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {	static char c;

	return (cast(char *)&c)[0 .. 1];
  40467a:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  404681:	00 
  404682:	48 c7 45 e8 00 ad 41 	movq   $0x41ad00,-0x18(%rbp)
  404689:	00 
  40468a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40468e:	48 89 03             	mov    %rax,(%rbx)
  404691:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404695:	48 89 43 08          	mov    %rax,0x8(%rbx)
    }
  404699:	48 89 d8             	mov    %rbx,%rax
  40469c:	48 83 c4 28          	add    $0x28,%rsp
  4046a0:	5b                   	pop    %rbx
  4046a1:	c9                   	leaveq 
  4046a2:	c3                   	retq   
  4046a3:	90                   	nop    

00000000004046a4 <_D3std8typeinfo8ti_creal10TypeInfo_c8toStringMFZAa>:

module std.typeinfo.ti_creal;

class TypeInfo_c : TypeInfo
{
    char[] toString() { return "creal"; }
  4046a4:	55                   	push   %rbp
  4046a5:	48 89 e5             	mov    %rsp,%rbp
  4046a8:	53                   	push   %rbx
  4046a9:	48 83 ec 08          	sub    $0x8,%rsp
  4046ad:	48 89 fb             	mov    %rdi,%rbx
  4046b0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4046b4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4046b8:	e8 53 4b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  4046bd:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  4046c4:	48 c7 43 08 20 08 41 	movq   $0x410820,0x8(%rbx)
  4046cb:	00 
  4046cc:	48 89 d8             	mov    %rbx,%rax
  4046cf:	48 83 c4 08          	add    $0x8,%rsp
  4046d3:	5b                   	pop    %rbx
  4046d4:	c9                   	leaveq 
  4046d5:	c3                   	retq   

00000000004046d6 <_D3std8typeinfo8ti_creal10TypeInfo_c7getHashMFPvZm>:

    hash_t getHash(void *p)
  4046d6:	55                   	push   %rbp
  4046d7:	48 89 e5             	mov    %rsp,%rbp
  4046da:	48 83 ec 10          	sub    $0x10,%rsp
  4046de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4046e2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4046e6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4046ea:	e8 21 4b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cast(uint *)p)[0] + (cast(uint *)p)[1] +
  4046ef:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4046f3:	b8 00 00 00 00       	mov    $0x0,%eax
  4046f8:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4046fc:	8b 08                	mov    (%rax),%ecx
  4046fe:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  404702:	b8 04 00 00 00       	mov    $0x4,%eax
  404707:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40470b:	8b 00                	mov    (%rax),%eax
  40470d:	01 c1                	add    %eax,%ecx
  40470f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  404713:	b8 08 00 00 00       	mov    $0x8,%eax
  404718:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40471c:	8b 00                	mov    (%rax),%eax
  40471e:	01 c1                	add    %eax,%ecx
  404720:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  404724:	b8 0c 00 00 00       	mov    $0xc,%eax
  404729:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40472d:	8b 00                	mov    (%rax),%eax
  40472f:	01 c1                	add    %eax,%ecx
  404731:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  404735:	b8 10 00 00 00       	mov    $0x10,%eax
  40473a:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40473e:	8b 00                	mov    (%rax),%eax
  404740:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  404743:	89 c0                	mov    %eax,%eax
	       (cast(uint *)p)[2] + (cast(uint *)p)[3] +
	       (cast(uint *)p)[4];
    }
  404745:	c9                   	leaveq 
  404746:	c3                   	retq   

0000000000404747 <_D3std8typeinfo8ti_creal10TypeInfo_c7_equalsFccZi>:

    static int _equals(creal f1, creal f2)
  404747:	55                   	push   %rbp
  404748:	48 89 e5             	mov    %rsp,%rbp
    {
	return f1 == f2;
  40474b:	db 6d 10             	fldt   0x10(%rbp)
  40474e:	db 6d 20             	fldt   0x20(%rbp)
  404751:	db 6d 30             	fldt   0x30(%rbp)
  404754:	db 6d 40             	fldt   0x40(%rbp)
  404757:	d9 cb                	fxch   %st(3)
  404759:	df e9                	fucomip %st(1),%st
  40475b:	df c0                	ffreep %st(0)
  40475d:	0f 94 c1             	sete   %cl
  404760:	0f 9b c0             	setnp  %al
  404763:	21 c1                	and    %eax,%ecx
  404765:	df e9                	fucomip %st(1),%st
  404767:	df c0                	ffreep %st(0)
  404769:	0f 94 c0             	sete   %al
  40476c:	0f 9b c2             	setnp  %dl
  40476f:	21 d0                	and    %edx,%eax
  404771:	21 c8                	and    %ecx,%eax
  404773:	0f b6 c0             	movzbl %al,%eax
    }
  404776:	c9                   	leaveq 
  404777:	c3                   	retq   

0000000000404778 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi>:

    static int _compare(creal f1, creal f2)
  404778:	55                   	push   %rbp
  404779:	48 89 e5             	mov    %rsp,%rbp
    {   int result;
  40477c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	if (f1.re < f2.re)
  404783:	db 6d 10             	fldt   0x10(%rbp)
  404786:	db 6d 30             	fldt   0x30(%rbp)
  404789:	df e9                	fucomip %st(1),%st
  40478b:	df c0                	ffreep %st(0)
  40478d:	77 02                	ja     404791 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x19>
  40478f:	eb 09                	jmp    40479a <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x22>
	    result = -1;
  404791:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  404798:	eb 50                	jmp    4047ea <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x72>
	else if (f1.re > f2.re)
  40479a:	db 6d 10             	fldt   0x10(%rbp)
  40479d:	db 6d 30             	fldt   0x30(%rbp)
  4047a0:	d9 c9                	fxch   %st(1)
  4047a2:	df e9                	fucomip %st(1),%st
  4047a4:	df c0                	ffreep %st(0)
  4047a6:	77 02                	ja     4047aa <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x32>
  4047a8:	eb 09                	jmp    4047b3 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x3b>
	    result = 1;
  4047aa:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  4047b1:	eb 37                	jmp    4047ea <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x72>
	else if (f1.im < f2.im)
  4047b3:	db 6d 20             	fldt   0x20(%rbp)
  4047b6:	db 6d 40             	fldt   0x40(%rbp)
  4047b9:	df e9                	fucomip %st(1),%st
  4047bb:	df c0                	ffreep %st(0)
  4047bd:	77 02                	ja     4047c1 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x49>
  4047bf:	eb 09                	jmp    4047ca <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x52>
	    result = -1;
  4047c1:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  4047c8:	eb 20                	jmp    4047ea <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x72>
	else if (f1.im > f2.im)
  4047ca:	db 6d 20             	fldt   0x20(%rbp)
  4047cd:	db 6d 40             	fldt   0x40(%rbp)
  4047d0:	d9 c9                	fxch   %st(1)
  4047d2:	df e9                	fucomip %st(1),%st
  4047d4:	df c0                	ffreep %st(0)
  4047d6:	77 02                	ja     4047da <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x62>
  4047d8:	eb 09                	jmp    4047e3 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x6b>
	    result = 1;
  4047da:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  4047e1:	eb 07                	jmp    4047ea <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x72>
	else
	    result = 0;
  4047e3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
        return result;
  4047ea:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
  4047ed:	c9                   	leaveq 
  4047ee:	c3                   	retq   

00000000004047ef <_D3std8typeinfo8ti_creal10TypeInfo_c6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4047ef:	55                   	push   %rbp
  4047f0:	48 89 e5             	mov    %rsp,%rbp
  4047f3:	48 83 ec 60          	sub    $0x60,%rsp
  4047f7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4047fb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4047ff:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404803:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404807:	e8 04 4a 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(creal *)p1, *cast(creal *)p2);
  40480c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404810:	4c 8b 00             	mov    (%rax),%r8
  404813:	44 8b 48 08          	mov    0x8(%rax),%r9d
  404817:	4c 8b 50 10          	mov    0x10(%rax),%r10
  40481b:	44 8b 58 18          	mov    0x18(%rax),%r11d
  40481f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404823:	48 8b 10             	mov    (%rax),%rdx
  404826:	8b 48 08             	mov    0x8(%rax),%ecx
  404829:	48 8b 70 10          	mov    0x10(%rax),%rsi
  40482d:	8b 78 18             	mov    0x18(%rax),%edi
  404830:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  404835:	44 89 4c 24 28       	mov    %r9d,0x28(%rsp)
  40483a:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  40483f:	44 89 5c 24 38       	mov    %r11d,0x38(%rsp)
  404844:	48 89 14 24          	mov    %rdx,(%rsp)
  404848:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
  40484c:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  404851:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  404855:	e8 ed fe ff ff       	callq  404747 <_D3std8typeinfo8ti_creal10TypeInfo_c7_equalsFccZi>
    }
  40485a:	c9                   	leaveq 
  40485b:	c3                   	retq   

000000000040485c <_D3std8typeinfo8ti_creal10TypeInfo_c7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  40485c:	55                   	push   %rbp
  40485d:	48 89 e5             	mov    %rsp,%rbp
  404860:	48 83 ec 60          	sub    $0x60,%rsp
  404864:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404868:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40486c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404870:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404874:	e8 97 49 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(creal *)p1, *cast(creal *)p2);
  404879:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40487d:	4c 8b 00             	mov    (%rax),%r8
  404880:	44 8b 48 08          	mov    0x8(%rax),%r9d
  404884:	4c 8b 50 10          	mov    0x10(%rax),%r10
  404888:	44 8b 58 18          	mov    0x18(%rax),%r11d
  40488c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404890:	48 8b 10             	mov    (%rax),%rdx
  404893:	8b 48 08             	mov    0x8(%rax),%ecx
  404896:	48 8b 70 10          	mov    0x10(%rax),%rsi
  40489a:	8b 78 18             	mov    0x18(%rax),%edi
  40489d:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  4048a2:	44 89 4c 24 28       	mov    %r9d,0x28(%rsp)
  4048a7:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  4048ac:	44 89 5c 24 38       	mov    %r11d,0x38(%rsp)
  4048b1:	48 89 14 24          	mov    %rdx,(%rsp)
  4048b5:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
  4048b9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  4048be:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  4048c2:	e8 b1 fe ff ff       	callq  404778 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi>
    }
  4048c7:	c9                   	leaveq 
  4048c8:	c3                   	retq   

00000000004048c9 <_D3std8typeinfo8ti_creal10TypeInfo_c5tsizeMFZm>:

    size_t tsize()
  4048c9:	55                   	push   %rbp
  4048ca:	48 89 e5             	mov    %rsp,%rbp
  4048cd:	48 83 ec 10          	sub    $0x10,%rsp
  4048d1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4048d5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4048d9:	e8 32 49 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return creal.sizeof;
  4048de:	b8 20 00 00 00       	mov    $0x20,%eax
    }
  4048e3:	c9                   	leaveq 
  4048e4:	c3                   	retq   

00000000004048e5 <_D3std8typeinfo8ti_creal10TypeInfo_c4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  4048e5:	55                   	push   %rbp
  4048e6:	48 89 e5             	mov    %rsp,%rbp
  4048e9:	53                   	push   %rbx
  4048ea:	48 83 ec 48          	sub    $0x48,%rsp
  4048ee:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  4048f2:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  4048f6:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  4048fa:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4048fe:	e8 0d 49 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	creal t;
  404903:	48 b8 00 00 00 00 00 	mov    $0xc000000000000000,%rax
  40490a:	00 00 c0 
  40490d:	ba ff 7f 00 00       	mov    $0x7fff,%edx
  404912:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  404916:	89 55 d8             	mov    %edx,-0x28(%rbp)
  404919:	48 b8 00 00 00 00 00 	mov    $0xc000000000000000,%rax
  404920:	00 00 c0 
  404923:	ba ff 7f 00 00       	mov    $0x7fff,%edx
  404928:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40492c:	89 55 e8             	mov    %edx,-0x18(%rbp)

	t = *cast(creal *)p1;
  40492f:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  404933:	48 8b 01             	mov    (%rcx),%rax
  404936:	8b 51 08             	mov    0x8(%rcx),%edx
  404939:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40493d:	89 55 d8             	mov    %edx,-0x28(%rbp)
  404940:	48 8b 41 10          	mov    0x10(%rcx),%rax
  404944:	8b 51 18             	mov    0x18(%rcx),%edx
  404947:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40494b:	89 55 e8             	mov    %edx,-0x18(%rbp)
	*cast(creal *)p1 = *cast(creal *)p2;
  40494e:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  404952:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  404956:	48 8b 01             	mov    (%rcx),%rax
  404959:	8b 51 08             	mov    0x8(%rcx),%edx
  40495c:	8b 59 18             	mov    0x18(%rcx),%ebx
  40495f:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  404963:	48 89 06             	mov    %rax,(%rsi)
  404966:	89 56 08             	mov    %edx,0x8(%rsi)
  404969:	48 89 4e 10          	mov    %rcx,0x10(%rsi)
  40496d:	89 5e 18             	mov    %ebx,0x18(%rsi)
	*cast(creal *)p2 = t;
  404970:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  404974:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  404978:	8b 55 d8             	mov    -0x28(%rbp),%edx
  40497b:	48 89 01             	mov    %rax,(%rcx)
  40497e:	89 51 08             	mov    %edx,0x8(%rcx)
  404981:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  404985:	8b 55 e8             	mov    -0x18(%rbp),%edx
  404988:	48 89 41 10          	mov    %rax,0x10(%rcx)
  40498c:	89 51 18             	mov    %edx,0x18(%rcx)
    }
  40498f:	48 83 c4 48          	add    $0x48,%rsp
  404993:	5b                   	pop    %rbx
  404994:	c9                   	leaveq 
  404995:	c3                   	retq   

0000000000404996 <_D3std8typeinfo8ti_creal10TypeInfo_c4initMFZAv>:

    void[] init()
  404996:	55                   	push   %rbp
  404997:	48 89 e5             	mov    %rsp,%rbp
  40499a:	53                   	push   %rbx
  40499b:	48 83 ec 28          	sub    $0x28,%rsp
  40499f:	48 89 fb             	mov    %rdi,%rbx
  4049a2:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  4049a6:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4049aa:	e8 61 48 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {	static creal r;

	return (cast(creal *)&r)[0 .. 1];
  4049af:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  4049b6:	00 
  4049b7:	48 c7 45 e8 c0 ad 41 	movq   $0x41adc0,-0x18(%rbp)
  4049be:	00 
  4049bf:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4049c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4049c7:	49 89 c0             	mov    %rax,%r8
  4049ca:	ba 20 00 00 00       	mov    $0x20,%edx
  4049cf:	be 01 00 00 00       	mov    $0x1,%esi
  4049d4:	48 89 df             	mov    %rbx,%rdi
  4049d7:	e8 d7 8a 00 00       	callq  40d4b3 <_d_arraycast>
    }
  4049dc:	48 89 d8             	mov    %rbx,%rax
  4049df:	48 83 c4 28          	add    $0x28,%rsp
  4049e3:	5b                   	pop    %rbx
  4049e4:	c9                   	leaveq 
  4049e5:	c3                   	retq   
  4049e6:	90                   	nop    
  4049e7:	90                   	nop    

00000000004049e8 <_D3std8typeinfo8ti_dchar10TypeInfo_w8toStringMFZAa>:

module std.typeinfo.ti_dchar;

class TypeInfo_w : TypeInfo
{
    char[] toString() { return "dchar"; }
  4049e8:	55                   	push   %rbp
  4049e9:	48 89 e5             	mov    %rsp,%rbp
  4049ec:	53                   	push   %rbx
  4049ed:	48 83 ec 08          	sub    $0x8,%rsp
  4049f1:	48 89 fb             	mov    %rdi,%rbx
  4049f4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4049f8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4049fc:	e8 0f 48 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  404a01:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  404a08:	48 c7 43 08 e0 08 41 	movq   $0x4108e0,0x8(%rbx)
  404a0f:	00 
  404a10:	48 89 d8             	mov    %rbx,%rax
  404a13:	48 83 c4 08          	add    $0x8,%rsp
  404a17:	5b                   	pop    %rbx
  404a18:	c9                   	leaveq 
  404a19:	c3                   	retq   

0000000000404a1a <_D3std8typeinfo8ti_dchar10TypeInfo_w7getHashMFPvZm>:

    hash_t getHash(void *p)
  404a1a:	55                   	push   %rbp
  404a1b:	48 89 e5             	mov    %rsp,%rbp
  404a1e:	48 83 ec 10          	sub    $0x10,%rsp
  404a22:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404a26:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404a2a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404a2e:	e8 dd 47 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(dchar *)p;
  404a33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404a37:	8b 00                	mov    (%rax),%eax
  404a39:	89 c0                	mov    %eax,%eax
    }
  404a3b:	c9                   	leaveq 
  404a3c:	c3                   	retq   

0000000000404a3d <_D3std8typeinfo8ti_dchar10TypeInfo_w6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  404a3d:	55                   	push   %rbp
  404a3e:	48 89 e5             	mov    %rsp,%rbp
  404a41:	48 83 ec 20          	sub    $0x20,%rsp
  404a45:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404a49:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404a4d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404a51:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404a55:	e8 b6 47 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(dchar *)p1 == *cast(dchar *)p2;
  404a5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404a5e:	8b 10                	mov    (%rax),%edx
  404a60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404a64:	8b 00                	mov    (%rax),%eax
  404a66:	39 c2                	cmp    %eax,%edx
  404a68:	0f 94 c0             	sete   %al
  404a6b:	0f b6 c0             	movzbl %al,%eax
    }
  404a6e:	c9                   	leaveq 
  404a6f:	c3                   	retq   

0000000000404a70 <_D3std8typeinfo8ti_dchar10TypeInfo_w7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  404a70:	55                   	push   %rbp
  404a71:	48 89 e5             	mov    %rsp,%rbp
  404a74:	48 83 ec 20          	sub    $0x20,%rsp
  404a78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404a7c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404a80:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404a84:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404a88:	e8 83 47 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(dchar *)p1 - *cast(dchar *)p2;
  404a8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404a91:	8b 10                	mov    (%rax),%edx
  404a93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404a97:	8b 00                	mov    (%rax),%eax
  404a99:	89 d1                	mov    %edx,%ecx
  404a9b:	29 c1                	sub    %eax,%ecx
  404a9d:	89 c8                	mov    %ecx,%eax
    }
  404a9f:	c9                   	leaveq 
  404aa0:	c3                   	retq   

0000000000404aa1 <_D3std8typeinfo8ti_dchar10TypeInfo_w5tsizeMFZm>:

    size_t tsize()
  404aa1:	55                   	push   %rbp
  404aa2:	48 89 e5             	mov    %rsp,%rbp
  404aa5:	48 83 ec 10          	sub    $0x10,%rsp
  404aa9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404aad:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404ab1:	e8 5a 47 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return dchar.sizeof;
  404ab6:	b8 04 00 00 00       	mov    $0x4,%eax
    }
  404abb:	c9                   	leaveq 
  404abc:	c3                   	retq   

0000000000404abd <_D3std8typeinfo8ti_dchar10TypeInfo_w4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  404abd:	55                   	push   %rbp
  404abe:	48 89 e5             	mov    %rsp,%rbp
  404ac1:	48 83 ec 30          	sub    $0x30,%rsp
  404ac5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404ac9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  404acd:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  404ad1:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  404ad5:	e8 36 47 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	dchar t;
  404ada:	c7 45 fc ff ff 00 00 	movl   $0xffff,-0x4(%rbp)

	t = *cast(dchar *)p1;
  404ae1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  404ae5:	8b 00                	mov    (%rax),%eax
  404ae7:	89 45 fc             	mov    %eax,-0x4(%rbp)
	*cast(dchar *)p1 = *cast(dchar *)p2;
  404aea:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  404aee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404af2:	8b 00                	mov    (%rax),%eax
  404af4:	89 02                	mov    %eax,(%rdx)
	*cast(dchar *)p2 = t;
  404af6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  404afa:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404afd:	89 02                	mov    %eax,(%rdx)
    }
  404aff:	c9                   	leaveq 
  404b00:	c3                   	retq   

0000000000404b01 <_D3std8typeinfo8ti_dchar10TypeInfo_w4initMFZAv>:

    void[] init()
  404b01:	55                   	push   %rbp
  404b02:	48 89 e5             	mov    %rsp,%rbp
  404b05:	53                   	push   %rbx
  404b06:	48 83 ec 28          	sub    $0x28,%rsp
  404b0a:	48 89 fb             	mov    %rdi,%rbx
  404b0d:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  404b11:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  404b15:	e8 f6 46 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {	static dchar c;

	return (cast(dchar *)&c)[0 .. 1];
  404b1a:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  404b21:	00 
  404b22:	48 c7 45 e8 80 ae 41 	movq   $0x41ae80,-0x18(%rbp)
  404b29:	00 
  404b2a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  404b2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404b32:	49 89 c0             	mov    %rax,%r8
  404b35:	ba 04 00 00 00       	mov    $0x4,%edx
  404b3a:	be 01 00 00 00       	mov    $0x1,%esi
  404b3f:	48 89 df             	mov    %rbx,%rdi
  404b42:	e8 6c 89 00 00       	callq  40d4b3 <_d_arraycast>
    }
  404b47:	48 89 d8             	mov    %rbx,%rax
  404b4a:	48 83 c4 28          	add    $0x28,%rsp
  404b4e:	5b                   	pop    %rbx
  404b4f:	c9                   	leaveq 
  404b50:	c3                   	retq   
  404b51:	90                   	nop    
  404b52:	90                   	nop    
  404b53:	90                   	nop    

0000000000404b54 <_D3std8typeinfo11ti_delegate10TypeInfo_D7getHashMFPvZm>:

alias void delegate(int) dg;

class TypeInfo_D : TypeInfo
{
    hash_t getHash(void *p)
  404b54:	55                   	push   %rbp
  404b55:	48 89 e5             	mov    %rsp,%rbp
  404b58:	48 83 ec 20          	sub    $0x20,%rsp
  404b5c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404b60:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  404b64:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  404b68:	e8 a3 46 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {	long l = *cast(long *)p;
  404b6d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  404b71:	48 8b 00             	mov    (%rax),%rax
  404b74:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return cast(uint)(l + (l >> 32));
  404b78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404b7c:	89 c2                	mov    %eax,%edx
  404b7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404b82:	48 c1 f8 20          	sar    $0x20,%rax
  404b86:	8d 04 02             	lea    (%rdx,%rax,1),%eax
  404b89:	89 c0                	mov    %eax,%eax
    }
  404b8b:	c9                   	leaveq 
  404b8c:	c3                   	retq   

0000000000404b8d <_D3std8typeinfo11ti_delegate10TypeInfo_D6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  404b8d:	55                   	push   %rbp
  404b8e:	48 89 e5             	mov    %rsp,%rbp
  404b91:	48 83 ec 30          	sub    $0x30,%rsp
  404b95:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404b99:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404b9d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404ba1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404ba5:	e8 66 46 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(dg *)p1 == *cast(dg *)p2;
  404baa:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  404bae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404bb2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  404bb6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  404bba:	48 c7 45 d0 10 00 00 	movq   $0x10,-0x30(%rbp)
  404bc1:	00 
  404bc2:	fc                   	cld    
  404bc3:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  404bc7:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  404bcb:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  404bcf:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  404bd1:	0f 97 c2             	seta   %dl
  404bd4:	0f 92 c0             	setb   %al
  404bd7:	89 d1                	mov    %edx,%ecx
  404bd9:	28 c1                	sub    %al,%cl
  404bdb:	89 c8                	mov    %ecx,%eax
  404bdd:	0f be c0             	movsbl %al,%eax
  404be0:	85 c0                	test   %eax,%eax
  404be2:	0f 94 c0             	sete   %al
  404be5:	0f b6 c0             	movzbl %al,%eax
    }
  404be8:	c9                   	leaveq 
  404be9:	c3                   	retq   

0000000000404bea <_D3std8typeinfo11ti_delegate10TypeInfo_D5tsizeMFZm>:

    size_t tsize()
  404bea:	55                   	push   %rbp
  404beb:	48 89 e5             	mov    %rsp,%rbp
  404bee:	48 83 ec 10          	sub    $0x10,%rsp
  404bf2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404bf6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404bfa:	e8 11 46 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return dg.sizeof;
  404bff:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  404c04:	c9                   	leaveq 
  404c05:	c3                   	retq   

0000000000404c06 <_D3std8typeinfo11ti_delegate10TypeInfo_D4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  404c06:	55                   	push   %rbp
  404c07:	48 89 e5             	mov    %rsp,%rbp
  404c0a:	48 83 ec 30          	sub    $0x30,%rsp
  404c0e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404c12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  404c16:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  404c1a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  404c1e:	e8 ed 45 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	dg t;
  404c23:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  404c2a:	00 
  404c2b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  404c32:	00 

	t = *cast(dg *)p1;
  404c33:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  404c37:	48 8b 02             	mov    (%rdx),%rax
  404c3a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  404c3e:	48 8b 42 08          	mov    0x8(%rdx),%rax
  404c42:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(dg *)p1 = *cast(dg *)p2;
  404c46:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  404c4a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  404c4e:	48 8b 02             	mov    (%rdx),%rax
  404c51:	48 89 01             	mov    %rax,(%rcx)
  404c54:	48 8b 42 08          	mov    0x8(%rdx),%rax
  404c58:	48 89 41 08          	mov    %rax,0x8(%rcx)
	*cast(dg *)p2 = t;
  404c5c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  404c60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404c64:	48 89 02             	mov    %rax,(%rdx)
  404c67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404c6b:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
  404c6f:	c9                   	leaveq 
  404c70:	c3                   	retq   

0000000000404c71 <_D3std8typeinfo11ti_delegate10TypeInfo_D5flagsMFZk>:

    uint flags()
  404c71:	55                   	push   %rbp
  404c72:	48 89 e5             	mov    %rsp,%rbp
  404c75:	48 83 ec 10          	sub    $0x10,%rsp
  404c79:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404c7d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404c81:	e8 8a 45 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  404c86:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  404c8b:	c9                   	leaveq 
  404c8c:	c3                   	retq   
  404c8d:	90                   	nop    
  404c8e:	90                   	nop    
  404c8f:	90                   	nop    

0000000000404c90 <_D3std8typeinfo9ti_double10TypeInfo_d8toStringMFZAa>:
import kernel.core.system;
//private import std.math;

class TypeInfo_d : TypeInfo
{
    char[] toString() { return "double"; }
  404c90:	55                   	push   %rbp
  404c91:	48 89 e5             	mov    %rsp,%rbp
  404c94:	53                   	push   %rbx
  404c95:	48 83 ec 08          	sub    $0x8,%rsp
  404c99:	48 89 fb             	mov    %rdi,%rbx
  404c9c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404ca0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  404ca4:	e8 67 45 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  404ca9:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  404cb0:	48 c7 43 08 40 0a 41 	movq   $0x410a40,0x8(%rbx)
  404cb7:	00 
  404cb8:	48 89 d8             	mov    %rbx,%rax
  404cbb:	48 83 c4 08          	add    $0x8,%rsp
  404cbf:	5b                   	pop    %rbx
  404cc0:	c9                   	leaveq 
  404cc1:	c3                   	retq   

0000000000404cc2 <_D3std8typeinfo9ti_double10TypeInfo_d7getHashMFPvZm>:

    hash_t getHash(void *p)
  404cc2:	55                   	push   %rbp
  404cc3:	48 89 e5             	mov    %rsp,%rbp
  404cc6:	48 83 ec 10          	sub    $0x10,%rsp
  404cca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404cce:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404cd2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404cd6:	e8 35 45 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cast(uint *)p)[0] + (cast(uint *)p)[1];
  404cdb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  404cdf:	b8 00 00 00 00       	mov    $0x0,%eax
  404ce4:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  404ce8:	8b 08                	mov    (%rax),%ecx
  404cea:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  404cee:	b8 04 00 00 00       	mov    $0x4,%eax
  404cf3:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  404cf7:	8b 00                	mov    (%rax),%eax
  404cf9:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  404cfc:	89 c0                	mov    %eax,%eax
    }
  404cfe:	c9                   	leaveq 
  404cff:	c3                   	retq   

0000000000404d00 <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi>:

    static int _equals(double f1, double f2)
  404d00:	55                   	push   %rbp
  404d01:	48 89 e5             	mov    %rsp,%rbp
  404d04:	48 83 ec 30          	sub    $0x30,%rsp
  404d08:	f2 0f 11 45 f8       	movsd  %xmm0,-0x8(%rbp)
  404d0d:	f2 0f 11 4d f0       	movsd  %xmm1,-0x10(%rbp)
    {
	return f1 == f2 ||
  404d12:	66 0f 12 45 f8       	movlpd -0x8(%rbp),%xmm0
  404d17:	66 0f 2e 45 f0       	ucomisd -0x10(%rbp),%xmm0
  404d1c:	7a 02                	jp     404d20 <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi+0x20>
  404d1e:	74 1e                	je     404d3e <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi+0x3e>
  404d20:	dd 45 f8             	fldl   -0x8(%rbp)
  404d23:	db 3c 24             	fstpt  (%rsp)
  404d26:	e8 5d 8b 00 00       	callq  40d888 <_D6kernel4core6system5isnanFeZi>
  404d2b:	85 c0                	test   %eax,%eax
  404d2d:	74 15                	je     404d44 <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi+0x44>
  404d2f:	dd 45 f0             	fldl   -0x10(%rbp)
  404d32:	db 3c 24             	fstpt  (%rsp)
  404d35:	e8 4e 8b 00 00       	callq  40d888 <_D6kernel4core6system5isnanFeZi>
  404d3a:	85 c0                	test   %eax,%eax
  404d3c:	74 06                	je     404d44 <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi+0x44>
  404d3e:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  404d42:	eb 04                	jmp    404d48 <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi+0x48>
  404d44:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  404d48:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
		(isnan(f1) && isnan(f2));
    }
  404d4c:	c9                   	leaveq 
  404d4d:	c3                   	retq   

0000000000404d4e <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi>:

    static int _compare(double d1, double d2)
  404d4e:	55                   	push   %rbp
  404d4f:	48 89 e5             	mov    %rsp,%rbp
  404d52:	48 83 ec 30          	sub    $0x30,%rsp
  404d56:	f2 0f 11 45 f8       	movsd  %xmm0,-0x8(%rbp)
  404d5b:	f2 0f 11 4d f0       	movsd  %xmm1,-0x10(%rbp)
    {
	if (d1 !<>= d2)		// if either are NaN
  404d60:	66 0f 12 45 f8       	movlpd -0x8(%rbp),%xmm0
  404d65:	66 0f 2e 45 f0       	ucomisd -0x10(%rbp),%xmm0
  404d6a:	0f 9a c0             	setp   %al
  404d6d:	84 c0                	test   %al,%al
  404d6f:	74 39                	je     404daa <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x5c>
	{
	    if (isnan(d1))
  404d71:	dd 45 f8             	fldl   -0x8(%rbp)
  404d74:	db 3c 24             	fstpt  (%rsp)
  404d77:	e8 0c 8b 00 00       	callq  40d888 <_D6kernel4core6system5isnanFeZi>
  404d7c:	85 c0                	test   %eax,%eax
  404d7e:	74 21                	je     404da1 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x53>
	    {	if (isnan(d2))
  404d80:	dd 45 f0             	fldl   -0x10(%rbp)
  404d83:	db 3c 24             	fstpt  (%rsp)
  404d86:	e8 fd 8a 00 00       	callq  40d888 <_D6kernel4core6system5isnanFeZi>
  404d8b:	85 c0                	test   %eax,%eax
  404d8d:	74 09                	je     404d98 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x4a>
		    return 0;
  404d8f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  404d96:	eb 59                	jmp    404df1 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0xa3>
		return -1;
  404d98:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  404d9f:	eb 50                	jmp    404df1 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0xa3>
	    }
	    return 1;
  404da1:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  404da8:	eb 47                	jmp    404df1 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0xa3>
	}
	return (d1 == d2) ? 0 : ((d1 < d2) ? -1 : 1);
  404daa:	66 0f 12 45 f8       	movlpd -0x8(%rbp),%xmm0
  404daf:	66 0f 2e 45 f0       	ucomisd -0x10(%rbp),%xmm0
  404db4:	7a 02                	jp     404db8 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x6a>
  404db6:	74 02                	je     404dba <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x6c>
  404db8:	eb 09                	jmp    404dc3 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x75>
  404dba:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  404dc1:	eb 28                	jmp    404deb <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x9d>
  404dc3:	66 0f 12 4d f8       	movlpd -0x8(%rbp),%xmm1
  404dc8:	66 0f 12 45 f0       	movlpd -0x10(%rbp),%xmm0
  404dcd:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  404dd1:	77 02                	ja     404dd5 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x87>
  404dd3:	eb 09                	jmp    404dde <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x90>
  404dd5:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rbp)
  404ddc:	eb 07                	jmp    404de5 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x97>
  404dde:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  404de5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  404de8:	89 45 e8             	mov    %eax,-0x18(%rbp)
  404deb:	8b 45 e8             	mov    -0x18(%rbp),%eax
  404dee:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  404df1:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    }
  404df4:	c9                   	leaveq 
  404df5:	c3                   	retq   

0000000000404df6 <_D3std8typeinfo9ti_double10TypeInfo_d6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  404df6:	55                   	push   %rbp
  404df7:	48 89 e5             	mov    %rsp,%rbp
  404dfa:	48 83 ec 20          	sub    $0x20,%rsp
  404dfe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404e02:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404e06:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404e0a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404e0e:	e8 fd 43 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(double *)p1, *cast(double *)p2);
  404e13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404e17:	48 8b 10             	mov    (%rax),%rdx
  404e1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404e1e:	48 8b 00             	mov    (%rax),%rax
  404e21:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  404e25:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  404e2a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  404e2e:	66 0f 12 45 e0       	movlpd -0x20(%rbp),%xmm0
  404e33:	e8 c8 fe ff ff       	callq  404d00 <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi>
    }
  404e38:	c9                   	leaveq 
  404e39:	c3                   	retq   

0000000000404e3a <_D3std8typeinfo9ti_double10TypeInfo_d7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  404e3a:	55                   	push   %rbp
  404e3b:	48 89 e5             	mov    %rsp,%rbp
  404e3e:	48 83 ec 20          	sub    $0x20,%rsp
  404e42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404e46:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404e4a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404e4e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404e52:	e8 b9 43 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(double *)p1, *cast(double *)p2);
  404e57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404e5b:	48 8b 10             	mov    (%rax),%rdx
  404e5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404e62:	48 8b 00             	mov    (%rax),%rax
  404e65:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  404e69:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  404e6e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  404e72:	66 0f 12 45 e0       	movlpd -0x20(%rbp),%xmm0
  404e77:	e8 d2 fe ff ff       	callq  404d4e <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi>
    }
  404e7c:	c9                   	leaveq 
  404e7d:	c3                   	retq   

0000000000404e7e <_D3std8typeinfo9ti_double10TypeInfo_d5tsizeMFZm>:

    size_t tsize()
  404e7e:	55                   	push   %rbp
  404e7f:	48 89 e5             	mov    %rsp,%rbp
  404e82:	48 83 ec 10          	sub    $0x10,%rsp
  404e86:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404e8a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404e8e:	e8 7d 43 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return double.sizeof;
  404e93:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  404e98:	c9                   	leaveq 
  404e99:	c3                   	retq   

0000000000404e9a <_D3std8typeinfo9ti_double10TypeInfo_d4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  404e9a:	55                   	push   %rbp
  404e9b:	48 89 e5             	mov    %rsp,%rbp
  404e9e:	48 83 ec 30          	sub    $0x30,%rsp
  404ea2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404ea6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  404eaa:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  404eae:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  404eb2:	e8 59 43 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	double t;
  404eb7:	48 b8 00 00 00 00 00 	mov    $0x7ff8000000000000,%rax
  404ebe:	00 f8 7f 
  404ec1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	t = *cast(double *)p1;
  404ec5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  404ec9:	48 8b 00             	mov    (%rax),%rax
  404ecc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(double *)p1 = *cast(double *)p2;
  404ed0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  404ed4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404ed8:	48 8b 00             	mov    (%rax),%rax
  404edb:	48 89 02             	mov    %rax,(%rdx)
	*cast(double *)p2 = t;
  404ede:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  404ee2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404ee6:	48 89 02             	mov    %rax,(%rdx)
    }
  404ee9:	c9                   	leaveq 
  404eea:	c3                   	retq   

0000000000404eeb <_D3std8typeinfo9ti_double10TypeInfo_d4initMFZAv>:

    void[] init()
  404eeb:	55                   	push   %rbp
  404eec:	48 89 e5             	mov    %rsp,%rbp
  404eef:	53                   	push   %rbx
  404ef0:	48 83 ec 28          	sub    $0x28,%rsp
  404ef4:	48 89 fb             	mov    %rdi,%rbx
  404ef7:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  404efb:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  404eff:	e8 0c 43 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {	static double r;

	return (cast(double *)&r)[0 .. 1];
  404f04:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  404f0b:	00 
  404f0c:	48 c7 45 e8 e0 af 41 	movq   $0x41afe0,-0x18(%rbp)
  404f13:	00 
  404f14:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  404f18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404f1c:	49 89 c0             	mov    %rax,%r8
  404f1f:	ba 08 00 00 00       	mov    $0x8,%edx
  404f24:	be 01 00 00 00       	mov    $0x1,%esi
  404f29:	48 89 df             	mov    %rbx,%rdi
  404f2c:	e8 82 85 00 00       	callq  40d4b3 <_d_arraycast>
    }
  404f31:	48 89 d8             	mov    %rbx,%rax
  404f34:	48 83 c4 28          	add    $0x28,%rsp
  404f38:	5b                   	pop    %rbx
  404f39:	c9                   	leaveq 
  404f3a:	c3                   	retq   
  404f3b:	90                   	nop    

0000000000404f3c <_D3std8typeinfo8ti_float10TypeInfo_f8toStringMFZAa>:
import kernel.core.system;
//private import std.math;

class TypeInfo_f : TypeInfo
{
    char[] toString() { return "float"; }
  404f3c:	55                   	push   %rbp
  404f3d:	48 89 e5             	mov    %rsp,%rbp
  404f40:	53                   	push   %rbx
  404f41:	48 83 ec 08          	sub    $0x8,%rsp
  404f45:	48 89 fb             	mov    %rdi,%rbx
  404f48:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404f4c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  404f50:	e8 bb 42 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  404f55:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  404f5c:	48 c7 43 08 00 0b 41 	movq   $0x410b00,0x8(%rbx)
  404f63:	00 
  404f64:	48 89 d8             	mov    %rbx,%rax
  404f67:	48 83 c4 08          	add    $0x8,%rsp
  404f6b:	5b                   	pop    %rbx
  404f6c:	c9                   	leaveq 
  404f6d:	c3                   	retq   

0000000000404f6e <_D3std8typeinfo8ti_float10TypeInfo_f7getHashMFPvZm>:

    hash_t getHash(void *p)
  404f6e:	55                   	push   %rbp
  404f6f:	48 89 e5             	mov    %rsp,%rbp
  404f72:	48 83 ec 10          	sub    $0x10,%rsp
  404f76:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404f7a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404f7e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404f82:	e8 89 42 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p;
  404f87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404f8b:	8b 00                	mov    (%rax),%eax
  404f8d:	89 c0                	mov    %eax,%eax
    }
  404f8f:	c9                   	leaveq 
  404f90:	c3                   	retq   

0000000000404f91 <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi>:

    static int _equals(float f1, float f2)
  404f91:	55                   	push   %rbp
  404f92:	48 89 e5             	mov    %rsp,%rbp
  404f95:	48 83 ec 20          	sub    $0x20,%rsp
  404f99:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  404f9e:	f3 0f 11 4d f8       	movss  %xmm1,-0x8(%rbp)
    {
	return f1 == f2 ||
  404fa3:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  404fa8:	0f 2e 45 f8          	ucomiss -0x8(%rbp),%xmm0
  404fac:	7a 02                	jp     404fb0 <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi+0x1f>
  404fae:	74 1e                	je     404fce <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi+0x3d>
  404fb0:	d9 45 fc             	flds   -0x4(%rbp)
  404fb3:	db 3c 24             	fstpt  (%rsp)
  404fb6:	e8 cd 88 00 00       	callq  40d888 <_D6kernel4core6system5isnanFeZi>
  404fbb:	85 c0                	test   %eax,%eax
  404fbd:	74 15                	je     404fd4 <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi+0x43>
  404fbf:	d9 45 f8             	flds   -0x8(%rbp)
  404fc2:	db 3c 24             	fstpt  (%rsp)
  404fc5:	e8 be 88 00 00       	callq  40d888 <_D6kernel4core6system5isnanFeZi>
  404fca:	85 c0                	test   %eax,%eax
  404fcc:	74 06                	je     404fd4 <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi+0x43>
  404fce:	c6 45 f7 01          	movb   $0x1,-0x9(%rbp)
  404fd2:	eb 04                	jmp    404fd8 <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi+0x47>
  404fd4:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
  404fd8:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
		(isnan(f1) && isnan(f2));
    }
  404fdc:	c9                   	leaveq 
  404fdd:	c3                   	retq   

0000000000404fde <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi>:

    static int _compare(float d1, float d2)
  404fde:	55                   	push   %rbp
  404fdf:	48 89 e5             	mov    %rsp,%rbp
  404fe2:	48 83 ec 30          	sub    $0x30,%rsp
  404fe6:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  404feb:	f3 0f 11 4d f8       	movss  %xmm1,-0x8(%rbp)
    {
	if (d1 !<>= d2)		// if either are NaN
  404ff0:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  404ff5:	0f 2e 45 f8          	ucomiss -0x8(%rbp),%xmm0
  404ff9:	0f 9a c0             	setp   %al
  404ffc:	84 c0                	test   %al,%al
  404ffe:	74 39                	je     405039 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x5b>
	{
	    if (isnan(d1))
  405000:	d9 45 fc             	flds   -0x4(%rbp)
  405003:	db 3c 24             	fstpt  (%rsp)
  405006:	e8 7d 88 00 00       	callq  40d888 <_D6kernel4core6system5isnanFeZi>
  40500b:	85 c0                	test   %eax,%eax
  40500d:	74 21                	je     405030 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x52>
	    {	if (isnan(d2))
  40500f:	d9 45 f8             	flds   -0x8(%rbp)
  405012:	db 3c 24             	fstpt  (%rsp)
  405015:	e8 6e 88 00 00       	callq  40d888 <_D6kernel4core6system5isnanFeZi>
  40501a:	85 c0                	test   %eax,%eax
  40501c:	74 09                	je     405027 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x49>
		    return 0;
  40501e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  405025:	eb 57                	jmp    40507e <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0xa0>
		return -1;
  405027:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rbp)
  40502e:	eb 4e                	jmp    40507e <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0xa0>
	    }
	    return 1;
  405030:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  405037:	eb 45                	jmp    40507e <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0xa0>
	}
	return (d1 == d2) ? 0 : ((d1 < d2) ? -1 : 1);
  405039:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  40503e:	0f 2e 45 f8          	ucomiss -0x8(%rbp),%xmm0
  405042:	7a 02                	jp     405046 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x68>
  405044:	74 02                	je     405048 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x6a>
  405046:	eb 09                	jmp    405051 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x73>
  405048:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  40504f:	eb 27                	jmp    405078 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x9a>
  405051:	f3 0f 10 4d fc       	movss  -0x4(%rbp),%xmm1
  405056:	f3 0f 10 45 f8       	movss  -0x8(%rbp),%xmm0
  40505b:	0f 2e c1             	ucomiss %xmm1,%xmm0
  40505e:	77 02                	ja     405062 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x84>
  405060:	eb 09                	jmp    40506b <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x8d>
  405062:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%rbp)
  405069:	eb 07                	jmp    405072 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x94>
  40506b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  405072:	8b 45 f4             	mov    -0xc(%rbp),%eax
  405075:	89 45 f0             	mov    %eax,-0x10(%rbp)
  405078:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40507b:	89 45 ec             	mov    %eax,-0x14(%rbp)
  40507e:	8b 45 ec             	mov    -0x14(%rbp),%eax
    }
  405081:	c9                   	leaveq 
  405082:	c3                   	retq   

0000000000405083 <_D3std8typeinfo8ti_float10TypeInfo_f6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405083:	55                   	push   %rbp
  405084:	48 89 e5             	mov    %rsp,%rbp
  405087:	48 83 ec 20          	sub    $0x20,%rsp
  40508b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40508f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405093:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405097:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40509b:	e8 70 41 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(float *)p1, *cast(float *)p2);
  4050a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4050a4:	8b 10                	mov    (%rax),%edx
  4050a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4050aa:	8b 00                	mov    (%rax),%eax
  4050ac:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  4050af:	f3 0f 10 4d e4       	movss  -0x1c(%rbp),%xmm1
  4050b4:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  4050b7:	f3 0f 10 45 e4       	movss  -0x1c(%rbp),%xmm0
  4050bc:	e8 d0 fe ff ff       	callq  404f91 <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi>
    }
  4050c1:	c9                   	leaveq 
  4050c2:	c3                   	retq   

00000000004050c3 <_D3std8typeinfo8ti_float10TypeInfo_f7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4050c3:	55                   	push   %rbp
  4050c4:	48 89 e5             	mov    %rsp,%rbp
  4050c7:	48 83 ec 20          	sub    $0x20,%rsp
  4050cb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4050cf:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4050d3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4050d7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4050db:	e8 30 41 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(float *)p1, *cast(float *)p2);
  4050e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4050e4:	8b 10                	mov    (%rax),%edx
  4050e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4050ea:	8b 00                	mov    (%rax),%eax
  4050ec:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  4050ef:	f3 0f 10 4d e4       	movss  -0x1c(%rbp),%xmm1
  4050f4:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  4050f7:	f3 0f 10 45 e4       	movss  -0x1c(%rbp),%xmm0
  4050fc:	e8 dd fe ff ff       	callq  404fde <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi>
    }
  405101:	c9                   	leaveq 
  405102:	c3                   	retq   

0000000000405103 <_D3std8typeinfo8ti_float10TypeInfo_f5tsizeMFZm>:

    size_t tsize()
  405103:	55                   	push   %rbp
  405104:	48 89 e5             	mov    %rsp,%rbp
  405107:	48 83 ec 10          	sub    $0x10,%rsp
  40510b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40510f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405113:	e8 f8 40 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return float.sizeof;
  405118:	b8 04 00 00 00       	mov    $0x4,%eax
    }
  40511d:	c9                   	leaveq 
  40511e:	c3                   	retq   

000000000040511f <_D3std8typeinfo8ti_float10TypeInfo_f4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  40511f:	55                   	push   %rbp
  405120:	48 89 e5             	mov    %rsp,%rbp
  405123:	48 83 ec 30          	sub    $0x30,%rsp
  405127:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40512b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40512f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405133:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405137:	e8 d4 40 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	float t;
  40513c:	b8 00 00 c0 7f       	mov    $0x7fc00000,%eax
  405141:	89 45 fc             	mov    %eax,-0x4(%rbp)

	t = *cast(float *)p1;
  405144:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405148:	8b 00                	mov    (%rax),%eax
  40514a:	89 45 fc             	mov    %eax,-0x4(%rbp)
	*cast(float *)p1 = *cast(float *)p2;
  40514d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405151:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405155:	8b 00                	mov    (%rax),%eax
  405157:	89 02                	mov    %eax,(%rdx)
	*cast(float *)p2 = t;
  405159:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40515d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  405160:	89 02                	mov    %eax,(%rdx)
    }
  405162:	c9                   	leaveq 
  405163:	c3                   	retq   

0000000000405164 <_D3std8typeinfo8ti_float10TypeInfo_f4initMFZAv>:

    void[] init()
  405164:	55                   	push   %rbp
  405165:	48 89 e5             	mov    %rsp,%rbp
  405168:	53                   	push   %rbx
  405169:	48 83 ec 28          	sub    $0x28,%rsp
  40516d:	48 89 fb             	mov    %rdi,%rbx
  405170:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  405174:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  405178:	e8 93 40 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {	static float r;

	return (cast(float *)&r)[0 .. 1];
  40517d:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  405184:	00 
  405185:	48 c7 45 e8 a0 b0 41 	movq   $0x41b0a0,-0x18(%rbp)
  40518c:	00 
  40518d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  405191:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405195:	49 89 c0             	mov    %rax,%r8
  405198:	ba 04 00 00 00       	mov    $0x4,%edx
  40519d:	be 01 00 00 00       	mov    $0x1,%esi
  4051a2:	48 89 df             	mov    %rbx,%rdi
  4051a5:	e8 09 83 00 00       	callq  40d4b3 <_d_arraycast>
    }
  4051aa:	48 89 d8             	mov    %rbx,%rax
  4051ad:	48 83 c4 28          	add    $0x28,%rsp
  4051b1:	5b                   	pop    %rbx
  4051b2:	c9                   	leaveq 
  4051b3:	c3                   	retq   

00000000004051b4 <_D3std8typeinfo10ti_idouble10TypeInfo_p8toStringMFZAa>:

private import std.typeinfo.ti_double;

class TypeInfo_p : TypeInfo_d
{
    char[] toString() { return "idouble"; }
  4051b4:	55                   	push   %rbp
  4051b5:	48 89 e5             	mov    %rsp,%rbp
  4051b8:	53                   	push   %rbx
  4051b9:	48 83 ec 08          	sub    $0x8,%rsp
  4051bd:	48 89 fb             	mov    %rdi,%rbx
  4051c0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4051c4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4051c8:	e8 43 40 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  4051cd:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  4051d4:	48 c7 43 08 c0 0b 41 	movq   $0x410bc0,0x8(%rbx)
  4051db:	00 
  4051dc:	48 89 d8             	mov    %rbx,%rax
  4051df:	48 83 c4 08          	add    $0x8,%rsp
  4051e3:	5b                   	pop    %rbx
  4051e4:	c9                   	leaveq 
  4051e5:	c3                   	retq   
  4051e6:	90                   	nop    
  4051e7:	90                   	nop    

00000000004051e8 <_D3std8typeinfo9ti_ifloat10TypeInfo_o8toStringMFZAa>:

private import std.typeinfo.ti_float;

class TypeInfo_o : TypeInfo_f
{
    char[] toString() { return "ifloat"; }
  4051e8:	55                   	push   %rbp
  4051e9:	48 89 e5             	mov    %rsp,%rbp
  4051ec:	53                   	push   %rbx
  4051ed:	48 83 ec 08          	sub    $0x8,%rsp
  4051f1:	48 89 fb             	mov    %rdi,%rbx
  4051f4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4051f8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4051fc:	e8 0f 40 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  405201:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  405208:	48 c7 43 08 80 0c 41 	movq   $0x410c80,0x8(%rbx)
  40520f:	00 
  405210:	48 89 d8             	mov    %rbx,%rax
  405213:	48 83 c4 08          	add    $0x8,%rsp
  405217:	5b                   	pop    %rbx
  405218:	c9                   	leaveq 
  405219:	c3                   	retq   
  40521a:	90                   	nop    
  40521b:	90                   	nop    

000000000040521c <_D3std8typeinfo6ti_int10TypeInfo_i8toStringMFZAa>:

module std.typeinfo.ti_int;

class TypeInfo_i : TypeInfo
{
    char[] toString() { return "int"; }
  40521c:	55                   	push   %rbp
  40521d:	48 89 e5             	mov    %rsp,%rbp
  405220:	53                   	push   %rbx
  405221:	48 83 ec 08          	sub    $0x8,%rsp
  405225:	48 89 fb             	mov    %rdi,%rbx
  405228:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40522c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405230:	e8 db 3f 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  405235:	48 c7 03 03 00 00 00 	movq   $0x3,(%rbx)
  40523c:	48 c7 43 08 40 0d 41 	movq   $0x410d40,0x8(%rbx)
  405243:	00 
  405244:	48 89 d8             	mov    %rbx,%rax
  405247:	48 83 c4 08          	add    $0x8,%rsp
  40524b:	5b                   	pop    %rbx
  40524c:	c9                   	leaveq 
  40524d:	c3                   	retq   

000000000040524e <_D3std8typeinfo6ti_int10TypeInfo_i7getHashMFPvZm>:

    hash_t getHash(void *p)
  40524e:	55                   	push   %rbp
  40524f:	48 89 e5             	mov    %rsp,%rbp
  405252:	48 83 ec 10          	sub    $0x10,%rsp
  405256:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40525a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40525e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405262:	e8 a9 3f 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p;
  405267:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40526b:	8b 00                	mov    (%rax),%eax
  40526d:	89 c0                	mov    %eax,%eax
    }
  40526f:	c9                   	leaveq 
  405270:	c3                   	retq   

0000000000405271 <_D3std8typeinfo6ti_int10TypeInfo_i6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405271:	55                   	push   %rbp
  405272:	48 89 e5             	mov    %rsp,%rbp
  405275:	48 83 ec 20          	sub    $0x20,%rsp
  405279:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40527d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405281:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405285:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405289:	e8 82 3f 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p1 == *cast(uint *)p2;
  40528e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405292:	8b 10                	mov    (%rax),%edx
  405294:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405298:	8b 00                	mov    (%rax),%eax
  40529a:	39 c2                	cmp    %eax,%edx
  40529c:	0f 94 c0             	sete   %al
  40529f:	0f b6 c0             	movzbl %al,%eax
    }
  4052a2:	c9                   	leaveq 
  4052a3:	c3                   	retq   

00000000004052a4 <_D3std8typeinfo6ti_int10TypeInfo_i7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4052a4:	55                   	push   %rbp
  4052a5:	48 89 e5             	mov    %rsp,%rbp
  4052a8:	48 83 ec 20          	sub    $0x20,%rsp
  4052ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4052b0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4052b4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4052b8:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4052bc:	e8 4f 3f 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	if (*cast(int*) p1 < *cast(int*) p2)
  4052c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4052c5:	8b 10                	mov    (%rax),%edx
  4052c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4052cb:	8b 00                	mov    (%rax),%eax
  4052cd:	39 c2                	cmp    %eax,%edx
  4052cf:	7d 09                	jge    4052da <_D3std8typeinfo6ti_int10TypeInfo_i7compareMFPvPvZi+0x36>
	    return -1;
  4052d1:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  4052d8:	eb 20                	jmp    4052fa <_D3std8typeinfo6ti_int10TypeInfo_i7compareMFPvPvZi+0x56>
	else if (*cast(int*) p1 > *cast(int*) p2)
  4052da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4052de:	8b 10                	mov    (%rax),%edx
  4052e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4052e4:	8b 00                	mov    (%rax),%eax
  4052e6:	39 c2                	cmp    %eax,%edx
  4052e8:	7e 09                	jle    4052f3 <_D3std8typeinfo6ti_int10TypeInfo_i7compareMFPvPvZi+0x4f>
	    return 1;
  4052ea:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  4052f1:	eb 07                	jmp    4052fa <_D3std8typeinfo6ti_int10TypeInfo_i7compareMFPvPvZi+0x56>
	return 0;
  4052f3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  4052fa:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    }
  4052fd:	c9                   	leaveq 
  4052fe:	c3                   	retq   

00000000004052ff <_D3std8typeinfo6ti_int10TypeInfo_i5tsizeMFZm>:

    size_t tsize()
  4052ff:	55                   	push   %rbp
  405300:	48 89 e5             	mov    %rsp,%rbp
  405303:	48 83 ec 10          	sub    $0x10,%rsp
  405307:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40530b:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40530f:	e8 fc 3e 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return int.sizeof;
  405314:	b8 04 00 00 00       	mov    $0x4,%eax
    }
  405319:	c9                   	leaveq 
  40531a:	c3                   	retq   

000000000040531b <_D3std8typeinfo6ti_int10TypeInfo_i4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  40531b:	55                   	push   %rbp
  40531c:	48 89 e5             	mov    %rsp,%rbp
  40531f:	48 83 ec 30          	sub    $0x30,%rsp
  405323:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405327:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40532b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40532f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405333:	e8 d8 3e 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	int t;
  405338:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	t = *cast(int *)p1;
  40533f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405343:	8b 00                	mov    (%rax),%eax
  405345:	89 45 fc             	mov    %eax,-0x4(%rbp)
	*cast(int *)p1 = *cast(int *)p2;
  405348:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40534c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405350:	8b 00                	mov    (%rax),%eax
  405352:	89 02                	mov    %eax,(%rdx)
	*cast(int *)p2 = t;
  405354:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405358:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40535b:	89 02                	mov    %eax,(%rdx)
    }
  40535d:	c9                   	leaveq 
  40535e:	c3                   	retq   
  40535f:	90                   	nop    

0000000000405360 <_D3std8typeinfo8ti_ireal10TypeInfo_j8toStringMFZAa>:

private import std.typeinfo.ti_real;

class TypeInfo_j : TypeInfo_e
{
    char[] toString() { return "ireal"; }
  405360:	55                   	push   %rbp
  405361:	48 89 e5             	mov    %rsp,%rbp
  405364:	53                   	push   %rbx
  405365:	48 83 ec 08          	sub    $0x8,%rsp
  405369:	48 89 fb             	mov    %rdi,%rbx
  40536c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405370:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405374:	e8 97 3e 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  405379:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  405380:	48 c7 43 08 00 0e 41 	movq   $0x410e00,0x8(%rbx)
  405387:	00 
  405388:	48 89 d8             	mov    %rbx,%rax
  40538b:	48 83 c4 08          	add    $0x8,%rsp
  40538f:	5b                   	pop    %rbx
  405390:	c9                   	leaveq 
  405391:	c3                   	retq   
  405392:	90                   	nop    
  405393:	90                   	nop    

0000000000405394 <_D3std8typeinfo7ti_long10TypeInfo_l8toStringMFZAa>:

module std.typeinfo.ti_long;

class TypeInfo_l : TypeInfo
{
    char[] toString() { return "long"; }
  405394:	55                   	push   %rbp
  405395:	48 89 e5             	mov    %rsp,%rbp
  405398:	53                   	push   %rbx
  405399:	48 83 ec 08          	sub    $0x8,%rsp
  40539d:	48 89 fb             	mov    %rdi,%rbx
  4053a0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4053a4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4053a8:	e8 63 3e 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  4053ad:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  4053b4:	48 c7 43 08 c0 0e 41 	movq   $0x410ec0,0x8(%rbx)
  4053bb:	00 
  4053bc:	48 89 d8             	mov    %rbx,%rax
  4053bf:	48 83 c4 08          	add    $0x8,%rsp
  4053c3:	5b                   	pop    %rbx
  4053c4:	c9                   	leaveq 
  4053c5:	c3                   	retq   

00000000004053c6 <_D3std8typeinfo7ti_long10TypeInfo_l7getHashMFPvZm>:

    hash_t getHash(void *p)
  4053c6:	55                   	push   %rbp
  4053c7:	48 89 e5             	mov    %rsp,%rbp
  4053ca:	48 83 ec 10          	sub    $0x10,%rsp
  4053ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4053d2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4053d6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4053da:	e8 31 3e 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p + (cast(uint *)p)[1];
  4053df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4053e3:	8b 08                	mov    (%rax),%ecx
  4053e5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4053e9:	b8 04 00 00 00       	mov    $0x4,%eax
  4053ee:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4053f2:	8b 00                	mov    (%rax),%eax
  4053f4:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  4053f7:	89 c0                	mov    %eax,%eax
    }
  4053f9:	c9                   	leaveq 
  4053fa:	c3                   	retq   

00000000004053fb <_D3std8typeinfo7ti_long10TypeInfo_l6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4053fb:	55                   	push   %rbp
  4053fc:	48 89 e5             	mov    %rsp,%rbp
  4053ff:	48 83 ec 20          	sub    $0x20,%rsp
  405403:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405407:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40540b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40540f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405413:	e8 f8 3d 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(long *)p1 == *cast(long *)p2;
  405418:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40541c:	48 8b 10             	mov    (%rax),%rdx
  40541f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405423:	48 8b 00             	mov    (%rax),%rax
  405426:	48 39 c2             	cmp    %rax,%rdx
  405429:	0f 94 c0             	sete   %al
  40542c:	0f b6 c0             	movzbl %al,%eax
    }
  40542f:	c9                   	leaveq 
  405430:	c3                   	retq   

0000000000405431 <_D3std8typeinfo7ti_long10TypeInfo_l7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  405431:	55                   	push   %rbp
  405432:	48 89 e5             	mov    %rsp,%rbp
  405435:	48 83 ec 20          	sub    $0x20,%rsp
  405439:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40543d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405441:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405445:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405449:	e8 c2 3d 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	if (*cast(long *)p1 < *cast(long *)p2)
  40544e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405452:	48 8b 10             	mov    (%rax),%rdx
  405455:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405459:	48 8b 00             	mov    (%rax),%rax
  40545c:	48 39 c2             	cmp    %rax,%rdx
  40545f:	7d 09                	jge    40546a <_D3std8typeinfo7ti_long10TypeInfo_l7compareMFPvPvZi+0x39>
	    return -1;
  405461:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  405468:	eb 23                	jmp    40548d <_D3std8typeinfo7ti_long10TypeInfo_l7compareMFPvPvZi+0x5c>
	else if (*cast(long *)p1 > *cast(long *)p2)
  40546a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40546e:	48 8b 10             	mov    (%rax),%rdx
  405471:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405475:	48 8b 00             	mov    (%rax),%rax
  405478:	48 39 c2             	cmp    %rax,%rdx
  40547b:	7e 09                	jle    405486 <_D3std8typeinfo7ti_long10TypeInfo_l7compareMFPvPvZi+0x55>
	    return 1;
  40547d:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  405484:	eb 07                	jmp    40548d <_D3std8typeinfo7ti_long10TypeInfo_l7compareMFPvPvZi+0x5c>
	return 0;
  405486:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40548d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    }
  405490:	c9                   	leaveq 
  405491:	c3                   	retq   

0000000000405492 <_D3std8typeinfo7ti_long10TypeInfo_l5tsizeMFZm>:

    size_t tsize()
  405492:	55                   	push   %rbp
  405493:	48 89 e5             	mov    %rsp,%rbp
  405496:	48 83 ec 10          	sub    $0x10,%rsp
  40549a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40549e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4054a2:	e8 69 3d 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return long.sizeof;
  4054a7:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  4054ac:	c9                   	leaveq 
  4054ad:	c3                   	retq   

00000000004054ae <_D3std8typeinfo7ti_long10TypeInfo_l4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  4054ae:	55                   	push   %rbp
  4054af:	48 89 e5             	mov    %rsp,%rbp
  4054b2:	48 83 ec 30          	sub    $0x30,%rsp
  4054b6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4054ba:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4054be:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4054c2:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4054c6:	e8 45 3d 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	long t;
  4054cb:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4054d2:	00 

	t = *cast(long *)p1;
  4054d3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4054d7:	48 8b 00             	mov    (%rax),%rax
  4054da:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(long *)p1 = *cast(long *)p2;
  4054de:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4054e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4054e6:	48 8b 00             	mov    (%rax),%rax
  4054e9:	48 89 02             	mov    %rax,(%rdx)
	*cast(long *)p2 = t;
  4054ec:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4054f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4054f4:	48 89 02             	mov    %rax,(%rdx)
    }
  4054f7:	c9                   	leaveq 
  4054f8:	c3                   	retq   
  4054f9:	90                   	nop    
  4054fa:	90                   	nop    
  4054fb:	90                   	nop    

00000000004054fc <_D3std8typeinfo6ti_ptr10TypeInfo_P7getHashMFPvZm>:

module std.typeinfo.ti_ptr;

class TypeInfo_P : TypeInfo
{
    hash_t getHash(void *p)
  4054fc:	55                   	push   %rbp
  4054fd:	48 89 e5             	mov    %rsp,%rbp
  405500:	48 83 ec 10          	sub    $0x10,%rsp
  405504:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405508:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40550c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405510:	e8 fb 3c 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return cast(uint)*cast(void* *)p;
  405515:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405519:	48 8b 00             	mov    (%rax),%rax
  40551c:	89 c0                	mov    %eax,%eax
    }
  40551e:	c9                   	leaveq 
  40551f:	c3                   	retq   

0000000000405520 <_D3std8typeinfo6ti_ptr10TypeInfo_P6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405520:	55                   	push   %rbp
  405521:	48 89 e5             	mov    %rsp,%rbp
  405524:	48 83 ec 20          	sub    $0x20,%rsp
  405528:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40552c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405530:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405534:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405538:	e8 d3 3c 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(void* *)p1 == *cast(void* *)p2;
  40553d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405541:	48 8b 10             	mov    (%rax),%rdx
  405544:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405548:	48 8b 00             	mov    (%rax),%rax
  40554b:	48 39 c2             	cmp    %rax,%rdx
  40554e:	0f 94 c0             	sete   %al
  405551:	0f b6 c0             	movzbl %al,%eax
    }
  405554:	c9                   	leaveq 
  405555:	c3                   	retq   

0000000000405556 <_D3std8typeinfo6ti_ptr10TypeInfo_P7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  405556:	55                   	push   %rbp
  405557:	48 89 e5             	mov    %rsp,%rbp
  40555a:	48 83 ec 30          	sub    $0x30,%rsp
  40555e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405562:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405566:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40556a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40556e:	e8 9d 3c 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	auto c = *cast(void* *)p1 - *cast(void* *)p2;
  405573:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405577:	48 8b 10             	mov    (%rax),%rdx
  40557a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40557e:	48 8b 00             	mov    (%rax),%rax
  405581:	48 89 d1             	mov    %rdx,%rcx
  405584:	48 29 c1             	sub    %rax,%rcx
  405587:	48 89 c8             	mov    %rcx,%rax
  40558a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (c < 0)
  40558e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  405593:	79 09                	jns    40559e <_D3std8typeinfo6ti_ptr10TypeInfo_P7compareMFPvPvZi+0x48>
	    return -1;
  405595:	c7 45 d4 ff ff ff ff 	movl   $0xffffffff,-0x2c(%rbp)
  40559c:	eb 17                	jmp    4055b5 <_D3std8typeinfo6ti_ptr10TypeInfo_P7compareMFPvPvZi+0x5f>
	else if (c > 0)
  40559e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4055a3:	7e 09                	jle    4055ae <_D3std8typeinfo6ti_ptr10TypeInfo_P7compareMFPvPvZi+0x58>
	    return 1;
  4055a5:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
  4055ac:	eb 07                	jmp    4055b5 <_D3std8typeinfo6ti_ptr10TypeInfo_P7compareMFPvPvZi+0x5f>
	return 0;
  4055ae:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  4055b5:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    }
  4055b8:	c9                   	leaveq 
  4055b9:	c3                   	retq   

00000000004055ba <_D3std8typeinfo6ti_ptr10TypeInfo_P5tsizeMFZm>:

    size_t tsize()
  4055ba:	55                   	push   %rbp
  4055bb:	48 89 e5             	mov    %rsp,%rbp
  4055be:	48 83 ec 10          	sub    $0x10,%rsp
  4055c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4055c6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4055ca:	e8 41 3c 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (void*).sizeof;
  4055cf:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  4055d4:	c9                   	leaveq 
  4055d5:	c3                   	retq   

00000000004055d6 <_D3std8typeinfo6ti_ptr10TypeInfo_P4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  4055d6:	55                   	push   %rbp
  4055d7:	48 89 e5             	mov    %rsp,%rbp
  4055da:	48 83 ec 30          	sub    $0x30,%rsp
  4055de:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4055e2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4055e6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4055ea:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4055ee:	e8 1d 3c 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	void* t;
  4055f3:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4055fa:	00 

	t = *cast(void* *)p1;
  4055fb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4055ff:	48 8b 00             	mov    (%rax),%rax
  405602:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(void* *)p1 = *cast(void* *)p2;
  405606:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40560a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40560e:	48 8b 00             	mov    (%rax),%rax
  405611:	48 89 02             	mov    %rax,(%rdx)
	*cast(void* *)p2 = t;
  405614:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405618:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40561c:	48 89 02             	mov    %rax,(%rdx)
    }
  40561f:	c9                   	leaveq 
  405620:	c3                   	retq   

0000000000405621 <_D3std8typeinfo6ti_ptr10TypeInfo_P5flagsMFZk>:

    uint flags()
  405621:	55                   	push   %rbp
  405622:	48 89 e5             	mov    %rsp,%rbp
  405625:	48 83 ec 10          	sub    $0x10,%rsp
  405629:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40562d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405631:	e8 da 3b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  405636:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  40563b:	c9                   	leaveq 
  40563c:	c3                   	retq   
  40563d:	90                   	nop    
  40563e:	90                   	nop    
  40563f:	90                   	nop    

0000000000405640 <_D3std8typeinfo7ti_real10TypeInfo_e8toStringMFZAa>:
import kernel.core.system;
//private import std.math;

class TypeInfo_e : TypeInfo
{
    char[] toString() { return "real"; }
  405640:	55                   	push   %rbp
  405641:	48 89 e5             	mov    %rsp,%rbp
  405644:	53                   	push   %rbx
  405645:	48 83 ec 08          	sub    $0x8,%rsp
  405649:	48 89 fb             	mov    %rdi,%rbx
  40564c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405650:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405654:	e8 b7 3b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  405659:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  405660:	48 c7 43 08 20 10 41 	movq   $0x411020,0x8(%rbx)
  405667:	00 
  405668:	48 89 d8             	mov    %rbx,%rax
  40566b:	48 83 c4 08          	add    $0x8,%rsp
  40566f:	5b                   	pop    %rbx
  405670:	c9                   	leaveq 
  405671:	c3                   	retq   

0000000000405672 <_D3std8typeinfo7ti_real10TypeInfo_e7getHashMFPvZm>:

    hash_t getHash(void *p)
  405672:	55                   	push   %rbp
  405673:	48 89 e5             	mov    %rsp,%rbp
  405676:	48 83 ec 10          	sub    $0x10,%rsp
  40567a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40567e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405682:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405686:	e8 85 3b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cast(uint *)p)[0] + (cast(uint *)p)[1] + (cast(ushort *)p)[4];
  40568b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40568f:	b8 00 00 00 00       	mov    $0x0,%eax
  405694:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  405698:	8b 08                	mov    (%rax),%ecx
  40569a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40569e:	b8 04 00 00 00       	mov    $0x4,%eax
  4056a3:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4056a7:	8b 00                	mov    (%rax),%eax
  4056a9:	01 c1                	add    %eax,%ecx
  4056ab:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4056af:	b8 08 00 00 00       	mov    $0x8,%eax
  4056b4:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4056b8:	0f b7 00             	movzwl (%rax),%eax
  4056bb:	0f b7 c0             	movzwl %ax,%eax
  4056be:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  4056c1:	89 c0                	mov    %eax,%eax
    }
  4056c3:	c9                   	leaveq 
  4056c4:	c3                   	retq   

00000000004056c5 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi>:

    static int _equals(real f1, real f2)
  4056c5:	55                   	push   %rbp
  4056c6:	48 89 e5             	mov    %rsp,%rbp
  4056c9:	48 83 ec 20          	sub    $0x20,%rsp
    {
	return f1 == f2 ||
  4056cd:	db 6d 10             	fldt   0x10(%rbp)
  4056d0:	db 6d 20             	fldt   0x20(%rbp)
  4056d3:	d9 c9                	fxch   %st(1)
  4056d5:	df e9                	fucomip %st(1),%st
  4056d7:	df c0                	ffreep %st(0)
  4056d9:	7a 02                	jp     4056dd <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi+0x18>
  4056db:	74 30                	je     40570d <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi+0x48>
  4056dd:	48 8b 45 10          	mov    0x10(%rbp),%rax
  4056e1:	8b 55 18             	mov    0x18(%rbp),%edx
  4056e4:	48 89 04 24          	mov    %rax,(%rsp)
  4056e8:	89 54 24 08          	mov    %edx,0x8(%rsp)
  4056ec:	e8 97 81 00 00       	callq  40d888 <_D6kernel4core6system5isnanFeZi>
  4056f1:	85 c0                	test   %eax,%eax
  4056f3:	74 1e                	je     405713 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi+0x4e>
  4056f5:	48 8b 45 20          	mov    0x20(%rbp),%rax
  4056f9:	8b 55 28             	mov    0x28(%rbp),%edx
  4056fc:	48 89 04 24          	mov    %rax,(%rsp)
  405700:	89 54 24 08          	mov    %edx,0x8(%rsp)
  405704:	e8 7f 81 00 00       	callq  40d888 <_D6kernel4core6system5isnanFeZi>
  405709:	85 c0                	test   %eax,%eax
  40570b:	74 06                	je     405713 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi+0x4e>
  40570d:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
  405711:	eb 04                	jmp    405717 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi+0x52>
  405713:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
  405717:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
		(isnan(f1) && isnan(f2));
    }
  40571b:	c9                   	leaveq 
  40571c:	c3                   	retq   

000000000040571d <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi>:

    static int _compare(real d1, real d2)
  40571d:	55                   	push   %rbp
  40571e:	48 89 e5             	mov    %rsp,%rbp
  405721:	48 83 ec 20          	sub    $0x20,%rsp
    {
	if (d1 !<>= d2)		// if either are NaN
  405725:	db 6d 10             	fldt   0x10(%rbp)
  405728:	db 6d 20             	fldt   0x20(%rbp)
  40572b:	df e9                	fucomip %st(1),%st
  40572d:	df c0                	ffreep %st(0)
  40572f:	0f 9a c0             	setp   %al
  405732:	84 c0                	test   %al,%al
  405734:	74 4b                	je     405781 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x64>
	{
	    if (isnan(d1))
  405736:	48 8b 45 10          	mov    0x10(%rbp),%rax
  40573a:	8b 55 18             	mov    0x18(%rbp),%edx
  40573d:	48 89 04 24          	mov    %rax,(%rsp)
  405741:	89 54 24 08          	mov    %edx,0x8(%rsp)
  405745:	e8 3e 81 00 00       	callq  40d888 <_D6kernel4core6system5isnanFeZi>
  40574a:	85 c0                	test   %eax,%eax
  40574c:	74 2a                	je     405778 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x5b>
	    {	if (isnan(d2))
  40574e:	48 8b 45 20          	mov    0x20(%rbp),%rax
  405752:	8b 55 28             	mov    0x28(%rbp),%edx
  405755:	48 89 04 24          	mov    %rax,(%rsp)
  405759:	89 54 24 08          	mov    %edx,0x8(%rsp)
  40575d:	e8 26 81 00 00       	callq  40d888 <_D6kernel4core6system5isnanFeZi>
  405762:	85 c0                	test   %eax,%eax
  405764:	74 09                	je     40576f <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x52>
		    return 0;
  405766:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  40576d:	eb 57                	jmp    4057c6 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0xa9>
		return -1;
  40576f:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%rbp)
  405776:	eb 4e                	jmp    4057c6 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0xa9>
	    }
	    return 1;
  405778:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  40577f:	eb 45                	jmp    4057c6 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0xa9>
	}
	return (d1 == d2) ? 0 : ((d1 < d2) ? -1 : 1);
  405781:	db 6d 10             	fldt   0x10(%rbp)
  405784:	db 6d 20             	fldt   0x20(%rbp)
  405787:	d9 c9                	fxch   %st(1)
  405789:	df e9                	fucomip %st(1),%st
  40578b:	df c0                	ffreep %st(0)
  40578d:	7a 02                	jp     405791 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x74>
  40578f:	74 02                	je     405793 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x76>
  405791:	eb 09                	jmp    40579c <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x7f>
  405793:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  40579a:	eb 24                	jmp    4057c0 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0xa3>
  40579c:	db 6d 10             	fldt   0x10(%rbp)
  40579f:	db 6d 20             	fldt   0x20(%rbp)
  4057a2:	df e9                	fucomip %st(1),%st
  4057a4:	df c0                	ffreep %st(0)
  4057a6:	77 02                	ja     4057aa <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x8d>
  4057a8:	eb 09                	jmp    4057b3 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x96>
  4057aa:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  4057b1:	eb 07                	jmp    4057ba <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x9d>
  4057b3:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  4057ba:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4057bd:	89 45 f8             	mov    %eax,-0x8(%rbp)
  4057c0:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4057c3:	89 45 f4             	mov    %eax,-0xc(%rbp)
  4057c6:	8b 45 f4             	mov    -0xc(%rbp),%eax
    }
  4057c9:	c9                   	leaveq 
  4057ca:	c3                   	retq   

00000000004057cb <_D3std8typeinfo7ti_real10TypeInfo_e6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4057cb:	55                   	push   %rbp
  4057cc:	48 89 e5             	mov    %rsp,%rbp
  4057cf:	53                   	push   %rbx
  4057d0:	48 83 ec 48          	sub    $0x48,%rsp
  4057d4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4057d8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4057dc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4057e0:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4057e4:	e8 27 3a 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(real *)p1, *cast(real *)p2);
  4057e9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4057ed:	48 8b 08             	mov    (%rax),%rcx
  4057f0:	8b 58 08             	mov    0x8(%rax),%ebx
  4057f3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4057f7:	8b 50 08             	mov    0x8(%rax),%edx
  4057fa:	48 8b 00             	mov    (%rax),%rax
  4057fd:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  405802:	89 5c 24 18          	mov    %ebx,0x18(%rsp)
  405806:	48 89 04 24          	mov    %rax,(%rsp)
  40580a:	89 54 24 08          	mov    %edx,0x8(%rsp)
  40580e:	e8 b2 fe ff ff       	callq  4056c5 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi>
    }
  405813:	48 83 c4 48          	add    $0x48,%rsp
  405817:	5b                   	pop    %rbx
  405818:	c9                   	leaveq 
  405819:	c3                   	retq   

000000000040581a <_D3std8typeinfo7ti_real10TypeInfo_e7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  40581a:	55                   	push   %rbp
  40581b:	48 89 e5             	mov    %rsp,%rbp
  40581e:	53                   	push   %rbx
  40581f:	48 83 ec 48          	sub    $0x48,%rsp
  405823:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405827:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40582b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40582f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405833:	e8 d8 39 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(real *)p1, *cast(real *)p2);
  405838:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40583c:	48 8b 08             	mov    (%rax),%rcx
  40583f:	8b 58 08             	mov    0x8(%rax),%ebx
  405842:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405846:	8b 50 08             	mov    0x8(%rax),%edx
  405849:	48 8b 00             	mov    (%rax),%rax
  40584c:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  405851:	89 5c 24 18          	mov    %ebx,0x18(%rsp)
  405855:	48 89 04 24          	mov    %rax,(%rsp)
  405859:	89 54 24 08          	mov    %edx,0x8(%rsp)
  40585d:	e8 bb fe ff ff       	callq  40571d <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi>
    }
  405862:	48 83 c4 48          	add    $0x48,%rsp
  405866:	5b                   	pop    %rbx
  405867:	c9                   	leaveq 
  405868:	c3                   	retq   

0000000000405869 <_D3std8typeinfo7ti_real10TypeInfo_e5tsizeMFZm>:

    size_t tsize()
  405869:	55                   	push   %rbp
  40586a:	48 89 e5             	mov    %rsp,%rbp
  40586d:	48 83 ec 10          	sub    $0x10,%rsp
  405871:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405875:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405879:	e8 92 39 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return real.sizeof;
  40587e:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  405883:	c9                   	leaveq 
  405884:	c3                   	retq   

0000000000405885 <_D3std8typeinfo7ti_real10TypeInfo_e4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  405885:	55                   	push   %rbp
  405886:	48 89 e5             	mov    %rsp,%rbp
  405889:	48 83 ec 30          	sub    $0x30,%rsp
  40588d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405891:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405895:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405899:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40589d:	e8 6e 39 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	real t;
  4058a2:	48 b8 00 00 00 00 00 	mov    $0xc000000000000000,%rax
  4058a9:	00 00 c0 
  4058ac:	ba ff 7f 00 00       	mov    $0x7fff,%edx
  4058b1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4058b5:	89 55 f8             	mov    %edx,-0x8(%rbp)

	t = *cast(real *)p1;
  4058b8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4058bc:	8b 50 08             	mov    0x8(%rax),%edx
  4058bf:	48 8b 00             	mov    (%rax),%rax
  4058c2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4058c6:	89 55 f8             	mov    %edx,-0x8(%rbp)
	*cast(real *)p1 = *cast(real *)p2;
  4058c9:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4058cd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4058d1:	8b 50 08             	mov    0x8(%rax),%edx
  4058d4:	48 8b 00             	mov    (%rax),%rax
  4058d7:	48 89 01             	mov    %rax,(%rcx)
  4058da:	89 51 08             	mov    %edx,0x8(%rcx)
	*cast(real *)p2 = t;
  4058dd:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  4058e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4058e5:	8b 55 f8             	mov    -0x8(%rbp),%edx
  4058e8:	48 89 01             	mov    %rax,(%rcx)
  4058eb:	89 51 08             	mov    %edx,0x8(%rcx)
    }
  4058ee:	c9                   	leaveq 
  4058ef:	c3                   	retq   

00000000004058f0 <_D3std8typeinfo7ti_real10TypeInfo_e4initMFZAv>:

    void[] init()
  4058f0:	55                   	push   %rbp
  4058f1:	48 89 e5             	mov    %rsp,%rbp
  4058f4:	53                   	push   %rbx
  4058f5:	48 83 ec 28          	sub    $0x28,%rsp
  4058f9:	48 89 fb             	mov    %rdi,%rbx
  4058fc:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  405900:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  405904:	e8 07 39 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {	static real r;

	return (cast(real *)&r)[0 .. 1];
  405909:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  405910:	00 
  405911:	48 c7 45 e8 20 b5 41 	movq   $0x41b520,-0x18(%rbp)
  405918:	00 
  405919:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40591d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405921:	49 89 c0             	mov    %rax,%r8
  405924:	ba 10 00 00 00       	mov    $0x10,%edx
  405929:	be 01 00 00 00       	mov    $0x1,%esi
  40592e:	48 89 df             	mov    %rbx,%rdi
  405931:	e8 7d 7b 00 00       	callq  40d4b3 <_d_arraycast>
    }
  405936:	48 89 d8             	mov    %rbx,%rax
  405939:	48 83 c4 28          	add    $0x28,%rsp
  40593d:	5b                   	pop    %rbx
  40593e:	c9                   	leaveq 
  40593f:	c3                   	retq   

0000000000405940 <_D3std8typeinfo8ti_short10TypeInfo_s8toStringMFZAa>:

module std.typeinfo.ti_short;

class TypeInfo_s : TypeInfo
{
    char[] toString() { return "short"; }
  405940:	55                   	push   %rbp
  405941:	48 89 e5             	mov    %rsp,%rbp
  405944:	53                   	push   %rbx
  405945:	48 83 ec 08          	sub    $0x8,%rsp
  405949:	48 89 fb             	mov    %rdi,%rbx
  40594c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405950:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405954:	e8 b7 38 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  405959:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  405960:	48 c7 43 08 e0 10 41 	movq   $0x4110e0,0x8(%rbx)
  405967:	00 
  405968:	48 89 d8             	mov    %rbx,%rax
  40596b:	48 83 c4 08          	add    $0x8,%rsp
  40596f:	5b                   	pop    %rbx
  405970:	c9                   	leaveq 
  405971:	c3                   	retq   

0000000000405972 <_D3std8typeinfo8ti_short10TypeInfo_s7getHashMFPvZm>:

    hash_t getHash(void *p)
  405972:	55                   	push   %rbp
  405973:	48 89 e5             	mov    %rsp,%rbp
  405976:	48 83 ec 10          	sub    $0x10,%rsp
  40597a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40597e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405982:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405986:	e8 85 38 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(short *)p;
  40598b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40598f:	0f b7 00             	movzwl (%rax),%eax
  405992:	48 0f bf c0          	movswq %ax,%rax
    }
  405996:	c9                   	leaveq 
  405997:	c3                   	retq   

0000000000405998 <_D3std8typeinfo8ti_short10TypeInfo_s6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405998:	55                   	push   %rbp
  405999:	48 89 e5             	mov    %rsp,%rbp
  40599c:	48 83 ec 20          	sub    $0x20,%rsp
  4059a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4059a4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4059a8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4059ac:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4059b0:	e8 5b 38 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(short *)p1 == *cast(short *)p2;
  4059b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4059b9:	0f b7 10             	movzwl (%rax),%edx
  4059bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4059c0:	0f b7 00             	movzwl (%rax),%eax
  4059c3:	66 39 c2             	cmp    %ax,%dx
  4059c6:	0f 94 c0             	sete   %al
  4059c9:	0f b6 c0             	movzbl %al,%eax
    }
  4059cc:	c9                   	leaveq 
  4059cd:	c3                   	retq   

00000000004059ce <_D3std8typeinfo8ti_short10TypeInfo_s7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4059ce:	55                   	push   %rbp
  4059cf:	48 89 e5             	mov    %rsp,%rbp
  4059d2:	48 83 ec 20          	sub    $0x20,%rsp
  4059d6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4059da:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4059de:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4059e2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4059e6:	e8 25 38 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(short *)p1 - *cast(short *)p2;
  4059eb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4059ef:	0f b7 00             	movzwl (%rax),%eax
  4059f2:	0f bf d0             	movswl %ax,%edx
  4059f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4059f9:	0f b7 00             	movzwl (%rax),%eax
  4059fc:	98                   	cwtl   
  4059fd:	89 d1                	mov    %edx,%ecx
  4059ff:	29 c1                	sub    %eax,%ecx
  405a01:	89 c8                	mov    %ecx,%eax
    }
  405a03:	c9                   	leaveq 
  405a04:	c3                   	retq   

0000000000405a05 <_D3std8typeinfo8ti_short10TypeInfo_s5tsizeMFZm>:

    size_t tsize()
  405a05:	55                   	push   %rbp
  405a06:	48 89 e5             	mov    %rsp,%rbp
  405a09:	48 83 ec 10          	sub    $0x10,%rsp
  405a0d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405a11:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405a15:	e8 f6 37 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return short.sizeof;
  405a1a:	b8 02 00 00 00       	mov    $0x2,%eax
    }
  405a1f:	c9                   	leaveq 
  405a20:	c3                   	retq   

0000000000405a21 <_D3std8typeinfo8ti_short10TypeInfo_s4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  405a21:	55                   	push   %rbp
  405a22:	48 89 e5             	mov    %rsp,%rbp
  405a25:	48 83 ec 30          	sub    $0x30,%rsp
  405a29:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405a2d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405a31:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405a35:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405a39:	e8 d2 37 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	short t;
  405a3e:	66 c7 45 fe 00 00    	movw   $0x0,-0x2(%rbp)

	t = *cast(short *)p1;
  405a44:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405a48:	0f b7 00             	movzwl (%rax),%eax
  405a4b:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	*cast(short *)p1 = *cast(short *)p2;
  405a4f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405a53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405a57:	0f b7 00             	movzwl (%rax),%eax
  405a5a:	66 89 02             	mov    %ax,(%rdx)
	*cast(short *)p2 = t;
  405a5d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405a61:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  405a65:	66 89 02             	mov    %ax,(%rdx)
    }
  405a68:	c9                   	leaveq 
  405a69:	c3                   	retq   
  405a6a:	90                   	nop    
  405a6b:	90                   	nop    

0000000000405a6c <_D3std8typeinfo8ti_ubyte10TypeInfo_h8toStringMFZAa>:

module std.typeinfo.ti_ubyte;

class TypeInfo_h : TypeInfo
{
    char[] toString() { return "ubyte"; }
  405a6c:	55                   	push   %rbp
  405a6d:	48 89 e5             	mov    %rsp,%rbp
  405a70:	53                   	push   %rbx
  405a71:	48 83 ec 08          	sub    $0x8,%rsp
  405a75:	48 89 fb             	mov    %rdi,%rbx
  405a78:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405a7c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405a80:	e8 8b 37 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  405a85:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  405a8c:	48 c7 43 08 a0 11 41 	movq   $0x4111a0,0x8(%rbx)
  405a93:	00 
  405a94:	48 89 d8             	mov    %rbx,%rax
  405a97:	48 83 c4 08          	add    $0x8,%rsp
  405a9b:	5b                   	pop    %rbx
  405a9c:	c9                   	leaveq 
  405a9d:	c3                   	retq   

0000000000405a9e <_D3std8typeinfo8ti_ubyte10TypeInfo_h7getHashMFPvZm>:

    hash_t getHash(void *p)
  405a9e:	55                   	push   %rbp
  405a9f:	48 89 e5             	mov    %rsp,%rbp
  405aa2:	48 83 ec 10          	sub    $0x10,%rsp
  405aa6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405aaa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405aae:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405ab2:	e8 59 37 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ubyte *)p;
  405ab7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405abb:	0f b6 00             	movzbl (%rax),%eax
  405abe:	0f b6 c0             	movzbl %al,%eax
    }
  405ac1:	c9                   	leaveq 
  405ac2:	c3                   	retq   

0000000000405ac3 <_D3std8typeinfo8ti_ubyte10TypeInfo_h6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405ac3:	55                   	push   %rbp
  405ac4:	48 89 e5             	mov    %rsp,%rbp
  405ac7:	48 83 ec 20          	sub    $0x20,%rsp
  405acb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405acf:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405ad3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405ad7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405adb:	e8 30 37 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ubyte *)p1 == *cast(ubyte *)p2;
  405ae0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405ae4:	0f b6 10             	movzbl (%rax),%edx
  405ae7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405aeb:	0f b6 00             	movzbl (%rax),%eax
  405aee:	38 c2                	cmp    %al,%dl
  405af0:	0f 94 c0             	sete   %al
  405af3:	0f b6 c0             	movzbl %al,%eax
    }
  405af6:	c9                   	leaveq 
  405af7:	c3                   	retq   

0000000000405af8 <_D3std8typeinfo8ti_ubyte10TypeInfo_h7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  405af8:	55                   	push   %rbp
  405af9:	48 89 e5             	mov    %rsp,%rbp
  405afc:	48 83 ec 20          	sub    $0x20,%rsp
  405b00:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405b04:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405b08:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405b0c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405b10:	e8 fb 36 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ubyte *)p1 - *cast(ubyte *)p2;
  405b15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405b19:	0f b6 00             	movzbl (%rax),%eax
  405b1c:	0f b6 d0             	movzbl %al,%edx
  405b1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405b23:	0f b6 00             	movzbl (%rax),%eax
  405b26:	0f b6 c0             	movzbl %al,%eax
  405b29:	89 d1                	mov    %edx,%ecx
  405b2b:	29 c1                	sub    %eax,%ecx
  405b2d:	89 c8                	mov    %ecx,%eax
    }
  405b2f:	c9                   	leaveq 
  405b30:	c3                   	retq   

0000000000405b31 <_D3std8typeinfo8ti_ubyte10TypeInfo_h5tsizeMFZm>:

    size_t tsize()
  405b31:	55                   	push   %rbp
  405b32:	48 89 e5             	mov    %rsp,%rbp
  405b35:	48 83 ec 10          	sub    $0x10,%rsp
  405b39:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405b3d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405b41:	e8 ca 36 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return ubyte.sizeof;
  405b46:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  405b4b:	c9                   	leaveq 
  405b4c:	c3                   	retq   

0000000000405b4d <_D3std8typeinfo8ti_ubyte10TypeInfo_h4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  405b4d:	55                   	push   %rbp
  405b4e:	48 89 e5             	mov    %rsp,%rbp
  405b51:	48 83 ec 30          	sub    $0x30,%rsp
  405b55:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405b59:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405b5d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405b61:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405b65:	e8 a6 36 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ubyte t;
  405b6a:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)

	t = *cast(ubyte *)p1;
  405b6e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405b72:	0f b6 00             	movzbl (%rax),%eax
  405b75:	88 45 ff             	mov    %al,-0x1(%rbp)
	*cast(ubyte *)p1 = *cast(ubyte *)p2;
  405b78:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405b7c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405b80:	0f b6 00             	movzbl (%rax),%eax
  405b83:	88 02                	mov    %al,(%rdx)
	*cast(ubyte *)p2 = t;
  405b85:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405b89:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  405b8d:	88 02                	mov    %al,(%rdx)
    }
  405b8f:	c9                   	leaveq 
  405b90:	c3                   	retq   

0000000000405b91 <_D3std8typeinfo8ti_ubyte10TypeInfo_b8toStringMFZAa>:
}

class TypeInfo_b : TypeInfo_h
{
    char[] toString() { return "bool"; }
  405b91:	55                   	push   %rbp
  405b92:	48 89 e5             	mov    %rsp,%rbp
  405b95:	53                   	push   %rbx
  405b96:	48 83 ec 08          	sub    $0x8,%rsp
  405b9a:	48 89 fb             	mov    %rdi,%rbx
  405b9d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405ba1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405ba5:	e8 66 36 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  405baa:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  405bb1:	48 c7 43 08 50 12 41 	movq   $0x411250,0x8(%rbx)
  405bb8:	00 
  405bb9:	48 89 d8             	mov    %rbx,%rax
  405bbc:	48 83 c4 08          	add    $0x8,%rsp
  405bc0:	5b                   	pop    %rbx
  405bc1:	c9                   	leaveq 
  405bc2:	c3                   	retq   
  405bc3:	90                   	nop    

0000000000405bc4 <_D3std8typeinfo7ti_uint10TypeInfo_k8toStringMFZAa>:

module std.typeinfo.ti_uint;

class TypeInfo_k : TypeInfo
{
    char[] toString() { return "uint"; }
  405bc4:	55                   	push   %rbp
  405bc5:	48 89 e5             	mov    %rsp,%rbp
  405bc8:	53                   	push   %rbx
  405bc9:	48 83 ec 08          	sub    $0x8,%rsp
  405bcd:	48 89 fb             	mov    %rdi,%rbx
  405bd0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405bd4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405bd8:	e8 33 36 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  405bdd:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  405be4:	48 c7 43 08 00 13 41 	movq   $0x411300,0x8(%rbx)
  405beb:	00 
  405bec:	48 89 d8             	mov    %rbx,%rax
  405bef:	48 83 c4 08          	add    $0x8,%rsp
  405bf3:	5b                   	pop    %rbx
  405bf4:	c9                   	leaveq 
  405bf5:	c3                   	retq   

0000000000405bf6 <_D3std8typeinfo7ti_uint10TypeInfo_k7getHashMFPvZm>:

    hash_t getHash(void *p)
  405bf6:	55                   	push   %rbp
  405bf7:	48 89 e5             	mov    %rsp,%rbp
  405bfa:	48 83 ec 10          	sub    $0x10,%rsp
  405bfe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405c02:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405c06:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405c0a:	e8 01 36 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p;
  405c0f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405c13:	8b 00                	mov    (%rax),%eax
  405c15:	89 c0                	mov    %eax,%eax
    }
  405c17:	c9                   	leaveq 
  405c18:	c3                   	retq   

0000000000405c19 <_D3std8typeinfo7ti_uint10TypeInfo_k6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405c19:	55                   	push   %rbp
  405c1a:	48 89 e5             	mov    %rsp,%rbp
  405c1d:	48 83 ec 20          	sub    $0x20,%rsp
  405c21:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405c25:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405c29:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405c2d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405c31:	e8 da 35 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p1 == *cast(uint *)p2;
  405c36:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405c3a:	8b 10                	mov    (%rax),%edx
  405c3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405c40:	8b 00                	mov    (%rax),%eax
  405c42:	39 c2                	cmp    %eax,%edx
  405c44:	0f 94 c0             	sete   %al
  405c47:	0f b6 c0             	movzbl %al,%eax
    }
  405c4a:	c9                   	leaveq 
  405c4b:	c3                   	retq   

0000000000405c4c <_D3std8typeinfo7ti_uint10TypeInfo_k7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  405c4c:	55                   	push   %rbp
  405c4d:	48 89 e5             	mov    %rsp,%rbp
  405c50:	48 83 ec 20          	sub    $0x20,%rsp
  405c54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405c58:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405c5c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405c60:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405c64:	e8 a7 35 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	if (*cast(uint*) p1 < *cast(uint*) p2)
  405c69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405c6d:	8b 10                	mov    (%rax),%edx
  405c6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405c73:	8b 00                	mov    (%rax),%eax
  405c75:	39 c2                	cmp    %eax,%edx
  405c77:	73 09                	jae    405c82 <_D3std8typeinfo7ti_uint10TypeInfo_k7compareMFPvPvZi+0x36>
	    return -1;
  405c79:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  405c80:	eb 20                	jmp    405ca2 <_D3std8typeinfo7ti_uint10TypeInfo_k7compareMFPvPvZi+0x56>
	else if (*cast(uint*) p1 > *cast(uint*) p2)
  405c82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405c86:	8b 10                	mov    (%rax),%edx
  405c88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405c8c:	8b 00                	mov    (%rax),%eax
  405c8e:	39 c2                	cmp    %eax,%edx
  405c90:	76 09                	jbe    405c9b <_D3std8typeinfo7ti_uint10TypeInfo_k7compareMFPvPvZi+0x4f>
	    return 1;
  405c92:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  405c99:	eb 07                	jmp    405ca2 <_D3std8typeinfo7ti_uint10TypeInfo_k7compareMFPvPvZi+0x56>
	return 0;
  405c9b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  405ca2:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    }
  405ca5:	c9                   	leaveq 
  405ca6:	c3                   	retq   

0000000000405ca7 <_D3std8typeinfo7ti_uint10TypeInfo_k5tsizeMFZm>:

    size_t tsize()
  405ca7:	55                   	push   %rbp
  405ca8:	48 89 e5             	mov    %rsp,%rbp
  405cab:	48 83 ec 10          	sub    $0x10,%rsp
  405caf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405cb3:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405cb7:	e8 54 35 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return uint.sizeof;
  405cbc:	b8 04 00 00 00       	mov    $0x4,%eax
    }
  405cc1:	c9                   	leaveq 
  405cc2:	c3                   	retq   

0000000000405cc3 <_D3std8typeinfo7ti_uint10TypeInfo_k4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  405cc3:	55                   	push   %rbp
  405cc4:	48 89 e5             	mov    %rsp,%rbp
  405cc7:	48 83 ec 30          	sub    $0x30,%rsp
  405ccb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405ccf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405cd3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405cd7:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405cdb:	e8 30 35 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	int t;
  405ce0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	t = *cast(uint *)p1;
  405ce7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405ceb:	8b 00                	mov    (%rax),%eax
  405ced:	89 45 fc             	mov    %eax,-0x4(%rbp)
	*cast(uint *)p1 = *cast(uint *)p2;
  405cf0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405cf4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405cf8:	8b 00                	mov    (%rax),%eax
  405cfa:	89 02                	mov    %eax,(%rdx)
	*cast(uint *)p2 = t;
  405cfc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405d00:	8b 45 fc             	mov    -0x4(%rbp),%eax
  405d03:	89 02                	mov    %eax,(%rdx)
    }
  405d05:	c9                   	leaveq 
  405d06:	c3                   	retq   
  405d07:	90                   	nop    

0000000000405d08 <_D3std8typeinfo8ti_ulong10TypeInfo_m8toStringMFZAa>:

module std.typeinfo.ti_ulong;

class TypeInfo_m : TypeInfo
{
    char[] toString() { return "ulong"; }
  405d08:	55                   	push   %rbp
  405d09:	48 89 e5             	mov    %rsp,%rbp
  405d0c:	53                   	push   %rbx
  405d0d:	48 83 ec 08          	sub    $0x8,%rsp
  405d11:	48 89 fb             	mov    %rdi,%rbx
  405d14:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405d18:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405d1c:	e8 ef 34 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  405d21:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  405d28:	48 c7 43 08 c0 13 41 	movq   $0x4113c0,0x8(%rbx)
  405d2f:	00 
  405d30:	48 89 d8             	mov    %rbx,%rax
  405d33:	48 83 c4 08          	add    $0x8,%rsp
  405d37:	5b                   	pop    %rbx
  405d38:	c9                   	leaveq 
  405d39:	c3                   	retq   

0000000000405d3a <_D3std8typeinfo8ti_ulong10TypeInfo_m7getHashMFPvZm>:

    hash_t getHash(void *p)
  405d3a:	55                   	push   %rbp
  405d3b:	48 89 e5             	mov    %rsp,%rbp
  405d3e:	48 83 ec 10          	sub    $0x10,%rsp
  405d42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405d46:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405d4a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405d4e:	e8 bd 34 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p + (cast(uint *)p)[1];
  405d53:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405d57:	8b 08                	mov    (%rax),%ecx
  405d59:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  405d5d:	b8 04 00 00 00       	mov    $0x4,%eax
  405d62:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  405d66:	8b 00                	mov    (%rax),%eax
  405d68:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  405d6b:	89 c0                	mov    %eax,%eax
    }
  405d6d:	c9                   	leaveq 
  405d6e:	c3                   	retq   

0000000000405d6f <_D3std8typeinfo8ti_ulong10TypeInfo_m6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405d6f:	55                   	push   %rbp
  405d70:	48 89 e5             	mov    %rsp,%rbp
  405d73:	48 83 ec 20          	sub    $0x20,%rsp
  405d77:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405d7b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405d7f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405d83:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405d87:	e8 84 34 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ulong *)p1 == *cast(ulong *)p2;
  405d8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405d90:	48 8b 10             	mov    (%rax),%rdx
  405d93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405d97:	48 8b 00             	mov    (%rax),%rax
  405d9a:	48 39 c2             	cmp    %rax,%rdx
  405d9d:	0f 94 c0             	sete   %al
  405da0:	0f b6 c0             	movzbl %al,%eax
    }
  405da3:	c9                   	leaveq 
  405da4:	c3                   	retq   

0000000000405da5 <_D3std8typeinfo8ti_ulong10TypeInfo_m7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  405da5:	55                   	push   %rbp
  405da6:	48 89 e5             	mov    %rsp,%rbp
  405da9:	48 83 ec 20          	sub    $0x20,%rsp
  405dad:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405db1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405db5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405db9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405dbd:	e8 4e 34 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	if (*cast(ulong *)p1 < *cast(ulong *)p2)
  405dc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405dc6:	48 8b 10             	mov    (%rax),%rdx
  405dc9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405dcd:	48 8b 00             	mov    (%rax),%rax
  405dd0:	48 39 c2             	cmp    %rax,%rdx
  405dd3:	73 09                	jae    405dde <_D3std8typeinfo8ti_ulong10TypeInfo_m7compareMFPvPvZi+0x39>
	    return -1;
  405dd5:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  405ddc:	eb 23                	jmp    405e01 <_D3std8typeinfo8ti_ulong10TypeInfo_m7compareMFPvPvZi+0x5c>
	else if (*cast(ulong *)p1 > *cast(ulong *)p2)
  405dde:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405de2:	48 8b 10             	mov    (%rax),%rdx
  405de5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405de9:	48 8b 00             	mov    (%rax),%rax
  405dec:	48 39 c2             	cmp    %rax,%rdx
  405def:	76 09                	jbe    405dfa <_D3std8typeinfo8ti_ulong10TypeInfo_m7compareMFPvPvZi+0x55>
	    return 1;
  405df1:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  405df8:	eb 07                	jmp    405e01 <_D3std8typeinfo8ti_ulong10TypeInfo_m7compareMFPvPvZi+0x5c>
	return 0;
  405dfa:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  405e01:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    }
  405e04:	c9                   	leaveq 
  405e05:	c3                   	retq   

0000000000405e06 <_D3std8typeinfo8ti_ulong10TypeInfo_m5tsizeMFZm>:

    size_t tsize()
  405e06:	55                   	push   %rbp
  405e07:	48 89 e5             	mov    %rsp,%rbp
  405e0a:	48 83 ec 10          	sub    $0x10,%rsp
  405e0e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405e12:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405e16:	e8 f5 33 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return ulong.sizeof;
  405e1b:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  405e20:	c9                   	leaveq 
  405e21:	c3                   	retq   

0000000000405e22 <_D3std8typeinfo8ti_ulong10TypeInfo_m4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  405e22:	55                   	push   %rbp
  405e23:	48 89 e5             	mov    %rsp,%rbp
  405e26:	48 83 ec 30          	sub    $0x30,%rsp
  405e2a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405e2e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405e32:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405e36:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405e3a:	e8 d1 33 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ulong t;
  405e3f:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  405e46:	00 

	t = *cast(ulong *)p1;
  405e47:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405e4b:	48 8b 00             	mov    (%rax),%rax
  405e4e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(ulong *)p1 = *cast(ulong *)p2;
  405e52:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405e56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405e5a:	48 8b 00             	mov    (%rax),%rax
  405e5d:	48 89 02             	mov    %rax,(%rdx)
	*cast(ulong *)p2 = t;
  405e60:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405e64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405e68:	48 89 02             	mov    %rax,(%rdx)
    }
  405e6b:	c9                   	leaveq 
  405e6c:	c3                   	retq   
  405e6d:	90                   	nop    
  405e6e:	90                   	nop    
  405e6f:	90                   	nop    

0000000000405e70 <_D3std8typeinfo9ti_ushort10TypeInfo_t8toStringMFZAa>:

module std.typeinfo.ti_ushort;

class TypeInfo_t : TypeInfo
{
    char[] toString() { return "ushort"; }
  405e70:	55                   	push   %rbp
  405e71:	48 89 e5             	mov    %rsp,%rbp
  405e74:	53                   	push   %rbx
  405e75:	48 83 ec 08          	sub    $0x8,%rsp
  405e79:	48 89 fb             	mov    %rdi,%rbx
  405e7c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405e80:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405e84:	e8 87 33 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  405e89:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  405e90:	48 c7 43 08 80 14 41 	movq   $0x411480,0x8(%rbx)
  405e97:	00 
  405e98:	48 89 d8             	mov    %rbx,%rax
  405e9b:	48 83 c4 08          	add    $0x8,%rsp
  405e9f:	5b                   	pop    %rbx
  405ea0:	c9                   	leaveq 
  405ea1:	c3                   	retq   

0000000000405ea2 <_D3std8typeinfo9ti_ushort10TypeInfo_t7getHashMFPvZm>:

    hash_t getHash(void *p)
  405ea2:	55                   	push   %rbp
  405ea3:	48 89 e5             	mov    %rsp,%rbp
  405ea6:	48 83 ec 10          	sub    $0x10,%rsp
  405eaa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405eae:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405eb2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405eb6:	e8 55 33 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ushort *)p;
  405ebb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405ebf:	0f b7 00             	movzwl (%rax),%eax
  405ec2:	0f b7 c0             	movzwl %ax,%eax
    }
  405ec5:	c9                   	leaveq 
  405ec6:	c3                   	retq   

0000000000405ec7 <_D3std8typeinfo9ti_ushort10TypeInfo_t6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405ec7:	55                   	push   %rbp
  405ec8:	48 89 e5             	mov    %rsp,%rbp
  405ecb:	48 83 ec 20          	sub    $0x20,%rsp
  405ecf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405ed3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405ed7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405edb:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405edf:	e8 2c 33 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ushort *)p1 == *cast(ushort *)p2;
  405ee4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405ee8:	0f b7 10             	movzwl (%rax),%edx
  405eeb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405eef:	0f b7 00             	movzwl (%rax),%eax
  405ef2:	66 39 c2             	cmp    %ax,%dx
  405ef5:	0f 94 c0             	sete   %al
  405ef8:	0f b6 c0             	movzbl %al,%eax
    }
  405efb:	c9                   	leaveq 
  405efc:	c3                   	retq   

0000000000405efd <_D3std8typeinfo9ti_ushort10TypeInfo_t7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  405efd:	55                   	push   %rbp
  405efe:	48 89 e5             	mov    %rsp,%rbp
  405f01:	48 83 ec 20          	sub    $0x20,%rsp
  405f05:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405f09:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405f0d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405f11:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405f15:	e8 f6 32 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ushort *)p1 - *cast(ushort *)p2;
  405f1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405f1e:	0f b7 00             	movzwl (%rax),%eax
  405f21:	0f b7 d0             	movzwl %ax,%edx
  405f24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405f28:	0f b7 00             	movzwl (%rax),%eax
  405f2b:	0f b7 c0             	movzwl %ax,%eax
  405f2e:	89 d1                	mov    %edx,%ecx
  405f30:	29 c1                	sub    %eax,%ecx
  405f32:	89 c8                	mov    %ecx,%eax
    }
  405f34:	c9                   	leaveq 
  405f35:	c3                   	retq   

0000000000405f36 <_D3std8typeinfo9ti_ushort10TypeInfo_t5tsizeMFZm>:

    size_t tsize()
  405f36:	55                   	push   %rbp
  405f37:	48 89 e5             	mov    %rsp,%rbp
  405f3a:	48 83 ec 10          	sub    $0x10,%rsp
  405f3e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405f42:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405f46:	e8 c5 32 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return ushort.sizeof;
  405f4b:	b8 02 00 00 00       	mov    $0x2,%eax
    }
  405f50:	c9                   	leaveq 
  405f51:	c3                   	retq   

0000000000405f52 <_D3std8typeinfo9ti_ushort10TypeInfo_t4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  405f52:	55                   	push   %rbp
  405f53:	48 89 e5             	mov    %rsp,%rbp
  405f56:	48 83 ec 30          	sub    $0x30,%rsp
  405f5a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405f5e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405f62:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405f66:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405f6a:	e8 a1 32 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ushort t;
  405f6f:	66 c7 45 fe 00 00    	movw   $0x0,-0x2(%rbp)

	t = *cast(ushort *)p1;
  405f75:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405f79:	0f b7 00             	movzwl (%rax),%eax
  405f7c:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	*cast(ushort *)p1 = *cast(ushort *)p2;
  405f80:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405f84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405f88:	0f b7 00             	movzwl (%rax),%eax
  405f8b:	66 89 02             	mov    %ax,(%rdx)
	*cast(ushort *)p2 = t;
  405f8e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405f92:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  405f96:	66 89 02             	mov    %ax,(%rdx)
    }
  405f99:	c9                   	leaveq 
  405f9a:	c3                   	retq   
  405f9b:	90                   	nop    

0000000000405f9c <_D3std8typeinfo7ti_void10TypeInfo_v8toStringMFZAa>:

module std.typeinfo.ti_void;

class TypeInfo_v : TypeInfo
{
    char[] toString() { return "void"; }
  405f9c:	55                   	push   %rbp
  405f9d:	48 89 e5             	mov    %rsp,%rbp
  405fa0:	53                   	push   %rbx
  405fa1:	48 83 ec 08          	sub    $0x8,%rsp
  405fa5:	48 89 fb             	mov    %rdi,%rbx
  405fa8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405fac:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405fb0:	e8 5b 32 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  405fb5:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  405fbc:	48 c7 43 08 40 15 41 	movq   $0x411540,0x8(%rbx)
  405fc3:	00 
  405fc4:	48 89 d8             	mov    %rbx,%rax
  405fc7:	48 83 c4 08          	add    $0x8,%rsp
  405fcb:	5b                   	pop    %rbx
  405fcc:	c9                   	leaveq 
  405fcd:	c3                   	retq   

0000000000405fce <_D3std8typeinfo7ti_void10TypeInfo_v7getHashMFPvZm>:

    hash_t getHash(void *p)
  405fce:	55                   	push   %rbp
  405fcf:	48 89 e5             	mov    %rsp,%rbp
  405fd2:	48 83 ec 20          	sub    $0x20,%rsp
  405fd6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405fda:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405fde:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405fe2:	e8 29 32 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	assert(0);
  405fe7:	48 c7 45 f0 16 00 00 	movq   $0x16,-0x10(%rbp)
  405fee:	00 
  405fef:	48 c7 45 f8 45 15 41 	movq   $0x411545,-0x8(%rbp)
  405ff6:	00 
  405ff7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405ffb:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  405fff:	ba 0c 00 00 00       	mov    $0xc,%edx
  406004:	e8 5d 4c 00 00       	callq  40ac66 <_d_assert>
    }
  406009:	c9                   	leaveq 
  40600a:	c3                   	retq   

000000000040600b <_D3std8typeinfo7ti_void10TypeInfo_v6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  40600b:	55                   	push   %rbp
  40600c:	48 89 e5             	mov    %rsp,%rbp
  40600f:	48 83 ec 20          	sub    $0x20,%rsp
  406013:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406017:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40601b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40601f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406023:	e8 e8 31 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(byte *)p1 == *cast(byte *)p2;
  406028:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40602c:	0f b6 10             	movzbl (%rax),%edx
  40602f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406033:	0f b6 00             	movzbl (%rax),%eax
  406036:	38 c2                	cmp    %al,%dl
  406038:	0f 94 c0             	sete   %al
  40603b:	0f b6 c0             	movzbl %al,%eax
    }
  40603e:	c9                   	leaveq 
  40603f:	c3                   	retq   

0000000000406040 <_D3std8typeinfo7ti_void10TypeInfo_v7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  406040:	55                   	push   %rbp
  406041:	48 89 e5             	mov    %rsp,%rbp
  406044:	48 83 ec 20          	sub    $0x20,%rsp
  406048:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40604c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406050:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  406054:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406058:	e8 b3 31 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(byte *)p1 - *cast(byte *)p2;
  40605d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406061:	0f b6 00             	movzbl (%rax),%eax
  406064:	0f be d0             	movsbl %al,%edx
  406067:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40606b:	0f b6 00             	movzbl (%rax),%eax
  40606e:	0f be c0             	movsbl %al,%eax
  406071:	89 d1                	mov    %edx,%ecx
  406073:	29 c1                	sub    %eax,%ecx
  406075:	89 c8                	mov    %ecx,%eax
    }
  406077:	c9                   	leaveq 
  406078:	c3                   	retq   

0000000000406079 <_D3std8typeinfo7ti_void10TypeInfo_v5tsizeMFZm>:

    size_t tsize()
  406079:	55                   	push   %rbp
  40607a:	48 89 e5             	mov    %rsp,%rbp
  40607d:	48 83 ec 10          	sub    $0x10,%rsp
  406081:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406085:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406089:	e8 82 31 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return void.sizeof;
  40608e:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  406093:	c9                   	leaveq 
  406094:	c3                   	retq   

0000000000406095 <_D3std8typeinfo7ti_void10TypeInfo_v4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  406095:	55                   	push   %rbp
  406096:	48 89 e5             	mov    %rsp,%rbp
  406099:	48 83 ec 30          	sub    $0x30,%rsp
  40609d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4060a1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4060a5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4060a9:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4060ad:	e8 5e 31 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	byte t;
  4060b2:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)

	t = *cast(byte *)p1;
  4060b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4060ba:	0f b6 00             	movzbl (%rax),%eax
  4060bd:	88 45 ff             	mov    %al,-0x1(%rbp)
	*cast(byte *)p1 = *cast(byte *)p2;
  4060c0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4060c4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4060c8:	0f b6 00             	movzbl (%rax),%eax
  4060cb:	88 02                	mov    %al,(%rdx)
	*cast(byte *)p2 = t;
  4060cd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4060d1:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  4060d5:	88 02                	mov    %al,(%rdx)
    }
  4060d7:	c9                   	leaveq 
  4060d8:	c3                   	retq   

00000000004060d9 <_D3std8typeinfo7ti_void10TypeInfo_v5flagsMFZk>:

    uint flags()
  4060d9:	55                   	push   %rbp
  4060da:	48 89 e5             	mov    %rsp,%rbp
  4060dd:	48 83 ec 10          	sub    $0x10,%rsp
  4060e1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4060e5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4060e9:	e8 22 31 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  4060ee:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  4060f3:	c9                   	leaveq 
  4060f4:	c3                   	retq   
  4060f5:	90                   	nop    
  4060f6:	90                   	nop    
  4060f7:	90                   	nop    

00000000004060f8 <_D3std8typeinfo8ti_wchar10TypeInfo_u8toStringMFZAa>:
module std.typeinfo.ti_wchar;


class TypeInfo_u : TypeInfo
{
    char[] toString() { return "wchar"; }
  4060f8:	55                   	push   %rbp
  4060f9:	48 89 e5             	mov    %rsp,%rbp
  4060fc:	53                   	push   %rbx
  4060fd:	48 83 ec 08          	sub    $0x8,%rsp
  406101:	48 89 fb             	mov    %rdi,%rbx
  406104:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406108:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40610c:	e8 ff 30 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  406111:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  406118:	48 c7 43 08 00 16 41 	movq   $0x411600,0x8(%rbx)
  40611f:	00 
  406120:	48 89 d8             	mov    %rbx,%rax
  406123:	48 83 c4 08          	add    $0x8,%rsp
  406127:	5b                   	pop    %rbx
  406128:	c9                   	leaveq 
  406129:	c3                   	retq   

000000000040612a <_D3std8typeinfo8ti_wchar10TypeInfo_u7getHashMFPvZm>:

    hash_t getHash(void *p)
  40612a:	55                   	push   %rbp
  40612b:	48 89 e5             	mov    %rsp,%rbp
  40612e:	48 83 ec 10          	sub    $0x10,%rsp
  406132:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406136:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40613a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40613e:	e8 cd 30 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(wchar *)p;
  406143:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406147:	0f b7 00             	movzwl (%rax),%eax
  40614a:	0f b7 c0             	movzwl %ax,%eax
    }
  40614d:	c9                   	leaveq 
  40614e:	c3                   	retq   

000000000040614f <_D3std8typeinfo8ti_wchar10TypeInfo_u6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  40614f:	55                   	push   %rbp
  406150:	48 89 e5             	mov    %rsp,%rbp
  406153:	48 83 ec 20          	sub    $0x20,%rsp
  406157:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40615b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40615f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  406163:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406167:	e8 a4 30 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(wchar *)p1 == *cast(wchar *)p2;
  40616c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406170:	0f b7 10             	movzwl (%rax),%edx
  406173:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406177:	0f b7 00             	movzwl (%rax),%eax
  40617a:	66 39 c2             	cmp    %ax,%dx
  40617d:	0f 94 c0             	sete   %al
  406180:	0f b6 c0             	movzbl %al,%eax
    }
  406183:	c9                   	leaveq 
  406184:	c3                   	retq   

0000000000406185 <_D3std8typeinfo8ti_wchar10TypeInfo_u7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  406185:	55                   	push   %rbp
  406186:	48 89 e5             	mov    %rsp,%rbp
  406189:	48 83 ec 20          	sub    $0x20,%rsp
  40618d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406191:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406195:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  406199:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40619d:	e8 6e 30 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(wchar *)p1 - *cast(wchar *)p2;
  4061a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4061a6:	0f b7 00             	movzwl (%rax),%eax
  4061a9:	0f b7 d0             	movzwl %ax,%edx
  4061ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4061b0:	0f b7 00             	movzwl (%rax),%eax
  4061b3:	0f b7 c0             	movzwl %ax,%eax
  4061b6:	89 d1                	mov    %edx,%ecx
  4061b8:	29 c1                	sub    %eax,%ecx
  4061ba:	89 c8                	mov    %ecx,%eax
    }
  4061bc:	c9                   	leaveq 
  4061bd:	c3                   	retq   

00000000004061be <_D3std8typeinfo8ti_wchar10TypeInfo_u5tsizeMFZm>:

    size_t tsize()
  4061be:	55                   	push   %rbp
  4061bf:	48 89 e5             	mov    %rsp,%rbp
  4061c2:	48 83 ec 10          	sub    $0x10,%rsp
  4061c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4061ca:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4061ce:	e8 3d 30 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return wchar.sizeof;
  4061d3:	b8 02 00 00 00       	mov    $0x2,%eax
    }
  4061d8:	c9                   	leaveq 
  4061d9:	c3                   	retq   

00000000004061da <_D3std8typeinfo8ti_wchar10TypeInfo_u4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  4061da:	55                   	push   %rbp
  4061db:	48 89 e5             	mov    %rsp,%rbp
  4061de:	48 83 ec 30          	sub    $0x30,%rsp
  4061e2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4061e6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4061ea:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4061ee:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4061f2:	e8 19 30 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	wchar t;
  4061f7:	66 c7 45 fe ff ff    	movw   $0xffff,-0x2(%rbp)

	t = *cast(wchar *)p1;
  4061fd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406201:	0f b7 00             	movzwl (%rax),%eax
  406204:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	*cast(wchar *)p1 = *cast(wchar *)p2;
  406208:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40620c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406210:	0f b7 00             	movzwl (%rax),%eax
  406213:	66 89 02             	mov    %ax,(%rdx)
	*cast(wchar *)p2 = t;
  406216:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40621a:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  40621e:	66 89 02             	mov    %ax,(%rdx)
    }
  406221:	c9                   	leaveq 
  406222:	c3                   	retq   

0000000000406223 <_D3std8typeinfo8ti_wchar10TypeInfo_u4initMFZAv>:

    void[] init()
  406223:	55                   	push   %rbp
  406224:	48 89 e5             	mov    %rsp,%rbp
  406227:	53                   	push   %rbx
  406228:	48 83 ec 28          	sub    $0x28,%rsp
  40622c:	48 89 fb             	mov    %rdi,%rbx
  40622f:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  406233:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  406237:	e8 d4 2f 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
    {	static wchar c;

	return (cast(wchar *)&c)[0 .. 1];
  40623c:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  406243:	00 
  406244:	48 c7 45 e8 40 ba 41 	movq   $0x41ba40,-0x18(%rbp)
  40624b:	00 
  40624c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406250:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406254:	49 89 c0             	mov    %rax,%r8
  406257:	ba 02 00 00 00       	mov    $0x2,%edx
  40625c:	be 01 00 00 00       	mov    $0x1,%esi
  406261:	48 89 df             	mov    %rbx,%rdi
  406264:	e8 4a 72 00 00       	callq  40d4b3 <_d_arraycast>
    }
  406269:	48 89 d8             	mov    %rbx,%rax
  40626c:	48 83 c4 28          	add    $0x28,%rsp
  406270:	5b                   	pop    %rbx
  406271:	c9                   	leaveq 
  406272:	c3                   	retq   
  406273:	90                   	nop    

0000000000406274 <_D6object6Object8toStringMFZAa>:
class Object
{
	/**
	 * Convert Object to a human readable string.
	 */
	char[] toString()
  406274:	55                   	push   %rbp
  406275:	48 89 e5             	mov    %rsp,%rbp
  406278:	53                   	push   %rbx
  406279:	48 83 ec 08          	sub    $0x8,%rsp
  40627d:	48 89 fb             	mov    %rdi,%rbx
  406280:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406284:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  406288:	e8 83 2f 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return this.classinfo.name;
  40628d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406291:	48 8b 00             	mov    (%rax),%rax
  406294:	48 8b 10             	mov    (%rax),%rdx
  406297:	48 8b 42 20          	mov    0x20(%rdx),%rax
  40629b:	48 89 03             	mov    %rax,(%rbx)
  40629e:	48 8b 42 28          	mov    0x28(%rdx),%rax
  4062a2:	48 89 43 08          	mov    %rax,0x8(%rbx)
	}
  4062a6:	48 89 d8             	mov    %rbx,%rax
  4062a9:	48 83 c4 08          	add    $0x8,%rsp
  4062ad:	5b                   	pop    %rbx
  4062ae:	c9                   	leaveq 
  4062af:	c3                   	retq   

00000000004062b0 <_D6object6Object6toHashMFZm>:

	/**
	 * Compute hash function for Object.
	 */
	hash_t toHash()
  4062b0:	55                   	push   %rbp
  4062b1:	48 89 e5             	mov    %rsp,%rbp
  4062b4:	48 83 ec 10          	sub    $0x10,%rsp
  4062b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4062bc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4062c0:	e8 4b 2f 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		// BUG: this prevents a compacting GC from working, needs to be fixed
		return cast(uint)cast(void *)this;
  4062c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4062c9:	89 c0                	mov    %eax,%eax
	}
  4062cb:	c9                   	leaveq 
  4062cc:	c3                   	retq   

00000000004062cd <_D6object6Object5opCmpMFC6ObjectZi>:
	 *	$(TR $(TD this &lt; obj) $(TD &lt; 0))
	 *	$(TR $(TD this == obj) $(TD 0))
	 *	$(TR $(TD this &gt; obj) $(TD &gt; 0))
	 *	)
	 */
	int opCmp(Object o)
  4062cd:	55                   	push   %rbp
  4062ce:	48 89 e5             	mov    %rsp,%rbp
  4062d1:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  4062d8:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  4062dc:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  4062e0:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
  4062e4:	e8 27 2f 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		// BUG: this prevents a compacting GC from working, needs to be fixed
		//return cast(int)cast(void *)this - cast(int)cast(void *)o;

		throw new Error("need opCmp for class " ~ this.classinfo.name);
  4062e9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4062ed:	48 8b 00             	mov    (%rax),%rax
  4062f0:	48 8b 10             	mov    (%rax),%rdx
  4062f3:	48 8b 42 20          	mov    0x20(%rdx),%rax
  4062f7:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  4062fb:	48 8b 42 28          	mov    0x28(%rdx),%rax
  4062ff:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  406303:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  406307:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40630b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40630f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  406313:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  406317:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40631b:	48 8b 00             	mov    (%rax),%rax
  40631e:	48 8b 10             	mov    (%rax),%rdx
  406321:	48 8b 42 20          	mov    0x20(%rdx),%rax
  406325:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  406329:	48 8b 42 28          	mov    0x28(%rdx),%rax
  40632d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  406331:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  406335:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  406339:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40633d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  406341:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  406345:	48 c7 45 d0 15 00 00 	movq   $0x15,-0x30(%rbp)
  40634c:	00 
  40634d:	48 c7 45 d8 d0 16 41 	movq   $0x4116d0,-0x28(%rbp)
  406354:	00 
  406355:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406359:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40635d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406361:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  406365:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406369:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40636d:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
  406371:	48 89 34 24          	mov    %rsi,(%rsp)
  406375:	49 89 d1             	mov    %rdx,%r9
  406378:	49 89 c0             	mov    %rax,%r8
  40637b:	ba 02 00 00 00       	mov    $0x2,%edx
  406380:	48 c7 c6 00 fd 40 00 	mov    $0x40fd00,%rsi
  406387:	b8 00 00 00 00       	mov    $0x0,%eax
  40638c:	e8 2e 42 00 00       	callq  40a5bf <_d_arraycatnT>
  406391:	48 c7 c7 00 c5 41 00 	mov    $0x41c500,%rdi
  406398:	e8 2c 3d 00 00       	callq  40a0c9 <_d_newclass>
  40639d:	48 89 c7             	mov    %rax,%rdi
  4063a0:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  4063a4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4063a8:	e8 e4 2d 00 00       	callq  409191 <_D6object5Error5_ctorMFAaZC6object5Error>
  4063ad:	48 89 c7             	mov    %rax,%rdi
  4063b0:	e8 cd 4b 00 00       	callq  40af82 <_d_throw>
	}
  4063b5:	c9                   	leaveq 
  4063b6:	c3                   	retq   

00000000004063b7 <_D6object6Object8opEqualsMFC6ObjectZi>:

	/**
	 * Returns !=0 if this object does have the same contents as obj.
	 */
	int opEquals(Object o)
  4063b7:	55                   	push   %rbp
  4063b8:	48 89 e5             	mov    %rsp,%rbp
  4063bb:	48 83 ec 10          	sub    $0x10,%rsp
  4063bf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4063c3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4063c7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4063cb:	e8 40 2e 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return cast(int)(this is o);
  4063d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4063d4:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  4063d8:	0f 94 c0             	sete   %al
  4063db:	0f b6 c0             	movzbl %al,%eax
	}
  4063de:	c9                   	leaveq 
  4063df:	c3                   	retq   

00000000004063e0 <_D6object9ClassInfo6createMFZC6Object>:
	}*/

	/********************
	 * Create instance of Object represented by 'this'.
	 */
	Object create()
  4063e0:	55                   	push   %rbp
  4063e1:	48 89 e5             	mov    %rsp,%rbp
  4063e4:	48 83 ec 20          	sub    $0x20,%rsp
  4063e8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4063ec:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4063f0:	e8 1b 2e 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		if (flags & 8 && !defaultConstructor)
  4063f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4063f9:	8b 40 68             	mov    0x68(%rax),%eax
  4063fc:	83 e0 08             	and    $0x8,%eax
  4063ff:	85 c0                	test   %eax,%eax
  406401:	74 22                	je     406425 <_D6object9ClassInfo6createMFZC6Object+0x45>
  406403:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406407:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  40640e:	48 85 c0             	test   %rax,%rax
  406411:	0f 95 c0             	setne  %al
  406414:	83 f0 01             	xor    $0x1,%eax
  406417:	84 c0                	test   %al,%al
  406419:	74 0a                	je     406425 <_D6object9ClassInfo6createMFZC6Object+0x45>
			return null;
  40641b:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  406422:	00 
  406423:	eb 44                	jmp    406469 <_D6object9ClassInfo6createMFZC6Object+0x89>
		Object o = _d_newclass(this);
  406425:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  406429:	e8 9b 3c 00 00       	callq  40a0c9 <_d_newclass>
  40642e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (flags & 8 && defaultConstructor)
  406432:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406436:	8b 40 68             	mov    0x68(%rax),%eax
  406439:	83 e0 08             	and    $0x8,%eax
  40643c:	85 c0                	test   %eax,%eax
  40643e:	74 21                	je     406461 <_D6object9ClassInfo6createMFZC6Object+0x81>
  406440:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406444:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  40644b:	48 85 c0             	test   %rax,%rax
  40644e:	74 11                	je     406461 <_D6object9ClassInfo6createMFZC6Object+0x81>
		{
			defaultConstructor(o);
  406450:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406454:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  40645b:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40645f:	ff d0                	callq  *%rax
		}
		return o;
  406461:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406465:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  406469:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
	}
  40646d:	c9                   	leaveq 
  40646e:	c3                   	retq   

000000000040646f <_D6object8TypeInfo6toHashMFZm>:
 * Can be retrieved for any type using a
 * <a href="../expression.html#typeidexpression">TypeidExpression</a>.
 */
class TypeInfo
{
	hash_t toHash()
  40646f:	55                   	push   %rbp
  406470:	48 89 e5             	mov    %rsp,%rbp
  406473:	48 83 ec 40          	sub    $0x40,%rsp
  406477:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40647b:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  40647f:	e8 8c 2d 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{	hash_t hash;
  406484:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40648b:	00 

		foreach (char c; this.toString())
  40648c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406490:	48 8b 00             	mov    (%rax),%rax
  406493:	48 83 c0 08          	add    $0x8,%rax
  406497:	48 8b 00             	mov    (%rax),%rax
  40649a:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40649e:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
  4064a2:	ff d0                	callq  *%rax
  4064a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4064a8:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  4064ac:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4064b0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4064b4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4064b8:	48 03 45 c0          	add    -0x40(%rbp),%rax
  4064bc:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4064c0:	0f 95 c0             	setne  %al
  4064c3:	83 f0 01             	xor    $0x1,%eax
  4064c6:	84 c0                	test   %al,%al
  4064c8:	75 2b                	jne    4064f5 <_D6object8TypeInfo6toHashMFZm+0x86>
  4064ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4064ce:	0f b6 00             	movzbl (%rax),%eax
  4064d1:	88 45 ff             	mov    %al,-0x1(%rbp)
			hash = hash * 9 + c;
  4064d4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4064d8:	48 89 d0             	mov    %rdx,%rax
  4064db:	48 c1 e0 03          	shl    $0x3,%rax
  4064df:	48 8d 14 10          	lea    (%rax,%rdx,1),%rdx
  4064e3:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  4064e7:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4064eb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4064ef:	48 ff 45 f0          	incq   -0x10(%rbp)
  4064f3:	eb bf                	jmp    4064b4 <_D6object8TypeInfo6toHashMFZm+0x45>
		return hash;
  4064f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  4064f9:	c9                   	leaveq 
  4064fa:	c3                   	retq   

00000000004064fb <_D6object8TypeInfo5opCmpMFC6ObjectZi>:

	int opCmp(Object o)
  4064fb:	55                   	push   %rbp
  4064fc:	48 89 e5             	mov    %rsp,%rbp
  4064ff:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  406506:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  40650a:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  40650e:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  406512:	e8 f9 2c 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		if (this is o)
  406517:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40651b:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
  40651f:	75 0f                	jne    406530 <_D6object8TypeInfo5opCmpMFC6ObjectZi+0x35>
			return 0;
  406521:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%rbp)
  406528:	00 00 00 
  40652b:	e9 d6 00 00 00       	jmpq   406606 <_D6object8TypeInfo5opCmpMFC6ObjectZi+0x10b>
		TypeInfo ti = cast(TypeInfo)o;
  406530:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  406534:	48 c7 c6 40 bc 41 00 	mov    $0x41bc40,%rsi
  40653b:	e8 13 2f 00 00       	callq  409453 <_d_dynamic_cast>
  406540:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (ti is null)
  406544:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  406549:	75 0f                	jne    40655a <_D6object8TypeInfo5opCmpMFC6ObjectZi+0x5f>
			return 1;
  40654b:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%rbp)
  406552:	00 00 00 
  406555:	e9 ac 00 00 00       	jmpq   406606 <_D6object8TypeInfo5opCmpMFC6ObjectZi+0x10b>
			
		char[] t = this.toString();
  40655a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40655e:	48 8b 00             	mov    (%rax),%rax
  406561:	48 83 c0 08          	add    $0x8,%rax
  406565:	48 8b 00             	mov    (%rax),%rax
  406568:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  40656c:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  406570:	ff d0                	callq  *%rax
  406572:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  406576:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40657a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40657e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		char[] other = this.toString();
  406582:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  406586:	48 8b 00             	mov    (%rax),%rax
  406589:	48 83 c0 08          	add    $0x8,%rax
  40658d:	48 8b 00             	mov    (%rax),%rax
  406590:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  406594:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  406598:	ff d0                	callq  *%rax
  40659a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40659e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  4065a2:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4065a6:	48 89 45 c8          	mov    %rax,-0x38(%rbp)

		typeid(typeof(this.toString())).compare(&t, &other);
  4065aa:	48 8b 05 4f 97 00 00 	mov    0x974f(%rip),%rax        # 40fd00 <_D11TypeInfo_Aa6__initZ>
  4065b1:	48 83 c0 38          	add    $0x38,%rax
  4065b5:	48 8b 00             	mov    (%rax),%rax
  4065b8:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  4065bc:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
  4065c0:	48 c7 c7 00 fd 40 00 	mov    $0x40fd00,%rdi
  4065c7:	ff d0                	callq  *%rax
  4065c9:	48 c7 45 d0 08 00 00 	movq   $0x8,-0x30(%rbp)
  4065d0:	00 
  4065d1:	48 c7 45 d8 80 18 41 	movq   $0x411880,-0x28(%rbp)
  4065d8:	00 
  4065d9:	48 c7 45 e0 19 00 00 	movq   $0x19,-0x20(%rbp)
  4065e0:	00 
  4065e1:	48 c7 45 e8 89 18 41 	movq   $0x411889,-0x18(%rbp)
  4065e8:	00 
  4065e9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4065ed:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  4065f1:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  4065f5:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4065f9:	41 b8 60 01 00 00    	mov    $0x160,%r8d
  4065ff:	e8 8d 46 00 00       	callq  40ac91 <_d_assert_msg>
	}
  406604:	eb 0c                	jmp    406612 <_D6object8TypeInfo5opCmpMFC6ObjectZi+0x117>
  406606:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  40660c:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  406612:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
  406618:	c9                   	leaveq 
  406619:	c3                   	retq   

000000000040661a <_D6object8TypeInfo8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  40661a:	55                   	push   %rbp
  40661b:	48 89 e5             	mov    %rsp,%rbp
  40661e:	53                   	push   %rbx
  40661f:	48 83 ec 68          	sub    $0x68,%rsp
  406623:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  406627:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  40662b:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  40662f:	e8 dc 2b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		/* TypeInfo instances are singletons, but duplicates can exist
		 * across DLL's. Therefore, comparing for a name match is
		 * sufficient.
		 */
		if (this is o)
  406634:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406638:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  40663c:	75 0c                	jne    40664a <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0x30>
			return 1;
  40663e:	c7 45 a8 01 00 00 00 	movl   $0x1,-0x58(%rbp)
  406645:	e9 af 00 00 00       	jmpq   4066f9 <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0xdf>
		TypeInfo ti = cast(TypeInfo)o;
  40664a:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  40664e:	48 c7 c6 40 bc 41 00 	mov    $0x41bc40,%rsi
  406655:	e8 f9 2d 00 00       	callq  409453 <_d_dynamic_cast>
  40665a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		return cast(int)(ti && this.toString() == ti.toString());
  40665e:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  406663:	0f 84 85 00 00 00    	je     4066ee <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0xd4>
  406669:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40666d:	48 8b 00             	mov    (%rax),%rax
  406670:	48 83 c0 08          	add    $0x8,%rax
  406674:	48 8b 00             	mov    (%rax),%rax
  406677:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40667b:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
  40667f:	ff d0                	callq  *%rax
  406681:	48 8b 5d c0          	mov    -0x40(%rbp),%rbx
  406685:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406689:	48 8b 00             	mov    (%rax),%rax
  40668c:	48 83 c0 08          	add    $0x8,%rax
  406690:	48 8b 00             	mov    (%rax),%rax
  406693:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  406697:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
  40669b:	ff d0                	callq  *%rax
  40669d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4066a1:	48 39 c3             	cmp    %rax,%rbx
  4066a4:	75 48                	jne    4066ee <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0xd4>
  4066a6:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  4066aa:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4066ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4066b2:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  4066b6:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  4066ba:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  4066be:	fc                   	cld    
  4066bf:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4066c3:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
  4066c7:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  4066cb:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  4066cf:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  4066d3:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  4066d5:	0f 97 c2             	seta   %dl
  4066d8:	0f 92 c0             	setb   %al
  4066db:	89 d1                	mov    %edx,%ecx
  4066dd:	28 c1                	sub    %al,%cl
  4066df:	89 c8                	mov    %ecx,%eax
  4066e1:	0f be c0             	movsbl %al,%eax
  4066e4:	85 c0                	test   %eax,%eax
  4066e6:	75 06                	jne    4066ee <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0xd4>
  4066e8:	c6 45 af 01          	movb   $0x1,-0x51(%rbp)
  4066ec:	eb 04                	jmp    4066f2 <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0xd8>
  4066ee:	c6 45 af 00          	movb   $0x0,-0x51(%rbp)
  4066f2:	0f b6 75 af          	movzbl -0x51(%rbp),%esi
  4066f6:	89 75 a8             	mov    %esi,-0x58(%rbp)
  4066f9:	8b 45 a8             	mov    -0x58(%rbp),%eax
	}
  4066fc:	48 83 c4 68          	add    $0x68,%rsp
  406700:	5b                   	pop    %rbx
  406701:	c9                   	leaveq 
  406702:	c3                   	retq   

0000000000406703 <_D6object8TypeInfo7getHashMFPvZm>:

	/// Returns a hash of the instance of a type.
	hash_t getHash(void *p) { return cast(uint)p; }
  406703:	55                   	push   %rbp
  406704:	48 89 e5             	mov    %rsp,%rbp
  406707:	48 83 ec 10          	sub    $0x10,%rsp
  40670b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40670f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406713:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406717:	e8 f4 2a 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  40671c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406720:	89 c0                	mov    %eax,%eax
  406722:	c9                   	leaveq 
  406723:	c3                   	retq   

0000000000406724 <_D6object8TypeInfo6equalsMFPvPvZi>:

	/// Compares two instances for equality.
	int equals(void *p1, void *p2) { return cast(int)(p1 == p2); }
  406724:	55                   	push   %rbp
  406725:	48 89 e5             	mov    %rsp,%rbp
  406728:	48 83 ec 20          	sub    $0x20,%rsp
  40672c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406730:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406734:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  406738:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40673c:	e8 cf 2a 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  406741:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406745:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  406749:	0f 94 c0             	sete   %al
  40674c:	0f b6 c0             	movzbl %al,%eax
  40674f:	c9                   	leaveq 
  406750:	c3                   	retq   

0000000000406751 <_D6object8TypeInfo7compareMFPvPvZi>:

	/// Compares two instances for &lt;, ==, or &gt;.
	int compare(void *p1, void *p2) { return 0; }
  406751:	55                   	push   %rbp
  406752:	48 89 e5             	mov    %rsp,%rbp
  406755:	48 83 ec 20          	sub    $0x20,%rsp
  406759:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40675d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406761:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  406765:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406769:	e8 a2 2a 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  40676e:	b8 00 00 00 00       	mov    $0x0,%eax
  406773:	c9                   	leaveq 
  406774:	c3                   	retq   

0000000000406775 <_D6object8TypeInfo5tsizeMFZm>:

	/// Returns size of the type.
	size_t tsize() { return 0; }
  406775:	55                   	push   %rbp
  406776:	48 89 e5             	mov    %rsp,%rbp
  406779:	48 83 ec 10          	sub    $0x10,%rsp
  40677d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406781:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406785:	e8 86 2a 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  40678a:	b8 00 00 00 00       	mov    $0x0,%eax
  40678f:	c9                   	leaveq 
  406790:	c3                   	retq   

0000000000406791 <_D6object8TypeInfo4swapMFPvPvZv>:

	/// Swaps two instances of the type.
	void swap(void *p1, void *p2)
  406791:	55                   	push   %rbp
  406792:	48 89 e5             	mov    %rsp,%rbp
  406795:	48 83 ec 40          	sub    $0x40,%rsp
  406799:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40679d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4067a1:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4067a5:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4067a9:	e8 62 2a 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		size_t n = tsize();
  4067ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4067b2:	48 8b 00             	mov    (%rax),%rax
  4067b5:	48 83 c0 40          	add    $0x40,%rax
  4067b9:	48 8b 00             	mov    (%rax),%rax
  4067bc:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4067c0:	ff d0                	callq  *%rax
  4067c2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		for (size_t i = 0; i < n; i++)
  4067c6:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4067cd:	00 
  4067ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4067d2:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4067d6:	0f 92 c0             	setb   %al
  4067d9:	83 f0 01             	xor    $0x1,%eax
  4067dc:	84 c0                	test   %al,%al
  4067de:	75 4a                	jne    40682a <_D6object8TypeInfo4swapMFPvPvZv+0x99>
		{	byte t;
  4067e0:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)

			t = (cast(byte *)p1)[i];
  4067e4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4067e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4067ec:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4067f0:	0f b6 00             	movzbl (%rax),%eax
  4067f3:	88 45 ff             	mov    %al,-0x1(%rbp)
			(cast(byte *)p1)[i] = (cast(byte *)p2)[i];
  4067f6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4067fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4067fe:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  406802:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  406806:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40680a:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40680e:	0f b6 00             	movzbl (%rax),%eax
  406811:	88 01                	mov    %al,(%rcx)
			(cast(byte *)p2)[i] = t;
  406813:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  406817:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40681b:	48 01 c2             	add    %rax,%rdx
  40681e:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  406822:	88 02                	mov    %al,(%rdx)
  406824:	48 ff 45 f0          	incq   -0x10(%rbp)
  406828:	eb a4                	jmp    4067ce <_D6object8TypeInfo4swapMFPvPvZv+0x3d>
		}
	}
  40682a:	c9                   	leaveq 
  40682b:	c3                   	retq   

000000000040682c <_D6object8TypeInfo4nextMFZC8TypeInfo>:

	/// Get TypeInfo for 'next' type, as defined by what kind of type this is,
	/// null if none.
	TypeInfo next() { return null; }
  40682c:	55                   	push   %rbp
  40682d:	48 89 e5             	mov    %rsp,%rbp
  406830:	48 83 ec 10          	sub    $0x10,%rsp
  406834:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406838:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40683c:	e8 cf 29 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  406841:	b8 00 00 00 00       	mov    $0x0,%eax
  406846:	c9                   	leaveq 
  406847:	c3                   	retq   

0000000000406848 <_D6object8TypeInfo4initMFZAv>:

	/// Return default initializer, null if default initialize to 0
	void[] init() { return null; }
  406848:	55                   	push   %rbp
  406849:	48 89 e5             	mov    %rsp,%rbp
  40684c:	53                   	push   %rbx
  40684d:	48 83 ec 08          	sub    $0x8,%rsp
  406851:	48 89 fb             	mov    %rdi,%rbx
  406854:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406858:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40685c:	e8 af 29 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  406861:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  406868:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  40686f:	00 
  406870:	48 89 d8             	mov    %rbx,%rax
  406873:	48 83 c4 08          	add    $0x8,%rsp
  406877:	5b                   	pop    %rbx
  406878:	c9                   	leaveq 
  406879:	c3                   	retq   

000000000040687a <_D6object8TypeInfo5flagsMFZk>:

	/// Get flags for type: 1 means GC should scan for pointers
	uint flags() { return 0; }
  40687a:	55                   	push   %rbp
  40687b:	48 89 e5             	mov    %rsp,%rbp
  40687e:	48 83 ec 10          	sub    $0x10,%rsp
  406882:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406886:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40688a:	e8 81 29 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  40688f:	b8 00 00 00 00       	mov    $0x0,%eax
  406894:	c9                   	leaveq 
  406895:	c3                   	retq   

0000000000406896 <_D6object8TypeInfo5offTiMFZAS6object14OffsetTypeInfo>:

	/// Get type information on the contents of the type; null if not available
	OffsetTypeInfo[] offTi() { return null; }
  406896:	55                   	push   %rbp
  406897:	48 89 e5             	mov    %rsp,%rbp
  40689a:	53                   	push   %rbx
  40689b:	48 83 ec 08          	sub    $0x8,%rsp
  40689f:	48 89 fb             	mov    %rdi,%rbx
  4068a2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4068a6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4068aa:	e8 61 29 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  4068af:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  4068b6:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  4068bd:	00 
  4068be:	48 89 d8             	mov    %rbx,%rax
  4068c1:	48 83 c4 08          	add    $0x8,%rsp
  4068c5:	5b                   	pop    %rbx
  4068c6:	c9                   	leaveq 
  4068c7:	c3                   	retq   

00000000004068c8 <_D6object16TypeInfo_Typedef8toStringMFZAa>:
}

class TypeInfo_Typedef : TypeInfo
{
	char[] toString() { return name; }
  4068c8:	55                   	push   %rbp
  4068c9:	48 89 e5             	mov    %rsp,%rbp
  4068cc:	53                   	push   %rbx
  4068cd:	48 83 ec 08          	sub    $0x8,%rsp
  4068d1:	48 89 fb             	mov    %rdi,%rbx
  4068d4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4068d8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4068dc:	e8 2f 29 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  4068e1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4068e5:	48 8b 42 18          	mov    0x18(%rdx),%rax
  4068e9:	48 89 03             	mov    %rax,(%rbx)
  4068ec:	48 8b 42 20          	mov    0x20(%rdx),%rax
  4068f0:	48 89 43 08          	mov    %rax,0x8(%rbx)
  4068f4:	48 89 d8             	mov    %rbx,%rax
  4068f7:	48 83 c4 08          	add    $0x8,%rsp
  4068fb:	5b                   	pop    %rbx
  4068fc:	c9                   	leaveq 
  4068fd:	c3                   	retq   

00000000004068fe <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  4068fe:	55                   	push   %rbp
  4068ff:	48 89 e5             	mov    %rsp,%rbp
  406902:	48 83 ec 40          	sub    $0x40,%rsp
  406906:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40690a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40690e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  406912:	e8 f9 28 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Typedef c;
  406917:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40691e:	00 

		return cast(int)
  40691f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406923:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  406927:	0f 84 ad 00 00 00    	je     4069da <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xdc>
  40692d:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  406931:	48 c7 c6 e0 bc 41 00 	mov    $0x41bce0,%rsi
  406938:	e8 16 2b 00 00       	callq  409453 <_d_dynamic_cast>
  40693d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  406941:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  406946:	0f 84 94 00 00 00    	je     4069e0 <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xe2>
  40694c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406950:	48 8b 50 18          	mov    0x18(%rax),%rdx
  406954:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406958:	48 8b 40 18          	mov    0x18(%rax),%rax
  40695c:	48 39 c2             	cmp    %rax,%rdx
  40695f:	75 7f                	jne    4069e0 <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xe2>
  406961:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406965:	48 8b 48 18          	mov    0x18(%rax),%rcx
  406969:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40696d:	48 8b 50 20          	mov    0x20(%rax),%rdx
  406971:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406975:	48 8b 40 20          	mov    0x20(%rax),%rax
  406979:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40697d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  406981:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  406985:	fc                   	cld    
  406986:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40698a:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  40698e:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  406992:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  406996:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  40699a:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  40699c:	0f 97 c2             	seta   %dl
  40699f:	0f 92 c0             	setb   %al
  4069a2:	89 d1                	mov    %edx,%ecx
  4069a4:	28 c1                	sub    %al,%cl
  4069a6:	89 c8                	mov    %ecx,%eax
  4069a8:	0f be c0             	movsbl %al,%eax
  4069ab:	85 c0                	test   %eax,%eax
  4069ad:	75 31                	jne    4069e0 <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xe2>
  4069af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4069b3:	48 8b 40 10          	mov    0x10(%rax),%rax
  4069b7:	48 8b 00             	mov    (%rax),%rax
  4069ba:	48 83 c0 20          	add    $0x20,%rax
  4069be:	48 8b 10             	mov    (%rax),%rdx
  4069c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4069c5:	48 8b 40 10          	mov    0x10(%rax),%rax
  4069c9:	48 89 c6             	mov    %rax,%rsi
  4069cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4069d0:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4069d4:	ff d2                	callq  *%rdx
  4069d6:	85 c0                	test   %eax,%eax
  4069d8:	74 06                	je     4069e0 <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xe2>
  4069da:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  4069de:	eb 04                	jmp    4069e4 <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xe6>
  4069e0:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  4069e4:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				(this is o ||
				((c = cast(TypeInfo_Typedef)o) !is null &&
				 this.name == c.name &&
				 this.base == c.base));
	}
  4069e8:	c9                   	leaveq 
  4069e9:	c3                   	retq   

00000000004069ea <_D6object16TypeInfo_Typedef7getHashMFPvZm>:

	hash_t getHash(void *p) { return base.getHash(p); }
  4069ea:	55                   	push   %rbp
  4069eb:	48 89 e5             	mov    %rsp,%rbp
  4069ee:	48 83 ec 10          	sub    $0x10,%rsp
  4069f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4069f6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4069fa:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4069fe:	e8 0d 28 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  406a03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406a07:	48 8b 40 10          	mov    0x10(%rax),%rax
  406a0b:	48 8b 00             	mov    (%rax),%rax
  406a0e:	48 83 c0 28          	add    $0x28,%rax
  406a12:	48 8b 10             	mov    (%rax),%rdx
  406a15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406a19:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406a1d:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  406a21:	ff d2                	callq  *%rdx
  406a23:	c9                   	leaveq 
  406a24:	c3                   	retq   

0000000000406a25 <_D6object16TypeInfo_Typedef6equalsMFPvPvZi>:
	int equals(void *p1, void *p2) { return base.equals(p1, p2); }
  406a25:	55                   	push   %rbp
  406a26:	48 89 e5             	mov    %rsp,%rbp
  406a29:	48 83 ec 20          	sub    $0x20,%rsp
  406a2d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406a31:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406a35:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  406a39:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406a3d:	e8 ce 27 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  406a42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406a46:	48 8b 40 10          	mov    0x10(%rax),%rax
  406a4a:	48 8b 00             	mov    (%rax),%rax
  406a4d:	48 83 c0 30          	add    $0x30,%rax
  406a51:	48 8b 08             	mov    (%rax),%rcx
  406a54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406a58:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406a5c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406a60:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  406a64:	ff d1                	callq  *%rcx
  406a66:	c9                   	leaveq 
  406a67:	c3                   	retq   

0000000000406a68 <_D6object16TypeInfo_Typedef7compareMFPvPvZi>:
	int compare(void *p1, void *p2) { return base.compare(p1, p2); }
  406a68:	55                   	push   %rbp
  406a69:	48 89 e5             	mov    %rsp,%rbp
  406a6c:	48 83 ec 20          	sub    $0x20,%rsp
  406a70:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406a74:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406a78:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  406a7c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406a80:	e8 8b 27 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  406a85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406a89:	48 8b 40 10          	mov    0x10(%rax),%rax
  406a8d:	48 8b 00             	mov    (%rax),%rax
  406a90:	48 83 c0 38          	add    $0x38,%rax
  406a94:	48 8b 08             	mov    (%rax),%rcx
  406a97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406a9b:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406a9f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406aa3:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  406aa7:	ff d1                	callq  *%rcx
  406aa9:	c9                   	leaveq 
  406aaa:	c3                   	retq   

0000000000406aab <_D6object16TypeInfo_Typedef5tsizeMFZm>:
	size_t tsize() { return base.tsize(); }
  406aab:	55                   	push   %rbp
  406aac:	48 89 e5             	mov    %rsp,%rbp
  406aaf:	48 83 ec 10          	sub    $0x10,%rsp
  406ab3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406ab7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406abb:	e8 50 27 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  406ac0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406ac4:	48 8b 40 10          	mov    0x10(%rax),%rax
  406ac8:	48 8b 00             	mov    (%rax),%rax
  406acb:	48 83 c0 40          	add    $0x40,%rax
  406acf:	48 8b 10             	mov    (%rax),%rdx
  406ad2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406ad6:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406ada:	ff d2                	callq  *%rdx
  406adc:	c9                   	leaveq 
  406add:	c3                   	retq   

0000000000406ade <_D6object16TypeInfo_Typedef4swapMFPvPvZv>:
	void swap(void *p1, void *p2) { return base.swap(p1, p2); }
  406ade:	55                   	push   %rbp
  406adf:	48 89 e5             	mov    %rsp,%rbp
  406ae2:	48 83 ec 20          	sub    $0x20,%rsp
  406ae6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406aea:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406aee:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  406af2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406af6:	e8 15 27 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  406afb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406aff:	48 8b 40 10          	mov    0x10(%rax),%rax
  406b03:	48 8b 00             	mov    (%rax),%rax
  406b06:	48 83 c0 48          	add    $0x48,%rax
  406b0a:	48 8b 08             	mov    (%rax),%rcx
  406b0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406b11:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406b15:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406b19:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  406b1d:	ff d1                	callq  *%rcx
  406b1f:	c9                   	leaveq 
  406b20:	c3                   	retq   

0000000000406b21 <_D6object16TypeInfo_Typedef4nextMFZC8TypeInfo>:

	TypeInfo next() { return base.next(); }
  406b21:	55                   	push   %rbp
  406b22:	48 89 e5             	mov    %rsp,%rbp
  406b25:	48 83 ec 10          	sub    $0x10,%rsp
  406b29:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406b2d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406b31:	e8 da 26 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  406b36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406b3a:	48 8b 40 10          	mov    0x10(%rax),%rax
  406b3e:	48 8b 00             	mov    (%rax),%rax
  406b41:	48 83 c0 50          	add    $0x50,%rax
  406b45:	48 8b 10             	mov    (%rax),%rdx
  406b48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406b4c:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406b50:	ff d2                	callq  *%rdx
  406b52:	c9                   	leaveq 
  406b53:	c3                   	retq   

0000000000406b54 <_D6object16TypeInfo_Typedef5flagsMFZk>:
	uint flags() { return base.flags(); }
  406b54:	55                   	push   %rbp
  406b55:	48 89 e5             	mov    %rsp,%rbp
  406b58:	48 83 ec 10          	sub    $0x10,%rsp
  406b5c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406b60:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406b64:	e8 a7 26 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  406b69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406b6d:	48 8b 40 10          	mov    0x10(%rax),%rax
  406b71:	48 8b 00             	mov    (%rax),%rax
  406b74:	48 83 c0 60          	add    $0x60,%rax
  406b78:	48 8b 10             	mov    (%rax),%rdx
  406b7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406b7f:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406b83:	ff d2                	callq  *%rdx
  406b85:	c9                   	leaveq 
  406b86:	c3                   	retq   

0000000000406b87 <_D6object16TypeInfo_Typedef4initMFZAv>:
	void[] init() { return m_init.length ? m_init : base.init(); }
  406b87:	55                   	push   %rbp
  406b88:	48 89 e5             	mov    %rsp,%rbp
  406b8b:	48 83 ec 10          	sub    $0x10,%rsp
  406b8f:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  406b93:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
  406b97:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406b9b:	e8 70 26 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  406ba0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406ba4:	48 8b 40 28          	mov    0x28(%rax),%rax
  406ba8:	48 85 c0             	test   %rax,%rax
  406bab:	74 1d                	je     406bca <_D6object16TypeInfo_Typedef4initMFZAv+0x43>
  406bad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406bb1:	48 8b 50 28          	mov    0x28(%rax),%rdx
  406bb5:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  406bb9:	48 89 11             	mov    %rdx,(%rcx)
  406bbc:	48 8b 40 30          	mov    0x30(%rax),%rax
  406bc0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  406bc4:	48 89 42 08          	mov    %rax,0x8(%rdx)
  406bc8:	eb 20                	jmp    406bea <_D6object16TypeInfo_Typedef4initMFZAv+0x63>
  406bca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406bce:	48 8b 40 10          	mov    0x10(%rax),%rax
  406bd2:	48 8b 00             	mov    (%rax),%rax
  406bd5:	48 83 c0 58          	add    $0x58,%rax
  406bd9:	48 8b 10             	mov    (%rax),%rdx
  406bdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406be0:	48 8b 70 10          	mov    0x10(%rax),%rsi
  406be4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  406be8:	ff d2                	callq  *%rdx
  406bea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406bee:	c9                   	leaveq 
  406bef:	c3                   	retq   

0000000000406bf0 <_D6object16TypeInfo_Pointer8toStringMFZAa>:
{
}

class TypeInfo_Pointer : TypeInfo
{
	char[] toString() { return m_next.toString() ~ "*"; }
  406bf0:	55                   	push   %rbp
  406bf1:	48 89 e5             	mov    %rsp,%rbp
  406bf4:	41 55                	push   %r13
  406bf6:	41 54                	push   %r12
  406bf8:	53                   	push   %rbx
  406bf9:	48 83 ec 78          	sub    $0x78,%rsp
  406bfd:	48 89 fb             	mov    %rdi,%rbx
  406c00:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
  406c04:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  406c08:	e8 03 26 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  406c0d:	48 c7 45 a0 01 00 00 	movq   $0x1,-0x60(%rbp)
  406c14:	00 
  406c15:	48 c7 45 a8 10 1b 41 	movq   $0x411b10,-0x58(%rbp)
  406c1c:	00 
  406c1d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  406c21:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  406c25:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  406c29:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  406c2d:	4c 8b 65 b8          	mov    -0x48(%rbp),%r12
  406c31:	4c 8b 6d b0          	mov    -0x50(%rbp),%r13
  406c35:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  406c39:	48 8b 40 10          	mov    0x10(%rax),%rax
  406c3d:	48 8b 00             	mov    (%rax),%rax
  406c40:	48 83 c0 08          	add    $0x8,%rax
  406c44:	48 8b 10             	mov    (%rax),%rdx
  406c47:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  406c4b:	48 8b 70 10          	mov    0x10(%rax),%rsi
  406c4f:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  406c53:	ff d2                	callq  *%rdx
  406c55:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  406c59:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  406c5d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  406c61:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  406c65:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  406c69:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  406c6d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406c71:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  406c75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406c79:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  406c7d:	4c 89 24 24          	mov    %r12,(%rsp)
  406c81:	4d 89 e9             	mov    %r13,%r9
  406c84:	49 89 c0             	mov    %rax,%r8
  406c87:	ba 02 00 00 00       	mov    $0x2,%edx
  406c8c:	48 c7 c6 00 fd 40 00 	mov    $0x40fd00,%rsi
  406c93:	48 89 df             	mov    %rbx,%rdi
  406c96:	b8 00 00 00 00       	mov    $0x0,%eax
  406c9b:	e8 1f 39 00 00       	callq  40a5bf <_d_arraycatnT>
  406ca0:	48 89 d8             	mov    %rbx,%rax
  406ca3:	48 83 c4 78          	add    $0x78,%rsp
  406ca7:	5b                   	pop    %rbx
  406ca8:	41 5c                	pop    %r12
  406caa:	41 5d                	pop    %r13
  406cac:	c9                   	leaveq 
  406cad:	c3                   	retq   

0000000000406cae <_D6object16TypeInfo_Pointer8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  406cae:	55                   	push   %rbp
  406caf:	48 89 e5             	mov    %rsp,%rbp
  406cb2:	48 83 ec 30          	sub    $0x30,%rsp
  406cb6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406cba:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  406cbe:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  406cc2:	e8 49 25 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Pointer c;
  406cc7:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  406cce:	00 

		return this is o ||
  406ccf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406cd3:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  406cd7:	74 46                	je     406d1f <_D6object16TypeInfo_Pointer8opEqualsMFC6ObjectZi+0x71>
  406cd9:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  406cdd:	48 c7 c6 20 be 41 00 	mov    $0x41be20,%rsi
  406ce4:	e8 6a 27 00 00       	callq  409453 <_d_dynamic_cast>
  406ce9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  406ced:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  406cf2:	74 31                	je     406d25 <_D6object16TypeInfo_Pointer8opEqualsMFC6ObjectZi+0x77>
  406cf4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406cf8:	48 8b 40 10          	mov    0x10(%rax),%rax
  406cfc:	48 8b 00             	mov    (%rax),%rax
  406cff:	48 83 c0 20          	add    $0x20,%rax
  406d03:	48 8b 10             	mov    (%rax),%rdx
  406d06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406d0a:	48 8b 40 10          	mov    0x10(%rax),%rax
  406d0e:	48 89 c6             	mov    %rax,%rsi
  406d11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406d15:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406d19:	ff d2                	callq  *%rdx
  406d1b:	85 c0                	test   %eax,%eax
  406d1d:	74 06                	je     406d25 <_D6object16TypeInfo_Pointer8opEqualsMFC6ObjectZi+0x77>
  406d1f:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  406d23:	eb 04                	jmp    406d29 <_D6object16TypeInfo_Pointer8opEqualsMFC6ObjectZi+0x7b>
  406d25:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  406d29:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_Pointer)o) !is null &&
				 this.m_next == c.m_next);
	}
  406d2d:	c9                   	leaveq 
  406d2e:	c3                   	retq   

0000000000406d2f <_D6object16TypeInfo_Pointer7getHashMFPvZm>:

	hash_t getHash(void *p)
  406d2f:	55                   	push   %rbp
  406d30:	48 89 e5             	mov    %rsp,%rbp
  406d33:	48 83 ec 10          	sub    $0x10,%rsp
  406d37:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406d3b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406d3f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406d43:	e8 c8 24 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return cast(uint)*cast(void* *)p;
  406d48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406d4c:	48 8b 00             	mov    (%rax),%rax
  406d4f:	89 c0                	mov    %eax,%eax
	}
  406d51:	c9                   	leaveq 
  406d52:	c3                   	retq   

0000000000406d53 <_D6object16TypeInfo_Pointer6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  406d53:	55                   	push   %rbp
  406d54:	48 89 e5             	mov    %rsp,%rbp
  406d57:	48 83 ec 20          	sub    $0x20,%rsp
  406d5b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406d5f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406d63:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  406d67:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406d6b:	e8 a0 24 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return cast(int)(*cast(void* *)p1 == *cast(void* *)p2);
  406d70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406d74:	48 8b 10             	mov    (%rax),%rdx
  406d77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406d7b:	48 8b 00             	mov    (%rax),%rax
  406d7e:	48 39 c2             	cmp    %rax,%rdx
  406d81:	0f 94 c0             	sete   %al
  406d84:	0f b6 c0             	movzbl %al,%eax
	}
  406d87:	c9                   	leaveq 
  406d88:	c3                   	retq   

0000000000406d89 <_D6object16TypeInfo_Pointer7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  406d89:	55                   	push   %rbp
  406d8a:	48 89 e5             	mov    %rsp,%rbp
  406d8d:	48 83 ec 20          	sub    $0x20,%rsp
  406d91:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406d95:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406d99:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  406d9d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406da1:	e8 6a 24 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		if (*cast(void* *)p1 < *cast(void* *)p2)
  406da6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406daa:	48 8b 10             	mov    (%rax),%rdx
  406dad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406db1:	48 8b 00             	mov    (%rax),%rax
  406db4:	48 39 c2             	cmp    %rax,%rdx
  406db7:	73 09                	jae    406dc2 <_D6object16TypeInfo_Pointer7compareMFPvPvZi+0x39>
			return -1;
  406db9:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  406dc0:	eb 23                	jmp    406de5 <_D6object16TypeInfo_Pointer7compareMFPvPvZi+0x5c>
		else if (*cast(void* *)p1 > *cast(void* *)p2)
  406dc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406dc6:	48 8b 10             	mov    (%rax),%rdx
  406dc9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406dcd:	48 8b 00             	mov    (%rax),%rax
  406dd0:	48 39 c2             	cmp    %rax,%rdx
  406dd3:	76 09                	jbe    406dde <_D6object16TypeInfo_Pointer7compareMFPvPvZi+0x55>
			return 1;
  406dd5:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  406ddc:	eb 07                	jmp    406de5 <_D6object16TypeInfo_Pointer7compareMFPvPvZi+0x5c>
		else
			return 0;
  406dde:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  406de5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
	}
  406de8:	c9                   	leaveq 
  406de9:	c3                   	retq   

0000000000406dea <_D6object16TypeInfo_Pointer5tsizeMFZm>:

	size_t tsize()
  406dea:	55                   	push   %rbp
  406deb:	48 89 e5             	mov    %rsp,%rbp
  406dee:	48 83 ec 10          	sub    $0x10,%rsp
  406df2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406df6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406dfa:	e8 11 24 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return (void*).sizeof;
  406dff:	b8 08 00 00 00       	mov    $0x8,%eax
	}
  406e04:	c9                   	leaveq 
  406e05:	c3                   	retq   

0000000000406e06 <_D6object16TypeInfo_Pointer4swapMFPvPvZv>:

	void swap(void *p1, void *p2)
  406e06:	55                   	push   %rbp
  406e07:	48 89 e5             	mov    %rsp,%rbp
  406e0a:	48 83 ec 30          	sub    $0x30,%rsp
  406e0e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406e12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  406e16:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  406e1a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  406e1e:	e8 ed 23 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{	void* tmp;
  406e23:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  406e2a:	00 
		tmp = *cast(void**)p1;
  406e2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406e2f:	48 8b 00             	mov    (%rax),%rax
  406e32:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		*cast(void**)p1 = *cast(void**)p2;
  406e36:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  406e3a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406e3e:	48 8b 00             	mov    (%rax),%rax
  406e41:	48 89 02             	mov    %rax,(%rdx)
		*cast(void**)p2 = tmp;
  406e44:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  406e48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406e4c:	48 89 02             	mov    %rax,(%rdx)
	}
  406e4f:	c9                   	leaveq 
  406e50:	c3                   	retq   

0000000000406e51 <_D6object16TypeInfo_Pointer4nextMFZC8TypeInfo>:

	TypeInfo next() { return m_next; }
  406e51:	55                   	push   %rbp
  406e52:	48 89 e5             	mov    %rsp,%rbp
  406e55:	48 83 ec 10          	sub    $0x10,%rsp
  406e59:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406e5d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406e61:	e8 aa 23 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  406e66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406e6a:	48 8b 40 10          	mov    0x10(%rax),%rax
  406e6e:	c9                   	leaveq 
  406e6f:	c3                   	retq   

0000000000406e70 <_D6object16TypeInfo_Pointer5flagsMFZk>:
	uint flags() { return 1; }
  406e70:	55                   	push   %rbp
  406e71:	48 89 e5             	mov    %rsp,%rbp
  406e74:	48 83 ec 10          	sub    $0x10,%rsp
  406e78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406e7c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406e80:	e8 8b 23 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  406e85:	b8 01 00 00 00       	mov    $0x1,%eax
  406e8a:	c9                   	leaveq 
  406e8b:	c3                   	retq   

0000000000406e8c <_D6object14TypeInfo_Array8toStringMFZAa>:
	TypeInfo m_next;
}

class TypeInfo_Array : TypeInfo
{
	char[] toString() { return value.toString() ~ "[]"; }
  406e8c:	55                   	push   %rbp
  406e8d:	48 89 e5             	mov    %rsp,%rbp
  406e90:	41 55                	push   %r13
  406e92:	41 54                	push   %r12
  406e94:	53                   	push   %rbx
  406e95:	48 83 ec 78          	sub    $0x78,%rsp
  406e99:	48 89 fb             	mov    %rdi,%rbx
  406e9c:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
  406ea0:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  406ea4:	e8 67 23 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  406ea9:	48 c7 45 a0 02 00 00 	movq   $0x2,-0x60(%rbp)
  406eb0:	00 
  406eb1:	48 c7 45 a8 d0 1b 41 	movq   $0x411bd0,-0x58(%rbp)
  406eb8:	00 
  406eb9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  406ebd:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  406ec1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  406ec5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  406ec9:	4c 8b 65 b8          	mov    -0x48(%rbp),%r12
  406ecd:	4c 8b 6d b0          	mov    -0x50(%rbp),%r13
  406ed1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  406ed5:	48 8b 40 10          	mov    0x10(%rax),%rax
  406ed9:	48 8b 00             	mov    (%rax),%rax
  406edc:	48 83 c0 08          	add    $0x8,%rax
  406ee0:	48 8b 10             	mov    (%rax),%rdx
  406ee3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  406ee7:	48 8b 70 10          	mov    0x10(%rax),%rsi
  406eeb:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  406eef:	ff d2                	callq  *%rdx
  406ef1:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  406ef5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  406ef9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  406efd:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  406f01:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  406f05:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  406f09:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406f0d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  406f11:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406f15:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  406f19:	4c 89 24 24          	mov    %r12,(%rsp)
  406f1d:	4d 89 e9             	mov    %r13,%r9
  406f20:	49 89 c0             	mov    %rax,%r8
  406f23:	ba 02 00 00 00       	mov    $0x2,%edx
  406f28:	48 c7 c6 00 fd 40 00 	mov    $0x40fd00,%rsi
  406f2f:	48 89 df             	mov    %rbx,%rdi
  406f32:	b8 00 00 00 00       	mov    $0x0,%eax
  406f37:	e8 83 36 00 00       	callq  40a5bf <_d_arraycatnT>
  406f3c:	48 89 d8             	mov    %rbx,%rax
  406f3f:	48 83 c4 78          	add    $0x78,%rsp
  406f43:	5b                   	pop    %rbx
  406f44:	41 5c                	pop    %r12
  406f46:	41 5d                	pop    %r13
  406f48:	c9                   	leaveq 
  406f49:	c3                   	retq   

0000000000406f4a <_D6object14TypeInfo_Array8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  406f4a:	55                   	push   %rbp
  406f4b:	48 89 e5             	mov    %rsp,%rbp
  406f4e:	48 83 ec 30          	sub    $0x30,%rsp
  406f52:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406f56:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  406f5a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  406f5e:	e8 ad 22 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Array c;
  406f63:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  406f6a:	00 

		return cast(int)
  406f6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406f6f:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  406f73:	74 46                	je     406fbb <_D6object14TypeInfo_Array8opEqualsMFC6ObjectZi+0x71>
  406f75:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  406f79:	48 c7 c6 c0 be 41 00 	mov    $0x41bec0,%rsi
  406f80:	e8 ce 24 00 00       	callq  409453 <_d_dynamic_cast>
  406f85:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  406f89:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  406f8e:	74 31                	je     406fc1 <_D6object14TypeInfo_Array8opEqualsMFC6ObjectZi+0x77>
  406f90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406f94:	48 8b 40 10          	mov    0x10(%rax),%rax
  406f98:	48 8b 00             	mov    (%rax),%rax
  406f9b:	48 83 c0 20          	add    $0x20,%rax
  406f9f:	48 8b 10             	mov    (%rax),%rdx
  406fa2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406fa6:	48 8b 40 10          	mov    0x10(%rax),%rax
  406faa:	48 89 c6             	mov    %rax,%rsi
  406fad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406fb1:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406fb5:	ff d2                	callq  *%rdx
  406fb7:	85 c0                	test   %eax,%eax
  406fb9:	74 06                	je     406fc1 <_D6object14TypeInfo_Array8opEqualsMFC6ObjectZi+0x77>
  406fbb:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  406fbf:	eb 04                	jmp    406fc5 <_D6object14TypeInfo_Array8opEqualsMFC6ObjectZi+0x7b>
  406fc1:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  406fc5:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
			   (this is o ||
				((c = cast(TypeInfo_Array)o) !is null &&
				 this.value == c.value));
	}
  406fc9:	c9                   	leaveq 
  406fca:	c3                   	retq   

0000000000406fcb <_D6object14TypeInfo_Array7getHashMFPvZm>:

	hash_t getHash(void *p)
  406fcb:	55                   	push   %rbp
  406fcc:	48 89 e5             	mov    %rsp,%rbp
  406fcf:	48 83 ec 40          	sub    $0x40,%rsp
  406fd3:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  406fd7:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  406fdb:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  406fdf:	e8 2c 22 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{	size_t sz = value.tsize();
  406fe4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406fe8:	48 8b 40 10          	mov    0x10(%rax),%rax
  406fec:	48 8b 00             	mov    (%rax),%rax
  406fef:	48 83 c0 40          	add    $0x40,%rax
  406ff3:	48 8b 10             	mov    (%rax),%rdx
  406ff6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406ffa:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406ffe:	ff d2                	callq  *%rdx
  407000:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		hash_t hash = 0;
  407004:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40700b:	00 
		void[] a = *cast(void[]*)p;
  40700c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  407010:	48 8b 02             	mov    (%rdx),%rax
  407013:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  407017:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40701b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		for (size_t i = 0; i < a.length; i++)
  40701f:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  407026:	00 
  407027:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40702b:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  40702f:	0f 92 c0             	setb   %al
  407032:	83 f0 01             	xor    $0x1,%eax
  407035:	84 c0                	test   %al,%al
  407037:	75 37                	jne    407070 <_D6object14TypeInfo_Array7getHashMFPvZm+0xa5>
			hash += value.getHash(a.ptr + i * sz);
  407039:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40703d:	48 8b 40 10          	mov    0x10(%rax),%rax
  407041:	48 8b 00             	mov    (%rax),%rax
  407044:	48 83 c0 28          	add    $0x28,%rax
  407048:	48 8b 08             	mov    (%rax),%rcx
  40704b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40704f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407053:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  407058:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  40705c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407060:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407064:	ff d1                	callq  *%rcx
  407066:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  40706a:	48 ff 45 f8          	incq   -0x8(%rbp)
  40706e:	eb b7                	jmp    407027 <_D6object14TypeInfo_Array7getHashMFPvZm+0x5c>
		return hash;
  407070:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  407074:	c9                   	leaveq 
  407075:	c3                   	retq   

0000000000407076 <_D6object14TypeInfo_Array6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  407076:	55                   	push   %rbp
  407077:	48 89 e5             	mov    %rsp,%rbp
  40707a:	48 83 ec 50          	sub    $0x50,%rsp
  40707e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  407082:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  407086:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  40708a:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  40708e:	e8 7d 21 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		void[] a1 = *cast(void[]*)p1;
  407093:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  407097:	48 8b 02             	mov    (%rdx),%rax
  40709a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40709e:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4070a2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		void[] a2 = *cast(void[]*)p2;
  4070a6:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  4070aa:	48 8b 02             	mov    (%rdx),%rax
  4070ad:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4070b1:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4070b5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		if (a1.length != a2.length)
  4070b9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4070bd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4070c1:	48 39 c2             	cmp    %rax,%rdx
  4070c4:	74 0c                	je     4070d2 <_D6object14TypeInfo_Array6equalsMFPvPvZi+0x5c>
			return 0;
  4070c6:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  4070cd:	e9 9e 00 00 00       	jmpq   407170 <_D6object14TypeInfo_Array6equalsMFPvPvZi+0xfa>
		size_t sz = value.tsize();
  4070d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4070d6:	48 8b 40 10          	mov    0x10(%rax),%rax
  4070da:	48 8b 00             	mov    (%rax),%rax
  4070dd:	48 83 c0 40          	add    $0x40,%rax
  4070e1:	48 8b 10             	mov    (%rax),%rdx
  4070e4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4070e8:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4070ec:	ff d2                	callq  *%rdx
  4070ee:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		for (size_t i = 0; i < a1.length; i++)
  4070f2:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4070f9:	00 
  4070fa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4070fe:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  407102:	0f 92 c0             	setb   %al
  407105:	83 f0 01             	xor    $0x1,%eax
  407108:	84 c0                	test   %al,%al
  40710a:	75 5d                	jne    407169 <_D6object14TypeInfo_Array6equalsMFPvPvZi+0xf3>
		{
			if (!value.equals(a1.ptr + i * sz, a2.ptr + i * sz))
  40710c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407110:	48 8b 40 10          	mov    0x10(%rax),%rax
  407114:	48 8b 00             	mov    (%rax),%rax
  407117:	48 83 c0 30          	add    $0x30,%rax
  40711b:	4c 8b 00             	mov    (%rax),%r8
  40711e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  407122:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407126:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  40712b:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40712f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  407133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407137:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  40713c:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  407140:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407144:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407148:	48 89 ca             	mov    %rcx,%rdx
  40714b:	41 ff d0             	callq  *%r8
  40714e:	85 c0                	test   %eax,%eax
  407150:	0f 95 c0             	setne  %al
  407153:	83 f0 01             	xor    $0x1,%eax
  407156:	84 c0                	test   %al,%al
  407158:	74 09                	je     407163 <_D6object14TypeInfo_Array6equalsMFPvPvZi+0xed>
				return 0;
  40715a:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  407161:	eb 0d                	jmp    407170 <_D6object14TypeInfo_Array6equalsMFPvPvZi+0xfa>
		if (a1.length != a2.length)
			return 0;
		size_t sz = value.tsize();
		for (size_t i = 0; i < a1.length; i++)
		{
			if (!value.equals(a1.ptr + i * sz, a2.ptr + i * sz))
  407163:	48 ff 45 f8          	incq   -0x8(%rbp)
  407167:	eb 91                	jmp    4070fa <_D6object14TypeInfo_Array6equalsMFPvPvZi+0x84>
				return 0;
		}
		return 1;
  407169:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%rbp)
  407170:	8b 45 b4             	mov    -0x4c(%rbp),%eax
	}
  407173:	c9                   	leaveq 
  407174:	c3                   	retq   

0000000000407175 <_D6object14TypeInfo_Array7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  407175:	55                   	push   %rbp
  407176:	48 89 e5             	mov    %rsp,%rbp
  407179:	48 83 ec 60          	sub    $0x60,%rsp
  40717d:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  407181:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  407185:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  407189:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  40718d:	e8 7e 20 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		void[] a1 = *cast(void[]*)p1;
  407192:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  407196:	48 8b 02             	mov    (%rdx),%rax
  407199:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40719d:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4071a1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		void[] a2 = *cast(void[]*)p2;
  4071a5:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  4071a9:	48 8b 02             	mov    (%rdx),%rax
  4071ac:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4071b0:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4071b4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		size_t sz = value.tsize();
  4071b8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4071bc:	48 8b 40 10          	mov    0x10(%rax),%rax
  4071c0:	48 8b 00             	mov    (%rax),%rax
  4071c3:	48 83 c0 40          	add    $0x40,%rax
  4071c7:	48 8b 10             	mov    (%rax),%rdx
  4071ca:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4071ce:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4071d2:	ff d2                	callq  *%rdx
  4071d4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		size_t len = a1.length;
  4071d8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4071dc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

		if (a2.length < len)
  4071e0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4071e4:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  4071e8:	73 08                	jae    4071f2 <_D6object14TypeInfo_Array7compareMFPvPvZi+0x7d>
			len = a2.length;
  4071ea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4071ee:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		for (size_t u = 0; u < len; u++)
  4071f2:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4071f9:	00 
  4071fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4071fe:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  407202:	0f 92 c0             	setb   %al
  407205:	83 f0 01             	xor    $0x1,%eax
  407208:	84 c0                	test   %al,%al
  40720a:	75 59                	jne    407265 <_D6object14TypeInfo_Array7compareMFPvPvZi+0xf0>
		{
			int result = value.compare(a1.ptr + u * sz, a2.ptr + u * sz);
  40720c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407210:	48 8b 40 10          	mov    0x10(%rax),%rax
  407214:	48 8b 00             	mov    (%rax),%rax
  407217:	48 83 c0 38          	add    $0x38,%rax
  40721b:	4c 8b 00             	mov    (%rax),%r8
  40721e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  407222:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407226:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  40722b:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40722f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  407233:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407237:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  40723c:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  407240:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407244:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407248:	48 89 ca             	mov    %rcx,%rdx
  40724b:	41 ff d0             	callq  *%r8
  40724e:	89 45 fc             	mov    %eax,-0x4(%rbp)
			if (result)
  407251:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  407255:	74 08                	je     40725f <_D6object14TypeInfo_Array7compareMFPvPvZi+0xea>
				return result;
  407257:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40725a:	89 45 a4             	mov    %eax,-0x5c(%rbp)
  40725d:	eb 17                	jmp    407276 <_D6object14TypeInfo_Array7compareMFPvPvZi+0x101>
		if (a2.length < len)
			len = a2.length;
		for (size_t u = 0; u < len; u++)
		{
			int result = value.compare(a1.ptr + u * sz, a2.ptr + u * sz);
			if (result)
  40725f:	48 ff 45 f0          	incq   -0x10(%rbp)
  407263:	eb 95                	jmp    4071fa <_D6object14TypeInfo_Array7compareMFPvPvZi+0x85>
				return result;
		}
		return cast(int)a1.length - cast(int)a2.length;
  407265:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  407269:	89 c2                	mov    %eax,%edx
  40726b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40726f:	89 d1                	mov    %edx,%ecx
  407271:	29 c1                	sub    %eax,%ecx
  407273:	89 4d a4             	mov    %ecx,-0x5c(%rbp)
  407276:	8b 45 a4             	mov    -0x5c(%rbp),%eax
	}
  407279:	c9                   	leaveq 
  40727a:	c3                   	retq   

000000000040727b <_D6object14TypeInfo_Array5tsizeMFZm>:

	size_t tsize()
  40727b:	55                   	push   %rbp
  40727c:	48 89 e5             	mov    %rsp,%rbp
  40727f:	48 83 ec 10          	sub    $0x10,%rsp
  407283:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407287:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40728b:	e8 80 1f 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return (void[]).sizeof;
  407290:	b8 10 00 00 00       	mov    $0x10,%eax
	}
  407295:	c9                   	leaveq 
  407296:	c3                   	retq   

0000000000407297 <_D6object14TypeInfo_Array4swapMFPvPvZv>:

	void swap(void *p1, void *p2)
  407297:	55                   	push   %rbp
  407298:	48 89 e5             	mov    %rsp,%rbp
  40729b:	48 83 ec 30          	sub    $0x30,%rsp
  40729f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4072a3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4072a7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4072ab:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4072af:	e8 5c 1f 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{	void[] tmp;
  4072b4:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4072bb:	00 
  4072bc:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4072c3:	00 
		tmp = *cast(void[]*)p1;
  4072c4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4072c8:	48 8b 02             	mov    (%rdx),%rax
  4072cb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4072cf:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4072d3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		*cast(void[]*)p1 = *cast(void[]*)p2;
  4072d7:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4072db:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4072df:	48 8b 02             	mov    (%rdx),%rax
  4072e2:	48 89 01             	mov    %rax,(%rcx)
  4072e5:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4072e9:	48 89 41 08          	mov    %rax,0x8(%rcx)
		*cast(void[]*)p2 = tmp;
  4072ed:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4072f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4072f5:	48 89 02             	mov    %rax,(%rdx)
  4072f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4072fc:	48 89 42 08          	mov    %rax,0x8(%rdx)
	}
  407300:	c9                   	leaveq 
  407301:	c3                   	retq   

0000000000407302 <_D6object14TypeInfo_Array4nextMFZC8TypeInfo>:

	TypeInfo value;

	TypeInfo next()
  407302:	55                   	push   %rbp
  407303:	48 89 e5             	mov    %rsp,%rbp
  407306:	48 83 ec 10          	sub    $0x10,%rsp
  40730a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40730e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  407312:	e8 f9 1e 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return value;
  407317:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40731b:	48 8b 40 10          	mov    0x10(%rax),%rax
	}
  40731f:	c9                   	leaveq 
  407320:	c3                   	retq   

0000000000407321 <_D6object14TypeInfo_Array5flagsMFZk>:

	uint flags() { return 1; }
  407321:	55                   	push   %rbp
  407322:	48 89 e5             	mov    %rsp,%rbp
  407325:	48 83 ec 10          	sub    $0x10,%rsp
  407329:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40732d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  407331:	e8 da 1e 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  407336:	b8 01 00 00 00       	mov    $0x1,%eax
  40733b:	c9                   	leaveq 
  40733c:	c3                   	retq   

000000000040733d <_D6object20TypeInfo_StaticArray8toStringMFZAa>:
}

class TypeInfo_StaticArray : TypeInfo
{
	char[] toString()
  40733d:	55                   	push   %rbp
  40733e:	48 89 e5             	mov    %rsp,%rbp
  407341:	41 57                	push   %r15
  407343:	41 56                	push   %r14
  407345:	41 55                	push   %r13
  407347:	41 54                	push   %r12
  407349:	53                   	push   %rbx
  40734a:	48 81 ec 88 01 00 00 	sub    $0x188,%rsp
  407351:	48 89 bd 60 fe ff ff 	mov    %rdi,-0x1a0(%rbp)
  407358:	48 89 b5 b8 fe ff ff 	mov    %rsi,-0x148(%rbp)
  40735f:	48 8b bd b8 fe ff ff 	mov    -0x148(%rbp),%rdi
  407366:	e8 a5 1e 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		char[20] buf;
  40736b:	48 c7 85 e0 fe ff ff 	movq   $0x14,-0x120(%rbp)
  407372:	14 00 00 00 
  407376:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
  40737d:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  407384:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  40738b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40738f:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  407396:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40739a:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  40739f:	0f 95 c0             	setne  %al
  4073a2:	83 f0 01             	xor    $0x1,%eax
  4073a5:	84 c0                	test   %al,%al
  4073a7:	75 11                	jne    4073ba <_D6object20TypeInfo_StaticArray8toStringMFZAa+0x7d>
  4073a9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4073ad:	c6 00 ff             	movb   $0xff,(%rax)
  4073b0:	48 ff 45 c0          	incq   -0x40(%rbp)
  4073b4:	48 ff 4d c8          	decq   -0x38(%rbp)
  4073b8:	eb e0                	jmp    40739a <_D6object20TypeInfo_StaticArray8toStringMFZAa+0x5d>
		return value.toString() ~ "[" ~ itoa(buf, 'd', len) ~ "]";
  4073ba:	48 c7 85 f0 fe ff ff 	movq   $0x1,-0x110(%rbp)
  4073c1:	01 00 00 00 
  4073c5:	48 c7 85 f8 fe ff ff 	movq   $0x411c90,-0x108(%rbp)
  4073cc:	90 1c 41 00 
  4073d0:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  4073d7:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  4073de:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  4073e5:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  4073ec:	48 8b 9d 08 ff ff ff 	mov    -0xf8(%rbp),%rbx
  4073f3:	4c 8b a5 00 ff ff ff 	mov    -0x100(%rbp),%r12
  4073fa:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  407401:	48 8b 40 18          	mov    0x18(%rax),%rax
  407405:	48 89 c1             	mov    %rax,%rcx
  407408:	48 c7 85 10 ff ff ff 	movq   $0x14,-0xf0(%rbp)
  40740f:	14 00 00 00 
  407413:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
  40741a:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  407421:	48 8d bd a0 fe ff ff 	lea    -0x160(%rbp),%rdi
  407428:	48 8b b5 10 ff ff ff 	mov    -0xf0(%rbp),%rsi
  40742f:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  407436:	49 89 c8             	mov    %rcx,%r8
  407439:	b9 64 00 00 00       	mov    $0x64,%ecx
  40743e:	e8 ea 67 00 00       	callq  40dc2d <_D6kernel4core4util4itoaFAaalZAa>
  407443:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
  40744a:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  407451:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  407458:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  40745f:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  407466:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  40746d:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  407474:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  40747b:	4c 8b ad 38 ff ff ff 	mov    -0xc8(%rbp),%r13
  407482:	4c 8b b5 30 ff ff ff 	mov    -0xd0(%rbp),%r14
  407489:	48 c7 85 40 ff ff ff 	movq   $0x1,-0xc0(%rbp)
  407490:	01 00 00 00 
  407494:	48 c7 85 48 ff ff ff 	movq   $0x411c92,-0xb8(%rbp)
  40749b:	92 1c 41 00 
  40749f:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  4074a6:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  4074ad:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  4074b4:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  4074bb:	4c 8b bd 58 ff ff ff 	mov    -0xa8(%rbp),%r15
  4074c2:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  4074c9:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
  4074d0:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  4074d7:	48 8b 40 10          	mov    0x10(%rax),%rax
  4074db:	48 8b 00             	mov    (%rax),%rax
  4074de:	48 83 c0 08          	add    $0x8,%rax
  4074e2:	48 8b 10             	mov    (%rax),%rdx
  4074e5:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  4074ec:	48 8b 70 10          	mov    0x10(%rax),%rsi
  4074f0:	48 8d bd 90 fe ff ff 	lea    -0x170(%rbp),%rdi
  4074f7:	ff d2                	callq  *%rdx
  4074f9:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  407500:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  407507:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
  40750e:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  407515:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40751c:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  407523:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  40752a:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  407531:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  407538:	48 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%rcx
  40753f:	48 8d bd 80 fe ff ff 	lea    -0x180(%rbp),%rdi
  407546:	4c 89 3c 24          	mov    %r15,(%rsp)
  40754a:	4c 8b 8d 68 fe ff ff 	mov    -0x198(%rbp),%r9
  407551:	49 89 c0             	mov    %rax,%r8
  407554:	ba 02 00 00 00       	mov    $0x2,%edx
  407559:	48 c7 c6 00 fd 40 00 	mov    $0x40fd00,%rsi
  407560:	b8 00 00 00 00       	mov    $0x0,%eax
  407565:	e8 55 30 00 00       	callq  40a5bf <_d_arraycatnT>
  40756a:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
  407571:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  407575:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
  40757c:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  407580:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  407584:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  407588:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40758c:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  407590:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  407594:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  407598:	48 8d bd 70 fe ff ff 	lea    -0x190(%rbp),%rdi
  40759f:	4c 89 2c 24          	mov    %r13,(%rsp)
  4075a3:	4d 89 f1             	mov    %r14,%r9
  4075a6:	49 89 c0             	mov    %rax,%r8
  4075a9:	ba 02 00 00 00       	mov    $0x2,%edx
  4075ae:	48 c7 c6 00 fd 40 00 	mov    $0x40fd00,%rsi
  4075b5:	b8 00 00 00 00       	mov    $0x0,%eax
  4075ba:	e8 00 30 00 00       	callq  40a5bf <_d_arraycatnT>
  4075bf:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
  4075c6:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  4075ca:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
  4075d1:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  4075d5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4075d9:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4075dd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4075e1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  4075e5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4075e9:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  4075ed:	48 89 1c 24          	mov    %rbx,(%rsp)
  4075f1:	4d 89 e1             	mov    %r12,%r9
  4075f4:	49 89 c0             	mov    %rax,%r8
  4075f7:	ba 02 00 00 00       	mov    $0x2,%edx
  4075fc:	48 c7 c6 00 fd 40 00 	mov    $0x40fd00,%rsi
  407603:	48 8b bd 60 fe ff ff 	mov    -0x1a0(%rbp),%rdi
  40760a:	b8 00 00 00 00       	mov    $0x0,%eax
  40760f:	e8 ab 2f 00 00       	callq  40a5bf <_d_arraycatnT>
	}
  407614:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  40761b:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
  407622:	5b                   	pop    %rbx
  407623:	41 5c                	pop    %r12
  407625:	41 5d                	pop    %r13
  407627:	41 5e                	pop    %r14
  407629:	41 5f                	pop    %r15
  40762b:	c9                   	leaveq 
  40762c:	c3                   	retq   

000000000040762d <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  40762d:	55                   	push   %rbp
  40762e:	48 89 e5             	mov    %rsp,%rbp
  407631:	48 83 ec 30          	sub    $0x30,%rsp
  407635:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  407639:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40763d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  407641:	e8 ca 1b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_StaticArray c;
  407646:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40764d:	00 

		return cast(int)
  40764e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407652:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  407656:	74 5b                	je     4076b3 <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi+0x86>
  407658:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40765c:	48 c7 c6 60 bf 41 00 	mov    $0x41bf60,%rsi
  407663:	e8 eb 1d 00 00       	callq  409453 <_d_dynamic_cast>
  407668:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40766c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  407671:	74 46                	je     4076b9 <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi+0x8c>
  407673:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407677:	48 8b 50 18          	mov    0x18(%rax),%rdx
  40767b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40767f:	48 8b 40 18          	mov    0x18(%rax),%rax
  407683:	48 39 c2             	cmp    %rax,%rdx
  407686:	75 31                	jne    4076b9 <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi+0x8c>
  407688:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40768c:	48 8b 40 10          	mov    0x10(%rax),%rax
  407690:	48 8b 00             	mov    (%rax),%rax
  407693:	48 83 c0 20          	add    $0x20,%rax
  407697:	48 8b 10             	mov    (%rax),%rdx
  40769a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40769e:	48 8b 40 10          	mov    0x10(%rax),%rax
  4076a2:	48 89 c6             	mov    %rax,%rsi
  4076a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4076a9:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4076ad:	ff d2                	callq  *%rdx
  4076af:	85 c0                	test   %eax,%eax
  4076b1:	74 06                	je     4076b9 <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi+0x8c>
  4076b3:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  4076b7:	eb 04                	jmp    4076bd <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi+0x90>
  4076b9:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  4076bd:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
			   (this is o ||
				((c = cast(TypeInfo_StaticArray)o) !is null &&
				 this.len == c.len &&
				 this.value == c.value));
	}
  4076c1:	c9                   	leaveq 
  4076c2:	c3                   	retq   

00000000004076c3 <_D6object20TypeInfo_StaticArray7getHashMFPvZm>:

	hash_t getHash(void *p)
  4076c3:	55                   	push   %rbp
  4076c4:	48 89 e5             	mov    %rsp,%rbp
  4076c7:	48 83 ec 30          	sub    $0x30,%rsp
  4076cb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4076cf:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4076d3:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4076d7:	e8 34 1b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{	size_t sz = value.tsize();
  4076dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4076e0:	48 8b 40 10          	mov    0x10(%rax),%rax
  4076e4:	48 8b 00             	mov    (%rax),%rax
  4076e7:	48 83 c0 40          	add    $0x40,%rax
  4076eb:	48 8b 10             	mov    (%rax),%rdx
  4076ee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4076f2:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4076f6:	ff d2                	callq  *%rdx
  4076f8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		hash_t hash = 0;
  4076fc:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  407703:	00 
		for (size_t i = 0; i < len; i++)
  407704:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40770b:	00 
  40770c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407710:	48 8b 40 18          	mov    0x18(%rax),%rax
  407714:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  407718:	0f 92 c0             	setb   %al
  40771b:	83 f0 01             	xor    $0x1,%eax
  40771e:	84 c0                	test   %al,%al
  407720:	75 36                	jne    407758 <_D6object20TypeInfo_StaticArray7getHashMFPvZm+0x95>
			hash += value.getHash(p + i * sz);
  407722:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407726:	48 8b 40 10          	mov    0x10(%rax),%rax
  40772a:	48 8b 00             	mov    (%rax),%rax
  40772d:	48 83 c0 28          	add    $0x28,%rax
  407731:	48 8b 10             	mov    (%rax),%rdx
  407734:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407738:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  40773d:	48 89 c6             	mov    %rax,%rsi
  407740:	48 03 75 d0          	add    -0x30(%rbp),%rsi
  407744:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407748:	48 8b 78 10          	mov    0x10(%rax),%rdi
  40774c:	ff d2                	callq  *%rdx
  40774e:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  407752:	48 ff 45 f8          	incq   -0x8(%rbp)
  407756:	eb b4                	jmp    40770c <_D6object20TypeInfo_StaticArray7getHashMFPvZm+0x49>
		return hash;
  407758:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  40775c:	c9                   	leaveq 
  40775d:	c3                   	retq   

000000000040775e <_D6object20TypeInfo_StaticArray6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  40775e:	55                   	push   %rbp
  40775f:	48 89 e5             	mov    %rsp,%rbp
  407762:	48 83 ec 30          	sub    $0x30,%rsp
  407766:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40776a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40776e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  407772:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  407776:	e8 95 1a 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		size_t sz = value.tsize();
  40777b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40777f:	48 8b 40 10          	mov    0x10(%rax),%rax
  407783:	48 8b 00             	mov    (%rax),%rax
  407786:	48 83 c0 40          	add    $0x40,%rax
  40778a:	48 8b 10             	mov    (%rax),%rdx
  40778d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407791:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407795:	ff d2                	callq  *%rdx
  407797:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		for (size_t u = 0; u < len; u++)
  40779b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4077a2:	00 
  4077a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4077a7:	48 8b 40 18          	mov    0x18(%rax),%rax
  4077ab:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  4077af:	0f 92 c0             	setb   %al
  4077b2:	83 f0 01             	xor    $0x1,%eax
  4077b5:	84 c0                	test   %al,%al
  4077b7:	75 57                	jne    407810 <_D6object20TypeInfo_StaticArray6equalsMFPvPvZi+0xb2>
		{
			if (!value.equals(p1 + u * sz, p2 + u * sz))
  4077b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4077bd:	48 8b 40 10          	mov    0x10(%rax),%rax
  4077c1:	48 8b 00             	mov    (%rax),%rax
  4077c4:	48 83 c0 30          	add    $0x30,%rax
  4077c8:	48 8b 08             	mov    (%rax),%rcx
  4077cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4077cf:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  4077d4:	48 89 c2             	mov    %rax,%rdx
  4077d7:	48 03 55 d8          	add    -0x28(%rbp),%rdx
  4077db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4077df:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  4077e4:	48 89 c6             	mov    %rax,%rsi
  4077e7:	48 03 75 e0          	add    -0x20(%rbp),%rsi
  4077eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4077ef:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4077f3:	ff d1                	callq  *%rcx
  4077f5:	85 c0                	test   %eax,%eax
  4077f7:	0f 95 c0             	setne  %al
  4077fa:	83 f0 01             	xor    $0x1,%eax
  4077fd:	84 c0                	test   %al,%al
  4077ff:	74 09                	je     40780a <_D6object20TypeInfo_StaticArray6equalsMFPvPvZi+0xac>
				return 0;
  407801:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  407808:	eb 0d                	jmp    407817 <_D6object20TypeInfo_StaticArray6equalsMFPvPvZi+0xb9>
	{
		size_t sz = value.tsize();

		for (size_t u = 0; u < len; u++)
		{
			if (!value.equals(p1 + u * sz, p2 + u * sz))
  40780a:	48 ff 45 f8          	incq   -0x8(%rbp)
  40780e:	eb 93                	jmp    4077a3 <_D6object20TypeInfo_StaticArray6equalsMFPvPvZi+0x45>
				return 0;
		}
		return 1;
  407810:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
  407817:	8b 45 d4             	mov    -0x2c(%rbp),%eax
	}
  40781a:	c9                   	leaveq 
  40781b:	c3                   	retq   

000000000040781c <_D6object20TypeInfo_StaticArray7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  40781c:	55                   	push   %rbp
  40781d:	48 89 e5             	mov    %rsp,%rbp
  407820:	48 83 ec 40          	sub    $0x40,%rsp
  407824:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  407828:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40782c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  407830:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  407834:	e8 d7 19 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		size_t sz = value.tsize();
  407839:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40783d:	48 8b 40 10          	mov    0x10(%rax),%rax
  407841:	48 8b 00             	mov    (%rax),%rax
  407844:	48 83 c0 40          	add    $0x40,%rax
  407848:	48 8b 10             	mov    (%rax),%rdx
  40784b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40784f:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407853:	ff d2                	callq  *%rdx
  407855:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		for (size_t u = 0; u < len; u++)
  407859:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  407860:	00 
  407861:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407865:	48 8b 40 18          	mov    0x18(%rax),%rax
  407869:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40786d:	0f 92 c0             	setb   %al
  407870:	83 f0 01             	xor    $0x1,%eax
  407873:	84 c0                	test   %al,%al
  407875:	75 53                	jne    4078ca <_D6object20TypeInfo_StaticArray7compareMFPvPvZi+0xae>
		{
			int result = value.compare(p1 + u * sz, p2 + u * sz);
  407877:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40787b:	48 8b 40 10          	mov    0x10(%rax),%rax
  40787f:	48 8b 00             	mov    (%rax),%rax
  407882:	48 83 c0 38          	add    $0x38,%rax
  407886:	48 8b 08             	mov    (%rax),%rcx
  407889:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40788d:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  407892:	48 89 c2             	mov    %rax,%rdx
  407895:	48 03 55 c8          	add    -0x38(%rbp),%rdx
  407899:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40789d:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  4078a2:	48 89 c6             	mov    %rax,%rsi
  4078a5:	48 03 75 d0          	add    -0x30(%rbp),%rsi
  4078a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4078ad:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4078b1:	ff d1                	callq  *%rcx
  4078b3:	89 45 fc             	mov    %eax,-0x4(%rbp)
			if (result)
  4078b6:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  4078ba:	74 08                	je     4078c4 <_D6object20TypeInfo_StaticArray7compareMFPvPvZi+0xa8>
				return result;
  4078bc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4078bf:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  4078c2:	eb 0d                	jmp    4078d1 <_D6object20TypeInfo_StaticArray7compareMFPvPvZi+0xb5>
		size_t sz = value.tsize();

		for (size_t u = 0; u < len; u++)
		{
			int result = value.compare(p1 + u * sz, p2 + u * sz);
			if (result)
  4078c4:	48 ff 45 f0          	incq   -0x10(%rbp)
  4078c8:	eb 97                	jmp    407861 <_D6object20TypeInfo_StaticArray7compareMFPvPvZi+0x45>
				return result;
		}
		return 0;
  4078ca:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  4078d1:	8b 45 c4             	mov    -0x3c(%rbp),%eax
	}
  4078d4:	c9                   	leaveq 
  4078d5:	c3                   	retq   

00000000004078d6 <_D6object20TypeInfo_StaticArray5tsizeMFZm>:

	size_t tsize()
  4078d6:	55                   	push   %rbp
  4078d7:	48 89 e5             	mov    %rsp,%rbp
  4078da:	53                   	push   %rbx
  4078db:	48 83 ec 08          	sub    $0x8,%rsp
  4078df:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  4078e3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4078e7:	e8 24 19 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return len * value.tsize();
  4078ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4078f0:	48 8b 58 18          	mov    0x18(%rax),%rbx
  4078f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4078f8:	48 8b 40 10          	mov    0x10(%rax),%rax
  4078fc:	48 8b 00             	mov    (%rax),%rax
  4078ff:	48 83 c0 40          	add    $0x40,%rax
  407903:	48 8b 10             	mov    (%rax),%rdx
  407906:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40790a:	48 8b 78 10          	mov    0x10(%rax),%rdi
  40790e:	ff d2                	callq  *%rdx
  407910:	48 0f af c3          	imul   %rbx,%rax
	}
  407914:	48 83 c4 08          	add    $0x8,%rsp
  407918:	5b                   	pop    %rbx
  407919:	c9                   	leaveq 
  40791a:	c3                   	retq   

000000000040791b <_D6object20TypeInfo_StaticArray4swapMFPvPvZv>:

	void swap(void *p1, void *p2)
  40791b:	55                   	push   %rbp
  40791c:	48 89 e5             	mov    %rsp,%rbp
  40791f:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp
  407926:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  40792d:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
  407934:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  40793b:	48 8b bd 28 ff ff ff 	mov    -0xd8(%rbp),%rdi
  407942:	e8 c9 18 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{	void* tmp;
  407947:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40794e:	00 
		size_t sz = value.tsize();
  40794f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  407956:	48 8b 40 10          	mov    0x10(%rax),%rax
  40795a:	48 8b 00             	mov    (%rax),%rax
  40795d:	48 83 c0 40          	add    $0x40,%rax
  407961:	48 8b 10             	mov    (%rax),%rdx
  407964:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40796b:	48 8b 78 10          	mov    0x10(%rax),%rdi
  40796f:	ff d2                	callq  *%rdx
  407971:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		ubyte[16] buffer;
  407975:	48 c7 85 50 ff ff ff 	movq   $0x10,-0xb0(%rbp)
  40797c:	10 00 00 00 
  407980:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  407987:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  40798e:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  407995:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  407999:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  4079a0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4079a4:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  4079a9:	0f 95 c0             	setne  %al
  4079ac:	83 f0 01             	xor    $0x1,%eax
  4079af:	84 c0                	test   %al,%al
  4079b1:	75 11                	jne    4079c4 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0xa9>
  4079b3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4079b7:	c6 00 00             	movb   $0x0,(%rax)
  4079ba:	48 ff 45 e0          	incq   -0x20(%rbp)
  4079be:	48 ff 4d e8          	decq   -0x18(%rbp)
  4079c2:	eb e0                	jmp    4079a4 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0x89>
		void* pbuffer;
  4079c4:	48 c7 85 48 ff ff ff 	movq   $0x0,-0xb8(%rbp)
  4079cb:	00 00 00 00 

		if (sz < buffer.sizeof)
  4079cf:	48 83 7d d0 10       	cmpq   $0x10,-0x30(%rbp)
  4079d4:	73 0d                	jae    4079e3 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0xc8>
			tmp = buffer.ptr;
  4079d6:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  4079dd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4079e1:	eb 30                	jmp    407a13 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0xf8>
		else
			tmp = pbuffer = (new void[sz]).ptr;
  4079e3:	48 8d bd 60 ff ff ff 	lea    -0xa0(%rbp),%rdi
  4079ea:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4079ee:	48 c7 c6 c0 fb 40 00 	mov    $0x40fbc0,%rsi
  4079f5:	e8 aa 27 00 00       	callq  40a1a4 <_d_newarrayT>
  4079fa:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  407a01:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  407a08:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  407a0f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

		for (size_t u = 0; u < len; u += sz)
  407a13:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  407a1a:	00 
  407a1b:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  407a22:	48 8b 40 18          	mov    0x18(%rax),%rax
  407a26:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  407a2a:	0f 92 c0             	setb   %al
  407a2d:	83 f0 01             	xor    $0x1,%eax
  407a30:	84 c0                	test   %al,%al
  407a32:	0f 85 35 01 00 00    	jne    407b6d <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0x252>
		{	size_t o = u * sz;
  407a38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407a3c:	48 0f af 45 d0       	imul   -0x30(%rbp),%rax
  407a41:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			tmp[0 .. sz] = (p1 + o)[0 .. sz];
  407a45:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407a49:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  407a50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407a54:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  407a5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407a5f:	48 89 c2             	mov    %rax,%rdx
  407a62:	48 03 95 20 ff ff ff 	add    -0xe0(%rbp),%rdx
  407a69:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407a6d:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  407a71:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  407a75:	48 8d bd 00 ff ff ff 	lea    -0x100(%rbp),%rdi
  407a7c:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  407a83:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  407a8a:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
  407a8e:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  407a92:	49 89 c0             	mov    %rax,%r8
  407a95:	49 89 d1             	mov    %rdx,%r9
  407a98:	48 89 ca             	mov    %rcx,%rdx
  407a9b:	48 89 f1             	mov    %rsi,%rcx
  407a9e:	be 01 00 00 00       	mov    $0x1,%esi
  407aa3:	e8 c4 5a 00 00       	callq  40d56c <_d_arraycopy>
			(p1 + o)[0 .. sz] = (p2 + o)[0 .. sz];
  407aa8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407aac:	48 89 c2             	mov    %rax,%rdx
  407aaf:	48 03 95 20 ff ff ff 	add    -0xe0(%rbp),%rdx
  407ab6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407aba:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  407abe:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  407ac2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407ac6:	48 89 c2             	mov    %rax,%rdx
  407ac9:	48 03 95 18 ff ff ff 	add    -0xe8(%rbp),%rdx
  407ad0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407ad4:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  407ad8:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  407adc:	48 8d bd f0 fe ff ff 	lea    -0x110(%rbp),%rdi
  407ae3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  407ae7:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  407aeb:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  407aef:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  407af3:	49 89 c0             	mov    %rax,%r8
  407af6:	49 89 d1             	mov    %rdx,%r9
  407af9:	48 89 ca             	mov    %rcx,%rdx
  407afc:	48 89 f1             	mov    %rsi,%rcx
  407aff:	be 01 00 00 00       	mov    $0x1,%esi
  407b04:	e8 63 5a 00 00       	callq  40d56c <_d_arraycopy>
			(p2 + o)[0 .. sz] = tmp[0 .. sz];
  407b09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407b0d:	48 89 c2             	mov    %rax,%rdx
  407b10:	48 03 95 18 ff ff ff 	add    -0xe8(%rbp),%rdx
  407b17:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407b1b:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  407b1f:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  407b23:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407b27:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  407b2b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407b2f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  407b33:	48 8d bd e0 fe ff ff 	lea    -0x120(%rbp),%rdi
  407b3a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  407b3e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  407b42:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  407b46:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  407b4a:	49 89 c0             	mov    %rax,%r8
  407b4d:	49 89 d1             	mov    %rdx,%r9
  407b50:	48 89 ca             	mov    %rcx,%rdx
  407b53:	48 89 f1             	mov    %rsi,%rcx
  407b56:	be 01 00 00 00       	mov    $0x1,%esi
  407b5b:	e8 0c 5a 00 00       	callq  40d56c <_d_arraycopy>
  407b60:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407b64:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  407b68:	e9 ae fe ff ff       	jmpq   407a1b <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0x100>
		}
		if (pbuffer)
  407b6d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  407b74:	48 85 c0             	test   %rax,%rax
  407b77:	74 0c                	je     407b85 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0x26a>
			delete pbuffer;
  407b79:	48 8d bd 48 ff ff ff 	lea    -0xb8(%rbp),%rdi
  407b80:	e8 a2 27 00 00       	callq  40a327 <_d_delmemory>
	}
  407b85:	c9                   	leaveq 
  407b86:	c3                   	retq   

0000000000407b87 <_D6object20TypeInfo_StaticArray4initMFZAv>:

	void[] init() { return value.init(); }
  407b87:	55                   	push   %rbp
  407b88:	48 89 e5             	mov    %rsp,%rbp
  407b8b:	53                   	push   %rbx
  407b8c:	48 83 ec 08          	sub    $0x8,%rsp
  407b90:	48 89 fb             	mov    %rdi,%rbx
  407b93:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  407b97:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  407b9b:	e8 70 16 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  407ba0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407ba4:	48 8b 40 10          	mov    0x10(%rax),%rax
  407ba8:	48 8b 00             	mov    (%rax),%rax
  407bab:	48 83 c0 58          	add    $0x58,%rax
  407baf:	48 8b 10             	mov    (%rax),%rdx
  407bb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407bb6:	48 8b 70 10          	mov    0x10(%rax),%rsi
  407bba:	48 89 df             	mov    %rbx,%rdi
  407bbd:	ff d2                	callq  *%rdx
  407bbf:	48 89 d8             	mov    %rbx,%rax
  407bc2:	48 83 c4 08          	add    $0x8,%rsp
  407bc6:	5b                   	pop    %rbx
  407bc7:	c9                   	leaveq 
  407bc8:	c3                   	retq   

0000000000407bc9 <_D6object20TypeInfo_StaticArray4nextMFZC8TypeInfo>:
	TypeInfo next() { return value; }
  407bc9:	55                   	push   %rbp
  407bca:	48 89 e5             	mov    %rsp,%rbp
  407bcd:	48 83 ec 10          	sub    $0x10,%rsp
  407bd1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407bd5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  407bd9:	e8 32 16 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  407bde:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407be2:	48 8b 40 10          	mov    0x10(%rax),%rax
  407be6:	c9                   	leaveq 
  407be7:	c3                   	retq   

0000000000407be8 <_D6object20TypeInfo_StaticArray5flagsMFZk>:
	uint flags() { return value.flags(); }
  407be8:	55                   	push   %rbp
  407be9:	48 89 e5             	mov    %rsp,%rbp
  407bec:	48 83 ec 10          	sub    $0x10,%rsp
  407bf0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407bf4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  407bf8:	e8 13 16 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  407bfd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407c01:	48 8b 40 10          	mov    0x10(%rax),%rax
  407c05:	48 8b 00             	mov    (%rax),%rax
  407c08:	48 83 c0 60          	add    $0x60,%rax
  407c0c:	48 8b 10             	mov    (%rax),%rdx
  407c0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407c13:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407c17:	ff d2                	callq  *%rdx
  407c19:	c9                   	leaveq 
  407c1a:	c3                   	retq   

0000000000407c1b <_D6object25TypeInfo_AssociativeArray8toStringMFZAa>:
	size_t len;
}

class TypeInfo_AssociativeArray : TypeInfo
{
	char[] toString()
  407c1b:	55                   	push   %rbp
  407c1c:	48 89 e5             	mov    %rsp,%rbp
  407c1f:	41 57                	push   %r15
  407c21:	41 56                	push   %r14
  407c23:	41 55                	push   %r13
  407c25:	41 54                	push   %r12
  407c27:	53                   	push   %rbx
  407c28:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
  407c2f:	48 89 fb             	mov    %rdi,%rbx
  407c32:	48 89 b5 08 ff ff ff 	mov    %rsi,-0xf8(%rbp)
  407c39:	48 8b bd 08 ff ff ff 	mov    -0xf8(%rbp),%rdi
  407c40:	e8 cb 15 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return value.toString() ~ "[" ~ key.toString() ~ "]";
  407c45:	48 c7 85 10 ff ff ff 	movq   $0x1,-0xf0(%rbp)
  407c4c:	01 00 00 00 
  407c50:	48 c7 85 18 ff ff ff 	movq   $0x411c90,-0xe8(%rbp)
  407c57:	90 1c 41 00 
  407c5b:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  407c62:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  407c69:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  407c70:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  407c77:	4c 8b a5 28 ff ff ff 	mov    -0xd8(%rbp),%r12
  407c7e:	4c 8b ad 20 ff ff ff 	mov    -0xe0(%rbp),%r13
  407c85:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  407c8c:	48 8b 40 18          	mov    0x18(%rax),%rax
  407c90:	48 8b 00             	mov    (%rax),%rax
  407c93:	48 83 c0 08          	add    $0x8,%rax
  407c97:	48 8b 10             	mov    (%rax),%rdx
  407c9a:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  407ca1:	48 8b 70 18          	mov    0x18(%rax),%rsi
  407ca5:	48 8d bd f0 fe ff ff 	lea    -0x110(%rbp),%rdi
  407cac:	ff d2                	callq  *%rdx
  407cae:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  407cb5:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  407cbc:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  407cc3:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  407cca:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  407cd1:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  407cd8:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  407cdf:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  407ce6:	4c 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%r14
  407ced:	4c 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%r15
  407cf4:	48 c7 85 50 ff ff ff 	movq   $0x1,-0xb0(%rbp)
  407cfb:	01 00 00 00 
  407cff:	48 c7 85 58 ff ff ff 	movq   $0x411c92,-0xa8(%rbp)
  407d06:	92 1c 41 00 
  407d0a:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  407d11:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  407d18:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  407d1f:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  407d26:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  407d2d:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
  407d34:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  407d3b:	48 89 95 b8 fe ff ff 	mov    %rdx,-0x148(%rbp)
  407d42:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  407d49:	48 8b 40 10          	mov    0x10(%rax),%rax
  407d4d:	48 8b 00             	mov    (%rax),%rax
  407d50:	48 83 c0 08          	add    $0x8,%rax
  407d54:	48 8b 10             	mov    (%rax),%rdx
  407d57:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  407d5e:	48 8b 70 10          	mov    0x10(%rax),%rsi
  407d62:	48 8d bd e0 fe ff ff 	lea    -0x120(%rbp),%rdi
  407d69:	ff d2                	callq  *%rdx
  407d6b:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  407d72:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  407d79:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  407d80:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  407d87:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  407d8e:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  407d92:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  407d99:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  407d9d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  407da1:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
  407da5:	48 8d bd d0 fe ff ff 	lea    -0x130(%rbp),%rdi
  407dac:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
  407db3:	48 89 14 24          	mov    %rdx,(%rsp)
  407db7:	4c 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%r9
  407dbe:	49 89 c0             	mov    %rax,%r8
  407dc1:	ba 02 00 00 00       	mov    $0x2,%edx
  407dc6:	48 c7 c6 00 fd 40 00 	mov    $0x40fd00,%rsi
  407dcd:	b8 00 00 00 00       	mov    $0x0,%eax
  407dd2:	e8 e8 27 00 00       	callq  40a5bf <_d_arraycatnT>
  407dd7:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  407dde:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  407de2:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  407de9:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  407ded:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  407df1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  407df5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  407df9:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  407dfd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  407e01:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  407e05:	48 8d bd c0 fe ff ff 	lea    -0x140(%rbp),%rdi
  407e0c:	4c 89 34 24          	mov    %r14,(%rsp)
  407e10:	4d 89 f9             	mov    %r15,%r9
  407e13:	49 89 c0             	mov    %rax,%r8
  407e16:	ba 02 00 00 00       	mov    $0x2,%edx
  407e1b:	48 c7 c6 00 fd 40 00 	mov    $0x40fd00,%rsi
  407e22:	b8 00 00 00 00       	mov    $0x0,%eax
  407e27:	e8 93 27 00 00       	callq  40a5bf <_d_arraycatnT>
  407e2c:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
  407e33:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  407e37:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  407e3e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  407e42:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  407e46:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  407e4a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407e4e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  407e52:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407e56:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  407e5a:	4c 89 24 24          	mov    %r12,(%rsp)
  407e5e:	4d 89 e9             	mov    %r13,%r9
  407e61:	49 89 c0             	mov    %rax,%r8
  407e64:	ba 02 00 00 00       	mov    $0x2,%edx
  407e69:	48 c7 c6 00 fd 40 00 	mov    $0x40fd00,%rsi
  407e70:	48 89 df             	mov    %rbx,%rdi
  407e73:	b8 00 00 00 00       	mov    $0x0,%eax
  407e78:	e8 42 27 00 00       	callq  40a5bf <_d_arraycatnT>
	}
  407e7d:	48 89 d8             	mov    %rbx,%rax
  407e80:	48 81 c4 38 01 00 00 	add    $0x138,%rsp
  407e87:	5b                   	pop    %rbx
  407e88:	41 5c                	pop    %r12
  407e8a:	41 5d                	pop    %r13
  407e8c:	41 5e                	pop    %r14
  407e8e:	41 5f                	pop    %r15
  407e90:	c9                   	leaveq 
  407e91:	c3                   	retq   

0000000000407e92 <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  407e92:	55                   	push   %rbp
  407e93:	48 89 e5             	mov    %rsp,%rbp
  407e96:	48 83 ec 30          	sub    $0x30,%rsp
  407e9a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  407e9e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  407ea2:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  407ea6:	e8 65 13 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_AssociativeArray c;
  407eab:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  407eb2:	00 

		return this is o ||
  407eb3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407eb7:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  407ebb:	74 71                	je     407f2e <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi+0x9c>
  407ebd:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  407ec1:	48 c7 c6 00 c0 41 00 	mov    $0x41c000,%rsi
  407ec8:	e8 86 15 00 00       	callq  409453 <_d_dynamic_cast>
  407ecd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  407ed1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  407ed6:	74 5c                	je     407f34 <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi+0xa2>
  407ed8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407edc:	48 8b 40 18          	mov    0x18(%rax),%rax
  407ee0:	48 8b 00             	mov    (%rax),%rax
  407ee3:	48 83 c0 20          	add    $0x20,%rax
  407ee7:	48 8b 10             	mov    (%rax),%rdx
  407eea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407eee:	48 8b 40 18          	mov    0x18(%rax),%rax
  407ef2:	48 89 c6             	mov    %rax,%rsi
  407ef5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407ef9:	48 8b 78 18          	mov    0x18(%rax),%rdi
  407efd:	ff d2                	callq  *%rdx
  407eff:	85 c0                	test   %eax,%eax
  407f01:	74 31                	je     407f34 <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi+0xa2>
  407f03:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407f07:	48 8b 40 10          	mov    0x10(%rax),%rax
  407f0b:	48 8b 00             	mov    (%rax),%rax
  407f0e:	48 83 c0 20          	add    $0x20,%rax
  407f12:	48 8b 10             	mov    (%rax),%rdx
  407f15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407f19:	48 8b 40 10          	mov    0x10(%rax),%rax
  407f1d:	48 89 c6             	mov    %rax,%rsi
  407f20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407f24:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407f28:	ff d2                	callq  *%rdx
  407f2a:	85 c0                	test   %eax,%eax
  407f2c:	74 06                	je     407f34 <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi+0xa2>
  407f2e:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  407f32:	eb 04                	jmp    407f38 <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi+0xa6>
  407f34:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  407f38:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_AssociativeArray)o) !is null &&
				 this.key == c.key &&
				 this.value == c.value);
	}
  407f3c:	c9                   	leaveq 
  407f3d:	c3                   	retq   

0000000000407f3e <_D6object25TypeInfo_AssociativeArray5tsizeMFZm>:

	// BUG: need to add the rest of the functions

	size_t tsize()
  407f3e:	55                   	push   %rbp
  407f3f:	48 89 e5             	mov    %rsp,%rbp
  407f42:	48 83 ec 10          	sub    $0x10,%rsp
  407f46:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407f4a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  407f4e:	e8 bd 12 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return (char[int]).sizeof;
  407f53:	b8 08 00 00 00       	mov    $0x8,%eax
	}
  407f58:	c9                   	leaveq 
  407f59:	c3                   	retq   

0000000000407f5a <_D6object25TypeInfo_AssociativeArray4nextMFZC8TypeInfo>:

	TypeInfo next() { return value; }
  407f5a:	55                   	push   %rbp
  407f5b:	48 89 e5             	mov    %rsp,%rbp
  407f5e:	48 83 ec 10          	sub    $0x10,%rsp
  407f62:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407f66:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  407f6a:	e8 a1 12 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  407f6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407f73:	48 8b 40 10          	mov    0x10(%rax),%rax
  407f77:	c9                   	leaveq 
  407f78:	c3                   	retq   

0000000000407f79 <_D6object25TypeInfo_AssociativeArray5flagsMFZk>:
	uint flags() { return 1; }
  407f79:	55                   	push   %rbp
  407f7a:	48 89 e5             	mov    %rsp,%rbp
  407f7d:	48 83 ec 10          	sub    $0x10,%rsp
  407f81:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407f85:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  407f89:	e8 82 12 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  407f8e:	b8 01 00 00 00       	mov    $0x1,%eax
  407f93:	c9                   	leaveq 
  407f94:	c3                   	retq   

0000000000407f95 <_D6object17TypeInfo_Function8toStringMFZAa>:
	TypeInfo key;
}

class TypeInfo_Function : TypeInfo
{
	char[] toString()
  407f95:	55                   	push   %rbp
  407f96:	48 89 e5             	mov    %rsp,%rbp
  407f99:	41 55                	push   %r13
  407f9b:	41 54                	push   %r12
  407f9d:	53                   	push   %rbx
  407f9e:	48 83 ec 78          	sub    $0x78,%rsp
  407fa2:	48 89 fb             	mov    %rdi,%rbx
  407fa5:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
  407fa9:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  407fad:	e8 5e 12 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return next.toString() ~ "()";
  407fb2:	48 c7 45 a0 02 00 00 	movq   $0x2,-0x60(%rbp)
  407fb9:	00 
  407fba:	48 c7 45 a8 10 1e 41 	movq   $0x411e10,-0x58(%rbp)
  407fc1:	00 
  407fc2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  407fc6:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  407fca:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  407fce:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  407fd2:	4c 8b 65 b8          	mov    -0x48(%rbp),%r12
  407fd6:	4c 8b 6d b0          	mov    -0x50(%rbp),%r13
  407fda:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  407fde:	48 8b 40 10          	mov    0x10(%rax),%rax
  407fe2:	48 8b 00             	mov    (%rax),%rax
  407fe5:	48 83 c0 08          	add    $0x8,%rax
  407fe9:	48 8b 10             	mov    (%rax),%rdx
  407fec:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  407ff0:	48 8b 70 10          	mov    0x10(%rax),%rsi
  407ff4:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  407ff8:	ff d2                	callq  *%rdx
  407ffa:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  407ffe:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  408002:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  408006:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40800a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40800e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  408012:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408016:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40801a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40801e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  408022:	4c 89 24 24          	mov    %r12,(%rsp)
  408026:	4d 89 e9             	mov    %r13,%r9
  408029:	49 89 c0             	mov    %rax,%r8
  40802c:	ba 02 00 00 00       	mov    $0x2,%edx
  408031:	48 c7 c6 00 fd 40 00 	mov    $0x40fd00,%rsi
  408038:	48 89 df             	mov    %rbx,%rdi
  40803b:	b8 00 00 00 00       	mov    $0x0,%eax
  408040:	e8 7a 25 00 00       	callq  40a5bf <_d_arraycatnT>
	}
  408045:	48 89 d8             	mov    %rbx,%rax
  408048:	48 83 c4 78          	add    $0x78,%rsp
  40804c:	5b                   	pop    %rbx
  40804d:	41 5c                	pop    %r12
  40804f:	41 5d                	pop    %r13
  408051:	c9                   	leaveq 
  408052:	c3                   	retq   

0000000000408053 <_D6object17TypeInfo_Function8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  408053:	55                   	push   %rbp
  408054:	48 89 e5             	mov    %rsp,%rbp
  408057:	48 83 ec 30          	sub    $0x30,%rsp
  40805b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40805f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408063:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408067:	e8 a4 11 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Function c;
  40806c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  408073:	00 

		return this is o ||
  408074:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408078:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40807c:	74 46                	je     4080c4 <_D6object17TypeInfo_Function8opEqualsMFC6ObjectZi+0x71>
  40807e:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  408082:	48 c7 c6 a0 c0 41 00 	mov    $0x41c0a0,%rsi
  408089:	e8 c5 13 00 00       	callq  409453 <_d_dynamic_cast>
  40808e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  408092:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  408097:	74 31                	je     4080ca <_D6object17TypeInfo_Function8opEqualsMFC6ObjectZi+0x77>
  408099:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40809d:	48 8b 40 10          	mov    0x10(%rax),%rax
  4080a1:	48 8b 00             	mov    (%rax),%rax
  4080a4:	48 83 c0 20          	add    $0x20,%rax
  4080a8:	48 8b 10             	mov    (%rax),%rdx
  4080ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4080af:	48 8b 40 10          	mov    0x10(%rax),%rax
  4080b3:	48 89 c6             	mov    %rax,%rsi
  4080b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4080ba:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4080be:	ff d2                	callq  *%rdx
  4080c0:	85 c0                	test   %eax,%eax
  4080c2:	74 06                	je     4080ca <_D6object17TypeInfo_Function8opEqualsMFC6ObjectZi+0x77>
  4080c4:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  4080c8:	eb 04                	jmp    4080ce <_D6object17TypeInfo_Function8opEqualsMFC6ObjectZi+0x7b>
  4080ca:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  4080ce:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_Function)o) !is null &&
				 this.next == c.next);
	}
  4080d2:	c9                   	leaveq 
  4080d3:	c3                   	retq   

00000000004080d4 <_D6object17TypeInfo_Function5tsizeMFZm>:

	// BUG: need to add the rest of the functions

	size_t tsize()
  4080d4:	55                   	push   %rbp
  4080d5:	48 89 e5             	mov    %rsp,%rbp
  4080d8:	48 83 ec 10          	sub    $0x10,%rsp
  4080dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4080e0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4080e4:	e8 27 11 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return 0;		// no size for functions
  4080e9:	b8 00 00 00 00       	mov    $0x0,%eax
	}
  4080ee:	c9                   	leaveq 
  4080ef:	c3                   	retq   

00000000004080f0 <_D6object17TypeInfo_Delegate8toStringMFZAa>:
	TypeInfo next;
}

class TypeInfo_Delegate : TypeInfo
{
	char[] toString()
  4080f0:	55                   	push   %rbp
  4080f1:	48 89 e5             	mov    %rsp,%rbp
  4080f4:	41 55                	push   %r13
  4080f6:	41 54                	push   %r12
  4080f8:	53                   	push   %rbx
  4080f9:	48 83 ec 78          	sub    $0x78,%rsp
  4080fd:	48 89 fb             	mov    %rdi,%rbx
  408100:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
  408104:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  408108:	e8 03 11 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return next.toString() ~ " delegate()";
  40810d:	48 c7 45 a0 0b 00 00 	movq   $0xb,-0x60(%rbp)
  408114:	00 
  408115:	48 c7 45 a8 d0 1e 41 	movq   $0x411ed0,-0x58(%rbp)
  40811c:	00 
  40811d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  408121:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  408125:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  408129:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40812d:	4c 8b 65 b8          	mov    -0x48(%rbp),%r12
  408131:	4c 8b 6d b0          	mov    -0x50(%rbp),%r13
  408135:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  408139:	48 8b 40 10          	mov    0x10(%rax),%rax
  40813d:	48 8b 00             	mov    (%rax),%rax
  408140:	48 83 c0 08          	add    $0x8,%rax
  408144:	48 8b 10             	mov    (%rax),%rdx
  408147:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40814b:	48 8b 70 10          	mov    0x10(%rax),%rsi
  40814f:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  408153:	ff d2                	callq  *%rdx
  408155:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  408159:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40815d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  408161:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  408165:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  408169:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40816d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408171:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  408175:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408179:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  40817d:	4c 89 24 24          	mov    %r12,(%rsp)
  408181:	4d 89 e9             	mov    %r13,%r9
  408184:	49 89 c0             	mov    %rax,%r8
  408187:	ba 02 00 00 00       	mov    $0x2,%edx
  40818c:	48 c7 c6 00 fd 40 00 	mov    $0x40fd00,%rsi
  408193:	48 89 df             	mov    %rbx,%rdi
  408196:	b8 00 00 00 00       	mov    $0x0,%eax
  40819b:	e8 1f 24 00 00       	callq  40a5bf <_d_arraycatnT>
	}
  4081a0:	48 89 d8             	mov    %rbx,%rax
  4081a3:	48 83 c4 78          	add    $0x78,%rsp
  4081a7:	5b                   	pop    %rbx
  4081a8:	41 5c                	pop    %r12
  4081aa:	41 5d                	pop    %r13
  4081ac:	c9                   	leaveq 
  4081ad:	c3                   	retq   

00000000004081ae <_D6object17TypeInfo_Delegate8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  4081ae:	55                   	push   %rbp
  4081af:	48 89 e5             	mov    %rsp,%rbp
  4081b2:	48 83 ec 30          	sub    $0x30,%rsp
  4081b6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4081ba:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4081be:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4081c2:	e8 49 10 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Delegate c;
  4081c7:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4081ce:	00 

		return this is o ||
  4081cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4081d3:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  4081d7:	74 46                	je     40821f <_D6object17TypeInfo_Delegate8opEqualsMFC6ObjectZi+0x71>
  4081d9:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  4081dd:	48 c7 c6 40 c1 41 00 	mov    $0x41c140,%rsi
  4081e4:	e8 6a 12 00 00       	callq  409453 <_d_dynamic_cast>
  4081e9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4081ed:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4081f2:	74 31                	je     408225 <_D6object17TypeInfo_Delegate8opEqualsMFC6ObjectZi+0x77>
  4081f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4081f8:	48 8b 40 10          	mov    0x10(%rax),%rax
  4081fc:	48 8b 00             	mov    (%rax),%rax
  4081ff:	48 83 c0 20          	add    $0x20,%rax
  408203:	48 8b 10             	mov    (%rax),%rdx
  408206:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40820a:	48 8b 40 10          	mov    0x10(%rax),%rax
  40820e:	48 89 c6             	mov    %rax,%rsi
  408211:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408215:	48 8b 78 10          	mov    0x10(%rax),%rdi
  408219:	ff d2                	callq  *%rdx
  40821b:	85 c0                	test   %eax,%eax
  40821d:	74 06                	je     408225 <_D6object17TypeInfo_Delegate8opEqualsMFC6ObjectZi+0x77>
  40821f:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  408223:	eb 04                	jmp    408229 <_D6object17TypeInfo_Delegate8opEqualsMFC6ObjectZi+0x7b>
  408225:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  408229:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_Delegate)o) !is null &&
				 this.next == c.next);
	}
  40822d:	c9                   	leaveq 
  40822e:	c3                   	retq   

000000000040822f <_D6object17TypeInfo_Delegate5tsizeMFZm>:

	// BUG: need to add the rest of the functions

	size_t tsize()
  40822f:	55                   	push   %rbp
  408230:	48 89 e5             	mov    %rsp,%rbp
  408233:	48 83 ec 10          	sub    $0x10,%rsp
  408237:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40823b:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40823f:	e8 cc 0f 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{	alias int delegate() dg;
		return dg.sizeof;
  408244:	b8 10 00 00 00       	mov    $0x10,%eax
	}
  408249:	c9                   	leaveq 
  40824a:	c3                   	retq   

000000000040824b <_D6object17TypeInfo_Delegate5flagsMFZk>:

	uint flags() { return 1; }
  40824b:	55                   	push   %rbp
  40824c:	48 89 e5             	mov    %rsp,%rbp
  40824f:	48 83 ec 10          	sub    $0x10,%rsp
  408253:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408257:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40825b:	e8 b0 0f 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  408260:	b8 01 00 00 00       	mov    $0x1,%eax
  408265:	c9                   	leaveq 
  408266:	c3                   	retq   

0000000000408267 <_D6object14TypeInfo_Class8toStringMFZAa>:
	TypeInfo next;
}

class TypeInfo_Class : TypeInfo
{
	char[] toString() { return info.name; }
  408267:	55                   	push   %rbp
  408268:	48 89 e5             	mov    %rsp,%rbp
  40826b:	53                   	push   %rbx
  40826c:	48 83 ec 08          	sub    $0x8,%rsp
  408270:	48 89 fb             	mov    %rdi,%rbx
  408273:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408277:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40827b:	e8 90 0f 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  408280:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408284:	48 8b 50 10          	mov    0x10(%rax),%rdx
  408288:	48 8b 42 20          	mov    0x20(%rdx),%rax
  40828c:	48 89 03             	mov    %rax,(%rbx)
  40828f:	48 8b 42 28          	mov    0x28(%rdx),%rax
  408293:	48 89 43 08          	mov    %rax,0x8(%rbx)
  408297:	48 89 d8             	mov    %rbx,%rax
  40829a:	48 83 c4 08          	add    $0x8,%rsp
  40829e:	5b                   	pop    %rbx
  40829f:	c9                   	leaveq 
  4082a0:	c3                   	retq   

00000000004082a1 <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  4082a1:	55                   	push   %rbp
  4082a2:	48 89 e5             	mov    %rsp,%rbp
  4082a5:	48 83 ec 40          	sub    $0x40,%rsp
  4082a9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4082ad:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4082b1:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4082b5:	e8 56 0f 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Class c;
  4082ba:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4082c1:	00 

		return this is o ||
  4082c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4082c6:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  4082ca:	0f 84 9a 00 00 00    	je     40836a <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi+0xc9>
  4082d0:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  4082d4:	48 c7 c6 e0 c1 41 00 	mov    $0x41c1e0,%rsi
  4082db:	e8 73 11 00 00       	callq  409453 <_d_dynamic_cast>
  4082e0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4082e4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4082e9:	0f 84 81 00 00 00    	je     408370 <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi+0xcf>
  4082ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4082f3:	48 8b 40 10          	mov    0x10(%rax),%rax
  4082f7:	48 8b 50 20          	mov    0x20(%rax),%rdx
  4082fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4082ff:	48 8b 00             	mov    (%rax),%rax
  408302:	48 8b 00             	mov    (%rax),%rax
  408305:	48 8b 40 20          	mov    0x20(%rax),%rax
  408309:	48 39 c2             	cmp    %rax,%rdx
  40830c:	75 62                	jne    408370 <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi+0xcf>
  40830e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408312:	48 8b 40 10          	mov    0x10(%rax),%rax
  408316:	48 8b 48 20          	mov    0x20(%rax),%rcx
  40831a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40831e:	48 8b 00             	mov    (%rax),%rax
  408321:	48 8b 00             	mov    (%rax),%rax
  408324:	48 8b 50 28          	mov    0x28(%rax),%rdx
  408328:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40832c:	48 8b 40 10          	mov    0x10(%rax),%rax
  408330:	48 8b 40 28          	mov    0x28(%rax),%rax
  408334:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  408338:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40833c:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  408340:	fc                   	cld    
  408341:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  408345:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  408349:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40834d:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  408351:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  408355:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  408357:	0f 97 c2             	seta   %dl
  40835a:	0f 92 c0             	setb   %al
  40835d:	89 d1                	mov    %edx,%ecx
  40835f:	28 c1                	sub    %al,%cl
  408361:	89 c8                	mov    %ecx,%eax
  408363:	0f be c0             	movsbl %al,%eax
  408366:	85 c0                	test   %eax,%eax
  408368:	75 06                	jne    408370 <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi+0xcf>
  40836a:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  40836e:	eb 04                	jmp    408374 <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi+0xd3>
  408370:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  408374:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_Class)o) !is null &&
				 this.info.name == c.classinfo.name);
	}
  408378:	c9                   	leaveq 
  408379:	c3                   	retq   

000000000040837a <_D6object14TypeInfo_Class7getHashMFPvZm>:

	hash_t getHash(void *p)
  40837a:	55                   	push   %rbp
  40837b:	48 89 e5             	mov    %rsp,%rbp
  40837e:	48 83 ec 20          	sub    $0x20,%rsp
  408382:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408386:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40838a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40838e:	e8 7d 0e 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Object o = *cast(Object*)p;
  408393:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408397:	48 8b 00             	mov    (%rax),%rax
  40839a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		assert(o);
  40839e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4083a2:	e8 69 0e 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
		return o.toHash();
  4083a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4083ab:	48 8b 00             	mov    (%rax),%rax
  4083ae:	48 83 c0 10          	add    $0x10,%rax
  4083b2:	48 8b 00             	mov    (%rax),%rax
  4083b5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4083b9:	ff d0                	callq  *%rax
	}
  4083bb:	c9                   	leaveq 
  4083bc:	c3                   	retq   

00000000004083bd <_D6object14TypeInfo_Class6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  4083bd:	55                   	push   %rbp
  4083be:	48 89 e5             	mov    %rsp,%rbp
  4083c1:	48 83 ec 30          	sub    $0x30,%rsp
  4083c5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4083c9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4083cd:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4083d1:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4083d5:	e8 36 0e 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Object o1 = *cast(Object*)p1;
  4083da:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4083de:	48 8b 00             	mov    (%rax),%rax
  4083e1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = *cast(Object*)p2;
  4083e5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4083e9:	48 8b 00             	mov    (%rax),%rax
  4083ec:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		return (o1 is o2) || (o1 && o1.opEquals(o2));
  4083f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4083f4:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  4083f8:	74 23                	je     40841d <_D6object14TypeInfo_Class6equalsMFPvPvZi+0x60>
  4083fa:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4083ff:	74 22                	je     408423 <_D6object14TypeInfo_Class6equalsMFPvPvZi+0x66>
  408401:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408405:	48 8b 00             	mov    (%rax),%rax
  408408:	48 83 c0 20          	add    $0x20,%rax
  40840c:	48 8b 00             	mov    (%rax),%rax
  40840f:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  408413:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  408417:	ff d0                	callq  *%rax
  408419:	85 c0                	test   %eax,%eax
  40841b:	74 06                	je     408423 <_D6object14TypeInfo_Class6equalsMFPvPvZi+0x66>
  40841d:	c6 45 d7 01          	movb   $0x1,-0x29(%rbp)
  408421:	eb 04                	jmp    408427 <_D6object14TypeInfo_Class6equalsMFPvPvZi+0x6a>
  408423:	c6 45 d7 00          	movb   $0x0,-0x29(%rbp)
  408427:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
	}
  40842b:	c9                   	leaveq 
  40842c:	c3                   	retq   

000000000040842d <_D6object14TypeInfo_Class7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  40842d:	55                   	push   %rbp
  40842e:	48 89 e5             	mov    %rsp,%rbp
  408431:	48 83 ec 40          	sub    $0x40,%rsp
  408435:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408439:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40843d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  408441:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  408445:	e8 c6 0d 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Object o1 = *cast(Object*)p1;
  40844a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40844e:	48 8b 00             	mov    (%rax),%rax
  408451:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = *cast(Object*)p2;
  408455:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408459:	48 8b 00             	mov    (%rax),%rax
  40845c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		int c = 0;
  408460:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)

		// Regard null references as always being "less than"
		if (o1 !is o2)
  408467:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40846b:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  40846f:	74 43                	je     4084b4 <_D6object14TypeInfo_Class7compareMFPvPvZi+0x87>
		{
			if (o1)
  408471:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  408476:	74 35                	je     4084ad <_D6object14TypeInfo_Class7compareMFPvPvZi+0x80>
			{	if (!o2)
  408478:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  40847d:	0f 95 c0             	setne  %al
  408480:	83 f0 01             	xor    $0x1,%eax
  408483:	84 c0                	test   %al,%al
  408485:	74 09                	je     408490 <_D6object14TypeInfo_Class7compareMFPvPvZi+0x63>
					c = 1;
  408487:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  40848e:	eb 24                	jmp    4084b4 <_D6object14TypeInfo_Class7compareMFPvPvZi+0x87>
				else
					c = o1.opCmp(o2);
  408490:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408494:	48 8b 00             	mov    (%rax),%rax
  408497:	48 83 c0 18          	add    $0x18,%rax
  40849b:	48 8b 00             	mov    (%rax),%rax
  40849e:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  4084a2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4084a6:	ff d0                	callq  *%rax
  4084a8:	89 45 ec             	mov    %eax,-0x14(%rbp)
  4084ab:	eb 07                	jmp    4084b4 <_D6object14TypeInfo_Class7compareMFPvPvZi+0x87>
			}
			else
				c = -1;
  4084ad:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rbp)
		}
		return c;
  4084b4:	8b 45 ec             	mov    -0x14(%rbp),%eax
	}
  4084b7:	c9                   	leaveq 
  4084b8:	c3                   	retq   

00000000004084b9 <_D6object14TypeInfo_Class5tsizeMFZm>:

	size_t tsize()
  4084b9:	55                   	push   %rbp
  4084ba:	48 89 e5             	mov    %rsp,%rbp
  4084bd:	48 83 ec 10          	sub    $0x10,%rsp
  4084c1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4084c5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4084c9:	e8 42 0d 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return Object.sizeof;
  4084ce:	b8 08 00 00 00       	mov    $0x8,%eax
	}
  4084d3:	c9                   	leaveq 
  4084d4:	c3                   	retq   

00000000004084d5 <_D6object14TypeInfo_Class5flagsMFZk>:

	uint flags() { return 1; }
  4084d5:	55                   	push   %rbp
  4084d6:	48 89 e5             	mov    %rsp,%rbp
  4084d9:	48 83 ec 10          	sub    $0x10,%rsp
  4084dd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4084e1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4084e5:	e8 26 0d 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  4084ea:	b8 01 00 00 00       	mov    $0x1,%eax
  4084ef:	c9                   	leaveq 
  4084f0:	c3                   	retq   

00000000004084f1 <_D6object14TypeInfo_Class5offTiMFZAS6object14OffsetTypeInfo>:

	OffsetTypeInfo[] offTi()
  4084f1:	55                   	push   %rbp
  4084f2:	48 89 e5             	mov    %rsp,%rbp
  4084f5:	48 83 ec 10          	sub    $0x10,%rsp
  4084f9:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  4084fd:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
  408501:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  408505:	e8 06 0d 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return (info.flags & 4) ? info.offTi : null;
  40850a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40850e:	48 8b 40 10          	mov    0x10(%rax),%rax
  408512:	8b 40 68             	mov    0x68(%rax),%eax
  408515:	83 e0 04             	and    $0x4,%eax
  408518:	85 c0                	test   %eax,%eax
  40851a:	74 24                	je     408540 <_D6object14TypeInfo_Class5offTiMFZAS6object14OffsetTypeInfo+0x4f>
  40851c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408520:	48 8b 50 10          	mov    0x10(%rax),%rdx
  408524:	48 8b 42 78          	mov    0x78(%rdx),%rax
  408528:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40852c:	48 89 01             	mov    %rax,(%rcx)
  40852f:	48 8b 82 80 00 00 00 	mov    0x80(%rdx),%rax
  408536:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40853a:	48 89 42 08          	mov    %rax,0x8(%rdx)
  40853e:	eb 17                	jmp    408557 <_D6object14TypeInfo_Class5offTiMFZAS6object14OffsetTypeInfo+0x66>
  408540:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  408544:	48 c7 01 00 00 00 00 	movq   $0x0,(%rcx)
  40854b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40854f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  408556:	00 
	}
  408557:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40855b:	c9                   	leaveq 
  40855c:	c3                   	retq   

000000000040855d <_D6object18TypeInfo_Interface8toStringMFZAa>:
	ClassInfo info;
}

class TypeInfo_Interface : TypeInfo
{
	char[] toString() { return info.name; }
  40855d:	55                   	push   %rbp
  40855e:	48 89 e5             	mov    %rsp,%rbp
  408561:	53                   	push   %rbx
  408562:	48 83 ec 08          	sub    $0x8,%rsp
  408566:	48 89 fb             	mov    %rdi,%rbx
  408569:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40856d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408571:	e8 9a 0c 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  408576:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40857a:	48 8b 50 10          	mov    0x10(%rax),%rdx
  40857e:	48 8b 42 20          	mov    0x20(%rdx),%rax
  408582:	48 89 03             	mov    %rax,(%rbx)
  408585:	48 8b 42 28          	mov    0x28(%rdx),%rax
  408589:	48 89 43 08          	mov    %rax,0x8(%rbx)
  40858d:	48 89 d8             	mov    %rbx,%rax
  408590:	48 83 c4 08          	add    $0x8,%rsp
  408594:	5b                   	pop    %rbx
  408595:	c9                   	leaveq 
  408596:	c3                   	retq   

0000000000408597 <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  408597:	55                   	push   %rbp
  408598:	48 89 e5             	mov    %rsp,%rbp
  40859b:	48 83 ec 40          	sub    $0x40,%rsp
  40859f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4085a3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4085a7:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4085ab:	e8 60 0c 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Interface c;
  4085b0:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4085b7:	00 

		return this is o ||
  4085b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4085bc:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  4085c0:	0f 84 9a 00 00 00    	je     408660 <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi+0xc9>
  4085c6:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  4085ca:	48 c7 c6 80 c2 41 00 	mov    $0x41c280,%rsi
  4085d1:	e8 7d 0e 00 00       	callq  409453 <_d_dynamic_cast>
  4085d6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4085da:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4085df:	0f 84 81 00 00 00    	je     408666 <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi+0xcf>
  4085e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4085e9:	48 8b 40 10          	mov    0x10(%rax),%rax
  4085ed:	48 8b 50 20          	mov    0x20(%rax),%rdx
  4085f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4085f5:	48 8b 00             	mov    (%rax),%rax
  4085f8:	48 8b 00             	mov    (%rax),%rax
  4085fb:	48 8b 40 20          	mov    0x20(%rax),%rax
  4085ff:	48 39 c2             	cmp    %rax,%rdx
  408602:	75 62                	jne    408666 <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi+0xcf>
  408604:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408608:	48 8b 40 10          	mov    0x10(%rax),%rax
  40860c:	48 8b 48 20          	mov    0x20(%rax),%rcx
  408610:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408614:	48 8b 00             	mov    (%rax),%rax
  408617:	48 8b 00             	mov    (%rax),%rax
  40861a:	48 8b 50 28          	mov    0x28(%rax),%rdx
  40861e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408622:	48 8b 40 10          	mov    0x10(%rax),%rax
  408626:	48 8b 40 28          	mov    0x28(%rax),%rax
  40862a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40862e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  408632:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  408636:	fc                   	cld    
  408637:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40863b:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  40863f:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  408643:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  408647:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  40864b:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  40864d:	0f 97 c2             	seta   %dl
  408650:	0f 92 c0             	setb   %al
  408653:	89 d1                	mov    %edx,%ecx
  408655:	28 c1                	sub    %al,%cl
  408657:	89 c8                	mov    %ecx,%eax
  408659:	0f be c0             	movsbl %al,%eax
  40865c:	85 c0                	test   %eax,%eax
  40865e:	75 06                	jne    408666 <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi+0xcf>
  408660:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  408664:	eb 04                	jmp    40866a <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi+0xd3>
  408666:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  40866a:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_Interface)o) !is null &&
				 this.info.name == c.classinfo.name);
	}
  40866e:	c9                   	leaveq 
  40866f:	c3                   	retq   

0000000000408670 <_D6object18TypeInfo_Interface7getHashMFPvZm>:

	hash_t getHash(void *p)
  408670:	55                   	push   %rbp
  408671:	48 89 e5             	mov    %rsp,%rbp
  408674:	48 83 ec 20          	sub    $0x20,%rsp
  408678:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40867c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408680:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408684:	e8 87 0b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Interface* pi = **cast(Interface ***)*cast(void**)p;
  408689:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40868d:	48 8b 00             	mov    (%rax),%rax
  408690:	48 8b 00             	mov    (%rax),%rax
  408693:	48 8b 00             	mov    (%rax),%rax
  408696:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o = cast(Object)(*cast(void**)p - pi.offset);
  40869a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40869e:	48 8b 10             	mov    (%rax),%rdx
  4086a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4086a5:	48 83 c0 18          	add    $0x18,%rax
  4086a9:	8b 00                	mov    (%rax),%eax
  4086ab:	48 98                	cltq   
  4086ad:	48 89 d1             	mov    %rdx,%rcx
  4086b0:	48 29 c1             	sub    %rax,%rcx
  4086b3:	48 89 c8             	mov    %rcx,%rax
  4086b6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		assert(o);
  4086ba:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4086be:	e8 4d 0b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
		return o.toHash();
  4086c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4086c7:	48 8b 00             	mov    (%rax),%rax
  4086ca:	48 83 c0 10          	add    $0x10,%rax
  4086ce:	48 8b 00             	mov    (%rax),%rax
  4086d1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4086d5:	ff d0                	callq  *%rax
	}
  4086d7:	c9                   	leaveq 
  4086d8:	c3                   	retq   

00000000004086d9 <_D6object18TypeInfo_Interface6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  4086d9:	55                   	push   %rbp
  4086da:	48 89 e5             	mov    %rsp,%rbp
  4086dd:	48 83 ec 40          	sub    $0x40,%rsp
  4086e1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4086e5:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4086e9:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4086ed:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4086f1:	e8 1a 0b 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Interface* pi = **cast(Interface ***)*cast(void**)p1;
  4086f6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4086fa:	48 8b 00             	mov    (%rax),%rax
  4086fd:	48 8b 00             	mov    (%rax),%rax
  408700:	48 8b 00             	mov    (%rax),%rax
  408703:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o1 = cast(Object)(*cast(void**)p1 - pi.offset);
  408707:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40870b:	48 8b 10             	mov    (%rax),%rdx
  40870e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408712:	48 83 c0 18          	add    $0x18,%rax
  408716:	8b 00                	mov    (%rax),%eax
  408718:	48 98                	cltq   
  40871a:	48 89 d1             	mov    %rdx,%rcx
  40871d:	48 29 c1             	sub    %rax,%rcx
  408720:	48 89 c8             	mov    %rcx,%rax
  408723:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		pi = **cast(Interface ***)*cast(void**)p2;
  408727:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40872b:	48 8b 00             	mov    (%rax),%rax
  40872e:	48 8b 00             	mov    (%rax),%rax
  408731:	48 8b 00             	mov    (%rax),%rax
  408734:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = cast(Object)(*cast(void**)p2 - pi.offset);
  408738:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40873c:	48 8b 10             	mov    (%rax),%rdx
  40873f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408743:	48 83 c0 18          	add    $0x18,%rax
  408747:	8b 00                	mov    (%rax),%eax
  408749:	48 98                	cltq   
  40874b:	48 89 d1             	mov    %rdx,%rcx
  40874e:	48 29 c1             	sub    %rax,%rcx
  408751:	48 89 c8             	mov    %rcx,%rax
  408754:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		return o1 == o2 || (o1 && o1.opCmp(o2) == 0);
  408758:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40875c:	48 8b 00             	mov    (%rax),%rax
  40875f:	48 83 c0 20          	add    $0x20,%rax
  408763:	48 8b 00             	mov    (%rax),%rax
  408766:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40876a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40876e:	ff d0                	callq  *%rax
  408770:	85 c0                	test   %eax,%eax
  408772:	75 23                	jne    408797 <_D6object18TypeInfo_Interface6equalsMFPvPvZi+0xbe>
  408774:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  408779:	74 22                	je     40879d <_D6object18TypeInfo_Interface6equalsMFPvPvZi+0xc4>
  40877b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40877f:	48 8b 00             	mov    (%rax),%rax
  408782:	48 83 c0 18          	add    $0x18,%rax
  408786:	48 8b 00             	mov    (%rax),%rax
  408789:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40878d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408791:	ff d0                	callq  *%rax
  408793:	85 c0                	test   %eax,%eax
  408795:	75 06                	jne    40879d <_D6object18TypeInfo_Interface6equalsMFPvPvZi+0xc4>
  408797:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
  40879b:	eb 04                	jmp    4087a1 <_D6object18TypeInfo_Interface6equalsMFPvPvZi+0xc8>
  40879d:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  4087a1:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
	}
  4087a5:	c9                   	leaveq 
  4087a6:	c3                   	retq   

00000000004087a7 <_D6object18TypeInfo_Interface7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  4087a7:	55                   	push   %rbp
  4087a8:	48 89 e5             	mov    %rsp,%rbp
  4087ab:	48 83 ec 40          	sub    $0x40,%rsp
  4087af:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4087b3:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4087b7:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4087bb:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4087bf:	e8 4c 0a 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Interface* pi = **cast(Interface ***)*cast(void**)p1;
  4087c4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4087c8:	48 8b 00             	mov    (%rax),%rax
  4087cb:	48 8b 00             	mov    (%rax),%rax
  4087ce:	48 8b 00             	mov    (%rax),%rax
  4087d1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o1 = cast(Object)(*cast(void**)p1 - pi.offset);
  4087d5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4087d9:	48 8b 10             	mov    (%rax),%rdx
  4087dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4087e0:	48 83 c0 18          	add    $0x18,%rax
  4087e4:	8b 00                	mov    (%rax),%eax
  4087e6:	48 98                	cltq   
  4087e8:	48 89 d1             	mov    %rdx,%rcx
  4087eb:	48 29 c1             	sub    %rax,%rcx
  4087ee:	48 89 c8             	mov    %rcx,%rax
  4087f1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		pi = **cast(Interface ***)*cast(void**)p2;
  4087f5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4087f9:	48 8b 00             	mov    (%rax),%rax
  4087fc:	48 8b 00             	mov    (%rax),%rax
  4087ff:	48 8b 00             	mov    (%rax),%rax
  408802:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = cast(Object)(*cast(void**)p2 - pi.offset);
  408806:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40880a:	48 8b 10             	mov    (%rax),%rdx
  40880d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408811:	48 83 c0 18          	add    $0x18,%rax
  408815:	8b 00                	mov    (%rax),%eax
  408817:	48 98                	cltq   
  408819:	48 89 d1             	mov    %rdx,%rcx
  40881c:	48 29 c1             	sub    %rax,%rcx
  40881f:	48 89 c8             	mov    %rcx,%rax
  408822:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		int c = 0;
  408826:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)

		// Regard null references as always being "less than"
		if (o1 != o2)
  40882d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408831:	48 8b 00             	mov    (%rax),%rax
  408834:	48 83 c0 20          	add    $0x20,%rax
  408838:	48 8b 00             	mov    (%rax),%rax
  40883b:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40883f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408843:	ff d0                	callq  *%rax
  408845:	85 c0                	test   %eax,%eax
  408847:	0f 95 c0             	setne  %al
  40884a:	83 f0 01             	xor    $0x1,%eax
  40884d:	84 c0                	test   %al,%al
  40884f:	74 43                	je     408894 <_D6object18TypeInfo_Interface7compareMFPvPvZi+0xed>
		{
			if (o1)
  408851:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  408856:	74 35                	je     40888d <_D6object18TypeInfo_Interface7compareMFPvPvZi+0xe6>
			{	if (!o2)
  408858:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  40885d:	0f 95 c0             	setne  %al
  408860:	83 f0 01             	xor    $0x1,%eax
  408863:	84 c0                	test   %al,%al
  408865:	74 09                	je     408870 <_D6object18TypeInfo_Interface7compareMFPvPvZi+0xc9>
					c = 1;
  408867:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  40886e:	eb 24                	jmp    408894 <_D6object18TypeInfo_Interface7compareMFPvPvZi+0xed>
				else
					c = o1.opCmp(o2);
  408870:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408874:	48 8b 00             	mov    (%rax),%rax
  408877:	48 83 c0 18          	add    $0x18,%rax
  40887b:	48 8b 00             	mov    (%rax),%rax
  40887e:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  408882:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408886:	ff d0                	callq  *%rax
  408888:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  40888b:	eb 07                	jmp    408894 <_D6object18TypeInfo_Interface7compareMFPvPvZi+0xed>
			}
			else
				c = -1;
  40888d:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
		}
		return c;
  408894:	8b 45 e4             	mov    -0x1c(%rbp),%eax
	}
  408897:	c9                   	leaveq 
  408898:	c3                   	retq   

0000000000408899 <_D6object18TypeInfo_Interface5tsizeMFZm>:

	size_t tsize()
  408899:	55                   	push   %rbp
  40889a:	48 89 e5             	mov    %rsp,%rbp
  40889d:	48 83 ec 10          	sub    $0x10,%rsp
  4088a1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4088a5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4088a9:	e8 62 09 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return Object.sizeof;
  4088ae:	b8 08 00 00 00       	mov    $0x8,%eax
	}
  4088b3:	c9                   	leaveq 
  4088b4:	c3                   	retq   

00000000004088b5 <_D6object18TypeInfo_Interface5flagsMFZk>:

	uint flags() { return 1; }
  4088b5:	55                   	push   %rbp
  4088b6:	48 89 e5             	mov    %rsp,%rbp
  4088b9:	48 83 ec 10          	sub    $0x10,%rsp
  4088bd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4088c1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4088c5:	e8 46 09 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  4088ca:	b8 01 00 00 00       	mov    $0x1,%eax
  4088cf:	c9                   	leaveq 
  4088d0:	c3                   	retq   

00000000004088d1 <_D6object15TypeInfo_Struct8toStringMFZAa>:
	ClassInfo info;
}

class TypeInfo_Struct : TypeInfo
{
	char[] toString() { return name; }
  4088d1:	55                   	push   %rbp
  4088d2:	48 89 e5             	mov    %rsp,%rbp
  4088d5:	53                   	push   %rbx
  4088d6:	48 83 ec 08          	sub    $0x8,%rsp
  4088da:	48 89 fb             	mov    %rdi,%rbx
  4088dd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4088e1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4088e5:	e8 26 09 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  4088ea:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4088ee:	48 8b 42 10          	mov    0x10(%rdx),%rax
  4088f2:	48 89 03             	mov    %rax,(%rbx)
  4088f5:	48 8b 42 18          	mov    0x18(%rdx),%rax
  4088f9:	48 89 43 08          	mov    %rax,0x8(%rbx)
  4088fd:	48 89 d8             	mov    %rbx,%rax
  408900:	48 83 c4 08          	add    $0x8,%rsp
  408904:	5b                   	pop    %rbx
  408905:	c9                   	leaveq 
  408906:	c3                   	retq   

0000000000408907 <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  408907:	55                   	push   %rbp
  408908:	48 89 e5             	mov    %rsp,%rbp
  40890b:	53                   	push   %rbx
  40890c:	48 83 ec 68          	sub    $0x68,%rsp
  408910:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  408914:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  408918:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  40891c:	e8 ef 08 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Struct s;
  408921:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  408928:	00 

		return this is o ||
  408929:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40892d:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  408931:	0f 84 c3 00 00 00    	je     4089fa <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xf3>
  408937:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  40893b:	48 c7 c6 20 c3 41 00 	mov    $0x41c320,%rsi
  408942:	e8 0c 0b 00 00       	callq  409453 <_d_dynamic_cast>
  408947:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40894b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  408950:	0f 84 aa 00 00 00    	je     408a00 <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xf9>
  408956:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40895a:	48 8b 50 10          	mov    0x10(%rax),%rdx
  40895e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408962:	48 8b 40 10          	mov    0x10(%rax),%rax
  408966:	48 39 c2             	cmp    %rax,%rdx
  408969:	0f 85 91 00 00 00    	jne    408a00 <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xf9>
  40896f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408973:	48 8b 48 10          	mov    0x10(%rax),%rcx
  408977:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40897b:	48 8b 50 18          	mov    0x18(%rax),%rdx
  40897f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408983:	48 8b 40 18          	mov    0x18(%rax),%rax
  408987:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40898b:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  40898f:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  408993:	fc                   	cld    
  408994:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  408998:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
  40899c:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  4089a0:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  4089a4:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  4089a8:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  4089aa:	0f 97 c2             	seta   %dl
  4089ad:	0f 92 c0             	setb   %al
  4089b0:	89 d1                	mov    %edx,%ecx
  4089b2:	28 c1                	sub    %al,%cl
  4089b4:	89 c8                	mov    %ecx,%eax
  4089b6:	0f be c0             	movsbl %al,%eax
  4089b9:	85 c0                	test   %eax,%eax
  4089bb:	75 43                	jne    408a00 <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xf9>
  4089bd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4089c1:	48 8b 00             	mov    (%rax),%rax
  4089c4:	48 83 c0 58          	add    $0x58,%rax
  4089c8:	48 8b 00             	mov    (%rax),%rax
  4089cb:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
  4089cf:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  4089d3:	ff d0                	callq  *%rax
  4089d5:	48 8b 5d c0          	mov    -0x40(%rbp),%rbx
  4089d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4089dd:	48 8b 00             	mov    (%rax),%rax
  4089e0:	48 83 c0 58          	add    $0x58,%rax
  4089e4:	48 8b 00             	mov    (%rax),%rax
  4089e7:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
  4089eb:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4089ef:	ff d0                	callq  *%rax
  4089f1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4089f5:	48 39 c3             	cmp    %rax,%rbx
  4089f8:	75 06                	jne    408a00 <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xf9>
  4089fa:	c6 45 af 01          	movb   $0x1,-0x51(%rbp)
  4089fe:	eb 04                	jmp    408a04 <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xfd>
  408a00:	c6 45 af 00          	movb   $0x0,-0x51(%rbp)
  408a04:	0f b6 45 af          	movzbl -0x51(%rbp),%eax
				((s = cast(TypeInfo_Struct)o) !is null &&
				 this.name == s.name &&
				 this.init.length == s.init.length);
	}
  408a08:	48 83 c4 68          	add    $0x68,%rsp
  408a0c:	5b                   	pop    %rbx
  408a0d:	c9                   	leaveq 
  408a0e:	c3                   	retq   

0000000000408a0f <_D6object15TypeInfo_Struct7getHashMFPvZm>:

	hash_t getHash(void *p)
  408a0f:	55                   	push   %rbp
  408a10:	48 89 e5             	mov    %rsp,%rbp
  408a13:	48 83 ec 40          	sub    $0x40,%rsp
  408a17:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  408a1b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  408a1f:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  408a23:	e8 e8 07 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{	hash_t h;
  408a28:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  408a2f:	00 

		assert(p);
  408a30:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  408a35:	75 22                	jne    408a59 <_D6object15TypeInfo_Struct7getHashMFPvZm+0x4a>
  408a37:	48 c7 45 d0 08 00 00 	movq   $0x8,-0x30(%rbp)
  408a3e:	00 
  408a3f:	48 c7 45 d8 80 18 41 	movq   $0x411880,-0x28(%rbp)
  408a46:	00 
  408a47:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  408a4b:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  408a4f:	ba 6a 03 00 00       	mov    $0x36a,%edx
  408a54:	e8 0d 22 00 00       	callq  40ac66 <_d_assert>
		if (xtoHash)
  408a59:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408a5d:	48 8b 40 30          	mov    0x30(%rax),%rax
  408a61:	48 85 c0             	test   %rax,%rax
  408a64:	74 14                	je     408a7a <_D6object15TypeInfo_Struct7getHashMFPvZm+0x6b>
		{	//printf("getHash() using xtoHash\n");
			h = (*xtoHash)(p);
  408a66:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408a6a:	48 8b 40 30          	mov    0x30(%rax),%rax
  408a6e:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  408a72:	ff d0                	callq  *%rax
  408a74:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  408a78:	eb 5d                	jmp    408ad7 <_D6object15TypeInfo_Struct7getHashMFPvZm+0xc8>
		{
			//printf("getHash() using default hash\n");
			// A sorry hash algorithm.
			// Should use the one for strings.
			// BUG: relies on the GC not moving objects
			for (size_t i = 0; i < init.length; i++)
  408a7a:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  408a81:	00 
  408a82:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408a86:	48 8b 00             	mov    (%rax),%rax
  408a89:	48 83 c0 58          	add    $0x58,%rax
  408a8d:	48 8b 00             	mov    (%rax),%rax
  408a90:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  408a94:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  408a98:	ff d0                	callq  *%rax
  408a9a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408a9e:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  408aa2:	0f 92 c0             	setb   %al
  408aa5:	83 f0 01             	xor    $0x1,%eax
  408aa8:	84 c0                	test   %al,%al
  408aaa:	75 2b                	jne    408ad7 <_D6object15TypeInfo_Struct7getHashMFPvZm+0xc8>
			{	h = h * 9 + *cast(ubyte*)p;
  408aac:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  408ab0:	48 89 d0             	mov    %rdx,%rax
  408ab3:	48 c1 e0 03          	shl    $0x3,%rax
  408ab7:	48 8d 14 10          	lea    (%rax,%rdx,1),%rdx
  408abb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  408abf:	0f b6 00             	movzbl (%rax),%eax
  408ac2:	0f b6 c0             	movzbl %al,%eax
  408ac5:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  408ac9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
				p++;
  408acd:	48 ff 45 c0          	incq   -0x40(%rbp)
  408ad1:	48 ff 45 f8          	incq   -0x8(%rbp)
  408ad5:	eb ab                	jmp    408a82 <_D6object15TypeInfo_Struct7getHashMFPvZm+0x73>
			}
		}
		return h;
  408ad7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
	}
  408adb:	c9                   	leaveq 
  408adc:	c3                   	retq   

0000000000408add <_D6object15TypeInfo_Struct6equalsMFPvPvZi>:

	int equals(void *p2, void *p1)
  408add:	55                   	push   %rbp
  408ade:	48 89 e5             	mov    %rsp,%rbp
  408ae1:	48 83 ec 40          	sub    $0x40,%rsp
  408ae5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408ae9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408aed:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  408af1:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  408af5:	e8 16 07 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{	int c;
  408afa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

		if (p1 == p2)
  408b01:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408b05:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  408b09:	75 0c                	jne    408b17 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0x3a>
			c = 1;
  408b0b:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  408b12:	e9 80 00 00 00       	jmpq   408b97 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0xba>
		else if (!p1 || !p2)
  408b17:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  408b1c:	0f 95 c0             	setne  %al
  408b1f:	83 f0 01             	xor    $0x1,%eax
  408b22:	84 c0                	test   %al,%al
  408b24:	75 0f                	jne    408b35 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0x58>
  408b26:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  408b2b:	0f 95 c0             	setne  %al
  408b2e:	83 f0 01             	xor    $0x1,%eax
  408b31:	84 c0                	test   %al,%al
  408b33:	74 09                	je     408b3e <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0x61>
			c = 0;
  408b35:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	int equals(void *p2, void *p1)
	{	int c;

		if (p1 == p2)
			c = 1;
		else if (!p1 || !p2)
  408b3c:	eb 59                	jmp    408b97 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0xba>
			c = 0;
		else if (xopEquals)
  408b3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408b42:	48 8b 40 38          	mov    0x38(%rax),%rax
  408b46:	48 85 c0             	test   %rax,%rax
  408b49:	74 17                	je     408b62 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0x85>
			c = (*xopEquals)(p1, p2);
  408b4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408b4f:	48 8b 40 38          	mov    0x38(%rax),%rax
  408b53:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  408b57:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  408b5b:	ff d0                	callq  *%rax
  408b5d:	89 45 fc             	mov    %eax,-0x4(%rbp)
  408b60:	eb 35                	jmp    408b97 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0xba>
		else
			// BUG: relies on the GC not moving objects
			c = (memcmp(cast(ubyte*)p1, cast(ubyte*)p2, init.length) == 0);
  408b62:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408b66:	48 8b 00             	mov    (%rax),%rax
  408b69:	48 83 c0 58          	add    $0x58,%rax
  408b6d:	48 8b 00             	mov    (%rax),%rax
  408b70:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  408b74:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  408b78:	ff d0                	callq  *%rax
  408b7a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  408b7e:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  408b82:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  408b86:	e8 bd 4b 00 00       	callq  40d748 <_D6kernel4core6system6memcmpFPvPvmZl>
  408b8b:	48 85 c0             	test   %rax,%rax
  408b8e:	0f 94 c0             	sete   %al
  408b91:	0f b6 c0             	movzbl %al,%eax
  408b94:	89 45 fc             	mov    %eax,-0x4(%rbp)
		return c;
  408b97:	8b 45 fc             	mov    -0x4(%rbp),%eax
	}
  408b9a:	c9                   	leaveq 
  408b9b:	c3                   	retq   

0000000000408b9c <_D6object15TypeInfo_Struct7compareMFPvPvZi>:

	int compare(void *p2, void *p1)
  408b9c:	55                   	push   %rbp
  408b9d:	48 89 e5             	mov    %rsp,%rbp
  408ba0:	48 83 ec 40          	sub    $0x40,%rsp
  408ba4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408ba8:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408bac:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  408bb0:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  408bb4:	e8 57 06 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		int c = 0;
  408bb9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

		// Regard null references as always being "less than"
		if (p1 != p2)
  408bc0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408bc4:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  408bc8:	74 78                	je     408c42 <_D6object15TypeInfo_Struct7compareMFPvPvZi+0xa6>
		{
			if (p1)
  408bca:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  408bcf:	74 6a                	je     408c3b <_D6object15TypeInfo_Struct7compareMFPvPvZi+0x9f>
			{	if (!p2)
  408bd1:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  408bd6:	0f 95 c0             	setne  %al
  408bd9:	83 f0 01             	xor    $0x1,%eax
  408bdc:	84 c0                	test   %al,%al
  408bde:	74 09                	je     408be9 <_D6object15TypeInfo_Struct7compareMFPvPvZi+0x4d>
					c = 1;
  408be0:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  408be7:	eb 59                	jmp    408c42 <_D6object15TypeInfo_Struct7compareMFPvPvZi+0xa6>
				else if (xopCmp)
  408be9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408bed:	48 8b 40 40          	mov    0x40(%rax),%rax
  408bf1:	48 85 c0             	test   %rax,%rax
  408bf4:	74 17                	je     408c0d <_D6object15TypeInfo_Struct7compareMFPvPvZi+0x71>
					c = (*xopCmp)(p1, p2);
  408bf6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408bfa:	48 8b 40 40          	mov    0x40(%rax),%rax
  408bfe:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  408c02:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  408c06:	ff d0                	callq  *%rax
  408c08:	89 45 fc             	mov    %eax,-0x4(%rbp)
  408c0b:	eb 35                	jmp    408c42 <_D6object15TypeInfo_Struct7compareMFPvPvZi+0xa6>
				else
					// BUG: relies on the GC not moving objects
					c = memcmp(cast(ubyte*)p1, cast(ubyte*)p2, init.length);
  408c0d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408c11:	48 8b 00             	mov    (%rax),%rax
  408c14:	48 83 c0 58          	add    $0x58,%rax
  408c18:	48 8b 00             	mov    (%rax),%rax
  408c1b:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  408c1f:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  408c23:	ff d0                	callq  *%rax
  408c25:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  408c29:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  408c2d:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  408c31:	e8 12 4b 00 00       	callq  40d748 <_D6kernel4core6system6memcmpFPvPvmZl>
  408c36:	89 45 fc             	mov    %eax,-0x4(%rbp)
  408c39:	eb 07                	jmp    408c42 <_D6object15TypeInfo_Struct7compareMFPvPvZi+0xa6>
			}
			else
				c = -1;
  408c3b:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
		}
		return c;
  408c42:	8b 45 fc             	mov    -0x4(%rbp),%eax
	}
  408c45:	c9                   	leaveq 
  408c46:	c3                   	retq   

0000000000408c47 <_D6object15TypeInfo_Struct5tsizeMFZm>:

	size_t tsize()
  408c47:	55                   	push   %rbp
  408c48:	48 89 e5             	mov    %rsp,%rbp
  408c4b:	48 83 ec 20          	sub    $0x20,%rsp
  408c4f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408c53:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408c57:	e8 b4 05 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return init.length;
  408c5c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408c60:	48 8b 00             	mov    (%rax),%rax
  408c63:	48 83 c0 58          	add    $0x58,%rax
  408c67:	48 8b 00             	mov    (%rax),%rax
  408c6a:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
  408c6e:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  408c72:	ff d0                	callq  *%rax
  408c74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
	}
  408c78:	c9                   	leaveq 
  408c79:	c3                   	retq   

0000000000408c7a <_D6object15TypeInfo_Struct4initMFZAv>:

	void[] init() { return m_init; }
  408c7a:	55                   	push   %rbp
  408c7b:	48 89 e5             	mov    %rsp,%rbp
  408c7e:	53                   	push   %rbx
  408c7f:	48 83 ec 08          	sub    $0x8,%rsp
  408c83:	48 89 fb             	mov    %rdi,%rbx
  408c86:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408c8a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408c8e:	e8 7d 05 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  408c93:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  408c97:	48 8b 42 20          	mov    0x20(%rdx),%rax
  408c9b:	48 89 03             	mov    %rax,(%rbx)
  408c9e:	48 8b 42 28          	mov    0x28(%rdx),%rax
  408ca2:	48 89 43 08          	mov    %rax,0x8(%rbx)
  408ca6:	48 89 d8             	mov    %rbx,%rax
  408ca9:	48 83 c4 08          	add    $0x8,%rsp
  408cad:	5b                   	pop    %rbx
  408cae:	c9                   	leaveq 
  408caf:	c3                   	retq   

0000000000408cb0 <_D6object15TypeInfo_Struct5flagsMFZk>:

	uint flags() { return m_flags; }
  408cb0:	55                   	push   %rbp
  408cb1:	48 89 e5             	mov    %rsp,%rbp
  408cb4:	48 83 ec 10          	sub    $0x10,%rsp
  408cb8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408cbc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  408cc0:	e8 4b 05 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  408cc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408cc9:	8b 40 50             	mov    0x50(%rax),%eax
  408ccc:	c9                   	leaveq 
  408ccd:	c3                   	retq   

0000000000408cce <_D6object14TypeInfo_Tuple8toStringMFZAa>:

class TypeInfo_Tuple : TypeInfo
{
	TypeInfo[] elements;

	char[] toString()
  408cce:	55                   	push   %rbp
  408ccf:	48 89 e5             	mov    %rsp,%rbp
  408cd2:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  408cd9:	48 89 bd 30 ff ff ff 	mov    %rdi,-0xd0(%rbp)
  408ce0:	48 89 b5 78 ff ff ff 	mov    %rsi,-0x88(%rbp)
  408ce7:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
  408cee:	e8 1d 05 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		char[] s;
  408cf3:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  408cfa:	00 
  408cfb:	48 c7 45 88 00 00 00 	movq   $0x0,-0x78(%rbp)
  408d02:	00 
		s = "(";
  408d03:	48 c7 45 80 01 00 00 	movq   $0x1,-0x80(%rbp)
  408d0a:	00 
  408d0b:	48 c7 45 88 d0 21 41 	movq   $0x4121d0,-0x78(%rbp)
  408d12:	00 
		foreach (i, element; elements)
  408d13:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  408d1a:	00 
  408d1b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  408d22:	48 8b 40 18          	mov    0x18(%rax),%rax
  408d26:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  408d2d:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  408d34:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  408d38:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  408d3f:	48 8b 40 10          	mov    0x10(%rax),%rax
  408d43:	48 c1 e0 03          	shl    $0x3,%rax
  408d47:	48 03 85 38 ff ff ff 	add    -0xc8(%rbp),%rax
  408d4e:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  408d52:	0f 95 c0             	setne  %al
  408d55:	83 f0 01             	xor    $0x1,%eax
  408d58:	84 c0                	test   %al,%al
  408d5a:	0f 85 9f 00 00 00    	jne    408dff <_D6object14TypeInfo_Tuple8toStringMFZAa+0x131>
  408d60:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408d64:	48 8b 00             	mov    (%rax),%rax
  408d67:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		{
			if (i)
  408d6b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  408d70:	74 1c                	je     408d8e <_D6object14TypeInfo_Tuple8toStringMFZAa+0xc0>
				s ~= ',';
  408d72:	c6 45 ff 2c          	movb   $0x2c,-0x1(%rbp)
  408d76:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  408d7a:	48 8d 4d ff          	lea    -0x1(%rbp),%rcx
  408d7e:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  408d82:	48 c7 c6 00 fd 40 00 	mov    $0x40fd00,%rsi
  408d89:	e8 75 17 00 00       	callq  40a503 <_d_arrayappendcTp>
			s ~= element.toString();
  408d8e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408d92:	48 8b 00             	mov    (%rax),%rax
  408d95:	48 83 c0 08          	add    $0x8,%rax
  408d99:	48 8b 00             	mov    (%rax),%rax
  408d9c:	48 8d bd 60 ff ff ff 	lea    -0xa0(%rbp),%rdi
  408da3:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  408da7:	ff d0                	callq  *%rax
  408da9:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  408db0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  408db4:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  408dbb:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  408dbf:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  408dc3:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  408dc7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  408dcb:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  408dcf:	48 8d bd 50 ff ff ff 	lea    -0xb0(%rbp),%rdi
  408dd6:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  408dda:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408dde:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  408de2:	49 89 c0             	mov    %rax,%r8
  408de5:	48 c7 c6 00 fd 40 00 	mov    $0x40fd00,%rsi
  408dec:	e8 b7 16 00 00       	callq  40a4a8 <_d_arrayappendT>
  408df1:	48 83 45 e0 08       	addq   $0x8,-0x20(%rbp)
  408df6:	48 ff 45 e8          	incq   -0x18(%rbp)
  408dfa:	e9 39 ff ff ff       	jmpq   408d38 <_D6object14TypeInfo_Tuple8toStringMFZAa+0x6a>
		}
		s ~= ")";
  408dff:	48 c7 45 c0 01 00 00 	movq   $0x1,-0x40(%rbp)
  408e06:	00 
  408e07:	48 c7 45 c8 d2 21 41 	movq   $0x4121d2,-0x38(%rbp)
  408e0e:	00 
  408e0f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  408e13:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  408e17:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408e1b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  408e1f:	48 8d bd 40 ff ff ff 	lea    -0xc0(%rbp),%rdi
  408e26:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  408e2a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408e2e:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  408e32:	49 89 c0             	mov    %rax,%r8
  408e35:	48 c7 c6 00 fd 40 00 	mov    $0x40fd00,%rsi
  408e3c:	e8 67 16 00 00       	callq  40a4a8 <_d_arrayappendT>
		return s;
  408e41:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  408e45:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  408e4c:	48 89 02             	mov    %rax,(%rdx)
  408e4f:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  408e53:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  408e5a:	48 89 42 08          	mov    %rax,0x8(%rdx)
	}
  408e5e:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  408e65:	c9                   	leaveq 
  408e66:	c3                   	retq   

0000000000408e67 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  408e67:	55                   	push   %rbp
  408e68:	48 89 e5             	mov    %rsp,%rbp
  408e6b:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  408e6f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  408e73:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  408e77:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  408e7b:	e8 90 03 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		if (this is o)
  408e80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408e84:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  408e88:	75 0c                	jne    408e96 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x2f>
			return 1;
  408e8a:	c7 45 8c 01 00 00 00 	movl   $0x1,-0x74(%rbp)
  408e91:	e9 52 01 00 00       	jmpq   408fe8 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x181>

		auto t = cast(TypeInfo_Tuple)o;
  408e96:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  408e9a:	48 c7 c6 c0 c3 41 00 	mov    $0x41c3c0,%rsi
  408ea1:	e8 ad 05 00 00       	callq  409453 <_d_dynamic_cast>
  408ea6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		if (t && elements.length == t.elements.length)
  408eaa:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  408eaf:	0f 84 2c 01 00 00    	je     408fe1 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x17a>
  408eb5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408eb9:	48 8b 50 10          	mov    0x10(%rax),%rdx
  408ebd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408ec1:	48 8b 40 10          	mov    0x10(%rax),%rax
  408ec5:	48 39 c2             	cmp    %rax,%rdx
  408ec8:	0f 85 13 01 00 00    	jne    408fe1 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x17a>
		{
			for (size_t i = 0; i < elements.length; i++)
  408ece:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  408ed5:	00 
  408ed6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408eda:	48 8b 40 10          	mov    0x10(%rax),%rax
  408ede:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  408ee2:	0f 92 c0             	setb   %al
  408ee5:	83 f0 01             	xor    $0x1,%eax
  408ee8:	84 c0                	test   %al,%al
  408eea:	0f 85 e8 00 00 00    	jne    408fd8 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x171>
			{
				if (elements[i] != t.elements[i])
  408ef0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408ef4:	48 8b 40 18          	mov    0x18(%rax),%rax
  408ef8:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  408efc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408f00:	48 8b 40 10          	mov    0x10(%rax),%rax
  408f04:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  408f08:	73 0a                	jae    408f14 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0xad>
  408f0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408f0e:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  408f12:	eb 22                	jmp    408f36 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0xcf>
  408f14:	48 c7 45 d0 08 00 00 	movq   $0x8,-0x30(%rbp)
  408f1b:	00 
  408f1c:	48 c7 45 d8 80 18 41 	movq   $0x411880,-0x28(%rbp)
  408f23:	00 
  408f24:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  408f28:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  408f2c:	ba d2 03 00 00       	mov    $0x3d2,%edx
  408f31:	e8 a3 1d 00 00       	callq  40acd9 <_d_array_bounds>
  408f36:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  408f3a:	48 c1 e0 03          	shl    $0x3,%rax
  408f3e:	48 03 45 90          	add    -0x70(%rbp),%rax
  408f42:	48 8b 00             	mov    (%rax),%rax
  408f45:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  408f49:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  408f4d:	48 8b 02             	mov    (%rdx),%rax
  408f50:	48 83 c0 20          	add    $0x20,%rax
  408f54:	48 8b 00             	mov    (%rax),%rax
  408f57:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  408f5b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408f5f:	48 8b 40 18          	mov    0x18(%rax),%rax
  408f63:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  408f67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408f6b:	48 8b 40 10          	mov    0x10(%rax),%rax
  408f6f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  408f73:	73 0a                	jae    408f7f <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x118>
  408f75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408f79:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  408f7d:	eb 22                	jmp    408fa1 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x13a>
  408f7f:	48 c7 45 e0 08 00 00 	movq   $0x8,-0x20(%rbp)
  408f86:	00 
  408f87:	48 c7 45 e8 80 18 41 	movq   $0x411880,-0x18(%rbp)
  408f8e:	00 
  408f8f:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  408f93:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  408f97:	ba d2 03 00 00       	mov    $0x3d2,%edx
  408f9c:	e8 38 1d 00 00       	callq  40acd9 <_d_array_bounds>
  408fa1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408fa5:	48 c1 e0 03          	shl    $0x3,%rax
  408fa9:	48 03 45 b0          	add    -0x50(%rbp),%rax
  408fad:	48 8b 00             	mov    (%rax),%rax
  408fb0:	48 89 c6             	mov    %rax,%rsi
  408fb3:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  408fb7:	ff 55 a8             	callq  *-0x58(%rbp)
  408fba:	85 c0                	test   %eax,%eax
  408fbc:	0f 95 c0             	setne  %al
  408fbf:	83 f0 01             	xor    $0x1,%eax
  408fc2:	84 c0                	test   %al,%al
  408fc4:	74 09                	je     408fcf <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x168>
					return 0;
  408fc6:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)
  408fcd:	eb 19                	jmp    408fe8 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x181>
		auto t = cast(TypeInfo_Tuple)o;
		if (t && elements.length == t.elements.length)
		{
			for (size_t i = 0; i < elements.length; i++)
			{
				if (elements[i] != t.elements[i])
  408fcf:	48 ff 45 f8          	incq   -0x8(%rbp)
  408fd3:	e9 fe fe ff ff       	jmpq   408ed6 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x6f>
					return 0;
			}
			return 1;
  408fd8:	c7 45 8c 01 00 00 00 	movl   $0x1,-0x74(%rbp)
  408fdf:	eb 07                	jmp    408fe8 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x181>
		}
		return 0;
  408fe1:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)
  408fe8:	8b 45 8c             	mov    -0x74(%rbp),%eax
	}
  408feb:	c9                   	leaveq 
  408fec:	c3                   	retq   

0000000000408fed <_D6object14TypeInfo_Tuple7getHashMFPvZm>:

	hash_t getHash(void *p)
  408fed:	55                   	push   %rbp
  408fee:	48 89 e5             	mov    %rsp,%rbp
  408ff1:	48 83 ec 20          	sub    $0x20,%rsp
  408ff5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408ff9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408ffd:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  409001:	e8 0a 02 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		assert(0);
  409006:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
  40900d:	00 
  40900e:	48 c7 45 f8 80 18 41 	movq   $0x411880,-0x8(%rbp)
  409015:	00 
  409016:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40901a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40901e:	ba dc 03 00 00       	mov    $0x3dc,%edx
  409023:	e8 3e 1c 00 00       	callq  40ac66 <_d_assert>
	}
  409028:	c9                   	leaveq 
  409029:	c3                   	retq   

000000000040902a <_D6object14TypeInfo_Tuple6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  40902a:	55                   	push   %rbp
  40902b:	48 89 e5             	mov    %rsp,%rbp
  40902e:	48 83 ec 30          	sub    $0x30,%rsp
  409032:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  409036:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40903a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40903e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  409042:	e8 c9 01 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		assert(0);
  409047:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
  40904e:	00 
  40904f:	48 c7 45 f8 80 18 41 	movq   $0x411880,-0x8(%rbp)
  409056:	00 
  409057:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40905b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40905f:	ba e1 03 00 00       	mov    $0x3e1,%edx
  409064:	e8 fd 1b 00 00       	callq  40ac66 <_d_assert>
	}
  409069:	c9                   	leaveq 
  40906a:	c3                   	retq   

000000000040906b <_D6object14TypeInfo_Tuple7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  40906b:	55                   	push   %rbp
  40906c:	48 89 e5             	mov    %rsp,%rbp
  40906f:	48 83 ec 30          	sub    $0x30,%rsp
  409073:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  409077:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40907b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40907f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  409083:	e8 88 01 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		assert(0);
  409088:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
  40908f:	00 
  409090:	48 c7 45 f8 80 18 41 	movq   $0x411880,-0x8(%rbp)
  409097:	00 
  409098:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40909c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  4090a0:	ba e6 03 00 00       	mov    $0x3e6,%edx
  4090a5:	e8 bc 1b 00 00       	callq  40ac66 <_d_assert>
	}
  4090aa:	c9                   	leaveq 
  4090ab:	c3                   	retq   

00000000004090ac <_D6object14TypeInfo_Tuple5tsizeMFZm>:

	size_t tsize()
  4090ac:	55                   	push   %rbp
  4090ad:	48 89 e5             	mov    %rsp,%rbp
  4090b0:	48 83 ec 20          	sub    $0x20,%rsp
  4090b4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4090b8:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4090bc:	e8 4f 01 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		assert(0);
  4090c1:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
  4090c8:	00 
  4090c9:	48 c7 45 f8 80 18 41 	movq   $0x411880,-0x8(%rbp)
  4090d0:	00 
  4090d1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4090d5:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  4090d9:	ba eb 03 00 00       	mov    $0x3eb,%edx
  4090de:	e8 83 1b 00 00       	callq  40ac66 <_d_assert>
	}
  4090e3:	c9                   	leaveq 
  4090e4:	c3                   	retq   

00000000004090e5 <_D6object14TypeInfo_Tuple4swapMFPvPvZv>:

	void swap(void *p1, void *p2)
  4090e5:	55                   	push   %rbp
  4090e6:	48 89 e5             	mov    %rsp,%rbp
  4090e9:	48 83 ec 30          	sub    $0x30,%rsp
  4090ed:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4090f1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4090f5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4090f9:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4090fd:	e8 0e 01 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		assert(0);
  409102:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
  409109:	00 
  40910a:	48 c7 45 f8 80 18 41 	movq   $0x411880,-0x8(%rbp)
  409111:	00 
  409112:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  409116:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40911a:	ba f0 03 00 00       	mov    $0x3f0,%edx
  40911f:	e8 42 1b 00 00       	callq  40ac66 <_d_assert>
	}
  409124:	c9                   	leaveq 
  409125:	c3                   	retq   

0000000000409126 <_D6object9Exception5_ctorMFAaZC9Exception>:
	char[] msg;

	/**
	 * Constructor; msg is a descriptive message for the exception.
	 */
	this(char[] msg)
  409126:	55                   	push   %rbp
  409127:	48 89 e5             	mov    %rsp,%rbp
  40912a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40912e:	48 89 f0             	mov    %rsi,%rax
  409131:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  409135:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  409139:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  409140:	00 
	{
		this.msg = msg;
  409141:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  409145:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409149:	48 89 42 10          	mov    %rax,0x10(%rdx)
  40914d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409151:	48 89 42 18          	mov    %rax,0x18(%rdx)
  409155:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  409159:	c9                   	leaveq 
  40915a:	c3                   	retq   

000000000040915b <_D6object9Exception8toStringMFZAa>:

	char[] toString() { return msg; }
  40915b:	55                   	push   %rbp
  40915c:	48 89 e5             	mov    %rsp,%rbp
  40915f:	53                   	push   %rbx
  409160:	48 83 ec 08          	sub    $0x8,%rsp
  409164:	48 89 fb             	mov    %rdi,%rbx
  409167:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40916b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40916f:	e8 9c 00 00 00       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>
  409174:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  409178:	48 8b 42 10          	mov    0x10(%rdx),%rax
  40917c:	48 89 03             	mov    %rax,(%rbx)
  40917f:	48 8b 42 18          	mov    0x18(%rdx),%rax
  409183:	48 89 43 08          	mov    %rax,0x8(%rbx)
  409187:	48 89 d8             	mov    %rbx,%rax
  40918a:	48 83 c4 08          	add    $0x8,%rsp
  40918e:	5b                   	pop    %rbx
  40918f:	c9                   	leaveq 
  409190:	c3                   	retq   

0000000000409191 <_D6object5Error5_ctorMFAaZC6object5Error>:
	Error next;

	/**
	 * Constructor; msg is a descriptive message for the exception.
	 */
	this(char[] msg)
  409191:	55                   	push   %rbp
  409192:	48 89 e5             	mov    %rsp,%rbp
  409195:	48 83 ec 28          	sub    $0x28,%rsp
  409199:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40919d:	48 89 f0             	mov    %rsi,%rax
  4091a0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4091a4:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  4091a8:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4091af:	00 
	{
		super(msg);
  4091b0:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4091b4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4091b8:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4091bc:	e8 65 ff ff ff       	callq  409126 <_D6object9Exception5_ctorMFAaZC9Exception>
  4091c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  4091c5:	c9                   	leaveq 
  4091c6:	c3                   	retq   

00000000004091c7 <_D6object5Error5_ctorMFAaC6object5ErrorZC6object5Error>:

	this(char[] msg, Error next)
  4091c7:	55                   	push   %rbp
  4091c8:	48 89 e5             	mov    %rsp,%rbp
  4091cb:	48 83 ec 30          	sub    $0x30,%rsp
  4091cf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4091d3:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  4091d7:	48 89 f0             	mov    %rsi,%rax
  4091da:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4091de:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  4091e2:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4091e9:	00 
	{
		super(msg);
  4091ea:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4091ee:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4091f2:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4091f6:	e8 2b ff ff ff       	callq  409126 <_D6object9Exception5_ctorMFAaZC9Exception>
		this.next = next;
  4091fb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4091ff:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409203:	48 89 42 20          	mov    %rax,0x20(%rdx)
  409207:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  40920b:	c9                   	leaveq 
  40920c:	c3                   	retq   
  40920d:	90                   	nop    
  40920e:	90                   	nop    
  40920f:	90                   	nop    

0000000000409210 <_D9invariant12_d_invariantFC6ObjectZv>:
 * Placed into the Public Domain
 * written by Walter Bright
 * www.digitalmars.com
 */

void _d_invariant(Object o)
  409210:	55                   	push   %rbp
  409211:	48 89 e5             	mov    %rsp,%rbp
  409214:	48 83 ec 30          	sub    $0x30,%rsp
  409218:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
{
	ClassInfo c;
  40921c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  409223:	00 

	//printf("__d_invariant(%p)\n", o);

	// BUG: needs to be filename/line of caller, not library routine
	assert(o !is null); // just do null check, not invariant check
  409224:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  409229:	75 22                	jne    40924d <_D9invariant12_d_invariantFC6ObjectZv+0x3d>
  40922b:	48 c7 45 e0 17 00 00 	movq   $0x17,-0x20(%rbp)
  409232:	00 
  409233:	48 c7 45 e8 88 23 41 	movq   $0x412388,-0x18(%rbp)
  40923a:	00 
  40923b:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40923f:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  409243:	ba 0f 00 00 00       	mov    $0xf,%edx
  409248:	e8 19 1a 00 00       	callq  40ac66 <_d_assert>

	c = o.classinfo;
  40924d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409251:	48 8b 00             	mov    (%rax),%rax
  409254:	48 8b 00             	mov    (%rax),%rax
  409257:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	
	do
	{
		if(c.classInvariant)
  40925b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40925f:	48 8b 40 60          	mov    0x60(%rax),%rax
  409263:	48 85 c0             	test   %rax,%rax
  409266:	74 0e                	je     409276 <_D9invariant12_d_invariantFC6ObjectZv+0x66>
		{
			(*c.classInvariant)(o);
  409268:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40926c:	48 8b 40 60          	mov    0x60(%rax),%rax
  409270:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  409274:	ff d0                	callq  *%rax
		}

		c = c.base;
  409276:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40927a:	48 8b 40 50          	mov    0x50(%rax),%rax
  40927e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  409282:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  409287:	0f 95 c0             	setne  %al
  40928a:	83 f0 01             	xor    $0x1,%eax
  40928d:	84 c0                	test   %al,%al
  40928f:	75 02                	jne    409293 <_D9invariant12_d_invariantFC6ObjectZv+0x83>
  409291:	eb c8                	jmp    40925b <_D9invariant12_d_invariantFC6ObjectZv+0x4b>
	} while(c)
}
  409293:	c9                   	leaveq 
  409294:	c3                   	retq   
  409295:	90                   	nop    
  409296:	90                   	nop    
  409297:	90                   	nop    

0000000000409298 <abort>:
/**************************************************
 Random stubs (they'll go somewhere eventually)
**************************************************/

//mixin(Stub!("void abort()"));
void abort() {
  409298:	55                   	push   %rbp
  409299:	48 89 e5             	mov    %rsp,%rbp
  exit(0);
  40929c:	bf 00 00 00 00       	mov    $0x0,%edi
  4092a1:	e8 ca 46 00 00       	callq  40d970 <_D4user7syscall4exitFlZv>
}
  4092a6:	c9                   	leaveq 
  4092a7:	c3                   	retq   

00000000004092a8 <rt_isHalting>:
  4092a8:	55                   	push   %rbp
  4092a9:	48 89 e5             	mov    %rsp,%rbp
  4092ac:	48 83 ec 20          	sub    $0x20,%rsp
 Random stubs (they'll go somewhere eventually)
**************************************************/

//mixin(Stub!("void abort()"));
void abort() {
  exit(0);
  4092b0:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  4092b7:	00 
  4092b8:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  4092bf:	00 
  4092c0:	48 c7 45 f0 34 00 00 	movq   $0x34,-0x10(%rbp)
  4092c7:	00 
  4092c8:	48 c7 45 f8 88 24 41 	movq   $0x412488,-0x8(%rbp)
  4092cf:	00 
  4092d0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4092d4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4092d8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4092dc:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  4092e0:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  4092e6:	e8 a6 19 00 00       	callq  40ac91 <_d_assert_msg>
  4092eb:	c9                   	leaveq 
  4092ec:	c3                   	retq   

00000000004092ed <runModuleUnitTests>:
  4092ed:	55                   	push   %rbp
  4092ee:	48 89 e5             	mov    %rsp,%rbp
  4092f1:	48 83 ec 20          	sub    $0x20,%rsp
  4092f5:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  4092fc:	00 
  4092fd:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  409304:	00 
  409305:	48 c7 45 f0 3a 00 00 	movq   $0x3a,-0x10(%rbp)
  40930c:	00 
  40930d:	48 c7 45 f8 c0 24 41 	movq   $0x4124c0,-0x8(%rbp)
  409314:	00 
  409315:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  409319:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40931d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  409321:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  409325:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40932b:	e8 61 19 00 00       	callq  40ac91 <_d_assert_msg>
  409330:	c9                   	leaveq 
  409331:	c3                   	retq   

0000000000409332 <_d_monitordelete>:
  409332:	55                   	push   %rbp
  409333:	48 89 e5             	mov    %rsp,%rbp
  409336:	48 83 ec 30          	sub    $0x30,%rsp
  40933a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40933e:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  409342:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  409349:	00 
  40934a:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  409351:	00 
  409352:	48 c7 45 f0 51 00 00 	movq   $0x51,-0x10(%rbp)
  409359:	00 
  40935a:	48 c7 45 f8 00 25 41 	movq   $0x412500,-0x8(%rbp)
  409361:	00 
  409362:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  409366:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40936a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40936e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  409372:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  409378:	e8 14 19 00 00       	callq  40ac91 <_d_assert_msg>
  40937d:	c9                   	leaveq 
  40937e:	c3                   	retq   

000000000040937f <_d_toObject>:
 *		If it is an interface, return the Object implementing the interface.
 *		If it is null, return null.
 *		Else, undefined crash
 */

Object _d_toObject(void* p)
  40937f:	55                   	push   %rbp
  409380:	48 89 e5             	mov    %rsp,%rbp
  409383:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
{	Object o;
  409387:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40938e:	00 

	if (p)
  40938f:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  409394:	74 4f                	je     4093e5 <_d_toObject+0x66>
	{
		o = cast(Object)p;
  409396:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40939a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		ClassInfo oc = o.classinfo;
  40939e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4093a2:	48 8b 00             	mov    (%rax),%rax
  4093a5:	48 8b 00             	mov    (%rax),%rax
  4093a8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Interface *pi = **cast(Interface ***)p;
  4093ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4093b0:	48 8b 00             	mov    (%rax),%rax
  4093b3:	48 8b 00             	mov    (%rax),%rax
  4093b6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		/* Interface.offset lines up with ClassInfo.name.ptr,
		 * so we rely on pointers never being less than 64K,
		 * and Objects never being greater.
		 */
		if (pi.offset < 0x10000)
  4093ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4093be:	48 83 c0 18          	add    $0x18,%rax
  4093c2:	8b 00                	mov    (%rax),%eax
  4093c4:	3d 00 00 01 00       	cmp    $0x10000,%eax
  4093c9:	7d 1a                	jge    4093e5 <_d_toObject+0x66>
		{
			//printf("\tpi.offset = %d\n", pi.offset);
			o = cast(Object)(p - pi.offset);
  4093cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4093cf:	48 83 c0 18          	add    $0x18,%rax
  4093d3:	8b 00                	mov    (%rax),%eax
  4093d5:	48 98                	cltq   
  4093d7:	48 89 c2             	mov    %rax,%rdx
  4093da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4093de:	48 29 d0             	sub    %rdx,%rax
  4093e1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		}
	}
	return o;
  4093e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
  4093e9:	c9                   	leaveq 
  4093ea:	c3                   	retq   

00000000004093eb <_d_interface_cast>:
/*************************************
 * Attempts to cast Object o to class c.
 * Returns o if successful, null if not.
 */

Object _d_interface_cast(void* p, ClassInfo c)
  4093eb:	55                   	push   %rbp
  4093ec:	48 89 e5             	mov    %rsp,%rbp
  4093ef:	48 83 ec 30          	sub    $0x30,%rsp
  4093f3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4093f7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
{	Object o;
  4093fb:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  409402:	00 

	//printf("_d_interface_cast(p = %p, c = '%.*s')\n", p, c.name);
	if (p)
  409403:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  409408:	74 3b                	je     409445 <_d_interface_cast+0x5a>
	{
		Interface *pi = **cast(Interface ***)p;
  40940a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40940e:	48 8b 00             	mov    (%rax),%rax
  409411:	48 8b 00             	mov    (%rax),%rax
  409414:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

		//printf("\tpi.offset = %d\n", pi.offset);
		o = cast(Object)(p - pi.offset);
  409418:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40941c:	48 83 c0 18          	add    $0x18,%rax
  409420:	8b 00                	mov    (%rax),%eax
  409422:	48 98                	cltq   
  409424:	48 89 c2             	mov    %rax,%rdx
  409427:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40942b:	48 29 d0             	sub    %rdx,%rax
  40942e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		return _d_dynamic_cast(o, c);
  409432:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  409436:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40943a:	e8 14 00 00 00       	callq  409453 <_d_dynamic_cast>
  40943f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  409443:	eb 08                	jmp    40944d <_d_interface_cast+0x62>
	}
	return o;
  409445:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  409449:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40944d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
  409451:	c9                   	leaveq 
  409452:	c3                   	retq   

0000000000409453 <_d_dynamic_cast>:

Object _d_dynamic_cast(Object o, ClassInfo c)
  409453:	55                   	push   %rbp
  409454:	48 89 e5             	mov    %rsp,%rbp
  409457:	48 83 ec 20          	sub    $0x20,%rsp
  40945b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40945f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
{	ClassInfo oc;
  409463:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40946a:	00 
	size_t offset = 0;
  40946b:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  409472:	00 

	//printf("_d_dynamic_cast(o = %p, c = '%.*s')\n", o, c.name);

	if (o)
  409473:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  409478:	74 39                	je     4094b3 <_d_dynamic_cast+0x60>
	{
		oc = o.classinfo;
  40947a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40947e:	48 8b 00             	mov    (%rax),%rax
  409481:	48 8b 00             	mov    (%rax),%rax
  409484:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (_d_isbaseof2(oc, c, offset))
  409488:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  40948c:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  409490:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  409494:	e8 20 00 00 00       	callq  4094b9 <_d_isbaseof2>
  409499:	85 c0                	test   %eax,%eax
  40949b:	74 0e                	je     4094ab <_d_dynamic_cast+0x58>
		{
			//printf("\toffset = %d\n", offset);
			o = cast(Object)(cast(void*)o + offset);
  40949d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4094a1:	48 03 45 e8          	add    -0x18(%rbp),%rax
  4094a5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4094a9:	eb 08                	jmp    4094b3 <_d_dynamic_cast+0x60>
		}
		else
			o = null;
  4094ab:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4094b2:	00 
	}
	//printf("\tresult = %p\n", o);
	return o;
  4094b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
  4094b7:	c9                   	leaveq 
  4094b8:	c3                   	retq   

00000000004094b9 <_d_isbaseof2>:

int _d_isbaseof2(ClassInfo oc, ClassInfo c, inout size_t offset)
  4094b9:	55                   	push   %rbp
  4094ba:	48 89 e5             	mov    %rsp,%rbp
  4094bd:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  4094c4:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  4094c8:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  4094cc:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
{	int i;
  4094d0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)

	if (oc is c)
  4094d7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4094db:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  4094df:	75 0f                	jne    4094f0 <_d_isbaseof2+0x37>
		return 1;
  4094e1:	c7 85 44 ff ff ff 01 	movl   $0x1,-0xbc(%rbp)
  4094e8:	00 00 00 
  4094eb:	e9 a3 02 00 00       	jmpq   409793 <_d_isbaseof2+0x2da>
	do
	{
		if (oc.base is c)
  4094f0:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4094f4:	48 8b 40 50          	mov    0x50(%rax),%rax
  4094f8:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  4094fc:	75 0f                	jne    40950d <_d_isbaseof2+0x54>
			return 1;
  4094fe:	c7 85 44 ff ff ff 01 	movl   $0x1,-0xbc(%rbp)
  409505:	00 00 00 
  409508:	e9 86 02 00 00       	jmpq   409793 <_d_isbaseof2+0x2da>
		for (i = 0; i < oc.interfaces.length; i++)
  40950d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  409514:	8b 45 ec             	mov    -0x14(%rbp),%eax
  409517:	48 63 d0             	movslq %eax,%rdx
  40951a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40951e:	48 8b 40 40          	mov    0x40(%rax),%rax
  409522:	48 39 c2             	cmp    %rax,%rdx
  409525:	0f 92 c0             	setb   %al
  409528:	83 f0 01             	xor    $0x1,%eax
  40952b:	84 c0                	test   %al,%al
  40952d:	0f 85 09 01 00 00    	jne    40963c <_d_isbaseof2+0x183>
		{
			ClassInfo ic;
  409533:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40953a:	00 

			ic = oc.interfaces[i].classinfo;
  40953b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40953f:	48 8b 40 48          	mov    0x48(%rax),%rax
  409543:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  40954a:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40954d:	48 63 d0             	movslq %eax,%rdx
  409550:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409554:	48 8b 40 40          	mov    0x40(%rax),%rax
  409558:	48 39 c2             	cmp    %rax,%rdx
  40955b:	73 0e                	jae    40956b <_d_isbaseof2+0xb2>
  40955d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  409560:	48 98                	cltq   
  409562:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  409569:	eb 22                	jmp    40958d <_d_isbaseof2+0xd4>
  40956b:	48 c7 45 a0 0b 00 00 	movq   $0xb,-0x60(%rbp)
  409572:	00 
  409573:	48 c7 45 a8 52 25 41 	movq   $0x412552,-0x58(%rbp)
  40957a:	00 
  40957b:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  40957f:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  409583:	ba 9e 00 00 00       	mov    $0x9e,%edx
  409588:	e8 4c 17 00 00       	callq  40acd9 <_d_array_bounds>
  40958d:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  409594:	48 c1 e0 05          	shl    $0x5,%rax
  409598:	48 03 85 48 ff ff ff 	add    -0xb8(%rbp),%rax
  40959f:	48 8b 00             	mov    (%rax),%rax
  4095a2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
			if (ic is c)
  4095a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4095aa:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  4095ae:	0f 85 80 00 00 00    	jne    409634 <_d_isbaseof2+0x17b>
			{	offset = oc.interfaces[i].offset;
  4095b4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4095b8:	48 8b 40 48          	mov    0x48(%rax),%rax
  4095bc:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  4095c3:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4095c6:	48 63 d0             	movslq %eax,%rdx
  4095c9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4095cd:	48 8b 40 40          	mov    0x40(%rax),%rax
  4095d1:	48 39 c2             	cmp    %rax,%rdx
  4095d4:	73 0e                	jae    4095e4 <_d_isbaseof2+0x12b>
  4095d6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4095d9:	48 98                	cltq   
  4095db:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  4095e2:	eb 22                	jmp    409606 <_d_isbaseof2+0x14d>
  4095e4:	48 c7 45 b0 0b 00 00 	movq   $0xb,-0x50(%rbp)
  4095eb:	00 
  4095ec:	48 c7 45 b8 52 25 41 	movq   $0x412552,-0x48(%rbp)
  4095f3:	00 
  4095f4:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  4095f8:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  4095fc:	ba a0 00 00 00       	mov    $0xa0,%edx
  409601:	e8 d3 16 00 00       	callq  40acd9 <_d_array_bounds>
  409606:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40960d:	48 c1 e0 05          	shl    $0x5,%rax
  409611:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  409618:	8b 40 18             	mov    0x18(%rax),%eax
  40961b:	48 63 d0             	movslq %eax,%rdx
  40961e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  409622:	48 89 10             	mov    %rdx,(%rax)
				return 1;
  409625:	c7 85 44 ff ff ff 01 	movl   $0x1,-0xbc(%rbp)
  40962c:	00 00 00 
  40962f:	e9 5f 01 00 00       	jmpq   409793 <_d_isbaseof2+0x2da>
		for (i = 0; i < oc.interfaces.length; i++)
		{
			ClassInfo ic;

			ic = oc.interfaces[i].classinfo;
			if (ic is c)
  409634:	ff 45 ec             	incl   -0x14(%rbp)
  409637:	e9 d8 fe ff ff       	jmpq   409514 <_d_isbaseof2+0x5b>
			{	offset = oc.interfaces[i].offset;
				return 1;
			}
		}
		for (i = 0; i < oc.interfaces.length; i++)
  40963c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  409643:	8b 45 ec             	mov    -0x14(%rbp),%eax
  409646:	48 63 d0             	movslq %eax,%rdx
  409649:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40964d:	48 8b 40 40          	mov    0x40(%rax),%rax
  409651:	48 39 c2             	cmp    %rax,%rdx
  409654:	0f 92 c0             	setb   %al
  409657:	83 f0 01             	xor    $0x1,%eax
  40965a:	84 c0                	test   %al,%al
  40965c:	0f 85 07 01 00 00    	jne    409769 <_d_isbaseof2+0x2b0>
		{
			ClassInfo ic;
  409662:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  409669:	00 

			ic = oc.interfaces[i].classinfo;
  40966a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40966e:	48 8b 40 48          	mov    0x48(%rax),%rax
  409672:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  409679:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40967c:	48 63 d0             	movslq %eax,%rdx
  40967f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409683:	48 8b 40 40          	mov    0x40(%rax),%rax
  409687:	48 39 c2             	cmp    %rax,%rdx
  40968a:	73 0e                	jae    40969a <_d_isbaseof2+0x1e1>
  40968c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40968f:	48 98                	cltq   
  409691:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  409698:	eb 22                	jmp    4096bc <_d_isbaseof2+0x203>
  40969a:	48 c7 45 c0 0b 00 00 	movq   $0xb,-0x40(%rbp)
  4096a1:	00 
  4096a2:	48 c7 45 c8 52 25 41 	movq   $0x412552,-0x38(%rbp)
  4096a9:	00 
  4096aa:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4096ae:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4096b2:	ba a8 00 00 00       	mov    $0xa8,%edx
  4096b7:	e8 1d 16 00 00       	callq  40acd9 <_d_array_bounds>
  4096bc:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  4096c3:	48 c1 e0 05          	shl    $0x5,%rax
  4096c7:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  4096ce:	48 8b 00             	mov    (%rax),%rax
  4096d1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			if (_d_isbaseof2(ic, c, offset))
  4096d5:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4096d9:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
  4096dd:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4096e1:	e8 d3 fd ff ff       	callq  4094b9 <_d_isbaseof2>
  4096e6:	85 c0                	test   %eax,%eax
  4096e8:	74 77                	je     409761 <_d_isbaseof2+0x2a8>
			{	offset = oc.interfaces[i].offset;
  4096ea:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4096ee:	48 8b 40 48          	mov    0x48(%rax),%rax
  4096f2:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4096f9:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4096fc:	48 63 d0             	movslq %eax,%rdx
  4096ff:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409703:	48 8b 40 40          	mov    0x40(%rax),%rax
  409707:	48 39 c2             	cmp    %rax,%rdx
  40970a:	73 0b                	jae    409717 <_d_isbaseof2+0x25e>
  40970c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40970f:	48 98                	cltq   
  409711:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  409715:	eb 22                	jmp    409739 <_d_isbaseof2+0x280>
  409717:	48 c7 45 d0 0b 00 00 	movq   $0xb,-0x30(%rbp)
  40971e:	00 
  40971f:	48 c7 45 d8 52 25 41 	movq   $0x412552,-0x28(%rbp)
  409726:	00 
  409727:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40972b:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40972f:	ba aa 00 00 00       	mov    $0xaa,%edx
  409734:	e8 a0 15 00 00       	callq  40acd9 <_d_array_bounds>
  409739:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40973d:	48 c1 e0 05          	shl    $0x5,%rax
  409741:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  409748:	8b 40 18             	mov    0x18(%rax),%eax
  40974b:	48 63 d0             	movslq %eax,%rdx
  40974e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  409752:	48 89 10             	mov    %rdx,(%rax)
				return 1;
  409755:	c7 85 44 ff ff ff 01 	movl   $0x1,-0xbc(%rbp)
  40975c:	00 00 00 
  40975f:	eb 32                	jmp    409793 <_d_isbaseof2+0x2da>
		for (i = 0; i < oc.interfaces.length; i++)
		{
			ClassInfo ic;

			ic = oc.interfaces[i].classinfo;
			if (_d_isbaseof2(ic, c, offset))
  409761:	ff 45 ec             	incl   -0x14(%rbp)
  409764:	e9 da fe ff ff       	jmpq   409643 <_d_isbaseof2+0x18a>
			{	offset = oc.interfaces[i].offset;
				return 1;
			}
		}
		oc = oc.base;
  409769:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40976d:	48 8b 40 50          	mov    0x50(%rax),%rax
  409771:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  409775:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
  40977a:	0f 95 c0             	setne  %al
  40977d:	83 f0 01             	xor    $0x1,%eax
  409780:	84 c0                	test   %al,%al
  409782:	75 05                	jne    409789 <_d_isbaseof2+0x2d0>
  409784:	e9 67 fd ff ff       	jmpq   4094f0 <_d_isbaseof2+0x37>
	} while (oc);
	return 0;
  409789:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%rbp)
  409790:	00 00 00 
  409793:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
}
  409799:	c9                   	leaveq 
  40979a:	c3                   	retq   

000000000040979b <_d_isbaseof>:

int _d_isbaseof(ClassInfo oc, ClassInfo c)
  40979b:	55                   	push   %rbp
  40979c:	48 89 e5             	mov    %rsp,%rbp
  40979f:	48 83 ec 50          	sub    $0x50,%rsp
  4097a3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4097a7:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
{	int i;
  4097ab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	if (oc is c)
  4097b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4097b6:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  4097ba:	75 0c                	jne    4097c8 <_d_isbaseof+0x2d>
		return 1;
  4097bc:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%rbp)
  4097c3:	e9 fa 00 00 00       	jmpq   4098c2 <_d_isbaseof+0x127>
	do
	{
		if (oc.base is c)
  4097c8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4097cc:	48 8b 40 50          	mov    0x50(%rax),%rax
  4097d0:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  4097d4:	75 0c                	jne    4097e2 <_d_isbaseof+0x47>
			return 1;
  4097d6:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%rbp)
  4097dd:	e9 e0 00 00 00       	jmpq   4098c2 <_d_isbaseof+0x127>
		for (i = 0; i < oc.interfaces.length; i++)
  4097e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  4097e9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4097ec:	48 63 d0             	movslq %eax,%rdx
  4097ef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4097f3:	48 8b 40 40          	mov    0x40(%rax),%rax
  4097f7:	48 39 c2             	cmp    %rax,%rdx
  4097fa:	0f 92 c0             	setb   %al
  4097fd:	83 f0 01             	xor    $0x1,%eax
  409800:	84 c0                	test   %al,%al
  409802:	0f 85 93 00 00 00    	jne    40989b <_d_isbaseof+0x100>
		{
			ClassInfo ic;
  409808:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40980f:	00 

			ic = oc.interfaces[i].classinfo;
  409810:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409814:	48 8b 40 48          	mov    0x48(%rax),%rax
  409818:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40981c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40981f:	48 63 d0             	movslq %eax,%rdx
  409822:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409826:	48 8b 40 40          	mov    0x40(%rax),%rax
  40982a:	48 39 c2             	cmp    %rax,%rdx
  40982d:	73 0b                	jae    40983a <_d_isbaseof+0x9f>
  40982f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409832:	48 98                	cltq   
  409834:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  409838:	eb 22                	jmp    40985c <_d_isbaseof+0xc1>
  40983a:	48 c7 45 e0 0b 00 00 	movq   $0xb,-0x20(%rbp)
  409841:	00 
  409842:	48 c7 45 e8 52 25 41 	movq   $0x412552,-0x18(%rbp)
  409849:	00 
  40984a:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40984e:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  409852:	ba c0 00 00 00       	mov    $0xc0,%edx
  409857:	e8 7d 14 00 00       	callq  40acd9 <_d_array_bounds>
  40985c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409860:	48 c1 e0 05          	shl    $0x5,%rax
  409864:	48 03 45 c0          	add    -0x40(%rbp),%rax
  409868:	48 8b 00             	mov    (%rax),%rax
  40986b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			if (ic is c || _d_isbaseof(ic, c))
  40986f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409873:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  409877:	74 11                	je     40988a <_d_isbaseof+0xef>
  409879:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40987d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  409881:	e8 15 ff ff ff       	callq  40979b <_d_isbaseof>
  409886:	85 c0                	test   %eax,%eax
  409888:	74 09                	je     409893 <_d_isbaseof+0xf8>
				return 1;
  40988a:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%rbp)
  409891:	eb 2f                	jmp    4098c2 <_d_isbaseof+0x127>
		for (i = 0; i < oc.interfaces.length; i++)
		{
			ClassInfo ic;

			ic = oc.interfaces[i].classinfo;
			if (ic is c || _d_isbaseof(ic, c))
  409893:	ff 45 f4             	incl   -0xc(%rbp)
  409896:	e9 4e ff ff ff       	jmpq   4097e9 <_d_isbaseof+0x4e>
				return 1;
		}
		oc = oc.base;
  40989b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40989f:	48 8b 40 50          	mov    0x50(%rax),%rax
  4098a3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4098a7:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  4098ac:	0f 95 c0             	setne  %al
  4098af:	83 f0 01             	xor    $0x1,%eax
  4098b2:	84 c0                	test   %al,%al
  4098b4:	75 05                	jne    4098bb <_d_isbaseof+0x120>
  4098b6:	e9 0d ff ff ff       	jmpq   4097c8 <_d_isbaseof+0x2d>
	} while (oc);
	return 0;
  4098bb:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%rbp)
  4098c2:	8b 45 bc             	mov    -0x44(%rbp),%eax
}
  4098c5:	c9                   	leaveq 
  4098c6:	c3                   	retq   

00000000004098c7 <_d_interface_vtbl>:

/*********************************
 * Find the vtbl[] associated with Interface ic.
 */

void *_d_interface_vtbl(ClassInfo ic, Object o)
  4098c7:	55                   	push   %rbp
  4098c8:	48 89 e5             	mov    %rsp,%rbp
  4098cb:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  4098d2:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  4098d6:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
{	int i;
  4098da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	ClassInfo oc;
  4098e1:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4098e8:	00 

	//printf("__d_interface_vtbl(o = %p, ic = %p)\n", o, ic);

	assert(o);
  4098e9:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  4098ed:	e8 1e f9 ff ff       	callq  409210 <_D9invariant12_d_invariantFC6ObjectZv>

	oc = o.classinfo;
  4098f2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4098f6:	48 8b 00             	mov    (%rax),%rax
  4098f9:	48 8b 00             	mov    (%rax),%rax
  4098fc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (i = 0; i < oc.interfaces.length; i++)
  409900:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  409907:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40990a:	48 63 d0             	movslq %eax,%rdx
  40990d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409911:	48 8b 40 40          	mov    0x40(%rax),%rax
  409915:	48 39 c2             	cmp    %rax,%rdx
  409918:	0f 92 c0             	setb   %al
  40991b:	83 f0 01             	xor    $0x1,%eax
  40991e:	84 c0                	test   %al,%al
  409920:	0f 85 de 00 00 00    	jne    409a04 <_d_interface_vtbl+0x13d>
	{
		ClassInfo oic;
  409926:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40992d:	00 

		oic = oc.interfaces[i].classinfo;
  40992e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409932:	48 8b 40 48          	mov    0x48(%rax),%rax
  409936:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  40993a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40993d:	48 63 d0             	movslq %eax,%rdx
  409940:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409944:	48 8b 40 40          	mov    0x40(%rax),%rax
  409948:	48 39 c2             	cmp    %rax,%rdx
  40994b:	73 0b                	jae    409958 <_d_interface_vtbl+0x91>
  40994d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409950:	48 98                	cltq   
  409952:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  409956:	eb 22                	jmp    40997a <_d_interface_vtbl+0xb3>
  409958:	48 c7 45 b0 0b 00 00 	movq   $0xb,-0x50(%rbp)
  40995f:	00 
  409960:	48 c7 45 b8 52 25 41 	movq   $0x412552,-0x48(%rbp)
  409967:	00 
  409968:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  40996c:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  409970:	ba da 00 00 00       	mov    $0xda,%edx
  409975:	e8 5f 13 00 00       	callq  40acd9 <_d_array_bounds>
  40997a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40997e:	48 c1 e0 05          	shl    $0x5,%rax
  409982:	48 03 45 80          	add    -0x80(%rbp),%rax
  409986:	48 8b 00             	mov    (%rax),%rax
  409989:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (oic is ic)
  40998d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409991:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  409995:	75 65                	jne    4099fc <_d_interface_vtbl+0x135>
		{
			return cast(void *)oc.interfaces[i].vtbl;
  409997:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40999b:	48 8b 40 48          	mov    0x48(%rax),%rax
  40999f:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  4099a3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4099a6:	48 63 d0             	movslq %eax,%rdx
  4099a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4099ad:	48 8b 40 40          	mov    0x40(%rax),%rax
  4099b1:	48 39 c2             	cmp    %rax,%rdx
  4099b4:	73 0b                	jae    4099c1 <_d_interface_vtbl+0xfa>
  4099b6:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4099b9:	48 98                	cltq   
  4099bb:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  4099bf:	eb 22                	jmp    4099e3 <_d_interface_vtbl+0x11c>
  4099c1:	48 c7 45 c0 0b 00 00 	movq   $0xb,-0x40(%rbp)
  4099c8:	00 
  4099c9:	48 c7 45 c8 52 25 41 	movq   $0x412552,-0x38(%rbp)
  4099d0:	00 
  4099d1:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4099d5:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4099d9:	ba dd 00 00 00       	mov    $0xdd,%edx
  4099de:	e8 f6 12 00 00       	callq  40acd9 <_d_array_bounds>
  4099e3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4099e7:	48 c1 e0 05          	shl    $0x5,%rax
  4099eb:	48 03 45 90          	add    -0x70(%rbp),%rax
  4099ef:	48 8b 40 10          	mov    0x10(%rax),%rax
  4099f3:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4099fa:	eb 2c                	jmp    409a28 <_d_interface_vtbl+0x161>
	for (i = 0; i < oc.interfaces.length; i++)
	{
		ClassInfo oic;

		oic = oc.interfaces[i].classinfo;
		if (oic is ic)
  4099fc:	ff 45 f4             	incl   -0xc(%rbp)
  4099ff:	e9 03 ff ff ff       	jmpq   409907 <_d_interface_vtbl+0x40>
		{
			return cast(void *)oc.interfaces[i].vtbl;
		}
	}
	assert(0);
  409a04:	48 c7 45 d0 0b 00 00 	movq   $0xb,-0x30(%rbp)
  409a0b:	00 
  409a0c:	48 c7 45 d8 52 25 41 	movq   $0x412552,-0x28(%rbp)
  409a13:	00 
  409a14:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  409a18:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  409a1c:	ba e0 00 00 00       	mov    $0xe0,%edx
  409a21:	e8 40 12 00 00       	callq  40ac66 <_d_assert>
}
  409a26:	eb 07                	jmp    409a2f <_d_interface_vtbl+0x168>
  409a28:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  409a2f:	c9                   	leaveq 
  409a30:	c3                   	retq   

0000000000409a31 <_d_obj_eq>:

int _d_obj_eq(Object o1, Object o2)
  409a31:	55                   	push   %rbp
  409a32:	48 89 e5             	mov    %rsp,%rbp
  409a35:	48 83 ec 20          	sub    $0x20,%rsp
  409a39:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409a3d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
{
    return o1 is o2 || (o1 && o1.opEquals(o2));
  409a41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409a45:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  409a49:	74 23                	je     409a6e <_d_obj_eq+0x3d>
  409a4b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  409a50:	74 22                	je     409a74 <_d_obj_eq+0x43>
  409a52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409a56:	48 8b 00             	mov    (%rax),%rax
  409a59:	48 83 c0 20          	add    $0x20,%rax
  409a5d:	48 8b 00             	mov    (%rax),%rax
  409a60:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  409a64:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  409a68:	ff d0                	callq  *%rax
  409a6a:	85 c0                	test   %eax,%eax
  409a6c:	74 06                	je     409a74 <_d_obj_eq+0x43>
  409a6e:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  409a72:	eb 04                	jmp    409a78 <_d_obj_eq+0x47>
  409a74:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  409a78:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
}
  409a7c:	c9                   	leaveq 
  409a7d:	c3                   	retq   

0000000000409a7e <_d_obj_cmp>:

int _d_obj_cmp(Object o1, Object o2)
  409a7e:	55                   	push   %rbp
  409a7f:	48 89 e5             	mov    %rsp,%rbp
  409a82:	48 83 ec 10          	sub    $0x10,%rsp
  409a86:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409a8a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
{
    return o1.opCmp(o2);
  409a8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409a92:	48 8b 00             	mov    (%rax),%rax
  409a95:	48 83 c0 18          	add    $0x18,%rax
  409a99:	48 8b 00             	mov    (%rax),%rax
  409a9c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  409aa0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  409aa4:	ff d0                	callq  *%rax
}
  409aa6:	c9                   	leaveq 
  409aa7:	c3                   	retq   

0000000000409aa8 <_d_switch_string>:

int _d_switch_string(char[][] table, char[] ca)
  409aa8:	55                   	push   %rbp
  409aa9:	48 89 e5             	mov    %rsp,%rbp
  409aac:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp
  409ab3:	49 89 d0             	mov    %rdx,%r8
  409ab6:	48 89 f8             	mov    %rdi,%rax
  409ab9:	48 89 f2             	mov    %rsi,%rdx
  409abc:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  409ac3:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  409aca:	4c 89 c0             	mov    %r8,%rax
  409acd:	48 89 ca             	mov    %rcx,%rdx
  409ad0:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  409ad7:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
{
	int low;
  409ade:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	int high;
  409ae5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	int mid;
  409aec:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
	int c;
  409af3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	char[] pca;
  409afa:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  409b01:	00 
  409b02:	48 c7 45 88 00 00 00 	movq   $0x0,-0x78(%rbp)
  409b09:	00 

	low = 0;
  409b0a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	high = table.length;
  409b11:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  409b18:	89 45 f4             	mov    %eax,-0xc(%rbp)

	if (high &&
  409b1b:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  409b1f:	0f 84 f4 02 00 00    	je     409e19 <_d_switch_string+0x371>
  409b25:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  409b2c:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  409b33:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  409b3a:	48 89 95 f0 fe ff ff 	mov    %rdx,-0x110(%rbp)
  409b41:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  409b48:	48 83 f8 00          	cmp    $0x0,%rax
  409b4c:	76 0d                	jbe    409b5b <_d_switch_string+0xb3>
  409b4e:	48 c7 85 f8 fe ff ff 	movq   $0x0,-0x108(%rbp)
  409b55:	00 00 00 00 
  409b59:	eb 22                	jmp    409b7d <_d_switch_string+0xd5>
  409b5b:	48 c7 45 90 0b 00 00 	movq   $0xb,-0x70(%rbp)
  409b62:	00 
  409b63:	48 c7 45 98 52 25 41 	movq   $0x412552,-0x68(%rbp)
  409b6a:	00 
  409b6b:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  409b6f:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  409b73:	ba f9 00 00 00       	mov    $0xf9,%edx
  409b78:	e8 5c 11 00 00       	callq  40acd9 <_d_array_bounds>
  409b7d:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  409b84:	48 c1 e0 04          	shl    $0x4,%rax
  409b88:	48 03 85 f0 fe ff ff 	add    -0x110(%rbp),%rax
  409b8f:	48 8b 00             	mov    (%rax),%rax
  409b92:	48 39 85 e8 fe ff ff 	cmp    %rax,-0x118(%rbp)
  409b99:	0f 82 7a 02 00 00    	jb     409e19 <_d_switch_string+0x371>
  409b9f:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  409ba6:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  409bad:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  409bb4:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  409bbb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409bbe:	ff c8                	dec    %eax
  409bc0:	48 98                	cltq   
  409bc2:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  409bc9:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  409bd0:	48 39 85 18 ff ff ff 	cmp    %rax,-0xe8(%rbp)
  409bd7:	73 10                	jae    409be9 <_d_switch_string+0x141>
  409bd9:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  409be0:	48 89 95 10 ff ff ff 	mov    %rdx,-0xf0(%rbp)
  409be7:	eb 22                	jmp    409c0b <_d_switch_string+0x163>
  409be9:	48 c7 45 a0 0b 00 00 	movq   $0xb,-0x60(%rbp)
  409bf0:	00 
  409bf1:	48 c7 45 a8 52 25 41 	movq   $0x412552,-0x58(%rbp)
  409bf8:	00 
  409bf9:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  409bfd:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  409c01:	ba fa 00 00 00       	mov    $0xfa,%edx
  409c06:	e8 ce 10 00 00       	callq  40acd9 <_d_array_bounds>
  409c0b:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  409c12:	48 c1 e0 04          	shl    $0x4,%rax
  409c16:	48 03 85 08 ff ff ff 	add    -0xf8(%rbp),%rax
  409c1d:	48 8b 00             	mov    (%rax),%rax
  409c20:	48 39 85 00 ff ff ff 	cmp    %rax,-0x100(%rbp)
  409c27:	0f 87 ec 01 00 00    	ja     409e19 <_d_switch_string+0x371>
		ca.length >= table[0].length &&
		ca.length <= table[high - 1].length)
	{
		// Looking for 0 length string, which would only be at the beginning
		if (ca.length == 0)
  409c2d:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  409c34:	48 85 c0             	test   %rax,%rax
  409c37:	75 0f                	jne    409c48 <_d_switch_string+0x1a0>
			return 0;
  409c39:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%rbp)
  409c40:	00 00 00 
  409c43:	e9 db 01 00 00       	jmpq   409e23 <_d_switch_string+0x37b>

		char c1 = ca[0];
  409c48:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
  409c4f:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
  409c56:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  409c5d:	48 83 f8 00          	cmp    $0x0,%rax
  409c61:	76 0d                	jbe    409c70 <_d_switch_string+0x1c8>
  409c63:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  409c6a:	00 00 00 00 
  409c6e:	eb 22                	jmp    409c92 <_d_switch_string+0x1ea>
  409c70:	48 c7 45 b0 0b 00 00 	movq   $0xb,-0x50(%rbp)
  409c77:	00 
  409c78:	48 c7 45 b8 52 25 41 	movq   $0x412552,-0x48(%rbp)
  409c7f:	00 
  409c80:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  409c84:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  409c88:	ba 00 01 00 00       	mov    $0x100,%edx
  409c8d:	e8 47 10 00 00       	callq  40acd9 <_d_array_bounds>
  409c92:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  409c99:	48 03 85 28 ff ff ff 	add    -0xd8(%rbp),%rax
  409ca0:	0f b6 00             	movzbl (%rax),%eax
  409ca3:	88 45 ff             	mov    %al,-0x1(%rbp)
  409ca6:	eb 00                	jmp    409ca8 <_d_switch_string+0x200>

		// Do binary search
		while (low < high)
  409ca8:	8b 45 f8             	mov    -0x8(%rbp),%eax
  409cab:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  409cae:	0f 9c c0             	setl   %al
  409cb1:	83 f0 01             	xor    $0x1,%eax
  409cb4:	84 c0                	test   %al,%al
  409cb6:	0f 85 5d 01 00 00    	jne    409e19 <_d_switch_string+0x371>
		{
			mid = (low + high) >> 1;
  409cbc:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409cbf:	03 45 f8             	add    -0x8(%rbp),%eax
  409cc2:	d1 f8                	sar    %eax
  409cc4:	89 45 f0             	mov    %eax,-0x10(%rbp)
			pca = table[mid];
  409cc7:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  409cce:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  409cd5:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409cd8:	48 63 d0             	movslq %eax,%rdx
  409cdb:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  409ce2:	48 39 c2             	cmp    %rax,%rdx
  409ce5:	73 0e                	jae    409cf5 <_d_switch_string+0x24d>
  409ce7:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409cea:	48 98                	cltq   
  409cec:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  409cf3:	eb 22                	jmp    409d17 <_d_switch_string+0x26f>
  409cf5:	48 c7 45 c0 0b 00 00 	movq   $0xb,-0x40(%rbp)
  409cfc:	00 
  409cfd:	48 c7 45 c8 52 25 41 	movq   $0x412552,-0x38(%rbp)
  409d04:	00 
  409d05:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  409d09:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  409d0d:	ba 06 01 00 00       	mov    $0x106,%edx
  409d12:	e8 c2 0f 00 00       	callq  40acd9 <_d_array_bounds>
  409d17:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  409d1e:	48 c1 e0 04          	shl    $0x4,%rax
  409d22:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  409d29:	48 01 c2             	add    %rax,%rdx
  409d2c:	48 8b 02             	mov    (%rdx),%rax
  409d2f:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  409d33:	48 8b 42 08          	mov    0x8(%rdx),%rax
  409d37:	48 89 45 88          	mov    %rax,-0x78(%rbp)
			c = ca.length - pca.length;
  409d3b:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  409d42:	89 c2                	mov    %eax,%edx
  409d44:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  409d48:	89 d1                	mov    %edx,%ecx
  409d4a:	29 c1                	sub    %eax,%ecx
  409d4c:	89 c8                	mov    %ecx,%eax
  409d4e:	89 45 ec             	mov    %eax,-0x14(%rbp)
			if (c == 0)
  409d51:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  409d55:	0f 85 a0 00 00 00    	jne    409dfb <_d_switch_string+0x353>
			{
				c = cast(ubyte)c1 - cast(ubyte)pca[0];
  409d5b:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  409d5f:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  409d65:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  409d69:	48 89 95 50 ff ff ff 	mov    %rdx,-0xb0(%rbp)
  409d70:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  409d74:	48 83 f8 00          	cmp    $0x0,%rax
  409d78:	76 0d                	jbe    409d87 <_d_switch_string+0x2df>
  409d7a:	48 c7 85 58 ff ff ff 	movq   $0x0,-0xa8(%rbp)
  409d81:	00 00 00 00 
  409d85:	eb 22                	jmp    409da9 <_d_switch_string+0x301>
  409d87:	48 c7 45 d0 0b 00 00 	movq   $0xb,-0x30(%rbp)
  409d8e:	00 
  409d8f:	48 c7 45 d8 52 25 41 	movq   $0x412552,-0x28(%rbp)
  409d96:	00 
  409d97:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  409d9b:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  409d9f:	ba 0a 01 00 00       	mov    $0x10a,%edx
  409da4:	e8 30 0f 00 00       	callq  40acd9 <_d_array_bounds>
  409da9:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  409db0:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  409db7:	0f b6 00             	movzbl (%rax),%eax
  409dba:	0f b6 c0             	movzbl %al,%eax
  409dbd:	8b 8d 4c ff ff ff    	mov    -0xb4(%rbp),%ecx
  409dc3:	29 c1                	sub    %eax,%ecx
  409dc5:	89 c8                	mov    %ecx,%eax
  409dc7:	89 45 ec             	mov    %eax,-0x14(%rbp)
				if (c == 0)
  409dca:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  409dce:	75 2b                	jne    409dfb <_d_switch_string+0x353>
				{
					c = memcmp(ca.ptr, pca.ptr, ca.length);
  409dd0:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  409dd7:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  409ddb:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
  409de2:	e8 61 39 00 00       	callq  40d748 <_D6kernel4core6system6memcmpFPvPvmZl>
  409de7:	89 45 ec             	mov    %eax,-0x14(%rbp)
					if (c == 0)
  409dea:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  409dee:	75 0b                	jne    409dfb <_d_switch_string+0x353>
					{
						return mid;
  409df0:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409df3:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%rbp)
  409df9:	eb 28                	jmp    409e23 <_d_switch_string+0x37b>
					}
				}
			}
			if (c < 0)
  409dfb:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  409dff:	79 0b                	jns    409e0c <_d_switch_string+0x364>
			{
				high = mid;
  409e01:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409e04:	89 45 f4             	mov    %eax,-0xc(%rbp)
  409e07:	e9 9c fe ff ff       	jmpq   409ca8 <_d_switch_string+0x200>
			}
			else
			{
				low = mid + 1;
  409e0c:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409e0f:	ff c0                	inc    %eax
  409e11:	89 45 f8             	mov    %eax,-0x8(%rbp)
					{
						return mid;
					}
				}
			}
			if (c < 0)
  409e14:	e9 8f fe ff ff       	jmpq   409ca8 <_d_switch_string+0x200>
				low = mid + 1;
			}
		}
	}

	return -1;				// not found
  409e19:	c7 85 24 ff ff ff ff 	movl   $0xffffffff,-0xdc(%rbp)
  409e20:	ff ff ff 
  409e23:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
}
  409e29:	c9                   	leaveq 
  409e2a:	c3                   	retq   

0000000000409e2b <_d_switch_ustring>:

int _d_switch_ustring(wchar[][] table, wchar[] ca)
  409e2b:	55                   	push   %rbp
  409e2c:	48 89 e5             	mov    %rsp,%rbp
  409e2f:	48 83 ec 70          	sub    $0x70,%rsp
  409e33:	49 89 d0             	mov    %rdx,%r8
  409e36:	48 89 f8             	mov    %rdi,%rax
  409e39:	48 89 f2             	mov    %rsi,%rdx
  409e3c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  409e40:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  409e44:	4c 89 c0             	mov    %r8,%rax
  409e47:	48 89 ca             	mov    %rcx,%rdx
  409e4a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  409e4e:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
{
	int low;
  409e52:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	int high;
  409e59:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	int mid;
  409e60:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	int c;
  409e67:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
	wchar[] pca;
  409e6e:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  409e75:	00 
  409e76:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  409e7d:	00 

	low = 0;
  409e7e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	high = table.length;
  409e85:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  409e89:	89 45 f8             	mov    %eax,-0x8(%rbp)
  409e8c:	eb 00                	jmp    409e8e <_d_switch_ustring+0x63>

	// Do binary search
	while (low < high)
  409e8e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  409e91:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  409e94:	0f 9c c0             	setl   %al
  409e97:	83 f0 01             	xor    $0x1,%eax
  409e9a:	84 c0                	test   %al,%al
  409e9c:	0f 85 ca 00 00 00    	jne    409f6c <_d_switch_ustring+0x141>
	{
		mid = (low + high) >> 1;
  409ea2:	8b 45 f8             	mov    -0x8(%rbp),%eax
  409ea5:	03 45 fc             	add    -0x4(%rbp),%eax
  409ea8:	d1 f8                	sar    %eax
  409eaa:	89 45 f4             	mov    %eax,-0xc(%rbp)
		pca = table[mid];
  409ead:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409eb1:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  409eb5:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409eb8:	48 63 d0             	movslq %eax,%rdx
  409ebb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  409ebf:	48 39 c2             	cmp    %rax,%rdx
  409ec2:	73 0b                	jae    409ecf <_d_switch_ustring+0xa4>
  409ec4:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409ec7:	48 98                	cltq   
  409ec9:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  409ecd:	eb 22                	jmp    409ef1 <_d_switch_ustring+0xc6>
  409ecf:	48 c7 45 e0 0b 00 00 	movq   $0xb,-0x20(%rbp)
  409ed6:	00 
  409ed7:	48 c7 45 e8 52 25 41 	movq   $0x412552,-0x18(%rbp)
  409ede:	00 
  409edf:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  409ee3:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  409ee7:	ba 31 01 00 00       	mov    $0x131,%edx
  409eec:	e8 e8 0d 00 00       	callq  40acd9 <_d_array_bounds>
  409ef1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  409ef5:	48 c1 e0 04          	shl    $0x4,%rax
  409ef9:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  409efd:	48 01 c2             	add    %rax,%rdx
  409f00:	48 8b 02             	mov    (%rdx),%rax
  409f03:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  409f07:	48 8b 42 08          	mov    0x8(%rdx),%rax
  409f0b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		c = ca.length - pca.length;
  409f0f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  409f13:	89 c2                	mov    %eax,%edx
  409f15:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409f19:	89 d1                	mov    %edx,%ecx
  409f1b:	29 c1                	sub    %eax,%ecx
  409f1d:	89 c8                	mov    %ecx,%eax
  409f1f:	89 45 f0             	mov    %eax,-0x10(%rbp)
		if (c == 0)
  409f22:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  409f26:	75 26                	jne    409f4e <_d_switch_ustring+0x123>
		{
			c = memcmp(ca.ptr, pca.ptr, ca.length * wchar.sizeof);
  409f28:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  409f2c:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  409f30:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  409f34:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  409f38:	e8 0b 38 00 00       	callq  40d748 <_D6kernel4core6system6memcmpFPvPvmZl>
  409f3d:	89 45 f0             	mov    %eax,-0x10(%rbp)
			if (c == 0)
  409f40:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  409f44:	75 08                	jne    409f4e <_d_switch_ustring+0x123>
			{
				return mid;
  409f46:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409f49:	89 45 ac             	mov    %eax,-0x54(%rbp)
  409f4c:	eb 25                	jmp    409f73 <_d_switch_ustring+0x148>
			}
		}
		if (c < 0)
  409f4e:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  409f52:	79 0b                	jns    409f5f <_d_switch_ustring+0x134>
		{
			high = mid;
  409f54:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409f57:	89 45 f8             	mov    %eax,-0x8(%rbp)
  409f5a:	e9 2f ff ff ff       	jmpq   409e8e <_d_switch_ustring+0x63>
		}
		else
		{
			low = mid + 1;
  409f5f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409f62:	ff c0                	inc    %eax
  409f64:	89 45 fc             	mov    %eax,-0x4(%rbp)
			if (c == 0)
			{
				return mid;
			}
		}
		if (c < 0)
  409f67:	e9 22 ff ff ff       	jmpq   409e8e <_d_switch_ustring+0x63>
		{
			low = mid + 1;
		}
	}

	return -1;				// not found
  409f6c:	c7 45 ac ff ff ff ff 	movl   $0xffffffff,-0x54(%rbp)
  409f73:	8b 45 ac             	mov    -0x54(%rbp),%eax
}
  409f76:	c9                   	leaveq 
  409f77:	c3                   	retq   

0000000000409f78 <_d_switch_dstring>:

int _d_switch_dstring(dchar[][] table, dchar[] ca)
  409f78:	55                   	push   %rbp
  409f79:	48 89 e5             	mov    %rsp,%rbp
  409f7c:	48 83 ec 70          	sub    $0x70,%rsp
  409f80:	49 89 d0             	mov    %rdx,%r8
  409f83:	48 89 f8             	mov    %rdi,%rax
  409f86:	48 89 f2             	mov    %rsi,%rdx
  409f89:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  409f8d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  409f91:	4c 89 c0             	mov    %r8,%rax
  409f94:	48 89 ca             	mov    %rcx,%rdx
  409f97:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  409f9b:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
{
	int low;
  409f9f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	int high;
  409fa6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	int mid;
  409fad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	int c;
  409fb4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
	dchar[] pca;
  409fbb:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  409fc2:	00 
  409fc3:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  409fca:	00 

	low = 0;
  409fcb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	high = table.length;
  409fd2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  409fd6:	89 45 f8             	mov    %eax,-0x8(%rbp)
  409fd9:	eb 00                	jmp    409fdb <_d_switch_dstring+0x63>

	// Do binary search
	while (low < high)
  409fdb:	8b 45 fc             	mov    -0x4(%rbp),%eax
  409fde:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  409fe1:	0f 9c c0             	setl   %al
  409fe4:	83 f0 01             	xor    $0x1,%eax
  409fe7:	84 c0                	test   %al,%al
  409fe9:	0f 85 ce 00 00 00    	jne    40a0bd <_d_switch_dstring+0x145>
	{
		mid = (low + high) >> 1;
  409fef:	8b 45 f8             	mov    -0x8(%rbp),%eax
  409ff2:	03 45 fc             	add    -0x4(%rbp),%eax
  409ff5:	d1 f8                	sar    %eax
  409ff7:	89 45 f4             	mov    %eax,-0xc(%rbp)
		pca = table[mid];
  409ffa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409ffe:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  40a002:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40a005:	48 63 d0             	movslq %eax,%rdx
  40a008:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40a00c:	48 39 c2             	cmp    %rax,%rdx
  40a00f:	73 0b                	jae    40a01c <_d_switch_dstring+0xa4>
  40a011:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40a014:	48 98                	cltq   
  40a016:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40a01a:	eb 22                	jmp    40a03e <_d_switch_dstring+0xc6>
  40a01c:	48 c7 45 e0 0b 00 00 	movq   $0xb,-0x20(%rbp)
  40a023:	00 
  40a024:	48 c7 45 e8 52 25 41 	movq   $0x412552,-0x18(%rbp)
  40a02b:	00 
  40a02c:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40a030:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40a034:	ba 57 01 00 00       	mov    $0x157,%edx
  40a039:	e8 9b 0c 00 00       	callq  40acd9 <_d_array_bounds>
  40a03e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40a042:	48 c1 e0 04          	shl    $0x4,%rax
  40a046:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40a04a:	48 01 c2             	add    %rax,%rdx
  40a04d:	48 8b 02             	mov    (%rdx),%rax
  40a050:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40a054:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40a058:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		c = ca.length - pca.length;
  40a05c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40a060:	89 c2                	mov    %eax,%edx
  40a062:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40a066:	89 d1                	mov    %edx,%ecx
  40a068:	29 c1                	sub    %eax,%ecx
  40a06a:	89 c8                	mov    %ecx,%eax
  40a06c:	89 45 f0             	mov    %eax,-0x10(%rbp)
		if (c == 0)
  40a06f:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  40a073:	75 2a                	jne    40a09f <_d_switch_dstring+0x127>
		{
			c = memcmp(ca.ptr, pca.ptr, ca.length * dchar.sizeof);
  40a075:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40a079:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  40a080:	00 
  40a081:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40a085:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  40a089:	e8 ba 36 00 00       	callq  40d748 <_D6kernel4core6system6memcmpFPvPvmZl>
  40a08e:	89 45 f0             	mov    %eax,-0x10(%rbp)
			if (c == 0)
  40a091:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  40a095:	75 08                	jne    40a09f <_d_switch_dstring+0x127>
			{
				return mid;
  40a097:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40a09a:	89 45 ac             	mov    %eax,-0x54(%rbp)
  40a09d:	eb 25                	jmp    40a0c4 <_d_switch_dstring+0x14c>
			}
		}
		if (c < 0)
  40a09f:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  40a0a3:	79 0b                	jns    40a0b0 <_d_switch_dstring+0x138>
		{
			high = mid;
  40a0a5:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40a0a8:	89 45 f8             	mov    %eax,-0x8(%rbp)
  40a0ab:	e9 2b ff ff ff       	jmpq   409fdb <_d_switch_dstring+0x63>
		}
		else
		{
			low = mid + 1;
  40a0b0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40a0b3:	ff c0                	inc    %eax
  40a0b5:	89 45 fc             	mov    %eax,-0x4(%rbp)
			if (c == 0)
			{
				return mid;
			}
		}
		if (c < 0)
  40a0b8:	e9 1e ff ff ff       	jmpq   409fdb <_d_switch_dstring+0x63>
		{
			low = mid + 1;
		}
	}

	return -1;				// not found
  40a0bd:	c7 45 ac ff ff ff ff 	movl   $0xffffffff,-0x54(%rbp)
  40a0c4:	8b 45 ac             	mov    -0x54(%rbp),%eax
}
  40a0c7:	c9                   	leaveq 
  40a0c8:	c3                   	retq   

000000000040a0c9 <_d_newclass>:
  40a0c9:	55                   	push   %rbp
  40a0ca:	48 89 e5             	mov    %rsp,%rbp
  40a0cd:	48 83 ec 30          	sub    $0x30,%rsp
  40a0d1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
		{
			low = mid + 1;
		}
	}

	return -1;				// not found
  40a0d5:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a0dc:	00 
  40a0dd:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a0e4:	00 
  40a0e5:	48 c7 45 f0 41 00 00 	movq   $0x41,-0x10(%rbp)
  40a0ec:	00 
  40a0ed:	48 c7 45 f8 60 25 41 	movq   $0x412560,-0x8(%rbp)
  40a0f4:	00 
  40a0f5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a0f9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a0fd:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a101:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a105:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a10b:	e8 81 0b 00 00       	callq  40ac91 <_d_assert_msg>
  40a110:	c9                   	leaveq 
  40a111:	c3                   	retq   

000000000040a112 <_d_delinterface>:
  40a112:	55                   	push   %rbp
  40a113:	48 89 e5             	mov    %rsp,%rbp
  40a116:	48 83 ec 30          	sub    $0x30,%rsp
  40a11a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a11e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a125:	00 
  40a126:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a12d:	00 
  40a12e:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40a135:	00 
  40a136:	48 c7 45 f8 a8 25 41 	movq   $0x4125a8,-0x8(%rbp)
  40a13d:	00 
  40a13e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a142:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a146:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a14a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a14e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a154:	e8 38 0b 00 00       	callq  40ac91 <_d_assert_msg>
  40a159:	c9                   	leaveq 
  40a15a:	c3                   	retq   

000000000040a15b <_d_delclass>:
  40a15b:	55                   	push   %rbp
  40a15c:	48 89 e5             	mov    %rsp,%rbp
  40a15f:	48 83 ec 30          	sub    $0x30,%rsp
  40a163:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a167:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a16e:	00 
  40a16f:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a176:	00 
  40a177:	48 c7 45 f0 3c 00 00 	movq   $0x3c,-0x10(%rbp)
  40a17e:	00 
  40a17f:	48 c7 45 f8 e8 25 41 	movq   $0x4125e8,-0x8(%rbp)
  40a186:	00 
  40a187:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a18b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a18f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a193:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a197:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a19d:	e8 ef 0a 00 00       	callq  40ac91 <_d_assert_msg>
  40a1a2:	c9                   	leaveq 
  40a1a3:	c3                   	retq   

000000000040a1a4 <_d_newarrayT>:
  40a1a4:	55                   	push   %rbp
  40a1a5:	48 89 e5             	mov    %rsp,%rbp
  40a1a8:	48 83 ec 30          	sub    $0x30,%rsp
  40a1ac:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a1b0:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a1b4:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a1bb:	00 
  40a1bc:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a1c3:	00 
  40a1c4:	48 c7 45 f0 4f 00 00 	movq   $0x4f,-0x10(%rbp)
  40a1cb:	00 
  40a1cc:	48 c7 45 f8 28 26 41 	movq   $0x412628,-0x8(%rbp)
  40a1d3:	00 
  40a1d4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a1d8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a1dc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a1e0:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a1e4:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a1ea:	e8 a2 0a 00 00       	callq  40ac91 <_d_assert_msg>
  40a1ef:	c9                   	leaveq 
  40a1f0:	c3                   	retq   

000000000040a1f1 <_d_newarrayiT>:
  40a1f1:	55                   	push   %rbp
  40a1f2:	48 89 e5             	mov    %rsp,%rbp
  40a1f5:	48 83 ec 30          	sub    $0x30,%rsp
  40a1f9:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a1fd:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a201:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a208:	00 
  40a209:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a210:	00 
  40a211:	48 c7 45 f0 50 00 00 	movq   $0x50,-0x10(%rbp)
  40a218:	00 
  40a219:	48 c7 45 f8 78 26 41 	movq   $0x412678,-0x8(%rbp)
  40a220:	00 
  40a221:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a225:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a229:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a22d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a231:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a237:	e8 55 0a 00 00       	callq  40ac91 <_d_assert_msg>
  40a23c:	c9                   	leaveq 
  40a23d:	c3                   	retq   

000000000040a23e <_d_newarraymTp>:
  40a23e:	55                   	push   %rbp
  40a23f:	48 89 e5             	mov    %rsp,%rbp
  40a242:	48 83 ec 40          	sub    $0x40,%rsp
  40a246:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a24a:	89 55 d4             	mov    %edx,-0x2c(%rbp)
  40a24d:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  40a251:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a258:	00 
  40a259:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a260:	00 
  40a261:	48 c7 45 f0 5c 00 00 	movq   $0x5c,-0x10(%rbp)
  40a268:	00 
  40a269:	48 c7 45 f8 d0 26 41 	movq   $0x4126d0,-0x8(%rbp)
  40a270:	00 
  40a271:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a275:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a279:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a27d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a281:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a287:	e8 05 0a 00 00       	callq  40ac91 <_d_assert_msg>
  40a28c:	c9                   	leaveq 
  40a28d:	c3                   	retq   

000000000040a28e <_d_newarraymiTp>:
  40a28e:	55                   	push   %rbp
  40a28f:	48 89 e5             	mov    %rsp,%rbp
  40a292:	48 83 ec 40          	sub    $0x40,%rsp
  40a296:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a29a:	89 55 d4             	mov    %edx,-0x2c(%rbp)
  40a29d:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  40a2a1:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a2a8:	00 
  40a2a9:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a2b0:	00 
  40a2b1:	48 c7 45 f0 5d 00 00 	movq   $0x5d,-0x10(%rbp)
  40a2b8:	00 
  40a2b9:	48 c7 45 f8 30 27 41 	movq   $0x412730,-0x8(%rbp)
  40a2c0:	00 
  40a2c1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a2c5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a2c9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a2cd:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a2d1:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a2d7:	e8 b5 09 00 00       	callq  40ac91 <_d_assert_msg>
  40a2dc:	c9                   	leaveq 
  40a2dd:	c3                   	retq   

000000000040a2de <_d_delarray>:
  40a2de:	55                   	push   %rbp
  40a2df:	48 89 e5             	mov    %rsp,%rbp
  40a2e2:	48 83 ec 30          	sub    $0x30,%rsp
  40a2e6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a2ea:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a2f1:	00 
  40a2f2:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a2f9:	00 
  40a2fa:	48 c7 45 f0 3b 00 00 	movq   $0x3b,-0x10(%rbp)
  40a301:	00 
  40a302:	48 c7 45 f8 90 27 41 	movq   $0x412790,-0x8(%rbp)
  40a309:	00 
  40a30a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a30e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a312:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a316:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a31a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a320:	e8 6c 09 00 00       	callq  40ac91 <_d_assert_msg>
  40a325:	c9                   	leaveq 
  40a326:	c3                   	retq   

000000000040a327 <_d_delmemory>:
  40a327:	55                   	push   %rbp
  40a328:	48 89 e5             	mov    %rsp,%rbp
  40a32b:	48 83 ec 30          	sub    $0x30,%rsp
  40a32f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a333:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a33a:	00 
  40a33b:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a342:	00 
  40a343:	48 c7 45 f0 3c 00 00 	movq   $0x3c,-0x10(%rbp)
  40a34a:	00 
  40a34b:	48 c7 45 f8 d0 27 41 	movq   $0x4127d0,-0x8(%rbp)
  40a352:	00 
  40a353:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a357:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a35b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a35f:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a363:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a369:	e8 23 09 00 00       	callq  40ac91 <_d_assert_msg>
  40a36e:	c9                   	leaveq 
  40a36f:	c3                   	retq   

000000000040a370 <_d_callfinalizer>:
  40a370:	55                   	push   %rbp
  40a371:	48 89 e5             	mov    %rsp,%rbp
  40a374:	48 83 ec 30          	sub    $0x30,%rsp
  40a378:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a37c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a383:	00 
  40a384:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a38b:	00 
  40a38c:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40a393:	00 
  40a394:	48 c7 45 f8 10 28 41 	movq   $0x412810,-0x8(%rbp)
  40a39b:	00 
  40a39c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a3a0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a3a4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a3a8:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a3ac:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a3b2:	e8 da 08 00 00       	callq  40ac91 <_d_assert_msg>
  40a3b7:	c9                   	leaveq 
  40a3b8:	c3                   	retq   

000000000040a3b9 <rt_finalize>:
  40a3b9:	55                   	push   %rbp
  40a3ba:	48 89 e5             	mov    %rsp,%rbp
  40a3bd:	48 83 ec 30          	sub    $0x30,%rsp
  40a3c1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a3c5:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  40a3c9:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a3d0:	00 
  40a3d1:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a3d8:	00 
  40a3d9:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40a3e0:	00 
  40a3e1:	48 c7 45 f8 50 28 41 	movq   $0x412850,-0x8(%rbp)
  40a3e8:	00 
  40a3e9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a3ed:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a3f1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a3f5:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a3f9:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a3ff:	e8 8d 08 00 00       	callq  40ac91 <_d_assert_msg>
  40a404:	c9                   	leaveq 
  40a405:	c3                   	retq   

000000000040a406 <_d_arraysetlengthT>:
  40a406:	55                   	push   %rbp
  40a407:	48 89 e5             	mov    %rsp,%rbp
  40a40a:	48 83 ec 40          	sub    $0x40,%rsp
  40a40e:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a412:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a416:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  40a41a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a421:	00 
  40a422:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a429:	00 
  40a42a:	48 c7 45 f0 63 00 00 	movq   $0x63,-0x10(%rbp)
  40a431:	00 
  40a432:	48 c7 45 f8 a0 28 41 	movq   $0x4128a0,-0x8(%rbp)
  40a439:	00 
  40a43a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a43e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a442:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a446:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a44a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a450:	e8 3c 08 00 00       	callq  40ac91 <_d_assert_msg>
  40a455:	c9                   	leaveq 
  40a456:	c3                   	retq   

000000000040a457 <_d_arraysetlengthiT>:
  40a457:	55                   	push   %rbp
  40a458:	48 89 e5             	mov    %rsp,%rbp
  40a45b:	48 83 ec 40          	sub    $0x40,%rsp
  40a45f:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a463:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a467:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  40a46b:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a472:	00 
  40a473:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a47a:	00 
  40a47b:	48 c7 45 f0 64 00 00 	movq   $0x64,-0x10(%rbp)
  40a482:	00 
  40a483:	48 c7 45 f8 08 29 41 	movq   $0x412908,-0x8(%rbp)
  40a48a:	00 
  40a48b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a48f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a493:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a497:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a49b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a4a1:	e8 eb 07 00 00       	callq  40ac91 <_d_assert_msg>
  40a4a6:	c9                   	leaveq 
  40a4a7:	c3                   	retq   

000000000040a4a8 <_d_arrayappendT>:
  40a4a8:	55                   	push   %rbp
  40a4a9:	48 89 e5             	mov    %rsp,%rbp
  40a4ac:	48 83 ec 40          	sub    $0x40,%rsp
  40a4b0:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a4b4:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a4b8:	4c 89 c0             	mov    %r8,%rax
  40a4bb:	48 89 ca             	mov    %rcx,%rdx
  40a4be:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  40a4c2:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40a4c6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a4cd:	00 
  40a4ce:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a4d5:	00 
  40a4d6:	48 c7 45 f0 58 00 00 	movq   $0x58,-0x10(%rbp)
  40a4dd:	00 
  40a4de:	48 c7 45 f8 70 29 41 	movq   $0x412970,-0x8(%rbp)
  40a4e5:	00 
  40a4e6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a4ea:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a4ee:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a4f2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a4f6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a4fc:	e8 90 07 00 00       	callq  40ac91 <_d_assert_msg>
  40a501:	c9                   	leaveq 
  40a502:	c3                   	retq   

000000000040a503 <_d_arrayappendcTp>:
  40a503:	55                   	push   %rbp
  40a504:	48 89 e5             	mov    %rsp,%rbp
  40a507:	48 83 ec 40          	sub    $0x40,%rsp
  40a50b:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a50f:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a513:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  40a517:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a51e:	00 
  40a51f:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a526:	00 
  40a527:	48 c7 45 f0 62 00 00 	movq   $0x62,-0x10(%rbp)
  40a52e:	00 
  40a52f:	48 c7 45 f8 d0 29 41 	movq   $0x4129d0,-0x8(%rbp)
  40a536:	00 
  40a537:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a53b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a53f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a543:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a547:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a54d:	e8 3f 07 00 00       	callq  40ac91 <_d_assert_msg>
  40a552:	c9                   	leaveq 
  40a553:	c3                   	retq   

000000000040a554 <_d_arraycatT>:
  40a554:	55                   	push   %rbp
  40a555:	48 89 e5             	mov    %rsp,%rbp
  40a558:	48 83 ec 50          	sub    $0x50,%rsp
  40a55c:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a560:	4c 89 c6             	mov    %r8,%rsi
  40a563:	4c 89 cf             	mov    %r9,%rdi
  40a566:	48 89 d0             	mov    %rdx,%rax
  40a569:	48 89 ca             	mov    %rcx,%rdx
  40a56c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40a570:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a574:	48 89 f0             	mov    %rsi,%rax
  40a577:	48 89 fa             	mov    %rdi,%rdx
  40a57a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40a57e:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  40a582:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a589:	00 
  40a58a:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a591:	00 
  40a592:	48 c7 45 f0 55 00 00 	movq   $0x55,-0x10(%rbp)
  40a599:	00 
  40a59a:	48 c7 45 f8 38 2a 41 	movq   $0x412a38,-0x8(%rbp)
  40a5a1:	00 
  40a5a2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a5a6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a5aa:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a5ae:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a5b2:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a5b8:	e8 d4 06 00 00       	callq  40ac91 <_d_assert_msg>
  40a5bd:	c9                   	leaveq 
  40a5be:	c3                   	retq   

000000000040a5bf <_d_arraycatnT>:
  40a5bf:	55                   	push   %rbp
  40a5c0:	48 89 e5             	mov    %rsp,%rbp
  40a5c3:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  40a5ca:	48 89 b5 28 ff ff ff 	mov    %rsi,-0xd8(%rbp)
  40a5d1:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  40a5d8:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  40a5df:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  40a5e6:	0f b6 c0             	movzbl %al,%eax
  40a5e9:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  40a5f0:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
  40a5f7:	48 8d 04 8d 00 00 00 	lea    0x0(,%rcx,4),%rax
  40a5fe:	00 
  40a5ff:	48 c7 85 18 ff ff ff 	movq   $0x40a63e,-0xe8(%rbp)
  40a606:	3e a6 40 00 
  40a60a:	48 29 85 18 ff ff ff 	sub    %rax,-0xe8(%rbp)
  40a611:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  40a615:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
  40a61c:	ff e1                	jmpq   *%rcx
  40a61e:	0f 29 78 f1          	movaps %xmm7,-0xf(%rax)
  40a622:	0f 29 70 e1          	movaps %xmm6,-0x1f(%rax)
  40a626:	0f 29 68 d1          	movaps %xmm5,-0x2f(%rax)
  40a62a:	0f 29 60 c1          	movaps %xmm4,-0x3f(%rax)
  40a62e:	0f 29 58 b1          	movaps %xmm3,-0x4f(%rax)
  40a632:	0f 29 50 a1          	movaps %xmm2,-0x5f(%rax)
  40a636:	0f 29 48 91          	movaps %xmm1,-0x6f(%rax)
  40a63a:	0f 29 40 81          	movaps %xmm0,-0x7f(%rax)
  40a63e:	89 95 24 ff ff ff    	mov    %edx,-0xdc(%rbp)
  40a644:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  40a64b:	00 00 00 00 
  40a64f:	48 c7 85 38 ff ff ff 	movq   $0x412482,-0xc8(%rbp)
  40a656:	82 24 41 00 
  40a65a:	48 c7 85 40 ff ff ff 	movq   $0x4f,-0xc0(%rbp)
  40a661:	4f 00 00 00 
  40a665:	48 c7 85 48 ff ff ff 	movq   $0x412a90,-0xb8(%rbp)
  40a66c:	90 2a 41 00 
  40a670:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  40a677:	48 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%rcx
  40a67e:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
  40a685:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
  40a68c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a692:	e8 fa 05 00 00       	callq  40ac91 <_d_assert_msg>
  40a697:	c9                   	leaveq 
  40a698:	c3                   	retq   

000000000040a699 <_adDupT>:
  40a699:	55                   	push   %rbp
  40a69a:	48 89 e5             	mov    %rsp,%rbp
  40a69d:	48 83 ec 40          	sub    $0x40,%rsp
  40a6a1:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a6a5:	48 89 d0             	mov    %rdx,%rax
  40a6a8:	48 89 ca             	mov    %rcx,%rdx
  40a6ab:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40a6af:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a6b3:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a6ba:	00 
  40a6bb:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a6c2:	00 
  40a6c3:	48 c7 45 f0 44 00 00 	movq   $0x44,-0x10(%rbp)
  40a6ca:	00 
  40a6cb:	48 c7 45 f8 e0 2a 41 	movq   $0x412ae0,-0x8(%rbp)
  40a6d2:	00 
  40a6d3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a6d7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a6db:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a6df:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a6e3:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a6e9:	e8 a3 05 00 00       	callq  40ac91 <_d_assert_msg>
  40a6ee:	c9                   	leaveq 
  40a6ef:	c3                   	retq   

000000000040a6f0 <gc_init>:
  40a6f0:	55                   	push   %rbp
  40a6f1:	48 89 e5             	mov    %rsp,%rbp
  40a6f4:	48 83 ec 20          	sub    $0x20,%rsp
  40a6f8:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a6ff:	00 
  40a700:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a707:	00 
  40a708:	48 c7 45 f0 2f 00 00 	movq   $0x2f,-0x10(%rbp)
  40a70f:	00 
  40a710:	48 c7 45 f8 28 2b 41 	movq   $0x412b28,-0x8(%rbp)
  40a717:	00 
  40a718:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a71c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a720:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a724:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a728:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a72e:	e8 5e 05 00 00       	callq  40ac91 <_d_assert_msg>
  40a733:	c9                   	leaveq 
  40a734:	c3                   	retq   

000000000040a735 <gc_term>:
  40a735:	55                   	push   %rbp
  40a736:	48 89 e5             	mov    %rsp,%rbp
  40a739:	48 83 ec 20          	sub    $0x20,%rsp
  40a73d:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a744:	00 
  40a745:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a74c:	00 
  40a74d:	48 c7 45 f0 2f 00 00 	movq   $0x2f,-0x10(%rbp)
  40a754:	00 
  40a755:	48 c7 45 f8 58 2b 41 	movq   $0x412b58,-0x8(%rbp)
  40a75c:	00 
  40a75d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a761:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a765:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a769:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a76d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a773:	e8 19 05 00 00       	callq  40ac91 <_d_assert_msg>
  40a778:	c9                   	leaveq 
  40a779:	c3                   	retq   

000000000040a77a <gc_enable>:
  40a77a:	55                   	push   %rbp
  40a77b:	48 89 e5             	mov    %rsp,%rbp
  40a77e:	48 83 ec 20          	sub    $0x20,%rsp
  40a782:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a789:	00 
  40a78a:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a791:	00 
  40a792:	48 c7 45 f0 31 00 00 	movq   $0x31,-0x10(%rbp)
  40a799:	00 
  40a79a:	48 c7 45 f8 88 2b 41 	movq   $0x412b88,-0x8(%rbp)
  40a7a1:	00 
  40a7a2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a7a6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a7aa:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a7ae:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a7b2:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a7b8:	e8 d4 04 00 00       	callq  40ac91 <_d_assert_msg>
  40a7bd:	c9                   	leaveq 
  40a7be:	c3                   	retq   

000000000040a7bf <gc_disable>:
  40a7bf:	55                   	push   %rbp
  40a7c0:	48 89 e5             	mov    %rsp,%rbp
  40a7c3:	48 83 ec 20          	sub    $0x20,%rsp
  40a7c7:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a7ce:	00 
  40a7cf:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a7d6:	00 
  40a7d7:	48 c7 45 f0 32 00 00 	movq   $0x32,-0x10(%rbp)
  40a7de:	00 
  40a7df:	48 c7 45 f8 c0 2b 41 	movq   $0x412bc0,-0x8(%rbp)
  40a7e6:	00 
  40a7e7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a7eb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a7ef:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a7f3:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a7f7:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a7fd:	e8 8f 04 00 00       	callq  40ac91 <_d_assert_msg>
  40a802:	c9                   	leaveq 
  40a803:	c3                   	retq   

000000000040a804 <gc_collect>:
  40a804:	55                   	push   %rbp
  40a805:	48 89 e5             	mov    %rsp,%rbp
  40a808:	48 83 ec 20          	sub    $0x20,%rsp
  40a80c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a813:	00 
  40a814:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a81b:	00 
  40a81c:	48 c7 45 f0 32 00 00 	movq   $0x32,-0x10(%rbp)
  40a823:	00 
  40a824:	48 c7 45 f8 f8 2b 41 	movq   $0x412bf8,-0x8(%rbp)
  40a82b:	00 
  40a82c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a830:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a834:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a838:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a83c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a842:	e8 4a 04 00 00       	callq  40ac91 <_d_assert_msg>
  40a847:	c9                   	leaveq 
  40a848:	c3                   	retq   

000000000040a849 <gc_getAttr>:
  40a849:	55                   	push   %rbp
  40a84a:	48 89 e5             	mov    %rsp,%rbp
  40a84d:	48 83 ec 30          	sub    $0x30,%rsp
  40a851:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a855:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a85c:	00 
  40a85d:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a864:	00 
  40a865:	48 c7 45 f0 3b 00 00 	movq   $0x3b,-0x10(%rbp)
  40a86c:	00 
  40a86d:	48 c7 45 f8 30 2c 41 	movq   $0x412c30,-0x8(%rbp)
  40a874:	00 
  40a875:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a879:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a87d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a881:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a885:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a88b:	e8 01 04 00 00       	callq  40ac91 <_d_assert_msg>
  40a890:	c9                   	leaveq 
  40a891:	c3                   	retq   

000000000040a892 <gc_setAttr>:
  40a892:	55                   	push   %rbp
  40a893:	48 89 e5             	mov    %rsp,%rbp
  40a896:	48 83 ec 30          	sub    $0x30,%rsp
  40a89a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a89e:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  40a8a1:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a8a8:	00 
  40a8a9:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a8b0:	00 
  40a8b1:	48 c7 45 f0 43 00 00 	movq   $0x43,-0x10(%rbp)
  40a8b8:	00 
  40a8b9:	48 c7 45 f8 70 2c 41 	movq   $0x412c70,-0x8(%rbp)
  40a8c0:	00 
  40a8c1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a8c5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a8c9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a8cd:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a8d1:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a8d7:	e8 b5 03 00 00       	callq  40ac91 <_d_assert_msg>
  40a8dc:	c9                   	leaveq 
  40a8dd:	c3                   	retq   

000000000040a8de <gc_clrAttr>:
  40a8de:	55                   	push   %rbp
  40a8df:	48 89 e5             	mov    %rsp,%rbp
  40a8e2:	48 83 ec 30          	sub    $0x30,%rsp
  40a8e6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a8ea:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  40a8ed:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a8f4:	00 
  40a8f5:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a8fc:	00 
  40a8fd:	48 c7 45 f0 43 00 00 	movq   $0x43,-0x10(%rbp)
  40a904:	00 
  40a905:	48 c7 45 f8 b8 2c 41 	movq   $0x412cb8,-0x8(%rbp)
  40a90c:	00 
  40a90d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a911:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a915:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a919:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a91d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a923:	e8 69 03 00 00       	callq  40ac91 <_d_assert_msg>
  40a928:	c9                   	leaveq 
  40a929:	c3                   	retq   

000000000040a92a <gc_malloc>:
  40a92a:	55                   	push   %rbp
  40a92b:	48 89 e5             	mov    %rsp,%rbp
  40a92e:	48 83 ec 30          	sub    $0x30,%rsp
  40a932:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a936:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  40a939:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a940:	00 
  40a941:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a948:	00 
  40a949:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40a950:	00 
  40a951:	48 c7 45 f8 00 2d 41 	movq   $0x412d00,-0x8(%rbp)
  40a958:	00 
  40a959:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a95d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a961:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a965:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a969:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a96f:	e8 1d 03 00 00       	callq  40ac91 <_d_assert_msg>
  40a974:	c9                   	leaveq 
  40a975:	c3                   	retq   

000000000040a976 <gc_calloc>:
  40a976:	55                   	push   %rbp
  40a977:	48 89 e5             	mov    %rsp,%rbp
  40a97a:	48 83 ec 30          	sub    $0x30,%rsp
  40a97e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a982:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  40a985:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a98c:	00 
  40a98d:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a994:	00 
  40a995:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40a99c:	00 
  40a99d:	48 c7 45 f8 50 2d 41 	movq   $0x412d50,-0x8(%rbp)
  40a9a4:	00 
  40a9a5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a9a9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a9ad:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a9b1:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a9b5:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a9bb:	e8 d1 02 00 00       	callq  40ac91 <_d_assert_msg>
  40a9c0:	c9                   	leaveq 
  40a9c1:	c3                   	retq   

000000000040a9c2 <gc_realloc>:
  40a9c2:	55                   	push   %rbp
  40a9c3:	48 89 e5             	mov    %rsp,%rbp
  40a9c6:	48 83 ec 40          	sub    $0x40,%rsp
  40a9ca:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a9ce:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40a9d2:	89 55 cc             	mov    %edx,-0x34(%rbp)
  40a9d5:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a9dc:	00 
  40a9dd:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40a9e4:	00 
  40a9e5:	48 c7 45 f0 54 00 00 	movq   $0x54,-0x10(%rbp)
  40a9ec:	00 
  40a9ed:	48 c7 45 f8 a0 2d 41 	movq   $0x412da0,-0x8(%rbp)
  40a9f4:	00 
  40a9f5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a9f9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a9fd:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40aa01:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40aa05:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40aa0b:	e8 81 02 00 00       	callq  40ac91 <_d_assert_msg>
  40aa10:	c9                   	leaveq 
  40aa11:	c3                   	retq   

000000000040aa12 <gc_extend>:
  40aa12:	55                   	push   %rbp
  40aa13:	48 89 e5             	mov    %rsp,%rbp
  40aa16:	48 83 ec 40          	sub    $0x40,%rsp
  40aa1a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40aa1e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40aa22:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40aa26:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40aa2d:	00 
  40aa2e:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40aa35:	00 
  40aa36:	48 c7 45 f0 52 00 00 	movq   $0x52,-0x10(%rbp)
  40aa3d:	00 
  40aa3e:	48 c7 45 f8 f8 2d 41 	movq   $0x412df8,-0x8(%rbp)
  40aa45:	00 
  40aa46:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40aa4a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40aa4e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40aa52:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40aa56:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40aa5c:	e8 30 02 00 00       	callq  40ac91 <_d_assert_msg>
  40aa61:	c9                   	leaveq 
  40aa62:	c3                   	retq   

000000000040aa63 <gc_free>:
  40aa63:	55                   	push   %rbp
  40aa64:	48 89 e5             	mov    %rsp,%rbp
  40aa67:	48 83 ec 30          	sub    $0x30,%rsp
  40aa6b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40aa6f:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40aa76:	00 
  40aa77:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40aa7e:	00 
  40aa7f:	48 c7 45 f0 38 00 00 	movq   $0x38,-0x10(%rbp)
  40aa86:	00 
  40aa87:	48 c7 45 f8 50 2e 41 	movq   $0x412e50,-0x8(%rbp)
  40aa8e:	00 
  40aa8f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40aa93:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40aa97:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40aa9b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40aa9f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40aaa5:	e8 e7 01 00 00       	callq  40ac91 <_d_assert_msg>
  40aaaa:	c9                   	leaveq 
  40aaab:	c3                   	retq   

000000000040aaac <gc_sizeOf>:
  40aaac:	55                   	push   %rbp
  40aaad:	48 89 e5             	mov    %rsp,%rbp
  40aab0:	48 83 ec 30          	sub    $0x30,%rsp
  40aab4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40aab8:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40aabf:	00 
  40aac0:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40aac7:	00 
  40aac8:	48 c7 45 f0 3c 00 00 	movq   $0x3c,-0x10(%rbp)
  40aacf:	00 
  40aad0:	48 c7 45 f8 90 2e 41 	movq   $0x412e90,-0x8(%rbp)
  40aad7:	00 
  40aad8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40aadc:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40aae0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40aae4:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40aae8:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40aaee:	e8 9e 01 00 00       	callq  40ac91 <_d_assert_msg>
  40aaf3:	c9                   	leaveq 
  40aaf4:	c3                   	retq   

000000000040aaf5 <gc_addRoot>:
  40aaf5:	55                   	push   %rbp
  40aaf6:	48 89 e5             	mov    %rsp,%rbp
  40aaf9:	48 83 ec 30          	sub    $0x30,%rsp
  40aafd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40ab01:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ab08:	00 
  40ab09:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40ab10:	00 
  40ab11:	48 c7 45 f0 3b 00 00 	movq   $0x3b,-0x10(%rbp)
  40ab18:	00 
  40ab19:	48 c7 45 f8 d0 2e 41 	movq   $0x412ed0,-0x8(%rbp)
  40ab20:	00 
  40ab21:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ab25:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ab29:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ab2d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ab31:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ab37:	e8 55 01 00 00       	callq  40ac91 <_d_assert_msg>
  40ab3c:	c9                   	leaveq 
  40ab3d:	c3                   	retq   

000000000040ab3e <gc_addRange>:
  40ab3e:	55                   	push   %rbp
  40ab3f:	48 89 e5             	mov    %rsp,%rbp
  40ab42:	48 83 ec 30          	sub    $0x30,%rsp
  40ab46:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40ab4a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40ab4e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ab55:	00 
  40ab56:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40ab5d:	00 
  40ab5e:	48 c7 45 f0 47 00 00 	movq   $0x47,-0x10(%rbp)
  40ab65:	00 
  40ab66:	48 c7 45 f8 10 2f 41 	movq   $0x412f10,-0x8(%rbp)
  40ab6d:	00 
  40ab6e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ab72:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ab76:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ab7a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ab7e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ab84:	e8 08 01 00 00       	callq  40ac91 <_d_assert_msg>
  40ab89:	c9                   	leaveq 
  40ab8a:	c3                   	retq   

000000000040ab8b <gc_removeRoot>:
  40ab8b:	55                   	push   %rbp
  40ab8c:	48 89 e5             	mov    %rsp,%rbp
  40ab8f:	48 83 ec 30          	sub    $0x30,%rsp
  40ab93:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40ab97:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ab9e:	00 
  40ab9f:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40aba6:	00 
  40aba7:	48 c7 45 f0 3e 00 00 	movq   $0x3e,-0x10(%rbp)
  40abae:	00 
  40abaf:	48 c7 45 f8 58 2f 41 	movq   $0x412f58,-0x8(%rbp)
  40abb6:	00 
  40abb7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40abbb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40abbf:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40abc3:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40abc7:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40abcd:	e8 bf 00 00 00       	callq  40ac91 <_d_assert_msg>
  40abd2:	c9                   	leaveq 
  40abd3:	c3                   	retq   

000000000040abd4 <gc_removeRange>:
  40abd4:	55                   	push   %rbp
  40abd5:	48 89 e5             	mov    %rsp,%rbp
  40abd8:	48 83 ec 30          	sub    $0x30,%rsp
  40abdc:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40abe0:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40abe7:	00 
  40abe8:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40abef:	00 
  40abf0:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40abf7:	00 
  40abf8:	48 c7 45 f8 98 2f 41 	movq   $0x412f98,-0x8(%rbp)
  40abff:	00 
  40ac00:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ac04:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ac08:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ac0c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ac10:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ac16:	e8 76 00 00 00       	callq  40ac91 <_d_assert_msg>
  40ac1b:	c9                   	leaveq 
  40ac1c:	c3                   	retq   

000000000040ac1d <onCollectResource>:
  40ac1d:	55                   	push   %rbp
  40ac1e:	48 89 e5             	mov    %rsp,%rbp
  40ac21:	48 83 ec 30          	sub    $0x30,%rsp
  40ac25:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40ac29:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ac30:	00 
  40ac31:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40ac38:	00 
  40ac39:	48 c7 45 f0 45 00 00 	movq   $0x45,-0x10(%rbp)
  40ac40:	00 
  40ac41:	48 c7 45 f8 d8 2f 41 	movq   $0x412fd8,-0x8(%rbp)
  40ac48:	00 
  40ac49:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ac4d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ac51:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ac55:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ac59:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ac5f:	e8 2d 00 00 00       	callq  40ac91 <_d_assert_msg>
  40ac64:	c9                   	leaveq 
  40ac65:	c3                   	retq   

000000000040ac66 <_d_assert>:

/**************************************************
 Exception stubs
**************************************************/

void _d_assert( char[] file, uint line )
  40ac66:	55                   	push   %rbp
  40ac67:	48 89 e5             	mov    %rsp,%rbp
  40ac6a:	48 83 ec 20          	sub    $0x20,%rsp
  40ac6e:	89 55 ec             	mov    %edx,-0x14(%rbp)
  40ac71:	48 89 f8             	mov    %rdi,%rax
  40ac74:	48 89 f2             	mov    %rsi,%rdx
  40ac77:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40ac7b:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
{
    onAssertError( file, line );
  40ac7f:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40ac82:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ac86:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ac8a:	e8 a0 00 00 00       	callq  40ad2f <onAssertError>
}
  40ac8f:	c9                   	leaveq 
  40ac90:	c3                   	retq   

000000000040ac91 <_d_assert_msg>:

void _d_assert_msg( char[] msg, char[] file, uint line )
  40ac91:	55                   	push   %rbp
  40ac92:	48 89 e5             	mov    %rsp,%rbp
  40ac95:	48 83 ec 30          	sub    $0x30,%rsp
  40ac99:	49 89 d1             	mov    %rdx,%r9
  40ac9c:	44 89 45 dc          	mov    %r8d,-0x24(%rbp)
  40aca0:	48 89 f8             	mov    %rdi,%rax
  40aca3:	48 89 f2             	mov    %rsi,%rdx
  40aca6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40acaa:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  40acae:	4c 89 c8             	mov    %r9,%rax
  40acb1:	48 89 ca             	mov    %rcx,%rdx
  40acb4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40acb8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
{
    onAssertErrorMsg( file, line, msg );
  40acbc:	8b 55 dc             	mov    -0x24(%rbp),%edx
  40acbf:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40acc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40acc7:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40accb:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40accf:	49 89 c0             	mov    %rax,%r8
  40acd2:	e8 a1 00 00 00       	callq  40ad78 <onAssertErrorMsg>
}
  40acd7:	c9                   	leaveq 
  40acd8:	c3                   	retq   

000000000040acd9 <_d_array_bounds>:

void _d_array_bounds( char[] file, uint line )
  40acd9:	55                   	push   %rbp
  40acda:	48 89 e5             	mov    %rsp,%rbp
  40acdd:	48 83 ec 20          	sub    $0x20,%rsp
  40ace1:	89 55 ec             	mov    %edx,-0x14(%rbp)
  40ace4:	48 89 f8             	mov    %rdi,%rax
  40ace7:	48 89 f2             	mov    %rsi,%rdx
  40acea:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40acee:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
{
    onArrayBoundsError( file, line );
  40acf2:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40acf5:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40acf9:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40acfd:	e8 cd 00 00 00       	callq  40adcf <onArrayBoundsError>
}
  40ad02:	c9                   	leaveq 
  40ad03:	c3                   	retq   

000000000040ad04 <_d_switch_error>:

void _d_switch_error( char[] file, uint line )
  40ad04:	55                   	push   %rbp
  40ad05:	48 89 e5             	mov    %rsp,%rbp
  40ad08:	48 83 ec 20          	sub    $0x20,%rsp
  40ad0c:	89 55 ec             	mov    %edx,-0x14(%rbp)
  40ad0f:	48 89 f8             	mov    %rdi,%rax
  40ad12:	48 89 f2             	mov    %rsi,%rdx
  40ad15:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40ad19:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
{
    onSwitchError( file, line );
  40ad1d:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40ad20:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ad24:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ad28:	e8 de 00 00 00       	callq  40ae0b <onSwitchError>
}
  40ad2d:	c9                   	leaveq 
  40ad2e:	c3                   	retq   

000000000040ad2f <onAssertError>:

private void onAssertError(char[] file, size_t line)
  40ad2f:	55                   	push   %rbp
  40ad30:	48 89 e5             	mov    %rsp,%rbp
  40ad33:	48 83 ec 30          	sub    $0x30,%rsp
  40ad37:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40ad3b:	48 89 f8             	mov    %rdi,%rax
  40ad3e:	48 89 f2             	mov    %rsi,%rdx
  40ad41:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40ad45:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
{
	error("assert failed:"); error(file);
  40ad49:	48 c7 45 f0 0e 00 00 	movq   $0xe,-0x10(%rbp)
  40ad50:	00 
  40ad51:	48 c7 45 f8 1e 30 41 	movq   $0x41301e,-0x8(%rbp)
  40ad58:	00 
  40ad59:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ad5d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ad61:	e8 9e 2c 00 00       	callq  40da04 <_D4user7syscall5errorFAaZv>
  40ad66:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40ad6a:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40ad6e:	e8 91 2c 00 00       	callq  40da04 <_D4user7syscall5errorFAaZv>
	//kprintfln!("Error in {}, line {}: assertion failed.")(file, line);
	asm { l: hlt; jmp l; }
  40ad73:	f4                   	hlt    
  40ad74:	eb fd                	jmp    40ad73 <onAssertError+0x44>
}
  40ad76:	c9                   	leaveq 
  40ad77:	c3                   	retq   

000000000040ad78 <onAssertErrorMsg>:

private void onAssertErrorMsg(char[] file, size_t line, char[] msg)
  40ad78:	55                   	push   %rbp
  40ad79:	48 89 e5             	mov    %rsp,%rbp
  40ad7c:	48 83 ec 40          	sub    $0x40,%rsp
  40ad80:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40ad84:	48 89 f8             	mov    %rdi,%rax
  40ad87:	48 89 f2             	mov    %rsi,%rdx
  40ad8a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40ad8e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40ad92:	48 89 c8             	mov    %rcx,%rax
  40ad95:	4c 89 c2             	mov    %r8,%rdx
  40ad98:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40ad9c:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
{
	//kprintfln!("Error in {}, line {}: assertion failed: \"{}\"")(file, line, msg);

	error("assert failed:"); error(file);
  40ada0:	48 c7 45 f0 0e 00 00 	movq   $0xe,-0x10(%rbp)
  40ada7:	00 
  40ada8:	48 c7 45 f8 1e 30 41 	movq   $0x41301e,-0x8(%rbp)
  40adaf:	00 
  40adb0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40adb4:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40adb8:	e8 47 2c 00 00       	callq  40da04 <_D4user7syscall5errorFAaZv>
  40adbd:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40adc1:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40adc5:	e8 3a 2c 00 00       	callq  40da04 <_D4user7syscall5errorFAaZv>
	asm { l: hlt; jmp l; }
  40adca:	f4                   	hlt    
  40adcb:	eb fd                	jmp    40adca <onAssertErrorMsg+0x52>
}
  40adcd:	c9                   	leaveq 
  40adce:	c3                   	retq   

000000000040adcf <onArrayBoundsError>:

private void onArrayBoundsError(char[] file, size_t line)
  40adcf:	55                   	push   %rbp
  40add0:	48 89 e5             	mov    %rsp,%rbp
  40add3:	48 83 ec 30          	sub    $0x30,%rsp
  40add7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40addb:	48 89 f8             	mov    %rdi,%rax
  40adde:	48 89 f2             	mov    %rsi,%rdx
  40ade1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40ade5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
{
	//kprintfln!("Error in {}, line {}: array index out of bounds.")(file, line);
	error("array index out of bounds:");
  40ade9:	48 c7 45 f0 1a 00 00 	movq   $0x1a,-0x10(%rbp)
  40adf0:	00 
  40adf1:	48 c7 45 f8 2d 30 41 	movq   $0x41302d,-0x8(%rbp)
  40adf8:	00 
  40adf9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40adfd:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ae01:	e8 fe 2b 00 00       	callq  40da04 <_D4user7syscall5errorFAaZv>
	asm { l: hlt; jmp l; }
  40ae06:	f4                   	hlt    
  40ae07:	eb fd                	jmp    40ae06 <onArrayBoundsError+0x37>
}
  40ae09:	c9                   	leaveq 
  40ae0a:	c3                   	retq   

000000000040ae0b <onSwitchError>:

private void onSwitchError(char[] file, size_t line)
  40ae0b:	55                   	push   %rbp
  40ae0c:	48 89 e5             	mov    %rsp,%rbp
  40ae0f:	48 83 ec 30          	sub    $0x30,%rsp
  40ae13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40ae17:	48 89 f8             	mov    %rdi,%rax
  40ae1a:	48 89 f2             	mov    %rsi,%rdx
  40ae1d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40ae21:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
{
	//kprintfln!("Error in {}, line {}: switch has no case or default to handle the switched-upon value.")(file, line);
	error("switch error:"); error(file);
  40ae25:	48 c7 45 f0 0d 00 00 	movq   $0xd,-0x10(%rbp)
  40ae2c:	00 
  40ae2d:	48 c7 45 f8 48 30 41 	movq   $0x413048,-0x8(%rbp)
  40ae34:	00 
  40ae35:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ae39:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ae3d:	e8 c2 2b 00 00       	callq  40da04 <_D4user7syscall5errorFAaZv>
  40ae42:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40ae46:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40ae4a:	e8 b5 2b 00 00       	callq  40da04 <_D4user7syscall5errorFAaZv>
  asm { l: hlt; jmp l; }
  40ae4f:	f4                   	hlt    
  40ae50:	eb fd                	jmp    40ae4f <onSwitchError+0x44>
}
  40ae52:	c9                   	leaveq 
  40ae53:	c3                   	retq   

000000000040ae54 <onFinalizeError>:
  40ae54:	55                   	push   %rbp
  40ae55:	48 89 e5             	mov    %rsp,%rbp
  40ae58:	48 83 ec 30          	sub    $0x30,%rsp
  40ae5c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40ae60:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)

private void onSwitchError(char[] file, size_t line)
{
	//kprintfln!("Error in {}, line {}: switch has no case or default to handle the switched-upon value.")(file, line);
	error("switch error:"); error(file);
  asm { l: hlt; jmp l; }
  40ae64:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ae6b:	00 
  40ae6c:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40ae73:	00 
  40ae74:	48 c7 45 f0 55 00 00 	movq   $0x55,-0x10(%rbp)
  40ae7b:	00 
  40ae7c:	48 c7 45 f8 58 30 41 	movq   $0x413058,-0x8(%rbp)
  40ae83:	00 
  40ae84:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ae88:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ae8c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ae90:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ae94:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ae9a:	e8 f2 fd ff ff       	callq  40ac91 <_d_assert_msg>
  40ae9f:	c9                   	leaveq 
  40aea0:	c3                   	retq   

000000000040aea1 <onOutOfMemoryError>:
  40aea1:	55                   	push   %rbp
  40aea2:	48 89 e5             	mov    %rsp,%rbp
  40aea5:	48 83 ec 20          	sub    $0x20,%rsp
  40aea9:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40aeb0:	00 
  40aeb1:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40aeb8:	00 
  40aeb9:	48 c7 45 f0 3a 00 00 	movq   $0x3a,-0x10(%rbp)
  40aec0:	00 
  40aec1:	48 c7 45 f8 b0 30 41 	movq   $0x4130b0,-0x8(%rbp)
  40aec8:	00 
  40aec9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40aecd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40aed1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40aed5:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40aed9:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40aedf:	e8 ad fd ff ff       	callq  40ac91 <_d_assert_msg>
  40aee4:	c9                   	leaveq 
  40aee5:	c3                   	retq   

000000000040aee6 <onUnicodeError>:
  40aee6:	55                   	push   %rbp
  40aee7:	48 89 e5             	mov    %rsp,%rbp
  40aeea:	48 83 ec 40          	sub    $0x40,%rsp
  40aeee:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40aef2:	48 89 f8             	mov    %rdi,%rax
  40aef5:	48 89 f2             	mov    %rsi,%rdx
  40aef8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40aefc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40af00:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40af07:	00 
  40af08:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40af0f:	00 
  40af10:	48 c7 45 f0 4e 00 00 	movq   $0x4e,-0x10(%rbp)
  40af17:	00 
  40af18:	48 c7 45 f8 f0 30 41 	movq   $0x4130f0,-0x8(%rbp)
  40af1f:	00 
  40af20:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40af24:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40af28:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40af2c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40af30:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40af36:	e8 56 fd ff ff       	callq  40ac91 <_d_assert_msg>
  40af3b:	c9                   	leaveq 
  40af3c:	c3                   	retq   

000000000040af3d <_gdc_cleanupException>:
  40af3d:	55                   	push   %rbp
  40af3e:	48 89 e5             	mov    %rsp,%rbp
  40af41:	48 83 ec 20          	sub    $0x20,%rsp
  40af45:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40af4c:	00 
  40af4d:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40af54:	00 
  40af55:	48 c7 45 f0 3d 00 00 	movq   $0x3d,-0x10(%rbp)
  40af5c:	00 
  40af5d:	48 c7 45 f8 40 31 41 	movq   $0x413140,-0x8(%rbp)
  40af64:	00 
  40af65:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40af69:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40af6d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40af71:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40af75:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40af7b:	e8 11 fd ff ff       	callq  40ac91 <_d_assert_msg>
  40af80:	c9                   	leaveq 
  40af81:	c3                   	retq   

000000000040af82 <_d_throw>:
  40af82:	55                   	push   %rbp
  40af83:	48 89 e5             	mov    %rsp,%rbp
  40af86:	48 83 ec 30          	sub    $0x30,%rsp
  40af8a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40af8e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40af95:	00 
  40af96:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40af9d:	00 
  40af9e:	48 c7 45 f0 3a 00 00 	movq   $0x3a,-0x10(%rbp)
  40afa5:	00 
  40afa6:	48 c7 45 f8 80 31 41 	movq   $0x413180,-0x8(%rbp)
  40afad:	00 
  40afae:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40afb2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40afb6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40afba:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40afbe:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40afc4:	e8 c8 fc ff ff       	callq  40ac91 <_d_assert_msg>
  40afc9:	c9                   	leaveq 
  40afca:	c3                   	retq   

000000000040afcb <__gdc_personality_v0>:
  40afcb:	55                   	push   %rbp
  40afcc:	48 89 e5             	mov    %rsp,%rbp
  40afcf:	48 83 ec 20          	sub    $0x20,%rsp
  40afd3:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40afda:	00 
  40afdb:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40afe2:	00 
  40afe3:	48 c7 45 f0 3b 00 00 	movq   $0x3b,-0x10(%rbp)
  40afea:	00 
  40afeb:	48 c7 45 f8 c0 31 41 	movq   $0x4131c0,-0x8(%rbp)
  40aff2:	00 
  40aff3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40aff7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40affb:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40afff:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b003:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b009:	e8 83 fc ff ff       	callq  40ac91 <_d_assert_msg>
  40b00e:	c9                   	leaveq 
  40b00f:	c3                   	retq   

000000000040b010 <_Unwind_RaiseException>:
  40b010:	55                   	push   %rbp
  40b011:	48 89 e5             	mov    %rsp,%rbp
  40b014:	48 83 ec 20          	sub    $0x20,%rsp
  40b018:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b01f:	00 
  40b020:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b027:	00 
  40b028:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40b02f:	00 
  40b030:	48 c7 45 f8 00 32 41 	movq   $0x413200,-0x8(%rbp)
  40b037:	00 
  40b038:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b03c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b040:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b044:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b048:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b04e:	e8 3e fc ff ff       	callq  40ac91 <_d_assert_msg>
  40b053:	c9                   	leaveq 
  40b054:	c3                   	retq   

000000000040b055 <_Unwind_ForcedUnwind>:
  40b055:	55                   	push   %rbp
  40b056:	48 89 e5             	mov    %rsp,%rbp
  40b059:	48 83 ec 20          	sub    $0x20,%rsp
  40b05d:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b064:	00 
  40b065:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b06c:	00 
  40b06d:	48 c7 45 f0 3d 00 00 	movq   $0x3d,-0x10(%rbp)
  40b074:	00 
  40b075:	48 c7 45 f8 40 32 41 	movq   $0x413240,-0x8(%rbp)
  40b07c:	00 
  40b07d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b081:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b085:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b089:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b08d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b093:	e8 f9 fb ff ff       	callq  40ac91 <_d_assert_msg>
  40b098:	c9                   	leaveq 
  40b099:	c3                   	retq   

000000000040b09a <_Unwind_DeleteException>:
  40b09a:	55                   	push   %rbp
  40b09b:	48 89 e5             	mov    %rsp,%rbp
  40b09e:	48 83 ec 20          	sub    $0x20,%rsp
  40b0a2:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b0a9:	00 
  40b0aa:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b0b1:	00 
  40b0b2:	48 c7 45 f0 40 00 00 	movq   $0x40,-0x10(%rbp)
  40b0b9:	00 
  40b0ba:	48 c7 45 f8 80 32 41 	movq   $0x413280,-0x8(%rbp)
  40b0c1:	00 
  40b0c2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b0c6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b0ca:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b0ce:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b0d2:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b0d8:	e8 b4 fb ff ff       	callq  40ac91 <_d_assert_msg>
  40b0dd:	c9                   	leaveq 
  40b0de:	c3                   	retq   

000000000040b0df <_Unwind_Resume>:
  40b0df:	55                   	push   %rbp
  40b0e0:	48 89 e5             	mov    %rsp,%rbp
  40b0e3:	48 83 ec 20          	sub    $0x20,%rsp
  40b0e7:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b0ee:	00 
  40b0ef:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b0f6:	00 
  40b0f7:	48 c7 45 f0 36 00 00 	movq   $0x36,-0x10(%rbp)
  40b0fe:	00 
  40b0ff:	48 c7 45 f8 c8 32 41 	movq   $0x4132c8,-0x8(%rbp)
  40b106:	00 
  40b107:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b10b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b10f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b113:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b117:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b11d:	e8 6f fb ff ff       	callq  40ac91 <_d_assert_msg>
  40b122:	c9                   	leaveq 
  40b123:	c3                   	retq   

000000000040b124 <_Unwind_Resume_or_Rethrow>:
  40b124:	55                   	push   %rbp
  40b125:	48 89 e5             	mov    %rsp,%rbp
  40b128:	48 83 ec 20          	sub    $0x20,%rsp
  40b12c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b133:	00 
  40b134:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b13b:	00 
  40b13c:	48 c7 45 f0 42 00 00 	movq   $0x42,-0x10(%rbp)
  40b143:	00 
  40b144:	48 c7 45 f8 00 33 41 	movq   $0x413300,-0x8(%rbp)
  40b14b:	00 
  40b14c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b150:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b154:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b158:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b15c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b162:	e8 2a fb ff ff       	callq  40ac91 <_d_assert_msg>
  40b167:	c9                   	leaveq 
  40b168:	c3                   	retq   

000000000040b169 <_Unwind_Backtrace>:
  40b169:	55                   	push   %rbp
  40b16a:	48 89 e5             	mov    %rsp,%rbp
  40b16d:	48 83 ec 20          	sub    $0x20,%rsp
  40b171:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b178:	00 
  40b179:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b180:	00 
  40b181:	48 c7 45 f0 3a 00 00 	movq   $0x3a,-0x10(%rbp)
  40b188:	00 
  40b189:	48 c7 45 f8 48 33 41 	movq   $0x413348,-0x8(%rbp)
  40b190:	00 
  40b191:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b195:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b199:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b19d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b1a1:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b1a7:	e8 e5 fa ff ff       	callq  40ac91 <_d_assert_msg>
  40b1ac:	c9                   	leaveq 
  40b1ad:	c3                   	retq   

000000000040b1ae <_Unwind_GetGR>:
  40b1ae:	55                   	push   %rbp
  40b1af:	48 89 e5             	mov    %rsp,%rbp
  40b1b2:	48 83 ec 20          	sub    $0x20,%rsp
  40b1b6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b1bd:	00 
  40b1be:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b1c5:	00 
  40b1c6:	48 c7 45 f0 36 00 00 	movq   $0x36,-0x10(%rbp)
  40b1cd:	00 
  40b1ce:	48 c7 45 f8 88 33 41 	movq   $0x413388,-0x8(%rbp)
  40b1d5:	00 
  40b1d6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b1da:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b1de:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b1e2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b1e6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b1ec:	e8 a0 fa ff ff       	callq  40ac91 <_d_assert_msg>
  40b1f1:	c9                   	leaveq 
  40b1f2:	c3                   	retq   

000000000040b1f3 <_Unwind_SetGR>:
  40b1f3:	55                   	push   %rbp
  40b1f4:	48 89 e5             	mov    %rsp,%rbp
  40b1f7:	48 83 ec 20          	sub    $0x20,%rsp
  40b1fb:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b202:	00 
  40b203:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b20a:	00 
  40b20b:	48 c7 45 f0 36 00 00 	movq   $0x36,-0x10(%rbp)
  40b212:	00 
  40b213:	48 c7 45 f8 c0 33 41 	movq   $0x4133c0,-0x8(%rbp)
  40b21a:	00 
  40b21b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b21f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b223:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b227:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b22b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b231:	e8 5b fa ff ff       	callq  40ac91 <_d_assert_msg>
  40b236:	c9                   	leaveq 
  40b237:	c3                   	retq   

000000000040b238 <_Unwind_GetIP>:
  40b238:	55                   	push   %rbp
  40b239:	48 89 e5             	mov    %rsp,%rbp
  40b23c:	48 83 ec 20          	sub    $0x20,%rsp
  40b240:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b247:	00 
  40b248:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b24f:	00 
  40b250:	48 c7 45 f0 36 00 00 	movq   $0x36,-0x10(%rbp)
  40b257:	00 
  40b258:	48 c7 45 f8 f8 33 41 	movq   $0x4133f8,-0x8(%rbp)
  40b25f:	00 
  40b260:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b264:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b268:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b26c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b270:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b276:	e8 16 fa ff ff       	callq  40ac91 <_d_assert_msg>
  40b27b:	c9                   	leaveq 
  40b27c:	c3                   	retq   

000000000040b27d <_Unwind_SetIP>:
  40b27d:	55                   	push   %rbp
  40b27e:	48 89 e5             	mov    %rsp,%rbp
  40b281:	48 83 ec 20          	sub    $0x20,%rsp
  40b285:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b28c:	00 
  40b28d:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b294:	00 
  40b295:	48 c7 45 f0 36 00 00 	movq   $0x36,-0x10(%rbp)
  40b29c:	00 
  40b29d:	48 c7 45 f8 30 34 41 	movq   $0x413430,-0x8(%rbp)
  40b2a4:	00 
  40b2a5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b2a9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b2ad:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b2b1:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b2b5:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b2bb:	e8 d1 f9 ff ff       	callq  40ac91 <_d_assert_msg>
  40b2c0:	c9                   	leaveq 
  40b2c1:	c3                   	retq   

000000000040b2c2 <_Unwind_GetCFA>:
  40b2c2:	55                   	push   %rbp
  40b2c3:	48 89 e5             	mov    %rsp,%rbp
  40b2c6:	48 83 ec 20          	sub    $0x20,%rsp
  40b2ca:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b2d1:	00 
  40b2d2:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b2d9:	00 
  40b2da:	48 c7 45 f0 37 00 00 	movq   $0x37,-0x10(%rbp)
  40b2e1:	00 
  40b2e2:	48 c7 45 f8 68 34 41 	movq   $0x413468,-0x8(%rbp)
  40b2e9:	00 
  40b2ea:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b2ee:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b2f2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b2f6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b2fa:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b300:	e8 8c f9 ff ff       	callq  40ac91 <_d_assert_msg>
  40b305:	c9                   	leaveq 
  40b306:	c3                   	retq   

000000000040b307 <_Unwind_GetLanguageSpecificData>:
  40b307:	55                   	push   %rbp
  40b308:	48 89 e5             	mov    %rsp,%rbp
  40b30b:	48 83 ec 20          	sub    $0x20,%rsp
  40b30f:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b316:	00 
  40b317:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b31e:	00 
  40b31f:	48 c7 45 f0 49 00 00 	movq   $0x49,-0x10(%rbp)
  40b326:	00 
  40b327:	48 c7 45 f8 a0 34 41 	movq   $0x4134a0,-0x8(%rbp)
  40b32e:	00 
  40b32f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b333:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b337:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b33b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b33f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b345:	e8 47 f9 ff ff       	callq  40ac91 <_d_assert_msg>
  40b34a:	c9                   	leaveq 
  40b34b:	c3                   	retq   

000000000040b34c <_Unwind_GetRegionStart>:
  40b34c:	55                   	push   %rbp
  40b34d:	48 89 e5             	mov    %rsp,%rbp
  40b350:	48 83 ec 20          	sub    $0x20,%rsp
  40b354:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b35b:	00 
  40b35c:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b363:	00 
  40b364:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40b36b:	00 
  40b36c:	48 c7 45 f8 f0 34 41 	movq   $0x4134f0,-0x8(%rbp)
  40b373:	00 
  40b374:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b378:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b37c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b380:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b384:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b38a:	e8 02 f9 ff ff       	callq  40ac91 <_d_assert_msg>
  40b38f:	c9                   	leaveq 
  40b390:	c3                   	retq   

000000000040b391 <_Unwind_SjLj_RaiseException>:
  40b391:	55                   	push   %rbp
  40b392:	48 89 e5             	mov    %rsp,%rbp
  40b395:	48 83 ec 20          	sub    $0x20,%rsp
  40b399:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b3a0:	00 
  40b3a1:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b3a8:	00 
  40b3a9:	48 c7 45 f0 43 00 00 	movq   $0x43,-0x10(%rbp)
  40b3b0:	00 
  40b3b1:	48 c7 45 f8 30 35 41 	movq   $0x413530,-0x8(%rbp)
  40b3b8:	00 
  40b3b9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b3bd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b3c1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b3c5:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b3c9:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b3cf:	e8 bd f8 ff ff       	callq  40ac91 <_d_assert_msg>
  40b3d4:	c9                   	leaveq 
  40b3d5:	c3                   	retq   

000000000040b3d6 <_Unwind_SjLj_ForcedUnwind>:
  40b3d6:	55                   	push   %rbp
  40b3d7:	48 89 e5             	mov    %rsp,%rbp
  40b3da:	48 83 ec 20          	sub    $0x20,%rsp
  40b3de:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b3e5:	00 
  40b3e6:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b3ed:	00 
  40b3ee:	48 c7 45 f0 41 00 00 	movq   $0x41,-0x10(%rbp)
  40b3f5:	00 
  40b3f6:	48 c7 45 f8 78 35 41 	movq   $0x413578,-0x8(%rbp)
  40b3fd:	00 
  40b3fe:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b402:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b406:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b40a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b40e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b414:	e8 78 f8 ff ff       	callq  40ac91 <_d_assert_msg>
  40b419:	c9                   	leaveq 
  40b41a:	c3                   	retq   

000000000040b41b <_Unwind_SjLj_Resume>:
  40b41b:	55                   	push   %rbp
  40b41c:	48 89 e5             	mov    %rsp,%rbp
  40b41f:	48 83 ec 20          	sub    $0x20,%rsp
  40b423:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b42a:	00 
  40b42b:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b432:	00 
  40b433:	48 c7 45 f0 3c 00 00 	movq   $0x3c,-0x10(%rbp)
  40b43a:	00 
  40b43b:	48 c7 45 f8 c0 35 41 	movq   $0x4135c0,-0x8(%rbp)
  40b442:	00 
  40b443:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b447:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b44b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b44f:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b453:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b459:	e8 33 f8 ff ff       	callq  40ac91 <_d_assert_msg>
  40b45e:	c9                   	leaveq 
  40b45f:	c3                   	retq   

000000000040b460 <_Unwind_GetDataRelBase>:
  40b460:	55                   	push   %rbp
  40b461:	48 89 e5             	mov    %rsp,%rbp
  40b464:	48 83 ec 20          	sub    $0x20,%rsp
  40b468:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b46f:	00 
  40b470:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b477:	00 
  40b478:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40b47f:	00 
  40b480:	48 c7 45 f8 00 36 41 	movq   $0x413600,-0x8(%rbp)
  40b487:	00 
  40b488:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b48c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b490:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b494:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b498:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b49e:	e8 ee f7 ff ff       	callq  40ac91 <_d_assert_msg>
  40b4a3:	c9                   	leaveq 
  40b4a4:	c3                   	retq   

000000000040b4a5 <_Unwind_GetTextRelBase>:
  40b4a5:	55                   	push   %rbp
  40b4a6:	48 89 e5             	mov    %rsp,%rbp
  40b4a9:	48 83 ec 20          	sub    $0x20,%rsp
  40b4ad:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b4b4:	00 
  40b4b5:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b4bc:	00 
  40b4bd:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40b4c4:	00 
  40b4c5:	48 c7 45 f8 40 36 41 	movq   $0x413640,-0x8(%rbp)
  40b4cc:	00 
  40b4cd:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b4d1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b4d5:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b4d9:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b4dd:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b4e3:	e8 a9 f7 ff ff       	callq  40ac91 <_d_assert_msg>
  40b4e8:	c9                   	leaveq 
  40b4e9:	c3                   	retq   

000000000040b4ea <size_of_encoded_value>:
  40b4ea:	55                   	push   %rbp
  40b4eb:	48 89 e5             	mov    %rsp,%rbp
  40b4ee:	48 83 ec 30          	sub    $0x30,%rsp
  40b4f2:	40 88 7d df          	mov    %dil,-0x21(%rbp)
  40b4f6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b4fd:	00 
  40b4fe:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b505:	00 
  40b506:	48 c7 45 f0 4c 00 00 	movq   $0x4c,-0x10(%rbp)
  40b50d:	00 
  40b50e:	48 c7 45 f8 80 36 41 	movq   $0x413680,-0x8(%rbp)
  40b515:	00 
  40b516:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b51a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b51e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b522:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b526:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b52c:	e8 60 f7 ff ff       	callq  40ac91 <_d_assert_msg>
  40b531:	c9                   	leaveq 
  40b532:	c3                   	retq   

000000000040b533 <base_of_encoded_value>:
  40b533:	55                   	push   %rbp
  40b534:	48 89 e5             	mov    %rsp,%rbp
  40b537:	48 83 ec 20          	sub    $0x20,%rsp
  40b53b:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b542:	00 
  40b543:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b54a:	00 
  40b54b:	48 c7 45 f0 3e 00 00 	movq   $0x3e,-0x10(%rbp)
  40b552:	00 
  40b553:	48 c7 45 f8 d0 36 41 	movq   $0x4136d0,-0x8(%rbp)
  40b55a:	00 
  40b55b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b55f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b563:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b567:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b56b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b571:	e8 1b f7 ff ff       	callq  40ac91 <_d_assert_msg>
  40b576:	c9                   	leaveq 
  40b577:	c3                   	retq   

000000000040b578 <read_uleb128>:
  40b578:	55                   	push   %rbp
  40b579:	48 89 e5             	mov    %rsp,%rbp
  40b57c:	48 83 ec 20          	sub    $0x20,%rsp
  40b580:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b587:	00 
  40b588:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b58f:	00 
  40b590:	48 c7 45 f0 34 00 00 	movq   $0x34,-0x10(%rbp)
  40b597:	00 
  40b598:	48 c7 45 f8 10 37 41 	movq   $0x413710,-0x8(%rbp)
  40b59f:	00 
  40b5a0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b5a4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b5a8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b5ac:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b5b0:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b5b6:	e8 d6 f6 ff ff       	callq  40ac91 <_d_assert_msg>
  40b5bb:	c9                   	leaveq 
  40b5bc:	c3                   	retq   

000000000040b5bd <read_sleb128>:
  40b5bd:	55                   	push   %rbp
  40b5be:	48 89 e5             	mov    %rsp,%rbp
  40b5c1:	48 83 ec 20          	sub    $0x20,%rsp
  40b5c5:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b5cc:	00 
  40b5cd:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b5d4:	00 
  40b5d5:	48 c7 45 f0 34 00 00 	movq   $0x34,-0x10(%rbp)
  40b5dc:	00 
  40b5dd:	48 c7 45 f8 48 37 41 	movq   $0x413748,-0x8(%rbp)
  40b5e4:	00 
  40b5e5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b5e9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b5ed:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b5f1:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b5f5:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b5fb:	e8 91 f6 ff ff       	callq  40ac91 <_d_assert_msg>
  40b600:	c9                   	leaveq 
  40b601:	c3                   	retq   

000000000040b602 <read_encoded_value_with_base>:
  40b602:	55                   	push   %rbp
  40b603:	48 89 e5             	mov    %rsp,%rbp
  40b606:	48 83 ec 20          	sub    $0x20,%rsp
  40b60a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b611:	00 
  40b612:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b619:	00 
  40b61a:	48 c7 45 f0 44 00 00 	movq   $0x44,-0x10(%rbp)
  40b621:	00 
  40b622:	48 c7 45 f8 80 37 41 	movq   $0x413780,-0x8(%rbp)
  40b629:	00 
  40b62a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b62e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b632:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b636:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b63a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b640:	e8 4c f6 ff ff       	callq  40ac91 <_d_assert_msg>
  40b645:	c9                   	leaveq 
  40b646:	c3                   	retq   

000000000040b647 <read_encoded_value>:
  40b647:	55                   	push   %rbp
  40b648:	48 89 e5             	mov    %rsp,%rbp
  40b64b:	48 83 ec 20          	sub    $0x20,%rsp
  40b64f:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b656:	00 
  40b657:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b65e:	00 
  40b65f:	48 c7 45 f0 3a 00 00 	movq   $0x3a,-0x10(%rbp)
  40b666:	00 
  40b667:	48 c7 45 f8 c8 37 41 	movq   $0x4137c8,-0x8(%rbp)
  40b66e:	00 
  40b66f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b673:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b677:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b67b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b67f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b685:	e8 07 f6 ff ff       	callq  40ac91 <_d_assert_msg>
  40b68a:	c9                   	leaveq 
  40b68b:	c3                   	retq   

000000000040b68c <_aaLen>:
  40b68c:	55                   	push   %rbp
  40b68d:	48 89 e5             	mov    %rsp,%rbp
  40b690:	48 83 ec 30          	sub    $0x30,%rsp
  40b694:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b698:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b69f:	00 
  40b6a0:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b6a7:	00 
  40b6a8:	48 c7 45 f0 35 00 00 	movq   $0x35,-0x10(%rbp)
  40b6af:	00 
  40b6b0:	48 c7 45 f8 08 38 41 	movq   $0x413808,-0x8(%rbp)
  40b6b7:	00 
  40b6b8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b6bc:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b6c0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b6c4:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b6c8:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b6ce:	e8 be f5 ff ff       	callq  40ac91 <_d_assert_msg>
  40b6d3:	c9                   	leaveq 
  40b6d4:	c3                   	retq   

000000000040b6d5 <_aaGetp>:
  40b6d5:	55                   	push   %rbp
  40b6d6:	48 89 e5             	mov    %rsp,%rbp
  40b6d9:	48 83 ec 40          	sub    $0x40,%rsp
  40b6dd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b6e1:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b6e5:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b6e9:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  40b6ed:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b6f4:	00 
  40b6f5:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b6fc:	00 
  40b6fd:	48 c7 45 f0 64 00 00 	movq   $0x64,-0x10(%rbp)
  40b704:	00 
  40b705:	48 c7 45 f8 40 38 41 	movq   $0x413840,-0x8(%rbp)
  40b70c:	00 
  40b70d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b711:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b715:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b719:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b71d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b723:	e8 69 f5 ff ff       	callq  40ac91 <_d_assert_msg>
  40b728:	c9                   	leaveq 
  40b729:	c3                   	retq   

000000000040b72a <_aaGetRvaluep>:
  40b72a:	55                   	push   %rbp
  40b72b:	48 89 e5             	mov    %rsp,%rbp
  40b72e:	48 83 ec 40          	sub    $0x40,%rsp
  40b732:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b736:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b73a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b73e:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  40b742:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b749:	00 
  40b74a:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b751:	00 
  40b752:	48 c7 45 f0 69 00 00 	movq   $0x69,-0x10(%rbp)
  40b759:	00 
  40b75a:	48 c7 45 f8 a8 38 41 	movq   $0x4138a8,-0x8(%rbp)
  40b761:	00 
  40b762:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b766:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b76a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b76e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b772:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b778:	e8 14 f5 ff ff       	callq  40ac91 <_d_assert_msg>
  40b77d:	c9                   	leaveq 
  40b77e:	c3                   	retq   

000000000040b77f <_aaInp>:
  40b77f:	55                   	push   %rbp
  40b780:	48 89 e5             	mov    %rsp,%rbp
  40b783:	48 83 ec 40          	sub    $0x40,%rsp
  40b787:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b78b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b78f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b793:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b79a:	00 
  40b79b:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b7a2:	00 
  40b7a3:	48 c7 45 f0 50 00 00 	movq   $0x50,-0x10(%rbp)
  40b7aa:	00 
  40b7ab:	48 c7 45 f8 18 39 41 	movq   $0x413918,-0x8(%rbp)
  40b7b2:	00 
  40b7b3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b7b7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b7bb:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b7bf:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b7c3:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b7c9:	e8 c3 f4 ff ff       	callq  40ac91 <_d_assert_msg>
  40b7ce:	c9                   	leaveq 
  40b7cf:	c3                   	retq   

000000000040b7d0 <_aaDelp>:
  40b7d0:	55                   	push   %rbp
  40b7d1:	48 89 e5             	mov    %rsp,%rbp
  40b7d4:	48 83 ec 40          	sub    $0x40,%rsp
  40b7d8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b7dc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b7e0:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b7e4:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b7eb:	00 
  40b7ec:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b7f3:	00 
  40b7f4:	48 c7 45 f0 50 00 00 	movq   $0x50,-0x10(%rbp)
  40b7fb:	00 
  40b7fc:	48 c7 45 f8 70 39 41 	movq   $0x413970,-0x8(%rbp)
  40b803:	00 
  40b804:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b808:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b80c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b810:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b814:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b81a:	e8 72 f4 ff ff       	callq  40ac91 <_d_assert_msg>
  40b81f:	c9                   	leaveq 
  40b820:	c3                   	retq   

000000000040b821 <_aaValues>:
  40b821:	55                   	push   %rbp
  40b822:	48 89 e5             	mov    %rsp,%rbp
  40b825:	48 83 ec 40          	sub    $0x40,%rsp
  40b829:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40b82d:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40b831:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  40b835:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b83c:	00 
  40b83d:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b844:	00 
  40b845:	48 c7 45 f0 59 00 00 	movq   $0x59,-0x10(%rbp)
  40b84c:	00 
  40b84d:	48 c7 45 f8 c8 39 41 	movq   $0x4139c8,-0x8(%rbp)
  40b854:	00 
  40b855:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b859:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b85d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b861:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b865:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b86b:	e8 21 f4 ff ff       	callq  40ac91 <_d_assert_msg>
  40b870:	c9                   	leaveq 
  40b871:	c3                   	retq   

000000000040b872 <_aaRehash>:
  40b872:	55                   	push   %rbp
  40b873:	48 89 e5             	mov    %rsp,%rbp
  40b876:	48 83 ec 30          	sub    $0x30,%rsp
  40b87a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b87e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b882:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b889:	00 
  40b88a:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b891:	00 
  40b892:	48 c7 45 f0 46 00 00 	movq   $0x46,-0x10(%rbp)
  40b899:	00 
  40b89a:	48 c7 45 f8 28 3a 41 	movq   $0x413a28,-0x8(%rbp)
  40b8a1:	00 
  40b8a2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b8a6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b8aa:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b8ae:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b8b2:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b8b8:	e8 d4 f3 ff ff       	callq  40ac91 <_d_assert_msg>
  40b8bd:	c9                   	leaveq 
  40b8be:	c3                   	retq   

000000000040b8bf <_aaKeys>:
  40b8bf:	55                   	push   %rbp
  40b8c0:	48 89 e5             	mov    %rsp,%rbp
  40b8c3:	48 83 ec 30          	sub    $0x30,%rsp
  40b8c7:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40b8cb:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40b8cf:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b8d6:	00 
  40b8d7:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b8de:	00 
  40b8df:	48 c7 45 f0 45 00 00 	movq   $0x45,-0x10(%rbp)
  40b8e6:	00 
  40b8e7:	48 c7 45 f8 70 3a 41 	movq   $0x413a70,-0x8(%rbp)
  40b8ee:	00 
  40b8ef:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b8f3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b8f7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b8fb:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b8ff:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b905:	e8 87 f3 ff ff       	callq  40ac91 <_d_assert_msg>
  40b90a:	c9                   	leaveq 
  40b90b:	c3                   	retq   

000000000040b90c <_aaApply>:
  40b90c:	55                   	push   %rbp
  40b90d:	48 89 e5             	mov    %rsp,%rbp
  40b910:	48 83 ec 40          	sub    $0x40,%rsp
  40b914:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b918:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b91c:	48 89 d0             	mov    %rdx,%rax
  40b91f:	48 89 ca             	mov    %rcx,%rdx
  40b922:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b926:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b92a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b931:	00 
  40b932:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b939:	00 
  40b93a:	48 c7 45 f0 50 00 00 	movq   $0x50,-0x10(%rbp)
  40b941:	00 
  40b942:	48 c7 45 f8 b8 3a 41 	movq   $0x413ab8,-0x8(%rbp)
  40b949:	00 
  40b94a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b94e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b952:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b956:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b95a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b960:	e8 2c f3 ff ff       	callq  40ac91 <_d_assert_msg>
  40b965:	c9                   	leaveq 
  40b966:	c3                   	retq   

000000000040b967 <_aaApply2>:
  40b967:	55                   	push   %rbp
  40b968:	48 89 e5             	mov    %rsp,%rbp
  40b96b:	48 83 ec 40          	sub    $0x40,%rsp
  40b96f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b973:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b977:	48 89 d0             	mov    %rdx,%rax
  40b97a:	48 89 ca             	mov    %rcx,%rdx
  40b97d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b981:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b985:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b98c:	00 
  40b98d:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b994:	00 
  40b995:	48 c7 45 f0 52 00 00 	movq   $0x52,-0x10(%rbp)
  40b99c:	00 
  40b99d:	48 c7 45 f8 10 3b 41 	movq   $0x413b10,-0x8(%rbp)
  40b9a4:	00 
  40b9a5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b9a9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b9ad:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b9b1:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b9b5:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b9bb:	e8 d1 f2 ff ff       	callq  40ac91 <_d_assert_msg>
  40b9c0:	c9                   	leaveq 
  40b9c1:	c3                   	retq   

000000000040b9c2 <_d_assocarrayliteralTp>:
  40b9c2:	55                   	push   %rbp
  40b9c3:	48 89 e5             	mov    %rsp,%rbp
  40b9c6:	48 83 ec 40          	sub    $0x40,%rsp
  40b9ca:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b9ce:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b9d2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b9d6:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  40b9da:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b9e1:	00 
  40b9e2:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40b9e9:	00 
  40b9ea:	48 c7 45 f0 82 00 00 	movq   $0x82,-0x10(%rbp)
  40b9f1:	00 
  40b9f2:	48 c7 45 f8 68 3b 41 	movq   $0x413b68,-0x8(%rbp)
  40b9f9:	00 
  40b9fa:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b9fe:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ba02:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ba06:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ba0a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ba10:	e8 7c f2 ff ff       	callq  40ac91 <_d_assert_msg>
  40ba15:	c9                   	leaveq 
  40ba16:	c3                   	retq   

000000000040ba17 <_aApplycw1>:
  40ba17:	55                   	push   %rbp
  40ba18:	48 89 e5             	mov    %rsp,%rbp
  40ba1b:	48 83 ec 40          	sub    $0x40,%rsp
  40ba1f:	49 89 d0             	mov    %rdx,%r8
  40ba22:	48 89 f8             	mov    %rdi,%rax
  40ba25:	48 89 f2             	mov    %rsi,%rdx
  40ba28:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40ba2c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40ba30:	4c 89 c0             	mov    %r8,%rax
  40ba33:	48 89 ca             	mov    %rcx,%rdx
  40ba36:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40ba3a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40ba3e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ba45:	00 
  40ba46:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40ba4d:	00 
  40ba4e:	48 c7 45 f0 49 00 00 	movq   $0x49,-0x10(%rbp)
  40ba55:	00 
  40ba56:	48 c7 45 f8 f0 3b 41 	movq   $0x413bf0,-0x8(%rbp)
  40ba5d:	00 
  40ba5e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ba62:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ba66:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ba6a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ba6e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ba74:	e8 18 f2 ff ff       	callq  40ac91 <_d_assert_msg>
  40ba79:	c9                   	leaveq 
  40ba7a:	c3                   	retq   

000000000040ba7b <_aApplycd1>:
  40ba7b:	55                   	push   %rbp
  40ba7c:	48 89 e5             	mov    %rsp,%rbp
  40ba7f:	48 83 ec 40          	sub    $0x40,%rsp
  40ba83:	49 89 d0             	mov    %rdx,%r8
  40ba86:	48 89 f8             	mov    %rdi,%rax
  40ba89:	48 89 f2             	mov    %rsi,%rdx
  40ba8c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40ba90:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40ba94:	4c 89 c0             	mov    %r8,%rax
  40ba97:	48 89 ca             	mov    %rcx,%rdx
  40ba9a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40ba9e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40baa2:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40baa9:	00 
  40baaa:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40bab1:	00 
  40bab2:	48 c7 45 f0 49 00 00 	movq   $0x49,-0x10(%rbp)
  40bab9:	00 
  40baba:	48 c7 45 f8 40 3c 41 	movq   $0x413c40,-0x8(%rbp)
  40bac1:	00 
  40bac2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bac6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40baca:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bace:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bad2:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bad8:	e8 b4 f1 ff ff       	callq  40ac91 <_d_assert_msg>
  40badd:	c9                   	leaveq 
  40bade:	c3                   	retq   

000000000040badf <_aApplywc1>:
  40badf:	55                   	push   %rbp
  40bae0:	48 89 e5             	mov    %rsp,%rbp
  40bae3:	48 83 ec 40          	sub    $0x40,%rsp
  40bae7:	49 89 d0             	mov    %rdx,%r8
  40baea:	48 89 f8             	mov    %rdi,%rax
  40baed:	48 89 f2             	mov    %rsi,%rdx
  40baf0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40baf4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40baf8:	4c 89 c0             	mov    %r8,%rax
  40bafb:	48 89 ca             	mov    %rcx,%rdx
  40bafe:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bb02:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bb06:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bb0d:	00 
  40bb0e:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40bb15:	00 
  40bb16:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40bb1d:	00 
  40bb1e:	48 c7 45 f8 90 3c 41 	movq   $0x413c90,-0x8(%rbp)
  40bb25:	00 
  40bb26:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bb2a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bb2e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bb32:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bb36:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bb3c:	e8 50 f1 ff ff       	callq  40ac91 <_d_assert_msg>
  40bb41:	c9                   	leaveq 
  40bb42:	c3                   	retq   

000000000040bb43 <_aApplywd1>:
  40bb43:	55                   	push   %rbp
  40bb44:	48 89 e5             	mov    %rsp,%rbp
  40bb47:	48 83 ec 40          	sub    $0x40,%rsp
  40bb4b:	49 89 d0             	mov    %rdx,%r8
  40bb4e:	48 89 f8             	mov    %rdi,%rax
  40bb51:	48 89 f2             	mov    %rsi,%rdx
  40bb54:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bb58:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bb5c:	4c 89 c0             	mov    %r8,%rax
  40bb5f:	48 89 ca             	mov    %rcx,%rdx
  40bb62:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bb66:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bb6a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bb71:	00 
  40bb72:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40bb79:	00 
  40bb7a:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40bb81:	00 
  40bb82:	48 c7 45 f8 e0 3c 41 	movq   $0x413ce0,-0x8(%rbp)
  40bb89:	00 
  40bb8a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bb8e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bb92:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bb96:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bb9a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bba0:	e8 ec f0 ff ff       	callq  40ac91 <_d_assert_msg>
  40bba5:	c9                   	leaveq 
  40bba6:	c3                   	retq   

000000000040bba7 <_aApplydc1>:
  40bba7:	55                   	push   %rbp
  40bba8:	48 89 e5             	mov    %rsp,%rbp
  40bbab:	48 83 ec 40          	sub    $0x40,%rsp
  40bbaf:	49 89 d0             	mov    %rdx,%r8
  40bbb2:	48 89 f8             	mov    %rdi,%rax
  40bbb5:	48 89 f2             	mov    %rsi,%rdx
  40bbb8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bbbc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bbc0:	4c 89 c0             	mov    %r8,%rax
  40bbc3:	48 89 ca             	mov    %rcx,%rdx
  40bbc6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bbca:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bbce:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bbd5:	00 
  40bbd6:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40bbdd:	00 
  40bbde:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40bbe5:	00 
  40bbe6:	48 c7 45 f8 30 3d 41 	movq   $0x413d30,-0x8(%rbp)
  40bbed:	00 
  40bbee:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bbf2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bbf6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bbfa:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bbfe:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bc04:	e8 88 f0 ff ff       	callq  40ac91 <_d_assert_msg>
  40bc09:	c9                   	leaveq 
  40bc0a:	c3                   	retq   

000000000040bc0b <_aApplydw1>:
  40bc0b:	55                   	push   %rbp
  40bc0c:	48 89 e5             	mov    %rsp,%rbp
  40bc0f:	48 83 ec 40          	sub    $0x40,%rsp
  40bc13:	49 89 d0             	mov    %rdx,%r8
  40bc16:	48 89 f8             	mov    %rdi,%rax
  40bc19:	48 89 f2             	mov    %rsi,%rdx
  40bc1c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bc20:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bc24:	4c 89 c0             	mov    %r8,%rax
  40bc27:	48 89 ca             	mov    %rcx,%rdx
  40bc2a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bc2e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bc32:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bc39:	00 
  40bc3a:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40bc41:	00 
  40bc42:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40bc49:	00 
  40bc4a:	48 c7 45 f8 80 3d 41 	movq   $0x413d80,-0x8(%rbp)
  40bc51:	00 
  40bc52:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bc56:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bc5a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bc5e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bc62:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bc68:	e8 24 f0 ff ff       	callq  40ac91 <_d_assert_msg>
  40bc6d:	c9                   	leaveq 
  40bc6e:	c3                   	retq   

000000000040bc6f <_aApplycw2>:
  40bc6f:	55                   	push   %rbp
  40bc70:	48 89 e5             	mov    %rsp,%rbp
  40bc73:	48 83 ec 40          	sub    $0x40,%rsp
  40bc77:	49 89 d0             	mov    %rdx,%r8
  40bc7a:	48 89 f8             	mov    %rdi,%rax
  40bc7d:	48 89 f2             	mov    %rsi,%rdx
  40bc80:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bc84:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bc88:	4c 89 c0             	mov    %r8,%rax
  40bc8b:	48 89 ca             	mov    %rcx,%rdx
  40bc8e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bc92:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bc96:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bc9d:	00 
  40bc9e:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40bca5:	00 
  40bca6:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40bcad:	00 
  40bcae:	48 c7 45 f8 d0 3d 41 	movq   $0x413dd0,-0x8(%rbp)
  40bcb5:	00 
  40bcb6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bcba:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bcbe:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bcc2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bcc6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bccc:	e8 c0 ef ff ff       	callq  40ac91 <_d_assert_msg>
  40bcd1:	c9                   	leaveq 
  40bcd2:	c3                   	retq   

000000000040bcd3 <_aApplycd2>:
  40bcd3:	55                   	push   %rbp
  40bcd4:	48 89 e5             	mov    %rsp,%rbp
  40bcd7:	48 83 ec 40          	sub    $0x40,%rsp
  40bcdb:	49 89 d0             	mov    %rdx,%r8
  40bcde:	48 89 f8             	mov    %rdi,%rax
  40bce1:	48 89 f2             	mov    %rsi,%rdx
  40bce4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bce8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bcec:	4c 89 c0             	mov    %r8,%rax
  40bcef:	48 89 ca             	mov    %rcx,%rdx
  40bcf2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bcf6:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bcfa:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bd01:	00 
  40bd02:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40bd09:	00 
  40bd0a:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40bd11:	00 
  40bd12:	48 c7 45 f8 20 3e 41 	movq   $0x413e20,-0x8(%rbp)
  40bd19:	00 
  40bd1a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bd1e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bd22:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bd26:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bd2a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bd30:	e8 5c ef ff ff       	callq  40ac91 <_d_assert_msg>
  40bd35:	c9                   	leaveq 
  40bd36:	c3                   	retq   

000000000040bd37 <_aApplywc2>:
  40bd37:	55                   	push   %rbp
  40bd38:	48 89 e5             	mov    %rsp,%rbp
  40bd3b:	48 83 ec 40          	sub    $0x40,%rsp
  40bd3f:	49 89 d0             	mov    %rdx,%r8
  40bd42:	48 89 f8             	mov    %rdi,%rax
  40bd45:	48 89 f2             	mov    %rsi,%rdx
  40bd48:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bd4c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bd50:	4c 89 c0             	mov    %r8,%rax
  40bd53:	48 89 ca             	mov    %rcx,%rdx
  40bd56:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bd5a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bd5e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bd65:	00 
  40bd66:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40bd6d:	00 
  40bd6e:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40bd75:	00 
  40bd76:	48 c7 45 f8 70 3e 41 	movq   $0x413e70,-0x8(%rbp)
  40bd7d:	00 
  40bd7e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bd82:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bd86:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bd8a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bd8e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bd94:	e8 f8 ee ff ff       	callq  40ac91 <_d_assert_msg>
  40bd99:	c9                   	leaveq 
  40bd9a:	c3                   	retq   

000000000040bd9b <_aApplywd2>:
  40bd9b:	55                   	push   %rbp
  40bd9c:	48 89 e5             	mov    %rsp,%rbp
  40bd9f:	48 83 ec 40          	sub    $0x40,%rsp
  40bda3:	49 89 d0             	mov    %rdx,%r8
  40bda6:	48 89 f8             	mov    %rdi,%rax
  40bda9:	48 89 f2             	mov    %rsi,%rdx
  40bdac:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bdb0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bdb4:	4c 89 c0             	mov    %r8,%rax
  40bdb7:	48 89 ca             	mov    %rcx,%rdx
  40bdba:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bdbe:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bdc2:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bdc9:	00 
  40bdca:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40bdd1:	00 
  40bdd2:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40bdd9:	00 
  40bdda:	48 c7 45 f8 c0 3e 41 	movq   $0x413ec0,-0x8(%rbp)
  40bde1:	00 
  40bde2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bde6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bdea:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bdee:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bdf2:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bdf8:	e8 94 ee ff ff       	callq  40ac91 <_d_assert_msg>
  40bdfd:	c9                   	leaveq 
  40bdfe:	c3                   	retq   

000000000040bdff <_aApplydc2>:
  40bdff:	55                   	push   %rbp
  40be00:	48 89 e5             	mov    %rsp,%rbp
  40be03:	48 83 ec 40          	sub    $0x40,%rsp
  40be07:	49 89 d0             	mov    %rdx,%r8
  40be0a:	48 89 f8             	mov    %rdi,%rax
  40be0d:	48 89 f2             	mov    %rsi,%rdx
  40be10:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40be14:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40be18:	4c 89 c0             	mov    %r8,%rax
  40be1b:	48 89 ca             	mov    %rcx,%rdx
  40be1e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40be22:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40be26:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40be2d:	00 
  40be2e:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40be35:	00 
  40be36:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40be3d:	00 
  40be3e:	48 c7 45 f8 10 3f 41 	movq   $0x413f10,-0x8(%rbp)
  40be45:	00 
  40be46:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40be4a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40be4e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40be52:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40be56:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40be5c:	e8 30 ee ff ff       	callq  40ac91 <_d_assert_msg>
  40be61:	c9                   	leaveq 
  40be62:	c3                   	retq   

000000000040be63 <_aApplydw2>:
  40be63:	55                   	push   %rbp
  40be64:	48 89 e5             	mov    %rsp,%rbp
  40be67:	48 83 ec 40          	sub    $0x40,%rsp
  40be6b:	49 89 d0             	mov    %rdx,%r8
  40be6e:	48 89 f8             	mov    %rdi,%rax
  40be71:	48 89 f2             	mov    %rsi,%rdx
  40be74:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40be78:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40be7c:	4c 89 c0             	mov    %r8,%rax
  40be7f:	48 89 ca             	mov    %rcx,%rdx
  40be82:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40be86:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40be8a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40be91:	00 
  40be92:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40be99:	00 
  40be9a:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40bea1:	00 
  40bea2:	48 c7 45 f8 60 3f 41 	movq   $0x413f60,-0x8(%rbp)
  40bea9:	00 
  40beaa:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40beae:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40beb2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40beb6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40beba:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bec0:	e8 cc ed ff ff       	callq  40ac91 <_d_assert_msg>
  40bec5:	c9                   	leaveq 
  40bec6:	c3                   	retq   

000000000040bec7 <_aApplyRcw1>:
  40bec7:	55                   	push   %rbp
  40bec8:	48 89 e5             	mov    %rsp,%rbp
  40becb:	48 83 ec 40          	sub    $0x40,%rsp
  40becf:	49 89 d0             	mov    %rdx,%r8
  40bed2:	48 89 f8             	mov    %rdi,%rax
  40bed5:	48 89 f2             	mov    %rsi,%rdx
  40bed8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bedc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bee0:	4c 89 c0             	mov    %r8,%rax
  40bee3:	48 89 ca             	mov    %rcx,%rdx
  40bee6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40beea:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40beee:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bef5:	00 
  40bef6:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40befd:	00 
  40befe:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40bf05:	00 
  40bf06:	48 c7 45 f8 b0 3f 41 	movq   $0x413fb0,-0x8(%rbp)
  40bf0d:	00 
  40bf0e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bf12:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bf16:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bf1a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bf1e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bf24:	e8 68 ed ff ff       	callq  40ac91 <_d_assert_msg>
  40bf29:	c9                   	leaveq 
  40bf2a:	c3                   	retq   

000000000040bf2b <_aApplyRcd1>:
  40bf2b:	55                   	push   %rbp
  40bf2c:	48 89 e5             	mov    %rsp,%rbp
  40bf2f:	48 83 ec 40          	sub    $0x40,%rsp
  40bf33:	49 89 d0             	mov    %rdx,%r8
  40bf36:	48 89 f8             	mov    %rdi,%rax
  40bf39:	48 89 f2             	mov    %rsi,%rdx
  40bf3c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bf40:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bf44:	4c 89 c0             	mov    %r8,%rax
  40bf47:	48 89 ca             	mov    %rcx,%rdx
  40bf4a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bf4e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bf52:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bf59:	00 
  40bf5a:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40bf61:	00 
  40bf62:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40bf69:	00 
  40bf6a:	48 c7 45 f8 00 40 41 	movq   $0x414000,-0x8(%rbp)
  40bf71:	00 
  40bf72:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bf76:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bf7a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bf7e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bf82:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bf88:	e8 04 ed ff ff       	callq  40ac91 <_d_assert_msg>
  40bf8d:	c9                   	leaveq 
  40bf8e:	c3                   	retq   

000000000040bf8f <_aApplyRwc1>:
  40bf8f:	55                   	push   %rbp
  40bf90:	48 89 e5             	mov    %rsp,%rbp
  40bf93:	48 83 ec 40          	sub    $0x40,%rsp
  40bf97:	49 89 d0             	mov    %rdx,%r8
  40bf9a:	48 89 f8             	mov    %rdi,%rax
  40bf9d:	48 89 f2             	mov    %rsi,%rdx
  40bfa0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bfa4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bfa8:	4c 89 c0             	mov    %r8,%rax
  40bfab:	48 89 ca             	mov    %rcx,%rdx
  40bfae:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bfb2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bfb6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bfbd:	00 
  40bfbe:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40bfc5:	00 
  40bfc6:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40bfcd:	00 
  40bfce:	48 c7 45 f8 50 40 41 	movq   $0x414050,-0x8(%rbp)
  40bfd5:	00 
  40bfd6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bfda:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bfde:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bfe2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bfe6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bfec:	e8 a0 ec ff ff       	callq  40ac91 <_d_assert_msg>
  40bff1:	c9                   	leaveq 
  40bff2:	c3                   	retq   

000000000040bff3 <_aApplyRwd1>:
  40bff3:	55                   	push   %rbp
  40bff4:	48 89 e5             	mov    %rsp,%rbp
  40bff7:	48 83 ec 40          	sub    $0x40,%rsp
  40bffb:	49 89 d0             	mov    %rdx,%r8
  40bffe:	48 89 f8             	mov    %rdi,%rax
  40c001:	48 89 f2             	mov    %rsi,%rdx
  40c004:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c008:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c00c:	4c 89 c0             	mov    %r8,%rax
  40c00f:	48 89 ca             	mov    %rcx,%rdx
  40c012:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c016:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40c01a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c021:	00 
  40c022:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40c029:	00 
  40c02a:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40c031:	00 
  40c032:	48 c7 45 f8 a0 40 41 	movq   $0x4140a0,-0x8(%rbp)
  40c039:	00 
  40c03a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c03e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c042:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c046:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c04a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c050:	e8 3c ec ff ff       	callq  40ac91 <_d_assert_msg>
  40c055:	c9                   	leaveq 
  40c056:	c3                   	retq   

000000000040c057 <_aApplyRdc1>:
  40c057:	55                   	push   %rbp
  40c058:	48 89 e5             	mov    %rsp,%rbp
  40c05b:	48 83 ec 40          	sub    $0x40,%rsp
  40c05f:	49 89 d0             	mov    %rdx,%r8
  40c062:	48 89 f8             	mov    %rdi,%rax
  40c065:	48 89 f2             	mov    %rsi,%rdx
  40c068:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c06c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c070:	4c 89 c0             	mov    %r8,%rax
  40c073:	48 89 ca             	mov    %rcx,%rdx
  40c076:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c07a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40c07e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c085:	00 
  40c086:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40c08d:	00 
  40c08e:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40c095:	00 
  40c096:	48 c7 45 f8 f0 40 41 	movq   $0x4140f0,-0x8(%rbp)
  40c09d:	00 
  40c09e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c0a2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c0a6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c0aa:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c0ae:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c0b4:	e8 d8 eb ff ff       	callq  40ac91 <_d_assert_msg>
  40c0b9:	c9                   	leaveq 
  40c0ba:	c3                   	retq   

000000000040c0bb <_aApplyRdw1>:
  40c0bb:	55                   	push   %rbp
  40c0bc:	48 89 e5             	mov    %rsp,%rbp
  40c0bf:	48 83 ec 40          	sub    $0x40,%rsp
  40c0c3:	49 89 d0             	mov    %rdx,%r8
  40c0c6:	48 89 f8             	mov    %rdi,%rax
  40c0c9:	48 89 f2             	mov    %rsi,%rdx
  40c0cc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c0d0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c0d4:	4c 89 c0             	mov    %r8,%rax
  40c0d7:	48 89 ca             	mov    %rcx,%rdx
  40c0da:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c0de:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40c0e2:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c0e9:	00 
  40c0ea:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40c0f1:	00 
  40c0f2:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40c0f9:	00 
  40c0fa:	48 c7 45 f8 40 41 41 	movq   $0x414140,-0x8(%rbp)
  40c101:	00 
  40c102:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c106:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c10a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c10e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c112:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c118:	e8 74 eb ff ff       	callq  40ac91 <_d_assert_msg>
  40c11d:	c9                   	leaveq 
  40c11e:	c3                   	retq   

000000000040c11f <_aApplyRcw2>:
  40c11f:	55                   	push   %rbp
  40c120:	48 89 e5             	mov    %rsp,%rbp
  40c123:	48 83 ec 40          	sub    $0x40,%rsp
  40c127:	49 89 d0             	mov    %rdx,%r8
  40c12a:	48 89 f8             	mov    %rdi,%rax
  40c12d:	48 89 f2             	mov    %rsi,%rdx
  40c130:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c134:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c138:	4c 89 c0             	mov    %r8,%rax
  40c13b:	48 89 ca             	mov    %rcx,%rdx
  40c13e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c142:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40c146:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c14d:	00 
  40c14e:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40c155:	00 
  40c156:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40c15d:	00 
  40c15e:	48 c7 45 f8 90 41 41 	movq   $0x414190,-0x8(%rbp)
  40c165:	00 
  40c166:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c16a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c16e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c172:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c176:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c17c:	e8 10 eb ff ff       	callq  40ac91 <_d_assert_msg>
  40c181:	c9                   	leaveq 
  40c182:	c3                   	retq   

000000000040c183 <_aApplyRcd2>:
  40c183:	55                   	push   %rbp
  40c184:	48 89 e5             	mov    %rsp,%rbp
  40c187:	48 83 ec 40          	sub    $0x40,%rsp
  40c18b:	49 89 d0             	mov    %rdx,%r8
  40c18e:	48 89 f8             	mov    %rdi,%rax
  40c191:	48 89 f2             	mov    %rsi,%rdx
  40c194:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c198:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c19c:	4c 89 c0             	mov    %r8,%rax
  40c19f:	48 89 ca             	mov    %rcx,%rdx
  40c1a2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c1a6:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40c1aa:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c1b1:	00 
  40c1b2:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40c1b9:	00 
  40c1ba:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40c1c1:	00 
  40c1c2:	48 c7 45 f8 e0 41 41 	movq   $0x4141e0,-0x8(%rbp)
  40c1c9:	00 
  40c1ca:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c1ce:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c1d2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c1d6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c1da:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c1e0:	e8 ac ea ff ff       	callq  40ac91 <_d_assert_msg>
  40c1e5:	c9                   	leaveq 
  40c1e6:	c3                   	retq   

000000000040c1e7 <_aApplyRwc2>:
  40c1e7:	55                   	push   %rbp
  40c1e8:	48 89 e5             	mov    %rsp,%rbp
  40c1eb:	48 83 ec 40          	sub    $0x40,%rsp
  40c1ef:	49 89 d0             	mov    %rdx,%r8
  40c1f2:	48 89 f8             	mov    %rdi,%rax
  40c1f5:	48 89 f2             	mov    %rsi,%rdx
  40c1f8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c1fc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c200:	4c 89 c0             	mov    %r8,%rax
  40c203:	48 89 ca             	mov    %rcx,%rdx
  40c206:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c20a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40c20e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c215:	00 
  40c216:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40c21d:	00 
  40c21e:	48 c7 45 f0 4c 00 00 	movq   $0x4c,-0x10(%rbp)
  40c225:	00 
  40c226:	48 c7 45 f8 30 42 41 	movq   $0x414230,-0x8(%rbp)
  40c22d:	00 
  40c22e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c232:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c236:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c23a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c23e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c244:	e8 48 ea ff ff       	callq  40ac91 <_d_assert_msg>
  40c249:	c9                   	leaveq 
  40c24a:	c3                   	retq   

000000000040c24b <_aApplyRwd2>:
  40c24b:	55                   	push   %rbp
  40c24c:	48 89 e5             	mov    %rsp,%rbp
  40c24f:	48 83 ec 40          	sub    $0x40,%rsp
  40c253:	49 89 d0             	mov    %rdx,%r8
  40c256:	48 89 f8             	mov    %rdi,%rax
  40c259:	48 89 f2             	mov    %rsi,%rdx
  40c25c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c260:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c264:	4c 89 c0             	mov    %r8,%rax
  40c267:	48 89 ca             	mov    %rcx,%rdx
  40c26a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c26e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40c272:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c279:	00 
  40c27a:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40c281:	00 
  40c282:	48 c7 45 f0 4c 00 00 	movq   $0x4c,-0x10(%rbp)
  40c289:	00 
  40c28a:	48 c7 45 f8 80 42 41 	movq   $0x414280,-0x8(%rbp)
  40c291:	00 
  40c292:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c296:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c29a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c29e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c2a2:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c2a8:	e8 e4 e9 ff ff       	callq  40ac91 <_d_assert_msg>
  40c2ad:	c9                   	leaveq 
  40c2ae:	c3                   	retq   

000000000040c2af <_aApplyRdc2>:
  40c2af:	55                   	push   %rbp
  40c2b0:	48 89 e5             	mov    %rsp,%rbp
  40c2b3:	48 83 ec 40          	sub    $0x40,%rsp
  40c2b7:	49 89 d0             	mov    %rdx,%r8
  40c2ba:	48 89 f8             	mov    %rdi,%rax
  40c2bd:	48 89 f2             	mov    %rsi,%rdx
  40c2c0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c2c4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c2c8:	4c 89 c0             	mov    %r8,%rax
  40c2cb:	48 89 ca             	mov    %rcx,%rdx
  40c2ce:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c2d2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40c2d6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c2dd:	00 
  40c2de:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40c2e5:	00 
  40c2e6:	48 c7 45 f0 4c 00 00 	movq   $0x4c,-0x10(%rbp)
  40c2ed:	00 
  40c2ee:	48 c7 45 f8 d0 42 41 	movq   $0x4142d0,-0x8(%rbp)
  40c2f5:	00 
  40c2f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c2fa:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c2fe:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c302:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c306:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c30c:	e8 80 e9 ff ff       	callq  40ac91 <_d_assert_msg>
  40c311:	c9                   	leaveq 
  40c312:	c3                   	retq   

000000000040c313 <_aApplyRdw2>:
  40c313:	55                   	push   %rbp
  40c314:	48 89 e5             	mov    %rsp,%rbp
  40c317:	48 83 ec 40          	sub    $0x40,%rsp
  40c31b:	49 89 d0             	mov    %rdx,%r8
  40c31e:	48 89 f8             	mov    %rdi,%rax
  40c321:	48 89 f2             	mov    %rsi,%rdx
  40c324:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c328:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c32c:	4c 89 c0             	mov    %r8,%rax
  40c32f:	48 89 ca             	mov    %rcx,%rdx
  40c332:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c336:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40c33a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c341:	00 
  40c342:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40c349:	00 
  40c34a:	48 c7 45 f0 4c 00 00 	movq   $0x4c,-0x10(%rbp)
  40c351:	00 
  40c352:	48 c7 45 f8 20 43 41 	movq   $0x414320,-0x8(%rbp)
  40c359:	00 
  40c35a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c35e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c362:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c366:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c36a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c370:	e8 1c e9 ff ff       	callq  40ac91 <_d_assert_msg>
  40c375:	c9                   	leaveq 
  40c376:	c3                   	retq   

000000000040c377 <_adSortChar>:
  40c377:	55                   	push   %rbp
  40c378:	48 89 e5             	mov    %rsp,%rbp
  40c37b:	48 83 ec 30          	sub    $0x30,%rsp
  40c37f:	48 89 f0             	mov    %rsi,%rax
  40c382:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c386:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c38a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c391:	00 
  40c392:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40c399:	00 
  40c39a:	48 c7 45 f0 3d 00 00 	movq   $0x3d,-0x10(%rbp)
  40c3a1:	00 
  40c3a2:	48 c7 45 f8 70 43 41 	movq   $0x414370,-0x8(%rbp)
  40c3a9:	00 
  40c3aa:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c3ae:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c3b2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c3b6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c3ba:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c3c0:	e8 cc e8 ff ff       	callq  40ac91 <_d_assert_msg>
  40c3c5:	c9                   	leaveq 
  40c3c6:	c3                   	retq   

000000000040c3c7 <_adSortWchar>:
  40c3c7:	55                   	push   %rbp
  40c3c8:	48 89 e5             	mov    %rsp,%rbp
  40c3cb:	48 83 ec 30          	sub    $0x30,%rsp
  40c3cf:	48 89 f0             	mov    %rsi,%rax
  40c3d2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c3d6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c3da:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c3e1:	00 
  40c3e2:	48 c7 45 e8 82 24 41 	movq   $0x412482,-0x18(%rbp)
  40c3e9:	00 
  40c3ea:	48 c7 45 f0 40 00 00 	movq   $0x40,-0x10(%rbp)
  40c3f1:	00 
  40c3f2:	48 c7 45 f8 b0 43 41 	movq   $0x4143b0,-0x8(%rbp)
  40c3f9:	00 
  40c3fa:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c3fe:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c402:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c406:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c40a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c410:	e8 7c e8 ff ff       	callq  40ac91 <_d_assert_msg>
  40c415:	c9                   	leaveq 
  40c416:	c3                   	retq   

000000000040c417 <_adReverseChar>:
	2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	4,4,4,4,4,4,4,4,5,5,5,5,6,6,0xFF,0xFF,
];

Array _adReverseChar(char[] a)
  40c417:	55                   	push   %rbp
  40c418:	48 89 e5             	mov    %rsp,%rbp
  40c41b:	53                   	push   %rbx
  40c41c:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  40c423:	48 89 bd e8 fe ff ff 	mov    %rdi,-0x118(%rbp)
  40c42a:	48 89 f0             	mov    %rsi,%rax
  40c42d:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  40c434:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
{
	if(a.length > 1)
  40c43b:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40c442:	48 83 f8 01          	cmp    $0x1,%rax
  40c446:	0f 86 5a 03 00 00    	jbe    40c7a6 <_adReverseChar+0x38f>
	{
		char[6] tmp;
  40c44c:	48 c7 85 50 ff ff ff 	movq   $0x6,-0xb0(%rbp)
  40c453:	06 00 00 00 
  40c457:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  40c45e:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  40c465:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  40c46c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c470:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  40c477:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40c47b:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  40c480:	0f 95 c0             	setne  %al
  40c483:	83 f0 01             	xor    $0x1,%eax
  40c486:	84 c0                	test   %al,%al
  40c488:	75 11                	jne    40c49b <_adReverseChar+0x84>
  40c48a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c48e:	c6 00 ff             	movb   $0xff,(%rax)
  40c491:	48 ff 45 b8          	incq   -0x48(%rbp)
  40c495:	48 ff 4d c0          	decq   -0x40(%rbp)
  40c499:	eb e0                	jmp    40c47b <_adReverseChar+0x64>
		char[6] tmplo;
  40c49b:	48 c7 85 60 ff ff ff 	movq   $0x6,-0xa0(%rbp)
  40c4a2:	06 00 00 00 
  40c4a6:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40c4ad:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  40c4b4:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40c4bb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c4bf:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  40c4c6:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40c4ca:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  40c4cf:	0f 95 c0             	setne  %al
  40c4d2:	83 f0 01             	xor    $0x1,%eax
  40c4d5:	84 c0                	test   %al,%al
  40c4d7:	75 11                	jne    40c4ea <_adReverseChar+0xd3>
  40c4d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c4dd:	c6 00 ff             	movb   $0xff,(%rax)
  40c4e0:	48 ff 45 c8          	incq   -0x38(%rbp)
  40c4e4:	48 ff 4d d0          	decq   -0x30(%rbp)
  40c4e8:	eb e0                	jmp    40c4ca <_adReverseChar+0xb3>
		char* lo = a.ptr;
  40c4ea:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40c4f1:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		char* hi = &a[length - 1];
  40c4f5:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40c4fc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40c500:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40c507:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  40c50e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40c512:	48 ff ca             	dec    %rdx
  40c515:	48 89 95 00 ff ff ff 	mov    %rdx,-0x100(%rbp)
  40c51c:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40c523:	48 39 85 00 ff ff ff 	cmp    %rax,-0x100(%rbp)
  40c52a:	73 10                	jae    40c53c <_adReverseChar+0x125>
  40c52c:	48 8b 8d 00 ff ff ff 	mov    -0x100(%rbp),%rcx
  40c533:	48 89 8d f8 fe ff ff 	mov    %rcx,-0x108(%rbp)
  40c53a:	eb 2e                	jmp    40c56a <_adReverseChar+0x153>
  40c53c:	48 c7 85 70 ff ff ff 	movq   $0xb,-0x90(%rbp)
  40c543:	0b 00 00 00 
  40c547:	48 c7 85 78 ff ff ff 	movq   $0x412552,-0x88(%rbp)
  40c54e:	52 25 41 00 
  40c552:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
  40c559:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
  40c560:	ba 41 02 00 00       	mov    $0x241,%edx
  40c565:	e8 6f e7 ff ff       	callq  40acd9 <_d_array_bounds>
  40c56a:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  40c571:	48 03 85 f0 fe ff ff 	add    -0x110(%rbp),%rax
  40c578:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  40c57c:	eb 00                	jmp    40c57e <_adReverseChar+0x167>

		while (lo < hi)
  40c57e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40c582:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  40c586:	0f 92 c0             	setb   %al
  40c589:	83 f0 01             	xor    $0x1,%eax
  40c58c:	84 c0                	test   %al,%al
  40c58e:	0f 85 12 02 00 00    	jne    40c7a6 <_adReverseChar+0x38f>
		{	auto clo = *lo;
  40c594:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40c598:	0f b6 00             	movzbl (%rax),%eax
  40c59b:	88 45 ef             	mov    %al,-0x11(%rbp)
			auto chi = *hi;
  40c59e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40c5a2:	0f b6 00             	movzbl (%rax),%eax
  40c5a5:	88 45 ee             	mov    %al,-0x12(%rbp)

			if (clo <= 0x7F && chi <= 0x7F)
  40c5a8:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  40c5ac:	83 f8 7f             	cmp    $0x7f,%eax
  40c5af:	7f 27                	jg     40c5d8 <_adReverseChar+0x1c1>
  40c5b1:	0f b6 45 ee          	movzbl -0x12(%rbp),%eax
  40c5b5:	83 f8 7f             	cmp    $0x7f,%eax
  40c5b8:	7f 1e                	jg     40c5d8 <_adReverseChar+0x1c1>
			{
				*lo = chi;
  40c5ba:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40c5be:	0f b6 45 ee          	movzbl -0x12(%rbp),%eax
  40c5c2:	88 02                	mov    %al,(%rdx)
				*hi = clo;
  40c5c4:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40c5c8:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  40c5cc:	88 02                	mov    %al,(%rdx)
				lo++;
  40c5ce:	48 ff 45 b0          	incq   -0x50(%rbp)
				hi--;
  40c5d2:	48 ff 4d a8          	decq   -0x58(%rbp)
				continue;
  40c5d6:	eb a6                	jmp    40c57e <_adReverseChar+0x167>
			}

			uint stridelo = UTF8stride[clo];
  40c5d8:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  40c5dc:	48 3d 00 01 00 00    	cmp    $0x100,%rax
  40c5e2:	73 0d                	jae    40c5f1 <_adReverseChar+0x1da>
  40c5e4:	0f b6 5d ef          	movzbl -0x11(%rbp),%ebx
  40c5e8:	48 89 9d 08 ff ff ff 	mov    %rbx,-0xf8(%rbp)
  40c5ef:	eb 22                	jmp    40c613 <_adReverseChar+0x1fc>
  40c5f1:	48 c7 45 80 0b 00 00 	movq   $0xb,-0x80(%rbp)
  40c5f8:	00 
  40c5f9:	48 c7 45 88 52 25 41 	movq   $0x412552,-0x78(%rbp)
  40c600:	00 
  40c601:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  40c605:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  40c609:	ba 50 02 00 00       	mov    $0x250,%edx
  40c60e:	e8 c6 e6 ff ff       	callq  40acd9 <_d_array_bounds>
  40c613:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40c61a:	48 05 e0 c6 41 00    	add    $0x41c6e0,%rax
  40c620:	0f b6 00             	movzbl (%rax),%eax
  40c623:	0f b6 c0             	movzbl %al,%eax
  40c626:	89 45 e8             	mov    %eax,-0x18(%rbp)

			uint stridehi = 1;
  40c629:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  40c630:	eb 00                	jmp    40c632 <_adReverseChar+0x21b>
			while ((chi & 0xC0) == 0x80)
  40c632:	0f b6 45 ee          	movzbl -0x12(%rbp),%eax
  40c636:	25 c0 00 00 00       	and    $0xc0,%eax
  40c63b:	3d 80 00 00 00       	cmp    $0x80,%eax
  40c640:	0f 94 c0             	sete   %al
  40c643:	83 f0 01             	xor    $0x1,%eax
  40c646:	84 c0                	test   %al,%al
  40c648:	75 3f                	jne    40c689 <_adReverseChar+0x272>
			{
				chi = *--hi;
  40c64a:	48 ff 4d a8          	decq   -0x58(%rbp)
  40c64e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40c652:	0f b6 00             	movzbl (%rax),%eax
  40c655:	88 45 ee             	mov    %al,-0x12(%rbp)
				stridehi++;
  40c658:	ff 45 e4             	incl   -0x1c(%rbp)
				assert(hi >= lo);
  40c65b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40c65f:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  40c663:	73 cd                	jae    40c632 <_adReverseChar+0x21b>
  40c665:	48 c7 45 90 0b 00 00 	movq   $0xb,-0x70(%rbp)
  40c66c:	00 
  40c66d:	48 c7 45 98 52 25 41 	movq   $0x412552,-0x68(%rbp)
  40c674:	00 
  40c675:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  40c679:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  40c67d:	ba 57 02 00 00       	mov    $0x257,%edx
  40c682:	e8 df e5 ff ff       	callq  40ac66 <_d_assert>
  40c687:	eb a9                	jmp    40c632 <_adReverseChar+0x21b>
			}
			if (lo == hi)
  40c689:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40c68d:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  40c691:	0f 84 0f 01 00 00    	je     40c7a6 <_adReverseChar+0x38f>
				break;

			if (stridelo == stridehi)
  40c697:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40c69a:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  40c69d:	75 46                	jne    40c6e5 <_adReverseChar+0x2ce>
			{

				memcpy(tmp.ptr, lo, stridelo);
  40c69f:	8b 55 e8             	mov    -0x18(%rbp),%edx
  40c6a2:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40c6a6:	48 8d bd 20 ff ff ff 	lea    -0xe0(%rbp),%rdi
  40c6ad:	e8 d2 0f 00 00       	callq  40d684 <memcpy>
				memcpy(lo, hi, stridelo);
  40c6b2:	8b 55 e8             	mov    -0x18(%rbp),%edx
  40c6b5:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40c6b9:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  40c6bd:	e8 c2 0f 00 00       	callq  40d684 <memcpy>
				memcpy(hi, tmp.ptr, stridelo);
  40c6c2:	8b 55 e8             	mov    -0x18(%rbp),%edx
  40c6c5:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
  40c6cc:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  40c6d0:	e8 af 0f 00 00       	callq  40d684 <memcpy>
				lo += stridelo;
  40c6d5:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40c6d8:	48 01 45 b0          	add    %rax,-0x50(%rbp)
				hi--;
  40c6dc:	48 ff 4d a8          	decq   -0x58(%rbp)
				continue;
  40c6e0:	e9 99 fe ff ff       	jmpq   40c57e <_adReverseChar+0x167>
			}

			/* Shift the whole array. This is woefully inefficient
			 */
			memcpy(tmp.ptr, hi, stridehi);
  40c6e5:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  40c6e8:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40c6ec:	48 8d bd 20 ff ff ff 	lea    -0xe0(%rbp),%rdi
  40c6f3:	e8 8c 0f 00 00       	callq  40d684 <memcpy>
			memcpy(tmplo.ptr, lo, stridelo);
  40c6f8:	8b 55 e8             	mov    -0x18(%rbp),%edx
  40c6fb:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40c6ff:	48 8d bd 30 ff ff ff 	lea    -0xd0(%rbp),%rdi
  40c706:	e8 79 0f 00 00       	callq  40d684 <memcpy>
			memmove(lo + stridehi, lo + stridelo , (hi - lo) - stridelo);
  40c70b:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40c70f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40c713:	48 29 d0             	sub    %rdx,%rax
  40c716:	48 89 c2             	mov    %rax,%rdx
  40c719:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40c71c:	48 89 d1             	mov    %rdx,%rcx
  40c71f:	48 29 c1             	sub    %rax,%rcx
  40c722:	48 89 c8             	mov    %rcx,%rax
  40c725:	48 89 c2             	mov    %rax,%rdx
  40c728:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40c72b:	48 89 c6             	mov    %rax,%rsi
  40c72e:	48 03 75 b0          	add    -0x50(%rbp),%rsi
  40c732:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  40c735:	48 89 c7             	mov    %rax,%rdi
  40c738:	48 03 7d b0          	add    -0x50(%rbp),%rdi
  40c73c:	e8 a5 0f 00 00       	callq  40d6e6 <memmove>
			memcpy(lo, tmp.ptr, stridehi);
  40c741:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  40c744:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
  40c74b:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  40c74f:	e8 30 0f 00 00       	callq  40d684 <memcpy>
			memcpy(hi + cast(int) stridehi - cast(int) stridelo, tmplo.ptr, stridelo);
  40c754:	8b 4d e8             	mov    -0x18(%rbp),%ecx
  40c757:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  40c75a:	48 98                	cltq   
  40c75c:	48 89 c2             	mov    %rax,%rdx
  40c75f:	48 03 55 a8          	add    -0x58(%rbp),%rdx
  40c763:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40c766:	48 98                	cltq   
  40c768:	48 89 d7             	mov    %rdx,%rdi
  40c76b:	48 29 c7             	sub    %rax,%rdi
  40c76e:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
  40c775:	48 89 ca             	mov    %rcx,%rdx
  40c778:	e8 07 0f 00 00       	callq  40d684 <memcpy>

			lo += stridehi;
  40c77d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  40c780:	48 01 45 b0          	add    %rax,-0x50(%rbp)
			hi = hi - 1 + (cast(int) stridehi - cast(int) stridelo);
  40c784:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  40c788:	48 ff c9             	dec    %rcx
  40c78b:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  40c78e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40c791:	89 d3                	mov    %edx,%ebx
  40c793:	29 c3                	sub    %eax,%ebx
  40c795:	89 d8                	mov    %ebx,%eax
  40c797:	48 98                	cltq   
  40c799:	48 8d 04 01          	lea    (%rcx,%rax,1),%rax
  40c79d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  40c7a1:	e9 d8 fd ff ff       	jmpq   40c57e <_adReverseChar+0x167>
		}
	}

	Array aaa = *cast(Array*)(&a);
  40c7a6:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  40c7ad:	48 8b 02             	mov    (%rdx),%rax
  40c7b0:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40c7b7:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40c7bb:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
	return aaa;
  40c7c2:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40c7c9:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  40c7d0:	48 89 02             	mov    %rax,(%rdx)
  40c7d3:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40c7da:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
  40c7e1:	48 89 41 08          	mov    %rax,0x8(%rcx)
}
  40c7e5:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  40c7ec:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  40c7f3:	5b                   	pop    %rbx
  40c7f4:	c9                   	leaveq 
  40c7f5:	c3                   	retq   

000000000040c7f6 <_adReverseWchar>:

Array _adReverseWchar(wchar[] a)
  40c7f6:	55                   	push   %rbp
  40c7f7:	48 89 e5             	mov    %rsp,%rbp
  40c7fa:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  40c801:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  40c808:	48 89 f0             	mov    %rsi,%rax
  40c80b:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40c812:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
{
	if (a.length > 1)
  40c819:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40c820:	48 83 f8 01          	cmp    $0x1,%rax
  40c824:	0f 86 3f 03 00 00    	jbe    40cb69 <_adReverseWchar+0x373>
	{
		wchar[2] tmp;
  40c82a:	48 c7 85 70 ff ff ff 	movq   $0x2,-0x90(%rbp)
  40c831:	02 00 00 00 
  40c835:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40c83c:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  40c843:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40c84a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40c84e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40c855:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40c859:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  40c85e:	0f 95 c0             	setne  %al
  40c861:	83 f0 01             	xor    $0x1,%eax
  40c864:	84 c0                	test   %al,%al
  40c866:	75 14                	jne    40c87c <_adReverseWchar+0x86>
  40c868:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c86c:	66 c7 00 ff ff       	movw   $0xffff,(%rax)
  40c871:	48 83 45 d8 02       	addq   $0x2,-0x28(%rbp)
  40c876:	48 ff 4d e0          	decq   -0x20(%rbp)
  40c87a:	eb dd                	jmp    40c859 <_adReverseWchar+0x63>
		wchar* lo = a.ptr;
  40c87c:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40c883:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		wchar* hi = &a[length - 1];
  40c887:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40c88e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40c892:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40c899:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  40c8a0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40c8a4:	48 ff ca             	dec    %rdx
  40c8a7:	48 89 95 30 ff ff ff 	mov    %rdx,-0xd0(%rbp)
  40c8ae:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40c8b5:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
  40c8bc:	73 10                	jae    40c8ce <_adReverseWchar+0xd8>
  40c8be:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
  40c8c5:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
  40c8cc:	eb 22                	jmp    40c8f0 <_adReverseWchar+0xfa>
  40c8ce:	48 c7 45 80 0b 00 00 	movq   $0xb,-0x80(%rbp)
  40c8d5:	00 
  40c8d6:	48 c7 45 88 52 25 41 	movq   $0x412552,-0x78(%rbp)
  40c8dd:	00 
  40c8de:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  40c8e2:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  40c8e6:	ba 7e 02 00 00       	mov    $0x27e,%edx
  40c8eb:	e8 e9 e3 ff ff       	callq  40acd9 <_d_array_bounds>
  40c8f0:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40c8f7:	48 01 c0             	add    %rax,%rax
  40c8fa:	48 03 85 20 ff ff ff 	add    -0xe0(%rbp),%rax
  40c901:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40c905:	eb 00                	jmp    40c907 <_adReverseWchar+0x111>

		while (lo < hi)
  40c907:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40c90b:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  40c90f:	0f 92 c0             	setb   %al
  40c912:	83 f0 01             	xor    $0x1,%eax
  40c915:	84 c0                	test   %al,%al
  40c917:	0f 85 4c 02 00 00    	jne    40cb69 <_adReverseWchar+0x373>
		{	auto clo = *lo;
  40c91d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40c921:	0f b7 00             	movzwl (%rax),%eax
  40c924:	66 89 45 fa          	mov    %ax,-0x6(%rbp)
			auto chi = *hi;
  40c928:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c92c:	0f b7 00             	movzwl (%rax),%eax
  40c92f:	66 89 45 f8          	mov    %ax,-0x8(%rbp)

			if ((clo < 0xD800 || clo > 0xDFFF) &&
  40c933:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  40c937:	3d 00 d8 00 00       	cmp    $0xd800,%eax
  40c93c:	7c 0b                	jl     40c949 <_adReverseWchar+0x153>
  40c93e:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  40c942:	3d ff df 00 00       	cmp    $0xdfff,%eax
  40c947:	7e 37                	jle    40c980 <_adReverseWchar+0x18a>
  40c949:	0f b7 45 f8          	movzwl -0x8(%rbp),%eax
  40c94d:	3d 00 d8 00 00       	cmp    $0xd800,%eax
  40c952:	7c 0b                	jl     40c95f <_adReverseWchar+0x169>
  40c954:	0f b7 45 f8          	movzwl -0x8(%rbp),%eax
  40c958:	3d ff df 00 00       	cmp    $0xdfff,%eax
  40c95d:	7e 21                	jle    40c980 <_adReverseWchar+0x18a>
				(chi < 0xD800 || chi > 0xDFFF))
			{
				*lo = chi;
  40c95f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40c963:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40c966:	66 89 02             	mov    %ax,(%rdx)
				*hi = clo;
  40c969:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40c96d:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  40c971:	66 89 02             	mov    %ax,(%rdx)
				lo++;
  40c974:	48 83 45 d0 02       	addq   $0x2,-0x30(%rbp)
				hi--;
  40c979:	48 83 6d c8 02       	subq   $0x2,-0x38(%rbp)
				continue;
  40c97e:	eb 87                	jmp    40c907 <_adReverseWchar+0x111>
			}

			int stridelo = 1 + (clo >= 0xD800 && clo <= 0xDBFF);
  40c980:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  40c984:	3d 00 d8 00 00       	cmp    $0xd800,%eax
  40c989:	7c 14                	jl     40c99f <_adReverseWchar+0x1a9>
  40c98b:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  40c98f:	3d ff db 00 00       	cmp    $0xdbff,%eax
  40c994:	7f 09                	jg     40c99f <_adReverseWchar+0x1a9>
  40c996:	c6 85 3f ff ff ff 01 	movb   $0x1,-0xc1(%rbp)
  40c99d:	eb 07                	jmp    40c9a6 <_adReverseWchar+0x1b0>
  40c99f:	c6 85 3f ff ff ff 00 	movb   $0x0,-0xc1(%rbp)
  40c9a6:	0f b6 85 3f ff ff ff 	movzbl -0xc1(%rbp),%eax
  40c9ad:	ff c0                	inc    %eax
  40c9af:	89 45 f4             	mov    %eax,-0xc(%rbp)

			int stridehi = 1;
  40c9b2:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%rbp)
			if (chi >= 0xDC00 && chi <= 0xDFFF)
  40c9b9:	0f b7 45 f8          	movzwl -0x8(%rbp),%eax
  40c9bd:	3d 00 dc 00 00       	cmp    $0xdc00,%eax
  40c9c2:	7c 4a                	jl     40ca0e <_adReverseWchar+0x218>
  40c9c4:	0f b7 45 f8          	movzwl -0x8(%rbp),%eax
  40c9c8:	3d ff df 00 00       	cmp    $0xdfff,%eax
  40c9cd:	7f 3f                	jg     40ca0e <_adReverseWchar+0x218>
			{
				chi = *--hi;
  40c9cf:	48 83 6d c8 02       	subq   $0x2,-0x38(%rbp)
  40c9d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c9d8:	0f b7 00             	movzwl (%rax),%eax
  40c9db:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
				stridehi++;
  40c9df:	ff 45 f0             	incl   -0x10(%rbp)
				assert(hi >= lo);
  40c9e2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c9e6:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  40c9ea:	73 22                	jae    40ca0e <_adReverseWchar+0x218>
  40c9ec:	48 c7 45 90 0b 00 00 	movq   $0xb,-0x70(%rbp)
  40c9f3:	00 
  40c9f4:	48 c7 45 98 52 25 41 	movq   $0x412552,-0x68(%rbp)
  40c9fb:	00 
  40c9fc:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  40ca00:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  40ca04:	ba 95 02 00 00       	mov    $0x295,%edx
  40ca09:	e8 58 e2 ff ff       	callq  40ac66 <_d_assert>
			}
			if (lo == hi)
  40ca0e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40ca12:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  40ca16:	0f 84 4d 01 00 00    	je     40cb69 <_adReverseWchar+0x373>
				break;

			if (stridelo == stridehi)
  40ca1c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40ca1f:	3b 45 f0             	cmp    -0x10(%rbp),%eax
  40ca22:	75 63                	jne    40ca87 <_adReverseWchar+0x291>
			{	int stmp;
  40ca24:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

				assert(stridelo == 2);
  40ca2b:	83 7d f4 02          	cmpl   $0x2,-0xc(%rbp)
  40ca2f:	74 22                	je     40ca53 <_adReverseWchar+0x25d>
  40ca31:	48 c7 45 a0 0b 00 00 	movq   $0xb,-0x60(%rbp)
  40ca38:	00 
  40ca39:	48 c7 45 a8 52 25 41 	movq   $0x412552,-0x58(%rbp)
  40ca40:	00 
  40ca41:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  40ca45:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40ca49:	ba 9d 02 00 00       	mov    $0x29d,%edx
  40ca4e:	e8 13 e2 ff ff       	callq  40ac66 <_d_assert>
				assert(stmp.sizeof == 2 * (*lo).sizeof);
				stmp = *cast(int*)lo;
  40ca53:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40ca57:	8b 00                	mov    (%rax),%eax
  40ca59:	89 45 fc             	mov    %eax,-0x4(%rbp)
				*cast(int*)lo = *cast(int*)hi;
  40ca5c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40ca60:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40ca64:	8b 00                	mov    (%rax),%eax
  40ca66:	89 02                	mov    %eax,(%rdx)
				*cast(int*)hi = stmp;
  40ca68:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40ca6c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40ca6f:	89 02                	mov    %eax,(%rdx)
				lo += stridelo;
  40ca71:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40ca74:	48 98                	cltq   
  40ca76:	48 01 c0             	add    %rax,%rax
  40ca79:	48 01 45 d0          	add    %rax,-0x30(%rbp)
				hi--;
  40ca7d:	48 83 6d c8 02       	subq   $0x2,-0x38(%rbp)
				continue;
  40ca82:	e9 80 fe ff ff       	jmpq   40c907 <_adReverseWchar+0x111>
			}

			/* Shift the whole array. This is woefully inefficient
			 */
			memcpy(tmp.ptr, hi, stridehi * wchar.sizeof);
  40ca87:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40ca8a:	48 98                	cltq   
  40ca8c:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  40ca90:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40ca94:	48 8d bd 50 ff ff ff 	lea    -0xb0(%rbp),%rdi
  40ca9b:	e8 e4 0b 00 00       	callq  40d684 <memcpy>
			memcpy(hi + cast(int) stridehi - cast(int) stridelo, lo, stridelo * wchar.sizeof);
  40caa0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40caa3:	48 98                	cltq   
  40caa5:	48 8d 0c 00          	lea    (%rax,%rax,1),%rcx
  40caa9:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40caac:	48 98                	cltq   
  40caae:	48 01 c0             	add    %rax,%rax
  40cab1:	48 89 c2             	mov    %rax,%rdx
  40cab4:	48 03 55 c8          	add    -0x38(%rbp),%rdx
  40cab8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40cabb:	48 98                	cltq   
  40cabd:	48 01 c0             	add    %rax,%rax
  40cac0:	48 89 d7             	mov    %rdx,%rdi
  40cac3:	48 29 c7             	sub    %rax,%rdi
  40cac6:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40caca:	48 89 ca             	mov    %rcx,%rdx
  40cacd:	e8 b2 0b 00 00       	callq  40d684 <memcpy>
			memmove(lo + stridehi, lo + stridelo , (hi - (lo + stridelo)) * wchar.sizeof);
  40cad2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40cad5:	48 98                	cltq   
  40cad7:	48 01 c0             	add    %rax,%rax
  40cada:	48 89 c2             	mov    %rax,%rdx
  40cadd:	48 03 55 d0          	add    -0x30(%rbp),%rdx
  40cae1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cae5:	48 89 c1             	mov    %rax,%rcx
  40cae8:	48 29 d1             	sub    %rdx,%rcx
  40caeb:	48 89 ca             	mov    %rcx,%rdx
  40caee:	48 89 d0             	mov    %rdx,%rax
  40caf1:	48 c1 e8 3f          	shr    $0x3f,%rax
  40caf5:	48 01 d0             	add    %rdx,%rax
  40caf8:	48 d1 f8             	sar    %rax
  40cafb:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  40caff:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40cb02:	48 98                	cltq   
  40cb04:	48 01 c0             	add    %rax,%rax
  40cb07:	48 89 c6             	mov    %rax,%rsi
  40cb0a:	48 03 75 d0          	add    -0x30(%rbp),%rsi
  40cb0e:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40cb11:	48 98                	cltq   
  40cb13:	48 01 c0             	add    %rax,%rax
  40cb16:	48 89 c7             	mov    %rax,%rdi
  40cb19:	48 03 7d d0          	add    -0x30(%rbp),%rdi
  40cb1d:	e8 c4 0b 00 00       	callq  40d6e6 <memmove>
			memcpy(lo, tmp.ptr, stridehi * wchar.sizeof);
  40cb22:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40cb25:	48 98                	cltq   
  40cb27:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  40cb2b:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  40cb32:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40cb36:	e8 49 0b 00 00       	callq  40d684 <memcpy>

			lo += stridehi;
  40cb3b:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40cb3e:	48 98                	cltq   
  40cb40:	48 01 c0             	add    %rax,%rax
  40cb43:	48 01 45 d0          	add    %rax,-0x30(%rbp)
			hi = hi - 1 + (cast(int) stridehi - cast(int) stridelo);
  40cb47:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  40cb4b:	48 83 e9 02          	sub    $0x2,%rcx
  40cb4f:	8b 55 f4             	mov    -0xc(%rbp),%edx
  40cb52:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40cb55:	29 d0                	sub    %edx,%eax
  40cb57:	48 98                	cltq   
  40cb59:	48 01 c0             	add    %rax,%rax
  40cb5c:	48 8d 04 01          	lea    (%rcx,%rax,1),%rax
  40cb60:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40cb64:	e9 9e fd ff ff       	jmpq   40c907 <_adReverseWchar+0x111>
		}
	}

	Array aaa = *cast(Array*)(&a);
  40cb69:	48 8d 95 40 ff ff ff 	lea    -0xc0(%rbp),%rdx
  40cb70:	48 8b 02             	mov    (%rdx),%rax
  40cb73:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40cb7a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40cb7e:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
	return aaa;
  40cb85:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40cb8c:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  40cb93:	48 89 02             	mov    %rax,(%rdx)
  40cb96:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  40cb9d:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
  40cba4:	48 89 41 08          	mov    %rax,0x8(%rcx)
}
  40cba8:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40cbaf:	c9                   	leaveq 
  40cbb0:	c3                   	retq   

000000000040cbb1 <_adCmpChar>:

int _adCmpChar(Array a1, Array a2)
  40cbb1:	55                   	push   %rbp
  40cbb2:	48 89 e5             	mov    %rsp,%rbp
  40cbb5:	48 83 ec 30          	sub    $0x30,%rsp
  40cbb9:	49 89 d0             	mov    %rdx,%r8
  40cbbc:	48 89 f8             	mov    %rdi,%rax
  40cbbf:	48 89 f2             	mov    %rsi,%rdx
  40cbc2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40cbc6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40cbca:	4c 89 c0             	mov    %r8,%rax
  40cbcd:	48 89 ca             	mov    %rcx,%rdx
  40cbd0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40cbd4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
			ret 					;
		}
	}
	else
	{
		int len;
  40cbd8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
		int c;
  40cbdf:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)

		len = a1.length;
  40cbe6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40cbea:	89 45 fc             	mov    %eax,-0x4(%rbp)
		if (a2.length < len)
  40cbed:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cbf1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40cbf4:	48 98                	cltq   
  40cbf6:	48 39 c2             	cmp    %rax,%rdx
  40cbf9:	73 07                	jae    40cc02 <_adCmpChar+0x51>
			len = a2.length;
  40cbfb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40cbff:	89 45 fc             	mov    %eax,-0x4(%rbp)
		c = memcmp(cast(char *)a1.data, cast(char *)a2.data, len);
  40cc02:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40cc05:	48 63 d0             	movslq %eax,%rdx
  40cc08:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40cc0c:	48 89 c6             	mov    %rax,%rsi
  40cc0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cc13:	48 89 c7             	mov    %rax,%rdi
  40cc16:	e8 2d 0b 00 00       	callq  40d748 <_D6kernel4core6system6memcmpFPvPvmZl>
  40cc1b:	89 45 f8             	mov    %eax,-0x8(%rbp)
		if (!c)
  40cc1e:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  40cc22:	0f 95 c0             	setne  %al
  40cc25:	83 f0 01             	xor    $0x1,%eax
  40cc28:	84 c0                	test   %al,%al
  40cc2a:	74 13                	je     40cc3f <_adCmpChar+0x8e>
			c = cast(int)a1.length - cast(int)a2.length;
  40cc2c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40cc30:	89 c2                	mov    %eax,%edx
  40cc32:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40cc36:	89 d1                	mov    %edx,%ecx
  40cc38:	29 c1                	sub    %eax,%ecx
  40cc3a:	89 c8                	mov    %ecx,%eax
  40cc3c:	89 45 f8             	mov    %eax,-0x8(%rbp)
		return c;
  40cc3f:	8b 45 f8             	mov    -0x8(%rbp),%eax
	}
}
  40cc42:	c9                   	leaveq 
  40cc43:	c3                   	retq   

000000000040cc44 <_adReverse>:

Array _adReverse(Array a, size_t szelem)
  40cc44:	55                   	push   %rbp
  40cc45:	48 89 e5             	mov    %rsp,%rbp
  40cc48:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  40cc4c:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  40cc50:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
  40cc54:	48 89 f0             	mov    %rsi,%rax
  40cc57:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40cc5b:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
{
	if (a.length >= 2)
  40cc5f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40cc63:	48 83 f8 02          	cmp    $0x2,%rax
  40cc67:	0f 82 05 01 00 00    	jb     40cd72 <_adReverse+0x12e>
	{
		byte*	 tmp;
  40cc6d:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40cc74:	00 
		byte[16] buffer;
  40cc75:	48 c7 45 c0 10 00 00 	movq   $0x10,-0x40(%rbp)
  40cc7c:	00 
  40cc7d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40cc81:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40cc85:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40cc89:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40cc8d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cc91:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40cc95:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40cc9a:	0f 95 c0             	setne  %al
  40cc9d:	83 f0 01             	xor    $0x1,%eax
  40cca0:	84 c0                	test   %al,%al
  40cca2:	75 11                	jne    40ccb5 <_adReverse+0x71>
  40cca4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40cca8:	c6 00 00             	movb   $0x0,(%rax)
  40ccab:	48 ff 45 f0          	incq   -0x10(%rbp)
  40ccaf:	48 ff 4d f8          	decq   -0x8(%rbp)
  40ccb3:	eb e0                	jmp    40cc95 <_adReverse+0x51>

		void* lo = a.data;
  40ccb5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40ccb9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		void* hi = a.data + (a.length - 1) * szelem;
  40ccbd:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40ccc1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40ccc5:	48 ff c8             	dec    %rax
  40ccc8:	48 0f af 45 98       	imul   -0x68(%rbp),%rax
  40cccd:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40ccd1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

		tmp = buffer.ptr;
  40ccd5:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40ccd9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		if (szelem > 16)
  40ccdd:	48 83 7d 98 10       	cmpq   $0x10,-0x68(%rbp)
  40cce2:	76 37                	jbe    40cd1b <_adReverse+0xd7>
			tmp = cast(byte*)alloca(szelem);
  40cce4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40cce8:	48 83 c0 0f          	add    $0xf,%rax
  40ccec:	48 83 c0 0f          	add    $0xf,%rax
  40ccf0:	48 c1 e8 04          	shr    $0x4,%rax
  40ccf4:	48 c1 e0 04          	shl    $0x4,%rax
  40ccf8:	48 29 c4             	sub    %rax,%rsp
  40ccfb:	48 89 65 90          	mov    %rsp,-0x70(%rbp)
  40ccff:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40cd03:	48 83 c0 0f          	add    $0xf,%rax
  40cd07:	48 c1 e8 04          	shr    $0x4,%rax
  40cd0b:	48 c1 e0 04          	shl    $0x4,%rax
  40cd0f:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  40cd13:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40cd17:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		for (; lo < hi; lo += szelem, hi -= szelem)
  40cd1b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40cd1f:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  40cd23:	0f 92 c0             	setb   %al
  40cd26:	83 f0 01             	xor    $0x1,%eax
  40cd29:	84 c0                	test   %al,%al
  40cd2b:	75 45                	jne    40cd72 <_adReverse+0x12e>
		{
			memcpy(tmp, lo,  szelem);
  40cd2d:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40cd31:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40cd35:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40cd39:	e8 46 09 00 00       	callq  40d684 <memcpy>
			memcpy(lo,	hi,  szelem);
  40cd3e:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40cd42:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40cd46:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40cd4a:	e8 35 09 00 00       	callq  40d684 <memcpy>
			memcpy(hi,	tmp, szelem);
  40cd4f:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40cd53:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40cd57:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  40cd5b:	e8 24 09 00 00       	callq  40d684 <memcpy>
  40cd60:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40cd64:	48 01 45 e0          	add    %rax,-0x20(%rbp)
  40cd68:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40cd6c:	48 29 45 d8          	sub    %rax,-0x28(%rbp)
  40cd70:	eb a9                	jmp    40cd1b <_adReverse+0xd7>
		}
	}
	return a;
  40cd72:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40cd76:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40cd7a:	48 89 02             	mov    %rax,(%rdx)
  40cd7d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40cd81:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40cd85:	48 89 42 08          	mov    %rax,0x8(%rdx)
}
  40cd89:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40cd8d:	c9                   	leaveq 
  40cd8e:	c3                   	retq   

000000000040cd8f <_adEq>:

int _adEq(Array a1, Array a2, TypeInfo ti)
  40cd8f:	55                   	push   %rbp
  40cd90:	48 89 e5             	mov    %rsp,%rbp
  40cd93:	48 83 ec 50          	sub    $0x50,%rsp
  40cd97:	49 89 d1             	mov    %rdx,%r9
  40cd9a:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  40cd9e:	48 89 f8             	mov    %rdi,%rax
  40cda1:	48 89 f2             	mov    %rsi,%rdx
  40cda4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40cda8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40cdac:	4c 89 c8             	mov    %r9,%rax
  40cdaf:	48 89 ca             	mov    %rcx,%rdx
  40cdb2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40cdb6:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
{
	if(a1.length != a2.length)
  40cdba:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cdbe:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40cdc2:	48 39 c2             	cmp    %rax,%rdx
  40cdc5:	74 0c                	je     40cdd3 <_adEq+0x44>
		return 0;				// not equal
  40cdc7:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  40cdce:	e9 be 00 00 00       	jmpq   40ce91 <_adEq+0x102>

	auto sz = ti.tsize();
  40cdd3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cdd7:	48 8b 00             	mov    (%rax),%rax
  40cdda:	48 83 c0 40          	add    $0x40,%rax
  40cdde:	48 8b 00             	mov    (%rax),%rax
  40cde1:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  40cde5:	ff d0                	callq  *%rax
  40cde7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	auto p1 = a1.data;
  40cdeb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40cdef:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	auto p2 = a2.data;
  40cdf3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cdf7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	if(sz == 1)
  40cdfb:	48 83 7d f0 01       	cmpq   $0x1,-0x10(%rbp)
  40ce00:	75 1f                	jne    40ce21 <_adEq+0x92>
		// We should really have a ti.isPOD() check for this
		return (memcmp(p1, p2, a1.length) == 0);
  40ce02:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40ce06:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40ce0a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40ce0e:	e8 35 09 00 00       	callq  40d748 <_D6kernel4core6system6memcmpFPvPvmZl>
  40ce13:	48 85 c0             	test   %rax,%rax
  40ce16:	0f 94 c0             	sete   %al
  40ce19:	0f b6 c0             	movzbl %al,%eax
  40ce1c:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  40ce1f:	eb 70                	jmp    40ce91 <_adEq+0x102>

	for(size_t i = 0; i < a1.length; i++)
  40ce21:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40ce28:	00 
  40ce29:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40ce2d:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  40ce31:	0f 92 c0             	setb   %al
  40ce34:	83 f0 01             	xor    $0x1,%eax
  40ce37:	84 c0                	test   %al,%al
  40ce39:	75 4f                	jne    40ce8a <_adEq+0xfb>
	{
		if(!ti.equals(p1 + i * sz, p2 + i * sz))
  40ce3b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40ce3f:	48 8b 00             	mov    (%rax),%rax
  40ce42:	48 83 c0 30          	add    $0x30,%rax
  40ce46:	48 8b 08             	mov    (%rax),%rcx
  40ce49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ce4d:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  40ce52:	48 89 c2             	mov    %rax,%rdx
  40ce55:	48 03 55 e0          	add    -0x20(%rbp),%rdx
  40ce59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ce5d:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  40ce62:	48 89 c6             	mov    %rax,%rsi
  40ce65:	48 03 75 e8          	add    -0x18(%rbp),%rsi
  40ce69:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  40ce6d:	ff d1                	callq  *%rcx
  40ce6f:	85 c0                	test   %eax,%eax
  40ce71:	0f 95 c0             	setne  %al
  40ce74:	83 f0 01             	xor    $0x1,%eax
  40ce77:	84 c0                	test   %al,%al
  40ce79:	74 09                	je     40ce84 <_adEq+0xf5>
			return 0;			// not equal
  40ce7b:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  40ce82:	eb 0d                	jmp    40ce91 <_adEq+0x102>
		// We should really have a ti.isPOD() check for this
		return (memcmp(p1, p2, a1.length) == 0);

	for(size_t i = 0; i < a1.length; i++)
	{
		if(!ti.equals(p1 + i * sz, p2 + i * sz))
  40ce84:	48 ff 45 f8          	incq   -0x8(%rbp)
  40ce88:	eb 9f                	jmp    40ce29 <_adEq+0x9a>
			return 0;			// not equal
	}

	return 1;					// equal
  40ce8a:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%rbp)
  40ce91:	8b 45 b4             	mov    -0x4c(%rbp),%eax
}
  40ce94:	c9                   	leaveq 
  40ce95:	c3                   	retq   

000000000040ce96 <_adCmp>:

int _adCmp(Array a1, Array a2, TypeInfo ti)
  40ce96:	55                   	push   %rbp
  40ce97:	48 89 e5             	mov    %rsp,%rbp
  40ce9a:	48 83 ec 70          	sub    $0x70,%rsp
  40ce9e:	49 89 d1             	mov    %rdx,%r9
  40cea1:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
  40cea5:	48 89 f8             	mov    %rdi,%rax
  40cea8:	48 89 f2             	mov    %rsi,%rdx
  40ceab:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40ceaf:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  40ceb3:	4c 89 c8             	mov    %r9,%rax
  40ceb6:	48 89 ca             	mov    %rcx,%rdx
  40ceb9:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40cebd:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
{
	//printf("adCmp()\n");
	auto len = a1.length;
  40cec1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40cec5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (a2.length < len)
  40cec9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40cecd:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40ced1:	73 08                	jae    40cedb <_adCmp+0x45>
		len = a2.length;
  40ced3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40ced7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	auto sz = ti.tsize();
  40cedb:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40cedf:	48 8b 00             	mov    (%rax),%rax
  40cee2:	48 83 c0 40          	add    $0x40,%rax
  40cee6:	48 8b 00             	mov    (%rax),%rax
  40cee9:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40ceed:	ff d0                	callq  *%rax
  40ceef:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	void *p1 = a1.data;
  40cef3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cef7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	void *p2 = a2.data;
  40cefb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40ceff:	48 89 45 c8          	mov    %rax,-0x38(%rbp)

	if (sz == 1)
  40cf03:	48 83 7d d8 01       	cmpq   $0x1,-0x28(%rbp)
  40cf08:	75 28                	jne    40cf32 <_adCmp+0x9c>
	{	// We should really have a ti.isPOD() check for this
		auto c = memcmp(p1, p2, len);
  40cf0a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40cf0e:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40cf12:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40cf16:	e8 2d 08 00 00       	callq  40d748 <_D6kernel4core6system6memcmpFPvPvmZl>
  40cf1b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		if (c)
  40cf1f:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  40cf24:	74 71                	je     40cf97 <_adCmp+0x101>
			return c;
  40cf26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cf2a:	89 45 90             	mov    %eax,-0x70(%rbp)
  40cf2d:	e9 9e 00 00 00       	jmpq   40cfd0 <_adCmp+0x13a>
	}
	else
	{
		for (size_t i = 0; i < len; i++)
  40cf32:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40cf39:	00 
  40cf3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40cf3e:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40cf42:	0f 92 c0             	setb   %al
  40cf45:	83 f0 01             	xor    $0x1,%eax
  40cf48:	84 c0                	test   %al,%al
  40cf4a:	75 4b                	jne    40cf97 <_adCmp+0x101>
		{
			auto c = ti.compare(p1 + i * sz, p2 + i * sz);
  40cf4c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40cf50:	48 8b 00             	mov    (%rax),%rax
  40cf53:	48 83 c0 38          	add    $0x38,%rax
  40cf57:	48 8b 08             	mov    (%rax),%rcx
  40cf5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40cf5e:	48 0f af 45 d8       	imul   -0x28(%rbp),%rax
  40cf63:	48 89 c2             	mov    %rax,%rdx
  40cf66:	48 03 55 c8          	add    -0x38(%rbp),%rdx
  40cf6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40cf6e:	48 0f af 45 d8       	imul   -0x28(%rbp),%rax
  40cf73:	48 89 c6             	mov    %rax,%rsi
  40cf76:	48 03 75 d0          	add    -0x30(%rbp),%rsi
  40cf7a:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40cf7e:	ff d1                	callq  *%rcx
  40cf80:	89 45 fc             	mov    %eax,-0x4(%rbp)
			if (c)
  40cf83:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40cf87:	74 08                	je     40cf91 <_adCmp+0xfb>
				return c;
  40cf89:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40cf8c:	89 45 90             	mov    %eax,-0x70(%rbp)
  40cf8f:	eb 3f                	jmp    40cfd0 <_adCmp+0x13a>
	else
	{
		for (size_t i = 0; i < len; i++)
		{
			auto c = ti.compare(p1 + i * sz, p2 + i * sz);
			if (c)
  40cf91:	48 ff 45 f0          	incq   -0x10(%rbp)
  40cf95:	eb a3                	jmp    40cf3a <_adCmp+0xa4>
				return c;
		}
	}
	if (a1.length == a2.length)
  40cf97:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40cf9b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40cf9f:	48 39 c2             	cmp    %rax,%rdx
  40cfa2:	75 09                	jne    40cfad <_adCmp+0x117>
		return 0;
  40cfa4:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%rbp)
  40cfab:	eb 23                	jmp    40cfd0 <_adCmp+0x13a>
	return (a1.length > a2.length) ? 1 : -1;
  40cfad:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40cfb1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40cfb5:	48 39 c2             	cmp    %rax,%rdx
  40cfb8:	76 09                	jbe    40cfc3 <_adCmp+0x12d>
  40cfba:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%rbp)
  40cfc1:	eb 07                	jmp    40cfca <_adCmp+0x134>
  40cfc3:	c7 45 94 ff ff ff ff 	movl   $0xffffffff,-0x6c(%rbp)
  40cfca:	8b 45 94             	mov    -0x6c(%rbp),%eax
  40cfcd:	89 45 90             	mov    %eax,-0x70(%rbp)
  40cfd0:	8b 45 90             	mov    -0x70(%rbp),%eax
}
  40cfd3:	c9                   	leaveq 
  40cfd4:	c3                   	retq   

000000000040cfd5 <_adSort>:

Array _adSort(Array a, TypeInfo ti)
  40cfd5:	55                   	push   %rbp
  40cfd6:	48 89 e5             	mov    %rsp,%rbp
  40cfd9:	48 81 ec a0 04 00 00 	sub    $0x4a0,%rsp
  40cfe0:	48 89 bd 60 fb ff ff 	mov    %rdi,-0x4a0(%rbp)
  40cfe7:	48 89 8d 68 fb ff ff 	mov    %rcx,-0x498(%rbp)
  40cfee:	48 89 f0             	mov    %rsi,%rax
  40cff1:	48 89 85 70 fb ff ff 	mov    %rax,-0x490(%rbp)
  40cff8:	48 89 95 78 fb ff ff 	mov    %rdx,-0x488(%rbp)
	struct StackEntry {
		byte *l;
		byte *r;
	}

	size_t elem_size = ti.tsize();
  40cfff:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d006:	48 8b 00             	mov    (%rax),%rax
  40d009:	48 83 c0 40          	add    $0x40,%rax
  40d00d:	48 8b 00             	mov    (%rax),%rax
  40d010:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d017:	ff d0                	callq  *%rax
  40d019:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	size_t qsort_limit = elem_size * Qsort_Threshold;
  40d01d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d021:	48 89 d0             	mov    %rdx,%rax
  40d024:	48 c1 e0 03          	shl    $0x3,%rax
  40d028:	48 29 d0             	sub    %rdx,%rax
  40d02b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	static assert(ubyte.sizeof == 1);
	static assert(ubyte.max == 255);

	StackEntry[size_t.sizeof * 8] stack; // log2( size_t.max )
  40d02f:	48 c7 45 80 40 00 00 	movq   $0x40,-0x80(%rbp)
  40d036:	00 
  40d037:	48 8d 85 80 fb ff ff 	lea    -0x480(%rbp),%rax
  40d03e:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  40d042:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40d046:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d04a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40d04e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40d052:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40d057:	0f 95 c0             	setne  %al
  40d05a:	83 f0 01             	xor    $0x1,%eax
  40d05d:	84 c0                	test   %al,%al
  40d05f:	75 24                	jne    40d085 <_adSort+0xb0>
  40d061:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d065:	48 8b 15 94 73 00 00 	mov    0x7394(%rip),%rdx        # 414400 <_D_adSort10StackEntry6__initZ>
  40d06c:	48 89 10             	mov    %rdx,(%rax)
  40d06f:	48 8b 15 92 73 00 00 	mov    0x7392(%rip),%rdx        # 414408 <_D_adSort10StackEntry6__initZ+0x8>
  40d076:	48 89 50 08          	mov    %rdx,0x8(%rax)
  40d07a:	48 83 45 f0 10       	addq   $0x10,-0x10(%rbp)
  40d07f:	48 ff 4d f8          	decq   -0x8(%rbp)
  40d083:	eb cd                	jmp    40d052 <_adSort+0x7d>
	StackEntry * sp = stack.ptr;
  40d085:	48 8d 85 80 fb ff ff 	lea    -0x480(%rbp),%rax
  40d08c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	byte* lbound = cast(byte *) a.data;
  40d090:	48 8b 85 78 fb ff ff 	mov    -0x488(%rbp),%rax
  40d097:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	byte* rbound = cast(byte *) a.data + a.length * elem_size;
  40d09b:	48 8b 95 78 fb ff ff 	mov    -0x488(%rbp),%rdx
  40d0a2:	48 8b 85 70 fb ff ff 	mov    -0x490(%rbp),%rax
  40d0a9:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  40d0ae:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40d0b2:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40d0b6:	eb 00                	jmp    40d0b8 <_adSort+0xe3>
	byte* li = void;
	byte* ri = void;

	while (1)
  40d0b8:	b8 00 00 00 00       	mov    $0x0,%eax
  40d0bd:	84 c0                	test   %al,%al
  40d0bf:	0f 85 a8 03 00 00    	jne    40d46d <_adSort+0x498>
	{
		if (rbound - lbound > qsort_limit)
  40d0c5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d0c9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d0cd:	48 29 d0             	sub    %rdx,%rax
  40d0d0:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40d0d4:	0f 86 8c 02 00 00    	jbe    40d366 <_adSort+0x391>
		{
			ti.swap(lbound,
  40d0da:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d0e1:	48 8b 00             	mov    (%rax),%rax
  40d0e4:	48 83 c0 48          	add    $0x48,%rax
  40d0e8:	4c 8b 00             	mov    (%rax),%r8
  40d0eb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d0ef:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d0f3:	48 29 d0             	sub    %rdx,%rax
  40d0f6:	48 89 c1             	mov    %rax,%rcx
  40d0f9:	48 d1 e9             	shr    %rcx
  40d0fc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d100:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d104:	48 29 d0             	sub    %rdx,%rax
  40d107:	48 d1 e8             	shr    %rax
  40d10a:	ba 00 00 00 00       	mov    $0x0,%edx
  40d10f:	48 f7 75 e8          	divq   -0x18(%rbp)
  40d113:	48 89 d0             	mov    %rdx,%rax
  40d116:	48 89 ca             	mov    %rcx,%rdx
  40d119:	48 29 c2             	sub    %rax,%rdx
  40d11c:	48 89 d0             	mov    %rdx,%rax
  40d11f:	48 89 c2             	mov    %rax,%rdx
  40d122:	48 03 55 d0          	add    -0x30(%rbp),%rdx
  40d126:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40d12a:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d131:	41 ff d0             	callq  *%r8
				lbound + (
						  ((rbound - lbound) >>> 1) -
						  (((rbound - lbound) >>> 1) % elem_size)
						  ));

			li = lbound + elem_size;
  40d134:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d138:	48 03 45 d0          	add    -0x30(%rbp),%rax
  40d13c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
			ri = rbound - elem_size;
  40d140:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d144:	48 89 c2             	mov    %rax,%rdx
  40d147:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d14b:	48 29 d0             	sub    %rdx,%rax
  40d14e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

			if (ti.compare(li, ri) > 0)
  40d152:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d159:	48 8b 00             	mov    (%rax),%rax
  40d15c:	48 83 c0 38          	add    $0x38,%rax
  40d160:	48 8b 00             	mov    (%rax),%rax
  40d163:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d167:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40d16b:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d172:	ff d0                	callq  *%rax
  40d174:	85 c0                	test   %eax,%eax
  40d176:	7e 22                	jle    40d19a <_adSort+0x1c5>
				ti.swap(li, ri);
  40d178:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d17f:	48 8b 00             	mov    (%rax),%rax
  40d182:	48 83 c0 48          	add    $0x48,%rax
  40d186:	48 8b 00             	mov    (%rax),%rax
  40d189:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d18d:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40d191:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d198:	ff d0                	callq  *%rax
			if (ti.compare(lbound, ri) > 0)
  40d19a:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d1a1:	48 8b 00             	mov    (%rax),%rax
  40d1a4:	48 83 c0 38          	add    $0x38,%rax
  40d1a8:	48 8b 00             	mov    (%rax),%rax
  40d1ab:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d1af:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40d1b3:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d1ba:	ff d0                	callq  *%rax
  40d1bc:	85 c0                	test   %eax,%eax
  40d1be:	7e 22                	jle    40d1e2 <_adSort+0x20d>
				ti.swap(lbound, ri);
  40d1c0:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d1c7:	48 8b 00             	mov    (%rax),%rax
  40d1ca:	48 83 c0 48          	add    $0x48,%rax
  40d1ce:	48 8b 00             	mov    (%rax),%rax
  40d1d1:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d1d5:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40d1d9:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d1e0:	ff d0                	callq  *%rax
			if (ti.compare(li, lbound) > 0)
  40d1e2:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d1e9:	48 8b 00             	mov    (%rax),%rax
  40d1ec:	48 83 c0 38          	add    $0x38,%rax
  40d1f0:	48 8b 00             	mov    (%rax),%rax
  40d1f3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d1f7:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40d1fb:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d202:	ff d0                	callq  *%rax
  40d204:	85 c0                	test   %eax,%eax
  40d206:	7e 22                	jle    40d22a <_adSort+0x255>
				ti.swap(li, lbound);
  40d208:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d20f:	48 8b 00             	mov    (%rax),%rax
  40d212:	48 83 c0 48          	add    $0x48,%rax
  40d216:	48 8b 00             	mov    (%rax),%rax
  40d219:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d21d:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40d221:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d228:	ff d0                	callq  *%rax

			while (1)
  40d22a:	b8 00 00 00 00       	mov    $0x0,%eax
  40d22f:	84 c0                	test   %al,%al
  40d231:	0f 85 9f 00 00 00    	jne    40d2d6 <_adSort+0x301>
			{
				do
					li += elem_size;
  40d237:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d23b:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  40d23f:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d246:	48 8b 00             	mov    (%rax),%rax
  40d249:	48 83 c0 38          	add    $0x38,%rax
  40d24d:	48 8b 00             	mov    (%rax),%rax
  40d250:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d254:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40d258:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d25f:	ff d0                	callq  *%rax
  40d261:	c1 e8 1f             	shr    $0x1f,%eax
  40d264:	83 f0 01             	xor    $0x1,%eax
  40d267:	84 c0                	test   %al,%al
  40d269:	75 02                	jne    40d26d <_adSort+0x298>
  40d26b:	eb ca                	jmp    40d237 <_adSort+0x262>
				while (ti.compare(li, lbound) < 0);
				do
					ri -= elem_size;
  40d26d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d271:	48 29 45 b8          	sub    %rax,-0x48(%rbp)
  40d275:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d27c:	48 8b 00             	mov    (%rax),%rax
  40d27f:	48 83 c0 38          	add    $0x38,%rax
  40d283:	48 8b 00             	mov    (%rax),%rax
  40d286:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d28a:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40d28e:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d295:	ff d0                	callq  *%rax
  40d297:	85 c0                	test   %eax,%eax
  40d299:	0f 9f c0             	setg   %al
  40d29c:	83 f0 01             	xor    $0x1,%eax
  40d29f:	84 c0                	test   %al,%al
  40d2a1:	75 02                	jne    40d2a5 <_adSort+0x2d0>
  40d2a3:	eb c8                	jmp    40d26d <_adSort+0x298>
				while (ti.compare(ri, lbound) > 0);
				if (li > ri)
  40d2a5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d2a9:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  40d2ad:	77 27                	ja     40d2d6 <_adSort+0x301>
					break;
				ti.swap(li, ri);
  40d2af:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d2b6:	48 8b 00             	mov    (%rax),%rax
  40d2b9:	48 83 c0 48          	add    $0x48,%rax
  40d2bd:	48 8b 00             	mov    (%rax),%rax
  40d2c0:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d2c4:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40d2c8:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d2cf:	ff d0                	callq  *%rax
  40d2d1:	e9 54 ff ff ff       	jmpq   40d22a <_adSort+0x255>
			}
			ti.swap(lbound, ri);
  40d2d6:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d2dd:	48 8b 00             	mov    (%rax),%rax
  40d2e0:	48 83 c0 48          	add    $0x48,%rax
  40d2e4:	48 8b 00             	mov    (%rax),%rax
  40d2e7:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d2eb:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40d2ef:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d2f6:	ff d0                	callq  *%rax
			if (ri - lbound > rbound - li)
  40d2f8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d2fc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d300:	48 29 d0             	sub    %rdx,%rax
  40d303:	48 89 c1             	mov    %rax,%rcx
  40d306:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40d30a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d30e:	48 29 d0             	sub    %rdx,%rax
  40d311:	48 39 c1             	cmp    %rax,%rcx
  40d314:	7e 24                	jle    40d33a <_adSort+0x365>
			{
				sp.l = lbound;
  40d316:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40d31a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d31e:	48 89 02             	mov    %rax,(%rdx)
				sp.r = ri;
  40d321:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40d325:	48 83 c2 08          	add    $0x8,%rdx
  40d329:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d32d:	48 89 02             	mov    %rax,(%rdx)
				lbound = li;
  40d330:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d334:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40d338:	eb 22                	jmp    40d35c <_adSort+0x387>
			}
			else
			{
				sp.l = li;
  40d33a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40d33e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d342:	48 89 02             	mov    %rax,(%rdx)
				sp.r = rbound;
  40d345:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40d349:	48 83 c2 08          	add    $0x8,%rdx
  40d34d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d351:	48 89 02             	mov    %rax,(%rdx)
				rbound = ri;
  40d354:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d358:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			}
			++sp;
  40d35c:	48 83 45 d8 10       	addq   $0x10,-0x28(%rbp)
  40d361:	e9 52 fd ff ff       	jmpq   40d0b8 <_adSort+0xe3>
		} else {
			// Use insertion sort
			for (ri = lbound, li = lbound + elem_size;
  40d366:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d36a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40d36e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d372:	48 03 45 d0          	add    -0x30(%rbp),%rax
  40d376:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40d37a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d37e:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  40d382:	0f 92 c0             	setb   %al
  40d385:	83 f0 01             	xor    $0x1,%eax
  40d388:	84 c0                	test   %al,%al
  40d38a:	0f 85 87 00 00 00    	jne    40d417 <_adSort+0x442>
				 li < rbound;
				 ri = li, li += elem_size)
			{
				for ( ; ti.compare(ri, ri + elem_size) > 0;
  40d390:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d397:	48 8b 00             	mov    (%rax),%rax
  40d39a:	48 83 c0 38          	add    $0x38,%rax
  40d39e:	48 8b 08             	mov    (%rax),%rcx
  40d3a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d3a5:	48 89 c2             	mov    %rax,%rdx
  40d3a8:	48 03 55 b8          	add    -0x48(%rbp),%rdx
  40d3ac:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40d3b0:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d3b7:	ff d1                	callq  *%rcx
  40d3b9:	85 c0                	test   %eax,%eax
  40d3bb:	0f 9f c0             	setg   %al
  40d3be:	83 f0 01             	xor    $0x1,%eax
  40d3c1:	84 c0                	test   %al,%al
  40d3c3:	75 3d                	jne    40d402 <_adSort+0x42d>
					  ri -= elem_size)
				{
					ti.swap(ri, ri + elem_size);
  40d3c5:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d3cc:	48 8b 00             	mov    (%rax),%rax
  40d3cf:	48 83 c0 48          	add    $0x48,%rax
  40d3d3:	48 8b 08             	mov    (%rax),%rcx
  40d3d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d3da:	48 89 c2             	mov    %rax,%rdx
  40d3dd:	48 03 55 b8          	add    -0x48(%rbp),%rdx
  40d3e1:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40d3e5:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d3ec:	ff d1                	callq  *%rcx
					if (ri == lbound)
  40d3ee:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d3f2:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  40d3f6:	74 0a                	je     40d402 <_adSort+0x42d>
  40d3f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d3fc:	48 29 45 b8          	sub    %rax,-0x48(%rbp)
  40d400:	eb 8e                	jmp    40d390 <_adSort+0x3bb>
  40d402:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d406:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40d40a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d40e:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  40d412:	e9 63 ff ff ff       	jmpq   40d37a <_adSort+0x3a5>
						break;
				}
			}
			if (sp != stack.ptr)
  40d417:	48 8d 85 80 fb ff ff 	lea    -0x480(%rbp),%rax
  40d41e:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  40d422:	74 24                	je     40d448 <_adSort+0x473>
			{
				--sp;
  40d424:	48 83 6d d8 10       	subq   $0x10,-0x28(%rbp)
				lbound = sp.l;
  40d429:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d42d:	48 8b 00             	mov    (%rax),%rax
  40d430:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
				rbound = sp.r;
  40d434:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d438:	48 83 c0 08          	add    $0x8,%rax
  40d43c:	48 8b 00             	mov    (%rax),%rax
  40d43f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40d443:	e9 70 fc ff ff       	jmpq   40d0b8 <_adSort+0xe3>
			}
			else
				return a;
  40d448:	48 8b 85 70 fb ff ff 	mov    -0x490(%rbp),%rax
  40d44f:	48 8b 95 60 fb ff ff 	mov    -0x4a0(%rbp),%rdx
  40d456:	48 89 02             	mov    %rax,(%rdx)
  40d459:	48 8b 85 78 fb ff ff 	mov    -0x488(%rbp),%rax
  40d460:	48 8b 95 60 fb ff ff 	mov    -0x4a0(%rbp),%rdx
  40d467:	48 89 42 08          	mov    %rax,0x8(%rdx)
  40d46b:	eb 3d                	jmp    40d4aa <_adSort+0x4d5>
	byte* li = void;
	byte* ri = void;

	while (1)
	{
		if (rbound - lbound > qsort_limit)
  40d46d:	48 c7 45 90 0b 00 00 	movq   $0xb,-0x70(%rbp)
  40d474:	00 
  40d475:	48 c7 45 98 52 25 41 	movq   $0x412552,-0x68(%rbp)
  40d47c:	00 
  40d47d:	48 c7 45 a0 19 00 00 	movq   $0x19,-0x60(%rbp)
  40d484:	00 
  40d485:	48 c7 45 a8 10 44 41 	movq   $0x414410,-0x58(%rbp)
  40d48c:	00 
  40d48d:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40d491:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
  40d495:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  40d499:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40d49d:	41 b8 db 03 00 00    	mov    $0x3db,%r8d
  40d4a3:	e8 e9 d7 ff ff       	callq  40ac91 <_d_assert_msg>
			}
			else
				return a;
		}
	}
}
  40d4a8:	eb 07                	jmp    40d4b1 <_adSort+0x4dc>
  40d4aa:	48 8b 85 60 fb ff ff 	mov    -0x4a0(%rbp),%rax
  40d4b1:	c9                   	leaveq 
  40d4b2:	c3                   	retq   

000000000040d4b3 <_d_arraycast>:

void[] _d_arraycast(size_t tsize, size_t fsize, void[] a)
  40d4b3:	55                   	push   %rbp
  40d4b4:	48 89 e5             	mov    %rsp,%rbp
  40d4b7:	48 83 ec 50          	sub    $0x50,%rsp
  40d4bb:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40d4bf:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40d4c3:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40d4c7:	4c 89 c0             	mov    %r8,%rax
  40d4ca:	48 89 ca             	mov    %rcx,%rdx
  40d4cd:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  40d4d1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
{
	auto length = a.length;
  40d4d5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d4d9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto nbytes = length * fsize;
  40d4dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d4e1:	48 0f af 45 d0       	imul   -0x30(%rbp),%rax
  40d4e6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	if(nbytes % tsize != 0)
  40d4ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d4ee:	ba 00 00 00 00       	mov    $0x0,%edx
  40d4f3:	48 f7 75 d8          	divq   -0x28(%rbp)
  40d4f7:	48 89 d0             	mov    %rdx,%rax
  40d4fa:	48 85 c0             	test   %rax,%rax
  40d4fd:	74 34                	je     40d533 <_d_arraycast+0x80>
		throw new Exception("array cast misalignment");
  40d4ff:	48 c7 45 e0 17 00 00 	movq   $0x17,-0x20(%rbp)
  40d506:	00 
  40d507:	48 c7 45 e8 2a 44 41 	movq   $0x41442a,-0x18(%rbp)
  40d50e:	00 
  40d50f:	48 c7 c7 60 c4 41 00 	mov    $0x41c460,%rdi
  40d516:	e8 ae cb ff ff       	callq  40a0c9 <_d_newclass>
  40d51b:	48 89 c7             	mov    %rax,%rdi
  40d51e:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40d522:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d526:	e8 fb bb ff ff       	callq  409126 <_D6object9Exception5_ctorMFAaZC9Exception>
  40d52b:	48 89 c7             	mov    %rax,%rdi
  40d52e:	e8 4f da ff ff       	callq  40af82 <_d_throw>

	length = nbytes / tsize;
  40d533:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d537:	ba 00 00 00 00       	mov    $0x0,%edx
  40d53c:	48 f7 75 d8          	divq   -0x28(%rbp)
  40d540:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(size_t *)&a = length; // jam new length
  40d544:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  40d548:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d54c:	48 89 02             	mov    %rax,(%rdx)
	return a;
  40d54f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d553:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d557:	48 89 02             	mov    %rax,(%rdx)
  40d55a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d55e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d562:	48 89 42 08          	mov    %rax,0x8(%rdx)
}
  40d566:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d56a:	c9                   	leaveq 
  40d56b:	c3                   	retq   

000000000040d56c <_d_arraycopy>:

byte[] _d_arraycopy(size_t size, byte[] from, byte[] to)
  40d56c:	55                   	push   %rbp
  40d56d:	48 89 e5             	mov    %rsp,%rbp
  40d570:	48 83 ec 50          	sub    $0x50,%rsp
  40d574:	48 89 7d b0          	mov    %rdi,-0x50(%rbp)
  40d578:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40d57c:	4c 89 c6             	mov    %r8,%rsi
  40d57f:	4c 89 cf             	mov    %r9,%rdi
  40d582:	48 89 d0             	mov    %rdx,%rax
  40d585:	48 89 ca             	mov    %rcx,%rdx
  40d588:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40d58c:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40d590:	48 89 f0             	mov    %rsi,%rax
  40d593:	48 89 fa             	mov    %rdi,%rdx
  40d596:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40d59a:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
{
	if(to.length != from.length)
  40d59e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d5a2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d5a6:	48 39 c2             	cmp    %rax,%rdx
  40d5a9:	74 39                	je     40d5e4 <_d_arraycopy+0x78>
		throw new Exception("lengths don't match for array copy");
  40d5ab:	48 c7 45 e0 22 00 00 	movq   $0x22,-0x20(%rbp)
  40d5b2:	00 
  40d5b3:	48 c7 45 e8 48 44 41 	movq   $0x414448,-0x18(%rbp)
  40d5ba:	00 
  40d5bb:	48 c7 c7 60 c4 41 00 	mov    $0x41c460,%rdi
  40d5c2:	e8 02 cb ff ff       	callq  40a0c9 <_d_newclass>
  40d5c7:	48 89 c7             	mov    %rax,%rdi
  40d5ca:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40d5ce:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d5d2:	e8 4f bb ff ff       	callq  409126 <_D6object9Exception5_ctorMFAaZC9Exception>
  40d5d7:	48 89 c7             	mov    %rax,%rdi
  40d5da:	e8 a3 d9 ff ff       	callq  40af82 <_d_throw>
  40d5df:	e9 81 00 00 00       	jmpq   40d665 <_d_arraycopy+0xf9>
	else if(cast(byte *)to + to.length * size <= cast(byte *)from || cast(byte *)from + from.length * size <= cast(byte *)to)
  40d5e4:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40d5e8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d5ec:	48 0f af 45 d8       	imul   -0x28(%rbp),%rax
  40d5f1:	48 01 c2             	add    %rax,%rdx
  40d5f4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d5f8:	48 39 c2             	cmp    %rax,%rdx
  40d5fb:	76 19                	jbe    40d616 <_d_arraycopy+0xaa>
  40d5fd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d601:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d605:	48 0f af 45 d8       	imul   -0x28(%rbp),%rax
  40d60a:	48 01 c2             	add    %rax,%rdx
  40d60d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d611:	48 39 c2             	cmp    %rax,%rdx
  40d614:	77 1b                	ja     40d631 <_d_arraycopy+0xc5>
		memcpy(cast(byte *)to, cast(byte *)from, to.length * size);
  40d616:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d61a:	48 89 c2             	mov    %rax,%rdx
  40d61d:	48 0f af 55 d8       	imul   -0x28(%rbp),%rdx
  40d622:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40d626:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40d62a:	e8 55 00 00 00       	callq  40d684 <memcpy>

byte[] _d_arraycopy(size_t size, byte[] from, byte[] to)
{
	if(to.length != from.length)
		throw new Exception("lengths don't match for array copy");
	else if(cast(byte *)to + to.length * size <= cast(byte *)from || cast(byte *)from + from.length * size <= cast(byte *)to)
  40d62f:	eb 34                	jmp    40d665 <_d_arraycopy+0xf9>
		memcpy(cast(byte *)to, cast(byte *)from, to.length * size);
	else
		throw new Exception("overlapping array copy");
  40d631:	48 c7 45 f0 16 00 00 	movq   $0x16,-0x10(%rbp)
  40d638:	00 
  40d639:	48 c7 45 f8 6b 44 41 	movq   $0x41446b,-0x8(%rbp)
  40d640:	00 
  40d641:	48 c7 c7 60 c4 41 00 	mov    $0x41c460,%rdi
  40d648:	e8 7c ca ff ff       	callq  40a0c9 <_d_newclass>
  40d64d:	48 89 c7             	mov    %rax,%rdi
  40d650:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  40d654:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40d658:	e8 c9 ba ff ff       	callq  409126 <_D6object9Exception5_ctorMFAaZC9Exception>
  40d65d:	48 89 c7             	mov    %rax,%rdi
  40d660:	e8 1d d9 ff ff       	callq  40af82 <_d_throw>

	return to;
  40d665:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d669:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40d66d:	48 89 02             	mov    %rax,(%rdx)
  40d670:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d674:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40d678:	48 89 42 08          	mov    %rax,0x8(%rdx)
}
  40d67c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40d680:	c9                   	leaveq 
  40d681:	c3                   	retq   
  40d682:	90                   	nop    
  40d683:	90                   	nop    

000000000040d684 <memcpy>:
		dest = A pointer to the piece of memory serving as the copy destination.
		src = A pointer to the piece of memory serving as the copy source.
		count = The number of bytes to copy form src to dest.
	Returns: A void pointer to the start of the destination data (dest).
*/
extern(C) void* memcpy(void* dest, void* src, size_t count)
  40d684:	55                   	push   %rbp
  40d685:	48 89 e5             	mov    %rsp,%rbp
  40d688:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d68c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40d690:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
{
	ubyte* d = cast(ubyte*)dest;
  40d694:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d698:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	ubyte* s = cast(ubyte*)src;
  40d69c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d6a0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	for(size_t i = count; count; count--, d++, s++)
  40d6a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d6a8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d6ac:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  40d6b1:	0f 95 c0             	setne  %al
  40d6b4:	83 f0 01             	xor    $0x1,%eax
  40d6b7:	84 c0                	test   %al,%al
  40d6b9:	75 25                	jne    40d6e0 <memcpy+0x5c>
		*d = *s;
  40d6bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d6bf:	0f b6 10             	movzbl (%rax),%edx
  40d6c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d6c6:	88 10                	mov    %dl,(%rax)
  40d6c8:	48 ff 4d c8          	decq   -0x38(%rbp)
  40d6cc:	b8 01 00 00 00       	mov    $0x1,%eax
  40d6d1:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  40d6d5:	b8 01 00 00 00       	mov    $0x1,%eax
  40d6da:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  40d6de:	eb cc                	jmp    40d6ac <memcpy+0x28>

	return dest;
  40d6e0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
  40d6e4:	c9                   	leaveq 
  40d6e5:	c3                   	retq   

000000000040d6e6 <memmove>:

/**
Memcpy and memmove only really have differences at the user level, where they have slightly
different semantics.  Here, they're pretty much the same.
*/
extern(C) void* memmove(void* dest, void* src, size_t count)
  40d6e6:	55                   	push   %rbp
  40d6e7:	48 89 e5             	mov    %rsp,%rbp
  40d6ea:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d6ee:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40d6f2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
{
	ubyte* d = cast(ubyte*)dest;
  40d6f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d6fa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	ubyte* s = cast(ubyte*)src;
  40d6fe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d702:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	for(size_t i = count; count; count--, d++, s++)
  40d706:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d70a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d70e:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  40d713:	0f 95 c0             	setne  %al
  40d716:	83 f0 01             	xor    $0x1,%eax
  40d719:	84 c0                	test   %al,%al
  40d71b:	75 25                	jne    40d742 <memmove+0x5c>
	  *d = *s;
  40d71d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d721:	0f b6 10             	movzbl (%rax),%edx
  40d724:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d728:	88 10                	mov    %dl,(%rax)
  40d72a:	48 ff 4d c8          	decq   -0x38(%rbp)
  40d72e:	b8 01 00 00 00       	mov    $0x1,%eax
  40d733:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  40d737:	b8 01 00 00 00       	mov    $0x1,%eax
  40d73c:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  40d740:	eb cc                	jmp    40d70e <memmove+0x28>

	return dest;
  40d742:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
  40d746:	c9                   	leaveq 
  40d747:	c3                   	retq   

000000000040d748 <_D6kernel4core6system6memcmpFPvPvmZl>:
	n = The number of bytes to compare.

Returns:
	 0 if they are equal, < 0 if a is less than b, and > 0 if a is greater than b.
*/
long memcmp(void* a, void* b, size_t n)
  40d748:	55                   	push   %rbp
  40d749:	48 89 e5             	mov    %rsp,%rbp
  40d74c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d750:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40d754:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
{
	ubyte* str_a = cast(ubyte*)a;
  40d758:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d75c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	ubyte* str_b = cast(ubyte*)b;
  40d760:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d764:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	for(size_t i = 0; i < n; i++)
  40d768:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40d76f:	00 
  40d770:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d774:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  40d778:	0f 92 c0             	setb   %al
  40d77b:	83 f0 01             	xor    $0x1,%eax
  40d77e:	84 c0                	test   %al,%al
  40d780:	75 48                	jne    40d7ca <_D6kernel4core6system6memcmpFPvPvmZl+0x82>
	{
		if(*str_a != *str_b)
  40d782:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d786:	0f b6 00             	movzbl (%rax),%eax
  40d789:	0f b6 d0             	movzbl %al,%edx
  40d78c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d790:	0f b6 00             	movzbl (%rax),%eax
  40d793:	0f b6 c0             	movzbl %al,%eax
  40d796:	39 c2                	cmp    %eax,%edx
  40d798:	74 22                	je     40d7bc <_D6kernel4core6system6memcmpFPvPvmZl+0x74>
			return *str_a - *str_b;
  40d79a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d79e:	0f b6 00             	movzbl (%rax),%eax
  40d7a1:	0f b6 d0             	movzbl %al,%edx
  40d7a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d7a8:	0f b6 00             	movzbl (%rax),%eax
  40d7ab:	0f b6 c0             	movzbl %al,%eax
  40d7ae:	89 d1                	mov    %edx,%ecx
  40d7b0:	29 c1                	sub    %eax,%ecx
  40d7b2:	89 c8                	mov    %ecx,%eax
  40d7b4:	48 98                	cltq   
  40d7b6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40d7ba:	eb 16                	jmp    40d7d2 <_D6kernel4core6system6memcmpFPvPvmZl+0x8a>

		str_a++;
  40d7bc:	48 ff 45 f0          	incq   -0x10(%rbp)
		str_b++;
  40d7c0:	48 ff 45 e8          	incq   -0x18(%rbp)
  40d7c4:	48 ff 45 f8          	incq   -0x8(%rbp)
  40d7c8:	eb a6                	jmp    40d770 <_D6kernel4core6system6memcmpFPvPvmZl+0x28>
	}
	
	return 0;
  40d7ca:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  40d7d1:	00 
  40d7d2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
}
  40d7d6:	c9                   	leaveq 
  40d7d7:	c3                   	retq   

000000000040d7d8 <_D6kernel4core6system6memsetFPvhkZv>:
	Params:
		addr = The address of the piece of memory you wish to write.
		val = The value you wish to write to memory.
		numBytes = The number of bytes you would like to write to memory.
*/
void memset(void *addr, ubyte val, uint numBytes){
  40d7d8:	55                   	push   %rbp
  40d7d9:	48 89 e5             	mov    %rsp,%rbp
  40d7dc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40d7e0:	40 88 75 e7          	mov    %sil,-0x19(%rbp)
  40d7e4:	89 55 e0             	mov    %edx,-0x20(%rbp)
     ubyte *data = cast(ubyte*) addr;
  40d7e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d7eb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

     for(int i = 0; i < numBytes; i++){
  40d7ef:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40d7f6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40d7f9:	3b 45 e0             	cmp    -0x20(%rbp),%eax
  40d7fc:	0f 92 c0             	setb   %al
  40d7ff:	83 f0 01             	xor    $0x1,%eax
  40d802:	84 c0                	test   %al,%al
  40d804:	75 17                	jne    40d81d <_D6kernel4core6system6memsetFPvhkZv+0x45>
          data[i] = val;
  40d806:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40d809:	48 98                	cltq   
  40d80b:	48 89 c2             	mov    %rax,%rdx
  40d80e:	48 03 55 f0          	add    -0x10(%rbp),%rdx
  40d812:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  40d816:	88 02                	mov    %al,(%rdx)
  40d818:	ff 45 fc             	incl   -0x4(%rbp)
  40d81b:	eb d9                	jmp    40d7f6 <_D6kernel4core6system6memsetFPvhkZv+0x1e>
     }
}
  40d81d:	c9                   	leaveq 
  40d81e:	c3                   	retq   

000000000040d81f <_D6kernel4core6system6strlenFPaZm>:
This function determines the size of a passed-in string.
	Params: 
		s = A pointer to the beginning of a character array, declaring a string.
	Returns: The size of the string in size_t format.
*/
size_t strlen(char* s)
  40d81f:	55                   	push   %rbp
  40d820:	48 89 e5             	mov    %rsp,%rbp
  40d823:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
{
	size_t i = 0;
  40d827:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40d82e:	00 
	for( ; *s != 0; i++, s++){}
  40d82f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d833:	0f b6 00             	movzbl (%rax),%eax
  40d836:	0f b6 c0             	movzbl %al,%eax
  40d839:	85 c0                	test   %eax,%eax
  40d83b:	0f 95 c0             	setne  %al
  40d83e:	83 f0 01             	xor    $0x1,%eax
  40d841:	84 c0                	test   %al,%al
  40d843:	75 0f                	jne    40d854 <_D6kernel4core6system6strlenFPaZm+0x35>
  40d845:	48 ff 45 f8          	incq   -0x8(%rbp)
  40d849:	b8 01 00 00 00       	mov    $0x1,%eax
  40d84e:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  40d852:	eb db                	jmp    40d82f <_D6kernel4core6system6strlenFPaZm+0x10>
	return i;
  40d854:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  40d858:	c9                   	leaveq 
  40d859:	c3                   	retq   

000000000040d85a <_D6kernel4core6system8toStringFPaZAa>:
This function takes in a character pointer and returns a character array, or a string.
	Params:
		s = A pointer to the character(s) you wish to translate to a string.
	Returns: A character array (string) containing the information.
*/
char[] toString(char* s)
  40d85a:	55                   	push   %rbp
  40d85b:	48 89 e5             	mov    %rsp,%rbp
  40d85e:	53                   	push   %rbx
  40d85f:	48 83 ec 08          	sub    $0x8,%rsp
  40d863:	48 89 fb             	mov    %rdi,%rbx
  40d866:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
{
	return s[0 .. strlen(s)];
  40d86a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40d86e:	e8 ac ff ff ff       	callq  40d81f <_D6kernel4core6system6strlenFPaZm>
  40d873:	48 89 03             	mov    %rax,(%rbx)
  40d876:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d87a:	48 89 43 08          	mov    %rax,0x8(%rbx)
}
  40d87e:	48 89 d8             	mov    %rbx,%rax
  40d881:	48 83 c4 08          	add    $0x8,%rsp
  40d885:	5b                   	pop    %rbx
  40d886:	c9                   	leaveq 
  40d887:	c3                   	retq   

000000000040d888 <_D6kernel4core6system5isnanFeZi>:
	Params:
		e = The value / piece of information you would like to check for number status.
	Returns: 
		0 if it isn't a NaN, non-zero if it is.
*/
int isnan(real e)
  40d888:	55                   	push   %rbp
  40d889:	48 89 e5             	mov    %rsp,%rbp
{
    ushort* pe = cast(ushort *)&e;
  40d88c:	48 8d 45 10          	lea    0x10(%rbp),%rax
  40d890:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    ulong*  ps = cast(ulong *)&e;
  40d894:	48 8d 45 10          	lea    0x10(%rbp),%rax
  40d898:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    return (pe[4] & 0x7FFF) == 0x7FFF &&
  40d89c:	b8 08 00 00 00       	mov    $0x8,%eax
  40d8a1:	48 03 45 f8          	add    -0x8(%rbp),%rax
  40d8a5:	0f b7 00             	movzwl (%rax),%eax
  40d8a8:	0f b7 c0             	movzwl %ax,%eax
  40d8ab:	25 ff 7f 00 00       	and    $0x7fff,%eax
  40d8b0:	3d ff 7f 00 00       	cmp    $0x7fff,%eax
  40d8b5:	75 1f                	jne    40d8d6 <_D6kernel4core6system5isnanFeZi+0x4e>
  40d8b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d8bb:	48 8b 10             	mov    (%rax),%rdx
  40d8be:	48 b8 ff ff ff ff ff 	mov    $0x7fffffffffffffff,%rax
  40d8c5:	ff ff 7f 
  40d8c8:	48 21 d0             	and    %rdx,%rax
  40d8cb:	48 85 c0             	test   %rax,%rax
  40d8ce:	74 06                	je     40d8d6 <_D6kernel4core6system5isnanFeZi+0x4e>
  40d8d0:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  40d8d4:	eb 04                	jmp    40d8da <_D6kernel4core6system5isnanFeZi+0x52>
  40d8d6:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  40d8da:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
	    *ps & 0x7FFFFFFFFFFFFFFF;
}
  40d8de:	c9                   	leaveq 
  40d8df:	c3                   	retq   

000000000040d8e0 <_D4user7syscall3addFllZl>:
  40d8e0:	55                   	push   %rbp
  40d8e1:	48 89 e5             	mov    %rsp,%rbp
  40d8e4:	48 83 ec 50          	sub    $0x50,%rsp
  40d8e8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40d8ec:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  40d8f0:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  40d8f7:	00 
  40d8f8:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  40d8ff:	00 
  40d900:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40d907:	00 
  40d908:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d90c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40d910:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d914:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40d918:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40d91c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d920:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d924:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40d928:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  40d92c:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
  40d930:	bf 00 00 00 00       	mov    $0x0,%edi
  40d935:	e8 fa 05 00 00       	callq  40df34 <nativeSyscall>
  40d93a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40d93e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d942:	c9                   	leaveq 
  40d943:	c3                   	retq   

000000000040d944 <_D4user7syscall9allocPageFZPv>:
  40d944:	55                   	push   %rbp
  40d945:	48 89 e5             	mov    %rsp,%rbp
  40d948:	48 83 ec 20          	sub    $0x20,%rsp
  40d94c:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40d953:	00 
  40d954:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  40d958:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  40d95c:	bf 01 00 00 00       	mov    $0x1,%edi
  40d961:	e8 ce 05 00 00       	callq  40df34 <nativeSyscall>
  40d966:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d96a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d96e:	c9                   	leaveq 
  40d96f:	c3                   	retq   

000000000040d970 <_D4user7syscall4exitFlZv>:
  40d970:	55                   	push   %rbp
  40d971:	48 89 e5             	mov    %rsp,%rbp
  40d974:	48 83 ec 40          	sub    $0x40,%rsp
  40d978:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40d97c:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40d983:	00 
  40d984:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40d98b:	00 
  40d98c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d990:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d994:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d998:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40d99c:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  40d9a0:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  40d9a4:	bf 02 00 00 00       	mov    $0x2,%edi
  40d9a9:	e8 86 05 00 00       	callq  40df34 <nativeSyscall>
  40d9ae:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40d9b2:	c9                   	leaveq 
  40d9b3:	c3                   	retq   

000000000040d9b4 <_D4user7syscall8freePageFZv>:
  40d9b4:	55                   	push   %rbp
  40d9b5:	48 89 e5             	mov    %rsp,%rbp
  40d9b8:	48 83 ec 20          	sub    $0x20,%rsp
  40d9bc:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40d9c3:	00 
  40d9c4:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  40d9c8:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  40d9cc:	bf 03 00 00 00       	mov    $0x3,%edi
  40d9d1:	e8 5e 05 00 00       	callq  40df34 <nativeSyscall>
  40d9d6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d9da:	c9                   	leaveq 
  40d9db:	c3                   	retq   

000000000040d9dc <_D4user7syscall5yieldFZv>:
  40d9dc:	55                   	push   %rbp
  40d9dd:	48 89 e5             	mov    %rsp,%rbp
  40d9e0:	48 83 ec 20          	sub    $0x20,%rsp
  40d9e4:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40d9eb:	00 
  40d9ec:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  40d9f0:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  40d9f4:	bf 04 00 00 00       	mov    $0x4,%edi
  40d9f9:	e8 36 05 00 00       	callq  40df34 <nativeSyscall>
  40d9fe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40da02:	c9                   	leaveq 
  40da03:	c3                   	retq   

000000000040da04 <_D4user7syscall5errorFAaZv>:
  40da04:	55                   	push   %rbp
  40da05:	48 89 e5             	mov    %rsp,%rbp
  40da08:	48 83 ec 50          	sub    $0x50,%rsp
  40da0c:	48 89 f8             	mov    %rdi,%rax
  40da0f:	48 89 f2             	mov    %rsi,%rdx
  40da12:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40da16:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  40da1a:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40da21:	00 
  40da22:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40da29:	00 
  40da2a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40da31:	00 
  40da32:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40da36:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40da3a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40da3e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40da42:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40da46:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40da4a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40da4e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40da52:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  40da56:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  40da5a:	bf 05 00 00 00       	mov    $0x5,%edi
  40da5f:	e8 d0 04 00 00       	callq  40df34 <nativeSyscall>
  40da64:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40da68:	c9                   	leaveq 
  40da69:	c3                   	retq   

000000000040da6a <_D4user7syscall10depositKeyFsZv>:
  40da6a:	55                   	push   %rbp
  40da6b:	48 89 e5             	mov    %rsp,%rbp
  40da6e:	48 83 ec 40          	sub    $0x40,%rsp
  40da72:	66 89 7d ce          	mov    %di,-0x32(%rbp)
  40da76:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40da7d:	00 
  40da7e:	66 c7 45 e0 00 00    	movw   $0x0,-0x20(%rbp)
  40da84:	0f b7 45 ce          	movzwl -0x32(%rbp),%eax
  40da88:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
  40da8c:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  40da90:	66 89 45 e0          	mov    %ax,-0x20(%rbp)
  40da94:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  40da98:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  40da9c:	bf 06 00 00 00       	mov    $0x6,%edi
  40daa1:	e8 8e 04 00 00       	callq  40df34 <nativeSyscall>
  40daa6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40daaa:	c9                   	leaveq 
  40daab:	c3                   	retq   

000000000040daac <_D4user7syscall12initKeyboardFZS4user7syscall12KeyboardInfo>:
  40daac:	55                   	push   %rbp
  40daad:	48 89 e5             	mov    %rsp,%rbp
  40dab0:	53                   	push   %rbx
  40dab1:	48 83 ec 38          	sub    $0x38,%rsp
  40dab5:	48 89 fb             	mov    %rdi,%rbx
  40dab8:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  40dabf:	00 
  40dac0:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  40dac7:	00 
  40dac8:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  40dacf:	00 
  40dad0:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40dad7:	00 
  40dad8:	48 8d 55 e7          	lea    -0x19(%rbp),%rdx
  40dadc:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  40dae0:	bf 07 00 00 00       	mov    $0x7,%edi
  40dae5:	e8 4a 04 00 00       	callq  40df34 <nativeSyscall>
  40daea:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40daee:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40daf2:	48 89 03             	mov    %rax,(%rbx)
  40daf5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40daf9:	48 89 43 08          	mov    %rax,0x8(%rbx)
  40dafd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40db01:	48 89 43 10          	mov    %rax,0x10(%rbx)
  40db05:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40db09:	48 89 43 18          	mov    %rax,0x18(%rbx)
  40db0d:	48 89 d8             	mov    %rbx,%rax
  40db10:	48 83 c4 38          	add    $0x38,%rsp
  40db14:	5b                   	pop    %rbx
  40db15:	c9                   	leaveq 
  40db16:	c3                   	retq   

000000000040db17 <_D4user7syscall11initConsoleFZS4user7syscall11ConsoleInfo>:
  40db17:	55                   	push   %rbp
  40db18:	48 89 e5             	mov    %rsp,%rbp
  40db1b:	53                   	push   %rbx
  40db1c:	48 83 ec 38          	sub    $0x38,%rsp
  40db20:	48 89 fb             	mov    %rdi,%rbx
  40db23:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  40db2a:	00 
  40db2b:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  40db32:	00 
  40db33:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  40db3a:	00 
  40db3b:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40db42:	00 
  40db43:	48 8d 55 e7          	lea    -0x19(%rbp),%rdx
  40db47:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  40db4b:	bf 08 00 00 00       	mov    $0x8,%edi
  40db50:	e8 df 03 00 00       	callq  40df34 <nativeSyscall>
  40db55:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40db59:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40db5d:	48 89 03             	mov    %rax,(%rbx)
  40db60:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40db64:	48 89 43 08          	mov    %rax,0x8(%rbx)
  40db68:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40db6c:	48 89 43 10          	mov    %rax,0x10(%rbx)
  40db70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40db74:	48 89 43 18          	mov    %rax,0x18(%rbx)
  40db78:	48 89 d8             	mov    %rbx,%rax
  40db7b:	48 83 c4 38          	add    $0x38,%rsp
  40db7f:	5b                   	pop    %rbx
  40db80:	c9                   	leaveq 
  40db81:	c3                   	retq   

000000000040db82 <_D4user7syscall15makeEnvironmentFiZv>:
  40db82:	55                   	push   %rbp
  40db83:	48 89 e5             	mov    %rsp,%rbp
  40db86:	48 83 ec 40          	sub    $0x40,%rsp
  40db8a:	89 7d cc             	mov    %edi,-0x34(%rbp)
  40db8d:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40db94:	00 
  40db95:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  40db9c:	8b 45 cc             	mov    -0x34(%rbp),%eax
  40db9f:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40dba2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40dba5:	89 45 e0             	mov    %eax,-0x20(%rbp)
  40dba8:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  40dbac:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  40dbb0:	bf 09 00 00 00       	mov    $0x9,%edi
  40dbb5:	e8 7a 03 00 00       	callq  40df34 <nativeSyscall>
  40dbba:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40dbbe:	c9                   	leaveq 
  40dbbf:	c3                   	retq   

000000000040dbc0 <_D4user7syscall4forkFZi>:
  40dbc0:	55                   	push   %rbp
  40dbc1:	48 89 e5             	mov    %rsp,%rbp
  40dbc4:	48 83 ec 10          	sub    $0x10,%rsp
  40dbc8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  40dbcf:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  40dbd3:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  40dbd7:	bf 0a 00 00 00       	mov    $0xa,%edi
  40dbdc:	e8 53 03 00 00       	callq  40df34 <nativeSyscall>
  40dbe1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40dbe5:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40dbe8:	c9                   	leaveq 
  40dbe9:	c3                   	retq   

000000000040dbea <_D4user7syscall4execFZi>:
  40dbea:	55                   	push   %rbp
  40dbeb:	48 89 e5             	mov    %rsp,%rbp
  40dbee:	48 83 ec 10          	sub    $0x10,%rsp
  40dbf2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  40dbf9:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  40dbfd:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  40dc01:	bf 0b 00 00 00       	mov    $0xb,%edi
  40dc06:	e8 29 03 00 00       	callq  40df34 <nativeSyscall>
  40dc0b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40dc0f:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40dc12:	c9                   	leaveq 
  40dc13:	c3                   	retq   

000000000040dc14 <_D6kernel4core4util10CHECK_FLAGFkkZk>:
	Params:
		flags = The flags from the multiboot header the kernel wishes to check.
		bit = The number of the bit the kernel would like to check for data.
	Returns: Whether the bit "bit" in "flags" has a value (1 if it is set, 0 if it is not)
*/
uint CHECK_FLAG(uint flags, uint bit)
  40dc14:	55                   	push   %rbp
  40dc15:	48 89 e5             	mov    %rsp,%rbp
  40dc18:	89 7d fc             	mov    %edi,-0x4(%rbp)
  40dc1b:	89 75 f8             	mov    %esi,-0x8(%rbp)
{
	return ((flags) & (1 << (bit)));
  40dc1e:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  40dc21:	b8 01 00 00 00       	mov    $0x1,%eax
  40dc26:	d3 e0                	shl    %cl,%eax
  40dc28:	23 45 fc             	and    -0x4(%rbp),%eax
}
  40dc2b:	c9                   	leaveq 
  40dc2c:	c3                   	retq   

000000000040dc2d <_D6kernel4core4util4itoaFAaalZAa>:
		base = The base of the integer value. If "d," it will be assumed to be decimal. If "x," the integer
			will be hexadecimal.
		d = The integer to translate.
	Returns: The translated string in a character array.
*/
char[] itoa(char[] buf, char base, long d)
  40dc2d:	55                   	push   %rbp
  40dc2e:	48 89 e5             	mov    %rsp,%rbp
  40dc31:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  40dc38:	48 89 bd f0 fe ff ff 	mov    %rdi,-0x110(%rbp)
  40dc3f:	88 8d 6f ff ff ff    	mov    %cl,-0x91(%rbp)
  40dc45:	4c 89 85 60 ff ff ff 	mov    %r8,-0xa0(%rbp)
  40dc4c:	48 89 f0             	mov    %rsi,%rax
  40dc4f:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  40dc56:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
{
	size_t p = buf.length - 1;
  40dc5d:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40dc64:	48 ff c8             	dec    %rax
  40dc67:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	size_t startIdx = 0;
  40dc6b:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40dc72:	00 
	ulong ud = d;
  40dc73:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40dc7a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	bool negative = false;
  40dc7e:	c6 45 d7 00          	movb   $0x0,-0x29(%rbp)

	int divisor = 10;
  40dc82:	c7 45 d0 0a 00 00 00 	movl   $0xa,-0x30(%rbp)

	// If %d is specified and D is minus, put `-' in the head.
	if(base == 'd' && d < 0)
  40dc89:	0f b6 85 6f ff ff ff 	movzbl -0x91(%rbp),%eax
  40dc90:	83 f8 64             	cmp    $0x64,%eax
  40dc93:	75 1e                	jne    40dcb3 <_D6kernel4core4util4itoaFAaalZAa+0x86>
  40dc95:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  40dc9c:	00 
  40dc9d:	79 14                	jns    40dcb3 <_D6kernel4core4util4itoaFAaalZAa+0x86>
	{
		negative = true;
  40dc9f:	c6 45 d7 01          	movb   $0x1,-0x29(%rbp)
		ud = -d;
  40dca3:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40dcaa:	48 f7 d8             	neg    %rax
  40dcad:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	bool negative = false;

	int divisor = 10;

	// If %d is specified and D is minus, put `-' in the head.
	if(base == 'd' && d < 0)
  40dcb1:	eb 13                	jmp    40dcc6 <_D6kernel4core4util4itoaFAaalZAa+0x99>
	{
		negative = true;
		ud = -d;
	}
	else if(base == 'x')
  40dcb3:	0f b6 85 6f ff ff ff 	movzbl -0x91(%rbp),%eax
  40dcba:	83 f8 78             	cmp    $0x78,%eax
  40dcbd:	75 07                	jne    40dcc6 <_D6kernel4core4util4itoaFAaalZAa+0x99>
		divisor = 16;
  40dcbf:	c7 45 d0 10 00 00 00 	movl   $0x10,-0x30(%rbp)

	// Divide UD by DIVISOR until UD == 0.
	do
	{
		int remainder = ud % divisor;
  40dcc6:	8b 45 d0             	mov    -0x30(%rbp),%eax
  40dcc9:	48 63 d0             	movslq %eax,%rdx
  40dccc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40dcd0:	48 89 d1             	mov    %rdx,%rcx
  40dcd3:	ba 00 00 00 00       	mov    $0x0,%edx
  40dcd8:	48 f7 f1             	div    %rcx
  40dcdb:	48 89 d0             	mov    %rdx,%rax
  40dcde:	89 45 f4             	mov    %eax,-0xc(%rbp)
		buf[p--] = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
  40dce1:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40dce8:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
  40dcef:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40dcf3:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  40dcfa:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40dd01:	48 39 85 08 ff ff ff 	cmp    %rax,-0xf8(%rbp)
  40dd08:	0f 92 c0             	setb   %al
  40dd0b:	48 ff 4d e8          	decq   -0x18(%rbp)
  40dd0f:	84 c0                	test   %al,%al
  40dd11:	74 10                	je     40dd23 <_D6kernel4core4util4itoaFAaalZAa+0xf6>
  40dd13:	48 8b 8d 08 ff ff ff 	mov    -0xf8(%rbp),%rcx
  40dd1a:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  40dd21:	eb 22                	jmp    40dd45 <_D6kernel4core4util4itoaFAaalZAa+0x118>
  40dd23:	48 c7 45 80 12 00 00 	movq   $0x12,-0x80(%rbp)
  40dd2a:	00 
  40dd2b:	48 c7 45 88 6a 45 41 	movq   $0x41456a,-0x78(%rbp)
  40dd32:	00 
  40dd33:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  40dd37:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  40dd3b:	ba 77 01 00 00       	mov    $0x177,%edx
  40dd40:	e8 94 cf ff ff       	callq  40acd9 <_d_array_bounds>
  40dd45:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40dd4c:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  40dd53:	48 01 c2             	add    %rax,%rdx
  40dd56:	48 89 95 10 ff ff ff 	mov    %rdx,-0xf0(%rbp)
  40dd5d:	83 7d f4 0a          	cmpl   $0xa,-0xc(%rbp)
  40dd61:	7d 0e                	jge    40dd71 <_D6kernel4core4util4itoaFAaalZAa+0x144>
  40dd63:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40dd66:	83 c0 30             	add    $0x30,%eax
  40dd69:	88 85 1f ff ff ff    	mov    %al,-0xe1(%rbp)
  40dd6f:	eb 0c                	jmp    40dd7d <_D6kernel4core4util4itoaFAaalZAa+0x150>
  40dd71:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40dd74:	83 c0 57             	add    $0x57,%eax
  40dd77:	88 85 1f ff ff ff    	mov    %al,-0xe1(%rbp)
  40dd7d:	0f b6 8d 1f ff ff ff 	movzbl -0xe1(%rbp),%ecx
  40dd84:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40dd8b:	88 08                	mov    %cl,(%rax)
  40dd8d:	8b 45 d0             	mov    -0x30(%rbp),%eax
  40dd90:	48 63 d0             	movslq %eax,%rdx
  40dd93:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40dd97:	48 89 d1             	mov    %rdx,%rcx
  40dd9a:	ba 00 00 00 00       	mov    $0x0,%edx
  40dd9f:	48 f7 f1             	div    %rcx
  40dda2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40dda6:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  40ddab:	0f 95 c0             	setne  %al
  40ddae:	83 f0 01             	xor    $0x1,%eax
  40ddb1:	84 c0                	test   %al,%al
  40ddb3:	75 05                	jne    40ddba <_D6kernel4core4util4itoaFAaalZAa+0x18d>
  40ddb5:	e9 0c ff ff ff       	jmpq   40dcc6 <_D6kernel4core4util4itoaFAaalZAa+0x99>
	}
	while (ud /= divisor)

	if(negative)
  40ddba:	80 7d d7 00          	cmpb   $0x0,-0x29(%rbp)
  40ddbe:	74 75                	je     40de35 <_D6kernel4core4util4itoaFAaalZAa+0x208>
		buf[p--] = '-';
  40ddc0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40ddc7:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  40ddce:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ddd2:	48 89 95 30 ff ff ff 	mov    %rdx,-0xd0(%rbp)
  40ddd9:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40dde0:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
  40dde7:	0f 92 c0             	setb   %al
  40ddea:	48 ff 4d e8          	decq   -0x18(%rbp)
  40ddee:	84 c0                	test   %al,%al
  40ddf0:	74 10                	je     40de02 <_D6kernel4core4util4itoaFAaalZAa+0x1d5>
  40ddf2:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
  40ddf9:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
  40de00:	eb 22                	jmp    40de24 <_D6kernel4core4util4itoaFAaalZAa+0x1f7>
  40de02:	48 c7 45 90 12 00 00 	movq   $0x12,-0x70(%rbp)
  40de09:	00 
  40de0a:	48 c7 45 98 6a 45 41 	movq   $0x41456a,-0x68(%rbp)
  40de11:	00 
  40de12:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  40de16:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  40de1a:	ba 7c 01 00 00       	mov    $0x17c,%edx
  40de1f:	e8 b5 ce ff ff       	callq  40acd9 <_d_array_bounds>
  40de24:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40de2b:	48 03 85 20 ff ff ff 	add    -0xe0(%rbp),%rax
  40de32:	c6 00 2d             	movb   $0x2d,(%rax)

	return buf[p + 1 .. $];
  40de35:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40de3c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40de40:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40de47:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  40de4b:	77 0d                	ja     40de5a <_D6kernel4core4util4itoaFAaalZAa+0x22d>
  40de4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40de51:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  40de58:	eb 22                	jmp    40de7c <_D6kernel4core4util4itoaFAaalZAa+0x24f>
  40de5a:	48 c7 45 b0 12 00 00 	movq   $0x12,-0x50(%rbp)
  40de61:	00 
  40de62:	48 c7 45 b8 6a 45 41 	movq   $0x41456a,-0x48(%rbp)
  40de69:	00 
  40de6a:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  40de6e:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40de72:	ba 7e 01 00 00       	mov    $0x17e,%edx
  40de77:	e8 5d ce ff ff       	callq  40acd9 <_d_array_bounds>
  40de7c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40de80:	48 ff c2             	inc    %rdx
  40de83:	48 89 95 40 ff ff ff 	mov    %rdx,-0xc0(%rbp)
  40de8a:	48 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%rcx
  40de91:	48 2b 8d 40 ff ff ff 	sub    -0xc0(%rbp),%rcx
  40de98:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
  40de9f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40dea6:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  40dead:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40deb4:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
  40debb:	77 10                	ja     40decd <_D6kernel4core4util4itoaFAaalZAa+0x2a0>
  40debd:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
  40dec4:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  40decb:	eb 22                	jmp    40deef <_D6kernel4core4util4itoaFAaalZAa+0x2c2>
  40decd:	48 c7 45 c0 12 00 00 	movq   $0x12,-0x40(%rbp)
  40ded4:	00 
  40ded5:	48 c7 45 c8 6a 45 41 	movq   $0x41456a,-0x38(%rbp)
  40dedc:	00 
  40dedd:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40dee1:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40dee5:	ba 7e 01 00 00       	mov    $0x17e,%edx
  40deea:	e8 ea cd ff ff       	callq  40acd9 <_d_array_bounds>
  40deef:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  40def6:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  40defd:	48 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%rcx
  40df04:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
  40df08:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  40df0c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40df10:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  40df17:	48 89 02             	mov    %rax,(%rdx)
  40df1a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40df1e:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  40df25:	48 89 41 08          	mov    %rax,0x8(%rcx)
}
  40df29:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  40df30:	c9                   	leaveq 
  40df31:	c3                   	retq   
  40df32:	90                   	nop    
  40df33:	90                   	nop    

000000000040df34 <nativeSyscall>:
module kernel.arch.x86_64.usersyscall; // implements the native syscall function

import kernel.arch.x86_64.vmem;
import kernel.core.util;

extern(C) long nativeSyscall(ulong ID, void* ret, void* params)
  40df34:	48 89 7c 24 f8       	mov    %rdi,-0x8(%rsp)
  40df39:	48 89 74 24 f0       	mov    %rsi,-0x10(%rsp)
  40df3e:	48 89 54 24 e8       	mov    %rdx,-0x18(%rsp)
	// I assume such in the syscall handler
	asm
	{
		naked;
		"pushq %%rcx";
		"pushq %%r11";
  40df43:	51                   	push   %rcx
		"pushq %%rax";
  40df44:	41 53                	push   %r11
		"syscall";
  40df46:	50                   	push   %rax
		"popq %%rax";
  40df47:	0f 05                	syscall 
		"popq %%r11";
  40df49:	58                   	pop    %rax
		"popq %%rcx";
  40df4a:	41 5b                	pop    %r11

		"retq";
  40df4c:	59                   	pop    %rcx
	}
  40df4d:	c3                   	retq   
  40df4e:	90                   	nop    
  40df4f:	90                   	nop    

000000000040df50 <_D6malloc6mallocFmZPv>:
chunk *used_list = null;  //the list of allocated chunks
chunk *free_list = null;  //the list of freed chunks

//if you don't know what malloc does
//then you shouldn't be in my source code
void *malloc(size_t size) {
  40df50:	55                   	push   %rbp
  40df51:	48 89 e5             	mov    %rsp,%rbp
  40df54:	48 83 ec 60          	sub    $0x60,%rsp
  40df58:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  chunk *c = free_list;
  40df5c:	48 8b 05 05 f6 00 00 	mov    0xf605(%rip),%rax        # 41d568 <_D6malloc9free_listPS6malloc5chunk>
  40df63:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

  //first we see if there's some free-d memory we can re-use
  while(c !is null) {
  40df67:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40df6c:	0f 95 c0             	setne  %al
  40df6f:	83 f0 01             	xor    $0x1,%eax
  40df72:	84 c0                	test   %al,%al
  40df74:	75 43                	jne    40dfb9 <_D6malloc6mallocFmZPv+0x69>
    print("in while");
  40df76:	48 c7 45 b0 08 00 00 	movq   $0x8,-0x50(%rbp)
  40df7d:	00 
  40df7e:	48 c7 45 b8 98 45 41 	movq   $0x414598,-0x48(%rbp)
  40df85:	00 
  40df86:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40df8a:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40df8e:	48 c7 c7 a0 9b 41 00 	mov    $0x419ba0,%rdi
  40df95:	b8 00 00 00 00       	mov    $0x0,%eax
  40df9a:	e8 61 01 00 00       	callq  40e100 <_D4user7basicio5printFYv>
    if(size < c.size) { //if the size we want is less than the size of the chunk
  40df9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40dfa3:	48 8b 00             	mov    (%rax),%rax
  40dfa6:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
  40dfaa:	73 bb                	jae    40df67 <_D6malloc6mallocFmZPv+0x17>

      return cast(void *)1337;
  40dfac:	48 c7 45 a0 39 05 00 	movq   $0x539,-0x60(%rbp)
  40dfb3:	00 
  40dfb4:	e9 c3 00 00 00       	jmpq   40e07c <_D6malloc6mallocFmZPv+0x12c>
    }
  }
  //since c is null, we need to get a new page
  //void *h = allocPage(); //not till we have it
  //set the used list to start at the beginning of the page
  used_list = cast(chunk *)allocate(size + chunk.sizeof);
  40dfb9:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  40dfbd:	48 83 c7 18          	add    $0x18,%rdi
  40dfc1:	e8 bc 00 00 00       	callq  40e082 <_D6malloc8allocateFmZPv>
  40dfc6:	48 89 05 93 f5 00 00 	mov    %rax,0xf593(%rip)        # 41d560 <_D6malloc9used_listPS6malloc5chunk>
  if(!used_list) { print("failure"); return null; }
  40dfcd:	48 8b 05 8c f5 00 00 	mov    0xf58c(%rip),%rax        # 41d560 <_D6malloc9used_listPS6malloc5chunk>
  40dfd4:	48 85 c0             	test   %rax,%rax
  40dfd7:	0f 95 c0             	setne  %al
  40dfda:	83 f0 01             	xor    $0x1,%eax
  40dfdd:	84 c0                	test   %al,%al
  40dfdf:	74 33                	je     40e014 <_D6malloc6mallocFmZPv+0xc4>
  40dfe1:	48 c7 45 c0 07 00 00 	movq   $0x7,-0x40(%rbp)
  40dfe8:	00 
  40dfe9:	48 c7 45 c8 a1 45 41 	movq   $0x4145a1,-0x38(%rbp)
  40dff0:	00 
  40dff1:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40dff5:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40dff9:	48 c7 c7 a0 9b 41 00 	mov    $0x419ba0,%rdi
  40e000:	b8 00 00 00 00       	mov    $0x0,%eax
  40e005:	e8 f6 00 00 00       	callq  40e100 <_D4user7basicio5printFYv>
  40e00a:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  40e011:	00 
  40e012:	eb 68                	jmp    40e07c <_D6malloc6mallocFmZPv+0x12c>
  //set up the struct
  print("%d", 15);
  40e014:	48 c7 45 d0 02 00 00 	movq   $0x2,-0x30(%rbp)
  40e01b:	00 
  40e01c:	48 c7 45 d8 a9 45 41 	movq   $0x4145a9,-0x28(%rbp)
  40e023:	00 
  40e024:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40e028:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40e02c:	b9 0f 00 00 00       	mov    $0xf,%ecx
  40e031:	48 c7 c7 00 d3 41 00 	mov    $0x41d300,%rdi
  40e038:	b8 00 00 00 00       	mov    $0x0,%eax
  40e03d:	e8 be 00 00 00       	callq  40e100 <_D4user7basicio5printFYv>
  //used_list.size = size;
  //used_list.next = null;
  //used_list.prev = null;
  print("done with malloc");
  40e042:	48 c7 45 e0 10 00 00 	movq   $0x10,-0x20(%rbp)
  40e049:	00 
  40e04a:	48 c7 45 e8 ac 45 41 	movq   $0x4145ac,-0x18(%rbp)
  40e051:	00 
  40e052:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40e056:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40e05a:	48 c7 c7 a0 9b 41 00 	mov    $0x419ba0,%rdi
  40e061:	b8 00 00 00 00       	mov    $0x0,%eax
  40e066:	e8 95 00 00 00       	callq  40e100 <_D4user7basicio5printFYv>
  return cast(void *)(used_list + chunk.sizeof);
  40e06b:	48 8b 05 ee f4 00 00 	mov    0xf4ee(%rip),%rax        # 41d560 <_D6malloc9used_listPS6malloc5chunk>
  40e072:	48 05 40 02 00 00    	add    $0x240,%rax
  40e078:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40e07c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
}
  40e080:	c9                   	leaveq 
  40e081:	c3                   	retq   

000000000040e082 <_D6malloc8allocateFmZPv>:

ubyte[9000] buffer; //fake pages 'nat
int buff_pos = 0;

void *allocate(size_t size) {
  40e082:	55                   	push   %rbp
  40e083:	48 89 e5             	mov    %rsp,%rbp
  40e086:	48 83 ec 20          	sub    $0x20,%rsp
  40e08a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  print("in allocate");
  40e08e:	48 c7 45 f0 0b 00 00 	movq   $0xb,-0x10(%rbp)
  40e095:	00 
  40e096:	48 c7 45 f8 bd 45 41 	movq   $0x4145bd,-0x8(%rbp)
  40e09d:	00 
  40e09e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40e0a2:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  40e0a6:	48 c7 c7 a0 9b 41 00 	mov    $0x419ba0,%rdi
  40e0ad:	b8 00 00 00 00       	mov    $0x0,%eax
  40e0b2:	e8 49 00 00 00       	callq  40e100 <_D4user7basicio5printFYv>
  return cast(void*)(buffer.ptr + buff_pos);
  40e0b7:	8b 05 eb 17 01 00    	mov    0x117eb(%rip),%eax        # 41f8a8 <_D6malloc8buff_posi>
  40e0bd:	48 98                	cltq   
  40e0bf:	48 05 80 d5 41 00    	add    $0x41d580,%rax
}
  40e0c5:	c9                   	leaveq 
  40e0c6:	c3                   	retq   

000000000040e0c7 <_D6malloc4freeFPvZv>:

//see malloc's comment
void free(void *) {
  40e0c7:	55                   	push   %rbp
  40e0c8:	48 89 e5             	mov    %rsp,%rbp
  40e0cb:	48 83 ec 20          	sub    $0x20,%rsp
  40e0cf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  print("in free");
  40e0d3:	48 c7 45 f0 07 00 00 	movq   $0x7,-0x10(%rbp)
  40e0da:	00 
  40e0db:	48 c7 45 f8 c9 45 41 	movq   $0x4145c9,-0x8(%rbp)
  40e0e2:	00 
  40e0e3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40e0e7:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  40e0eb:	48 c7 c7 a0 9b 41 00 	mov    $0x419ba0,%rdi
  40e0f2:	b8 00 00 00 00       	mov    $0x0,%eax
  40e0f7:	e8 04 00 00 00       	callq  40e100 <_D4user7basicio5printFYv>
}
  40e0fc:	c9                   	leaveq 
  40e0fd:	c3                   	retq   
  40e0fe:	90                   	nop    
  40e0ff:	90                   	nop    

000000000040e100 <_D4user7basicio5printFYv>:
import user.syscall;
import std.stdarg;

import libos.console;

void print(...) {
  40e100:	55                   	push   %rbp
  40e101:	48 89 e5             	mov    %rsp,%rbp
  40e104:	48 81 ec 50 02 00 00 	sub    $0x250,%rsp
  40e10b:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  40e112:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  40e119:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  40e120:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  40e127:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  40e12e:	0f b6 c0             	movzbl %al,%eax
  40e131:	48 89 85 b8 fd ff ff 	mov    %rax,-0x248(%rbp)
  40e138:	48 8b 95 b8 fd ff ff 	mov    -0x248(%rbp),%rdx
  40e13f:	48 8d 04 95 00 00 00 	lea    0x0(,%rdx,4),%rax
  40e146:	00 
  40e147:	48 c7 85 b8 fd ff ff 	movq   $0x40e186,-0x248(%rbp)
  40e14e:	86 e1 40 00 
  40e152:	48 29 85 b8 fd ff ff 	sub    %rax,-0x248(%rbp)
  40e159:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  40e15d:	48 8b 95 b8 fd ff ff 	mov    -0x248(%rbp),%rdx
  40e164:	ff e2                	jmpq   *%rdx
  40e166:	0f 29 78 f1          	movaps %xmm7,-0xf(%rax)
  40e16a:	0f 29 70 e1          	movaps %xmm6,-0x1f(%rax)
  40e16e:	0f 29 68 d1          	movaps %xmm5,-0x2f(%rax)
  40e172:	0f 29 60 c1          	movaps %xmm4,-0x3f(%rax)
  40e176:	0f 29 58 b1          	movaps %xmm3,-0x4f(%rax)
  40e17a:	0f 29 50 a1          	movaps %xmm2,-0x5f(%rax)
  40e17e:	0f 29 48 91          	movaps %xmm1,-0x6f(%rax)
  40e182:	0f 29 40 81          	movaps %xmm0,-0x7f(%rax)
  40e186:	48 89 bd f8 fd ff ff 	mov    %rdi,-0x208(%rbp)

	char[20] buff;

	foreach(arg; _arguments)
	{
		if (arg == typeid(char[]))
  40e18d:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
  40e194:	c7 00 08 00 00 00    	movl   $0x8,(%rax)
  40e19a:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
  40e1a1:	c7 40 04 30 00 00 00 	movl   $0x30,0x4(%rax)
  40e1a8:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
  40e1af:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  40e1b3:	48 89 50 08          	mov    %rdx,0x8(%rax)
  40e1b7:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
  40e1be:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
  40e1c5:	48 89 50 10          	mov    %rdx,0x10(%rax)
import user.syscall;
import std.stdarg;

import libos.console;

void print(...) {
  40e1c9:	48 8b 95 f8 fd ff ff 	mov    -0x208(%rbp),%rdx
  40e1d0:	48 8b 42 10          	mov    0x10(%rdx),%rax
  40e1d4:	48 89 85 00 fe ff ff 	mov    %rax,-0x200(%rbp)
  40e1db:	48 8b 42 18          	mov    0x18(%rdx),%rax
  40e1df:	48 89 85 08 fe ff ff 	mov    %rax,-0x1f8(%rbp)
	if (_arguments.length == 0)
  40e1e6:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax
  40e1ed:	48 85 c0             	test   %rax,%rax
  40e1f0:	75 05                	jne    40e1f7 <_D4user7basicio5printFYv+0xf7>
  40e1f2:	e9 e9 05 00 00       	jmpq   40e7e0 <_D4user7basicio5printFYv+0x6e0>
	{
		return;
	}

	char[20] buff;
  40e1f7:	48 c7 85 50 fe ff ff 	movq   $0x14,-0x1b0(%rbp)
  40e1fe:	14 00 00 00 
  40e202:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40e209:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
  40e210:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  40e217:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  40e21e:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  40e225:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  40e22c:	48 83 bd 10 ff ff ff 	cmpq   $0x0,-0xf0(%rbp)
  40e233:	00 
  40e234:	0f 95 c0             	setne  %al
  40e237:	83 f0 01             	xor    $0x1,%eax
  40e23a:	84 c0                	test   %al,%al
  40e23c:	75 1a                	jne    40e258 <_D4user7basicio5printFYv+0x158>
  40e23e:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40e245:	c6 00 ff             	movb   $0xff,(%rax)
  40e248:	48 ff 85 08 ff ff ff 	incq   -0xf8(%rbp)
  40e24f:	48 ff 8d 10 ff ff ff 	decq   -0xf0(%rbp)
  40e256:	eb d4                	jmp    40e22c <_D4user7basicio5printFYv+0x12c>

	foreach(arg; _arguments)
  40e258:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
  40e25f:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
  40e266:	48 8b 95 c0 fd ff ff 	mov    -0x240(%rbp),%rdx
  40e26d:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  40e274:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax
  40e27b:	48 c1 e0 03          	shl    $0x3,%rax
  40e27f:	48 03 85 c0 fd ff ff 	add    -0x240(%rbp),%rax
  40e286:	48 39 85 18 ff ff ff 	cmp    %rax,-0xe8(%rbp)
  40e28d:	0f 95 c0             	setne  %al
  40e290:	83 f0 01             	xor    $0x1,%eax
  40e293:	84 c0                	test   %al,%al
  40e295:	0f 85 22 05 00 00    	jne    40e7bd <_D4user7basicio5printFYv+0x6bd>
  40e29b:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40e2a2:	48 8b 00             	mov    (%rax),%rax
  40e2a5:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
	{
		if (arg == typeid(char[]))
  40e2ac:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40e2b3:	48 8b 00             	mov    (%rax),%rax
  40e2b6:	48 83 c0 20          	add    $0x20,%rax
  40e2ba:	48 8b 00             	mov    (%rax),%rax
  40e2bd:	48 c7 c6 00 fd 40 00 	mov    $0x40fd00,%rsi
  40e2c4:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
  40e2cb:	ff d0                	callq  *%rax
  40e2cd:	85 c0                	test   %eax,%eax
  40e2cf:	0f 84 0e 01 00 00    	je     40e3e3 <_D4user7basicio5printFYv+0x2e3>
		{
			Console.printString(va_arg!(char[])(_argptr));
  40e2d5:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e2db:	83 f8 30             	cmp    $0x30,%eax
  40e2de:	73 2a                	jae    40e30a <_D4user7basicio5printFYv+0x20a>
  40e2e0:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  40e2e7:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e2ed:	89 c0                	mov    %eax,%eax
  40e2ef:	48 01 c2             	add    %rax,%rdx
  40e2f2:	48 89 95 c8 fd ff ff 	mov    %rdx,-0x238(%rbp)
  40e2f9:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e2ff:	83 c0 08             	add    $0x8,%eax
  40e302:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%rbp)
  40e308:	eb 19                	jmp    40e323 <_D4user7basicio5printFYv+0x223>
  40e30a:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  40e311:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
  40e318:	48 83 c0 08          	add    $0x8,%rax
  40e31c:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  40e323:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
  40e32a:	48 8b 00             	mov    (%rax),%rax
  40e32d:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  40e334:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e33a:	83 f8 30             	cmp    $0x30,%eax
  40e33d:	73 2a                	jae    40e369 <_D4user7basicio5printFYv+0x269>
  40e33f:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  40e346:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e34c:	89 c0                	mov    %eax,%eax
  40e34e:	48 01 c2             	add    %rax,%rdx
  40e351:	48 89 95 d0 fd ff ff 	mov    %rdx,-0x230(%rbp)
  40e358:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e35e:	83 c0 08             	add    $0x8,%eax
  40e361:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%rbp)
  40e367:	eb 19                	jmp    40e382 <_D4user7basicio5printFYv+0x282>
  40e369:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  40e370:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
  40e377:	48 83 c0 08          	add    $0x8,%rax
  40e37b:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  40e382:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
  40e389:	48 8b 00             	mov    (%rax),%rax
  40e38c:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  40e393:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40e39a:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
  40e3a1:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  40e3a8:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
  40e3af:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
  40e3b6:	48 89 85 60 fe ff ff 	mov    %rax,-0x1a0(%rbp)
  40e3bd:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
  40e3c4:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
  40e3cb:	48 8b bd 60 fe ff ff 	mov    -0x1a0(%rbp),%rdi
  40e3d2:	48 8b b5 68 fe ff ff 	mov    -0x198(%rbp),%rsi
  40e3d9:	e8 b7 0b 00 00       	callq  40ef95 <_D5libos7console7Console11printStringFAaZv>
  40e3de:	e9 cd 03 00 00       	jmpq   40e7b0 <_D4user7basicio5printFYv+0x6b0>
		}
		else if (arg == typeid(long))
  40e3e3:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40e3ea:	48 8b 00             	mov    (%rax),%rax
  40e3ed:	48 83 c0 20          	add    $0x20,%rax
  40e3f1:	48 8b 00             	mov    (%rax),%rax
  40e3f4:	48 c7 c6 d0 0e 41 00 	mov    $0x410ed0,%rsi
  40e3fb:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
  40e402:	ff d0                	callq  *%rax
  40e404:	85 c0                	test   %eax,%eax
  40e406:	0f 84 c4 00 00 00    	je     40e4d0 <_D4user7basicio5printFYv+0x3d0>
		{
			long val;
  40e40c:	48 c7 85 38 ff ff ff 	movq   $0x0,-0xc8(%rbp)
  40e413:	00 00 00 00 
			val = va_arg!(long)(_argptr);
  40e417:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e41d:	83 f8 30             	cmp    $0x30,%eax
  40e420:	73 2a                	jae    40e44c <_D4user7basicio5printFYv+0x34c>
  40e422:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  40e429:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e42f:	89 c0                	mov    %eax,%eax
  40e431:	48 01 c2             	add    %rax,%rdx
  40e434:	48 89 95 d8 fd ff ff 	mov    %rdx,-0x228(%rbp)
  40e43b:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e441:	83 c0 08             	add    $0x8,%eax
  40e444:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%rbp)
  40e44a:	eb 19                	jmp    40e465 <_D4user7basicio5printFYv+0x365>
  40e44c:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  40e453:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
  40e45a:	48 83 c0 08          	add    $0x8,%rax
  40e45e:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  40e465:	48 8b 85 d8 fd ff ff 	mov    -0x228(%rbp),%rax
  40e46c:	48 8b 00             	mov    (%rax),%rax
  40e46f:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)

			Console.printString(itoa(buff, 'd', val));
  40e476:	48 c7 85 80 fe ff ff 	movq   $0x14,-0x180(%rbp)
  40e47d:	14 00 00 00 
  40e481:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40e488:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
  40e48f:	48 8d bd 90 fe ff ff 	lea    -0x170(%rbp),%rdi
  40e496:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  40e49d:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  40e4a4:	48 8b 95 88 fe ff ff 	mov    -0x178(%rbp),%rdx
  40e4ab:	49 89 c0             	mov    %rax,%r8
  40e4ae:	b9 64 00 00 00       	mov    $0x64,%ecx
  40e4b3:	e8 2a 03 00 00       	callq  40e7e2 <_D4user7basicio4itoaFAaalZAa>
  40e4b8:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  40e4bf:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  40e4c6:	e8 ca 0a 00 00       	callq  40ef95 <_D5libos7console7Console11printStringFAaZv>
  40e4cb:	e9 e0 02 00 00       	jmpq   40e7b0 <_D4user7basicio5printFYv+0x6b0>
		}
		else if (arg == typeid(ulong))
  40e4d0:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40e4d7:	48 8b 00             	mov    (%rax),%rax
  40e4da:	48 83 c0 20          	add    $0x20,%rax
  40e4de:	48 8b 00             	mov    (%rax),%rax
  40e4e1:	48 c7 c6 d0 13 41 00 	mov    $0x4113d0,%rsi
  40e4e8:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
  40e4ef:	ff d0                	callq  *%rax
  40e4f1:	85 c0                	test   %eax,%eax
  40e4f3:	0f 84 c4 00 00 00    	je     40e5bd <_D4user7basicio5printFYv+0x4bd>
		{
			ulong val;
  40e4f9:	48 c7 85 40 ff ff ff 	movq   $0x0,-0xc0(%rbp)
  40e500:	00 00 00 00 
			val = va_arg!(ulong)(_argptr);
  40e504:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e50a:	83 f8 30             	cmp    $0x30,%eax
  40e50d:	73 2a                	jae    40e539 <_D4user7basicio5printFYv+0x439>
  40e50f:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  40e516:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e51c:	89 c0                	mov    %eax,%eax
  40e51e:	48 01 c2             	add    %rax,%rdx
  40e521:	48 89 95 e0 fd ff ff 	mov    %rdx,-0x220(%rbp)
  40e528:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e52e:	83 c0 08             	add    $0x8,%eax
  40e531:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%rbp)
  40e537:	eb 19                	jmp    40e552 <_D4user7basicio5printFYv+0x452>
  40e539:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  40e540:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  40e547:	48 83 c0 08          	add    $0x8,%rax
  40e54b:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  40e552:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
  40e559:	48 8b 00             	mov    (%rax),%rax
  40e55c:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)

			Console.printString(itoa(buff, 'u', val));
  40e563:	48 8b 8d 40 ff ff ff 	mov    -0xc0(%rbp),%rcx
  40e56a:	48 c7 85 a0 fe ff ff 	movq   $0x14,-0x160(%rbp)
  40e571:	14 00 00 00 
  40e575:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40e57c:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
  40e583:	48 8d bd b0 fe ff ff 	lea    -0x150(%rbp),%rdi
  40e58a:	48 8b b5 a0 fe ff ff 	mov    -0x160(%rbp),%rsi
  40e591:	48 8b 95 a8 fe ff ff 	mov    -0x158(%rbp),%rdx
  40e598:	49 89 c8             	mov    %rcx,%r8
  40e59b:	b9 75 00 00 00       	mov    $0x75,%ecx
  40e5a0:	e8 3d 02 00 00       	callq  40e7e2 <_D4user7basicio4itoaFAaalZAa>
  40e5a5:	48 8b bd b0 fe ff ff 	mov    -0x150(%rbp),%rdi
  40e5ac:	48 8b b5 b8 fe ff ff 	mov    -0x148(%rbp),%rsi
  40e5b3:	e8 dd 09 00 00       	callq  40ef95 <_D5libos7console7Console11printStringFAaZv>
  40e5b8:	e9 f3 01 00 00       	jmpq   40e7b0 <_D4user7basicio5printFYv+0x6b0>
		}
		else if (arg == typeid(int))
  40e5bd:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40e5c4:	48 8b 00             	mov    (%rax),%rax
  40e5c7:	48 83 c0 20          	add    $0x20,%rax
  40e5cb:	48 8b 00             	mov    (%rax),%rax
  40e5ce:	48 c7 c6 50 0d 41 00 	mov    $0x410d50,%rsi
  40e5d5:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
  40e5dc:	ff d0                	callq  *%rax
  40e5de:	85 c0                	test   %eax,%eax
  40e5e0:	0f 84 c3 00 00 00    	je     40e6a9 <_D4user7basicio5printFYv+0x5a9>
		{
			int val;
  40e5e6:	c7 85 48 ff ff ff 00 	movl   $0x0,-0xb8(%rbp)
  40e5ed:	00 00 00 
			val = va_arg!(int)(_argptr);
  40e5f0:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e5f6:	83 f8 30             	cmp    $0x30,%eax
  40e5f9:	73 2a                	jae    40e625 <_D4user7basicio5printFYv+0x525>
  40e5fb:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  40e602:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e608:	89 c0                	mov    %eax,%eax
  40e60a:	48 01 c2             	add    %rax,%rdx
  40e60d:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
  40e614:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e61a:	83 c0 08             	add    $0x8,%eax
  40e61d:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%rbp)
  40e623:	eb 19                	jmp    40e63e <_D4user7basicio5printFYv+0x53e>
  40e625:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  40e62c:	48 89 85 e8 fd ff ff 	mov    %rax,-0x218(%rbp)
  40e633:	48 83 c0 08          	add    $0x8,%rax
  40e637:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  40e63e:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
  40e645:	8b 00                	mov    (%rax),%eax
  40e647:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)

			Console.printString(itoa(buff, 'd', val));
  40e64d:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
  40e653:	48 63 c8             	movslq %eax,%rcx
  40e656:	48 c7 85 c0 fe ff ff 	movq   $0x14,-0x140(%rbp)
  40e65d:	14 00 00 00 
  40e661:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40e668:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
  40e66f:	48 8d bd d0 fe ff ff 	lea    -0x130(%rbp),%rdi
  40e676:	48 8b b5 c0 fe ff ff 	mov    -0x140(%rbp),%rsi
  40e67d:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
  40e684:	49 89 c8             	mov    %rcx,%r8
  40e687:	b9 64 00 00 00       	mov    $0x64,%ecx
  40e68c:	e8 51 01 00 00       	callq  40e7e2 <_D4user7basicio4itoaFAaalZAa>
  40e691:	48 8b bd d0 fe ff ff 	mov    -0x130(%rbp),%rdi
  40e698:	48 8b b5 d8 fe ff ff 	mov    -0x128(%rbp),%rsi
  40e69f:	e8 f1 08 00 00       	callq  40ef95 <_D5libos7console7Console11printStringFAaZv>
  40e6a4:	e9 07 01 00 00       	jmpq   40e7b0 <_D4user7basicio5printFYv+0x6b0>
		}
		else if (arg == typeid(uint))
  40e6a9:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40e6b0:	48 8b 00             	mov    (%rax),%rax
  40e6b3:	48 83 c0 20          	add    $0x20,%rax
  40e6b7:	48 8b 00             	mov    (%rax),%rax
  40e6ba:	48 c7 c6 10 13 41 00 	mov    $0x411310,%rsi
  40e6c1:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
  40e6c8:	ff d0                	callq  *%rax
  40e6ca:	85 c0                	test   %eax,%eax
  40e6cc:	0f 84 bd 00 00 00    	je     40e78f <_D4user7basicio5printFYv+0x68f>
		{
			uint val;
  40e6d2:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  40e6d9:	00 00 00 
			val = va_arg!(int)(_argptr);
  40e6dc:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e6e2:	83 f8 30             	cmp    $0x30,%eax
  40e6e5:	73 2a                	jae    40e711 <_D4user7basicio5printFYv+0x611>
  40e6e7:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  40e6ee:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e6f4:	89 c0                	mov    %eax,%eax
  40e6f6:	48 01 c2             	add    %rax,%rdx
  40e6f9:	48 89 95 f0 fd ff ff 	mov    %rdx,-0x210(%rbp)
  40e700:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e706:	83 c0 08             	add    $0x8,%eax
  40e709:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%rbp)
  40e70f:	eb 19                	jmp    40e72a <_D4user7basicio5printFYv+0x62a>
  40e711:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  40e718:	48 89 85 f0 fd ff ff 	mov    %rax,-0x210(%rbp)
  40e71f:	48 83 c0 08          	add    $0x8,%rax
  40e723:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  40e72a:	48 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%rax
  40e731:	8b 00                	mov    (%rax),%eax
  40e733:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)

			Console.printString(itoa(buff, 'u', val));
  40e739:	8b 8d 4c ff ff ff    	mov    -0xb4(%rbp),%ecx
  40e73f:	48 c7 85 e0 fe ff ff 	movq   $0x14,-0x120(%rbp)
  40e746:	14 00 00 00 
  40e74a:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40e751:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  40e758:	48 8d bd f0 fe ff ff 	lea    -0x110(%rbp),%rdi
  40e75f:	48 8b b5 e0 fe ff ff 	mov    -0x120(%rbp),%rsi
  40e766:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  40e76d:	49 89 c8             	mov    %rcx,%r8
  40e770:	b9 75 00 00 00       	mov    $0x75,%ecx
  40e775:	e8 68 00 00 00       	callq  40e7e2 <_D4user7basicio4itoaFAaalZAa>
  40e77a:	48 8b bd f0 fe ff ff 	mov    -0x110(%rbp),%rdi
  40e781:	48 8b b5 f8 fe ff ff 	mov    -0x108(%rbp),%rsi
  40e788:	e8 08 08 00 00       	callq  40ef95 <_D5libos7console7Console11printStringFAaZv>
  40e78d:	eb 21                	jmp    40e7b0 <_D4user7basicio5printFYv+0x6b0>
		}
		else if (arg == typeid(void*))
  40e78f:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40e796:	48 8b 00             	mov    (%rax),%rax
  40e799:	48 83 c0 20          	add    $0x20,%rax
  40e79d:	48 8b 00             	mov    (%rax),%rax
  40e7a0:	48 c7 c6 20 d3 41 00 	mov    $0x41d320,%rsi
  40e7a7:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
  40e7ae:	ff d0                	callq  *%rax

	char[20] buff;

	foreach(arg; _arguments)
	{
		if (arg == typeid(char[]))
  40e7b0:	48 83 85 18 ff ff ff 	addq   $0x8,-0xe8(%rbp)
  40e7b7:	08 
  40e7b8:	e9 b7 fa ff ff       	jmpq   40e274 <_D4user7basicio5printFYv+0x174>
  40e7bd:	eb 21                	jmp    40e7e0 <_D4user7basicio5printFYv+0x6e0>
  40e7bf:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
  40e7c6:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
  40e7cd:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
  40e7d4:	48 8b bd b0 fd ff ff 	mov    -0x250(%rbp),%rdi
  40e7db:	e8 ff c8 ff ff       	callq  40b0df <_Unwind_Resume>
		}
		else if (arg == typeid(void*))
		{
		}
	}
}
  40e7e0:	c9                   	leaveq 
  40e7e1:	c3                   	retq   

000000000040e7e2 <_D4user7basicio4itoaFAaalZAa>:
char[] itoa(char[] buf, char base, long d)
  40e7e2:	55                   	push   %rbp
  40e7e3:	48 89 e5             	mov    %rsp,%rbp
  40e7e6:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  40e7ed:	48 89 bd f0 fe ff ff 	mov    %rdi,-0x110(%rbp)
  40e7f4:	88 8d 6f ff ff ff    	mov    %cl,-0x91(%rbp)
  40e7fa:	4c 89 85 60 ff ff ff 	mov    %r8,-0xa0(%rbp)
  40e801:	48 89 f0             	mov    %rsi,%rax
  40e804:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  40e80b:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
{
  size_t p = buf.length - 1;
  40e812:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40e819:	48 ff c8             	dec    %rax
  40e81c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  size_t startIdx = 0;
  40e820:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40e827:	00 
  ulong ud = d;
  40e828:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40e82f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  bool negative = false;
  40e833:	c6 45 d7 00          	movb   $0x0,-0x29(%rbp)

  int divisor = 10;
  40e837:	c7 45 d0 0a 00 00 00 	movl   $0xa,-0x30(%rbp)

  // If %d is specified and D is minus, put `-' in the head.
  if(base == 'd' && d < 0)
  40e83e:	0f b6 85 6f ff ff ff 	movzbl -0x91(%rbp),%eax
  40e845:	83 f8 64             	cmp    $0x64,%eax
  40e848:	75 1e                	jne    40e868 <_D4user7basicio4itoaFAaalZAa+0x86>
  40e84a:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  40e851:	00 
  40e852:	79 14                	jns    40e868 <_D4user7basicio4itoaFAaalZAa+0x86>
  {
    negative = true;
  40e854:	c6 45 d7 01          	movb   $0x1,-0x29(%rbp)
    ud = -d;
  40e858:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40e85f:	48 f7 d8             	neg    %rax
  40e862:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  bool negative = false;

  int divisor = 10;

  // If %d is specified and D is minus, put `-' in the head.
  if(base == 'd' && d < 0)
  40e866:	eb 13                	jmp    40e87b <_D4user7basicio4itoaFAaalZAa+0x99>
  {
    negative = true;
    ud = -d;
  }
  else if(base == 'x')
  40e868:	0f b6 85 6f ff ff ff 	movzbl -0x91(%rbp),%eax
  40e86f:	83 f8 78             	cmp    $0x78,%eax
  40e872:	75 07                	jne    40e87b <_D4user7basicio4itoaFAaalZAa+0x99>
    divisor = 16;
  40e874:	c7 45 d0 10 00 00 00 	movl   $0x10,-0x30(%rbp)

  // Divide UD by DIVISOR until UD == 0.
  do
  {
    int remainder = ud % divisor;
  40e87b:	8b 45 d0             	mov    -0x30(%rbp),%eax
  40e87e:	48 63 d0             	movslq %eax,%rdx
  40e881:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40e885:	48 89 d1             	mov    %rdx,%rcx
  40e888:	ba 00 00 00 00       	mov    $0x0,%edx
  40e88d:	48 f7 f1             	div    %rcx
  40e890:	48 89 d0             	mov    %rdx,%rax
  40e893:	89 45 f4             	mov    %eax,-0xc(%rbp)
    buf[p--] = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
  40e896:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40e89d:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
  40e8a4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40e8a8:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  40e8af:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40e8b6:	48 39 85 08 ff ff ff 	cmp    %rax,-0xf8(%rbp)
  40e8bd:	0f 92 c0             	setb   %al
  40e8c0:	48 ff 4d e8          	decq   -0x18(%rbp)
  40e8c4:	84 c0                	test   %al,%al
  40e8c6:	74 10                	je     40e8d8 <_D4user7basicio4itoaFAaalZAa+0xf6>
  40e8c8:	48 8b 8d 08 ff ff ff 	mov    -0xf8(%rbp),%rcx
  40e8cf:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  40e8d6:	eb 22                	jmp    40e8fa <_D4user7basicio4itoaFAaalZAa+0x118>
  40e8d8:	48 c7 45 80 0e 00 00 	movq   $0xe,-0x80(%rbp)
  40e8df:	00 
  40e8e0:	48 c7 45 88 d1 45 41 	movq   $0x4145d1,-0x78(%rbp)
  40e8e7:	00 
  40e8e8:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  40e8ec:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  40e8f0:	ba 54 00 00 00       	mov    $0x54,%edx
  40e8f5:	e8 df c3 ff ff       	callq  40acd9 <_d_array_bounds>
  40e8fa:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40e901:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  40e908:	48 01 c2             	add    %rax,%rdx
  40e90b:	48 89 95 10 ff ff ff 	mov    %rdx,-0xf0(%rbp)
  40e912:	83 7d f4 0a          	cmpl   $0xa,-0xc(%rbp)
  40e916:	7d 0e                	jge    40e926 <_D4user7basicio4itoaFAaalZAa+0x144>
  40e918:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40e91b:	83 c0 30             	add    $0x30,%eax
  40e91e:	88 85 1f ff ff ff    	mov    %al,-0xe1(%rbp)
  40e924:	eb 0c                	jmp    40e932 <_D4user7basicio4itoaFAaalZAa+0x150>
  40e926:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40e929:	83 c0 57             	add    $0x57,%eax
  40e92c:	88 85 1f ff ff ff    	mov    %al,-0xe1(%rbp)
  40e932:	0f b6 8d 1f ff ff ff 	movzbl -0xe1(%rbp),%ecx
  40e939:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40e940:	88 08                	mov    %cl,(%rax)
  40e942:	8b 45 d0             	mov    -0x30(%rbp),%eax
  40e945:	48 63 d0             	movslq %eax,%rdx
  40e948:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40e94c:	48 89 d1             	mov    %rdx,%rcx
  40e94f:	ba 00 00 00 00       	mov    $0x0,%edx
  40e954:	48 f7 f1             	div    %rcx
  40e957:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40e95b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  40e960:	0f 95 c0             	setne  %al
  40e963:	83 f0 01             	xor    $0x1,%eax
  40e966:	84 c0                	test   %al,%al
  40e968:	75 05                	jne    40e96f <_D4user7basicio4itoaFAaalZAa+0x18d>
  40e96a:	e9 0c ff ff ff       	jmpq   40e87b <_D4user7basicio4itoaFAaalZAa+0x99>
  }
  while (ud /= divisor)

    if(negative)
  40e96f:	80 7d d7 00          	cmpb   $0x0,-0x29(%rbp)
  40e973:	74 75                	je     40e9ea <_D4user7basicio4itoaFAaalZAa+0x208>
      buf[p--] = '-';
  40e975:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40e97c:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  40e983:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40e987:	48 89 95 30 ff ff ff 	mov    %rdx,-0xd0(%rbp)
  40e98e:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40e995:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
  40e99c:	0f 92 c0             	setb   %al
  40e99f:	48 ff 4d e8          	decq   -0x18(%rbp)
  40e9a3:	84 c0                	test   %al,%al
  40e9a5:	74 10                	je     40e9b7 <_D4user7basicio4itoaFAaalZAa+0x1d5>
  40e9a7:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
  40e9ae:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
  40e9b5:	eb 22                	jmp    40e9d9 <_D4user7basicio4itoaFAaalZAa+0x1f7>
  40e9b7:	48 c7 45 90 0e 00 00 	movq   $0xe,-0x70(%rbp)
  40e9be:	00 
  40e9bf:	48 c7 45 98 d1 45 41 	movq   $0x4145d1,-0x68(%rbp)
  40e9c6:	00 
  40e9c7:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  40e9cb:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  40e9cf:	ba 59 00 00 00       	mov    $0x59,%edx
  40e9d4:	e8 00 c3 ff ff       	callq  40acd9 <_d_array_bounds>
  40e9d9:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40e9e0:	48 03 85 20 ff ff ff 	add    -0xe0(%rbp),%rax
  40e9e7:	c6 00 2d             	movb   $0x2d,(%rax)

  return buf[p + 1 .. $];
  40e9ea:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40e9f1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40e9f5:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40e9fc:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  40ea00:	77 0d                	ja     40ea0f <_D4user7basicio4itoaFAaalZAa+0x22d>
  40ea02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ea06:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  40ea0d:	eb 22                	jmp    40ea31 <_D4user7basicio4itoaFAaalZAa+0x24f>
  40ea0f:	48 c7 45 b0 0e 00 00 	movq   $0xe,-0x50(%rbp)
  40ea16:	00 
  40ea17:	48 c7 45 b8 d1 45 41 	movq   $0x4145d1,-0x48(%rbp)
  40ea1e:	00 
  40ea1f:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  40ea23:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40ea27:	ba 5b 00 00 00       	mov    $0x5b,%edx
  40ea2c:	e8 a8 c2 ff ff       	callq  40acd9 <_d_array_bounds>
  40ea31:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ea35:	48 ff c2             	inc    %rdx
  40ea38:	48 89 95 40 ff ff ff 	mov    %rdx,-0xc0(%rbp)
  40ea3f:	48 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%rcx
  40ea46:	48 2b 8d 40 ff ff ff 	sub    -0xc0(%rbp),%rcx
  40ea4d:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
  40ea54:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40ea5b:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  40ea62:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40ea69:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
  40ea70:	77 10                	ja     40ea82 <_D4user7basicio4itoaFAaalZAa+0x2a0>
  40ea72:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
  40ea79:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  40ea80:	eb 22                	jmp    40eaa4 <_D4user7basicio4itoaFAaalZAa+0x2c2>
  40ea82:	48 c7 45 c0 0e 00 00 	movq   $0xe,-0x40(%rbp)
  40ea89:	00 
  40ea8a:	48 c7 45 c8 d1 45 41 	movq   $0x4145d1,-0x38(%rbp)
  40ea91:	00 
  40ea92:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40ea96:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40ea9a:	ba 5b 00 00 00       	mov    $0x5b,%edx
  40ea9f:	e8 35 c2 ff ff       	callq  40acd9 <_d_array_bounds>
  40eaa4:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  40eaab:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  40eab2:	48 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%rcx
  40eab9:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
  40eabd:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  40eac1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40eac5:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  40eacc:	48 89 02             	mov    %rax,(%rdx)
  40eacf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40ead3:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  40eada:	48 89 41 08          	mov    %rax,0x8(%rcx)
}
  40eade:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  40eae5:	c9                   	leaveq 
  40eae6:	c3                   	retq   

000000000040eae7 <_D3std6stdarg14__T6va_argTAaZ6va_argFG1S3gcc8builtins13__va_list_tagZAa>:
    alias void* va_list;
}

template va_arg(T)
{
    T va_arg(inout va_list _argptr)
  40eae7:	55                   	push   %rbp
  40eae8:	48 89 e5             	mov    %rsp,%rbp
  40eaeb:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
	/*
	T arg = *cast(T*)_argptr;
	_argptr = _argptr + ((T.sizeof + int.sizeof - 1) & ~(int.sizeof - 1));
	return arg;
	*/
	T t; return t;
  40eaef:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40eaf6:	00 
  40eaf7:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40eafe:	00 
  40eaff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40eb03:	48 89 07             	mov    %rax,(%rdi)
  40eb06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40eb0a:	48 89 47 08          	mov    %rax,0x8(%rdi)
    }
  40eb0e:	48 89 f8             	mov    %rdi,%rax
  40eb11:	c9                   	leaveq 
  40eb12:	c3                   	retq   

000000000040eb13 <_D3std6stdarg13__T6va_argTlZ6va_argFG1S3gcc8builtins13__va_list_tagZl>:
    alias void* va_list;
}

template va_arg(T)
{
    T va_arg(inout va_list _argptr)
  40eb13:	55                   	push   %rbp
  40eb14:	48 89 e5             	mov    %rsp,%rbp
  40eb17:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	/*
	T arg = *cast(T*)_argptr;
	_argptr = _argptr + ((T.sizeof + int.sizeof - 1) & ~(int.sizeof - 1));
	return arg;
	*/
	T t; return t;
  40eb1b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40eb22:	00 
  40eb23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  40eb27:	c9                   	leaveq 
  40eb28:	c3                   	retq   

000000000040eb29 <_D3std6stdarg13__T6va_argTmZ6va_argFG1S3gcc8builtins13__va_list_tagZm>:
    alias void* va_list;
}

template va_arg(T)
{
    T va_arg(inout va_list _argptr)
  40eb29:	55                   	push   %rbp
  40eb2a:	48 89 e5             	mov    %rsp,%rbp
  40eb2d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	/*
	T arg = *cast(T*)_argptr;
	_argptr = _argptr + ((T.sizeof + int.sizeof - 1) & ~(int.sizeof - 1));
	return arg;
	*/
	T t; return t;
  40eb31:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40eb38:	00 
  40eb39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  40eb3d:	c9                   	leaveq 
  40eb3e:	c3                   	retq   

000000000040eb3f <_D3std6stdarg13__T6va_argTiZ6va_argFG1S3gcc8builtins13__va_list_tagZi>:
    alias void* va_list;
}

template va_arg(T)
{
    T va_arg(inout va_list _argptr)
  40eb3f:	55                   	push   %rbp
  40eb40:	48 89 e5             	mov    %rsp,%rbp
  40eb43:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	/*
	T arg = *cast(T*)_argptr;
	_argptr = _argptr + ((T.sizeof + int.sizeof - 1) & ~(int.sizeof - 1));
	return arg;
	*/
	T t; return t;
  40eb47:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40eb4e:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
  40eb51:	c9                   	leaveq 
  40eb52:	c3                   	retq   
  40eb53:	90                   	nop    

000000000040eb54 <_D5libos8keyboard8Keyboard4initFZv>:
struct Keyboard
{

static:

	void init()
  40eb54:	55                   	push   %rbp
  40eb55:	48 89 e5             	mov    %rsp,%rbp
  40eb58:	48 83 ec 20          	sub    $0x20,%rsp
	{
		kInfo = Syscall.initKeyboard();
  40eb5c:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  40eb60:	e8 47 ef ff ff       	callq  40daac <_D4user7syscall12initKeyboardFZS4user7syscall12KeyboardInfo>
  40eb65:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40eb69:	48 89 05 50 0d 01 00 	mov    %rax,0x10d50(%rip)        # 41f8c0 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo>
  40eb70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40eb74:	48 89 05 4d 0d 01 00 	mov    %rax,0x10d4d(%rip)        # 41f8c8 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x8>
  40eb7b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40eb7f:	48 89 05 4a 0d 01 00 	mov    %rax,0x10d4a(%rip)        # 41f8d0 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x10>
  40eb86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40eb8a:	48 89 05 47 0d 01 00 	mov    %rax,0x10d47(%rip)        # 41f8d8 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x18>
	}
  40eb91:	c9                   	leaveq 
  40eb92:	c3                   	retq   

000000000040eb93 <_D5libos8keyboard8Keyboard7grabKeyFZs>:

	short grabKey()
  40eb93:	55                   	push   %rbp
  40eb94:	48 89 e5             	mov    %rsp,%rbp
  40eb97:	48 83 ec 30          	sub    $0x30,%rsp
	{
		short ret = bufferGrabKey();
  40eb9b:	e8 5d 02 00 00       	callq  40edfd <_D5libos8keyboard8Keyboard13bufferGrabKeyFZs>
  40eba0:	66 89 45 fe          	mov    %ax,-0x2(%rbp)

		short key = ret;
  40eba4:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  40eba8:	66 89 45 fc          	mov    %ax,-0x4(%rbp)

		bool up;
  40ebac:	c6 45 fb 00          	movb   $0x0,-0x5(%rbp)

		if (ret < 0)
  40ebb0:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40ebb4:	85 c0                	test   %eax,%eax
  40ebb6:	79 08                	jns    40ebc0 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x2d>
		{
			up = true;
  40ebb8:	c6 45 fb 01          	movb   $0x1,-0x5(%rbp)
			ret = -ret;
  40ebbc:	66 f7 5d fe          	negw   -0x2(%rbp)
		}

		if (ret >= Key.max)
  40ebc0:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40ebc4:	83 f8 78             	cmp    $0x78,%eax
  40ebc7:	7c 0b                	jl     40ebd4 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x41>
		{
			return Key.Null;
  40ebc9:	66 c7 45 d6 00 00    	movw   $0x0,-0x2a(%rbp)
  40ebcf:	e9 f9 00 00 00       	jmpq   40eccd <_D5libos8keyboard8Keyboard7grabKeyFZs+0x13a>
		}

		keyState[ret] = !up;
  40ebd4:	48 0f bf 45 fe       	movswq -0x2(%rbp),%rax
  40ebd9:	48 83 f8 78          	cmp    $0x78,%rax
  40ebdd:	73 0b                	jae    40ebea <_D5libos8keyboard8Keyboard7grabKeyFZs+0x57>
  40ebdf:	48 0f bf 45 fe       	movswq -0x2(%rbp),%rax
  40ebe4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40ebe8:	eb 22                	jmp    40ec0c <_D5libos8keyboard8Keyboard7grabKeyFZs+0x79>
  40ebea:	48 c7 45 e0 10 00 00 	movq   $0x10,-0x20(%rbp)
  40ebf1:	00 
  40ebf2:	48 c7 45 e8 e1 45 41 	movq   $0x4145e1,-0x18(%rbp)
  40ebf9:	00 
  40ebfa:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40ebfe:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40ec02:	ba 23 00 00 00       	mov    $0x23,%edx
  40ec07:	e8 cd c0 ff ff       	callq  40acd9 <_d_array_bounds>
  40ec0c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ec10:	48 8d 90 00 f9 41 00 	lea    0x41f900(%rax),%rdx
  40ec17:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  40ec1b:	83 f0 01             	xor    $0x1,%eax
  40ec1e:	88 02                	mov    %al,(%rdx)

		if (ret == Key.LeftShift || ret == Key.RightShift)
  40ec20:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40ec24:	83 f8 2d             	cmp    $0x2d,%eax
  40ec27:	74 09                	je     40ec32 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x9f>
  40ec29:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40ec2d:	83 f8 30             	cmp    $0x30,%eax
  40ec30:	75 26                	jne    40ec58 <_D5libos8keyboard8Keyboard7grabKeyFZs+0xc5>
		{
			shiftState = keyState[Key.LeftShift] | keyState[Key.RightShift];
  40ec32:	b8 2d 00 00 00       	mov    $0x2d,%eax
  40ec37:	48 05 00 f9 41 00    	add    $0x41f900,%rax
  40ec3d:	0f b6 10             	movzbl (%rax),%edx
  40ec40:	b8 30 00 00 00       	mov    $0x30,%eax
  40ec45:	48 05 00 f9 41 00    	add    $0x41f900,%rax
  40ec4b:	0f b6 00             	movzbl (%rax),%eax
  40ec4e:	09 d0                	or     %edx,%eax
  40ec50:	88 05 8a 0c 01 00    	mov    %al,0x10c8a(%rip)        # 41f8e0 <_D5libos8keyboard8Keyboard10shiftStateb>
			return Key.Null;
		}

		keyState[ret] = !up;

		if (ret == Key.LeftShift || ret == Key.RightShift)
  40ec56:	eb 6e                	jmp    40ecc6 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x133>
		{
			shiftState = keyState[Key.LeftShift] | keyState[Key.RightShift];
		}
		else if (ret == Key.LeftControl || ret == Key.RightControl)
  40ec58:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40ec5c:	83 f8 2e             	cmp    $0x2e,%eax
  40ec5f:	74 09                	je     40ec6a <_D5libos8keyboard8Keyboard7grabKeyFZs+0xd7>
  40ec61:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40ec65:	83 f8 57             	cmp    $0x57,%eax
  40ec68:	75 26                	jne    40ec90 <_D5libos8keyboard8Keyboard7grabKeyFZs+0xfd>
		{
			ctrlState = keyState[Key.LeftControl] | keyState[Key.RightControl];
  40ec6a:	b8 2e 00 00 00       	mov    $0x2e,%eax
  40ec6f:	48 05 00 f9 41 00    	add    $0x41f900,%rax
  40ec75:	0f b6 10             	movzbl (%rax),%edx
  40ec78:	b8 57 00 00 00       	mov    $0x57,%eax
  40ec7d:	48 05 00 f9 41 00    	add    $0x41f900,%rax
  40ec83:	0f b6 00             	movzbl (%rax),%eax
  40ec86:	09 d0                	or     %edx,%eax
  40ec88:	88 05 54 0c 01 00    	mov    %al,0x10c54(%rip)        # 41f8e2 <_D5libos8keyboard8Keyboard9ctrlStateb>

		if (ret == Key.LeftShift || ret == Key.RightShift)
		{
			shiftState = keyState[Key.LeftShift] | keyState[Key.RightShift];
		}
		else if (ret == Key.LeftControl || ret == Key.RightControl)
  40ec8e:	eb 36                	jmp    40ecc6 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x133>
		{
			ctrlState = keyState[Key.LeftControl] | keyState[Key.RightControl];
		}
		else if (ret == Key.LeftAlt || ret == Key.RightAlt)
  40ec90:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40ec94:	83 f8 2f             	cmp    $0x2f,%eax
  40ec97:	74 09                	je     40eca2 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x10f>
  40ec99:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40ec9d:	83 f8 59             	cmp    $0x59,%eax
  40eca0:	75 24                	jne    40ecc6 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x133>
		{
			altState = keyState[Key.LeftAlt] | keyState[Key.RightAlt];
  40eca2:	b8 2f 00 00 00       	mov    $0x2f,%eax
  40eca7:	48 05 00 f9 41 00    	add    $0x41f900,%rax
  40ecad:	0f b6 10             	movzbl (%rax),%edx
  40ecb0:	b8 59 00 00 00       	mov    $0x59,%eax
  40ecb5:	48 05 00 f9 41 00    	add    $0x41f900,%rax
  40ecbb:	0f b6 00             	movzbl (%rax),%eax
  40ecbe:	09 d0                	or     %edx,%eax
  40ecc0:	88 05 1b 0c 01 00    	mov    %al,0x10c1b(%rip)        # 41f8e1 <_D5libos8keyboard8Keyboard8altStateb>
		}

		return key;
  40ecc6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40ecc9:	66 89 45 d6          	mov    %ax,-0x2a(%rbp)
  40eccd:	0f b7 45 d6          	movzwl -0x2a(%rbp),%eax
	}
  40ecd1:	c9                   	leaveq 
  40ecd2:	c3                   	retq   

000000000040ecd3 <_D5libos8keyboard8Keyboard13translateCodeFsZa>:

	char translateCode(short code)
  40ecd3:	55                   	push   %rbp
  40ecd4:	48 89 e5             	mov    %rsp,%rbp
  40ecd7:	48 83 ec 50          	sub    $0x50,%rsp
  40ecdb:	66 89 7d ce          	mov    %di,-0x32(%rbp)
	{
		if (code <= 0) { return '\0'; }
  40ecdf:	0f bf 45 ce          	movswl -0x32(%rbp),%eax
  40ece3:	85 c0                	test   %eax,%eax
  40ece5:	7f 09                	jg     40ecf0 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0x1d>
  40ece7:	c6 45 b7 00          	movb   $0x0,-0x49(%rbp)
  40eceb:	e9 b9 00 00 00       	jmpq   40eda9 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0xd6>

		// these translations only work on positive values
		// therefore, all up states must be ignored

		char ret;
  40ecf0:	c6 45 ff ff          	movb   $0xff,-0x1(%rbp)
		if (shiftState)
  40ecf4:	0f b6 05 e5 0b 01 00 	movzbl 0x10be5(%rip),%eax        # 41f8e0 <_D5libos8keyboard8Keyboard10shiftStateb>
  40ecfb:	84 c0                	test   %al,%al
  40ecfd:	74 4a                	je     40ed49 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0x76>
		{
			ret = translateShift[code];
  40ecff:	48 0f bf 45 ce       	movswq -0x32(%rbp),%rax
  40ed04:	48 83 f8 78          	cmp    $0x78,%rax
  40ed08:	73 0b                	jae    40ed15 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0x42>
  40ed0a:	48 0f bf 45 ce       	movswq -0x32(%rbp),%rax
  40ed0f:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40ed13:	eb 22                	jmp    40ed37 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0x64>
  40ed15:	48 c7 45 d0 10 00 00 	movq   $0x10,-0x30(%rbp)
  40ed1c:	00 
  40ed1d:	48 c7 45 d8 e1 45 41 	movq   $0x4145e1,-0x28(%rbp)
  40ed24:	00 
  40ed25:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40ed29:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40ed2d:	ba 3f 00 00 00       	mov    $0x3f,%edx
  40ed32:	e8 a2 bf ff ff       	callq  40acd9 <_d_array_bounds>
  40ed37:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40ed3b:	48 05 c0 d3 41 00    	add    $0x41d3c0,%rax
  40ed41:	0f b6 00             	movzbl (%rax),%eax
  40ed44:	88 45 ff             	mov    %al,-0x1(%rbp)
  40ed47:	eb 48                	jmp    40ed91 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0xbe>
		}
		else
		{
			ret = translate[code];
  40ed49:	48 0f bf 45 ce       	movswq -0x32(%rbp),%rax
  40ed4e:	48 83 f8 78          	cmp    $0x78,%rax
  40ed52:	73 0b                	jae    40ed5f <_D5libos8keyboard8Keyboard13translateCodeFsZa+0x8c>
  40ed54:	48 0f bf 45 ce       	movswq -0x32(%rbp),%rax
  40ed59:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40ed5d:	eb 22                	jmp    40ed81 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0xae>
  40ed5f:	48 c7 45 e0 10 00 00 	movq   $0x10,-0x20(%rbp)
  40ed66:	00 
  40ed67:	48 c7 45 e8 e1 45 41 	movq   $0x4145e1,-0x18(%rbp)
  40ed6e:	00 
  40ed6f:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40ed73:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40ed77:	ba 43 00 00 00       	mov    $0x43,%edx
  40ed7c:	e8 58 bf ff ff       	callq  40acd9 <_d_array_bounds>
  40ed81:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40ed85:	48 05 40 d3 41 00    	add    $0x41d340,%rax
  40ed8b:	0f b6 00             	movzbl (%rax),%eax
  40ed8e:	88 45 ff             	mov    %al,-0x1(%rbp)
		}

		if (ret != '\xFF')
  40ed91:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40ed95:	3d ff 00 00 00       	cmp    $0xff,%eax
  40ed9a:	74 09                	je     40eda5 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0xd2>
		{
			return ret;
  40ed9c:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40eda0:	88 45 b7             	mov    %al,-0x49(%rbp)
  40eda3:	eb 04                	jmp    40eda9 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0xd6>
		}

		return '\0';
  40eda5:	c6 45 b7 00          	movb   $0x0,-0x49(%rbp)
  40eda9:	0f b6 45 b7          	movzbl -0x49(%rbp),%eax
	}
  40edad:	c9                   	leaveq 
  40edae:	c3                   	retq   

000000000040edaf <_D5libos8keyboard8Keyboard8grabCharFZa>:

	// block until a printable character is detected
	char grabChar()
  40edaf:	55                   	push   %rbp
  40edb0:	48 89 e5             	mov    %rsp,%rbp
  40edb3:	48 83 ec 20          	sub    $0x20,%rsp
	{
		short key;
  40edb7:	66 c7 45 fe 00 00    	movw   $0x0,-0x2(%rbp)
		char ret;
  40edbd:	c6 45 fd ff          	movb   $0xff,-0x3(%rbp)

		for(;;)
  40edc1:	b8 00 00 00 00       	mov    $0x0,%eax
  40edc6:	84 c0                	test   %al,%al
  40edc8:	75 29                	jne    40edf3 <_D5libos8keyboard8Keyboard8grabCharFZa+0x44>
		{
			key = grabKey();
  40edca:	e8 c4 fd ff ff       	callq  40eb93 <_D5libos8keyboard8Keyboard7grabKeyFZs>
  40edcf:	66 89 45 fe          	mov    %ax,-0x2(%rbp)

			ret = translateCode(key);
  40edd3:	0f bf 7d fe          	movswl -0x2(%rbp),%edi
  40edd7:	e8 f7 fe ff ff       	callq  40ecd3 <_D5libos8keyboard8Keyboard13translateCodeFsZa>
  40eddc:	88 45 fd             	mov    %al,-0x3(%rbp)

			if (ret != '\xFF')
  40eddf:	0f b6 45 fd          	movzbl -0x3(%rbp),%eax
  40ede3:	3d ff 00 00 00       	cmp    $0xff,%eax
  40ede8:	74 d7                	je     40edc1 <_D5libos8keyboard8Keyboard8grabCharFZa+0x12>
			{
				return ret;
  40edea:	0f b6 45 fd          	movzbl -0x3(%rbp),%eax
  40edee:	88 45 ef             	mov    %al,-0x11(%rbp)
  40edf1:	eb 04                	jmp    40edf7 <_D5libos8keyboard8Keyboard8grabCharFZa+0x48>
			}
		}

		return 0;
  40edf3:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  40edf7:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
	}
  40edfb:	c9                   	leaveq 
  40edfc:	c3                   	retq   

000000000040edfd <_D5libos8keyboard8Keyboard13bufferGrabKeyFZs>:
		Key.Minus: '_', Key.Equals: '+', Key.Quote: '~', Key.Apostrophe: '"',

		Key.Return: '\n', Key.Space: ' ',
	];

	short bufferGrabKey()
  40edfd:	55                   	push   %rbp
  40edfe:	48 89 e5             	mov    %rsp,%rbp
	{
		if ((*kInfo.writePointer) != (*kInfo.readPointer) &&
  40ee01:	48 8b 05 c8 0a 01 00 	mov    0x10ac8(%rip),%rax        # 41f8d0 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x10>
  40ee08:	8b 10                	mov    (%rax),%edx
  40ee0a:	48 8b 05 c7 0a 01 00 	mov    0x10ac7(%rip),%rax        # 41f8d8 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x18>
  40ee11:	8b 00                	mov    (%rax),%eax
  40ee13:	39 c2                	cmp    %eax,%edx
  40ee15:	74 3d                	je     40ee54 <_D5libos8keyboard8Keyboard13bufferGrabKeyFZs+0x57>
  40ee17:	48 8b 05 ba 0a 01 00 	mov    0x10aba(%rip),%rax        # 41f8d8 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x18>
  40ee1e:	8b 00                	mov    (%rax),%eax
  40ee20:	89 c2                	mov    %eax,%edx
  40ee22:	8b 05 a0 0a 01 00    	mov    0x10aa0(%rip),%eax        # 41f8c8 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x8>
  40ee28:	39 c2                	cmp    %eax,%edx
  40ee2a:	73 28                	jae    40ee54 <_D5libos8keyboard8Keyboard13bufferGrabKeyFZs+0x57>
			((*kInfo.readPointer) < (kInfo.bufferLength)))
		{
			return kInfo.buffer[(*kInfo.readPointer)++];
  40ee2c:	48 8b 0d 8d 0a 01 00 	mov    0x10a8d(%rip),%rcx        # 41f8c0 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo>
  40ee33:	48 8b 35 9e 0a 01 00 	mov    0x10a9e(%rip),%rsi        # 41f8d8 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x18>
  40ee3a:	8b 16                	mov    (%rsi),%edx
  40ee3c:	48 63 c2             	movslq %edx,%rax
  40ee3f:	48 01 c0             	add    %rax,%rax
  40ee42:	48 8d 04 01          	lea    (%rcx,%rax,1),%rax
  40ee46:	0f b7 00             	movzwl (%rax),%eax
  40ee49:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
  40ee4d:	8d 42 01             	lea    0x1(%rdx),%eax
  40ee50:	89 06                	mov    %eax,(%rsi)
  40ee52:	eb 1f                	jmp    40ee73 <_D5libos8keyboard8Keyboard13bufferGrabKeyFZs+0x76>
		}
		else
		{
			return kInfo.buffer[kInfo.bufferLength - 1];
  40ee54:	48 8b 15 65 0a 01 00 	mov    0x10a65(%rip),%rdx        # 41f8c0 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo>
  40ee5b:	8b 05 67 0a 01 00    	mov    0x10a67(%rip),%eax        # 41f8c8 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x8>
  40ee61:	ff c8                	dec    %eax
  40ee63:	89 c0                	mov    %eax,%eax
  40ee65:	48 01 c0             	add    %rax,%rax
  40ee68:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40ee6c:	0f b7 00             	movzwl (%rax),%eax
  40ee6f:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
  40ee73:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
		}

		return 0;
	}
  40ee77:	c9                   	leaveq 
  40ee78:	c3                   	retq   
  40ee79:	90                   	nop    
  40ee7a:	90                   	nop    
  40ee7b:	90                   	nop    

000000000040ee7c <_D5libos7console7Console4initFZv>:

struct Console {

static:

	void init()
  40ee7c:	55                   	push   %rbp
  40ee7d:	48 89 e5             	mov    %rsp,%rbp
  40ee80:	48 83 ec 20          	sub    $0x20,%rsp
	{
		cInfo = initConsole();
  40ee84:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  40ee88:	e8 8a ec ff ff       	callq  40db17 <_D4user7syscall11initConsoleFZS4user7syscall11ConsoleInfo>
  40ee8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ee91:	48 89 05 e8 0a 01 00 	mov    %rax,0x10ae8(%rip)        # 41f980 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40ee98:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ee9c:	48 89 05 e5 0a 01 00 	mov    %rax,0x10ae5(%rip)        # 41f988 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40eea3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40eea7:	48 89 05 e2 0a 01 00 	mov    %rax,0x10ae2(%rip)        # 41f990 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x10>
  40eeae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40eeb2:	48 89 05 df 0a 01 00 	mov    %rax,0x10adf(%rip)        # 41f998 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
	}
  40eeb9:	c9                   	leaveq 
  40eeba:	c3                   	retq   

000000000040eebb <_D5libos7console7Console11setPositionFiiZv>:

	void setPosition(int x, int y)
  40eebb:	55                   	push   %rbp
  40eebc:	48 89 e5             	mov    %rsp,%rbp
  40eebf:	89 7d fc             	mov    %edi,-0x4(%rbp)
  40eec2:	89 75 f8             	mov    %esi,-0x8(%rbp)
	{
		if ((x < 0 || x >= cInfo.xMax) &&
  40eec5:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40eec9:	78 0b                	js     40eed6 <_D5libos7console7Console11setPositionFiiZv+0x1b>
  40eecb:	8b 05 af 0a 01 00    	mov    0x10aaf(%rip),%eax        # 41f980 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40eed1:	39 45 fc             	cmp    %eax,-0x4(%rbp)
  40eed4:	7c 13                	jl     40eee9 <_D5libos7console7Console11setPositionFiiZv+0x2e>
  40eed6:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  40eeda:	78 1f                	js     40eefb <_D5libos7console7Console11setPositionFiiZv+0x40>
  40eedc:	8b 05 a2 0a 01 00    	mov    0x10aa2(%rip),%eax        # 41f984 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x4>
  40eee2:	39 45 f8             	cmp    %eax,-0x8(%rbp)
  40eee5:	7c 02                	jl     40eee9 <_D5libos7console7Console11setPositionFiiZv+0x2e>
			(y < 0 || y >= cInfo.yMax))
		{
			return;
  40eee7:	eb 12                	jmp    40eefb <_D5libos7console7Console11setPositionFiiZv+0x40>
		}

		// XXX: LOCK!!!
		cInfo.xPos = x;
  40eee9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40eeec:	89 05 96 0a 01 00    	mov    %eax,0x10a96(%rip)        # 41f988 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
		cInfo.yPos = y;
  40eef2:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40eef5:	89 05 91 0a 01 00    	mov    %eax,0x10a91(%rip)        # 41f98c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
	}
  40eefb:	c9                   	leaveq 
  40eefc:	c3                   	retq   

000000000040eefd <_D5libos7console7Console11getPositionFJiJiZv>:

	void getPosition(out int x, out int y)
  40eefd:	55                   	push   %rbp
  40eefe:	48 89 e5             	mov    %rsp,%rbp
  40ef01:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ef05:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40ef09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ef0d:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  40ef13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40ef17:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
	{
		x = cInfo.xPos;
  40ef1d:	8b 15 65 0a 01 00    	mov    0x10a65(%rip),%edx        # 41f988 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40ef23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ef27:	89 10                	mov    %edx,(%rax)
		y = cInfo.yPos;
  40ef29:	8b 15 5d 0a 01 00    	mov    0x10a5d(%rip),%edx        # 41f98c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40ef2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40ef33:	89 10                	mov    %edx,(%rax)
	}
  40ef35:	c9                   	leaveq 
  40ef36:	c3                   	retq   

000000000040ef37 <_D5libos7console7Console5clearFZv>:

	void clear()
  40ef37:	55                   	push   %rbp
  40ef38:	48 89 e5             	mov    %rsp,%rbp
	{
		// LOCK
		for (int i = 0; i < cInfo.xMax * cInfo.yMax * 2; i++)
  40ef3b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40ef42:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  40ef45:	8b 15 35 0a 01 00    	mov    0x10a35(%rip),%edx        # 41f980 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40ef4b:	8b 05 33 0a 01 00    	mov    0x10a33(%rip),%eax        # 41f984 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x4>
  40ef51:	0f af c2             	imul   %edx,%eax
  40ef54:	01 c0                	add    %eax,%eax
  40ef56:	39 c1                	cmp    %eax,%ecx
  40ef58:	0f 9c c0             	setl   %al
  40ef5b:	83 f0 01             	xor    $0x1,%eax
  40ef5e:	84 c0                	test   %al,%al
  40ef60:	75 31                	jne    40ef93 <_D5libos7console7Console5clearFZv+0x5c>
		{
			volatile *(cInfo.buffer + i) = 0;
  40ef62:	48 8b 15 2f 0a 01 00 	mov    0x10a2f(%rip),%rdx        # 41f998 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40ef69:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40ef6c:	48 98                	cltq   
  40ef6e:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40ef72:	c6 00 00             	movb   $0x0,(%rax)

			cInfo.xPos = 0;
  40ef75:	c7 05 09 0a 01 00 00 	movl   $0x0,0x10a09(%rip)        # 41f988 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40ef7c:	00 00 00 
			cInfo.yPos = 0;
  40ef7f:	c7 05 03 0a 01 00 00 	movl   $0x0,0x10a03(%rip)        # 41f98c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40ef86:	00 00 00 
  40ef89:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40ef8c:	ff c0                	inc    %eax
  40ef8e:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40ef91:	eb af                	jmp    40ef42 <_D5libos7console7Console5clearFZv+0xb>
		}
	}
  40ef93:	c9                   	leaveq 
  40ef94:	c3                   	retq   

000000000040ef95 <_D5libos7console7Console11printStringFAaZv>:

	void printString(char[] str)
  40ef95:	55                   	push   %rbp
  40ef96:	48 89 e5             	mov    %rsp,%rbp
  40ef99:	48 83 ec 10          	sub    $0x10,%rsp
  40ef9d:	48 89 f8             	mov    %rdi,%rax
  40efa0:	48 89 f2             	mov    %rsi,%rdx
  40efa3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40efa7:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
	{
		// LOCK
		putString(str);
  40efab:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40efaf:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40efb3:	e8 2b 02 00 00       	callq  40f1e3 <_D5libos7console7Console9putStringFAaZv>
	}
  40efb8:	c9                   	leaveq 
  40efb9:	c3                   	retq   

000000000040efba <_D5libos7console7Console9printCharFaZv>:

	void printChar(char c)
  40efba:	55                   	push   %rbp
  40efbb:	48 89 e5             	mov    %rsp,%rbp
  40efbe:	48 83 ec 10          	sub    $0x10,%rsp
  40efc2:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
	{
		// LOCK
		putChar(c);
  40efc6:	0f b6 7d ff          	movzbl -0x1(%rbp),%edi
  40efca:	e8 6b 02 00 00       	callq  40f23a <_D5libos7console7Console7putCharFaZv>
	}
  40efcf:	c9                   	leaveq 
  40efd0:	c3                   	retq   

000000000040efd1 <_D5libos7console7Console11resetColorsFZv>:

	void resetColors()
  40efd1:	55                   	push   %rbp
  40efd2:	48 89 e5             	mov    %rsp,%rbp
	{
		curColor = Color.LightGray;
  40efd5:	c6 05 d0 e4 00 00 07 	movb   $0x7,0xe4d0(%rip)        # 41d4ac <_D5libos7console7Console8curColorh>
	}
  40efdc:	c9                   	leaveq 
  40efdd:	c3                   	retq   

000000000040efde <_D5libos7console7Console12setForeColorFE5libos7console5ColorZv>:

	void setForeColor(Color newColor)
  40efde:	55                   	push   %rbp
  40efdf:	48 89 e5             	mov    %rsp,%rbp
  40efe2:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
	{
		curColor &= newColor | 0xF0;
  40efe6:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  40efea:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
  40efef:	09 c2                	or     %eax,%edx
  40eff1:	0f b6 05 b4 e4 00 00 	movzbl 0xe4b4(%rip),%eax        # 41d4ac <_D5libos7console7Console8curColorh>
  40eff8:	21 d0                	and    %edx,%eax
  40effa:	88 05 ac e4 00 00    	mov    %al,0xe4ac(%rip)        # 41d4ac <_D5libos7console7Console8curColorh>
	}
  40f000:	c9                   	leaveq 
  40f001:	c3                   	retq   

000000000040f002 <_D5libos7console7Console12setBackColorFE5libos7console5ColorZv>:

	void setBackColor(Color newColor)
  40f002:	55                   	push   %rbp
  40f003:	48 89 e5             	mov    %rsp,%rbp
  40f006:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
	{
		curColor &= (newColor << 4) | 0x0F;
  40f00a:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40f00e:	c1 e0 04             	shl    $0x4,%eax
  40f011:	89 c2                	mov    %eax,%edx
  40f013:	83 ca 0f             	or     $0xf,%edx
  40f016:	0f b6 05 8f e4 00 00 	movzbl 0xe48f(%rip),%eax        # 41d4ac <_D5libos7console7Console8curColorh>
  40f01d:	21 d0                	and    %edx,%eax
  40f01f:	88 05 87 e4 00 00    	mov    %al,0xe487(%rip)        # 41d4ac <_D5libos7console7Console8curColorh>
	}
  40f025:	c9                   	leaveq 
  40f026:	c3                   	retq   

000000000040f027 <_D5libos7console7Console9setColorsFE5libos7console5ColorE5libos7console5ColorZv>:

	void setColors(Color foreColor, Color backColor)
  40f027:	55                   	push   %rbp
  40f028:	48 89 e5             	mov    %rsp,%rbp
  40f02b:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
  40f02f:	40 88 75 fe          	mov    %sil,-0x2(%rbp)
	{
		curColor = (foreColor & 0x0F) | (backColor << 4);
  40f033:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40f037:	89 c2                	mov    %eax,%edx
  40f039:	83 e2 0f             	and    $0xf,%edx
  40f03c:	0f b6 45 fe          	movzbl -0x2(%rbp),%eax
  40f040:	c1 e0 04             	shl    $0x4,%eax
  40f043:	09 d0                	or     %edx,%eax
  40f045:	88 05 61 e4 00 00    	mov    %al,0xe461(%rip)        # 41d4ac <_D5libos7console7Console8curColorh>
	}
  40f04b:	c9                   	leaveq 
  40f04c:	c3                   	retq   

000000000040f04d <_D5libos7console7Console6scrollFiZv>:

	void scroll(int amt)
  40f04d:	55                   	push   %rbp
  40f04e:	48 89 e5             	mov    %rsp,%rbp
  40f051:	48 83 ec 28          	sub    $0x28,%rsp
  40f055:	89 7d dc             	mov    %edi,-0x24(%rbp)
	{
		// do nothing for invalid line count
		if (amt <= 0) { return; }
  40f058:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  40f05c:	0f 8e 7f 01 00 00    	jle    40f1e1 <_D5libos7console7Console6scrollFiZv+0x194>

		// just clear if it wants to scroll everything
		if (amt >= cInfo.yMax) { clear(); return; }
  40f062:	8b 05 1c 09 01 00    	mov    0x1091c(%rip),%eax        # 41f984 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x4>
  40f068:	39 45 dc             	cmp    %eax,-0x24(%rbp)
  40f06b:	7c 0a                	jl     40f077 <_D5libos7console7Console6scrollFiZv+0x2a>
  40f06d:	e8 c5 fe ff ff       	callq  40ef37 <_D5libos7console7Console5clearFZv>
  40f072:	e9 6a 01 00 00       	jmpq   40f1e1 <_D5libos7console7Console6scrollFiZv+0x194>

		// go through and copy the proper amount to increase
		// the lines on the screen
		int cury = 0;
  40f077:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
		int offset1 = 0 * cInfo.xMax;
  40f07e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
		int offset2 = amt * cInfo.xMax;
  40f085:	8b 05 f5 08 01 00    	mov    0x108f5(%rip),%eax        # 41f980 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40f08b:	8b 55 dc             	mov    -0x24(%rbp),%edx
  40f08e:	0f af c2             	imul   %edx,%eax
  40f091:	89 45 ec             	mov    %eax,-0x14(%rbp)

		for(; cury <= cInfo.yMax - amt; cury++)
  40f094:	8b 05 ea 08 01 00    	mov    0x108ea(%rip),%eax        # 41f984 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x4>
  40f09a:	2b 45 dc             	sub    -0x24(%rbp),%eax
  40f09d:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  40f0a0:	0f 9e c0             	setle  %al
  40f0a3:	83 f0 01             	xor    $0x1,%eax
  40f0a6:	84 c0                	test   %al,%al
  40f0a8:	0f 85 9d 00 00 00    	jne    40f14b <_D5libos7console7Console6scrollFiZv+0xfe>
		{
			for (int curx = 0; curx < cInfo.xMax; curx++)
  40f0ae:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  40f0b5:	8b 05 c5 08 01 00    	mov    0x108c5(%rip),%eax        # 41f980 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40f0bb:	39 45 f8             	cmp    %eax,-0x8(%rbp)
  40f0be:	0f 9c c0             	setl   %al
  40f0c1:	83 f0 01             	xor    $0x1,%eax
  40f0c4:	84 c0                	test   %al,%al
  40f0c6:	75 72                	jne    40f13a <_D5libos7console7Console6scrollFiZv+0xed>
			{
				*(cInfo.buffer + (curx + offset1) * 2) =
  40f0c8:	48 8b 15 c9 08 01 00 	mov    0x108c9(%rip),%rdx        # 41f998 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40f0cf:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40f0d2:	03 45 f8             	add    -0x8(%rbp),%eax
  40f0d5:	01 c0                	add    %eax,%eax
  40f0d7:	48 98                	cltq   
  40f0d9:	48 01 c2             	add    %rax,%rdx
  40f0dc:	48 8b 0d b5 08 01 00 	mov    0x108b5(%rip),%rcx        # 41f998 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40f0e3:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40f0e6:	03 45 f8             	add    -0x8(%rbp),%eax
  40f0e9:	03 45 ec             	add    -0x14(%rbp),%eax
  40f0ec:	01 c0                	add    %eax,%eax
  40f0ee:	48 98                	cltq   
  40f0f0:	48 8d 04 01          	lea    (%rcx,%rax,1),%rax
  40f0f4:	0f b6 00             	movzbl (%rax),%eax
  40f0f7:	88 02                	mov    %al,(%rdx)
					*(cInfo.buffer + (curx + offset1 + offset2) * 2);
				*(cInfo.buffer + (curx + offset1) * 2 + 1) =
  40f0f9:	48 8b 15 98 08 01 00 	mov    0x10898(%rip),%rdx        # 41f998 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40f100:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40f103:	03 45 f8             	add    -0x8(%rbp),%eax
  40f106:	01 c0                	add    %eax,%eax
  40f108:	48 98                	cltq   
  40f10a:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40f10e:	48 8d 48 01          	lea    0x1(%rax),%rcx
  40f112:	48 8b 15 7f 08 01 00 	mov    0x1087f(%rip),%rdx        # 41f998 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40f119:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40f11c:	03 45 f8             	add    -0x8(%rbp),%eax
  40f11f:	03 45 ec             	add    -0x14(%rbp),%eax
  40f122:	01 c0                	add    %eax,%eax
  40f124:	48 98                	cltq   
  40f126:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40f12a:	48 ff c0             	inc    %rax
  40f12d:	0f b6 00             	movzbl (%rax),%eax
  40f130:	88 01                	mov    %al,(%rcx)
  40f132:	ff 45 f8             	incl   -0x8(%rbp)
  40f135:	e9 7b ff ff ff       	jmpq   40f0b5 <_D5libos7console7Console6scrollFiZv+0x68>
					*(cInfo.buffer + (curx + offset1 + offset2) * 2 + 1);
			}

			offset1 += cInfo.xMax;
  40f13a:	8b 05 40 08 01 00    	mov    0x10840(%rip),%eax        # 41f980 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40f140:	01 45 f0             	add    %eax,-0x10(%rbp)
  40f143:	ff 45 f4             	incl   -0xc(%rbp)
  40f146:	e9 49 ff ff ff       	jmpq   40f094 <_D5libos7console7Console6scrollFiZv+0x47>
		}

		for(; cury <= cInfo.yMax; cury++)
  40f14b:	8b 05 33 08 01 00    	mov    0x10833(%rip),%eax        # 41f984 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x4>
  40f151:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  40f154:	0f 9e c0             	setle  %al
  40f157:	83 f0 01             	xor    $0x1,%eax
  40f15a:	84 c0                	test   %al,%al
  40f15c:	75 60                	jne    40f1be <_D5libos7console7Console6scrollFiZv+0x171>
		{
			for (int curx = 0; curx < cInfo.xMax; curx++)
  40f15e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40f165:	8b 05 15 08 01 00    	mov    0x10815(%rip),%eax        # 41f980 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40f16b:	39 45 fc             	cmp    %eax,-0x4(%rbp)
  40f16e:	0f 9c c0             	setl   %al
  40f171:	83 f0 01             	xor    $0x1,%eax
  40f174:	84 c0                	test   %al,%al
  40f176:	75 38                	jne    40f1b0 <_D5libos7console7Console6scrollFiZv+0x163>
			{
				*(cInfo.buffer + (curx + offset1) * 2) = 0x00;
  40f178:	48 8b 15 19 08 01 00 	mov    0x10819(%rip),%rdx        # 41f998 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40f17f:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40f182:	03 45 fc             	add    -0x4(%rbp),%eax
  40f185:	01 c0                	add    %eax,%eax
  40f187:	48 98                	cltq   
  40f189:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40f18d:	c6 00 00             	movb   $0x0,(%rax)
				*(cInfo.buffer + (curx + offset1) * 2 + 1) = 0x00;
  40f190:	48 8b 15 01 08 01 00 	mov    0x10801(%rip),%rdx        # 41f998 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40f197:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40f19a:	03 45 fc             	add    -0x4(%rbp),%eax
  40f19d:	01 c0                	add    %eax,%eax
  40f19f:	48 98                	cltq   
  40f1a1:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40f1a5:	48 ff c0             	inc    %rax
  40f1a8:	c6 00 00             	movb   $0x0,(%rax)
  40f1ab:	ff 45 fc             	incl   -0x4(%rbp)
  40f1ae:	eb b5                	jmp    40f165 <_D5libos7console7Console6scrollFiZv+0x118>
			}

			offset1 += cInfo.xMax;
  40f1b0:	8b 05 ca 07 01 00    	mov    0x107ca(%rip),%eax        # 41f980 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40f1b6:	01 45 f0             	add    %eax,-0x10(%rbp)
  40f1b9:	ff 45 f4             	incl   -0xc(%rbp)
  40f1bc:	eb 8d                	jmp    40f14b <_D5libos7console7Console6scrollFiZv+0xfe>
		}

		cInfo.yPos -= amt;
  40f1be:	8b 05 c8 07 01 00    	mov    0x107c8(%rip),%eax        # 41f98c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40f1c4:	2b 45 dc             	sub    -0x24(%rbp),%eax
  40f1c7:	89 05 bf 07 01 00    	mov    %eax,0x107bf(%rip)        # 41f98c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>

		if (cInfo.yPos < 0)
  40f1cd:	8b 05 b9 07 01 00    	mov    0x107b9(%rip),%eax        # 41f98c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40f1d3:	85 c0                	test   %eax,%eax
  40f1d5:	79 0a                	jns    40f1e1 <_D5libos7console7Console6scrollFiZv+0x194>
		{
			cInfo.yPos = 0;
  40f1d7:	c7 05 ab 07 01 00 00 	movl   $0x0,0x107ab(%rip)        # 41f98c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40f1de:	00 00 00 
		}
	}
  40f1e1:	c9                   	leaveq 
  40f1e2:	c3                   	retq   

000000000040f1e3 <_D5libos7console7Console9putStringFAaZv>:

	ubyte curColor = Color.LightGray;


	// non-locked functions
	void putString(char[] str)
  40f1e3:	55                   	push   %rbp
  40f1e4:	48 89 e5             	mov    %rsp,%rbp
  40f1e7:	48 83 ec 30          	sub    $0x30,%rsp
  40f1eb:	48 89 f8             	mov    %rdi,%rax
  40f1ee:	48 89 f2             	mov    %rsi,%rdx
  40f1f1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40f1f5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{
		foreach(chr; str)
  40f1f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f1fd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40f201:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40f205:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40f209:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f20d:	48 03 45 d8          	add    -0x28(%rbp),%rax
  40f211:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40f215:	0f 95 c0             	setne  %al
  40f218:	83 f0 01             	xor    $0x1,%eax
  40f21b:	84 c0                	test   %al,%al
  40f21d:	75 19                	jne    40f238 <_D5libos7console7Console9putStringFAaZv+0x55>
  40f21f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40f223:	0f b6 00             	movzbl (%rax),%eax
  40f226:	88 45 ff             	mov    %al,-0x1(%rbp)
		{
			printChar(chr);
  40f229:	0f b6 7d ff          	movzbl -0x1(%rbp),%edi
  40f22d:	e8 88 fd ff ff       	callq  40efba <_D5libos7console7Console9printCharFaZv>
  40f232:	48 ff 45 f0          	incq   -0x10(%rbp)
  40f236:	eb d1                	jmp    40f209 <_D5libos7console7Console9putStringFAaZv+0x26>
		}
	}
  40f238:	c9                   	leaveq 
  40f239:	c3                   	retq   

000000000040f23a <_D5libos7console7Console7putCharFaZv>:

	void putChar(char c)
  40f23a:	55                   	push   %rbp
  40f23b:	48 89 e5             	mov    %rsp,%rbp
  40f23e:	48 83 ec 08          	sub    $0x8,%rsp
  40f242:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
	{
		if (c == '\n' || c == '\r')
  40f246:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40f24a:	0f b6 c0             	movzbl %al,%eax
  40f24d:	83 f8 0a             	cmp    $0xa,%eax
  40f250:	74 0c                	je     40f25e <_D5libos7console7Console7putCharFaZv+0x24>
  40f252:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40f256:	0f b6 c0             	movzbl %al,%eax
  40f259:	83 f8 0d             	cmp    $0xd,%eax
  40f25c:	75 11                	jne    40f26f <_D5libos7console7Console7putCharFaZv+0x35>
		{
			// this will force a new line
			cInfo.xPos = cInfo.xMax;
  40f25e:	8b 05 1c 07 01 00    	mov    0x1071c(%rip),%eax        # 41f980 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40f264:	89 05 1e 07 01 00    	mov    %eax,0x1071e(%rip)        # 41f988 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
		}
	}

	void putChar(char c)
	{
		if (c == '\n' || c == '\r')
  40f26a:	e9 93 00 00 00       	jmpq   40f302 <_D5libos7console7Console7putCharFaZv+0xc8>
		{
			// this will force a new line
			cInfo.xPos = cInfo.xMax;
		}
		else if (c == '\t')
  40f26f:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40f273:	0f b6 c0             	movzbl %al,%eax
  40f276:	83 f8 09             	cmp    $0x9,%eax
  40f279:	75 11                	jne    40f28c <_D5libos7console7Console7putCharFaZv+0x52>
		{
			// increment by the tab length
			cInfo.xPos += Tabstop;
  40f27b:	8b 05 07 07 01 00    	mov    0x10707(%rip),%eax        # 41f988 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40f281:	83 c0 04             	add    $0x4,%eax
  40f284:	89 05 fe 06 01 00    	mov    %eax,0x106fe(%rip)        # 41f988 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40f28a:	eb 76                	jmp    40f302 <_D5libos7console7Console7putCharFaZv+0xc8>
		}
		else
		{
			volatile *(cInfo.buffer + (cInfo.xPos + (cInfo.yPos * cInfo.xMax)) * 2) = c & 0xFF;
  40f28c:	48 8b 35 05 07 01 00 	mov    0x10705(%rip),%rsi        # 41f998 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40f293:	8b 0d ef 06 01 00    	mov    0x106ef(%rip),%ecx        # 41f988 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40f299:	8b 15 ed 06 01 00    	mov    0x106ed(%rip),%edx        # 41f98c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40f29f:	8b 05 db 06 01 00    	mov    0x106db(%rip),%eax        # 41f980 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40f2a5:	0f af c2             	imul   %edx,%eax
  40f2a8:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  40f2ab:	01 c0                	add    %eax,%eax
  40f2ad:	48 98                	cltq   
  40f2af:	48 8d 0c 06          	lea    (%rsi,%rax,1),%rcx
  40f2b3:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  40f2b7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  40f2bc:	21 d0                	and    %edx,%eax
  40f2be:	88 01                	mov    %al,(%rcx)
			volatile *(cInfo.buffer + (cInfo.xPos + (cInfo.yPos * cInfo.xMax)) * 2 + 1) = curColor;
  40f2c0:	48 8b 35 d1 06 01 00 	mov    0x106d1(%rip),%rsi        # 41f998 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40f2c7:	8b 0d bb 06 01 00    	mov    0x106bb(%rip),%ecx        # 41f988 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40f2cd:	8b 15 b9 06 01 00    	mov    0x106b9(%rip),%edx        # 41f98c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40f2d3:	8b 05 a7 06 01 00    	mov    0x106a7(%rip),%eax        # 41f980 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40f2d9:	0f af c2             	imul   %edx,%eax
  40f2dc:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  40f2df:	01 c0                	add    %eax,%eax
  40f2e1:	48 98                	cltq   
  40f2e3:	48 8d 04 06          	lea    (%rsi,%rax,1),%rax
  40f2e7:	48 8d 50 01          	lea    0x1(%rax),%rdx
  40f2eb:	0f b6 05 ba e1 00 00 	movzbl 0xe1ba(%rip),%eax        # 41d4ac <_D5libos7console7Console8curColorh>
  40f2f2:	88 02                	mov    %al,(%rdx)

			cInfo.xPos++;
  40f2f4:	8b 05 8e 06 01 00    	mov    0x1068e(%rip),%eax        # 41f988 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40f2fa:	ff c0                	inc    %eax
  40f2fc:	89 05 86 06 01 00    	mov    %eax,0x10686(%rip)        # 41f988 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
		}

		if (cInfo.xPos >= cInfo.xMax)
  40f302:	8b 15 80 06 01 00    	mov    0x10680(%rip),%edx        # 41f988 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40f308:	8b 05 72 06 01 00    	mov    0x10672(%rip),%eax        # 41f980 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40f30e:	39 c2                	cmp    %eax,%edx
  40f310:	7c 32                	jl     40f344 <_D5libos7console7Console7putCharFaZv+0x10a>
		{
			cInfo.xPos = 0;
  40f312:	c7 05 6c 06 01 00 00 	movl   $0x0,0x1066c(%rip)        # 41f988 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40f319:	00 00 00 
			cInfo.yPos ++;
  40f31c:	8b 05 6a 06 01 00    	mov    0x1066a(%rip),%eax        # 41f98c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40f322:	ff c0                	inc    %eax
  40f324:	89 05 62 06 01 00    	mov    %eax,0x10662(%rip)        # 41f98c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>

			if (cInfo.yPos >= cInfo.yMax)
  40f32a:	8b 15 5c 06 01 00    	mov    0x1065c(%rip),%edx        # 41f98c <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40f330:	8b 05 4e 06 01 00    	mov    0x1064e(%rip),%eax        # 41f984 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x4>
  40f336:	39 c2                	cmp    %eax,%edx
  40f338:	7c 0a                	jl     40f344 <_D5libos7console7Console7putCharFaZv+0x10a>
			{
				scroll(1);
  40f33a:	bf 01 00 00 00       	mov    $0x1,%edi
  40f33f:	e8 09 fd ff ff       	callq  40f04d <_D5libos7console7Console6scrollFiZv>
			}
		}
	}
  40f344:	c9                   	leaveq 
  40f345:	c3                   	retq   
