
application/xsh:     file format elf64-x86-64

Disassembly of section .text:

0000000000400078 <_Dmain>:
import libos.console;

char[] prompt = "$> ";
bool intfic = false;

int main() {
  400078:	55                   	push   %rbp
  400079:	48 89 e5             	mov    %rsp,%rbp
  40007c:	48 81 ec 50 03 00 00 	sub    $0x350,%rsp

  // init the keyboard libOS
  Keyboard.init();
  400083:	e8 38 ec 00 00       	callq  40ecc0 <_D5libos8keyboard8Keyboard4initFZv>
  Console.init();
  400088:	e8 5b ef 00 00       	callq  40efe8 <_D5libos7console7Console4initFZv>

  //Console.clear();
  Console.setColors(Color.White, Color.Black);
  40008d:	be 00 00 00 00       	mov    $0x0,%esi
  400092:	bf 0f 00 00 00       	mov    $0xf,%edi
  400097:	e8 f7 f0 00 00       	callq  40f193 <_D5libos7console7Console9setColorsFE5libos7console5ColorE5libos7console5ColorZv>

  // print the initial text
  Console.printString("xsh: XOmB shell\n\n");
  40009c:	48 c7 85 e0 fe ff ff 	movq   $0x11,-0x120(%rbp)
  4000a3:	11 00 00 00 
  4000a7:	48 c7 85 e8 fe ff ff 	movq   $0x40f560,-0x118(%rbp)
  4000ae:	60 f5 40 00 
  4000b2:	48 8b bd e0 fe ff ff 	mov    -0x120(%rbp),%rdi
  4000b9:	48 8b b5 e8 fe ff ff 	mov    -0x118(%rbp),%rsi
  4000c0:	e8 3c f0 00 00       	callq  40f101 <_D5libos7console7Console11printStringFAaZv>

  // print the prompt
  print(prompt);
  4000c5:	48 8b 15 bc 9c 01 00 	mov    0x19cbc(%rip),%rdx        # 419d88 <_D11application3xsh6promptAa+0x8>
  4000cc:	48 8b 35 ad 9c 01 00 	mov    0x19cad(%rip),%rsi        # 419d80 <_D11application3xsh6promptAa>
  4000d3:	48 c7 c7 a0 9d 41 00 	mov    $0x419da0,%rdi
  4000da:	b8 00 00 00 00       	mov    $0x0,%eax
  4000df:	e8 88 e1 00 00       	callq  40e26c <_D4user7basicio5printFYv>

  // for grabing the key
  short keyCode;
  4000e4:	66 c7 45 d6 00 00    	movw   $0x0,-0x2a(%rbp)
  char key;
  4000ea:	c6 45 d5 ff          	movb   $0xff,-0x2b(%rbp)

  char[1] echoStr;
  4000ee:	48 c7 85 f0 fe ff ff 	movq   $0x1,-0x110(%rbp)
  4000f5:	01 00 00 00 
  4000f9:	48 8d 85 df fe ff ff 	lea    -0x121(%rbp),%rax
  400100:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
  400107:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  40010e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  400112:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  400119:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40011d:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  400122:	0f 95 c0             	setne  %al
  400125:	83 f0 01             	xor    $0x1,%eax
  400128:	84 c0                	test   %al,%al
  40012a:	75 11                	jne    40013d <_Dmain+0xc5>
  40012c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400130:	c6 00 ff             	movb   $0xff,(%rax)
  400133:	48 ff 45 d8          	incq   -0x28(%rbp)
  400137:	48 ff 4d e0          	decq   -0x20(%rbp)
  40013b:	eb e0                	jmp    40011d <_Dmain+0xa5>

  char[512] lineBuffer;
  40013d:	48 c7 85 00 ff ff ff 	movq   $0x200,-0x100(%rbp)
  400144:	00 02 00 00 
  400148:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
  40014f:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  400156:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40015d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  400161:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  400168:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40016c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  400171:	0f 95 c0             	setne  %al
  400174:	83 f0 01             	xor    $0x1,%eax
  400177:	84 c0                	test   %al,%al
  400179:	75 11                	jne    40018c <_Dmain+0x114>
  40017b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40017f:	c6 00 ff             	movb   $0xff,(%rax)
  400182:	48 ff 45 e8          	incq   -0x18(%rbp)
  400186:	48 ff 4d f0          	decq   -0x10(%rbp)
  40018a:	eb e0                	jmp    40016c <_Dmain+0xf4>
  int lineBufferPos = 0;
  40018c:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%rbp)

  void* buff;
  400193:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  40019a:	00 
  40019b:	eb 00                	jmp    40019d <_Dmain+0x125>

  while(true) {
  40019d:	b8 00 00 00 00       	mov    $0x0,%eax
  4001a2:	84 c0                	test   %al,%al
  4001a4:	0f 85 a9 03 00 00    	jne    400553 <_Dmain+0x4db>
    keyCode = Keyboard.grabKey();
  4001aa:	e8 50 eb 00 00       	callq  40ecff <_D5libos8keyboard8Keyboard7grabKeyFZs>
  4001af:	66 89 45 d6          	mov    %ax,-0x2a(%rbp)

    if(keyCode != Key.Null)
  4001b3:	0f bf 45 d6          	movswl -0x2a(%rbp),%eax
  4001b7:	85 c0                	test   %eax,%eax
  4001b9:	74 e2                	je     40019d <_Dmain+0x125>
    {
      key = Keyboard.translateCode(keyCode);
  4001bb:	0f bf 7d d6          	movswl -0x2a(%rbp),%edi
  4001bf:	e8 7b ec 00 00       	callq  40ee3f <_D5libos8keyboard8Keyboard13translateCodeFsZa>
  4001c4:	88 45 d5             	mov    %al,-0x2b(%rbp)

      if (key != '\0')
  4001c7:	0f b6 45 d5          	movzbl -0x2b(%rbp),%eax
  4001cb:	85 c0                	test   %eax,%eax
  4001cd:	74 ce                	je     40019d <_Dmain+0x125>
      {
        // echo the character (should allow this to be turned off by forked apps)
        echoStr[0] = key;
  4001cf:	b8 00 00 00 00       	mov    $0x0,%eax
  4001d4:	48 89 c2             	mov    %rax,%rdx
  4001d7:	48 8d 85 df fe ff ff 	lea    -0x121(%rbp),%rax
  4001de:	48 01 d0             	add    %rdx,%rax
  4001e1:	0f b6 55 d5          	movzbl -0x2b(%rbp),%edx
  4001e5:	88 10                	mov    %dl,(%rax)
        print(echoStr);
  4001e7:	48 c7 85 10 ff ff ff 	movq   $0x1,-0xf0(%rbp)
  4001ee:	01 00 00 00 
  4001f2:	48 8d 85 df fe ff ff 	lea    -0x121(%rbp),%rax
  4001f9:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  400200:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  400207:	48 8b b5 10 ff ff ff 	mov    -0xf0(%rbp),%rsi
  40020e:	48 c7 c7 a0 9d 41 00 	mov    $0x419da0,%rdi
  400215:	b8 00 00 00 00       	mov    $0x0,%eax
  40021a:	e8 4d e0 00 00       	callq  40e26c <_D4user7basicio5printFYv>

        if (key == '\n')
  40021f:	0f b6 45 d5          	movzbl -0x2b(%rbp),%eax
  400223:	83 f8 0a             	cmp    $0xa,%eax
  400226:	0f 85 a1 02 00 00    	jne    4004cd <_Dmain+0x455>
        {
          // interpret line
          if (lineBufferPos > 0)
  40022c:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
  400230:	0f 8e 6c 02 00 00    	jle    4004a2 <_Dmain+0x42a>
                print(ret);
                print("\n");
                break;
              default:
              print("Error: Unknown Command\n");
              break;
  400236:	8b 45 d0             	mov    -0x30(%rbp),%eax
  400239:	48 98                	cltq   
  40023b:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  400241:	77 0e                	ja     400251 <_Dmain+0x1d9>
  400243:	8b 45 d0             	mov    -0x30(%rbp),%eax
  400246:	48 98                	cltq   
  400248:	48 89 85 b0 fc ff ff 	mov    %rax,-0x350(%rbp)
  40024f:	eb 2e                	jmp    40027f <_Dmain+0x207>
  400251:	48 c7 85 30 ff ff ff 	movq   $0x11,-0xd0(%rbp)
  400258:	11 00 00 00 
  40025c:	48 c7 85 38 ff ff ff 	movq   $0x40f572,-0xc8(%rbp)
  400263:	72 f5 40 00 
  400267:	48 8b bd 30 ff ff ff 	mov    -0xd0(%rbp),%rdi
  40026e:	48 8b b5 38 ff ff ff 	mov    -0xc8(%rbp),%rsi
  400275:	ba 3a 00 00 00       	mov    $0x3a,%edx
  40027a:	e8 c6 ab 00 00       	callq  40ae45 <_d_array_bounds>
  40027f:	48 8b 85 b0 fc ff ff 	mov    -0x350(%rbp),%rax
  400286:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  40028d:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
  400294:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  40029b:	48 c7 85 40 ff ff ff 	movq   $0x6,-0xc0(%rbp)
  4002a2:	06 00 00 00 
  4002a6:	48 c7 85 48 ff ff ff 	movq   $0x40f500,-0xb8(%rbp)
  4002ad:	00 f5 40 00 
  4002b1:	48 8b 95 20 ff ff ff 	mov    -0xe0(%rbp),%rdx
  4002b8:	48 8b 8d 28 ff ff ff 	mov    -0xd8(%rbp),%rcx
  4002bf:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
  4002c6:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
  4002cd:	e8 42 99 00 00       	callq  409c14 <_d_switch_string>
  4002d2:	89 85 bc fc ff ff    	mov    %eax,-0x344(%rbp)
  4002d8:	83 bd bc fc ff ff 05 	cmpl   $0x5,-0x344(%rbp)
  4002df:	0f 87 94 01 00 00    	ja     400479 <_Dmain+0x401>
  4002e5:	8b 85 bc fc ff ff    	mov    -0x344(%rbp),%eax
  4002eb:	48 8b 04 c5 c8 f5 40 	mov    0x40f5c8(,%rax,8),%rax
  4002f2:	00 
  4002f3:	ff e0                	jmpq   *%rax
          if (lineBufferPos > 0)
          {
            switch (lineBuffer[0..lineBufferPos])
            {
              case "free":
                free(buff);
  4002f5:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4002f9:	e8 35 df 00 00       	callq  40e233 <_D6malloc4freeFPvZv>
                break;
  4002fe:	e9 9f 01 00 00       	jmpq   4004a2 <_Dmain+0x42a>
              case "malloc":
                buff = malloc(100);
  400303:	bf 64 00 00 00       	mov    $0x64,%edi
  400308:	e8 af dd 00 00       	callq  40e0bc <_D6malloc6mallocFmZPv>
  40030d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
                break;
  400311:	e9 8c 01 00 00       	jmpq   4004a2 <_Dmain+0x42a>
              case "yield":
                yield();
  400316:	e8 2d d8 00 00       	callq  40db48 <_D4user7syscall5yieldFZv>
                break;
  40031b:	e9 82 01 00 00       	jmpq   4004a2 <_Dmain+0x42a>
              case "intfic":
                if(!intfic) {
  400320:	0f b6 05 59 d4 01 00 	movzbl 0x1d459(%rip),%eax        # 41d780 <_D11application3xsh6intficb>
  400327:	83 f0 01             	xor    $0x1,%eax
  40032a:	84 c0                	test   %al,%al
  40032c:	74 16                	je     400344 <_Dmain+0x2cc>
                  makeEnvironment(1); // 1 is intfic
  40032e:	bf 01 00 00 00       	mov    $0x1,%edi
  400333:	e8 b6 d9 00 00       	callq  40dcee <_D4user7syscall15makeEnvironmentFiZv>
                  intfic = true;
  400338:	c6 05 41 d4 01 00 01 	movb   $0x1,0x1d441(%rip)        # 41d780 <_D11application3xsh6intficb>
  40033f:	e9 5e 01 00 00       	jmpq   4004a2 <_Dmain+0x42a>
                } else {
                  print("You've already scheduled it!\n");
  400344:	48 c7 85 50 ff ff ff 	movq   $0x1d,-0xb0(%rbp)
  40034b:	1d 00 00 00 
  40034f:	48 c7 85 58 ff ff ff 	movq   $0x40f584,-0xa8(%rbp)
  400356:	84 f5 40 00 
  40035a:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  400361:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
  400368:	48 c7 c7 a0 9d 41 00 	mov    $0x419da0,%rdi
  40036f:	b8 00 00 00 00       	mov    $0x0,%eax
  400374:	e8 f3 de 00 00       	callq  40e26c <_D4user7basicio5printFYv>
                }
                break;
  400379:	e9 24 01 00 00       	jmpq   4004a2 <_Dmain+0x42a>
              case "fork":
                int ret = fork();
  40037e:	e8 a9 d9 00 00       	callq  40dd2c <_D4user7syscall4forkFZi>
  400383:	89 45 f8             	mov    %eax,-0x8(%rbp)
                print("ret was");
  400386:	48 c7 85 60 ff ff ff 	movq   $0x7,-0xa0(%rbp)
  40038d:	07 00 00 00 
  400391:	48 c7 85 68 ff ff ff 	movq   $0x40f5a2,-0x98(%rbp)
  400398:	a2 f5 40 00 
  40039c:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  4003a3:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  4003aa:	48 c7 c7 a0 9d 41 00 	mov    $0x419da0,%rdi
  4003b1:	b8 00 00 00 00       	mov    $0x0,%eax
  4003b6:	e8 b1 de 00 00       	callq  40e26c <_D4user7basicio5printFYv>
                print(ret);
  4003bb:	8b 75 f8             	mov    -0x8(%rbp),%esi
  4003be:	48 c7 c7 c0 9d 41 00 	mov    $0x419dc0,%rdi
  4003c5:	b8 00 00 00 00       	mov    $0x0,%eax
  4003ca:	e8 9d de 00 00       	callq  40e26c <_D4user7basicio5printFYv>
                print("\n");
  4003cf:	48 c7 85 70 ff ff ff 	movq   $0x1,-0x90(%rbp)
  4003d6:	01 00 00 00 
  4003da:	48 c7 85 78 ff ff ff 	movq   $0x40f5aa,-0x88(%rbp)
  4003e1:	aa f5 40 00 
  4003e5:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  4003ec:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
  4003f3:	48 c7 c7 a0 9d 41 00 	mov    $0x419da0,%rdi
  4003fa:	b8 00 00 00 00       	mov    $0x0,%eax
  4003ff:	e8 68 de 00 00       	callq  40e26c <_D4user7basicio5printFYv>
                break;
  400404:	e9 99 00 00 00       	jmpq   4004a2 <_Dmain+0x42a>
              case "exec":
                int ret = exec();
  400409:	e8 48 d9 00 00       	callq  40dd56 <_D4user7syscall4execFZi>
  40040e:	89 45 fc             	mov    %eax,-0x4(%rbp)
                print("ret was");
  400411:	48 c7 45 80 07 00 00 	movq   $0x7,-0x80(%rbp)
  400418:	00 
  400419:	48 c7 45 88 a2 f5 40 	movq   $0x40f5a2,-0x78(%rbp)
  400420:	00 
  400421:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  400425:	48 8b 75 80          	mov    -0x80(%rbp),%rsi
  400429:	48 c7 c7 a0 9d 41 00 	mov    $0x419da0,%rdi
  400430:	b8 00 00 00 00       	mov    $0x0,%eax
  400435:	e8 32 de 00 00       	callq  40e26c <_D4user7basicio5printFYv>
                print(ret);
  40043a:	8b 75 fc             	mov    -0x4(%rbp),%esi
  40043d:	48 c7 c7 c0 9d 41 00 	mov    $0x419dc0,%rdi
  400444:	b8 00 00 00 00       	mov    $0x0,%eax
  400449:	e8 1e de 00 00       	callq  40e26c <_D4user7basicio5printFYv>
                print("\n");
  40044e:	48 c7 45 90 01 00 00 	movq   $0x1,-0x70(%rbp)
  400455:	00 
  400456:	48 c7 45 98 aa f5 40 	movq   $0x40f5aa,-0x68(%rbp)
  40045d:	00 
  40045e:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  400462:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
  400466:	48 c7 c7 a0 9d 41 00 	mov    $0x419da0,%rdi
  40046d:	b8 00 00 00 00       	mov    $0x0,%eax
  400472:	e8 f5 dd 00 00       	callq  40e26c <_D4user7basicio5printFYv>
                break;
  400477:	eb 29                	jmp    4004a2 <_Dmain+0x42a>
              default:
              print("Error: Unknown Command\n");
  400479:	48 c7 45 a0 17 00 00 	movq   $0x17,-0x60(%rbp)
  400480:	00 
  400481:	48 c7 45 a8 ac f5 40 	movq   $0x40f5ac,-0x58(%rbp)
  400488:	00 
  400489:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40048d:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  400491:	48 c7 c7 a0 9d 41 00 	mov    $0x419da0,%rdi
  400498:	b8 00 00 00 00       	mov    $0x0,%eax
  40049d:	e8 ca dd 00 00       	callq  40e26c <_D4user7basicio5printFYv>
              break;
            }
          }

          lineBufferPos = 0;
  4004a2:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%rbp)

          // echo next line
          print(prompt);
  4004a9:	48 8b 15 d8 98 01 00 	mov    0x198d8(%rip),%rdx        # 419d88 <_D11application3xsh6promptAa+0x8>
  4004b0:	48 8b 35 c9 98 01 00 	mov    0x198c9(%rip),%rsi        # 419d80 <_D11application3xsh6promptAa>
  4004b7:	48 c7 c7 a0 9d 41 00 	mov    $0x419da0,%rdi
  4004be:	b8 00 00 00 00       	mov    $0x0,%eax
  4004c3:	e8 a4 dd 00 00       	callq  40e26c <_D4user7basicio5printFYv>
  4004c8:	e9 d0 fc ff ff       	jmpq   40019d <_Dmain+0x125>
        }
        else
        {
          // add to the line buffer
          // note, if we go over the max, the line will be misinterpreted
          lineBuffer[lineBufferPos++] = key;
  4004cd:	8b 45 d0             	mov    -0x30(%rbp),%eax
  4004d0:	48 98                	cltq   
  4004d2:	48 89 85 c8 fc ff ff 	mov    %rax,-0x338(%rbp)
  4004d9:	48 81 bd c8 fc ff ff 	cmpq   $0x1ff,-0x338(%rbp)
  4004e0:	ff 01 00 00 
  4004e4:	0f 96 c0             	setbe  %al
  4004e7:	ff 45 d0             	incl   -0x30(%rbp)
  4004ea:	84 c0                	test   %al,%al
  4004ec:	74 10                	je     4004fe <_Dmain+0x486>
  4004ee:	48 8b 85 c8 fc ff ff 	mov    -0x338(%rbp),%rax
  4004f5:	48 89 85 c0 fc ff ff 	mov    %rax,-0x340(%rbp)
  4004fc:	eb 22                	jmp    400520 <_Dmain+0x4a8>
  4004fe:	48 c7 45 b0 11 00 00 	movq   $0x11,-0x50(%rbp)
  400505:	00 
  400506:	48 c7 45 b8 72 f5 40 	movq   $0x40f572,-0x48(%rbp)
  40050d:	00 
  40050e:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  400512:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  400516:	ba 68 00 00 00       	mov    $0x68,%edx
  40051b:	e8 25 a9 00 00       	callq  40ae45 <_d_array_bounds>
  400520:	48 8b 85 c0 fc ff ff 	mov    -0x340(%rbp),%rax
  400527:	48 89 c2             	mov    %rax,%rdx
  40052a:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
  400531:	48 01 d0             	add    %rdx,%rax
  400534:	0f b6 55 d5          	movzbl -0x2b(%rbp),%edx
  400538:	88 10                	mov    %dl,(%rax)
          if (lineBufferPos == lineBuffer.length) { lineBufferPos--; }
  40053a:	8b 45 d0             	mov    -0x30(%rbp),%eax
  40053d:	48 98                	cltq   
  40053f:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  400545:	0f 85 52 fc ff ff    	jne    40019d <_Dmain+0x125>
  40054b:	ff 4d d0             	decl   -0x30(%rbp)
  void* buff;

  while(true) {
    keyCode = Keyboard.grabKey();

    if(keyCode != Key.Null)
  40054e:	e9 4a fc ff ff       	jmpq   40019d <_Dmain+0x125>
        }
      }
    }
  }

  exit(0);
  400553:	bf 00 00 00 00       	mov    $0x0,%edi
  400558:	e8 7f d5 00 00       	callq  40dadc <_D4user7syscall4exitFlZv>

  //d is awesome
  return 0;
  40055d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  400562:	c9                   	leaveq 
  400563:	c3                   	retq   

0000000000400564 <_D3std8typeinfo5ti_AC11TypeInfo_AC7getHashMFPvZm>:

// Object[]

class TypeInfo_AC : TypeInfo
{
    hash_t getHash(void *p)
  400564:	55                   	push   %rbp
  400565:	48 89 e5             	mov    %rsp,%rbp
  400568:	48 83 ec 50          	sub    $0x50,%rsp
  40056c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  400570:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  400574:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  400578:	e8 ff 8d 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {	Object[] s = *cast(Object[]*)p;
  40057d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  400581:	48 8b 02             	mov    (%rdx),%rax
  400584:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  400588:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40058c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	hash_t hash = 0;
  400590:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  400597:	00 

	foreach (Object o; s)
  400598:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40059c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  4005a0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4005a4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4005a8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4005ac:	48 c1 e0 03          	shl    $0x3,%rax
  4005b0:	48 03 45 b8          	add    -0x48(%rbp),%rax
  4005b4:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4005b8:	0f 95 c0             	setne  %al
  4005bb:	83 f0 01             	xor    $0x1,%eax
  4005be:	84 c0                	test   %al,%al
  4005c0:	75 31                	jne    4005f3 <_D3std8typeinfo5ti_AC11TypeInfo_AC7getHashMFPvZm+0x8f>
  4005c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4005c6:	48 8b 00             	mov    (%rax),%rax
  4005c9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	{
	    if (o)
  4005cd:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4005d2:	74 18                	je     4005ec <_D3std8typeinfo5ti_AC11TypeInfo_AC7getHashMFPvZm+0x88>
		hash += o.toHash();
  4005d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4005d8:	48 8b 00             	mov    (%rax),%rax
  4005db:	48 83 c0 10          	add    $0x10,%rax
  4005df:	48 8b 00             	mov    (%rax),%rax
  4005e2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4005e6:	ff d0                	callq  *%rax
  4005e8:	48 01 45 e8          	add    %rax,-0x18(%rbp)
    {	Object[] s = *cast(Object[]*)p;
	hash_t hash = 0;

	foreach (Object o; s)
	{
	    if (o)
  4005ec:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
  4005f1:	eb b5                	jmp    4005a8 <_D3std8typeinfo5ti_AC11TypeInfo_AC7getHashMFPvZm+0x44>
		hash += o.toHash();
	}
	return hash;
  4005f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  4005f7:	c9                   	leaveq 
  4005f8:	c3                   	retq   

00000000004005f9 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4005f9:	55                   	push   %rbp
  4005fa:	48 89 e5             	mov    %rsp,%rbp
  4005fd:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  400604:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  400608:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  40060c:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  400610:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  400614:	e8 63 8d 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	Object[] s1 = *cast(Object[]*)p1;
  400619:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40061d:	48 8b 02             	mov    (%rdx),%rax
  400620:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  400624:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400628:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	Object[] s2 = *cast(Object[]*)p2;
  40062c:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  400630:	48 8b 02             	mov    (%rdx),%rax
  400633:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  400637:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40063b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

	if (s1.length == s2.length)
  40063f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  400643:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400647:	48 39 c2             	cmp    %rax,%rdx
  40064a:	0f 85 3d 01 00 00    	jne    40078d <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x194>
	{
	    for (size_t u = 0; u < s1.length; u++)
  400650:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  400657:	00 
  400658:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40065c:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  400660:	0f 92 c0             	setb   %al
  400663:	83 f0 01             	xor    $0x1,%eax
  400666:	84 c0                	test   %al,%al
  400668:	0f 85 16 01 00 00    	jne    400784 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x18b>
	    {	Object o1 = s1[u];
  40066e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  400672:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  400679:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40067d:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  400681:	73 0d                	jae    400690 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x97>
  400683:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400687:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  40068e:	eb 22                	jmp    4006b2 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0xb9>
  400690:	48 c7 45 c0 14 00 00 	movq   $0x14,-0x40(%rbp)
  400697:	00 
  400698:	48 c7 45 c8 00 f6 40 	movq   $0x40f600,-0x38(%rbp)
  40069f:	00 
  4006a0:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4006a4:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4006a8:	ba 1b 00 00 00       	mov    $0x1b,%edx
  4006ad:	e8 93 a7 00 00       	callq  40ae45 <_d_array_bounds>
  4006b2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  4006b9:	48 c1 e0 03          	shl    $0x3,%rax
  4006bd:	48 03 85 60 ff ff ff 	add    -0xa0(%rbp),%rax
  4006c4:	48 8b 00             	mov    (%rax),%rax
  4006c7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = s2[u];
  4006cb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4006cf:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  4006d6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4006da:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  4006de:	73 0d                	jae    4006ed <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0xf4>
  4006e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4006e4:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4006eb:	eb 22                	jmp    40070f <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x116>
  4006ed:	48 c7 45 d0 14 00 00 	movq   $0x14,-0x30(%rbp)
  4006f4:	00 
  4006f5:	48 c7 45 d8 00 f6 40 	movq   $0x40f600,-0x28(%rbp)
  4006fc:	00 
  4006fd:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  400701:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  400705:	ba 1c 00 00 00       	mov    $0x1c,%edx
  40070a:	e8 36 a7 00 00       	callq  40ae45 <_d_array_bounds>
  40070f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  400716:	48 c1 e0 03          	shl    $0x3,%rax
  40071a:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  400721:	48 8b 00             	mov    (%rax),%rax
  400724:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		// Do not pass null's to Object.opEquals()
		if (o1 is o2 ||
  400728:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40072c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  400730:	74 49                	je     40077b <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x182>
  400732:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  400737:	0f 94 c0             	sete   %al
  40073a:	83 f0 01             	xor    $0x1,%eax
  40073d:	83 f0 01             	xor    $0x1,%eax
  400740:	84 c0                	test   %al,%al
  400742:	75 2e                	jne    400772 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x179>
  400744:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  400749:	0f 94 c0             	sete   %al
  40074c:	83 f0 01             	xor    $0x1,%eax
  40074f:	83 f0 01             	xor    $0x1,%eax
  400752:	84 c0                	test   %al,%al
  400754:	75 1c                	jne    400772 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x179>
  400756:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40075a:	48 8b 00             	mov    (%rax),%rax
  40075d:	48 83 c0 20          	add    $0x20,%rax
  400761:	48 8b 00             	mov    (%rax),%rax
  400764:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  400768:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40076c:	ff d0                	callq  *%rax
  40076e:	85 c0                	test   %eax,%eax
  400770:	75 09                	jne    40077b <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x182>
		    (!(o1 is null) && !(o2 is null) && o1.opEquals(o2)))
		    continue;
		return 0;
  400772:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  400779:	eb 19                	jmp    400794 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x19b>
  40077b:	48 ff 45 e8          	incq   -0x18(%rbp)
  40077f:	e9 d4 fe ff ff       	jmpq   400658 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x5f>
	    }
	    return 1;
  400784:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  40078b:	eb 07                	jmp    400794 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x19b>
	}
	return 0;
  40078d:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  400794:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  400797:	c9                   	leaveq 
  400798:	c3                   	retq   

0000000000400799 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  400799:	55                   	push   %rbp
  40079a:	48 89 e5             	mov    %rsp,%rbp
  40079d:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  4007a4:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  4007a8:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  4007ac:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  4007b0:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  4007b4:	e8 c3 8b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	Object[] s1 = *cast(Object[]*)p1;
  4007b9:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4007bd:	48 8b 02             	mov    (%rdx),%rax
  4007c0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  4007c4:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4007c8:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	Object[] s2 = *cast(Object[]*)p2;
  4007cc:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4007d0:	48 8b 02             	mov    (%rdx),%rax
  4007d3:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4007d7:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4007db:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	ptrdiff_t c;
  4007df:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  4007e6:	00 

	c = cast(ptrdiff_t)s1.length - cast(ptrdiff_t)s2.length;
  4007e7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4007eb:	48 89 c2             	mov    %rax,%rdx
  4007ee:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4007f2:	48 89 d1             	mov    %rdx,%rcx
  4007f5:	48 29 c1             	sub    %rax,%rcx
  4007f8:	48 89 c8             	mov    %rcx,%rax
  4007fb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (c == 0)
  4007ff:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  400804:	0f 85 36 01 00 00    	jne    400940 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1a7>
	{
	    for (size_t u = 0; u < s1.length; u++)
  40080a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  400811:	00 
  400812:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400816:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40081a:	0f 92 c0             	setb   %al
  40081d:	83 f0 01             	xor    $0x1,%eax
  400820:	84 c0                	test   %al,%al
  400822:	0f 85 18 01 00 00    	jne    400940 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1a7>
	    {	Object o1 = s1[u];
  400828:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40082c:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  400833:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400837:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40083b:	73 0d                	jae    40084a <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0xb1>
  40083d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  400841:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
  400848:	eb 22                	jmp    40086c <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0xd3>
  40084a:	48 c7 45 c0 14 00 00 	movq   $0x14,-0x40(%rbp)
  400851:	00 
  400852:	48 c7 45 c8 00 f6 40 	movq   $0x40f600,-0x38(%rbp)
  400859:	00 
  40085a:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40085e:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  400862:	ba 33 00 00 00       	mov    $0x33,%edx
  400867:	e8 d9 a5 00 00       	callq  40ae45 <_d_array_bounds>
  40086c:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  400873:	48 c1 e0 03          	shl    $0x3,%rax
  400877:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  40087e:	48 8b 00             	mov    (%rax),%rax
  400881:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = s2[u];
  400885:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  400889:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  400890:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400894:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  400898:	73 0a                	jae    4008a4 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x10b>
  40089a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40089e:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  4008a2:	eb 22                	jmp    4008c6 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x12d>
  4008a4:	48 c7 45 d0 14 00 00 	movq   $0x14,-0x30(%rbp)
  4008ab:	00 
  4008ac:	48 c7 45 d8 00 f6 40 	movq   $0x40f600,-0x28(%rbp)
  4008b3:	00 
  4008b4:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4008b8:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4008bc:	ba 34 00 00 00       	mov    $0x34,%edx
  4008c1:	e8 7f a5 00 00       	callq  40ae45 <_d_array_bounds>
  4008c6:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  4008ca:	48 c1 e0 03          	shl    $0x3,%rax
  4008ce:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  4008d5:	48 8b 00             	mov    (%rax),%rax
  4008d8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		if (o1 is o2)
  4008dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4008e0:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  4008e4:	74 51                	je     400937 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x19e>
		    continue;

		// Regard null references as always being "less than"
		if (o1)
  4008e6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4008eb:	74 40                	je     40092d <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x194>
		{
		    if (!o2)
  4008ed:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  4008f2:	0f 95 c0             	setne  %al
  4008f5:	83 f0 01             	xor    $0x1,%eax
  4008f8:	84 c0                	test   %al,%al
  4008fa:	74 0a                	je     400906 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x16d>
		    {	c = 1;
  4008fc:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  400903:	00 
			break;
  400904:	eb 3a                	jmp    400940 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1a7>
		    }
		    c = o1.opCmp(o2);
  400906:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40090a:	48 8b 00             	mov    (%rax),%rax
  40090d:	48 83 c0 18          	add    $0x18,%rax
  400911:	48 8b 00             	mov    (%rax),%rax
  400914:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  400918:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40091c:	ff d0                	callq  *%rax
  40091e:	48 98                	cltq   
  400920:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		    if (c)
  400924:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  400929:	75 15                	jne    400940 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1a7>
			break;
  40092b:	eb 0a                	jmp    400937 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x19e>
		}
		else
		{   c = -1;
  40092d:	48 c7 45 e0 ff ff ff 	movq   $0xffffffffffffffff,-0x20(%rbp)
  400934:	ff 
		    break;
  400935:	eb 09                	jmp    400940 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1a7>

		if (o1 is o2)
		    continue;

		// Regard null references as always being "less than"
		if (o1)
  400937:	48 ff 45 e8          	incq   -0x18(%rbp)
  40093b:	e9 d2 fe ff ff       	jmpq   400812 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x79>
		{   c = -1;
		    break;
		}
	    }
	}
	if (c < 0)
  400940:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  400945:	79 0a                	jns    400951 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1b8>
	    c = -1;
  400947:	48 c7 45 e0 ff ff ff 	movq   $0xffffffffffffffff,-0x20(%rbp)
  40094e:	ff 
  40094f:	eb 0f                	jmp    400960 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1c7>
	else if (c > 0)
  400951:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  400956:	7e 08                	jle    400960 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1c7>
	    c = 1;
  400958:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  40095f:	00 
	return c;
  400960:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    }
  400964:	c9                   	leaveq 
  400965:	c3                   	retq   

0000000000400966 <_D3std8typeinfo5ti_AC11TypeInfo_AC5tsizeMFZm>:

    size_t tsize()
  400966:	55                   	push   %rbp
  400967:	48 89 e5             	mov    %rsp,%rbp
  40096a:	48 83 ec 10          	sub    $0x10,%rsp
  40096e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400972:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  400976:	e8 01 8a 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (Object[]).sizeof;
  40097b:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  400980:	c9                   	leaveq 
  400981:	c3                   	retq   

0000000000400982 <_D3std8typeinfo5ti_AC11TypeInfo_AC5flagsMFZk>:

    uint flags()
  400982:	55                   	push   %rbp
  400983:	48 89 e5             	mov    %rsp,%rbp
  400986:	48 83 ec 10          	sub    $0x10,%rsp
  40098a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40098e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  400992:	e8 e5 89 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  400997:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  40099c:	c9                   	leaveq 
  40099d:	c3                   	retq   

000000000040099e <_D3std8typeinfo5ti_AC11TypeInfo_AC4nextMFZC8TypeInfo>:

    TypeInfo next()
  40099e:	55                   	push   %rbp
  40099f:	48 89 e5             	mov    %rsp,%rbp
  4009a2:	48 83 ec 10          	sub    $0x10,%rsp
  4009a6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4009aa:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4009ae:	e8 c9 89 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(Object);
  4009b3:	48 c7 c0 70 9e 41 00 	mov    $0x419e70,%rax
    }
  4009ba:	c9                   	leaveq 
  4009bb:	c3                   	retq   

00000000004009bc <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar8toStringMFZAa>:

// cdouble[]

class TypeInfo_Ar : TypeInfo
{
    char[] toString() { return "cdouble[]"; }
  4009bc:	55                   	push   %rbp
  4009bd:	48 89 e5             	mov    %rsp,%rbp
  4009c0:	53                   	push   %rbx
  4009c1:	48 83 ec 08          	sub    $0x8,%rsp
  4009c5:	48 89 fb             	mov    %rdi,%rbx
  4009c8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4009cc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4009d0:	e8 a7 89 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  4009d5:	48 c7 03 09 00 00 00 	movq   $0x9,(%rbx)
  4009dc:	48 c7 43 08 c0 f6 40 	movq   $0x40f6c0,0x8(%rbx)
  4009e3:	00 
  4009e4:	48 89 d8             	mov    %rbx,%rax
  4009e7:	48 83 c4 08          	add    $0x8,%rsp
  4009eb:	5b                   	pop    %rbx
  4009ec:	c9                   	leaveq 
  4009ed:	c3                   	retq   

00000000004009ee <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7getHashMFPvZm>:

    hash_t getHash(void *p)
  4009ee:	55                   	push   %rbp
  4009ef:	48 89 e5             	mov    %rsp,%rbp
  4009f2:	48 83 ec 40          	sub    $0x40,%rsp
  4009f6:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  4009fa:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  4009fe:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  400a02:	e8 75 89 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {	cdouble[] s = *cast(cdouble[]*)p;
  400a07:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  400a0b:	48 8b 02             	mov    (%rdx),%rax
  400a0e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  400a12:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400a16:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  400a1a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  400a1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	cdouble *str = s.ptr;
  400a22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400a26:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  400a2a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  400a31:	00 

	while (len)
  400a32:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  400a37:	0f 95 c0             	setne  %al
  400a3a:	83 f0 01             	xor    $0x1,%eax
  400a3d:	84 c0                	test   %al,%al
  400a3f:	75 71                	jne    400ab2 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7getHashMFPvZm+0xc4>
	{
	    hash *= 9;
  400a41:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  400a45:	48 89 d0             	mov    %rdx,%rax
  400a48:	48 c1 e0 03          	shl    $0x3,%rax
  400a4c:	48 01 d0             	add    %rdx,%rax
  400a4f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[0];
  400a53:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400a57:	b8 00 00 00 00       	mov    $0x0,%eax
  400a5c:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  400a60:	8b 00                	mov    (%rax),%eax
  400a62:	89 c0                	mov    %eax,%eax
  400a64:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[1];
  400a68:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400a6c:	b8 04 00 00 00       	mov    $0x4,%eax
  400a71:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  400a75:	8b 00                	mov    (%rax),%eax
  400a77:	89 c0                	mov    %eax,%eax
  400a79:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[2];
  400a7d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400a81:	b8 08 00 00 00       	mov    $0x8,%eax
  400a86:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  400a8a:	8b 00                	mov    (%rax),%eax
  400a8c:	89 c0                	mov    %eax,%eax
  400a8e:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[3];
  400a92:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400a96:	b8 0c 00 00 00       	mov    $0xc,%eax
  400a9b:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  400a9f:	8b 00                	mov    (%rax),%eax
  400aa1:	89 c0                	mov    %eax,%eax
  400aa3:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  400aa7:	48 83 45 f0 10       	addq   $0x10,-0x10(%rbp)
	    len--;
  400aac:	48 ff 4d f8          	decq   -0x8(%rbp)
  400ab0:	eb 80                	jmp    400a32 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7getHashMFPvZm+0x44>
	}

	return hash;
  400ab2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  400ab6:	c9                   	leaveq 
  400ab7:	c3                   	retq   

0000000000400ab8 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  400ab8:	55                   	push   %rbp
  400ab9:	48 89 e5             	mov    %rsp,%rbp
  400abc:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  400ac3:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  400ac7:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  400acb:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  400acf:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  400ad3:	e8 a4 88 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cdouble[] s1 = *cast(cdouble[]*)p1;
  400ad8:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  400adc:	48 8b 02             	mov    (%rdx),%rax
  400adf:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  400ae3:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400ae7:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	cdouble[] s2 = *cast(cdouble[]*)p2;
  400aeb:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  400aef:	48 8b 02             	mov    (%rdx),%rax
  400af2:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  400af6:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400afa:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  400afe:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400b02:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  400b06:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400b0a:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  400b0e:	74 0f                	je     400b1f <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x67>
	    return 0;
  400b10:	c7 85 54 ff ff ff 00 	movl   $0x0,-0xac(%rbp)
  400b17:	00 00 00 
  400b1a:	e9 53 01 00 00       	jmpq   400c72 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x1ba>
	for (size_t u = 0; u < len; u++)
  400b1f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  400b26:	00 
  400b27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400b2b:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  400b2f:	0f 92 c0             	setb   %al
  400b32:	83 f0 01             	xor    $0x1,%eax
  400b35:	84 c0                	test   %al,%al
  400b37:	0f 85 2b 01 00 00    	jne    400c68 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x1b0>
	{
	    int c = TypeInfo_r._equals(s1[u], s2[u]);
  400b3d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  400b41:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  400b48:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400b4c:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  400b50:	73 0d                	jae    400b5f <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0xa7>
  400b52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400b56:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  400b5d:	eb 22                	jmp    400b81 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0xc9>
  400b5f:	48 c7 45 c0 1a 00 00 	movq   $0x1a,-0x40(%rbp)
  400b66:	00 
  400b67:	48 c7 45 c8 ca f6 40 	movq   $0x40f6ca,-0x38(%rbp)
  400b6e:	00 
  400b6f:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  400b73:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  400b77:	ba 40 00 00 00       	mov    $0x40,%edx
  400b7c:	e8 c4 a2 00 00       	callq  40ae45 <_d_array_bounds>
  400b81:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  400b88:	48 c1 e0 04          	shl    $0x4,%rax
  400b8c:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  400b93:	dd 00                	fldl   (%rax)
  400b95:	dd 9d 70 ff ff ff    	fstpl  -0x90(%rbp)
  400b9b:	dd 40 08             	fldl   0x8(%rax)
  400b9e:	dd 9d 68 ff ff ff    	fstpl  -0x98(%rbp)
  400ba4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  400ba8:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  400baf:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400bb3:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  400bb7:	73 0a                	jae    400bc3 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x10b>
  400bb9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400bbd:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  400bc1:	eb 22                	jmp    400be5 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x12d>
  400bc3:	48 c7 45 d0 1a 00 00 	movq   $0x1a,-0x30(%rbp)
  400bca:	00 
  400bcb:	48 c7 45 d8 ca f6 40 	movq   $0x40f6ca,-0x28(%rbp)
  400bd2:	00 
  400bd3:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  400bd7:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  400bdb:	ba 40 00 00 00       	mov    $0x40,%edx
  400be0:	e8 60 a2 00 00       	callq  40ae45 <_d_array_bounds>
  400be5:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  400be9:	48 c1 e0 04          	shl    $0x4,%rax
  400bed:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  400bf4:	48 8b 10             	mov    (%rax),%rdx
  400bf7:	48 8b 40 08          	mov    0x8(%rax),%rax
  400bfb:	48 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%rcx
  400c02:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
  400c09:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
  400c10:	66 0f 12 95 48 ff ff 	movlpd -0xb8(%rbp),%xmm2
  400c17:	ff 
  400c18:	48 89 b5 48 ff ff ff 	mov    %rsi,-0xb8(%rbp)
  400c1f:	66 0f 12 9d 48 ff ff 	movlpd -0xb8(%rbp),%xmm3
  400c26:	ff 
  400c27:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  400c2e:	66 0f 12 85 48 ff ff 	movlpd -0xb8(%rbp),%xmm0
  400c35:	ff 
  400c36:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  400c3d:	66 0f 12 8d 48 ff ff 	movlpd -0xb8(%rbp),%xmm1
  400c44:	ff 
  400c45:	e8 bc 34 00 00       	callq  404106 <_D3std8typeinfo10ti_cdouble10TypeInfo_r7_equalsFrrZi>
  400c4a:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  400c4d:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  400c51:	75 0c                	jne    400c5f <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x1a7>
		return 0;
  400c53:	c7 85 54 ff ff ff 00 	movl   $0x0,-0xac(%rbp)
  400c5a:	00 00 00 
  400c5d:	eb 13                	jmp    400c72 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x1ba>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_r._equals(s1[u], s2[u]);
	    if (c == 0)
  400c5f:	48 ff 45 f0          	incq   -0x10(%rbp)
  400c63:	e9 bf fe ff ff       	jmpq   400b27 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  400c68:	c7 85 54 ff ff ff 01 	movl   $0x1,-0xac(%rbp)
  400c6f:	00 00 00 
  400c72:	8b 85 54 ff ff ff    	mov    -0xac(%rbp),%eax
    }
  400c78:	c9                   	leaveq 
  400c79:	c3                   	retq   

0000000000400c7a <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  400c7a:	55                   	push   %rbp
  400c7b:	48 89 e5             	mov    %rsp,%rbp
  400c7e:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  400c85:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  400c89:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  400c8d:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  400c91:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  400c95:	e8 e2 86 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cdouble[] s1 = *cast(cdouble[]*)p1;
  400c9a:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  400c9e:	48 8b 02             	mov    (%rdx),%rax
  400ca1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  400ca5:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400ca9:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	cdouble[] s2 = *cast(cdouble[]*)p2;
  400cad:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  400cb1:	48 8b 02             	mov    (%rdx),%rax
  400cb4:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  400cb8:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400cbc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  400cc0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400cc4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  400cc8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400ccc:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  400cd0:	73 08                	jae    400cda <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x60>
	    len = s2.length;
  400cd2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400cd6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  400cda:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  400ce1:	00 
  400ce2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400ce6:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  400cea:	0f 92 c0             	setb   %al
  400ced:	83 f0 01             	xor    $0x1,%eax
  400cf0:	84 c0                	test   %al,%al
  400cf2:	0f 85 2d 01 00 00    	jne    400e25 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1ab>
	{
	    int c = TypeInfo_r._compare(s1[u], s2[u]);
  400cf8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  400cfc:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  400d03:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400d07:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  400d0b:	73 0d                	jae    400d1a <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0xa0>
  400d0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400d11:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  400d18:	eb 22                	jmp    400d3c <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0xc2>
  400d1a:	48 c7 45 c0 1a 00 00 	movq   $0x1a,-0x40(%rbp)
  400d21:	00 
  400d22:	48 c7 45 c8 ca f6 40 	movq   $0x40f6ca,-0x38(%rbp)
  400d29:	00 
  400d2a:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  400d2e:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  400d32:	ba 51 00 00 00       	mov    $0x51,%edx
  400d37:	e8 09 a1 00 00       	callq  40ae45 <_d_array_bounds>
  400d3c:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  400d43:	48 c1 e0 04          	shl    $0x4,%rax
  400d47:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  400d4e:	dd 00                	fldl   (%rax)
  400d50:	dd 9d 68 ff ff ff    	fstpl  -0x98(%rbp)
  400d56:	dd 40 08             	fldl   0x8(%rax)
  400d59:	dd 9d 60 ff ff ff    	fstpl  -0xa0(%rbp)
  400d5f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  400d63:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  400d6a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400d6e:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  400d72:	73 0d                	jae    400d81 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x107>
  400d74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400d78:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  400d7f:	eb 22                	jmp    400da3 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x129>
  400d81:	48 c7 45 d0 1a 00 00 	movq   $0x1a,-0x30(%rbp)
  400d88:	00 
  400d89:	48 c7 45 d8 ca f6 40 	movq   $0x40f6ca,-0x28(%rbp)
  400d90:	00 
  400d91:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  400d95:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  400d99:	ba 51 00 00 00       	mov    $0x51,%edx
  400d9e:	e8 a2 a0 00 00       	callq  40ae45 <_d_array_bounds>
  400da3:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  400daa:	48 c1 e0 04          	shl    $0x4,%rax
  400dae:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  400db5:	48 8b 10             	mov    (%rax),%rdx
  400db8:	48 8b 40 08          	mov    0x8(%rax),%rax
  400dbc:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
  400dc3:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  400dca:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
  400dd1:	66 0f 12 95 48 ff ff 	movlpd -0xb8(%rbp),%xmm2
  400dd8:	ff 
  400dd9:	48 89 b5 48 ff ff ff 	mov    %rsi,-0xb8(%rbp)
  400de0:	66 0f 12 9d 48 ff ff 	movlpd -0xb8(%rbp),%xmm3
  400de7:	ff 
  400de8:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  400def:	66 0f 12 85 48 ff ff 	movlpd -0xb8(%rbp),%xmm0
  400df6:	ff 
  400df7:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  400dfe:	66 0f 12 8d 48 ff ff 	movlpd -0xb8(%rbp),%xmm1
  400e05:	ff 
  400e06:	e8 6c 33 00 00       	callq  404177 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi>
  400e0b:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  400e0e:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  400e12:	74 08                	je     400e1c <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1a2>
		return c;
  400e14:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400e17:	89 45 84             	mov    %eax,-0x7c(%rbp)
  400e1a:	eb 3c                	jmp    400e58 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1de>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_r._compare(s1[u], s2[u]);
	    if (c)
  400e1c:	48 ff 45 f0          	incq   -0x10(%rbp)
  400e20:	e9 bd fe ff ff       	jmpq   400ce2 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  400e25:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  400e29:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400e2d:	48 39 c2             	cmp    %rax,%rdx
  400e30:	73 09                	jae    400e3b <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1c1>
	    return -1;
  400e32:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  400e39:	eb 1d                	jmp    400e58 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1de>
	else if (s1.length > s2.length)
  400e3b:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  400e3f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400e43:	48 39 c2             	cmp    %rax,%rdx
  400e46:	76 09                	jbe    400e51 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1d7>
	    return 1;
  400e48:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  400e4f:	eb 07                	jmp    400e58 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1de>
	return 0;
  400e51:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  400e58:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  400e5b:	c9                   	leaveq 
  400e5c:	c3                   	retq   

0000000000400e5d <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar5tsizeMFZm>:

    size_t tsize()
  400e5d:	55                   	push   %rbp
  400e5e:	48 89 e5             	mov    %rsp,%rbp
  400e61:	48 83 ec 10          	sub    $0x10,%rsp
  400e65:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400e69:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  400e6d:	e8 0a 85 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cdouble[]).sizeof;
  400e72:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  400e77:	c9                   	leaveq 
  400e78:	c3                   	retq   

0000000000400e79 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar5flagsMFZk>:

    uint flags()
  400e79:	55                   	push   %rbp
  400e7a:	48 89 e5             	mov    %rsp,%rbp
  400e7d:	48 83 ec 10          	sub    $0x10,%rsp
  400e81:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400e85:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  400e89:	e8 ee 84 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  400e8e:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  400e93:	c9                   	leaveq 
  400e94:	c3                   	retq   

0000000000400e95 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar4nextMFZC8TypeInfo>:

    TypeInfo next()
  400e95:	55                   	push   %rbp
  400e96:	48 89 e5             	mov    %rsp,%rbp
  400e99:	48 83 ec 10          	sub    $0x10,%rsp
  400e9d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400ea1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  400ea5:	e8 d2 84 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(cdouble);
  400eaa:	48 c7 c0 f0 07 41 00 	mov    $0x4107f0,%rax
    }
  400eb1:	c9                   	leaveq 
  400eb2:	c3                   	retq   
  400eb3:	90                   	nop    

0000000000400eb4 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq8toStringMFZAa>:

// cfloat[]

class TypeInfo_Aq : TypeInfo
{
    char[] toString() { return "cfloat[]"; }
  400eb4:	55                   	push   %rbp
  400eb5:	48 89 e5             	mov    %rsp,%rbp
  400eb8:	53                   	push   %rbx
  400eb9:	48 83 ec 08          	sub    $0x8,%rsp
  400ebd:	48 89 fb             	mov    %rdi,%rbx
  400ec0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  400ec4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  400ec8:	e8 af 84 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  400ecd:	48 c7 03 08 00 00 00 	movq   $0x8,(%rbx)
  400ed4:	48 c7 43 08 a0 f7 40 	movq   $0x40f7a0,0x8(%rbx)
  400edb:	00 
  400edc:	48 89 d8             	mov    %rbx,%rax
  400edf:	48 83 c4 08          	add    $0x8,%rsp
  400ee3:	5b                   	pop    %rbx
  400ee4:	c9                   	leaveq 
  400ee5:	c3                   	retq   

0000000000400ee6 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7getHashMFPvZm>:

    hash_t getHash(void *p)
  400ee6:	55                   	push   %rbp
  400ee7:	48 89 e5             	mov    %rsp,%rbp
  400eea:	48 83 ec 40          	sub    $0x40,%rsp
  400eee:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  400ef2:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  400ef6:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  400efa:	e8 7d 84 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {	cfloat[] s = *cast(cfloat[]*)p;
  400eff:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  400f03:	48 8b 02             	mov    (%rdx),%rax
  400f06:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  400f0a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400f0e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  400f12:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  400f16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	cfloat *str = s.ptr;
  400f1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400f1e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  400f22:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  400f29:	00 

	while (len)
  400f2a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  400f2f:	0f 95 c0             	setne  %al
  400f32:	83 f0 01             	xor    $0x1,%eax
  400f35:	84 c0                	test   %al,%al
  400f37:	75 47                	jne    400f80 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7getHashMFPvZm+0x9a>
	{
	    hash *= 9;
  400f39:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  400f3d:	48 89 d0             	mov    %rdx,%rax
  400f40:	48 c1 e0 03          	shl    $0x3,%rax
  400f44:	48 01 d0             	add    %rdx,%rax
  400f47:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[0];
  400f4b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400f4f:	b8 00 00 00 00       	mov    $0x0,%eax
  400f54:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  400f58:	8b 00                	mov    (%rax),%eax
  400f5a:	89 c0                	mov    %eax,%eax
  400f5c:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[1];
  400f60:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400f64:	b8 04 00 00 00       	mov    $0x4,%eax
  400f69:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  400f6d:	8b 00                	mov    (%rax),%eax
  400f6f:	89 c0                	mov    %eax,%eax
  400f71:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  400f75:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
	    len--;
  400f7a:	48 ff 4d f8          	decq   -0x8(%rbp)
  400f7e:	eb aa                	jmp    400f2a <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7getHashMFPvZm+0x44>
	}

	return hash;
  400f80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  400f84:	c9                   	leaveq 
  400f85:	c3                   	retq   

0000000000400f86 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  400f86:	55                   	push   %rbp
  400f87:	48 89 e5             	mov    %rsp,%rbp
  400f8a:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  400f91:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  400f95:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  400f99:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  400f9d:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  400fa1:	e8 d6 83 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cfloat[] s1 = *cast(cfloat[]*)p1;
  400fa6:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  400faa:	48 8b 02             	mov    (%rdx),%rax
  400fad:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  400fb1:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400fb5:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	cfloat[] s2 = *cast(cfloat[]*)p2;
  400fb9:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  400fbd:	48 8b 02             	mov    (%rdx),%rax
  400fc0:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  400fc4:	48 8b 42 08          	mov    0x8(%rdx),%rax
  400fc8:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  400fcc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  400fd0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  400fd4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400fd8:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  400fdc:	74 0f                	je     400fed <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x67>
	    return 0;
  400fde:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  400fe5:	00 00 00 
  400fe8:	e9 44 01 00 00       	jmpq   401131 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x1ab>
	for (size_t u = 0; u < len; u++)
  400fed:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  400ff4:	00 
  400ff5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400ff9:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  400ffd:	0f 92 c0             	setb   %al
  401000:	83 f0 01             	xor    $0x1,%eax
  401003:	84 c0                	test   %al,%al
  401005:	0f 85 1c 01 00 00    	jne    401127 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x1a1>
	{
	    int c = TypeInfo_q._equals(s1[u], s2[u]);
  40100b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40100f:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  401016:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40101a:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40101e:	73 0d                	jae    40102d <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0xa7>
  401020:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401024:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  40102b:	eb 22                	jmp    40104f <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0xc9>
  40102d:	48 c7 45 c0 19 00 00 	movq   $0x19,-0x40(%rbp)
  401034:	00 
  401035:	48 c7 45 c8 a9 f7 40 	movq   $0x40f7a9,-0x38(%rbp)
  40103c:	00 
  40103d:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  401041:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  401045:	ba 3e 00 00 00       	mov    $0x3e,%edx
  40104a:	e8 f6 9d 00 00       	callq  40ae45 <_d_array_bounds>
  40104f:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  401056:	48 c1 e0 03          	shl    $0x3,%rax
  40105a:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  401061:	d9 00                	flds   (%rax)
  401063:	d9 9d 64 ff ff ff    	fstps  -0x9c(%rbp)
  401069:	d9 40 04             	flds   0x4(%rax)
  40106c:	d9 9d 60 ff ff ff    	fstps  -0xa0(%rbp)
  401072:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401076:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  40107d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401081:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401085:	73 0d                	jae    401094 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x10e>
  401087:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40108b:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  401092:	eb 22                	jmp    4010b6 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x130>
  401094:	48 c7 45 d0 19 00 00 	movq   $0x19,-0x30(%rbp)
  40109b:	00 
  40109c:	48 c7 45 d8 a9 f7 40 	movq   $0x40f7a9,-0x28(%rbp)
  4010a3:	00 
  4010a4:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4010a8:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4010ac:	ba 3e 00 00 00       	mov    $0x3e,%edx
  4010b1:	e8 8f 9d 00 00       	callq  40ae45 <_d_array_bounds>
  4010b6:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  4010bd:	48 c1 e0 03          	shl    $0x3,%rax
  4010c1:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  4010c8:	8b 08                	mov    (%rax),%ecx
  4010ca:	8b 70 04             	mov    0x4(%rax),%esi
  4010cd:	8b 85 64 ff ff ff    	mov    -0x9c(%rbp),%eax
  4010d3:	8b 95 60 ff ff ff    	mov    -0xa0(%rbp),%edx
  4010d9:	89 45 80             	mov    %eax,-0x80(%rbp)
  4010dc:	89 55 84             	mov    %edx,-0x7c(%rbp)
  4010df:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  4010e3:	89 c8                	mov    %ecx,%eax
  4010e5:	89 f2                	mov    %esi,%edx
  4010e7:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  4010ed:	89 95 7c ff ff ff    	mov    %edx,-0x84(%rbp)
  4010f3:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4010fa:	66 48 0f 6e cf       	movq   %rdi,%xmm1
  4010ff:	66 48 0f 6e c0       	movq   %rax,%xmm0
  401104:	e8 3b 33 00 00       	callq  404444 <_D3std8typeinfo9ti_cfloat10TypeInfo_q7_equalsFqqZi>
  401109:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  40110c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  401110:	75 0c                	jne    40111e <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x198>
		return 0;
  401112:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  401119:	00 00 00 
  40111c:	eb 13                	jmp    401131 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x1ab>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_q._equals(s1[u], s2[u]);
	    if (c == 0)
  40111e:	48 ff 45 f0          	incq   -0x10(%rbp)
  401122:	e9 ce fe ff ff       	jmpq   400ff5 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  401127:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  40112e:	00 00 00 
  401131:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
    }
  401137:	c9                   	leaveq 
  401138:	c3                   	retq   

0000000000401139 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  401139:	55                   	push   %rbp
  40113a:	48 89 e5             	mov    %rsp,%rbp
  40113d:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  401144:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  401148:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  40114c:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  401150:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  401154:	e8 23 82 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cfloat[] s1 = *cast(cfloat[]*)p1;
  401159:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40115d:	48 8b 02             	mov    (%rdx),%rax
  401160:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  401164:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401168:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	cfloat[] s2 = *cast(cfloat[]*)p2;
  40116c:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  401170:	48 8b 02             	mov    (%rdx),%rax
  401173:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  401177:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40117b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  40117f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401183:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  401187:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40118b:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40118f:	73 08                	jae    401199 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x60>
	    len = s2.length;
  401191:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401195:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  401199:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4011a0:	00 
  4011a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4011a5:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4011a9:	0f 92 c0             	setb   %al
  4011ac:	83 f0 01             	xor    $0x1,%eax
  4011af:	84 c0                	test   %al,%al
  4011b1:	0f 85 1b 01 00 00    	jne    4012d2 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x199>
	{
	    int c = TypeInfo_q._compare(s1[u], s2[u]);
  4011b7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4011bb:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  4011c2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4011c6:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4011ca:	73 0d                	jae    4011d9 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0xa0>
  4011cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4011d0:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  4011d7:	eb 22                	jmp    4011fb <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0xc2>
  4011d9:	48 c7 45 c0 19 00 00 	movq   $0x19,-0x40(%rbp)
  4011e0:	00 
  4011e1:	48 c7 45 c8 a9 f7 40 	movq   $0x40f7a9,-0x38(%rbp)
  4011e8:	00 
  4011e9:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4011ed:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4011f1:	ba 4f 00 00 00       	mov    $0x4f,%edx
  4011f6:	e8 4a 9c 00 00       	callq  40ae45 <_d_array_bounds>
  4011fb:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  401202:	48 c1 e0 03          	shl    $0x3,%rax
  401206:	48 03 85 48 ff ff ff 	add    -0xb8(%rbp),%rax
  40120d:	d9 00                	flds   (%rax)
  40120f:	d9 9d 5c ff ff ff    	fstps  -0xa4(%rbp)
  401215:	d9 40 04             	flds   0x4(%rax)
  401218:	d9 9d 58 ff ff ff    	fstps  -0xa8(%rbp)
  40121e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401222:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  401229:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40122d:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401231:	73 0d                	jae    401240 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x107>
  401233:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401237:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  40123e:	eb 22                	jmp    401262 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x129>
  401240:	48 c7 45 d0 19 00 00 	movq   $0x19,-0x30(%rbp)
  401247:	00 
  401248:	48 c7 45 d8 a9 f7 40 	movq   $0x40f7a9,-0x28(%rbp)
  40124f:	00 
  401250:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  401254:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  401258:	ba 4f 00 00 00       	mov    $0x4f,%edx
  40125d:	e8 e3 9b 00 00       	callq  40ae45 <_d_array_bounds>
  401262:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  401269:	48 c1 e0 03          	shl    $0x3,%rax
  40126d:	48 03 85 60 ff ff ff 	add    -0xa0(%rbp),%rax
  401274:	8b 08                	mov    (%rax),%ecx
  401276:	8b 70 04             	mov    0x4(%rax),%esi
  401279:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  40127f:	8b 95 58 ff ff ff    	mov    -0xa8(%rbp),%edx
  401285:	89 45 80             	mov    %eax,-0x80(%rbp)
  401288:	89 55 84             	mov    %edx,-0x7c(%rbp)
  40128b:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  40128f:	89 c8                	mov    %ecx,%eax
  401291:	89 f2                	mov    %esi,%edx
  401293:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  401299:	89 95 7c ff ff ff    	mov    %edx,-0x84(%rbp)
  40129f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4012a6:	66 48 0f 6e cf       	movq   %rdi,%xmm1
  4012ab:	66 48 0f 6e c0       	movq   %rax,%xmm0
  4012b0:	e8 d9 31 00 00       	callq  40448e <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi>
  4012b5:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  4012b8:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  4012bc:	74 0b                	je     4012c9 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x190>
		return c;
  4012be:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4012c1:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
  4012c7:	eb 45                	jmp    40130e <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x1d5>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_q._compare(s1[u], s2[u]);
	    if (c)
  4012c9:	48 ff 45 f0          	incq   -0x10(%rbp)
  4012cd:	e9 cf fe ff ff       	jmpq   4011a1 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  4012d2:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4012d6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4012da:	48 39 c2             	cmp    %rax,%rdx
  4012dd:	73 0c                	jae    4012eb <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x1b2>
	    return -1;
  4012df:	c7 85 74 ff ff ff ff 	movl   $0xffffffff,-0x8c(%rbp)
  4012e6:	ff ff ff 
  4012e9:	eb 23                	jmp    40130e <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x1d5>
	else if (s1.length > s2.length)
  4012eb:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4012ef:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4012f3:	48 39 c2             	cmp    %rax,%rdx
  4012f6:	76 0c                	jbe    401304 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x1cb>
	    return 1;
  4012f8:	c7 85 74 ff ff ff 01 	movl   $0x1,-0x8c(%rbp)
  4012ff:	00 00 00 
  401302:	eb 0a                	jmp    40130e <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x1d5>
	return 0;
  401304:	c7 85 74 ff ff ff 00 	movl   $0x0,-0x8c(%rbp)
  40130b:	00 00 00 
  40130e:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
    }
  401314:	c9                   	leaveq 
  401315:	c3                   	retq   

0000000000401316 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq5tsizeMFZm>:

    size_t tsize()
  401316:	55                   	push   %rbp
  401317:	48 89 e5             	mov    %rsp,%rbp
  40131a:	48 83 ec 10          	sub    $0x10,%rsp
  40131e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401322:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401326:	e8 51 80 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cfloat[]).sizeof;
  40132b:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  401330:	c9                   	leaveq 
  401331:	c3                   	retq   

0000000000401332 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq5flagsMFZk>:

    uint flags()
  401332:	55                   	push   %rbp
  401333:	48 89 e5             	mov    %rsp,%rbp
  401336:	48 83 ec 10          	sub    $0x10,%rsp
  40133a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40133e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401342:	e8 35 80 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  401347:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  40134c:	c9                   	leaveq 
  40134d:	c3                   	retq   

000000000040134e <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq4nextMFZC8TypeInfo>:

    TypeInfo next()
  40134e:	55                   	push   %rbp
  40134f:	48 89 e5             	mov    %rsp,%rbp
  401352:	48 83 ec 10          	sub    $0x10,%rsp
  401356:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40135a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40135e:	e8 19 80 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(cfloat);
  401363:	48 c7 c0 b0 08 41 00 	mov    $0x4108b0,%rax
    }
  40136a:	c9                   	leaveq 
  40136b:	c3                   	retq   

000000000040136c <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac8toStringMFZAa>:

// creal[]

class TypeInfo_Ac : TypeInfo
{
    char[] toString() { return "creal[]"; }
  40136c:	55                   	push   %rbp
  40136d:	48 89 e5             	mov    %rsp,%rbp
  401370:	53                   	push   %rbx
  401371:	48 83 ec 08          	sub    $0x8,%rsp
  401375:	48 89 fb             	mov    %rdi,%rbx
  401378:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40137c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  401380:	e8 f7 7f 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  401385:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  40138c:	48 c7 43 08 80 f8 40 	movq   $0x40f880,0x8(%rbx)
  401393:	00 
  401394:	48 89 d8             	mov    %rbx,%rax
  401397:	48 83 c4 08          	add    $0x8,%rsp
  40139b:	5b                   	pop    %rbx
  40139c:	c9                   	leaveq 
  40139d:	c3                   	retq   

000000000040139e <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7getHashMFPvZm>:

    hash_t getHash(void *p)
  40139e:	55                   	push   %rbp
  40139f:	48 89 e5             	mov    %rsp,%rbp
  4013a2:	48 83 ec 40          	sub    $0x40,%rsp
  4013a6:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  4013aa:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  4013ae:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4013b2:	e8 c5 7f 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {	creal[] s = *cast(creal[]*)p;
  4013b7:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4013bb:	48 8b 02             	mov    (%rdx),%rax
  4013be:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4013c2:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4013c6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  4013ca:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4013ce:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	creal *str = s.ptr;
  4013d2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4013d6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  4013da:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4013e1:	00 

	while (len)
  4013e2:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4013e7:	0f 95 c0             	setne  %al
  4013ea:	83 f0 01             	xor    $0x1,%eax
  4013ed:	84 c0                	test   %al,%al
  4013ef:	0f 85 89 00 00 00    	jne    40147e <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7getHashMFPvZm+0xe0>
	{
	    hash *= 9;
  4013f5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4013f9:	48 89 d0             	mov    %rdx,%rax
  4013fc:	48 c1 e0 03          	shl    $0x3,%rax
  401400:	48 01 d0             	add    %rdx,%rax
  401403:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[0];
  401407:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40140b:	b8 00 00 00 00       	mov    $0x0,%eax
  401410:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  401414:	8b 00                	mov    (%rax),%eax
  401416:	89 c0                	mov    %eax,%eax
  401418:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[1];
  40141c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  401420:	b8 04 00 00 00       	mov    $0x4,%eax
  401425:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  401429:	8b 00                	mov    (%rax),%eax
  40142b:	89 c0                	mov    %eax,%eax
  40142d:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[2];
  401431:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  401435:	b8 08 00 00 00       	mov    $0x8,%eax
  40143a:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40143e:	8b 00                	mov    (%rax),%eax
  401440:	89 c0                	mov    %eax,%eax
  401442:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[3];
  401446:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40144a:	b8 0c 00 00 00       	mov    $0xc,%eax
  40144f:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  401453:	8b 00                	mov    (%rax),%eax
  401455:	89 c0                	mov    %eax,%eax
  401457:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[4];
  40145b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40145f:	b8 10 00 00 00       	mov    $0x10,%eax
  401464:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  401468:	8b 00                	mov    (%rax),%eax
  40146a:	89 c0                	mov    %eax,%eax
  40146c:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  401470:	48 83 45 f0 20       	addq   $0x20,-0x10(%rbp)
	    len--;
  401475:	48 ff 4d f8          	decq   -0x8(%rbp)
  401479:	e9 64 ff ff ff       	jmpq   4013e2 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7getHashMFPvZm+0x44>
	}

	return hash;
  40147e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  401482:	c9                   	leaveq 
  401483:	c3                   	retq   

0000000000401484 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  401484:	55                   	push   %rbp
  401485:	48 89 e5             	mov    %rsp,%rbp
  401488:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  40148f:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  401493:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  401497:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40149b:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40149f:	e8 d8 7e 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	creal[] s1 = *cast(creal[]*)p1;
  4014a4:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4014a8:	48 8b 02             	mov    (%rdx),%rax
  4014ab:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  4014af:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4014b3:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	creal[] s2 = *cast(creal[]*)p2;
  4014b7:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4014bb:	48 8b 02             	mov    (%rdx),%rax
  4014be:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4014c2:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4014c6:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  4014ca:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4014ce:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  4014d2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4014d6:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  4014da:	74 0f                	je     4014eb <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x67>
	    return 0;
  4014dc:	c7 85 3c ff ff ff 00 	movl   $0x0,-0xc4(%rbp)
  4014e3:	00 00 00 
  4014e6:	e9 34 01 00 00       	jmpq   40161f <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x19b>
	for (size_t u = 0; u < len; u++)
  4014eb:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4014f2:	00 
  4014f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4014f7:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4014fb:	0f 92 c0             	setb   %al
  4014fe:	83 f0 01             	xor    $0x1,%eax
  401501:	84 c0                	test   %al,%al
  401503:	0f 85 0c 01 00 00    	jne    401615 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x191>
	{
	    int c = TypeInfo_c._equals(s1[u], s2[u]);
  401509:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40150d:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  401514:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401518:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40151c:	73 0d                	jae    40152b <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0xa7>
  40151e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401522:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  401529:	eb 22                	jmp    40154d <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0xc9>
  40152b:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  401532:	00 
  401533:	48 c7 45 c8 88 f8 40 	movq   $0x40f888,-0x38(%rbp)
  40153a:	00 
  40153b:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40153f:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  401543:	ba 41 00 00 00       	mov    $0x41,%edx
  401548:	e8 f8 98 00 00       	callq  40ae45 <_d_array_bounds>
  40154d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  401554:	48 c1 e0 05          	shl    $0x5,%rax
  401558:	48 03 85 40 ff ff ff 	add    -0xc0(%rbp),%rax
  40155f:	db 28                	fldt   (%rax)
  401561:	db bd 60 ff ff ff    	fstpt  -0xa0(%rbp)
  401567:	db 68 10             	fldt   0x10(%rax)
  40156a:	db bd 50 ff ff ff    	fstpt  -0xb0(%rbp)
  401570:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401574:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  40157b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40157f:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401583:	73 0a                	jae    40158f <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x10b>
  401585:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401589:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  40158d:	eb 22                	jmp    4015b1 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x12d>
  40158f:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  401596:	00 
  401597:	48 c7 45 d8 88 f8 40 	movq   $0x40f888,-0x28(%rbp)
  40159e:	00 
  40159f:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4015a3:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4015a7:	ba 41 00 00 00       	mov    $0x41,%edx
  4015ac:	e8 94 98 00 00       	callq  40ae45 <_d_array_bounds>
  4015b1:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  4015b5:	48 c1 e0 05          	shl    $0x5,%rax
  4015b9:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  4015c0:	48 8b 10             	mov    (%rax),%rdx
  4015c3:	8b 48 08             	mov    0x8(%rax),%ecx
  4015c6:	48 8b 70 10          	mov    0x10(%rax),%rsi
  4015ca:	8b 78 18             	mov    0x18(%rax),%edi
  4015cd:	db ad 60 ff ff ff    	fldt   -0xa0(%rbp)
  4015d3:	db 7c 24 20          	fstpt  0x20(%rsp)
  4015d7:	db ad 50 ff ff ff    	fldt   -0xb0(%rbp)
  4015dd:	db 7c 24 30          	fstpt  0x30(%rsp)
  4015e1:	48 89 14 24          	mov    %rdx,(%rsp)
  4015e5:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
  4015e9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  4015ee:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  4015f2:	e8 bc 32 00 00       	callq  4048b3 <_D3std8typeinfo8ti_creal10TypeInfo_c7_equalsFccZi>
  4015f7:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  4015fa:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  4015fe:	75 0c                	jne    40160c <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x188>
		return 0;
  401600:	c7 85 3c ff ff ff 00 	movl   $0x0,-0xc4(%rbp)
  401607:	00 00 00 
  40160a:	eb 13                	jmp    40161f <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x19b>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_c._equals(s1[u], s2[u]);
	    if (c == 0)
  40160c:	48 ff 45 f0          	incq   -0x10(%rbp)
  401610:	e9 de fe ff ff       	jmpq   4014f3 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  401615:	c7 85 3c ff ff ff 01 	movl   $0x1,-0xc4(%rbp)
  40161c:	00 00 00 
  40161f:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
    }
  401625:	c9                   	leaveq 
  401626:	c3                   	retq   

0000000000401627 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  401627:	55                   	push   %rbp
  401628:	48 89 e5             	mov    %rsp,%rbp
  40162b:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
  401632:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  401636:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  40163a:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40163e:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  401642:	e8 35 7d 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	creal[] s1 = *cast(creal[]*)p1;
  401647:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40164b:	48 8b 02             	mov    (%rdx),%rax
  40164e:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  401652:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401656:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	creal[] s2 = *cast(creal[]*)p2;
  40165a:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40165e:	48 8b 02             	mov    (%rdx),%rax
  401661:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  401665:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401669:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  40166d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401671:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  401675:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401679:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40167d:	73 08                	jae    401687 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x60>
	    len = s2.length;
  40167f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401683:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  401687:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40168e:	00 
  40168f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401693:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  401697:	0f 92 c0             	setb   %al
  40169a:	83 f0 01             	xor    $0x1,%eax
  40169d:	84 c0                	test   %al,%al
  40169f:	0f 85 0e 01 00 00    	jne    4017b3 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x18c>
	{
	    int c = TypeInfo_c._compare(s1[u], s2[u]);
  4016a5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4016a9:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  4016b0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4016b4:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4016b8:	73 0d                	jae    4016c7 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0xa0>
  4016ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4016be:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  4016c5:	eb 22                	jmp    4016e9 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0xc2>
  4016c7:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  4016ce:	00 
  4016cf:	48 c7 45 c8 88 f8 40 	movq   $0x40f888,-0x38(%rbp)
  4016d6:	00 
  4016d7:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4016db:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4016df:	ba 52 00 00 00       	mov    $0x52,%edx
  4016e4:	e8 5c 97 00 00       	callq  40ae45 <_d_array_bounds>
  4016e9:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  4016f0:	48 c1 e0 05          	shl    $0x5,%rax
  4016f4:	48 03 85 40 ff ff ff 	add    -0xc0(%rbp),%rax
  4016fb:	db 28                	fldt   (%rax)
  4016fd:	db bd 60 ff ff ff    	fstpt  -0xa0(%rbp)
  401703:	db 68 10             	fldt   0x10(%rax)
  401706:	db bd 50 ff ff ff    	fstpt  -0xb0(%rbp)
  40170c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401710:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  401717:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40171b:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40171f:	73 0d                	jae    40172e <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x107>
  401721:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401725:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  40172c:	eb 22                	jmp    401750 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x129>
  40172e:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  401735:	00 
  401736:	48 c7 45 d8 88 f8 40 	movq   $0x40f888,-0x28(%rbp)
  40173d:	00 
  40173e:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  401742:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  401746:	ba 52 00 00 00       	mov    $0x52,%edx
  40174b:	e8 f5 96 00 00       	callq  40ae45 <_d_array_bounds>
  401750:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  401757:	48 c1 e0 05          	shl    $0x5,%rax
  40175b:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  401762:	48 8b 10             	mov    (%rax),%rdx
  401765:	8b 48 08             	mov    0x8(%rax),%ecx
  401768:	48 8b 70 10          	mov    0x10(%rax),%rsi
  40176c:	8b 78 18             	mov    0x18(%rax),%edi
  40176f:	db ad 60 ff ff ff    	fldt   -0xa0(%rbp)
  401775:	db 7c 24 20          	fstpt  0x20(%rsp)
  401779:	db ad 50 ff ff ff    	fldt   -0xb0(%rbp)
  40177f:	db 7c 24 30          	fstpt  0x30(%rsp)
  401783:	48 89 14 24          	mov    %rdx,(%rsp)
  401787:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
  40178b:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  401790:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  401794:	e8 4b 31 00 00       	callq  4048e4 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi>
  401799:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  40179c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  4017a0:	74 08                	je     4017aa <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x183>
		return c;
  4017a2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4017a5:	89 45 84             	mov    %eax,-0x7c(%rbp)
  4017a8:	eb 3c                	jmp    4017e6 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x1bf>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_c._compare(s1[u], s2[u]);
	    if (c)
  4017aa:	48 ff 45 f0          	incq   -0x10(%rbp)
  4017ae:	e9 dc fe ff ff       	jmpq   40168f <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  4017b3:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4017b7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4017bb:	48 39 c2             	cmp    %rax,%rdx
  4017be:	73 09                	jae    4017c9 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x1a2>
	    return -1;
  4017c0:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  4017c7:	eb 1d                	jmp    4017e6 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x1bf>
	else if (s1.length > s2.length)
  4017c9:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4017cd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4017d1:	48 39 c2             	cmp    %rax,%rdx
  4017d4:	76 09                	jbe    4017df <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x1b8>
	    return 1;
  4017d6:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  4017dd:	eb 07                	jmp    4017e6 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x1bf>
	return 0;
  4017df:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  4017e6:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  4017e9:	c9                   	leaveq 
  4017ea:	c3                   	retq   

00000000004017eb <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac5tsizeMFZm>:

    size_t tsize()
  4017eb:	55                   	push   %rbp
  4017ec:	48 89 e5             	mov    %rsp,%rbp
  4017ef:	48 83 ec 10          	sub    $0x10,%rsp
  4017f3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4017f7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4017fb:	e8 7c 7b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (creal[]).sizeof;
  401800:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  401805:	c9                   	leaveq 
  401806:	c3                   	retq   

0000000000401807 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac5flagsMFZk>:

    uint flags()
  401807:	55                   	push   %rbp
  401808:	48 89 e5             	mov    %rsp,%rbp
  40180b:	48 83 ec 10          	sub    $0x10,%rsp
  40180f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401813:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401817:	e8 60 7b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  40181c:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  401821:	c9                   	leaveq 
  401822:	c3                   	retq   

0000000000401823 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac4nextMFZC8TypeInfo>:

    TypeInfo next()
  401823:	55                   	push   %rbp
  401824:	48 89 e5             	mov    %rsp,%rbp
  401827:	48 83 ec 10          	sub    $0x10,%rsp
  40182b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40182f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401833:	e8 44 7b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(creal);
  401838:	48 c7 c0 30 0a 41 00 	mov    $0x410a30,%rax
    }
  40183f:	c9                   	leaveq 
  401840:	c3                   	retq   
  401841:	90                   	nop    
  401842:	90                   	nop    
  401843:	90                   	nop    

0000000000401844 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad8toStringMFZAa>:

// double[]

class TypeInfo_Ad : TypeInfo
{
    char[] toString() { return "double[]"; }
  401844:	55                   	push   %rbp
  401845:	48 89 e5             	mov    %rsp,%rbp
  401848:	53                   	push   %rbx
  401849:	48 83 ec 08          	sub    $0x8,%rsp
  40184d:	48 89 fb             	mov    %rdi,%rbx
  401850:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  401854:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  401858:	e8 1f 7b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  40185d:	48 c7 03 08 00 00 00 	movq   $0x8,(%rbx)
  401864:	48 c7 43 08 60 f9 40 	movq   $0x40f960,0x8(%rbx)
  40186b:	00 
  40186c:	48 89 d8             	mov    %rbx,%rax
  40186f:	48 83 c4 08          	add    $0x8,%rsp
  401873:	5b                   	pop    %rbx
  401874:	c9                   	leaveq 
  401875:	c3                   	retq   

0000000000401876 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7getHashMFPvZm>:

    hash_t getHash(void *p)
  401876:	55                   	push   %rbp
  401877:	48 89 e5             	mov    %rsp,%rbp
  40187a:	48 83 ec 40          	sub    $0x40,%rsp
  40187e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  401882:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  401886:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  40188a:	e8 ed 7a 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {	double[] s = *cast(double[]*)p;
  40188f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  401893:	48 8b 02             	mov    (%rdx),%rax
  401896:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40189a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40189e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  4018a2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4018a6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto str = s.ptr;
  4018aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4018ae:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  4018b2:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4018b9:	00 

	while (len)
  4018ba:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4018bf:	0f 95 c0             	setne  %al
  4018c2:	83 f0 01             	xor    $0x1,%eax
  4018c5:	84 c0                	test   %al,%al
  4018c7:	75 47                	jne    401910 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7getHashMFPvZm+0x9a>
	{
	    hash *= 9;
  4018c9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4018cd:	48 89 d0             	mov    %rdx,%rax
  4018d0:	48 c1 e0 03          	shl    $0x3,%rax
  4018d4:	48 01 d0             	add    %rdx,%rax
  4018d7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[0];
  4018db:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4018df:	b8 00 00 00 00       	mov    $0x0,%eax
  4018e4:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4018e8:	8b 00                	mov    (%rax),%eax
  4018ea:	89 c0                	mov    %eax,%eax
  4018ec:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[1];
  4018f0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4018f4:	b8 04 00 00 00       	mov    $0x4,%eax
  4018f9:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4018fd:	8b 00                	mov    (%rax),%eax
  4018ff:	89 c0                	mov    %eax,%eax
  401901:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  401905:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
	    len--;
  40190a:	48 ff 4d f8          	decq   -0x8(%rbp)
  40190e:	eb aa                	jmp    4018ba <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7getHashMFPvZm+0x44>
	}

	return hash;
  401910:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  401914:	c9                   	leaveq 
  401915:	c3                   	retq   

0000000000401916 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  401916:	55                   	push   %rbp
  401917:	48 89 e5             	mov    %rsp,%rbp
  40191a:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  401921:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  401925:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  401929:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40192d:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  401931:	e8 46 7a 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	double[] s1 = *cast(double[]*)p1;
  401936:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40193a:	48 8b 02             	mov    (%rdx),%rax
  40193d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  401941:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401945:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	double[] s2 = *cast(double[]*)p2;
  401949:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40194d:	48 8b 02             	mov    (%rdx),%rax
  401950:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  401954:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401958:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  40195c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401960:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  401964:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401968:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40196c:	74 0f                	je     40197d <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x67>
	    return 0;
  40196e:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
  401975:	00 00 00 
  401978:	e9 13 01 00 00       	jmpq   401a90 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x17a>
	for (size_t u = 0; u < len; u++)
  40197d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  401984:	00 
  401985:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401989:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40198d:	0f 92 c0             	setb   %al
  401990:	83 f0 01             	xor    $0x1,%eax
  401993:	84 c0                	test   %al,%al
  401995:	0f 85 eb 00 00 00    	jne    401a86 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x170>
	{
	    int c = TypeInfo_d._equals(s1[u], s2[u]);
  40199b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40199f:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  4019a6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4019aa:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4019ae:	73 0d                	jae    4019bd <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0xa7>
  4019b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4019b4:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  4019bb:	eb 22                	jmp    4019df <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0xc9>
  4019bd:	48 c7 45 c0 19 00 00 	movq   $0x19,-0x40(%rbp)
  4019c4:	00 
  4019c5:	48 c7 45 c8 69 f9 40 	movq   $0x40f969,-0x38(%rbp)
  4019cc:	00 
  4019cd:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4019d1:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4019d5:	ba 3e 00 00 00       	mov    $0x3e,%edx
  4019da:	e8 66 94 00 00       	callq  40ae45 <_d_array_bounds>
  4019df:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  4019e6:	48 c1 e0 03          	shl    $0x3,%rax
  4019ea:	48 03 85 60 ff ff ff 	add    -0xa0(%rbp),%rax
  4019f1:	dd 00                	fldl   (%rax)
  4019f3:	dd 9d 70 ff ff ff    	fstpl  -0x90(%rbp)
  4019f9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4019fd:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  401a04:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401a08:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401a0c:	73 0a                	jae    401a18 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x102>
  401a0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401a12:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  401a16:	eb 22                	jmp    401a3a <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x124>
  401a18:	48 c7 45 d0 19 00 00 	movq   $0x19,-0x30(%rbp)
  401a1f:	00 
  401a20:	48 c7 45 d8 69 f9 40 	movq   $0x40f969,-0x28(%rbp)
  401a27:	00 
  401a28:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  401a2c:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  401a30:	ba 3e 00 00 00       	mov    $0x3e,%edx
  401a35:	e8 0b 94 00 00       	callq  40ae45 <_d_array_bounds>
  401a3a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  401a3e:	48 c1 e0 03          	shl    $0x3,%rax
  401a42:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  401a49:	48 8b 00             	mov    (%rax),%rax
  401a4c:	66 0f 12 8d 70 ff ff 	movlpd -0x90(%rbp),%xmm1
  401a53:	ff 
  401a54:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  401a5b:	66 0f 12 85 48 ff ff 	movlpd -0xb8(%rbp),%xmm0
  401a62:	ff 
  401a63:	e8 04 34 00 00       	callq  404e6c <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi>
  401a68:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  401a6b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  401a6f:	75 0c                	jne    401a7d <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x167>
		return 0;
  401a71:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
  401a78:	00 00 00 
  401a7b:	eb 13                	jmp    401a90 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x17a>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_d._equals(s1[u], s2[u]);
	    if (c == 0)
  401a7d:	48 ff 45 f0          	incq   -0x10(%rbp)
  401a81:	e9 ff fe ff ff       	jmpq   401985 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  401a86:	c7 85 5c ff ff ff 01 	movl   $0x1,-0xa4(%rbp)
  401a8d:	00 00 00 
  401a90:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
    }
  401a96:	c9                   	leaveq 
  401a97:	c3                   	retq   

0000000000401a98 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  401a98:	55                   	push   %rbp
  401a99:	48 89 e5             	mov    %rsp,%rbp
  401a9c:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  401aa3:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  401aa7:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  401aab:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  401aaf:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  401ab3:	e8 c4 78 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	double[] s1 = *cast(double[]*)p1;
  401ab8:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  401abc:	48 8b 02             	mov    (%rdx),%rax
  401abf:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  401ac3:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401ac7:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	double[] s2 = *cast(double[]*)p2;
  401acb:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  401acf:	48 8b 02             	mov    (%rdx),%rax
  401ad2:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  401ad6:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401ada:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  401ade:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401ae2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  401ae6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401aea:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  401aee:	73 08                	jae    401af8 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x60>
	    len = s2.length;
  401af0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401af4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  401af8:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  401aff:	00 
  401b00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401b04:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  401b08:	0f 92 c0             	setb   %al
  401b0b:	83 f0 01             	xor    $0x1,%eax
  401b0e:	84 c0                	test   %al,%al
  401b10:	0f 85 ed 00 00 00    	jne    401c03 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x16b>
	{
	    int c = TypeInfo_d._compare(s1[u], s2[u]);
  401b16:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401b1a:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  401b21:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401b25:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401b29:	73 0d                	jae    401b38 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0xa0>
  401b2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401b2f:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  401b36:	eb 22                	jmp    401b5a <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0xc2>
  401b38:	48 c7 45 c0 19 00 00 	movq   $0x19,-0x40(%rbp)
  401b3f:	00 
  401b40:	48 c7 45 c8 69 f9 40 	movq   $0x40f969,-0x38(%rbp)
  401b47:	00 
  401b48:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  401b4c:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  401b50:	ba 4f 00 00 00       	mov    $0x4f,%edx
  401b55:	e8 eb 92 00 00       	callq  40ae45 <_d_array_bounds>
  401b5a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  401b61:	48 c1 e0 03          	shl    $0x3,%rax
  401b65:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  401b6c:	dd 00                	fldl   (%rax)
  401b6e:	dd 9d 68 ff ff ff    	fstpl  -0x98(%rbp)
  401b74:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401b78:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  401b7f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401b83:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401b87:	73 0d                	jae    401b96 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0xfe>
  401b89:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401b8d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  401b94:	eb 22                	jmp    401bb8 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x120>
  401b96:	48 c7 45 d0 19 00 00 	movq   $0x19,-0x30(%rbp)
  401b9d:	00 
  401b9e:	48 c7 45 d8 69 f9 40 	movq   $0x40f969,-0x28(%rbp)
  401ba5:	00 
  401ba6:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  401baa:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  401bae:	ba 4f 00 00 00       	mov    $0x4f,%edx
  401bb3:	e8 8d 92 00 00       	callq  40ae45 <_d_array_bounds>
  401bb8:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  401bbf:	48 c1 e0 03          	shl    $0x3,%rax
  401bc3:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  401bca:	48 8b 00             	mov    (%rax),%rax
  401bcd:	66 0f 12 8d 68 ff ff 	movlpd -0x98(%rbp),%xmm1
  401bd4:	ff 
  401bd5:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  401bdc:	66 0f 12 85 48 ff ff 	movlpd -0xb8(%rbp),%xmm0
  401be3:	ff 
  401be4:	e8 d1 32 00 00       	callq  404eba <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi>
  401be9:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  401bec:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  401bf0:	74 08                	je     401bfa <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x162>
		return c;
  401bf2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401bf5:	89 45 84             	mov    %eax,-0x7c(%rbp)
  401bf8:	eb 3c                	jmp    401c36 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x19e>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_d._compare(s1[u], s2[u]);
	    if (c)
  401bfa:	48 ff 45 f0          	incq   -0x10(%rbp)
  401bfe:	e9 fd fe ff ff       	jmpq   401b00 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  401c03:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  401c07:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401c0b:	48 39 c2             	cmp    %rax,%rdx
  401c0e:	73 09                	jae    401c19 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x181>
	    return -1;
  401c10:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  401c17:	eb 1d                	jmp    401c36 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x19e>
	else if (s1.length > s2.length)
  401c19:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  401c1d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401c21:	48 39 c2             	cmp    %rax,%rdx
  401c24:	76 09                	jbe    401c2f <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x197>
	    return 1;
  401c26:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  401c2d:	eb 07                	jmp    401c36 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x19e>
	return 0;
  401c2f:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  401c36:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  401c39:	c9                   	leaveq 
  401c3a:	c3                   	retq   

0000000000401c3b <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad5tsizeMFZm>:

    size_t tsize()
  401c3b:	55                   	push   %rbp
  401c3c:	48 89 e5             	mov    %rsp,%rbp
  401c3f:	48 83 ec 10          	sub    $0x10,%rsp
  401c43:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401c47:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401c4b:	e8 2c 77 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (double[]).sizeof;
  401c50:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  401c55:	c9                   	leaveq 
  401c56:	c3                   	retq   

0000000000401c57 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad5flagsMFZk>:

    uint flags()
  401c57:	55                   	push   %rbp
  401c58:	48 89 e5             	mov    %rsp,%rbp
  401c5b:	48 83 ec 10          	sub    $0x10,%rsp
  401c5f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401c63:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401c67:	e8 10 77 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  401c6c:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  401c71:	c9                   	leaveq 
  401c72:	c3                   	retq   

0000000000401c73 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad4nextMFZC8TypeInfo>:

    TypeInfo next()
  401c73:	55                   	push   %rbp
  401c74:	48 89 e5             	mov    %rsp,%rbp
  401c77:	48 83 ec 10          	sub    $0x10,%rsp
  401c7b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401c7f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401c83:	e8 f4 76 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(double);
  401c88:	48 c7 c0 50 0c 41 00 	mov    $0x410c50,%rax
    }
  401c8f:	c9                   	leaveq 
  401c90:	c3                   	retq   

0000000000401c91 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ap8toStringMFZAa>:

// idouble[]

class TypeInfo_Ap : TypeInfo_Ad
{
    char[] toString() { return "idouble[]"; }
  401c91:	55                   	push   %rbp
  401c92:	48 89 e5             	mov    %rsp,%rbp
  401c95:	53                   	push   %rbx
  401c96:	48 83 ec 08          	sub    $0x8,%rsp
  401c9a:	48 89 fb             	mov    %rdi,%rbx
  401c9d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  401ca1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  401ca5:	e8 d2 76 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  401caa:	48 c7 03 09 00 00 00 	movq   $0x9,(%rbx)
  401cb1:	48 c7 43 08 30 fa 40 	movq   $0x40fa30,0x8(%rbx)
  401cb8:	00 
  401cb9:	48 89 d8             	mov    %rbx,%rax
  401cbc:	48 83 c4 08          	add    $0x8,%rsp
  401cc0:	5b                   	pop    %rbx
  401cc1:	c9                   	leaveq 
  401cc2:	c3                   	retq   

0000000000401cc3 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ap4nextMFZC8TypeInfo>:

    TypeInfo next()
  401cc3:	55                   	push   %rbp
  401cc4:	48 89 e5             	mov    %rsp,%rbp
  401cc7:	48 83 ec 10          	sub    $0x10,%rsp
  401ccb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401ccf:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401cd3:	e8 a4 76 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(idouble);
  401cd8:	48 c7 c0 d0 0d 41 00 	mov    $0x410dd0,%rax
    }
  401cdf:	c9                   	leaveq 
  401ce0:	c3                   	retq   
  401ce1:	90                   	nop    
  401ce2:	90                   	nop    
  401ce3:	90                   	nop    

0000000000401ce4 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af8toStringMFZAa>:

// float[]

class TypeInfo_Af : TypeInfo
{
    char[] toString() { return "float[]"; }
  401ce4:	55                   	push   %rbp
  401ce5:	48 89 e5             	mov    %rsp,%rbp
  401ce8:	53                   	push   %rbx
  401ce9:	48 83 ec 08          	sub    $0x8,%rsp
  401ced:	48 89 fb             	mov    %rdi,%rbx
  401cf0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  401cf4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  401cf8:	e8 7f 76 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  401cfd:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  401d04:	48 c7 43 08 e0 fa 40 	movq   $0x40fae0,0x8(%rbx)
  401d0b:	00 
  401d0c:	48 89 d8             	mov    %rbx,%rax
  401d0f:	48 83 c4 08          	add    $0x8,%rsp
  401d13:	5b                   	pop    %rbx
  401d14:	c9                   	leaveq 
  401d15:	c3                   	retq   

0000000000401d16 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7getHashMFPvZm>:

    hash_t getHash(void *p)
  401d16:	55                   	push   %rbp
  401d17:	48 89 e5             	mov    %rsp,%rbp
  401d1a:	48 83 ec 40          	sub    $0x40,%rsp
  401d1e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  401d22:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  401d26:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  401d2a:	e8 4d 76 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {	float[] s = *cast(float[]*)p;
  401d2f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  401d33:	48 8b 02             	mov    (%rdx),%rax
  401d36:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  401d3a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401d3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  401d42:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  401d46:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto str = s.ptr;
  401d4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  401d4e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  401d52:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  401d59:	00 

	while (len)
  401d5a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  401d5f:	0f 95 c0             	setne  %al
  401d62:	83 f0 01             	xor    $0x1,%eax
  401d65:	84 c0                	test   %al,%al
  401d67:	75 29                	jne    401d92 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7getHashMFPvZm+0x7c>
	{
	    hash *= 9;
  401d69:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  401d6d:	48 89 d0             	mov    %rdx,%rax
  401d70:	48 c1 e0 03          	shl    $0x3,%rax
  401d74:	48 01 d0             	add    %rdx,%rax
  401d77:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += *cast(uint *)str;
  401d7b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401d7f:	8b 00                	mov    (%rax),%eax
  401d81:	89 c0                	mov    %eax,%eax
  401d83:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  401d87:	48 83 45 f0 04       	addq   $0x4,-0x10(%rbp)
	    len--;
  401d8c:	48 ff 4d f8          	decq   -0x8(%rbp)
  401d90:	eb c8                	jmp    401d5a <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7getHashMFPvZm+0x44>
	}

	return hash;
  401d92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  401d96:	c9                   	leaveq 
  401d97:	c3                   	retq   

0000000000401d98 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  401d98:	55                   	push   %rbp
  401d99:	48 89 e5             	mov    %rsp,%rbp
  401d9c:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  401da3:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  401da7:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  401dab:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  401daf:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  401db3:	e8 c4 75 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	float[] s1 = *cast(float[]*)p1;
  401db8:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  401dbc:	48 8b 02             	mov    (%rdx),%rax
  401dbf:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  401dc3:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401dc7:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	float[] s2 = *cast(float[]*)p2;
  401dcb:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  401dcf:	48 8b 02             	mov    (%rdx),%rax
  401dd2:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  401dd6:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401dda:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  401dde:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401de2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  401de6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401dea:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  401dee:	74 0f                	je     401dff <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x67>
	    return 0;
  401df0:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
  401df7:	00 00 00 
  401dfa:	e9 11 01 00 00       	jmpq   401f10 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x178>
	for (size_t u = 0; u < len; u++)
  401dff:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  401e06:	00 
  401e07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401e0b:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  401e0f:	0f 92 c0             	setb   %al
  401e12:	83 f0 01             	xor    $0x1,%eax
  401e15:	84 c0                	test   %al,%al
  401e17:	0f 85 e9 00 00 00    	jne    401f06 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x16e>
	{
	    int c = TypeInfo_f._equals(s1[u], s2[u]);
  401e1d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401e21:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  401e28:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401e2c:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401e30:	73 0d                	jae    401e3f <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0xa7>
  401e32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401e36:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  401e3d:	eb 22                	jmp    401e61 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0xc9>
  401e3f:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  401e46:	00 
  401e47:	48 c7 45 c8 e8 fa 40 	movq   $0x40fae8,-0x38(%rbp)
  401e4e:	00 
  401e4f:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  401e53:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  401e57:	ba 3d 00 00 00       	mov    $0x3d,%edx
  401e5c:	e8 e4 8f 00 00       	callq  40ae45 <_d_array_bounds>
  401e61:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  401e68:	48 c1 e0 02          	shl    $0x2,%rax
  401e6c:	48 03 85 60 ff ff ff 	add    -0xa0(%rbp),%rax
  401e73:	d9 00                	flds   (%rax)
  401e75:	d9 9d 74 ff ff ff    	fstps  -0x8c(%rbp)
  401e7b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401e7f:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  401e86:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401e8a:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401e8e:	73 0a                	jae    401e9a <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x102>
  401e90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401e94:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  401e98:	eb 22                	jmp    401ebc <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x124>
  401e9a:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  401ea1:	00 
  401ea2:	48 c7 45 d8 e8 fa 40 	movq   $0x40fae8,-0x28(%rbp)
  401ea9:	00 
  401eaa:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  401eae:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  401eb2:	ba 3d 00 00 00       	mov    $0x3d,%edx
  401eb7:	e8 89 8f 00 00       	callq  40ae45 <_d_array_bounds>
  401ebc:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  401ec0:	48 c1 e0 02          	shl    $0x2,%rax
  401ec4:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  401ecb:	8b 00                	mov    (%rax),%eax
  401ecd:	f3 0f 10 8d 74 ff ff 	movss  -0x8c(%rbp),%xmm1
  401ed4:	ff 
  401ed5:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  401edb:	f3 0f 10 85 4c ff ff 	movss  -0xb4(%rbp),%xmm0
  401ee2:	ff 
  401ee3:	e8 15 32 00 00       	callq  4050fd <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi>
  401ee8:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  401eeb:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  401eef:	75 0c                	jne    401efd <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x165>
		return 0;
  401ef1:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
  401ef8:	00 00 00 
  401efb:	eb 13                	jmp    401f10 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x178>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_f._equals(s1[u], s2[u]);
	    if (c == 0)
  401efd:	48 ff 45 f0          	incq   -0x10(%rbp)
  401f01:	e9 01 ff ff ff       	jmpq   401e07 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  401f06:	c7 85 5c ff ff ff 01 	movl   $0x1,-0xa4(%rbp)
  401f0d:	00 00 00 
  401f10:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
    }
  401f16:	c9                   	leaveq 
  401f17:	c3                   	retq   

0000000000401f18 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  401f18:	55                   	push   %rbp
  401f19:	48 89 e5             	mov    %rsp,%rbp
  401f1c:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  401f23:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  401f27:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  401f2b:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  401f2f:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  401f33:	e8 44 74 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	float[] s1 = *cast(float[]*)p1;
  401f38:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  401f3c:	48 8b 02             	mov    (%rdx),%rax
  401f3f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  401f43:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401f47:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	float[] s2 = *cast(float[]*)p2;
  401f4b:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  401f4f:	48 8b 02             	mov    (%rdx),%rax
  401f52:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  401f56:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401f5a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  401f5e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401f62:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  401f66:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401f6a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  401f6e:	73 08                	jae    401f78 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x60>
	    len = s2.length;
  401f70:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401f74:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  401f78:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  401f7f:	00 
  401f80:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401f84:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  401f88:	0f 92 c0             	setb   %al
  401f8b:	83 f0 01             	xor    $0x1,%eax
  401f8e:	84 c0                	test   %al,%al
  401f90:	0f 85 eb 00 00 00    	jne    402081 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x169>
	{
	    int c = TypeInfo_f._compare(s1[u], s2[u]);
  401f96:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401f9a:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  401fa1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401fa5:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  401fa9:	73 0d                	jae    401fb8 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0xa0>
  401fab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401faf:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  401fb6:	eb 22                	jmp    401fda <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0xc2>
  401fb8:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  401fbf:	00 
  401fc0:	48 c7 45 c8 e8 fa 40 	movq   $0x40fae8,-0x38(%rbp)
  401fc7:	00 
  401fc8:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  401fcc:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  401fd0:	ba 4e 00 00 00       	mov    $0x4e,%edx
  401fd5:	e8 6b 8e 00 00       	callq  40ae45 <_d_array_bounds>
  401fda:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  401fe1:	48 c1 e0 02          	shl    $0x2,%rax
  401fe5:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  401fec:	d9 00                	flds   (%rax)
  401fee:	d9 9d 6c ff ff ff    	fstps  -0x94(%rbp)
  401ff4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401ff8:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  401fff:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402003:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  402007:	73 0d                	jae    402016 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0xfe>
  402009:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40200d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  402014:	eb 22                	jmp    402038 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x120>
  402016:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  40201d:	00 
  40201e:	48 c7 45 d8 e8 fa 40 	movq   $0x40fae8,-0x28(%rbp)
  402025:	00 
  402026:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40202a:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40202e:	ba 4e 00 00 00       	mov    $0x4e,%edx
  402033:	e8 0d 8e 00 00       	callq  40ae45 <_d_array_bounds>
  402038:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40203f:	48 c1 e0 02          	shl    $0x2,%rax
  402043:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  40204a:	8b 00                	mov    (%rax),%eax
  40204c:	f3 0f 10 8d 6c ff ff 	movss  -0x94(%rbp),%xmm1
  402053:	ff 
  402054:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  40205a:	f3 0f 10 85 4c ff ff 	movss  -0xb4(%rbp),%xmm0
  402061:	ff 
  402062:	e8 e3 30 00 00       	callq  40514a <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi>
  402067:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  40206a:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40206e:	74 08                	je     402078 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x160>
		return c;
  402070:	8b 45 fc             	mov    -0x4(%rbp),%eax
  402073:	89 45 84             	mov    %eax,-0x7c(%rbp)
  402076:	eb 3c                	jmp    4020b4 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x19c>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_f._compare(s1[u], s2[u]);
	    if (c)
  402078:	48 ff 45 f0          	incq   -0x10(%rbp)
  40207c:	e9 ff fe ff ff       	jmpq   401f80 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  402081:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  402085:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402089:	48 39 c2             	cmp    %rax,%rdx
  40208c:	73 09                	jae    402097 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x17f>
	    return -1;
  40208e:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  402095:	eb 1d                	jmp    4020b4 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x19c>
	else if (s1.length > s2.length)
  402097:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40209b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40209f:	48 39 c2             	cmp    %rax,%rdx
  4020a2:	76 09                	jbe    4020ad <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x195>
	    return 1;
  4020a4:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  4020ab:	eb 07                	jmp    4020b4 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x19c>
	return 0;
  4020ad:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  4020b4:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  4020b7:	c9                   	leaveq 
  4020b8:	c3                   	retq   

00000000004020b9 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af5tsizeMFZm>:

    size_t tsize()
  4020b9:	55                   	push   %rbp
  4020ba:	48 89 e5             	mov    %rsp,%rbp
  4020bd:	48 83 ec 10          	sub    $0x10,%rsp
  4020c1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4020c5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4020c9:	e8 ae 72 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (float[]).sizeof;
  4020ce:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  4020d3:	c9                   	leaveq 
  4020d4:	c3                   	retq   

00000000004020d5 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af5flagsMFZk>:

    uint flags()
  4020d5:	55                   	push   %rbp
  4020d6:	48 89 e5             	mov    %rsp,%rbp
  4020d9:	48 83 ec 10          	sub    $0x10,%rsp
  4020dd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4020e1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4020e5:	e8 92 72 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  4020ea:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  4020ef:	c9                   	leaveq 
  4020f0:	c3                   	retq   

00000000004020f1 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af4nextMFZC8TypeInfo>:

    TypeInfo next()
  4020f1:	55                   	push   %rbp
  4020f2:	48 89 e5             	mov    %rsp,%rbp
  4020f5:	48 83 ec 10          	sub    $0x10,%rsp
  4020f9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4020fd:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402101:	e8 76 72 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(float);
  402106:	48 c7 c0 10 0d 41 00 	mov    $0x410d10,%rax
    }
  40210d:	c9                   	leaveq 
  40210e:	c3                   	retq   

000000000040210f <_D3std8typeinfo9ti_Afloat11TypeInfo_Ao8toStringMFZAa>:

// ifloat[]

class TypeInfo_Ao : TypeInfo_Af
{
    char[] toString() { return "ifloat[]"; }
  40210f:	55                   	push   %rbp
  402110:	48 89 e5             	mov    %rsp,%rbp
  402113:	53                   	push   %rbx
  402114:	48 83 ec 08          	sub    $0x8,%rsp
  402118:	48 89 fb             	mov    %rdi,%rbx
  40211b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40211f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402123:	e8 54 72 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  402128:	48 c7 03 08 00 00 00 	movq   $0x8,(%rbx)
  40212f:	48 c7 43 08 b0 fb 40 	movq   $0x40fbb0,0x8(%rbx)
  402136:	00 
  402137:	48 89 d8             	mov    %rbx,%rax
  40213a:	48 83 c4 08          	add    $0x8,%rsp
  40213e:	5b                   	pop    %rbx
  40213f:	c9                   	leaveq 
  402140:	c3                   	retq   

0000000000402141 <_D3std8typeinfo9ti_Afloat11TypeInfo_Ao4nextMFZC8TypeInfo>:

    TypeInfo next()
  402141:	55                   	push   %rbp
  402142:	48 89 e5             	mov    %rsp,%rbp
  402145:	48 83 ec 10          	sub    $0x10,%rsp
  402149:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40214d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402151:	e8 26 72 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(ifloat);
  402156:	48 c7 c0 90 0e 41 00 	mov    $0x410e90,%rax
    }
  40215d:	c9                   	leaveq 
  40215e:	c3                   	retq   
  40215f:	90                   	nop    

0000000000402160 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag8toStringMFZAa>:
import kernel.core.system;
// byte[]

class TypeInfo_Ag : TypeInfo
{
    char[] toString() { return "byte[]"; }
  402160:	55                   	push   %rbp
  402161:	48 89 e5             	mov    %rsp,%rbp
  402164:	53                   	push   %rbx
  402165:	48 83 ec 08          	sub    $0x8,%rsp
  402169:	48 89 fb             	mov    %rdi,%rbx
  40216c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402170:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402174:	e8 03 72 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  402179:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  402180:	48 c7 43 08 60 fc 40 	movq   $0x40fc60,0x8(%rbx)
  402187:	00 
  402188:	48 89 d8             	mov    %rbx,%rax
  40218b:	48 83 c4 08          	add    $0x8,%rsp
  40218f:	5b                   	pop    %rbx
  402190:	c9                   	leaveq 
  402191:	c3                   	retq   

0000000000402192 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm>:

    hash_t getHash(void *p)
  402192:	55                   	push   %rbp
  402193:	48 89 e5             	mov    %rsp,%rbp
  402196:	48 83 ec 50          	sub    $0x50,%rsp
  40219a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40219e:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  4021a2:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4021a6:	e8 d1 71 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {	byte[] s = *cast(byte[]*)p;
  4021ab:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4021af:	48 8b 02             	mov    (%rdx),%rax
  4021b2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4021b6:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4021ba:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  4021be:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4021c2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	byte *str = s.ptr;
  4021c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4021ca:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  4021ce:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4021d5:	00 

	while (1)
  4021d6:	b8 00 00 00 00       	mov    $0x0,%eax
  4021db:	84 c0                	test   %al,%al
  4021dd:	0f 85 01 01 00 00    	jne    4022e4 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x152>
		default:
		    hash *= 9;
		    hash += *cast(uint *)str;
		    str += 4;
		    len -= 4;
		    break;
  4021e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4021e7:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4021eb:	48 83 7d b0 01       	cmpq   $0x1,-0x50(%rbp)
  4021f0:	74 27                	je     402219 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x87>
  4021f2:	48 83 7d b0 01       	cmpq   $0x1,-0x50(%rbp)
  4021f7:	72 13                	jb     40220c <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x7a>
  4021f9:	48 83 7d b0 02       	cmpq   $0x2,-0x50(%rbp)
  4021fe:	74 46                	je     402246 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0xb4>
  402200:	48 83 7d b0 03       	cmpq   $0x3,-0x50(%rbp)
  402205:	74 69                	je     402270 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0xde>
  402207:	e9 ab 00 00 00       	jmpq   4022b7 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x125>
	while (1)
	{
	    switch (len)
	    {
		case 0:
		    return hash;
  40220c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402210:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  402214:	e9 d3 00 00 00       	jmpq   4022ec <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x15a>

		case 1:
		    hash *= 9;
  402219:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40221d:	48 89 d0             	mov    %rdx,%rax
  402220:	48 c1 e0 03          	shl    $0x3,%rax
  402224:	48 01 d0             	add    %rdx,%rax
  402227:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += *cast(ubyte *)str;
  40222b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40222f:	0f b6 00             	movzbl (%rax),%eax
  402232:	0f b6 c0             	movzbl %al,%eax
  402235:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		    return hash;
  402239:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40223d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  402241:	e9 a6 00 00 00       	jmpq   4022ec <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x15a>

		case 2:
		    hash *= 9;
  402246:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40224a:	48 89 d0             	mov    %rdx,%rax
  40224d:	48 c1 e0 03          	shl    $0x3,%rax
  402251:	48 01 d0             	add    %rdx,%rax
  402254:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += *cast(ushort *)str;
  402258:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40225c:	0f b7 00             	movzwl (%rax),%eax
  40225f:	0f b7 c0             	movzwl %ax,%eax
  402262:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		    return hash;
  402266:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40226a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40226e:	eb 7c                	jmp    4022ec <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x15a>

		case 3:
		    hash *= 9;
  402270:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  402274:	48 89 d0             	mov    %rdx,%rax
  402277:	48 c1 e0 03          	shl    $0x3,%rax
  40227b:	48 01 d0             	add    %rdx,%rax
  40227e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += (*cast(ushort *)str << 8) +
  402282:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402286:	0f b7 00             	movzwl (%rax),%eax
  402289:	0f b7 c0             	movzwl %ax,%eax
  40228c:	89 c1                	mov    %eax,%ecx
  40228e:	c1 e1 08             	shl    $0x8,%ecx
  402291:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  402295:	b8 02 00 00 00       	mov    $0x2,%eax
  40229a:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40229e:	0f b6 00             	movzbl (%rax),%eax
  4022a1:	0f b6 c0             	movzbl %al,%eax
  4022a4:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  4022a7:	48 98                	cltq   
  4022a9:	48 01 45 e8          	add    %rax,-0x18(%rbp)
			    (cast(ubyte *)str)[2];
		    return hash;
  4022ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4022b1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  4022b5:	eb 35                	jmp    4022ec <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x15a>

		default:
		    hash *= 9;
  4022b7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4022bb:	48 89 d0             	mov    %rdx,%rax
  4022be:	48 c1 e0 03          	shl    $0x3,%rax
  4022c2:	48 01 d0             	add    %rdx,%rax
  4022c5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += *cast(uint *)str;
  4022c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4022cd:	8b 00                	mov    (%rax),%eax
  4022cf:	89 c0                	mov    %eax,%eax
  4022d1:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		    str += 4;
  4022d5:	48 83 45 f0 04       	addq   $0x4,-0x10(%rbp)
		    len -= 4;
  4022da:	48 83 6d f8 04       	subq   $0x4,-0x8(%rbp)
		    break;
  4022df:	e9 f2 fe ff ff       	jmpq   4021d6 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x44>
	    }
	}

	return hash;
  4022e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4022e8:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  4022ec:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    }
  4022f0:	c9                   	leaveq 
  4022f1:	c3                   	retq   

00000000004022f2 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4022f2:	55                   	push   %rbp
  4022f3:	48 89 e5             	mov    %rsp,%rbp
  4022f6:	48 83 ec 40          	sub    $0x40,%rsp
  4022fa:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4022fe:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  402302:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  402306:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  40230a:	e8 6d 70 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ubyte[] s1 = *cast(ubyte[]*)p1;
  40230f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  402313:	48 8b 02             	mov    (%rdx),%rax
  402316:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40231a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40231e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	ubyte[] s2 = *cast(ubyte[]*)p2;
  402322:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  402326:	48 8b 02             	mov    (%rdx),%rax
  402329:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40232d:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402331:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return s1.length == s2.length &&
  402335:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  402339:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40233d:	48 39 c2             	cmp    %rax,%rdx
  402340:	75 1c                	jne    40235e <_D3std8typeinfo5ti_Ag11TypeInfo_Ag6equalsMFPvPvZi+0x6c>
  402342:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  402346:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40234a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40234e:	e8 61 b5 00 00       	callq  40d8b4 <_D6kernel4core6system6memcmpFPvPvmZl>
  402353:	48 85 c0             	test   %rax,%rax
  402356:	75 06                	jne    40235e <_D3std8typeinfo5ti_Ag11TypeInfo_Ag6equalsMFPvPvZi+0x6c>
  402358:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
  40235c:	eb 04                	jmp    402362 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag6equalsMFPvPvZi+0x70>
  40235e:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  402362:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
	       memcmp(s1.ptr, s2.ptr, s1.length) == 0;
    }
  402366:	c9                   	leaveq 
  402367:	c3                   	retq   

0000000000402368 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  402368:	55                   	push   %rbp
  402369:	48 89 e5             	mov    %rsp,%rbp
  40236c:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  402373:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  402377:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  40237b:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40237f:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  402383:	e8 f4 6f 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	byte[] s1 = *cast(byte[]*)p1;
  402388:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40238c:	48 8b 02             	mov    (%rdx),%rax
  40238f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  402393:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402397:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	byte[] s2 = *cast(byte[]*)p2;
  40239b:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40239f:	48 8b 02             	mov    (%rdx),%rax
  4023a2:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4023a6:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4023aa:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  4023ae:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4023b2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  4023b6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4023ba:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4023be:	73 08                	jae    4023c8 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x60>
	    len = s2.length;
  4023c0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4023c4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  4023c8:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4023cf:	00 
  4023d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4023d4:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4023d8:	0f 92 c0             	setb   %al
  4023db:	83 f0 01             	xor    $0x1,%eax
  4023de:	84 c0                	test   %al,%al
  4023e0:	0f 85 da 00 00 00    	jne    4024c0 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x158>
	{
	    int result = s1[u] - s2[u];
  4023e6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4023ea:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  4023f1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4023f5:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4023f9:	73 0d                	jae    402408 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0xa0>
  4023fb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4023ff:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  402406:	eb 22                	jmp    40242a <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0xc2>
  402408:	48 c7 45 c0 14 00 00 	movq   $0x14,-0x40(%rbp)
  40240f:	00 
  402410:	48 c7 45 c8 67 fc 40 	movq   $0x40fc67,-0x38(%rbp)
  402417:	00 
  402418:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40241c:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  402420:	ba 46 00 00 00       	mov    $0x46,%edx
  402425:	e8 1b 8a 00 00       	callq  40ae45 <_d_array_bounds>
  40242a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  402431:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  402438:	0f b6 00             	movzbl (%rax),%eax
  40243b:	0f be c0             	movsbl %al,%eax
  40243e:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  402444:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402448:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  40244f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402453:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  402457:	73 0d                	jae    402466 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0xfe>
  402459:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40245d:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  402464:	eb 22                	jmp    402488 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x120>
  402466:	48 c7 45 d0 14 00 00 	movq   $0x14,-0x30(%rbp)
  40246d:	00 
  40246e:	48 c7 45 d8 67 fc 40 	movq   $0x40fc67,-0x28(%rbp)
  402475:	00 
  402476:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40247a:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40247e:	ba 46 00 00 00       	mov    $0x46,%edx
  402483:	e8 bd 89 00 00       	callq  40ae45 <_d_array_bounds>
  402488:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40248f:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  402496:	0f b6 00             	movzbl (%rax),%eax
  402499:	0f be c0             	movsbl %al,%eax
  40249c:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  4024a2:	29 c2                	sub    %eax,%edx
  4024a4:	89 d0                	mov    %edx,%eax
  4024a6:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (result)
  4024a9:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  4024ad:	74 08                	je     4024b7 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x14f>
		return result;
  4024af:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4024b2:	89 45 84             	mov    %eax,-0x7c(%rbp)
  4024b5:	eb 3c                	jmp    4024f3 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x18b>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int result = s1[u] - s2[u];
	    if (result)
  4024b7:	48 ff 45 f0          	incq   -0x10(%rbp)
  4024bb:	e9 10 ff ff ff       	jmpq   4023d0 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x68>
		return result;
	}
	if (s1.length < s2.length)
  4024c0:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4024c4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4024c8:	48 39 c2             	cmp    %rax,%rdx
  4024cb:	73 09                	jae    4024d6 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x16e>
	    return -1;
  4024cd:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  4024d4:	eb 1d                	jmp    4024f3 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x18b>
	else if (s1.length > s2.length)
  4024d6:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4024da:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4024de:	48 39 c2             	cmp    %rax,%rdx
  4024e1:	76 09                	jbe    4024ec <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x184>
	    return 1;
  4024e3:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  4024ea:	eb 07                	jmp    4024f3 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x18b>
	return 0;
  4024ec:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  4024f3:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  4024f6:	c9                   	leaveq 
  4024f7:	c3                   	retq   

00000000004024f8 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag5tsizeMFZm>:

    size_t tsize()
  4024f8:	55                   	push   %rbp
  4024f9:	48 89 e5             	mov    %rsp,%rbp
  4024fc:	48 83 ec 10          	sub    $0x10,%rsp
  402500:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402504:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402508:	e8 6f 6e 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (byte[]).sizeof;
  40250d:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  402512:	c9                   	leaveq 
  402513:	c3                   	retq   

0000000000402514 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag5flagsMFZk>:

    uint flags()
  402514:	55                   	push   %rbp
  402515:	48 89 e5             	mov    %rsp,%rbp
  402518:	48 83 ec 10          	sub    $0x10,%rsp
  40251c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402520:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402524:	e8 53 6e 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  402529:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  40252e:	c9                   	leaveq 
  40252f:	c3                   	retq   

0000000000402530 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag4nextMFZC8TypeInfo>:

    TypeInfo next()
  402530:	55                   	push   %rbp
  402531:	48 89 e5             	mov    %rsp,%rbp
  402534:	48 83 ec 10          	sub    $0x10,%rsp
  402538:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40253c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402540:	e8 37 6e 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(byte);
  402545:	48 c7 c0 90 06 41 00 	mov    $0x410690,%rax
    }
  40254c:	c9                   	leaveq 
  40254d:	c3                   	retq   

000000000040254e <_D3std8typeinfo5ti_Ag11TypeInfo_Ah8toStringMFZAa>:

// ubyte[]

class TypeInfo_Ah : TypeInfo_Ag
{
    char[] toString() { return "ubyte[]"; }
  40254e:	55                   	push   %rbp
  40254f:	48 89 e5             	mov    %rsp,%rbp
  402552:	53                   	push   %rbx
  402553:	48 83 ec 08          	sub    $0x8,%rsp
  402557:	48 89 fb             	mov    %rdi,%rbx
  40255a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40255e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402562:	e8 15 6e 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  402567:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  40256e:	48 c7 43 08 10 fd 40 	movq   $0x40fd10,0x8(%rbx)
  402575:	00 
  402576:	48 89 d8             	mov    %rbx,%rax
  402579:	48 83 c4 08          	add    $0x8,%rsp
  40257d:	5b                   	pop    %rbx
  40257e:	c9                   	leaveq 
  40257f:	c3                   	retq   

0000000000402580 <_D3std8typeinfo5ti_Ag11TypeInfo_Ah7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  402580:	55                   	push   %rbp
  402581:	48 89 e5             	mov    %rsp,%rbp
  402584:	48 83 ec 40          	sub    $0x40,%rsp
  402588:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40258c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  402590:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  402594:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  402598:	e8 df 6d 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ubyte[] s1 = *cast(ubyte[]*)p1;
  40259d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4025a1:	48 8b 02             	mov    (%rdx),%rax
  4025a4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4025a8:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4025ac:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	ubyte[] s2 = *cast(ubyte[]*)p2;
  4025b0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4025b4:	48 8b 02             	mov    (%rdx),%rax
  4025b7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4025bb:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4025bf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return memcmp(s1.ptr, s2.ptr, s1.length);
  4025c3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4025c7:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  4025cb:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4025cf:	e8 e0 b2 00 00       	callq  40d8b4 <_D6kernel4core6system6memcmpFPvPvmZl>
    }
  4025d4:	c9                   	leaveq 
  4025d5:	c3                   	retq   

00000000004025d6 <_D3std8typeinfo5ti_Ag11TypeInfo_Ah4nextMFZC8TypeInfo>:

    TypeInfo next()
  4025d6:	55                   	push   %rbp
  4025d7:	48 89 e5             	mov    %rsp,%rbp
  4025da:	48 83 ec 10          	sub    $0x10,%rsp
  4025de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4025e2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4025e6:	e8 91 6d 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(ubyte);
  4025eb:	48 c7 c0 b0 13 41 00 	mov    $0x4113b0,%rax
    }
  4025f2:	c9                   	leaveq 
  4025f3:	c3                   	retq   

00000000004025f4 <_D3std8typeinfo5ti_Ag11TypeInfo_Av8toStringMFZAa>:

// void[]

class TypeInfo_Av : TypeInfo_Ah
{
    char[] toString() { return "void[]"; }
  4025f4:	55                   	push   %rbp
  4025f5:	48 89 e5             	mov    %rsp,%rbp
  4025f8:	53                   	push   %rbx
  4025f9:	48 83 ec 08          	sub    $0x8,%rsp
  4025fd:	48 89 fb             	mov    %rdi,%rbx
  402600:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402604:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402608:	e8 6f 6d 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  40260d:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  402614:	48 c7 43 08 b0 fd 40 	movq   $0x40fdb0,0x8(%rbx)
  40261b:	00 
  40261c:	48 89 d8             	mov    %rbx,%rax
  40261f:	48 83 c4 08          	add    $0x8,%rsp
  402623:	5b                   	pop    %rbx
  402624:	c9                   	leaveq 
  402625:	c3                   	retq   

0000000000402626 <_D3std8typeinfo5ti_Ag11TypeInfo_Av4nextMFZC8TypeInfo>:

    TypeInfo next()
  402626:	55                   	push   %rbp
  402627:	48 89 e5             	mov    %rsp,%rbp
  40262a:	48 83 ec 10          	sub    $0x10,%rsp
  40262e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402632:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402636:	e8 41 6d 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(void);
  40263b:	48 c7 c0 60 17 41 00 	mov    $0x411760,%rax
    }
  402642:	c9                   	leaveq 
  402643:	c3                   	retq   

0000000000402644 <_D3std8typeinfo5ti_Ag11TypeInfo_Ab8toStringMFZAa>:

// bool[]

class TypeInfo_Ab : TypeInfo_Ah
{
    char[] toString() { return "bool[]"; }
  402644:	55                   	push   %rbp
  402645:	48 89 e5             	mov    %rsp,%rbp
  402648:	53                   	push   %rbx
  402649:	48 83 ec 08          	sub    $0x8,%rsp
  40264d:	48 89 fb             	mov    %rdi,%rbx
  402650:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402654:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402658:	e8 1f 6d 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  40265d:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  402664:	48 c7 43 08 50 fe 40 	movq   $0x40fe50,0x8(%rbx)
  40266b:	00 
  40266c:	48 89 d8             	mov    %rbx,%rax
  40266f:	48 83 c4 08          	add    $0x8,%rsp
  402673:	5b                   	pop    %rbx
  402674:	c9                   	leaveq 
  402675:	c3                   	retq   

0000000000402676 <_D3std8typeinfo5ti_Ag11TypeInfo_Ab4nextMFZC8TypeInfo>:

    TypeInfo next()
  402676:	55                   	push   %rbp
  402677:	48 89 e5             	mov    %rsp,%rbp
  40267a:	48 83 ec 10          	sub    $0x10,%rsp
  40267e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402682:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402686:	e8 f1 6c 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(bool);
  40268b:	48 c7 c0 60 14 41 00 	mov    $0x411460,%rax
    }
  402692:	c9                   	leaveq 
  402693:	c3                   	retq   

0000000000402694 <_D3std8typeinfo5ti_Ag11TypeInfo_Aa8toStringMFZAa>:

// char[]

class TypeInfo_Aa : TypeInfo_Ag
{
    char[] toString() { return "char[]"; }
  402694:	55                   	push   %rbp
  402695:	48 89 e5             	mov    %rsp,%rbp
  402698:	53                   	push   %rbx
  402699:	48 83 ec 08          	sub    $0x8,%rsp
  40269d:	48 89 fb             	mov    %rdi,%rbx
  4026a0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4026a4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4026a8:	e8 cf 6c 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  4026ad:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  4026b4:	48 c7 43 08 f0 fe 40 	movq   $0x40fef0,0x8(%rbx)
  4026bb:	00 
  4026bc:	48 89 d8             	mov    %rbx,%rax
  4026bf:	48 83 c4 08          	add    $0x8,%rsp
  4026c3:	5b                   	pop    %rbx
  4026c4:	c9                   	leaveq 
  4026c5:	c3                   	retq   

00000000004026c6 <_D3std8typeinfo5ti_Ag11TypeInfo_Aa7getHashMFPvZm>:

    hash_t getHash(void *p)
  4026c6:	55                   	push   %rbp
  4026c7:	48 89 e5             	mov    %rsp,%rbp
  4026ca:	48 83 ec 50          	sub    $0x50,%rsp
  4026ce:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  4026d2:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  4026d6:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4026da:	e8 9d 6c 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {	char[] s = *cast(char[]*)p;
  4026df:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4026e3:	48 8b 02             	mov    (%rdx),%rax
  4026e6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4026ea:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4026ee:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	hash_t hash = 0;
  4026f2:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4026f9:	00 

version (all)
{
	foreach (char c; s)
  4026fa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4026fe:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  402702:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402706:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40270a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40270e:	48 03 45 b8          	add    -0x48(%rbp),%rax
  402712:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  402716:	0f 95 c0             	setne  %al
  402719:	83 f0 01             	xor    $0x1,%eax
  40271c:	84 c0                	test   %al,%al
  40271e:	75 3c                	jne    40275c <_D3std8typeinfo5ti_Ag11TypeInfo_Aa7getHashMFPvZm+0x96>
  402720:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402724:	0f b6 00             	movzbl (%rax),%eax
  402727:	88 45 ff             	mov    %al,-0x1(%rbp)
	    hash = hash * 11 + c;
  40272a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40272e:	48 89 c8             	mov    %rcx,%rax
  402731:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  402738:	00 
  402739:	48 8d 04 95 00 00 00 	lea    0x0(,%rdx,4),%rax
  402740:	00 
  402741:	48 29 d0             	sub    %rdx,%rax
  402744:	48 89 c2             	mov    %rax,%rdx
  402747:	48 29 ca             	sub    %rcx,%rdx
  40274a:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40274e:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  402752:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  402756:	48 ff 45 f0          	incq   -0x10(%rbp)
  40275a:	eb ae                	jmp    40270a <_D3std8typeinfo5ti_Ag11TypeInfo_Aa7getHashMFPvZm+0x44>
		    len -= 4;
		    break;
	    }
	}
}
	return hash;
  40275c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  402760:	c9                   	leaveq 
  402761:	c3                   	retq   

0000000000402762 <_D3std8typeinfo5ti_Ag11TypeInfo_Aa4nextMFZC8TypeInfo>:

    TypeInfo next()
  402762:	55                   	push   %rbp
  402763:	48 89 e5             	mov    %rsp,%rbp
  402766:	48 83 ec 10          	sub    $0x10,%rsp
  40276a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40276e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402772:	e8 05 6c 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(char);
  402777:	48 c7 c0 70 09 41 00 	mov    $0x410970,%rax
    }
  40277e:	c9                   	leaveq 
  40277f:	c3                   	retq   

0000000000402780 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai8toStringMFZAa>:

// int[]

class TypeInfo_Ai : TypeInfo
{
    char[] toString() { return "int[]"; }
  402780:	55                   	push   %rbp
  402781:	48 89 e5             	mov    %rsp,%rbp
  402784:	53                   	push   %rbx
  402785:	48 83 ec 08          	sub    $0x8,%rsp
  402789:	48 89 fb             	mov    %rdi,%rbx
  40278c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402790:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402794:	e8 e3 6b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  402799:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  4027a0:	48 c7 43 08 a0 ff 40 	movq   $0x40ffa0,0x8(%rbx)
  4027a7:	00 
  4027a8:	48 89 d8             	mov    %rbx,%rax
  4027ab:	48 83 c4 08          	add    $0x8,%rsp
  4027af:	5b                   	pop    %rbx
  4027b0:	c9                   	leaveq 
  4027b1:	c3                   	retq   

00000000004027b2 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7getHashMFPvZm>:

    hash_t getHash(void *p)
  4027b2:	55                   	push   %rbp
  4027b3:	48 89 e5             	mov    %rsp,%rbp
  4027b6:	48 83 ec 40          	sub    $0x40,%rsp
  4027ba:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  4027be:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  4027c2:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4027c6:	e8 b1 6b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {	int[] s = *cast(int[]*)p;
  4027cb:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4027cf:	48 8b 02             	mov    (%rdx),%rax
  4027d2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4027d6:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4027da:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	auto len = s.length;
  4027de:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4027e2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto str = s.ptr;
  4027e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4027ea:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  4027ee:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4027f5:	00 

	while (len)
  4027f6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4027fb:	0f 95 c0             	setne  %al
  4027fe:	83 f0 01             	xor    $0x1,%eax
  402801:	84 c0                	test   %al,%al
  402803:	75 29                	jne    40282e <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7getHashMFPvZm+0x7c>
	{
	    hash *= 9;
  402805:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  402809:	48 89 d0             	mov    %rdx,%rax
  40280c:	48 c1 e0 03          	shl    $0x3,%rax
  402810:	48 01 d0             	add    %rdx,%rax
  402813:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += *cast(uint *)str;
  402817:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40281b:	8b 00                	mov    (%rax),%eax
  40281d:	89 c0                	mov    %eax,%eax
  40281f:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  402823:	48 83 45 f0 04       	addq   $0x4,-0x10(%rbp)
	    len--;
  402828:	48 ff 4d f8          	decq   -0x8(%rbp)
  40282c:	eb c8                	jmp    4027f6 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7getHashMFPvZm+0x44>
	}

	return hash;
  40282e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  402832:	c9                   	leaveq 
  402833:	c3                   	retq   

0000000000402834 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  402834:	55                   	push   %rbp
  402835:	48 89 e5             	mov    %rsp,%rbp
  402838:	48 83 ec 40          	sub    $0x40,%rsp
  40283c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  402840:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  402844:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  402848:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  40284c:	e8 2b 6b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	int[] s1 = *cast(int[]*)p1;
  402851:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  402855:	48 8b 02             	mov    (%rdx),%rax
  402858:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40285c:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402860:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	int[] s2 = *cast(int[]*)p2;
  402864:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  402868:	48 8b 02             	mov    (%rdx),%rax
  40286b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40286f:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402873:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return s1.length == s2.length &&
  402877:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40287b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40287f:	48 39 c2             	cmp    %rax,%rdx
  402882:	75 2a                	jne    4028ae <_D3std8typeinfo7ti_Aint11TypeInfo_Ai6equalsMFPvPvZi+0x7a>
  402884:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  402888:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  40288f:	00 
  402890:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402894:	48 89 c6             	mov    %rax,%rsi
  402897:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40289b:	48 89 c7             	mov    %rax,%rdi
  40289e:	e8 11 b0 00 00       	callq  40d8b4 <_D6kernel4core6system6memcmpFPvPvmZl>
  4028a3:	48 85 c0             	test   %rax,%rax
  4028a6:	75 06                	jne    4028ae <_D3std8typeinfo7ti_Aint11TypeInfo_Ai6equalsMFPvPvZi+0x7a>
  4028a8:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
  4028ac:	eb 04                	jmp    4028b2 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai6equalsMFPvPvZi+0x7e>
  4028ae:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  4028b2:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
	       memcmp(cast(ubyte*)s1.ptr, cast(ubyte*)s2.ptr, s1.length * int.sizeof) == 0;
    }
  4028b6:	c9                   	leaveq 
  4028b7:	c3                   	retq   

00000000004028b8 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4028b8:	55                   	push   %rbp
  4028b9:	48 89 e5             	mov    %rsp,%rbp
  4028bc:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  4028c3:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  4028c7:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  4028cb:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  4028cf:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  4028d3:	e8 a4 6a 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	int[] s1 = *cast(int[]*)p1;
  4028d8:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4028dc:	48 8b 02             	mov    (%rdx),%rax
  4028df:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  4028e3:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4028e7:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	int[] s2 = *cast(int[]*)p2;
  4028eb:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4028ef:	48 8b 02             	mov    (%rdx),%rax
  4028f2:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4028f6:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4028fa:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  4028fe:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402902:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  402906:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40290a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40290e:	73 08                	jae    402918 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x60>
	    len = s2.length;
  402910:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402914:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  402918:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40291f:	00 
  402920:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402924:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  402928:	0f 92 c0             	setb   %al
  40292b:	83 f0 01             	xor    $0x1,%eax
  40292e:	84 c0                	test   %al,%al
  402930:	0f 85 da 00 00 00    	jne    402a10 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x158>
	{
	    int result = s1[u] - s2[u];
  402936:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40293a:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  402941:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402945:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  402949:	73 0d                	jae    402958 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0xa0>
  40294b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40294f:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  402956:	eb 22                	jmp    40297a <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0xc2>
  402958:	48 c7 45 c0 16 00 00 	movq   $0x16,-0x40(%rbp)
  40295f:	00 
  402960:	48 c7 45 c8 a6 ff 40 	movq   $0x40ffa6,-0x38(%rbp)
  402967:	00 
  402968:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40296c:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  402970:	ba 30 00 00 00       	mov    $0x30,%edx
  402975:	e8 cb 84 00 00       	callq  40ae45 <_d_array_bounds>
  40297a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  402981:	48 c1 e0 02          	shl    $0x2,%rax
  402985:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  40298c:	8b 00                	mov    (%rax),%eax
  40298e:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  402994:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402998:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  40299f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4029a3:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4029a7:	73 0d                	jae    4029b6 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0xfe>
  4029a9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4029ad:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  4029b4:	eb 22                	jmp    4029d8 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x120>
  4029b6:	48 c7 45 d0 16 00 00 	movq   $0x16,-0x30(%rbp)
  4029bd:	00 
  4029be:	48 c7 45 d8 a6 ff 40 	movq   $0x40ffa6,-0x28(%rbp)
  4029c5:	00 
  4029c6:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  4029ca:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4029ce:	ba 30 00 00 00       	mov    $0x30,%edx
  4029d3:	e8 6d 84 00 00       	callq  40ae45 <_d_array_bounds>
  4029d8:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4029df:	48 c1 e0 02          	shl    $0x2,%rax
  4029e3:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  4029ea:	8b 00                	mov    (%rax),%eax
  4029ec:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  4029f2:	29 c2                	sub    %eax,%edx
  4029f4:	89 d0                	mov    %edx,%eax
  4029f6:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (result)
  4029f9:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  4029fd:	74 08                	je     402a07 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x14f>
		return result;
  4029ff:	8b 45 fc             	mov    -0x4(%rbp),%eax
  402a02:	89 45 84             	mov    %eax,-0x7c(%rbp)
  402a05:	eb 3c                	jmp    402a43 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x18b>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int result = s1[u] - s2[u];
	    if (result)
  402a07:	48 ff 45 f0          	incq   -0x10(%rbp)
  402a0b:	e9 10 ff ff ff       	jmpq   402920 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x68>
		return result;
	}
	if (s1.length < s2.length)
  402a10:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  402a14:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402a18:	48 39 c2             	cmp    %rax,%rdx
  402a1b:	73 09                	jae    402a26 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x16e>
	    return -1;
  402a1d:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  402a24:	eb 1d                	jmp    402a43 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x18b>
	else if (s1.length > s2.length)
  402a26:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  402a2a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402a2e:	48 39 c2             	cmp    %rax,%rdx
  402a31:	76 09                	jbe    402a3c <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x184>
	    return 1;
  402a33:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  402a3a:	eb 07                	jmp    402a43 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x18b>
	return 0;
  402a3c:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  402a43:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  402a46:	c9                   	leaveq 
  402a47:	c3                   	retq   

0000000000402a48 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai5tsizeMFZm>:

    size_t tsize()
  402a48:	55                   	push   %rbp
  402a49:	48 89 e5             	mov    %rsp,%rbp
  402a4c:	48 83 ec 10          	sub    $0x10,%rsp
  402a50:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402a54:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402a58:	e8 1f 69 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (int[]).sizeof;
  402a5d:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  402a62:	c9                   	leaveq 
  402a63:	c3                   	retq   

0000000000402a64 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai5flagsMFZk>:

    uint flags()
  402a64:	55                   	push   %rbp
  402a65:	48 89 e5             	mov    %rsp,%rbp
  402a68:	48 83 ec 10          	sub    $0x10,%rsp
  402a6c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402a70:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402a74:	e8 03 69 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  402a79:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  402a7e:	c9                   	leaveq 
  402a7f:	c3                   	retq   

0000000000402a80 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai4nextMFZC8TypeInfo>:

    TypeInfo next()
  402a80:	55                   	push   %rbp
  402a81:	48 89 e5             	mov    %rsp,%rbp
  402a84:	48 83 ec 10          	sub    $0x10,%rsp
  402a88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402a8c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402a90:	e8 e7 68 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(int);
  402a95:	48 c7 c0 50 0f 41 00 	mov    $0x410f50,%rax
    }
  402a9c:	c9                   	leaveq 
  402a9d:	c3                   	retq   

0000000000402a9e <_D3std8typeinfo7ti_Aint11TypeInfo_Ak8toStringMFZAa>:

// uint[]

class TypeInfo_Ak : TypeInfo_Ai
{
    char[] toString() { return "uint[]"; }
  402a9e:	55                   	push   %rbp
  402a9f:	48 89 e5             	mov    %rsp,%rbp
  402aa2:	53                   	push   %rbx
  402aa3:	48 83 ec 08          	sub    $0x8,%rsp
  402aa7:	48 89 fb             	mov    %rdi,%rbx
  402aaa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402aae:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402ab2:	e8 c5 68 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  402ab7:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  402abe:	48 c7 43 08 50 00 41 	movq   $0x410050,0x8(%rbx)
  402ac5:	00 
  402ac6:	48 89 d8             	mov    %rbx,%rax
  402ac9:	48 83 c4 08          	add    $0x8,%rsp
  402acd:	5b                   	pop    %rbx
  402ace:	c9                   	leaveq 
  402acf:	c3                   	retq   

0000000000402ad0 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  402ad0:	55                   	push   %rbp
  402ad1:	48 89 e5             	mov    %rsp,%rbp
  402ad4:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  402adb:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  402adf:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  402ae3:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  402ae7:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  402aeb:	e8 8c 68 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	uint[] s1 = *cast(uint[]*)p1;
  402af0:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  402af4:	48 8b 02             	mov    (%rdx),%rax
  402af7:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  402afb:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402aff:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	uint[] s2 = *cast(uint[]*)p2;
  402b03:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  402b07:	48 8b 02             	mov    (%rdx),%rax
  402b0a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  402b0e:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402b12:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  402b16:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402b1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  402b1e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402b22:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  402b26:	73 08                	jae    402b30 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x60>
	    len = s2.length;
  402b28:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402b2c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  402b30:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  402b37:	00 
  402b38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402b3c:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  402b40:	0f 92 c0             	setb   %al
  402b43:	83 f0 01             	xor    $0x1,%eax
  402b46:	84 c0                	test   %al,%al
  402b48:	0f 85 da 00 00 00    	jne    402c28 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x158>
	{
	    int result = s1[u] - s2[u];
  402b4e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  402b52:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  402b59:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402b5d:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  402b61:	73 0d                	jae    402b70 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0xa0>
  402b63:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  402b67:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  402b6e:	eb 22                	jmp    402b92 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0xc2>
  402b70:	48 c7 45 c0 16 00 00 	movq   $0x16,-0x40(%rbp)
  402b77:	00 
  402b78:	48 c7 45 c8 a6 ff 40 	movq   $0x40ffa6,-0x38(%rbp)
  402b7f:	00 
  402b80:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  402b84:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  402b88:	ba 5b 00 00 00       	mov    $0x5b,%edx
  402b8d:	e8 b3 82 00 00       	callq  40ae45 <_d_array_bounds>
  402b92:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  402b99:	48 c1 e0 02          	shl    $0x2,%rax
  402b9d:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  402ba4:	8b 00                	mov    (%rax),%eax
  402ba6:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  402bac:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402bb0:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  402bb7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402bbb:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  402bbf:	73 0d                	jae    402bce <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0xfe>
  402bc1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  402bc5:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  402bcc:	eb 22                	jmp    402bf0 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x120>
  402bce:	48 c7 45 d0 16 00 00 	movq   $0x16,-0x30(%rbp)
  402bd5:	00 
  402bd6:	48 c7 45 d8 a6 ff 40 	movq   $0x40ffa6,-0x28(%rbp)
  402bdd:	00 
  402bde:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  402be2:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  402be6:	ba 5b 00 00 00       	mov    $0x5b,%edx
  402beb:	e8 55 82 00 00       	callq  40ae45 <_d_array_bounds>
  402bf0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  402bf7:	48 c1 e0 02          	shl    $0x2,%rax
  402bfb:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  402c02:	8b 00                	mov    (%rax),%eax
  402c04:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  402c0a:	29 c2                	sub    %eax,%edx
  402c0c:	89 d0                	mov    %edx,%eax
  402c0e:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (result)
  402c11:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  402c15:	74 08                	je     402c1f <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x14f>
		return result;
  402c17:	8b 45 fc             	mov    -0x4(%rbp),%eax
  402c1a:	89 45 84             	mov    %eax,-0x7c(%rbp)
  402c1d:	eb 3c                	jmp    402c5b <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x18b>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int result = s1[u] - s2[u];
	    if (result)
  402c1f:	48 ff 45 f0          	incq   -0x10(%rbp)
  402c23:	e9 10 ff ff ff       	jmpq   402b38 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x68>
		return result;
	}
	if (s1.length < s2.length)
  402c28:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  402c2c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402c30:	48 39 c2             	cmp    %rax,%rdx
  402c33:	73 09                	jae    402c3e <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x16e>
	    return -1;
  402c35:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  402c3c:	eb 1d                	jmp    402c5b <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x18b>
	else if (s1.length > s2.length)
  402c3e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  402c42:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402c46:	48 39 c2             	cmp    %rax,%rdx
  402c49:	76 09                	jbe    402c54 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x184>
	    return 1;
  402c4b:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  402c52:	eb 07                	jmp    402c5b <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x18b>
	return 0;
  402c54:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  402c5b:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  402c5e:	c9                   	leaveq 
  402c5f:	c3                   	retq   

0000000000402c60 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak4nextMFZC8TypeInfo>:

    TypeInfo next()
  402c60:	55                   	push   %rbp
  402c61:	48 89 e5             	mov    %rsp,%rbp
  402c64:	48 83 ec 10          	sub    $0x10,%rsp
  402c68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402c6c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402c70:	e8 07 67 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(uint);
  402c75:	48 c7 c0 10 15 41 00 	mov    $0x411510,%rax
    }
  402c7c:	c9                   	leaveq 
  402c7d:	c3                   	retq   

0000000000402c7e <_D3std8typeinfo7ti_Aint11TypeInfo_Aw8toStringMFZAa>:

// dchar[]

class TypeInfo_Aw : TypeInfo_Ak
{
    char[] toString() { return "dchar[]"; }
  402c7e:	55                   	push   %rbp
  402c7f:	48 89 e5             	mov    %rsp,%rbp
  402c82:	53                   	push   %rbx
  402c83:	48 83 ec 08          	sub    $0x8,%rsp
  402c87:	48 89 fb             	mov    %rdi,%rbx
  402c8a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402c8e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402c92:	e8 e5 66 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  402c97:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  402c9e:	48 c7 43 08 f0 00 41 	movq   $0x4100f0,0x8(%rbx)
  402ca5:	00 
  402ca6:	48 89 d8             	mov    %rbx,%rax
  402ca9:	48 83 c4 08          	add    $0x8,%rsp
  402cad:	5b                   	pop    %rbx
  402cae:	c9                   	leaveq 
  402caf:	c3                   	retq   

0000000000402cb0 <_D3std8typeinfo7ti_Aint11TypeInfo_Aw4nextMFZC8TypeInfo>:

    TypeInfo next()
  402cb0:	55                   	push   %rbp
  402cb1:	48 89 e5             	mov    %rsp,%rbp
  402cb4:	48 83 ec 10          	sub    $0x10,%rsp
  402cb8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402cbc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  402cc0:	e8 b7 66 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(dchar);
  402cc5:	48 c7 c0 f0 0a 41 00 	mov    $0x410af0,%rax
    }
  402ccc:	c9                   	leaveq 
  402ccd:	c3                   	retq   
  402cce:	90                   	nop    
  402ccf:	90                   	nop    

0000000000402cd0 <_D3std8typeinfo8ti_Along11TypeInfo_Al8toStringMFZAa>:

// long[]

class TypeInfo_Al : TypeInfo
{
    char[] toString() { return "long[]"; }
  402cd0:	55                   	push   %rbp
  402cd1:	48 89 e5             	mov    %rsp,%rbp
  402cd4:	53                   	push   %rbx
  402cd5:	48 83 ec 08          	sub    $0x8,%rsp
  402cd9:	48 89 fb             	mov    %rdi,%rbx
  402cdc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402ce0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  402ce4:	e8 93 66 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  402ce9:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  402cf0:	48 c7 43 08 a0 01 41 	movq   $0x4101a0,0x8(%rbx)
  402cf7:	00 
  402cf8:	48 89 d8             	mov    %rbx,%rax
  402cfb:	48 83 c4 08          	add    $0x8,%rsp
  402cff:	5b                   	pop    %rbx
  402d00:	c9                   	leaveq 
  402d01:	c3                   	retq   

0000000000402d02 <_D3std8typeinfo8ti_Along11TypeInfo_Al7getHashMFPvZm>:

    hash_t getHash(void *p)
  402d02:	55                   	push   %rbp
  402d03:	48 89 e5             	mov    %rsp,%rbp
  402d06:	48 83 ec 40          	sub    $0x40,%rsp
  402d0a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  402d0e:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  402d12:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  402d16:	e8 61 66 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {	long[] s = *cast(long[]*)p;
  402d1b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  402d1f:	48 8b 02             	mov    (%rdx),%rax
  402d22:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  402d26:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402d2a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  402d2e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  402d32:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto str = s.ptr;
  402d36:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402d3a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  402d3e:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  402d45:	00 

	while (len)
  402d46:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  402d4b:	0f 95 c0             	setne  %al
  402d4e:	83 f0 01             	xor    $0x1,%eax
  402d51:	84 c0                	test   %al,%al
  402d53:	75 36                	jne    402d8b <_D3std8typeinfo8ti_Along11TypeInfo_Al7getHashMFPvZm+0x89>
	{
	    hash *= 9;
  402d55:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  402d59:	48 89 d0             	mov    %rdx,%rax
  402d5c:	48 c1 e0 03          	shl    $0x3,%rax
  402d60:	48 01 d0             	add    %rdx,%rax
  402d63:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += *cast(uint *)str + *(cast(uint *)str + 1);
  402d67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402d6b:	8b 10                	mov    (%rax),%edx
  402d6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402d71:	48 83 c0 04          	add    $0x4,%rax
  402d75:	8b 00                	mov    (%rax),%eax
  402d77:	8d 04 02             	lea    (%rdx,%rax,1),%eax
  402d7a:	89 c0                	mov    %eax,%eax
  402d7c:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  402d80:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
	    len--;
  402d85:	48 ff 4d f8          	decq   -0x8(%rbp)
  402d89:	eb bb                	jmp    402d46 <_D3std8typeinfo8ti_Along11TypeInfo_Al7getHashMFPvZm+0x44>
	}

	return hash;
  402d8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  402d8f:	c9                   	leaveq 
  402d90:	c3                   	retq   

0000000000402d91 <_D3std8typeinfo8ti_Along11TypeInfo_Al6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  402d91:	55                   	push   %rbp
  402d92:	48 89 e5             	mov    %rsp,%rbp
  402d95:	48 83 ec 40          	sub    $0x40,%rsp
  402d99:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  402d9d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  402da1:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  402da5:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  402da9:	e8 ce 65 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	long[] s1 = *cast(long[]*)p1;
  402dae:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  402db2:	48 8b 02             	mov    (%rdx),%rax
  402db5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  402db9:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402dbd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	long[] s2 = *cast(long[]*)p2;
  402dc1:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  402dc5:	48 8b 02             	mov    (%rdx),%rax
  402dc8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  402dcc:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402dd0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return s1.length == s2.length &&
  402dd4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  402dd8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402ddc:	48 39 c2             	cmp    %rax,%rdx
  402ddf:	75 2a                	jne    402e0b <_D3std8typeinfo8ti_Along11TypeInfo_Al6equalsMFPvPvZi+0x7a>
  402de1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  402de5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  402dec:	00 
  402ded:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402df1:	48 89 c6             	mov    %rax,%rsi
  402df4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402df8:	48 89 c7             	mov    %rax,%rdi
  402dfb:	e8 b4 aa 00 00       	callq  40d8b4 <_D6kernel4core6system6memcmpFPvPvmZl>
  402e00:	48 85 c0             	test   %rax,%rax
  402e03:	75 06                	jne    402e0b <_D3std8typeinfo8ti_Along11TypeInfo_Al6equalsMFPvPvZi+0x7a>
  402e05:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
  402e09:	eb 04                	jmp    402e0f <_D3std8typeinfo8ti_Along11TypeInfo_Al6equalsMFPvPvZi+0x7e>
  402e0b:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  402e0f:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
	       memcmp(cast(ubyte*)s1.ptr, cast(ubyte*)s2.ptr, s1.length * long.sizeof) == 0;
    }
  402e13:	c9                   	leaveq 
  402e14:	c3                   	retq   

0000000000402e15 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  402e15:	55                   	push   %rbp
  402e16:	48 89 e5             	mov    %rsp,%rbp
  402e19:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  402e20:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  402e24:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  402e28:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  402e2f:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
  402e33:	e8 44 65 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	long[] s1 = *cast(long[]*)p1;
  402e38:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  402e3c:	48 8b 02             	mov    (%rdx),%rax
  402e3f:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  402e43:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402e47:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	long[] s2 = *cast(long[]*)p2;
  402e4b:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  402e52:	48 8b 02             	mov    (%rdx),%rax
  402e55:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  402e59:	48 8b 42 08          	mov    0x8(%rdx),%rax
  402e5d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	size_t len = s1.length;
  402e61:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  402e65:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	if (s2.length < len)
  402e69:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402e6d:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  402e71:	73 08                	jae    402e7b <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x66>
	    len = s2.length;
  402e73:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402e77:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	for (size_t u = 0; u < len; u++)
  402e7b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  402e82:	00 
  402e83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402e87:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  402e8b:	0f 92 c0             	setb   %al
  402e8e:	83 f0 01             	xor    $0x1,%eax
  402e91:	84 c0                	test   %al,%al
  402e93:	0f 85 a8 01 00 00    	jne    403041 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x22c>
	{
	    if (s1[u] < s2[u])
  402e99:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  402e9d:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  402ea4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  402ea8:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  402eac:	73 0d                	jae    402ebb <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0xa6>
  402eae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402eb2:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  402eb9:	eb 22                	jmp    402edd <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0xc8>
  402ebb:	48 c7 45 b0 17 00 00 	movq   $0x17,-0x50(%rbp)
  402ec2:	00 
  402ec3:	48 c7 45 b8 a7 01 41 	movq   $0x4101a7,-0x48(%rbp)
  402eca:	00 
  402ecb:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  402ecf:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  402ed3:	ba 30 00 00 00       	mov    $0x30,%edx
  402ed8:	e8 68 7f 00 00       	callq  40ae45 <_d_array_bounds>
  402edd:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  402ee4:	48 c1 e0 03          	shl    $0x3,%rax
  402ee8:	48 03 85 20 ff ff ff 	add    -0xe0(%rbp),%rax
  402eef:	48 8b 00             	mov    (%rax),%rax
  402ef2:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  402ef9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  402efd:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  402f04:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402f08:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  402f0c:	73 0d                	jae    402f1b <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x106>
  402f0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402f12:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  402f19:	eb 22                	jmp    402f3d <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x128>
  402f1b:	48 c7 45 c0 17 00 00 	movq   $0x17,-0x40(%rbp)
  402f22:	00 
  402f23:	48 c7 45 c8 a7 01 41 	movq   $0x4101a7,-0x38(%rbp)
  402f2a:	00 
  402f2b:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  402f2f:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  402f33:	ba 30 00 00 00       	mov    $0x30,%edx
  402f38:	e8 08 7f 00 00       	callq  40ae45 <_d_array_bounds>
  402f3d:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  402f44:	48 c1 e0 03          	shl    $0x3,%rax
  402f48:	48 03 85 38 ff ff ff 	add    -0xc8(%rbp),%rax
  402f4f:	48 8b 00             	mov    (%rax),%rax
  402f52:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
  402f59:	7d 0f                	jge    402f6a <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x155>
		return -1;
  402f5b:	c7 85 4c ff ff ff ff 	movl   $0xffffffff,-0xb4(%rbp)
  402f62:	ff ff ff 
  402f65:	e9 13 01 00 00       	jmpq   40307d <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x268>
	    else if (s1[u] > s2[u])
  402f6a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  402f6e:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  402f75:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  402f79:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  402f7d:	73 0d                	jae    402f8c <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x177>
  402f7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402f83:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  402f8a:	eb 22                	jmp    402fae <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x199>
  402f8c:	48 c7 45 d0 17 00 00 	movq   $0x17,-0x30(%rbp)
  402f93:	00 
  402f94:	48 c7 45 d8 a7 01 41 	movq   $0x4101a7,-0x28(%rbp)
  402f9b:	00 
  402f9c:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  402fa0:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  402fa4:	ba 32 00 00 00       	mov    $0x32,%edx
  402fa9:	e8 97 7e 00 00       	callq  40ae45 <_d_array_bounds>
  402fae:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  402fb5:	48 c1 e0 03          	shl    $0x3,%rax
  402fb9:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  402fc0:	48 8b 00             	mov    (%rax),%rax
  402fc3:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  402fca:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  402fce:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  402fd5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402fd9:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  402fdd:	73 0d                	jae    402fec <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x1d7>
  402fdf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402fe3:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  402fea:	eb 22                	jmp    40300e <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x1f9>
  402fec:	48 c7 45 e0 17 00 00 	movq   $0x17,-0x20(%rbp)
  402ff3:	00 
  402ff4:	48 c7 45 e8 a7 01 41 	movq   $0x4101a7,-0x18(%rbp)
  402ffb:	00 
  402ffc:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  403000:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  403004:	ba 32 00 00 00       	mov    $0x32,%edx
  403009:	e8 37 7e 00 00       	callq  40ae45 <_d_array_bounds>
  40300e:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  403015:	48 c1 e0 03          	shl    $0x3,%rax
  403019:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  403020:	48 8b 00             	mov    (%rax),%rax
  403023:	48 39 85 60 ff ff ff 	cmp    %rax,-0xa0(%rbp)
  40302a:	7e 0c                	jle    403038 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x223>
		return 1;
  40302c:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  403033:	00 00 00 
  403036:	eb 45                	jmp    40307d <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x268>

	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    if (s1[u] < s2[u])
  403038:	48 ff 45 f8          	incq   -0x8(%rbp)
  40303c:	e9 42 fe ff ff       	jmpq   402e83 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x6e>
		return -1;
	    else if (s1[u] > s2[u])
		return 1;
	}
	if (s1.length < s2.length)
  403041:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  403045:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403049:	48 39 c2             	cmp    %rax,%rdx
  40304c:	73 0c                	jae    40305a <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x245>
	    return -1;
  40304e:	c7 85 4c ff ff ff ff 	movl   $0xffffffff,-0xb4(%rbp)
  403055:	ff ff ff 
  403058:	eb 23                	jmp    40307d <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x268>
	else if (s1.length > s2.length)
  40305a:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40305e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403062:	48 39 c2             	cmp    %rax,%rdx
  403065:	76 0c                	jbe    403073 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x25e>
	    return 1;
  403067:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  40306e:	00 00 00 
  403071:	eb 0a                	jmp    40307d <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x268>
	return 0;
  403073:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  40307a:	00 00 00 
  40307d:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
    }
  403083:	c9                   	leaveq 
  403084:	c3                   	retq   

0000000000403085 <_D3std8typeinfo8ti_Along11TypeInfo_Al5tsizeMFZm>:

    size_t tsize()
  403085:	55                   	push   %rbp
  403086:	48 89 e5             	mov    %rsp,%rbp
  403089:	48 83 ec 10          	sub    $0x10,%rsp
  40308d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403091:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403095:	e8 e2 62 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (long[]).sizeof;
  40309a:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  40309f:	c9                   	leaveq 
  4030a0:	c3                   	retq   

00000000004030a1 <_D3std8typeinfo8ti_Along11TypeInfo_Al5flagsMFZk>:

    uint flags()
  4030a1:	55                   	push   %rbp
  4030a2:	48 89 e5             	mov    %rsp,%rbp
  4030a5:	48 83 ec 10          	sub    $0x10,%rsp
  4030a9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4030ad:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4030b1:	e8 c6 62 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  4030b6:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  4030bb:	c9                   	leaveq 
  4030bc:	c3                   	retq   

00000000004030bd <_D3std8typeinfo8ti_Along11TypeInfo_Al4nextMFZC8TypeInfo>:

    TypeInfo next()
  4030bd:	55                   	push   %rbp
  4030be:	48 89 e5             	mov    %rsp,%rbp
  4030c1:	48 83 ec 10          	sub    $0x10,%rsp
  4030c5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4030c9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4030cd:	e8 aa 62 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(long);
  4030d2:	48 c7 c0 d0 10 41 00 	mov    $0x4110d0,%rax
    }
  4030d9:	c9                   	leaveq 
  4030da:	c3                   	retq   

00000000004030db <_D3std8typeinfo8ti_Along11TypeInfo_Am8toStringMFZAa>:

// ulong[]

class TypeInfo_Am : TypeInfo_Al
{
    char[] toString() { return "ulong[]"; }
  4030db:	55                   	push   %rbp
  4030dc:	48 89 e5             	mov    %rsp,%rbp
  4030df:	53                   	push   %rbx
  4030e0:	48 83 ec 08          	sub    $0x8,%rsp
  4030e4:	48 89 fb             	mov    %rdi,%rbx
  4030e7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4030eb:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4030ef:	e8 88 62 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  4030f4:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  4030fb:	48 c7 43 08 50 02 41 	movq   $0x410250,0x8(%rbx)
  403102:	00 
  403103:	48 89 d8             	mov    %rbx,%rax
  403106:	48 83 c4 08          	add    $0x8,%rsp
  40310a:	5b                   	pop    %rbx
  40310b:	c9                   	leaveq 
  40310c:	c3                   	retq   

000000000040310d <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  40310d:	55                   	push   %rbp
  40310e:	48 89 e5             	mov    %rsp,%rbp
  403111:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  403118:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  40311c:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  403120:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  403127:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
  40312b:	e8 4c 62 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ulong[] s1 = *cast(ulong[]*)p1;
  403130:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  403134:	48 8b 02             	mov    (%rdx),%rax
  403137:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  40313b:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40313f:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	ulong[] s2 = *cast(ulong[]*)p2;
  403143:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  40314a:	48 8b 02             	mov    (%rdx),%rax
  40314d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  403151:	48 8b 42 08          	mov    0x8(%rdx),%rax
  403155:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	size_t len = s1.length;
  403159:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40315d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	if (s2.length < len)
  403161:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403165:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  403169:	73 08                	jae    403173 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x66>
	    len = s2.length;
  40316b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40316f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	for (size_t u = 0; u < len; u++)
  403173:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40317a:	00 
  40317b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40317f:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  403183:	0f 92 c0             	setb   %al
  403186:	83 f0 01             	xor    $0x1,%eax
  403189:	84 c0                	test   %al,%al
  40318b:	0f 85 a8 01 00 00    	jne    403339 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x22c>
	{
	    if (s1[u] < s2[u])
  403191:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  403195:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  40319c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4031a0:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  4031a4:	73 0d                	jae    4031b3 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0xa6>
  4031a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4031aa:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  4031b1:	eb 22                	jmp    4031d5 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0xc8>
  4031b3:	48 c7 45 b0 17 00 00 	movq   $0x17,-0x50(%rbp)
  4031ba:	00 
  4031bb:	48 c7 45 b8 a7 01 41 	movq   $0x4101a7,-0x48(%rbp)
  4031c2:	00 
  4031c3:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  4031c7:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  4031cb:	ba 5d 00 00 00       	mov    $0x5d,%edx
  4031d0:	e8 70 7c 00 00       	callq  40ae45 <_d_array_bounds>
  4031d5:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  4031dc:	48 c1 e0 03          	shl    $0x3,%rax
  4031e0:	48 03 85 20 ff ff ff 	add    -0xe0(%rbp),%rax
  4031e7:	48 8b 00             	mov    (%rax),%rax
  4031ea:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  4031f1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4031f5:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  4031fc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403200:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  403204:	73 0d                	jae    403213 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x106>
  403206:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40320a:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  403211:	eb 22                	jmp    403235 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x128>
  403213:	48 c7 45 c0 17 00 00 	movq   $0x17,-0x40(%rbp)
  40321a:	00 
  40321b:	48 c7 45 c8 a7 01 41 	movq   $0x4101a7,-0x38(%rbp)
  403222:	00 
  403223:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  403227:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40322b:	ba 5d 00 00 00       	mov    $0x5d,%edx
  403230:	e8 10 7c 00 00       	callq  40ae45 <_d_array_bounds>
  403235:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40323c:	48 c1 e0 03          	shl    $0x3,%rax
  403240:	48 03 85 38 ff ff ff 	add    -0xc8(%rbp),%rax
  403247:	48 8b 00             	mov    (%rax),%rax
  40324a:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
  403251:	73 0f                	jae    403262 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x155>
		return -1;
  403253:	c7 85 4c ff ff ff ff 	movl   $0xffffffff,-0xb4(%rbp)
  40325a:	ff ff ff 
  40325d:	e9 13 01 00 00       	jmpq   403375 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x268>
	    else if (s1[u] > s2[u])
  403262:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  403266:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  40326d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  403271:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  403275:	73 0d                	jae    403284 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x177>
  403277:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40327b:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  403282:	eb 22                	jmp    4032a6 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x199>
  403284:	48 c7 45 d0 17 00 00 	movq   $0x17,-0x30(%rbp)
  40328b:	00 
  40328c:	48 c7 45 d8 a7 01 41 	movq   $0x4101a7,-0x28(%rbp)
  403293:	00 
  403294:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  403298:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40329c:	ba 5f 00 00 00       	mov    $0x5f,%edx
  4032a1:	e8 9f 7b 00 00       	callq  40ae45 <_d_array_bounds>
  4032a6:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  4032ad:	48 c1 e0 03          	shl    $0x3,%rax
  4032b1:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  4032b8:	48 8b 00             	mov    (%rax),%rax
  4032bb:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  4032c2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4032c6:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  4032cd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4032d1:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  4032d5:	73 0d                	jae    4032e4 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x1d7>
  4032d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4032db:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  4032e2:	eb 22                	jmp    403306 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x1f9>
  4032e4:	48 c7 45 e0 17 00 00 	movq   $0x17,-0x20(%rbp)
  4032eb:	00 
  4032ec:	48 c7 45 e8 a7 01 41 	movq   $0x4101a7,-0x18(%rbp)
  4032f3:	00 
  4032f4:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  4032f8:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4032fc:	ba 5f 00 00 00       	mov    $0x5f,%edx
  403301:	e8 3f 7b 00 00       	callq  40ae45 <_d_array_bounds>
  403306:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40330d:	48 c1 e0 03          	shl    $0x3,%rax
  403311:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  403318:	48 8b 00             	mov    (%rax),%rax
  40331b:	48 39 85 60 ff ff ff 	cmp    %rax,-0xa0(%rbp)
  403322:	76 0c                	jbe    403330 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x223>
		return 1;
  403324:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  40332b:	00 00 00 
  40332e:	eb 45                	jmp    403375 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x268>

	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    if (s1[u] < s2[u])
  403330:	48 ff 45 f8          	incq   -0x8(%rbp)
  403334:	e9 42 fe ff ff       	jmpq   40317b <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x6e>
		return -1;
	    else if (s1[u] > s2[u])
		return 1;
	}
	if (s1.length < s2.length)
  403339:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40333d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403341:	48 39 c2             	cmp    %rax,%rdx
  403344:	73 0c                	jae    403352 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x245>
	    return -1;
  403346:	c7 85 4c ff ff ff ff 	movl   $0xffffffff,-0xb4(%rbp)
  40334d:	ff ff ff 
  403350:	eb 23                	jmp    403375 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x268>
	else if (s1.length > s2.length)
  403352:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  403356:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40335a:	48 39 c2             	cmp    %rax,%rdx
  40335d:	76 0c                	jbe    40336b <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x25e>
	    return 1;
  40335f:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  403366:	00 00 00 
  403369:	eb 0a                	jmp    403375 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x268>
	return 0;
  40336b:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  403372:	00 00 00 
  403375:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
    }
  40337b:	c9                   	leaveq 
  40337c:	c3                   	retq   

000000000040337d <_D3std8typeinfo8ti_Along11TypeInfo_Am4nextMFZC8TypeInfo>:

    TypeInfo next()
  40337d:	55                   	push   %rbp
  40337e:	48 89 e5             	mov    %rsp,%rbp
  403381:	48 83 ec 10          	sub    $0x10,%rsp
  403385:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403389:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40338d:	e8 ea 5f 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(ulong);
  403392:	48 c7 c0 d0 15 41 00 	mov    $0x4115d0,%rax
    }
  403399:	c9                   	leaveq 
  40339a:	c3                   	retq   
  40339b:	90                   	nop    

000000000040339c <_D3std8typeinfo8ti_Areal11TypeInfo_Ae8toStringMFZAa>:

// real[]

class TypeInfo_Ae : TypeInfo
{
    char[] toString() { return "real[]"; }
  40339c:	55                   	push   %rbp
  40339d:	48 89 e5             	mov    %rsp,%rbp
  4033a0:	53                   	push   %rbx
  4033a1:	48 83 ec 08          	sub    $0x8,%rsp
  4033a5:	48 89 fb             	mov    %rdi,%rbx
  4033a8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4033ac:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4033b0:	e8 c7 5f 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  4033b5:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  4033bc:	48 c7 43 08 00 03 41 	movq   $0x410300,0x8(%rbx)
  4033c3:	00 
  4033c4:	48 89 d8             	mov    %rbx,%rax
  4033c7:	48 83 c4 08          	add    $0x8,%rsp
  4033cb:	5b                   	pop    %rbx
  4033cc:	c9                   	leaveq 
  4033cd:	c3                   	retq   

00000000004033ce <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7getHashMFPvZm>:

    hash_t getHash(void *p)
  4033ce:	55                   	push   %rbp
  4033cf:	48 89 e5             	mov    %rsp,%rbp
  4033d2:	48 83 ec 40          	sub    $0x40,%rsp
  4033d6:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  4033da:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  4033de:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4033e2:	e8 95 5f 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {	real[] s = *cast(real[]*)p;
  4033e7:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4033eb:	48 8b 02             	mov    (%rdx),%rax
  4033ee:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4033f2:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4033f6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  4033fa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4033fe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto str = s.ptr;
  403402:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403406:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  40340a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  403411:	00 

	while (len)
  403412:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  403417:	0f 95 c0             	setne  %al
  40341a:	83 f0 01             	xor    $0x1,%eax
  40341d:	84 c0                	test   %al,%al
  40341f:	75 5e                	jne    40347f <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7getHashMFPvZm+0xb1>
	{
	    hash *= 9;
  403421:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  403425:	48 89 d0             	mov    %rdx,%rax
  403428:	48 c1 e0 03          	shl    $0x3,%rax
  40342c:	48 01 d0             	add    %rdx,%rax
  40342f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[0];
  403433:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403437:	b8 00 00 00 00       	mov    $0x0,%eax
  40343c:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  403440:	8b 00                	mov    (%rax),%eax
  403442:	89 c0                	mov    %eax,%eax
  403444:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[1];
  403448:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40344c:	b8 04 00 00 00       	mov    $0x4,%eax
  403451:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  403455:	8b 00                	mov    (%rax),%eax
  403457:	89 c0                	mov    %eax,%eax
  403459:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(ushort *)str)[4];
  40345d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403461:	b8 08 00 00 00       	mov    $0x8,%eax
  403466:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40346a:	0f b7 00             	movzwl (%rax),%eax
  40346d:	0f b7 c0             	movzwl %ax,%eax
  403470:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  403474:	48 83 45 f0 10       	addq   $0x10,-0x10(%rbp)
	    len--;
  403479:	48 ff 4d f8          	decq   -0x8(%rbp)
  40347d:	eb 93                	jmp    403412 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7getHashMFPvZm+0x44>
	}

	return hash;
  40347f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  403483:	c9                   	leaveq 
  403484:	c3                   	retq   

0000000000403485 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  403485:	55                   	push   %rbp
  403486:	48 89 e5             	mov    %rsp,%rbp
  403489:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  403490:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  403494:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  403498:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40349c:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  4034a0:	e8 d7 5e 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	real[] s1 = *cast(real[]*)p1;
  4034a5:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4034a9:	48 8b 02             	mov    (%rdx),%rax
  4034ac:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  4034b0:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4034b4:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	real[] s2 = *cast(real[]*)p2;
  4034b8:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4034bc:	48 8b 02             	mov    (%rdx),%rax
  4034bf:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4034c3:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4034c7:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  4034cb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4034cf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  4034d3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4034d7:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  4034db:	74 0f                	je     4034ec <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x67>
	    return 0;
  4034dd:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  4034e4:	00 00 00 
  4034e7:	e9 11 01 00 00       	jmpq   4035fd <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x178>
	for (size_t u = 0; u < len; u++)
  4034ec:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4034f3:	00 
  4034f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4034f8:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4034fc:	0f 92 c0             	setb   %al
  4034ff:	83 f0 01             	xor    $0x1,%eax
  403502:	84 c0                	test   %al,%al
  403504:	0f 85 e9 00 00 00    	jne    4035f3 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x16e>
	{
	    int c = TypeInfo_e._equals(s1[u], s2[u]);
  40350a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40350e:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  403515:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403519:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40351d:	73 0d                	jae    40352c <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0xa7>
  40351f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403523:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  40352a:	eb 22                	jmp    40354e <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0xc9>
  40352c:	48 c7 45 c0 17 00 00 	movq   $0x17,-0x40(%rbp)
  403533:	00 
  403534:	48 c7 45 c8 07 03 41 	movq   $0x410307,-0x38(%rbp)
  40353b:	00 
  40353c:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  403540:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  403544:	ba 3f 00 00 00       	mov    $0x3f,%edx
  403549:	e8 f7 78 00 00       	callq  40ae45 <_d_array_bounds>
  40354e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  403555:	48 c1 e0 04          	shl    $0x4,%rax
  403559:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  403560:	db 28                	fldt   (%rax)
  403562:	db bd 60 ff ff ff    	fstpt  -0xa0(%rbp)
  403568:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40356c:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  403573:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403577:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40357b:	73 0a                	jae    403587 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x102>
  40357d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403581:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  403585:	eb 22                	jmp    4035a9 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x124>
  403587:	48 c7 45 d0 17 00 00 	movq   $0x17,-0x30(%rbp)
  40358e:	00 
  40358f:	48 c7 45 d8 07 03 41 	movq   $0x410307,-0x28(%rbp)
  403596:	00 
  403597:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40359b:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40359f:	ba 3f 00 00 00       	mov    $0x3f,%edx
  4035a4:	e8 9c 78 00 00       	callq  40ae45 <_d_array_bounds>
  4035a9:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  4035ad:	48 c1 e0 04          	shl    $0x4,%rax
  4035b1:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  4035b8:	8b 50 08             	mov    0x8(%rax),%edx
  4035bb:	48 8b 00             	mov    (%rax),%rax
  4035be:	db ad 60 ff ff ff    	fldt   -0xa0(%rbp)
  4035c4:	db 7c 24 10          	fstpt  0x10(%rsp)
  4035c8:	48 89 04 24          	mov    %rax,(%rsp)
  4035cc:	89 54 24 08          	mov    %edx,0x8(%rsp)
  4035d0:	e8 5c 22 00 00       	callq  405831 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi>
  4035d5:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  4035d8:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  4035dc:	75 0c                	jne    4035ea <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x165>
		return 0;
  4035de:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  4035e5:	00 00 00 
  4035e8:	eb 13                	jmp    4035fd <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x178>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_e._equals(s1[u], s2[u]);
	    if (c == 0)
  4035ea:	48 ff 45 f0          	incq   -0x10(%rbp)
  4035ee:	e9 01 ff ff ff       	jmpq   4034f4 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  4035f3:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  4035fa:	00 00 00 
  4035fd:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
    }
  403603:	c9                   	leaveq 
  403604:	c3                   	retq   

0000000000403605 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  403605:	55                   	push   %rbp
  403606:	48 89 e5             	mov    %rsp,%rbp
  403609:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  403610:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  403614:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  403618:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40361c:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  403620:	e8 57 5d 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	real[] s1 = *cast(real[]*)p1;
  403625:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  403629:	48 8b 02             	mov    (%rdx),%rax
  40362c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  403630:	48 8b 42 08          	mov    0x8(%rdx),%rax
  403634:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	real[] s2 = *cast(real[]*)p2;
  403638:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40363c:	48 8b 02             	mov    (%rdx),%rax
  40363f:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  403643:	48 8b 42 08          	mov    0x8(%rdx),%rax
  403647:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  40364b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40364f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  403653:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403657:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40365b:	73 08                	jae    403665 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x60>
	    len = s2.length;
  40365d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403661:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  403665:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40366c:	00 
  40366d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403671:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  403675:	0f 92 c0             	setb   %al
  403678:	83 f0 01             	xor    $0x1,%eax
  40367b:	84 c0                	test   %al,%al
  40367d:	0f 85 eb 00 00 00    	jne    40376e <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x169>
	{
	    int c = TypeInfo_e._compare(s1[u], s2[u]);
  403683:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  403687:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  40368e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403692:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  403696:	73 0d                	jae    4036a5 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0xa0>
  403698:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40369c:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  4036a3:	eb 22                	jmp    4036c7 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0xc2>
  4036a5:	48 c7 45 c0 17 00 00 	movq   $0x17,-0x40(%rbp)
  4036ac:	00 
  4036ad:	48 c7 45 c8 07 03 41 	movq   $0x410307,-0x38(%rbp)
  4036b4:	00 
  4036b5:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4036b9:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4036bd:	ba 50 00 00 00       	mov    $0x50,%edx
  4036c2:	e8 7e 77 00 00       	callq  40ae45 <_d_array_bounds>
  4036c7:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  4036ce:	48 c1 e0 04          	shl    $0x4,%rax
  4036d2:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  4036d9:	db 28                	fldt   (%rax)
  4036db:	db bd 60 ff ff ff    	fstpt  -0xa0(%rbp)
  4036e1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4036e5:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  4036ec:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4036f0:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4036f4:	73 0d                	jae    403703 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0xfe>
  4036f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4036fa:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  403701:	eb 22                	jmp    403725 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x120>
  403703:	48 c7 45 d0 17 00 00 	movq   $0x17,-0x30(%rbp)
  40370a:	00 
  40370b:	48 c7 45 d8 07 03 41 	movq   $0x410307,-0x28(%rbp)
  403712:	00 
  403713:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  403717:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40371b:	ba 50 00 00 00       	mov    $0x50,%edx
  403720:	e8 20 77 00 00       	callq  40ae45 <_d_array_bounds>
  403725:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40372c:	48 c1 e0 04          	shl    $0x4,%rax
  403730:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  403737:	8b 50 08             	mov    0x8(%rax),%edx
  40373a:	48 8b 00             	mov    (%rax),%rax
  40373d:	db ad 60 ff ff ff    	fldt   -0xa0(%rbp)
  403743:	db 7c 24 10          	fstpt  0x10(%rsp)
  403747:	48 89 04 24          	mov    %rax,(%rsp)
  40374b:	89 54 24 08          	mov    %edx,0x8(%rsp)
  40374f:	e8 35 21 00 00       	callq  405889 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi>
  403754:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  403757:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40375b:	74 08                	je     403765 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x160>
		return c;
  40375d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  403760:	89 45 84             	mov    %eax,-0x7c(%rbp)
  403763:	eb 3c                	jmp    4037a1 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x19c>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_e._compare(s1[u], s2[u]);
	    if (c)
  403765:	48 ff 45 f0          	incq   -0x10(%rbp)
  403769:	e9 ff fe ff ff       	jmpq   40366d <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  40376e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  403772:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403776:	48 39 c2             	cmp    %rax,%rdx
  403779:	73 09                	jae    403784 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x17f>
	    return -1;
  40377b:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  403782:	eb 1d                	jmp    4037a1 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x19c>
	else if (s1.length > s2.length)
  403784:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  403788:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40378c:	48 39 c2             	cmp    %rax,%rdx
  40378f:	76 09                	jbe    40379a <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x195>
	    return 1;
  403791:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  403798:	eb 07                	jmp    4037a1 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x19c>
	return 0;
  40379a:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  4037a1:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  4037a4:	c9                   	leaveq 
  4037a5:	c3                   	retq   

00000000004037a6 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae5tsizeMFZm>:

    size_t tsize()
  4037a6:	55                   	push   %rbp
  4037a7:	48 89 e5             	mov    %rsp,%rbp
  4037aa:	48 83 ec 10          	sub    $0x10,%rsp
  4037ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4037b2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4037b6:	e8 c1 5b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (real[]).sizeof;
  4037bb:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  4037c0:	c9                   	leaveq 
  4037c1:	c3                   	retq   

00000000004037c2 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae5flagsMFZk>:

    uint flags()
  4037c2:	55                   	push   %rbp
  4037c3:	48 89 e5             	mov    %rsp,%rbp
  4037c6:	48 83 ec 10          	sub    $0x10,%rsp
  4037ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4037ce:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4037d2:	e8 a5 5b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  4037d7:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  4037dc:	c9                   	leaveq 
  4037dd:	c3                   	retq   

00000000004037de <_D3std8typeinfo8ti_Areal11TypeInfo_Ae4nextMFZC8TypeInfo>:

    TypeInfo next()
  4037de:	55                   	push   %rbp
  4037df:	48 89 e5             	mov    %rsp,%rbp
  4037e2:	48 83 ec 10          	sub    $0x10,%rsp
  4037e6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4037ea:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4037ee:	e8 89 5b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(real);
  4037f3:	48 c7 c0 30 12 41 00 	mov    $0x411230,%rax
    }
  4037fa:	c9                   	leaveq 
  4037fb:	c3                   	retq   

00000000004037fc <_D3std8typeinfo8ti_Areal11TypeInfo_Aj8toStringMFZAa>:

// ireal[]

class TypeInfo_Aj : TypeInfo_Ae
{
    char[] toString() { return "ireal[]"; }
  4037fc:	55                   	push   %rbp
  4037fd:	48 89 e5             	mov    %rsp,%rbp
  403800:	53                   	push   %rbx
  403801:	48 83 ec 08          	sub    $0x8,%rsp
  403805:	48 89 fb             	mov    %rdi,%rbx
  403808:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40380c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  403810:	e8 67 5b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  403815:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  40381c:	48 c7 43 08 b0 03 41 	movq   $0x4103b0,0x8(%rbx)
  403823:	00 
  403824:	48 89 d8             	mov    %rbx,%rax
  403827:	48 83 c4 08          	add    $0x8,%rsp
  40382b:	5b                   	pop    %rbx
  40382c:	c9                   	leaveq 
  40382d:	c3                   	retq   

000000000040382e <_D3std8typeinfo8ti_Areal11TypeInfo_Aj4nextMFZC8TypeInfo>:

    TypeInfo next()
  40382e:	55                   	push   %rbp
  40382f:	48 89 e5             	mov    %rsp,%rbp
  403832:	48 83 ec 10          	sub    $0x10,%rsp
  403836:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40383a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40383e:	e8 39 5b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(ireal);
  403843:	48 c7 c0 10 10 41 00 	mov    $0x411010,%rax
    }
  40384a:	c9                   	leaveq 
  40384b:	c3                   	retq   

000000000040384c <_D3std8typeinfo9ti_Ashort11TypeInfo_As8toStringMFZAa>:

// short[]

class TypeInfo_As : TypeInfo
{
    char[] toString() { return "short[]"; }
  40384c:	55                   	push   %rbp
  40384d:	48 89 e5             	mov    %rsp,%rbp
  403850:	53                   	push   %rbx
  403851:	48 83 ec 08          	sub    $0x8,%rsp
  403855:	48 89 fb             	mov    %rdi,%rbx
  403858:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40385c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  403860:	e8 17 5b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  403865:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  40386c:	48 c7 43 08 60 04 41 	movq   $0x410460,0x8(%rbx)
  403873:	00 
  403874:	48 89 d8             	mov    %rbx,%rax
  403877:	48 83 c4 08          	add    $0x8,%rsp
  40387b:	5b                   	pop    %rbx
  40387c:	c9                   	leaveq 
  40387d:	c3                   	retq   

000000000040387e <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm>:

    hash_t getHash(void *p)
  40387e:	55                   	push   %rbp
  40387f:	48 89 e5             	mov    %rsp,%rbp
  403882:	48 83 ec 50          	sub    $0x50,%rsp
  403886:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40388a:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  40388e:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  403892:	e8 e5 5a 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {	short[] s = *cast(short[]*)p;
  403897:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40389b:	48 8b 02             	mov    (%rdx),%rax
  40389e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4038a2:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4038a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  4038aa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4038ae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	short *str = s.ptr;
  4038b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4038b6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  4038ba:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4038c1:	00 

	while (1)
  4038c2:	b8 00 00 00 00       	mov    $0x0,%eax
  4038c7:	84 c0                	test   %al,%al
  4038c9:	75 76                	jne    403941 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0xc3>
		default:
		    hash *= 9;
		    hash += *cast(uint *)str;
		    str += 2;
		    len -= 2;
		    break;
  4038cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4038cf:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4038d3:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  4038d8:	74 09                	je     4038e3 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0x65>
  4038da:	48 83 7d b0 01       	cmpq   $0x1,-0x50(%rbp)
  4038df:	74 0c                	je     4038ed <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0x6f>
  4038e1:	eb 34                	jmp    403917 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0x99>
	while (1)
	{
	    switch (len)
	    {
		case 0:
		    return hash;
  4038e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4038e7:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  4038eb:	eb 5c                	jmp    403949 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0xcb>

		case 1:
		    hash *= 9;
  4038ed:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4038f1:	48 89 d0             	mov    %rdx,%rax
  4038f4:	48 c1 e0 03          	shl    $0x3,%rax
  4038f8:	48 01 d0             	add    %rdx,%rax
  4038fb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += *cast(ushort *)str;
  4038ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403903:	0f b7 00             	movzwl (%rax),%eax
  403906:	0f b7 c0             	movzwl %ax,%eax
  403909:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		    return hash;
  40390d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403911:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  403915:	eb 32                	jmp    403949 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0xcb>

		default:
		    hash *= 9;
  403917:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40391b:	48 89 d0             	mov    %rdx,%rax
  40391e:	48 c1 e0 03          	shl    $0x3,%rax
  403922:	48 01 d0             	add    %rdx,%rax
  403925:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += *cast(uint *)str;
  403929:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40392d:	8b 00                	mov    (%rax),%eax
  40392f:	89 c0                	mov    %eax,%eax
  403931:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		    str += 2;
  403935:	48 83 45 f0 04       	addq   $0x4,-0x10(%rbp)
		    len -= 2;
  40393a:	48 83 6d f8 02       	subq   $0x2,-0x8(%rbp)
		    break;
  40393f:	eb 81                	jmp    4038c2 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0x44>
	    }
	}

	return hash;
  403941:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403945:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  403949:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    }
  40394d:	c9                   	leaveq 
  40394e:	c3                   	retq   

000000000040394f <_D3std8typeinfo9ti_Ashort11TypeInfo_As6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  40394f:	55                   	push   %rbp
  403950:	48 89 e5             	mov    %rsp,%rbp
  403953:	48 83 ec 40          	sub    $0x40,%rsp
  403957:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40395b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40395f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  403963:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  403967:	e8 10 5a 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	short[] s1 = *cast(short[]*)p1;
  40396c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  403970:	48 8b 02             	mov    (%rdx),%rax
  403973:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  403977:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40397b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	short[] s2 = *cast(short[]*)p2;
  40397f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  403983:	48 8b 02             	mov    (%rdx),%rax
  403986:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40398a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40398e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return s1.length == s2.length &&
  403992:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  403996:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40399a:	48 39 c2             	cmp    %rax,%rdx
  40399d:	75 26                	jne    4039c5 <_D3std8typeinfo9ti_Ashort11TypeInfo_As6equalsMFPvPvZi+0x76>
  40399f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4039a3:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  4039a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4039ab:	48 89 c6             	mov    %rax,%rsi
  4039ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4039b2:	48 89 c7             	mov    %rax,%rdi
  4039b5:	e8 fa 9e 00 00       	callq  40d8b4 <_D6kernel4core6system6memcmpFPvPvmZl>
  4039ba:	48 85 c0             	test   %rax,%rax
  4039bd:	75 06                	jne    4039c5 <_D3std8typeinfo9ti_Ashort11TypeInfo_As6equalsMFPvPvZi+0x76>
  4039bf:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
  4039c3:	eb 04                	jmp    4039c9 <_D3std8typeinfo9ti_Ashort11TypeInfo_As6equalsMFPvPvZi+0x7a>
  4039c5:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  4039c9:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
	       memcmp(cast(ubyte*)s1.ptr, cast(ubyte*)s2.ptr, s1.length * short.sizeof) == 0;
    }
  4039cd:	c9                   	leaveq 
  4039ce:	c3                   	retq   

00000000004039cf <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4039cf:	55                   	push   %rbp
  4039d0:	48 89 e5             	mov    %rsp,%rbp
  4039d3:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  4039da:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  4039de:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  4039e2:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  4039e6:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  4039ea:	e8 8d 59 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	short[] s1 = *cast(short[]*)p1;
  4039ef:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4039f3:	48 8b 02             	mov    (%rdx),%rax
  4039f6:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  4039fa:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4039fe:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	short[] s2 = *cast(short[]*)p2;
  403a02:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  403a06:	48 8b 02             	mov    (%rdx),%rax
  403a09:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  403a0d:	48 8b 42 08          	mov    0x8(%rdx),%rax
  403a11:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  403a15:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403a19:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  403a1d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403a21:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  403a25:	73 08                	jae    403a2f <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x60>
	    len = s2.length;
  403a27:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403a2b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  403a2f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  403a36:	00 
  403a37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403a3b:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  403a3f:	0f 92 c0             	setb   %al
  403a42:	83 f0 01             	xor    $0x1,%eax
  403a45:	84 c0                	test   %al,%al
  403a47:	0f 85 dc 00 00 00    	jne    403b29 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x15a>
	{
	    int result = s1[u] - s2[u];
  403a4d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  403a51:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  403a58:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403a5c:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  403a60:	73 0d                	jae    403a6f <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0xa0>
  403a62:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403a66:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  403a6d:	eb 22                	jmp    403a91 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0xc2>
  403a6f:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  403a76:	00 
  403a77:	48 c7 45 c8 68 04 41 	movq   $0x410468,-0x38(%rbp)
  403a7e:	00 
  403a7f:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  403a83:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  403a87:	ba 3d 00 00 00       	mov    $0x3d,%edx
  403a8c:	e8 b4 73 00 00       	callq  40ae45 <_d_array_bounds>
  403a91:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  403a98:	48 01 c0             	add    %rax,%rax
  403a9b:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  403aa2:	0f b7 00             	movzwl (%rax),%eax
  403aa5:	98                   	cwtl   
  403aa6:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  403aac:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  403ab0:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  403ab7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403abb:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  403abf:	73 0d                	jae    403ace <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0xff>
  403ac1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403ac5:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  403acc:	eb 22                	jmp    403af0 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x121>
  403ace:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  403ad5:	00 
  403ad6:	48 c7 45 d8 68 04 41 	movq   $0x410468,-0x28(%rbp)
  403add:	00 
  403ade:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  403ae2:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  403ae6:	ba 3d 00 00 00       	mov    $0x3d,%edx
  403aeb:	e8 55 73 00 00       	callq  40ae45 <_d_array_bounds>
  403af0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  403af7:	48 01 c0             	add    %rax,%rax
  403afa:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  403b01:	0f b7 00             	movzwl (%rax),%eax
  403b04:	98                   	cwtl   
  403b05:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  403b0b:	29 c2                	sub    %eax,%edx
  403b0d:	89 d0                	mov    %edx,%eax
  403b0f:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (result)
  403b12:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  403b16:	74 08                	je     403b20 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x151>
		return result;
  403b18:	8b 45 fc             	mov    -0x4(%rbp),%eax
  403b1b:	89 45 84             	mov    %eax,-0x7c(%rbp)
  403b1e:	eb 3c                	jmp    403b5c <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x18d>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int result = s1[u] - s2[u];
	    if (result)
  403b20:	48 ff 45 f0          	incq   -0x10(%rbp)
  403b24:	e9 0e ff ff ff       	jmpq   403a37 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x68>
		return result;
	}
	if (s1.length < s2.length)
  403b29:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  403b2d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403b31:	48 39 c2             	cmp    %rax,%rdx
  403b34:	73 09                	jae    403b3f <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x170>
	    return -1;
  403b36:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  403b3d:	eb 1d                	jmp    403b5c <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x18d>
	else if (s1.length > s2.length)
  403b3f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  403b43:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403b47:	48 39 c2             	cmp    %rax,%rdx
  403b4a:	76 09                	jbe    403b55 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x186>
	    return 1;
  403b4c:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  403b53:	eb 07                	jmp    403b5c <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x18d>
	return 0;
  403b55:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  403b5c:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  403b5f:	c9                   	leaveq 
  403b60:	c3                   	retq   

0000000000403b61 <_D3std8typeinfo9ti_Ashort11TypeInfo_As5tsizeMFZm>:

    size_t tsize()
  403b61:	55                   	push   %rbp
  403b62:	48 89 e5             	mov    %rsp,%rbp
  403b65:	48 83 ec 10          	sub    $0x10,%rsp
  403b69:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403b6d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403b71:	e8 06 58 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (short[]).sizeof;
  403b76:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  403b7b:	c9                   	leaveq 
  403b7c:	c3                   	retq   

0000000000403b7d <_D3std8typeinfo9ti_Ashort11TypeInfo_As5flagsMFZk>:

    uint flags()
  403b7d:	55                   	push   %rbp
  403b7e:	48 89 e5             	mov    %rsp,%rbp
  403b81:	48 83 ec 10          	sub    $0x10,%rsp
  403b85:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403b89:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403b8d:	e8 ea 57 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  403b92:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  403b97:	c9                   	leaveq 
  403b98:	c3                   	retq   

0000000000403b99 <_D3std8typeinfo9ti_Ashort11TypeInfo_As4nextMFZC8TypeInfo>:

    TypeInfo next()
  403b99:	55                   	push   %rbp
  403b9a:	48 89 e5             	mov    %rsp,%rbp
  403b9d:	48 83 ec 10          	sub    $0x10,%rsp
  403ba1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403ba5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403ba9:	e8 ce 57 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(short);
  403bae:	48 c7 c0 f0 12 41 00 	mov    $0x4112f0,%rax
    }
  403bb5:	c9                   	leaveq 
  403bb6:	c3                   	retq   

0000000000403bb7 <_D3std8typeinfo9ti_Ashort11TypeInfo_At8toStringMFZAa>:

// ushort[]

class TypeInfo_At : TypeInfo_As
{
    char[] toString() { return "ushort[]"; }
  403bb7:	55                   	push   %rbp
  403bb8:	48 89 e5             	mov    %rsp,%rbp
  403bbb:	53                   	push   %rbx
  403bbc:	48 83 ec 08          	sub    $0x8,%rsp
  403bc0:	48 89 fb             	mov    %rdi,%rbx
  403bc3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403bc7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  403bcb:	e8 ac 57 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  403bd0:	48 c7 03 08 00 00 00 	movq   $0x8,(%rbx)
  403bd7:	48 c7 43 08 30 05 41 	movq   $0x410530,0x8(%rbx)
  403bde:	00 
  403bdf:	48 89 d8             	mov    %rbx,%rax
  403be2:	48 83 c4 08          	add    $0x8,%rsp
  403be6:	5b                   	pop    %rbx
  403be7:	c9                   	leaveq 
  403be8:	c3                   	retq   

0000000000403be9 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  403be9:	55                   	push   %rbp
  403bea:	48 89 e5             	mov    %rsp,%rbp
  403bed:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  403bf4:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  403bf8:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  403bfc:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  403c00:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  403c04:	e8 73 57 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ushort[] s1 = *cast(ushort[]*)p1;
  403c09:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  403c0d:	48 8b 02             	mov    (%rdx),%rax
  403c10:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  403c14:	48 8b 42 08          	mov    0x8(%rdx),%rax
  403c18:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	ushort[] s2 = *cast(ushort[]*)p2;
  403c1c:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  403c20:	48 8b 02             	mov    (%rdx),%rax
  403c23:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  403c27:	48 8b 42 08          	mov    0x8(%rdx),%rax
  403c2b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  403c2f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403c33:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  403c37:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403c3b:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  403c3f:	73 08                	jae    403c49 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x60>
	    len = s2.length;
  403c41:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403c45:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  403c49:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  403c50:	00 
  403c51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403c55:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  403c59:	0f 92 c0             	setb   %al
  403c5c:	83 f0 01             	xor    $0x1,%eax
  403c5f:	84 c0                	test   %al,%al
  403c61:	0f 85 e0 00 00 00    	jne    403d47 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x15e>
	{
	    int result = s1[u] - s2[u];
  403c67:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  403c6b:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  403c72:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403c76:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  403c7a:	73 0d                	jae    403c89 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0xa0>
  403c7c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403c80:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  403c87:	eb 22                	jmp    403cab <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0xc2>
  403c89:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  403c90:	00 
  403c91:	48 c7 45 c8 68 04 41 	movq   $0x410468,-0x38(%rbp)
  403c98:	00 
  403c99:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  403c9d:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  403ca1:	ba 69 00 00 00       	mov    $0x69,%edx
  403ca6:	e8 9a 71 00 00       	callq  40ae45 <_d_array_bounds>
  403cab:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  403cb2:	48 01 c0             	add    %rax,%rax
  403cb5:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  403cbc:	0f b7 00             	movzwl (%rax),%eax
  403cbf:	0f b7 c0             	movzwl %ax,%eax
  403cc2:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  403cc8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  403ccc:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  403cd3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403cd7:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  403cdb:	73 0d                	jae    403cea <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x101>
  403cdd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403ce1:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  403ce8:	eb 22                	jmp    403d0c <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x123>
  403cea:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  403cf1:	00 
  403cf2:	48 c7 45 d8 68 04 41 	movq   $0x410468,-0x28(%rbp)
  403cf9:	00 
  403cfa:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  403cfe:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  403d02:	ba 69 00 00 00       	mov    $0x69,%edx
  403d07:	e8 39 71 00 00       	callq  40ae45 <_d_array_bounds>
  403d0c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  403d13:	48 01 c0             	add    %rax,%rax
  403d16:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  403d1d:	0f b7 00             	movzwl (%rax),%eax
  403d20:	0f b7 c0             	movzwl %ax,%eax
  403d23:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  403d29:	29 c2                	sub    %eax,%edx
  403d2b:	89 d0                	mov    %edx,%eax
  403d2d:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (result)
  403d30:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  403d34:	74 08                	je     403d3e <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x155>
		return result;
  403d36:	8b 45 fc             	mov    -0x4(%rbp),%eax
  403d39:	89 45 84             	mov    %eax,-0x7c(%rbp)
  403d3c:	eb 3c                	jmp    403d7a <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x191>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int result = s1[u] - s2[u];
	    if (result)
  403d3e:	48 ff 45 f0          	incq   -0x10(%rbp)
  403d42:	e9 0a ff ff ff       	jmpq   403c51 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x68>
		return result;
	}
	if (s1.length < s2.length)
  403d47:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  403d4b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403d4f:	48 39 c2             	cmp    %rax,%rdx
  403d52:	73 09                	jae    403d5d <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x174>
	    return -1;
  403d54:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  403d5b:	eb 1d                	jmp    403d7a <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x191>
	else if (s1.length > s2.length)
  403d5d:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  403d61:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403d65:	48 39 c2             	cmp    %rax,%rdx
  403d68:	76 09                	jbe    403d73 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x18a>
	    return 1;
  403d6a:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  403d71:	eb 07                	jmp    403d7a <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x191>
	return 0;
  403d73:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  403d7a:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  403d7d:	c9                   	leaveq 
  403d7e:	c3                   	retq   

0000000000403d7f <_D3std8typeinfo9ti_Ashort11TypeInfo_At4nextMFZC8TypeInfo>:

    TypeInfo next()
  403d7f:	55                   	push   %rbp
  403d80:	48 89 e5             	mov    %rsp,%rbp
  403d83:	48 83 ec 10          	sub    $0x10,%rsp
  403d87:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403d8b:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403d8f:	e8 e8 55 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(ushort);
  403d94:	48 c7 c0 90 16 41 00 	mov    $0x411690,%rax
    }
  403d9b:	c9                   	leaveq 
  403d9c:	c3                   	retq   

0000000000403d9d <_D3std8typeinfo9ti_Ashort11TypeInfo_Au8toStringMFZAa>:

// wchar[]

class TypeInfo_Au : TypeInfo_At
{
    char[] toString() { return "wchar[]"; }
  403d9d:	55                   	push   %rbp
  403d9e:	48 89 e5             	mov    %rsp,%rbp
  403da1:	53                   	push   %rbx
  403da2:	48 83 ec 08          	sub    $0x8,%rsp
  403da6:	48 89 fb             	mov    %rdi,%rbx
  403da9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403dad:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  403db1:	e8 c6 55 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  403db6:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  403dbd:	48 c7 43 08 d0 05 41 	movq   $0x4105d0,0x8(%rbx)
  403dc4:	00 
  403dc5:	48 89 d8             	mov    %rbx,%rax
  403dc8:	48 83 c4 08          	add    $0x8,%rsp
  403dcc:	5b                   	pop    %rbx
  403dcd:	c9                   	leaveq 
  403dce:	c3                   	retq   

0000000000403dcf <_D3std8typeinfo9ti_Ashort11TypeInfo_Au4nextMFZC8TypeInfo>:

    TypeInfo next()
  403dcf:	55                   	push   %rbp
  403dd0:	48 89 e5             	mov    %rsp,%rbp
  403dd3:	48 83 ec 10          	sub    $0x10,%rsp
  403dd7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403ddb:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403ddf:	e8 98 55 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(wchar);
  403de4:	48 c7 c0 10 18 41 00 	mov    $0x411810,%rax
    }
  403deb:	c9                   	leaveq 
  403dec:	c3                   	retq   
  403ded:	90                   	nop    
  403dee:	90                   	nop    
  403def:	90                   	nop    

0000000000403df0 <_D3std8typeinfo7ti_byte10TypeInfo_g8toStringMFZAa>:

module std.typeinfo.ti_byte;

class TypeInfo_g : TypeInfo
{
    char[] toString() { return "byte"; }
  403df0:	55                   	push   %rbp
  403df1:	48 89 e5             	mov    %rsp,%rbp
  403df4:	53                   	push   %rbx
  403df5:	48 83 ec 08          	sub    $0x8,%rsp
  403df9:	48 89 fb             	mov    %rdi,%rbx
  403dfc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403e00:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  403e04:	e8 73 55 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  403e09:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  403e10:	48 c7 43 08 80 06 41 	movq   $0x410680,0x8(%rbx)
  403e17:	00 
  403e18:	48 89 d8             	mov    %rbx,%rax
  403e1b:	48 83 c4 08          	add    $0x8,%rsp
  403e1f:	5b                   	pop    %rbx
  403e20:	c9                   	leaveq 
  403e21:	c3                   	retq   

0000000000403e22 <_D3std8typeinfo7ti_byte10TypeInfo_g7getHashMFPvZm>:

    hash_t getHash(void *p)
  403e22:	55                   	push   %rbp
  403e23:	48 89 e5             	mov    %rsp,%rbp
  403e26:	48 83 ec 10          	sub    $0x10,%rsp
  403e2a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403e2e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403e32:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403e36:	e8 41 55 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(byte *)p;
  403e3b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403e3f:	0f b6 00             	movzbl (%rax),%eax
  403e42:	48 0f be c0          	movsbq %al,%rax
    }
  403e46:	c9                   	leaveq 
  403e47:	c3                   	retq   

0000000000403e48 <_D3std8typeinfo7ti_byte10TypeInfo_g6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  403e48:	55                   	push   %rbp
  403e49:	48 89 e5             	mov    %rsp,%rbp
  403e4c:	48 83 ec 20          	sub    $0x20,%rsp
  403e50:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403e54:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403e58:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  403e5c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403e60:	e8 17 55 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(byte *)p1 == *cast(byte *)p2;
  403e65:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403e69:	0f b6 10             	movzbl (%rax),%edx
  403e6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403e70:	0f b6 00             	movzbl (%rax),%eax
  403e73:	38 c2                	cmp    %al,%dl
  403e75:	0f 94 c0             	sete   %al
  403e78:	0f b6 c0             	movzbl %al,%eax
    }
  403e7b:	c9                   	leaveq 
  403e7c:	c3                   	retq   

0000000000403e7d <_D3std8typeinfo7ti_byte10TypeInfo_g7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  403e7d:	55                   	push   %rbp
  403e7e:	48 89 e5             	mov    %rsp,%rbp
  403e81:	48 83 ec 20          	sub    $0x20,%rsp
  403e85:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403e89:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403e8d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  403e91:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403e95:	e8 e2 54 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(byte *)p1 - *cast(byte *)p2;
  403e9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403e9e:	0f b6 00             	movzbl (%rax),%eax
  403ea1:	0f be d0             	movsbl %al,%edx
  403ea4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403ea8:	0f b6 00             	movzbl (%rax),%eax
  403eab:	0f be c0             	movsbl %al,%eax
  403eae:	89 d1                	mov    %edx,%ecx
  403eb0:	29 c1                	sub    %eax,%ecx
  403eb2:	89 c8                	mov    %ecx,%eax
    }
  403eb4:	c9                   	leaveq 
  403eb5:	c3                   	retq   

0000000000403eb6 <_D3std8typeinfo7ti_byte10TypeInfo_g5tsizeMFZm>:

    size_t tsize()
  403eb6:	55                   	push   %rbp
  403eb7:	48 89 e5             	mov    %rsp,%rbp
  403eba:	48 83 ec 10          	sub    $0x10,%rsp
  403ebe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403ec2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403ec6:	e8 b1 54 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return byte.sizeof;
  403ecb:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  403ed0:	c9                   	leaveq 
  403ed1:	c3                   	retq   

0000000000403ed2 <_D3std8typeinfo7ti_byte10TypeInfo_g4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  403ed2:	55                   	push   %rbp
  403ed3:	48 89 e5             	mov    %rsp,%rbp
  403ed6:	48 83 ec 30          	sub    $0x30,%rsp
  403eda:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  403ede:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  403ee2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  403ee6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  403eea:	e8 8d 54 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	byte t;
  403eef:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)

	t = *cast(byte *)p1;
  403ef3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  403ef7:	0f b6 00             	movzbl (%rax),%eax
  403efa:	88 45 ff             	mov    %al,-0x1(%rbp)
	*cast(byte *)p1 = *cast(byte *)p2;
  403efd:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  403f01:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403f05:	0f b6 00             	movzbl (%rax),%eax
  403f08:	88 02                	mov    %al,(%rdx)
	*cast(byte *)p2 = t;
  403f0a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  403f0e:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  403f12:	88 02                	mov    %al,(%rdx)
    }
  403f14:	c9                   	leaveq 
  403f15:	c3                   	retq   
  403f16:	90                   	nop    
  403f17:	90                   	nop    

0000000000403f18 <_D3std8typeinfo4ti_C10TypeInfo_C7getHashMFPvZm>:

// Object

class TypeInfo_C : TypeInfo
{
    hash_t getHash(void *p)
  403f18:	55                   	push   %rbp
  403f19:	48 89 e5             	mov    %rsp,%rbp
  403f1c:	48 83 ec 20          	sub    $0x20,%rsp
  403f20:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  403f24:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  403f28:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  403f2c:	e8 4b 54 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	Object o = *cast(Object*)p;
  403f31:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  403f35:	48 8b 00             	mov    (%rax),%rax
  403f38:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(o);
  403f3c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403f40:	e8 37 54 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	return o.toHash();
  403f45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403f49:	48 8b 00             	mov    (%rax),%rax
  403f4c:	48 83 c0 10          	add    $0x10,%rax
  403f50:	48 8b 00             	mov    (%rax),%rax
  403f53:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403f57:	ff d0                	callq  *%rax
    }
  403f59:	c9                   	leaveq 
  403f5a:	c3                   	retq   

0000000000403f5b <_D3std8typeinfo4ti_C10TypeInfo_C6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  403f5b:	55                   	push   %rbp
  403f5c:	48 89 e5             	mov    %rsp,%rbp
  403f5f:	48 83 ec 30          	sub    $0x30,%rsp
  403f63:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  403f67:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  403f6b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  403f6f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  403f73:	e8 04 54 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	Object o1 = *cast(Object*)p1;
  403f78:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  403f7c:	48 8b 00             	mov    (%rax),%rax
  403f7f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	Object o2 = *cast(Object*)p2;
  403f83:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403f87:	48 8b 00             	mov    (%rax),%rax
  403f8a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	return o1 == o2;
  403f8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403f92:	48 8b 00             	mov    (%rax),%rax
  403f95:	48 83 c0 20          	add    $0x20,%rax
  403f99:	48 8b 00             	mov    (%rax),%rax
  403f9c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  403fa0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  403fa4:	ff d0                	callq  *%rax
    }
  403fa6:	c9                   	leaveq 
  403fa7:	c3                   	retq   

0000000000403fa8 <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  403fa8:	55                   	push   %rbp
  403fa9:	48 89 e5             	mov    %rsp,%rbp
  403fac:	48 83 ec 40          	sub    $0x40,%rsp
  403fb0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  403fb4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  403fb8:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  403fbc:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  403fc0:	e8 b7 53 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	Object o1 = *cast(Object*)p1;
  403fc5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  403fc9:	48 8b 00             	mov    (%rax),%rax
  403fcc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	Object o2 = *cast(Object*)p2;
  403fd0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  403fd4:	48 8b 00             	mov    (%rax),%rax
  403fd7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	int c = 0;
  403fdb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)

	// Regard null references as always being "less than"
	if (!(o1 is o2))
  403fe2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403fe6:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  403fea:	0f 94 c0             	sete   %al
  403fed:	83 f0 01             	xor    $0x1,%eax
  403ff0:	84 c0                	test   %al,%al
  403ff2:	74 43                	je     404037 <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi+0x8f>
	{
	    if (o1)
  403ff4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  403ff9:	74 35                	je     404030 <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi+0x88>
	    {	if (!o2)
  403ffb:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  404000:	0f 95 c0             	setne  %al
  404003:	83 f0 01             	xor    $0x1,%eax
  404006:	84 c0                	test   %al,%al
  404008:	74 09                	je     404013 <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi+0x6b>
		    c = 1;
  40400a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  404011:	eb 24                	jmp    404037 <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi+0x8f>
		else
		    c = o1.opCmp(o2);
  404013:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404017:	48 8b 00             	mov    (%rax),%rax
  40401a:	48 83 c0 18          	add    $0x18,%rax
  40401e:	48 8b 00             	mov    (%rax),%rax
  404021:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  404025:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404029:	ff d0                	callq  *%rax
  40402b:	89 45 ec             	mov    %eax,-0x14(%rbp)
  40402e:	eb 07                	jmp    404037 <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi+0x8f>
	    }
	    else
		c = -1;
  404030:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rbp)
	}
	return c;
  404037:	8b 45 ec             	mov    -0x14(%rbp),%eax
    }
  40403a:	c9                   	leaveq 
  40403b:	c3                   	retq   

000000000040403c <_D3std8typeinfo4ti_C10TypeInfo_C5tsizeMFZm>:

    size_t tsize()
  40403c:	55                   	push   %rbp
  40403d:	48 89 e5             	mov    %rsp,%rbp
  404040:	48 83 ec 10          	sub    $0x10,%rsp
  404044:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404048:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40404c:	e8 2b 53 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return Object.sizeof;
  404051:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  404056:	c9                   	leaveq 
  404057:	c3                   	retq   

0000000000404058 <_D3std8typeinfo4ti_C10TypeInfo_C5flagsMFZk>:

    uint flags()
  404058:	55                   	push   %rbp
  404059:	48 89 e5             	mov    %rsp,%rbp
  40405c:	48 83 ec 10          	sub    $0x10,%rsp
  404060:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404064:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404068:	e8 0f 53 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  40406d:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  404072:	c9                   	leaveq 
  404073:	c3                   	retq   

0000000000404074 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8toStringMFZAa>:

module std.typeinfo.ti_cdouble;

class TypeInfo_r : TypeInfo
{
    char[] toString() { return "cdouble"; }
  404074:	55                   	push   %rbp
  404075:	48 89 e5             	mov    %rsp,%rbp
  404078:	53                   	push   %rbx
  404079:	48 83 ec 08          	sub    $0x8,%rsp
  40407d:	48 89 fb             	mov    %rdi,%rbx
  404080:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404084:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  404088:	e8 ef 52 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  40408d:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  404094:	48 c7 43 08 e0 07 41 	movq   $0x4107e0,0x8(%rbx)
  40409b:	00 
  40409c:	48 89 d8             	mov    %rbx,%rax
  40409f:	48 83 c4 08          	add    $0x8,%rsp
  4040a3:	5b                   	pop    %rbx
  4040a4:	c9                   	leaveq 
  4040a5:	c3                   	retq   

00000000004040a6 <_D3std8typeinfo10ti_cdouble10TypeInfo_r7getHashMFPvZm>:

    hash_t getHash(void *p)
  4040a6:	55                   	push   %rbp
  4040a7:	48 89 e5             	mov    %rsp,%rbp
  4040aa:	48 83 ec 10          	sub    $0x10,%rsp
  4040ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4040b2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4040b6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4040ba:	e8 bd 52 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cast(uint *)p)[0] + (cast(uint *)p)[1] +
  4040bf:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4040c3:	b8 00 00 00 00       	mov    $0x0,%eax
  4040c8:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4040cc:	8b 08                	mov    (%rax),%ecx
  4040ce:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4040d2:	b8 04 00 00 00       	mov    $0x4,%eax
  4040d7:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4040db:	8b 00                	mov    (%rax),%eax
  4040dd:	01 c1                	add    %eax,%ecx
  4040df:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4040e3:	b8 08 00 00 00       	mov    $0x8,%eax
  4040e8:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4040ec:	8b 00                	mov    (%rax),%eax
  4040ee:	01 c1                	add    %eax,%ecx
  4040f0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4040f4:	b8 0c 00 00 00       	mov    $0xc,%eax
  4040f9:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4040fd:	8b 00                	mov    (%rax),%eax
  4040ff:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  404102:	89 c0                	mov    %eax,%eax
	       (cast(uint *)p)[2] + (cast(uint *)p)[3];
    }
  404104:	c9                   	leaveq 
  404105:	c3                   	retq   

0000000000404106 <_D3std8typeinfo10ti_cdouble10TypeInfo_r7_equalsFrrZi>:

    static int _equals(cdouble f1, cdouble f2)
  404106:	55                   	push   %rbp
  404107:	48 89 e5             	mov    %rsp,%rbp
  40410a:	f2 0f 11 45 d8       	movsd  %xmm0,-0x28(%rbp)
  40410f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404113:	f2 0f 11 4d d8       	movsd  %xmm1,-0x28(%rbp)
  404118:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40411c:	f2 0f 11 55 d8       	movsd  %xmm2,-0x28(%rbp)
  404121:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  404125:	f2 0f 11 5d d8       	movsd  %xmm3,-0x28(%rbp)
  40412a:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40412e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  404132:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  404136:	48 89 c8             	mov    %rcx,%rax
  404139:	48 89 f2             	mov    %rsi,%rdx
  40413c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  404140:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    {
	return f1 == f2;
  404144:	66 0f 12 4d f0       	movlpd -0x10(%rbp),%xmm1
  404149:	66 0f 12 5d f8       	movlpd -0x8(%rbp),%xmm3
  40414e:	66 0f 12 45 e0       	movlpd -0x20(%rbp),%xmm0
  404153:	66 0f 12 55 e8       	movlpd -0x18(%rbp),%xmm2
  404158:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
  40415c:	0f 94 c1             	sete   %cl
  40415f:	0f 9b c0             	setnp  %al
  404162:	21 c1                	and    %eax,%ecx
  404164:	66 0f 2e da          	ucomisd %xmm2,%xmm3
  404168:	0f 94 c0             	sete   %al
  40416b:	0f 9b c2             	setnp  %dl
  40416e:	21 d0                	and    %edx,%eax
  404170:	21 c8                	and    %ecx,%eax
  404172:	0f b6 c0             	movzbl %al,%eax
    }
  404175:	c9                   	leaveq 
  404176:	c3                   	retq   

0000000000404177 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi>:

    static int _compare(cdouble f1, cdouble f2)
  404177:	55                   	push   %rbp
  404178:	48 89 e5             	mov    %rsp,%rbp
  40417b:	f2 0f 11 45 c8       	movsd  %xmm0,-0x38(%rbp)
  404180:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  404184:	f2 0f 11 4d c8       	movsd  %xmm1,-0x38(%rbp)
  404189:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40418d:	f2 0f 11 55 c8       	movsd  %xmm2,-0x38(%rbp)
  404192:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  404196:	f2 0f 11 5d c8       	movsd  %xmm3,-0x38(%rbp)
  40419b:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40419f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4041a3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4041a7:	48 89 c8             	mov    %rcx,%rax
  4041aa:	48 89 f2             	mov    %rsi,%rdx
  4041ad:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4041b1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    {   int result;
  4041b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	if (f1.re < f2.re)
  4041bc:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  4041c1:	66 0f 12 45 d0       	movlpd -0x30(%rbp),%xmm0
  4041c6:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  4041ca:	77 02                	ja     4041ce <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x57>
  4041cc:	eb 09                	jmp    4041d7 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x60>
	    result = -1;
  4041ce:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  4041d5:	eb 58                	jmp    40422f <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xb8>
	else if (f1.re > f2.re)
  4041d7:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  4041dc:	66 0f 12 45 d0       	movlpd -0x30(%rbp),%xmm0
  4041e1:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
  4041e5:	77 02                	ja     4041e9 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x72>
  4041e7:	eb 09                	jmp    4041f2 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x7b>
	    result = 1;
  4041e9:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  4041f0:	eb 3d                	jmp    40422f <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xb8>
	else if (f1.im < f2.im)
  4041f2:	66 0f 12 4d e8       	movlpd -0x18(%rbp),%xmm1
  4041f7:	66 0f 12 45 d8       	movlpd -0x28(%rbp),%xmm0
  4041fc:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  404200:	77 02                	ja     404204 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x8d>
  404202:	eb 09                	jmp    40420d <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x96>
	    result = -1;
  404204:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  40420b:	eb 22                	jmp    40422f <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xb8>
	else if (f1.im > f2.im)
  40420d:	66 0f 12 4d e8       	movlpd -0x18(%rbp),%xmm1
  404212:	66 0f 12 45 d8       	movlpd -0x28(%rbp),%xmm0
  404217:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
  40421b:	77 02                	ja     40421f <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xa8>
  40421d:	eb 09                	jmp    404228 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xb1>
	    result = 1;
  40421f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  404226:	eb 07                	jmp    40422f <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xb8>
	else
	    result = 0;
  404228:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
        return result;
  40422f:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
  404232:	c9                   	leaveq 
  404233:	c3                   	retq   

0000000000404234 <_D3std8typeinfo10ti_cdouble10TypeInfo_r6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  404234:	55                   	push   %rbp
  404235:	48 89 e5             	mov    %rsp,%rbp
  404238:	48 83 ec 20          	sub    $0x20,%rsp
  40423c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404240:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404244:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404248:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40424c:	e8 2b 51 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(cdouble *)p1, *cast(cdouble *)p2);
  404251:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404255:	48 8b 10             	mov    (%rax),%rdx
  404258:	48 8b 48 08          	mov    0x8(%rax),%rcx
  40425c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404260:	48 8b 30             	mov    (%rax),%rsi
  404263:	48 8b 40 08          	mov    0x8(%rax),%rax
  404267:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  40426b:	66 0f 12 55 e0       	movlpd -0x20(%rbp),%xmm2
  404270:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  404274:	66 0f 12 5d e0       	movlpd -0x20(%rbp),%xmm3
  404279:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40427d:	66 0f 12 45 e0       	movlpd -0x20(%rbp),%xmm0
  404282:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  404286:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  40428b:	e8 76 fe ff ff       	callq  404106 <_D3std8typeinfo10ti_cdouble10TypeInfo_r7_equalsFrrZi>
    }
  404290:	c9                   	leaveq 
  404291:	c3                   	retq   

0000000000404292 <_D3std8typeinfo10ti_cdouble10TypeInfo_r7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  404292:	55                   	push   %rbp
  404293:	48 89 e5             	mov    %rsp,%rbp
  404296:	48 83 ec 20          	sub    $0x20,%rsp
  40429a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40429e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4042a2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4042a6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4042aa:	e8 cd 50 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(cdouble *)p1, *cast(cdouble *)p2);
  4042af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4042b3:	48 8b 10             	mov    (%rax),%rdx
  4042b6:	48 8b 48 08          	mov    0x8(%rax),%rcx
  4042ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4042be:	48 8b 30             	mov    (%rax),%rsi
  4042c1:	48 8b 40 08          	mov    0x8(%rax),%rax
  4042c5:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  4042c9:	66 0f 12 55 e0       	movlpd -0x20(%rbp),%xmm2
  4042ce:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  4042d2:	66 0f 12 5d e0       	movlpd -0x20(%rbp),%xmm3
  4042d7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4042db:	66 0f 12 45 e0       	movlpd -0x20(%rbp),%xmm0
  4042e0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4042e4:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  4042e9:	e8 89 fe ff ff       	callq  404177 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi>
    }
  4042ee:	c9                   	leaveq 
  4042ef:	c3                   	retq   

00000000004042f0 <_D3std8typeinfo10ti_cdouble10TypeInfo_r5tsizeMFZm>:

    size_t tsize()
  4042f0:	55                   	push   %rbp
  4042f1:	48 89 e5             	mov    %rsp,%rbp
  4042f4:	48 83 ec 10          	sub    $0x10,%rsp
  4042f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4042fc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404300:	e8 77 50 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return cdouble.sizeof;
  404305:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  40430a:	c9                   	leaveq 
  40430b:	c3                   	retq   

000000000040430c <_D3std8typeinfo10ti_cdouble10TypeInfo_r4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  40430c:	55                   	push   %rbp
  40430d:	48 89 e5             	mov    %rsp,%rbp
  404310:	48 83 ec 30          	sub    $0x30,%rsp
  404314:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404318:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40431c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  404320:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  404324:	e8 53 50 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cdouble t;
  404329:	48 b8 00 00 00 00 00 	mov    $0x7ff8000000000000,%rax
  404330:	00 f8 7f 
  404333:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  404337:	48 b8 00 00 00 00 00 	mov    $0x7ff8000000000000,%rax
  40433e:	00 f8 7f 
  404341:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	t = *cast(cdouble *)p1;
  404345:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  404349:	48 8b 02             	mov    (%rdx),%rax
  40434c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  404350:	48 8b 42 08          	mov    0x8(%rdx),%rax
  404354:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(cdouble *)p1 = *cast(cdouble *)p2;
  404358:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40435c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404360:	48 8b 10             	mov    (%rax),%rdx
  404363:	48 8b 40 08          	mov    0x8(%rax),%rax
  404367:	48 89 11             	mov    %rdx,(%rcx)
  40436a:	48 89 41 08          	mov    %rax,0x8(%rcx)
	*cast(cdouble *)p2 = t;
  40436e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  404372:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404376:	48 89 02             	mov    %rax,(%rdx)
  404379:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40437d:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
  404381:	c9                   	leaveq 
  404382:	c3                   	retq   

0000000000404383 <_D3std8typeinfo10ti_cdouble10TypeInfo_r4initMFZAv>:

    void[] init()
  404383:	55                   	push   %rbp
  404384:	48 89 e5             	mov    %rsp,%rbp
  404387:	53                   	push   %rbx
  404388:	48 83 ec 28          	sub    $0x28,%rsp
  40438c:	48 89 fb             	mov    %rdi,%rbx
  40438f:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  404393:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  404397:	e8 e0 4f 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {	static cdouble r;

	return (cast(cdouble *)&r)[0 .. 1];
  40439c:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  4043a3:	00 
  4043a4:	48 c7 45 e8 a0 ad 41 	movq   $0x41ada0,-0x18(%rbp)
  4043ab:	00 
  4043ac:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4043b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4043b4:	49 89 c0             	mov    %rax,%r8
  4043b7:	ba 10 00 00 00       	mov    $0x10,%edx
  4043bc:	be 01 00 00 00       	mov    $0x1,%esi
  4043c1:	48 89 df             	mov    %rbx,%rdi
  4043c4:	e8 56 92 00 00       	callq  40d61f <_d_arraycast>
    }
  4043c9:	48 89 d8             	mov    %rbx,%rax
  4043cc:	48 83 c4 28          	add    $0x28,%rsp
  4043d0:	5b                   	pop    %rbx
  4043d1:	c9                   	leaveq 
  4043d2:	c3                   	retq   
  4043d3:	90                   	nop    

00000000004043d4 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8toStringMFZAa>:

module std.typeinfo.ti_cfloat;

class TypeInfo_q : TypeInfo
{
    char[] toString() { return "cfloat"; }
  4043d4:	55                   	push   %rbp
  4043d5:	48 89 e5             	mov    %rsp,%rbp
  4043d8:	53                   	push   %rbx
  4043d9:	48 83 ec 08          	sub    $0x8,%rsp
  4043dd:	48 89 fb             	mov    %rdi,%rbx
  4043e0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4043e4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4043e8:	e8 8f 4f 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  4043ed:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  4043f4:	48 c7 43 08 a0 08 41 	movq   $0x4108a0,0x8(%rbx)
  4043fb:	00 
  4043fc:	48 89 d8             	mov    %rbx,%rax
  4043ff:	48 83 c4 08          	add    $0x8,%rsp
  404403:	5b                   	pop    %rbx
  404404:	c9                   	leaveq 
  404405:	c3                   	retq   

0000000000404406 <_D3std8typeinfo9ti_cfloat10TypeInfo_q7getHashMFPvZm>:

    hash_t getHash(void *p)
  404406:	55                   	push   %rbp
  404407:	48 89 e5             	mov    %rsp,%rbp
  40440a:	48 83 ec 10          	sub    $0x10,%rsp
  40440e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404412:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404416:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40441a:	e8 5d 4f 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cast(uint *)p)[0] + (cast(uint *)p)[1];
  40441f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  404423:	b8 00 00 00 00       	mov    $0x0,%eax
  404428:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40442c:	8b 08                	mov    (%rax),%ecx
  40442e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  404432:	b8 04 00 00 00       	mov    $0x4,%eax
  404437:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40443b:	8b 00                	mov    (%rax),%eax
  40443d:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  404440:	89 c0                	mov    %eax,%eax
    }
  404442:	c9                   	leaveq 
  404443:	c3                   	retq   

0000000000404444 <_D3std8typeinfo9ti_cfloat10TypeInfo_q7_equalsFqqZi>:

    static int _equals(cfloat f1, cfloat f2)
  404444:	55                   	push   %rbp
  404445:	48 89 e5             	mov    %rsp,%rbp
  404448:	66 48 0f 7e c0       	movq   %xmm0,%rax
  40444d:	66 48 0f 7e ca       	movq   %xmm1,%rdx
  404452:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  404456:	48 89 d0             	mov    %rdx,%rax
  404459:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    {
	return f1 == f2;
  40445d:	f3 0f 10 4d f8       	movss  -0x8(%rbp),%xmm1
  404462:	f3 0f 10 5d fc       	movss  -0x4(%rbp),%xmm3
  404467:	f3 0f 10 45 f0       	movss  -0x10(%rbp),%xmm0
  40446c:	f3 0f 10 55 f4       	movss  -0xc(%rbp),%xmm2
  404471:	0f 2e c8             	ucomiss %xmm0,%xmm1
  404474:	0f 94 c1             	sete   %cl
  404477:	0f 9b c0             	setnp  %al
  40447a:	21 c1                	and    %eax,%ecx
  40447c:	0f 2e da             	ucomiss %xmm2,%xmm3
  40447f:	0f 94 c0             	sete   %al
  404482:	0f 9b c2             	setnp  %dl
  404485:	21 d0                	and    %edx,%eax
  404487:	21 c8                	and    %ecx,%eax
  404489:	0f b6 c0             	movzbl %al,%eax
    }
  40448c:	c9                   	leaveq 
  40448d:	c3                   	retq   

000000000040448e <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi>:

    static int _compare(cfloat f1, cfloat f2)
  40448e:	55                   	push   %rbp
  40448f:	48 89 e5             	mov    %rsp,%rbp
  404492:	66 48 0f 7e c0       	movq   %xmm0,%rax
  404497:	66 48 0f 7e ca       	movq   %xmm1,%rdx
  40449c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4044a0:	48 89 d0             	mov    %rdx,%rax
  4044a3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    {   int result;
  4044a7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	if (f1.re < f2.re)
  4044ae:	f3 0f 10 4d e8       	movss  -0x18(%rbp),%xmm1
  4044b3:	f3 0f 10 45 e0       	movss  -0x20(%rbp),%xmm0
  4044b8:	0f 2e c1             	ucomiss %xmm1,%xmm0
  4044bb:	77 02                	ja     4044bf <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x31>
  4044bd:	eb 09                	jmp    4044c8 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x3a>
	    result = -1;
  4044bf:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  4044c6:	eb 55                	jmp    40451d <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x8f>
	else if (f1.re > f2.re)
  4044c8:	f3 0f 10 4d e8       	movss  -0x18(%rbp),%xmm1
  4044cd:	f3 0f 10 45 e0       	movss  -0x20(%rbp),%xmm0
  4044d2:	0f 2e c8             	ucomiss %xmm0,%xmm1
  4044d5:	77 02                	ja     4044d9 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x4b>
  4044d7:	eb 09                	jmp    4044e2 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x54>
	    result = 1;
  4044d9:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  4044e0:	eb 3b                	jmp    40451d <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x8f>
	else if (f1.im < f2.im)
  4044e2:	f3 0f 10 4d ec       	movss  -0x14(%rbp),%xmm1
  4044e7:	f3 0f 10 45 e4       	movss  -0x1c(%rbp),%xmm0
  4044ec:	0f 2e c1             	ucomiss %xmm1,%xmm0
  4044ef:	77 02                	ja     4044f3 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x65>
  4044f1:	eb 09                	jmp    4044fc <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x6e>
	    result = -1;
  4044f3:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  4044fa:	eb 21                	jmp    40451d <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x8f>
	else if (f1.im > f2.im)
  4044fc:	f3 0f 10 4d ec       	movss  -0x14(%rbp),%xmm1
  404501:	f3 0f 10 45 e4       	movss  -0x1c(%rbp),%xmm0
  404506:	0f 2e c8             	ucomiss %xmm0,%xmm1
  404509:	77 02                	ja     40450d <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x7f>
  40450b:	eb 09                	jmp    404516 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x88>
	    result = 1;
  40450d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  404514:	eb 07                	jmp    40451d <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x8f>
	else
	    result = 0;
  404516:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
        return result;
  40451d:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
  404520:	c9                   	leaveq 
  404521:	c3                   	retq   

0000000000404522 <_D3std8typeinfo9ti_cfloat10TypeInfo_q6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  404522:	55                   	push   %rbp
  404523:	48 89 e5             	mov    %rsp,%rbp
  404526:	48 83 ec 30          	sub    $0x30,%rsp
  40452a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40452e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404532:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404536:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40453a:	e8 3d 4e 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(cfloat *)p1, *cast(cfloat *)p2);
  40453f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404543:	8b 10                	mov    (%rax),%edx
  404545:	8b 48 04             	mov    0x4(%rax),%ecx
  404548:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40454c:	8b 30                	mov    (%rax),%esi
  40454e:	8b 78 04             	mov    0x4(%rax),%edi
  404551:	89 d0                	mov    %edx,%eax
  404553:	89 ca                	mov    %ecx,%edx
  404555:	89 45 e0             	mov    %eax,-0x20(%rbp)
  404558:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  40455b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40455f:	89 f0                	mov    %esi,%eax
  404561:	89 fa                	mov    %edi,%edx
  404563:	89 45 d8             	mov    %eax,-0x28(%rbp)
  404566:	89 55 dc             	mov    %edx,-0x24(%rbp)
  404569:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40456d:	66 48 0f 6e c9       	movq   %rcx,%xmm1
  404572:	66 48 0f 6e c0       	movq   %rax,%xmm0
  404577:	e8 c8 fe ff ff       	callq  404444 <_D3std8typeinfo9ti_cfloat10TypeInfo_q7_equalsFqqZi>
    }
  40457c:	c9                   	leaveq 
  40457d:	c3                   	retq   

000000000040457e <_D3std8typeinfo9ti_cfloat10TypeInfo_q7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  40457e:	55                   	push   %rbp
  40457f:	48 89 e5             	mov    %rsp,%rbp
  404582:	48 83 ec 30          	sub    $0x30,%rsp
  404586:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40458a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40458e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404592:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404596:	e8 e1 4d 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(cfloat *)p1, *cast(cfloat *)p2);
  40459b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40459f:	8b 10                	mov    (%rax),%edx
  4045a1:	8b 48 04             	mov    0x4(%rax),%ecx
  4045a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4045a8:	8b 30                	mov    (%rax),%esi
  4045aa:	8b 78 04             	mov    0x4(%rax),%edi
  4045ad:	89 d0                	mov    %edx,%eax
  4045af:	89 ca                	mov    %ecx,%edx
  4045b1:	89 45 e0             	mov    %eax,-0x20(%rbp)
  4045b4:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  4045b7:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4045bb:	89 f0                	mov    %esi,%eax
  4045bd:	89 fa                	mov    %edi,%edx
  4045bf:	89 45 d8             	mov    %eax,-0x28(%rbp)
  4045c2:	89 55 dc             	mov    %edx,-0x24(%rbp)
  4045c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4045c9:	66 48 0f 6e c9       	movq   %rcx,%xmm1
  4045ce:	66 48 0f 6e c0       	movq   %rax,%xmm0
  4045d3:	e8 b6 fe ff ff       	callq  40448e <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi>
    }
  4045d8:	c9                   	leaveq 
  4045d9:	c3                   	retq   

00000000004045da <_D3std8typeinfo9ti_cfloat10TypeInfo_q5tsizeMFZm>:

    size_t tsize()
  4045da:	55                   	push   %rbp
  4045db:	48 89 e5             	mov    %rsp,%rbp
  4045de:	48 83 ec 10          	sub    $0x10,%rsp
  4045e2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4045e6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4045ea:	e8 8d 4d 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return cfloat.sizeof;
  4045ef:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  4045f4:	c9                   	leaveq 
  4045f5:	c3                   	retq   

00000000004045f6 <_D3std8typeinfo9ti_cfloat10TypeInfo_q4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  4045f6:	55                   	push   %rbp
  4045f7:	48 89 e5             	mov    %rsp,%rbp
  4045fa:	48 83 ec 30          	sub    $0x30,%rsp
  4045fe:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404602:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  404606:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40460a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40460e:	e8 69 4d 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cfloat t;
  404613:	b8 00 00 c0 7f       	mov    $0x7fc00000,%eax
  404618:	89 45 f8             	mov    %eax,-0x8(%rbp)
  40461b:	b8 00 00 c0 7f       	mov    $0x7fc00000,%eax
  404620:	89 45 fc             	mov    %eax,-0x4(%rbp)

	t = *cast(cfloat *)p1;
  404623:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  404627:	8b 02                	mov    (%rdx),%eax
  404629:	89 45 f8             	mov    %eax,-0x8(%rbp)
  40462c:	8b 42 04             	mov    0x4(%rdx),%eax
  40462f:	89 45 fc             	mov    %eax,-0x4(%rbp)
	*cast(cfloat *)p1 = *cast(cfloat *)p2;
  404632:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  404636:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40463a:	8b 10                	mov    (%rax),%edx
  40463c:	8b 40 04             	mov    0x4(%rax),%eax
  40463f:	89 11                	mov    %edx,(%rcx)
  404641:	89 41 04             	mov    %eax,0x4(%rcx)
	*cast(cfloat *)p2 = t;
  404644:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  404648:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40464b:	89 02                	mov    %eax,(%rdx)
  40464d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404650:	89 42 04             	mov    %eax,0x4(%rdx)
    }
  404653:	c9                   	leaveq 
  404654:	c3                   	retq   

0000000000404655 <_D3std8typeinfo9ti_cfloat10TypeInfo_q4initMFZAv>:

    void[] init()
  404655:	55                   	push   %rbp
  404656:	48 89 e5             	mov    %rsp,%rbp
  404659:	53                   	push   %rbx
  40465a:	48 83 ec 28          	sub    $0x28,%rsp
  40465e:	48 89 fb             	mov    %rdi,%rbx
  404661:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  404665:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  404669:	e8 0e 4d 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {	static cfloat r;

	return (cast(cfloat *)&r)[0 .. 1];
  40466e:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  404675:	00 
  404676:	48 c7 45 e8 60 ae 41 	movq   $0x41ae60,-0x18(%rbp)
  40467d:	00 
  40467e:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  404682:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404686:	49 89 c0             	mov    %rax,%r8
  404689:	ba 08 00 00 00       	mov    $0x8,%edx
  40468e:	be 01 00 00 00       	mov    $0x1,%esi
  404693:	48 89 df             	mov    %rbx,%rdi
  404696:	e8 84 8f 00 00       	callq  40d61f <_d_arraycast>
    }
  40469b:	48 89 d8             	mov    %rbx,%rax
  40469e:	48 83 c4 28          	add    $0x28,%rsp
  4046a2:	5b                   	pop    %rbx
  4046a3:	c9                   	leaveq 
  4046a4:	c3                   	retq   
  4046a5:	90                   	nop    
  4046a6:	90                   	nop    
  4046a7:	90                   	nop    

00000000004046a8 <_D3std8typeinfo7ti_char10TypeInfo_a8toStringMFZAa>:

module std.typeinfo.ti_char;

class TypeInfo_a : TypeInfo
{
    char[] toString() { return "char"; }
  4046a8:	55                   	push   %rbp
  4046a9:	48 89 e5             	mov    %rsp,%rbp
  4046ac:	53                   	push   %rbx
  4046ad:	48 83 ec 08          	sub    $0x8,%rsp
  4046b1:	48 89 fb             	mov    %rdi,%rbx
  4046b4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4046b8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4046bc:	e8 bb 4c 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  4046c1:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  4046c8:	48 c7 43 08 60 09 41 	movq   $0x410960,0x8(%rbx)
  4046cf:	00 
  4046d0:	48 89 d8             	mov    %rbx,%rax
  4046d3:	48 83 c4 08          	add    $0x8,%rsp
  4046d7:	5b                   	pop    %rbx
  4046d8:	c9                   	leaveq 
  4046d9:	c3                   	retq   

00000000004046da <_D3std8typeinfo7ti_char10TypeInfo_a7getHashMFPvZm>:

    hash_t getHash(void *p)
  4046da:	55                   	push   %rbp
  4046db:	48 89 e5             	mov    %rsp,%rbp
  4046de:	48 83 ec 10          	sub    $0x10,%rsp
  4046e2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4046e6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4046ea:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4046ee:	e8 89 4c 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(char *)p;
  4046f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4046f7:	0f b6 00             	movzbl (%rax),%eax
  4046fa:	0f b6 c0             	movzbl %al,%eax
    }
  4046fd:	c9                   	leaveq 
  4046fe:	c3                   	retq   

00000000004046ff <_D3std8typeinfo7ti_char10TypeInfo_a6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4046ff:	55                   	push   %rbp
  404700:	48 89 e5             	mov    %rsp,%rbp
  404703:	48 83 ec 20          	sub    $0x20,%rsp
  404707:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40470b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40470f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404713:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404717:	e8 60 4c 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(char *)p1 == *cast(char *)p2;
  40471c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404720:	0f b6 10             	movzbl (%rax),%edx
  404723:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404727:	0f b6 00             	movzbl (%rax),%eax
  40472a:	38 c2                	cmp    %al,%dl
  40472c:	0f 94 c0             	sete   %al
  40472f:	0f b6 c0             	movzbl %al,%eax
    }
  404732:	c9                   	leaveq 
  404733:	c3                   	retq   

0000000000404734 <_D3std8typeinfo7ti_char10TypeInfo_a7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  404734:	55                   	push   %rbp
  404735:	48 89 e5             	mov    %rsp,%rbp
  404738:	48 83 ec 20          	sub    $0x20,%rsp
  40473c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404740:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404744:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404748:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40474c:	e8 2b 4c 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(char *)p1 - *cast(char *)p2;
  404751:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404755:	0f b6 00             	movzbl (%rax),%eax
  404758:	0f b6 d0             	movzbl %al,%edx
  40475b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40475f:	0f b6 00             	movzbl (%rax),%eax
  404762:	0f b6 c0             	movzbl %al,%eax
  404765:	89 d1                	mov    %edx,%ecx
  404767:	29 c1                	sub    %eax,%ecx
  404769:	89 c8                	mov    %ecx,%eax
    }
  40476b:	c9                   	leaveq 
  40476c:	c3                   	retq   

000000000040476d <_D3std8typeinfo7ti_char10TypeInfo_a5tsizeMFZm>:

    size_t tsize()
  40476d:	55                   	push   %rbp
  40476e:	48 89 e5             	mov    %rsp,%rbp
  404771:	48 83 ec 10          	sub    $0x10,%rsp
  404775:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404779:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40477d:	e8 fa 4b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return char.sizeof;
  404782:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  404787:	c9                   	leaveq 
  404788:	c3                   	retq   

0000000000404789 <_D3std8typeinfo7ti_char10TypeInfo_a4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  404789:	55                   	push   %rbp
  40478a:	48 89 e5             	mov    %rsp,%rbp
  40478d:	48 83 ec 30          	sub    $0x30,%rsp
  404791:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404795:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  404799:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40479d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4047a1:	e8 d6 4b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	char t;
  4047a6:	c6 45 ff ff          	movb   $0xff,-0x1(%rbp)

	t = *cast(char *)p1;
  4047aa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4047ae:	0f b6 00             	movzbl (%rax),%eax
  4047b1:	88 45 ff             	mov    %al,-0x1(%rbp)
	*cast(char *)p1 = *cast(char *)p2;
  4047b4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4047b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4047bc:	0f b6 00             	movzbl (%rax),%eax
  4047bf:	88 02                	mov    %al,(%rdx)
	*cast(char *)p2 = t;
  4047c1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4047c5:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  4047c9:	88 02                	mov    %al,(%rdx)
    }
  4047cb:	c9                   	leaveq 
  4047cc:	c3                   	retq   

00000000004047cd <_D3std8typeinfo7ti_char10TypeInfo_a4initMFZAv>:

    void[] init()
  4047cd:	55                   	push   %rbp
  4047ce:	48 89 e5             	mov    %rsp,%rbp
  4047d1:	53                   	push   %rbx
  4047d2:	48 83 ec 28          	sub    $0x28,%rsp
  4047d6:	48 89 fb             	mov    %rdi,%rbx
  4047d9:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  4047dd:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4047e1:	e8 96 4b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {	static char c;

	return (cast(char *)&c)[0 .. 1];
  4047e6:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  4047ed:	00 
  4047ee:	48 c7 45 e8 20 af 41 	movq   $0x41af20,-0x18(%rbp)
  4047f5:	00 
  4047f6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4047fa:	48 89 03             	mov    %rax,(%rbx)
  4047fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404801:	48 89 43 08          	mov    %rax,0x8(%rbx)
    }
  404805:	48 89 d8             	mov    %rbx,%rax
  404808:	48 83 c4 28          	add    $0x28,%rsp
  40480c:	5b                   	pop    %rbx
  40480d:	c9                   	leaveq 
  40480e:	c3                   	retq   
  40480f:	90                   	nop    

0000000000404810 <_D3std8typeinfo8ti_creal10TypeInfo_c8toStringMFZAa>:

module std.typeinfo.ti_creal;

class TypeInfo_c : TypeInfo
{
    char[] toString() { return "creal"; }
  404810:	55                   	push   %rbp
  404811:	48 89 e5             	mov    %rsp,%rbp
  404814:	53                   	push   %rbx
  404815:	48 83 ec 08          	sub    $0x8,%rsp
  404819:	48 89 fb             	mov    %rdi,%rbx
  40481c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404820:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  404824:	e8 53 4b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  404829:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  404830:	48 c7 43 08 20 0a 41 	movq   $0x410a20,0x8(%rbx)
  404837:	00 
  404838:	48 89 d8             	mov    %rbx,%rax
  40483b:	48 83 c4 08          	add    $0x8,%rsp
  40483f:	5b                   	pop    %rbx
  404840:	c9                   	leaveq 
  404841:	c3                   	retq   

0000000000404842 <_D3std8typeinfo8ti_creal10TypeInfo_c7getHashMFPvZm>:

    hash_t getHash(void *p)
  404842:	55                   	push   %rbp
  404843:	48 89 e5             	mov    %rsp,%rbp
  404846:	48 83 ec 10          	sub    $0x10,%rsp
  40484a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40484e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404852:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404856:	e8 21 4b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cast(uint *)p)[0] + (cast(uint *)p)[1] +
  40485b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40485f:	b8 00 00 00 00       	mov    $0x0,%eax
  404864:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  404868:	8b 08                	mov    (%rax),%ecx
  40486a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40486e:	b8 04 00 00 00       	mov    $0x4,%eax
  404873:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  404877:	8b 00                	mov    (%rax),%eax
  404879:	01 c1                	add    %eax,%ecx
  40487b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40487f:	b8 08 00 00 00       	mov    $0x8,%eax
  404884:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  404888:	8b 00                	mov    (%rax),%eax
  40488a:	01 c1                	add    %eax,%ecx
  40488c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  404890:	b8 0c 00 00 00       	mov    $0xc,%eax
  404895:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  404899:	8b 00                	mov    (%rax),%eax
  40489b:	01 c1                	add    %eax,%ecx
  40489d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4048a1:	b8 10 00 00 00       	mov    $0x10,%eax
  4048a6:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  4048aa:	8b 00                	mov    (%rax),%eax
  4048ac:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  4048af:	89 c0                	mov    %eax,%eax
	       (cast(uint *)p)[2] + (cast(uint *)p)[3] +
	       (cast(uint *)p)[4];
    }
  4048b1:	c9                   	leaveq 
  4048b2:	c3                   	retq   

00000000004048b3 <_D3std8typeinfo8ti_creal10TypeInfo_c7_equalsFccZi>:

    static int _equals(creal f1, creal f2)
  4048b3:	55                   	push   %rbp
  4048b4:	48 89 e5             	mov    %rsp,%rbp
    {
	return f1 == f2;
  4048b7:	db 6d 10             	fldt   0x10(%rbp)
  4048ba:	db 6d 20             	fldt   0x20(%rbp)
  4048bd:	db 6d 30             	fldt   0x30(%rbp)
  4048c0:	db 6d 40             	fldt   0x40(%rbp)
  4048c3:	d9 cb                	fxch   %st(3)
  4048c5:	df e9                	fucomip %st(1),%st
  4048c7:	df c0                	ffreep %st(0)
  4048c9:	0f 94 c1             	sete   %cl
  4048cc:	0f 9b c0             	setnp  %al
  4048cf:	21 c1                	and    %eax,%ecx
  4048d1:	df e9                	fucomip %st(1),%st
  4048d3:	df c0                	ffreep %st(0)
  4048d5:	0f 94 c0             	sete   %al
  4048d8:	0f 9b c2             	setnp  %dl
  4048db:	21 d0                	and    %edx,%eax
  4048dd:	21 c8                	and    %ecx,%eax
  4048df:	0f b6 c0             	movzbl %al,%eax
    }
  4048e2:	c9                   	leaveq 
  4048e3:	c3                   	retq   

00000000004048e4 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi>:

    static int _compare(creal f1, creal f2)
  4048e4:	55                   	push   %rbp
  4048e5:	48 89 e5             	mov    %rsp,%rbp
    {   int result;
  4048e8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	if (f1.re < f2.re)
  4048ef:	db 6d 10             	fldt   0x10(%rbp)
  4048f2:	db 6d 30             	fldt   0x30(%rbp)
  4048f5:	df e9                	fucomip %st(1),%st
  4048f7:	df c0                	ffreep %st(0)
  4048f9:	77 02                	ja     4048fd <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x19>
  4048fb:	eb 09                	jmp    404906 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x22>
	    result = -1;
  4048fd:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  404904:	eb 50                	jmp    404956 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x72>
	else if (f1.re > f2.re)
  404906:	db 6d 10             	fldt   0x10(%rbp)
  404909:	db 6d 30             	fldt   0x30(%rbp)
  40490c:	d9 c9                	fxch   %st(1)
  40490e:	df e9                	fucomip %st(1),%st
  404910:	df c0                	ffreep %st(0)
  404912:	77 02                	ja     404916 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x32>
  404914:	eb 09                	jmp    40491f <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x3b>
	    result = 1;
  404916:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  40491d:	eb 37                	jmp    404956 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x72>
	else if (f1.im < f2.im)
  40491f:	db 6d 20             	fldt   0x20(%rbp)
  404922:	db 6d 40             	fldt   0x40(%rbp)
  404925:	df e9                	fucomip %st(1),%st
  404927:	df c0                	ffreep %st(0)
  404929:	77 02                	ja     40492d <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x49>
  40492b:	eb 09                	jmp    404936 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x52>
	    result = -1;
  40492d:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  404934:	eb 20                	jmp    404956 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x72>
	else if (f1.im > f2.im)
  404936:	db 6d 20             	fldt   0x20(%rbp)
  404939:	db 6d 40             	fldt   0x40(%rbp)
  40493c:	d9 c9                	fxch   %st(1)
  40493e:	df e9                	fucomip %st(1),%st
  404940:	df c0                	ffreep %st(0)
  404942:	77 02                	ja     404946 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x62>
  404944:	eb 09                	jmp    40494f <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x6b>
	    result = 1;
  404946:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  40494d:	eb 07                	jmp    404956 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x72>
	else
	    result = 0;
  40494f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
        return result;
  404956:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
  404959:	c9                   	leaveq 
  40495a:	c3                   	retq   

000000000040495b <_D3std8typeinfo8ti_creal10TypeInfo_c6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  40495b:	55                   	push   %rbp
  40495c:	48 89 e5             	mov    %rsp,%rbp
  40495f:	48 83 ec 60          	sub    $0x60,%rsp
  404963:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404967:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40496b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40496f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404973:	e8 04 4a 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(creal *)p1, *cast(creal *)p2);
  404978:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40497c:	4c 8b 00             	mov    (%rax),%r8
  40497f:	44 8b 48 08          	mov    0x8(%rax),%r9d
  404983:	4c 8b 50 10          	mov    0x10(%rax),%r10
  404987:	44 8b 58 18          	mov    0x18(%rax),%r11d
  40498b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40498f:	48 8b 10             	mov    (%rax),%rdx
  404992:	8b 48 08             	mov    0x8(%rax),%ecx
  404995:	48 8b 70 10          	mov    0x10(%rax),%rsi
  404999:	8b 78 18             	mov    0x18(%rax),%edi
  40499c:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  4049a1:	44 89 4c 24 28       	mov    %r9d,0x28(%rsp)
  4049a6:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  4049ab:	44 89 5c 24 38       	mov    %r11d,0x38(%rsp)
  4049b0:	48 89 14 24          	mov    %rdx,(%rsp)
  4049b4:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
  4049b8:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  4049bd:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  4049c1:	e8 ed fe ff ff       	callq  4048b3 <_D3std8typeinfo8ti_creal10TypeInfo_c7_equalsFccZi>
    }
  4049c6:	c9                   	leaveq 
  4049c7:	c3                   	retq   

00000000004049c8 <_D3std8typeinfo8ti_creal10TypeInfo_c7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4049c8:	55                   	push   %rbp
  4049c9:	48 89 e5             	mov    %rsp,%rbp
  4049cc:	48 83 ec 60          	sub    $0x60,%rsp
  4049d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4049d4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4049d8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4049dc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4049e0:	e8 97 49 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(creal *)p1, *cast(creal *)p2);
  4049e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4049e9:	4c 8b 00             	mov    (%rax),%r8
  4049ec:	44 8b 48 08          	mov    0x8(%rax),%r9d
  4049f0:	4c 8b 50 10          	mov    0x10(%rax),%r10
  4049f4:	44 8b 58 18          	mov    0x18(%rax),%r11d
  4049f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4049fc:	48 8b 10             	mov    (%rax),%rdx
  4049ff:	8b 48 08             	mov    0x8(%rax),%ecx
  404a02:	48 8b 70 10          	mov    0x10(%rax),%rsi
  404a06:	8b 78 18             	mov    0x18(%rax),%edi
  404a09:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  404a0e:	44 89 4c 24 28       	mov    %r9d,0x28(%rsp)
  404a13:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  404a18:	44 89 5c 24 38       	mov    %r11d,0x38(%rsp)
  404a1d:	48 89 14 24          	mov    %rdx,(%rsp)
  404a21:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
  404a25:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  404a2a:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  404a2e:	e8 b1 fe ff ff       	callq  4048e4 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi>
    }
  404a33:	c9                   	leaveq 
  404a34:	c3                   	retq   

0000000000404a35 <_D3std8typeinfo8ti_creal10TypeInfo_c5tsizeMFZm>:

    size_t tsize()
  404a35:	55                   	push   %rbp
  404a36:	48 89 e5             	mov    %rsp,%rbp
  404a39:	48 83 ec 10          	sub    $0x10,%rsp
  404a3d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404a41:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404a45:	e8 32 49 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return creal.sizeof;
  404a4a:	b8 20 00 00 00       	mov    $0x20,%eax
    }
  404a4f:	c9                   	leaveq 
  404a50:	c3                   	retq   

0000000000404a51 <_D3std8typeinfo8ti_creal10TypeInfo_c4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  404a51:	55                   	push   %rbp
  404a52:	48 89 e5             	mov    %rsp,%rbp
  404a55:	53                   	push   %rbx
  404a56:	48 83 ec 48          	sub    $0x48,%rsp
  404a5a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  404a5e:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  404a62:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  404a66:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  404a6a:	e8 0d 49 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	creal t;
  404a6f:	48 b8 00 00 00 00 00 	mov    $0xc000000000000000,%rax
  404a76:	00 00 c0 
  404a79:	ba ff 7f 00 00       	mov    $0x7fff,%edx
  404a7e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  404a82:	89 55 d8             	mov    %edx,-0x28(%rbp)
  404a85:	48 b8 00 00 00 00 00 	mov    $0xc000000000000000,%rax
  404a8c:	00 00 c0 
  404a8f:	ba ff 7f 00 00       	mov    $0x7fff,%edx
  404a94:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  404a98:	89 55 e8             	mov    %edx,-0x18(%rbp)

	t = *cast(creal *)p1;
  404a9b:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  404a9f:	48 8b 01             	mov    (%rcx),%rax
  404aa2:	8b 51 08             	mov    0x8(%rcx),%edx
  404aa5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  404aa9:	89 55 d8             	mov    %edx,-0x28(%rbp)
  404aac:	48 8b 41 10          	mov    0x10(%rcx),%rax
  404ab0:	8b 51 18             	mov    0x18(%rcx),%edx
  404ab3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  404ab7:	89 55 e8             	mov    %edx,-0x18(%rbp)
	*cast(creal *)p1 = *cast(creal *)p2;
  404aba:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  404abe:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  404ac2:	48 8b 01             	mov    (%rcx),%rax
  404ac5:	8b 51 08             	mov    0x8(%rcx),%edx
  404ac8:	8b 59 18             	mov    0x18(%rcx),%ebx
  404acb:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  404acf:	48 89 06             	mov    %rax,(%rsi)
  404ad2:	89 56 08             	mov    %edx,0x8(%rsi)
  404ad5:	48 89 4e 10          	mov    %rcx,0x10(%rsi)
  404ad9:	89 5e 18             	mov    %ebx,0x18(%rsi)
	*cast(creal *)p2 = t;
  404adc:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  404ae0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  404ae4:	8b 55 d8             	mov    -0x28(%rbp),%edx
  404ae7:	48 89 01             	mov    %rax,(%rcx)
  404aea:	89 51 08             	mov    %edx,0x8(%rcx)
  404aed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  404af1:	8b 55 e8             	mov    -0x18(%rbp),%edx
  404af4:	48 89 41 10          	mov    %rax,0x10(%rcx)
  404af8:	89 51 18             	mov    %edx,0x18(%rcx)
    }
  404afb:	48 83 c4 48          	add    $0x48,%rsp
  404aff:	5b                   	pop    %rbx
  404b00:	c9                   	leaveq 
  404b01:	c3                   	retq   

0000000000404b02 <_D3std8typeinfo8ti_creal10TypeInfo_c4initMFZAv>:

    void[] init()
  404b02:	55                   	push   %rbp
  404b03:	48 89 e5             	mov    %rsp,%rbp
  404b06:	53                   	push   %rbx
  404b07:	48 83 ec 28          	sub    $0x28,%rsp
  404b0b:	48 89 fb             	mov    %rdi,%rbx
  404b0e:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  404b12:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  404b16:	e8 61 48 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {	static creal r;

	return (cast(creal *)&r)[0 .. 1];
  404b1b:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  404b22:	00 
  404b23:	48 c7 45 e8 e0 af 41 	movq   $0x41afe0,-0x18(%rbp)
  404b2a:	00 
  404b2b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  404b2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404b33:	49 89 c0             	mov    %rax,%r8
  404b36:	ba 20 00 00 00       	mov    $0x20,%edx
  404b3b:	be 01 00 00 00       	mov    $0x1,%esi
  404b40:	48 89 df             	mov    %rbx,%rdi
  404b43:	e8 d7 8a 00 00       	callq  40d61f <_d_arraycast>
    }
  404b48:	48 89 d8             	mov    %rbx,%rax
  404b4b:	48 83 c4 28          	add    $0x28,%rsp
  404b4f:	5b                   	pop    %rbx
  404b50:	c9                   	leaveq 
  404b51:	c3                   	retq   
  404b52:	90                   	nop    
  404b53:	90                   	nop    

0000000000404b54 <_D3std8typeinfo8ti_dchar10TypeInfo_w8toStringMFZAa>:

module std.typeinfo.ti_dchar;

class TypeInfo_w : TypeInfo
{
    char[] toString() { return "dchar"; }
  404b54:	55                   	push   %rbp
  404b55:	48 89 e5             	mov    %rsp,%rbp
  404b58:	53                   	push   %rbx
  404b59:	48 83 ec 08          	sub    $0x8,%rsp
  404b5d:	48 89 fb             	mov    %rdi,%rbx
  404b60:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404b64:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  404b68:	e8 0f 48 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  404b6d:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  404b74:	48 c7 43 08 e0 0a 41 	movq   $0x410ae0,0x8(%rbx)
  404b7b:	00 
  404b7c:	48 89 d8             	mov    %rbx,%rax
  404b7f:	48 83 c4 08          	add    $0x8,%rsp
  404b83:	5b                   	pop    %rbx
  404b84:	c9                   	leaveq 
  404b85:	c3                   	retq   

0000000000404b86 <_D3std8typeinfo8ti_dchar10TypeInfo_w7getHashMFPvZm>:

    hash_t getHash(void *p)
  404b86:	55                   	push   %rbp
  404b87:	48 89 e5             	mov    %rsp,%rbp
  404b8a:	48 83 ec 10          	sub    $0x10,%rsp
  404b8e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404b92:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404b96:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404b9a:	e8 dd 47 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(dchar *)p;
  404b9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404ba3:	8b 00                	mov    (%rax),%eax
  404ba5:	89 c0                	mov    %eax,%eax
    }
  404ba7:	c9                   	leaveq 
  404ba8:	c3                   	retq   

0000000000404ba9 <_D3std8typeinfo8ti_dchar10TypeInfo_w6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  404ba9:	55                   	push   %rbp
  404baa:	48 89 e5             	mov    %rsp,%rbp
  404bad:	48 83 ec 20          	sub    $0x20,%rsp
  404bb1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404bb5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404bb9:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404bbd:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404bc1:	e8 b6 47 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(dchar *)p1 == *cast(dchar *)p2;
  404bc6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404bca:	8b 10                	mov    (%rax),%edx
  404bcc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404bd0:	8b 00                	mov    (%rax),%eax
  404bd2:	39 c2                	cmp    %eax,%edx
  404bd4:	0f 94 c0             	sete   %al
  404bd7:	0f b6 c0             	movzbl %al,%eax
    }
  404bda:	c9                   	leaveq 
  404bdb:	c3                   	retq   

0000000000404bdc <_D3std8typeinfo8ti_dchar10TypeInfo_w7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  404bdc:	55                   	push   %rbp
  404bdd:	48 89 e5             	mov    %rsp,%rbp
  404be0:	48 83 ec 20          	sub    $0x20,%rsp
  404be4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404be8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404bec:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404bf0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404bf4:	e8 83 47 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(dchar *)p1 - *cast(dchar *)p2;
  404bf9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404bfd:	8b 10                	mov    (%rax),%edx
  404bff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404c03:	8b 00                	mov    (%rax),%eax
  404c05:	89 d1                	mov    %edx,%ecx
  404c07:	29 c1                	sub    %eax,%ecx
  404c09:	89 c8                	mov    %ecx,%eax
    }
  404c0b:	c9                   	leaveq 
  404c0c:	c3                   	retq   

0000000000404c0d <_D3std8typeinfo8ti_dchar10TypeInfo_w5tsizeMFZm>:

    size_t tsize()
  404c0d:	55                   	push   %rbp
  404c0e:	48 89 e5             	mov    %rsp,%rbp
  404c11:	48 83 ec 10          	sub    $0x10,%rsp
  404c15:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404c19:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404c1d:	e8 5a 47 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return dchar.sizeof;
  404c22:	b8 04 00 00 00       	mov    $0x4,%eax
    }
  404c27:	c9                   	leaveq 
  404c28:	c3                   	retq   

0000000000404c29 <_D3std8typeinfo8ti_dchar10TypeInfo_w4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  404c29:	55                   	push   %rbp
  404c2a:	48 89 e5             	mov    %rsp,%rbp
  404c2d:	48 83 ec 30          	sub    $0x30,%rsp
  404c31:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404c35:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  404c39:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  404c3d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  404c41:	e8 36 47 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	dchar t;
  404c46:	c7 45 fc ff ff 00 00 	movl   $0xffff,-0x4(%rbp)

	t = *cast(dchar *)p1;
  404c4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  404c51:	8b 00                	mov    (%rax),%eax
  404c53:	89 45 fc             	mov    %eax,-0x4(%rbp)
	*cast(dchar *)p1 = *cast(dchar *)p2;
  404c56:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  404c5a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404c5e:	8b 00                	mov    (%rax),%eax
  404c60:	89 02                	mov    %eax,(%rdx)
	*cast(dchar *)p2 = t;
  404c62:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  404c66:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404c69:	89 02                	mov    %eax,(%rdx)
    }
  404c6b:	c9                   	leaveq 
  404c6c:	c3                   	retq   

0000000000404c6d <_D3std8typeinfo8ti_dchar10TypeInfo_w4initMFZAv>:

    void[] init()
  404c6d:	55                   	push   %rbp
  404c6e:	48 89 e5             	mov    %rsp,%rbp
  404c71:	53                   	push   %rbx
  404c72:	48 83 ec 28          	sub    $0x28,%rsp
  404c76:	48 89 fb             	mov    %rdi,%rbx
  404c79:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  404c7d:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  404c81:	e8 f6 46 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {	static dchar c;

	return (cast(dchar *)&c)[0 .. 1];
  404c86:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  404c8d:	00 
  404c8e:	48 c7 45 e8 a0 b0 41 	movq   $0x41b0a0,-0x18(%rbp)
  404c95:	00 
  404c96:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  404c9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404c9e:	49 89 c0             	mov    %rax,%r8
  404ca1:	ba 04 00 00 00       	mov    $0x4,%edx
  404ca6:	be 01 00 00 00       	mov    $0x1,%esi
  404cab:	48 89 df             	mov    %rbx,%rdi
  404cae:	e8 6c 89 00 00       	callq  40d61f <_d_arraycast>
    }
  404cb3:	48 89 d8             	mov    %rbx,%rax
  404cb6:	48 83 c4 28          	add    $0x28,%rsp
  404cba:	5b                   	pop    %rbx
  404cbb:	c9                   	leaveq 
  404cbc:	c3                   	retq   
  404cbd:	90                   	nop    
  404cbe:	90                   	nop    
  404cbf:	90                   	nop    

0000000000404cc0 <_D3std8typeinfo11ti_delegate10TypeInfo_D7getHashMFPvZm>:

alias void delegate(int) dg;

class TypeInfo_D : TypeInfo
{
    hash_t getHash(void *p)
  404cc0:	55                   	push   %rbp
  404cc1:	48 89 e5             	mov    %rsp,%rbp
  404cc4:	48 83 ec 20          	sub    $0x20,%rsp
  404cc8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404ccc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  404cd0:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  404cd4:	e8 a3 46 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {	long l = *cast(long *)p;
  404cd9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  404cdd:	48 8b 00             	mov    (%rax),%rax
  404ce0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return cast(uint)(l + (l >> 32));
  404ce4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404ce8:	89 c2                	mov    %eax,%edx
  404cea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404cee:	48 c1 f8 20          	sar    $0x20,%rax
  404cf2:	8d 04 02             	lea    (%rdx,%rax,1),%eax
  404cf5:	89 c0                	mov    %eax,%eax
    }
  404cf7:	c9                   	leaveq 
  404cf8:	c3                   	retq   

0000000000404cf9 <_D3std8typeinfo11ti_delegate10TypeInfo_D6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  404cf9:	55                   	push   %rbp
  404cfa:	48 89 e5             	mov    %rsp,%rbp
  404cfd:	48 83 ec 30          	sub    $0x30,%rsp
  404d01:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404d05:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404d09:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404d0d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404d11:	e8 66 46 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(dg *)p1 == *cast(dg *)p2;
  404d16:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  404d1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404d1e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  404d22:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  404d26:	48 c7 45 d0 10 00 00 	movq   $0x10,-0x30(%rbp)
  404d2d:	00 
  404d2e:	fc                   	cld    
  404d2f:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  404d33:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  404d37:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  404d3b:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  404d3d:	0f 97 c2             	seta   %dl
  404d40:	0f 92 c0             	setb   %al
  404d43:	89 d1                	mov    %edx,%ecx
  404d45:	28 c1                	sub    %al,%cl
  404d47:	89 c8                	mov    %ecx,%eax
  404d49:	0f be c0             	movsbl %al,%eax
  404d4c:	85 c0                	test   %eax,%eax
  404d4e:	0f 94 c0             	sete   %al
  404d51:	0f b6 c0             	movzbl %al,%eax
    }
  404d54:	c9                   	leaveq 
  404d55:	c3                   	retq   

0000000000404d56 <_D3std8typeinfo11ti_delegate10TypeInfo_D5tsizeMFZm>:

    size_t tsize()
  404d56:	55                   	push   %rbp
  404d57:	48 89 e5             	mov    %rsp,%rbp
  404d5a:	48 83 ec 10          	sub    $0x10,%rsp
  404d5e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404d62:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404d66:	e8 11 46 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return dg.sizeof;
  404d6b:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  404d70:	c9                   	leaveq 
  404d71:	c3                   	retq   

0000000000404d72 <_D3std8typeinfo11ti_delegate10TypeInfo_D4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  404d72:	55                   	push   %rbp
  404d73:	48 89 e5             	mov    %rsp,%rbp
  404d76:	48 83 ec 30          	sub    $0x30,%rsp
  404d7a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404d7e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  404d82:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  404d86:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  404d8a:	e8 ed 45 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	dg t;
  404d8f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  404d96:	00 
  404d97:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  404d9e:	00 

	t = *cast(dg *)p1;
  404d9f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  404da3:	48 8b 02             	mov    (%rdx),%rax
  404da6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  404daa:	48 8b 42 08          	mov    0x8(%rdx),%rax
  404dae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(dg *)p1 = *cast(dg *)p2;
  404db2:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  404db6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  404dba:	48 8b 02             	mov    (%rdx),%rax
  404dbd:	48 89 01             	mov    %rax,(%rcx)
  404dc0:	48 8b 42 08          	mov    0x8(%rdx),%rax
  404dc4:	48 89 41 08          	mov    %rax,0x8(%rcx)
	*cast(dg *)p2 = t;
  404dc8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  404dcc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404dd0:	48 89 02             	mov    %rax,(%rdx)
  404dd3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404dd7:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
  404ddb:	c9                   	leaveq 
  404ddc:	c3                   	retq   

0000000000404ddd <_D3std8typeinfo11ti_delegate10TypeInfo_D5flagsMFZk>:

    uint flags()
  404ddd:	55                   	push   %rbp
  404dde:	48 89 e5             	mov    %rsp,%rbp
  404de1:	48 83 ec 10          	sub    $0x10,%rsp
  404de5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404de9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404ded:	e8 8a 45 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  404df2:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  404df7:	c9                   	leaveq 
  404df8:	c3                   	retq   
  404df9:	90                   	nop    
  404dfa:	90                   	nop    
  404dfb:	90                   	nop    

0000000000404dfc <_D3std8typeinfo9ti_double10TypeInfo_d8toStringMFZAa>:
import kernel.core.system;
//private import std.math;

class TypeInfo_d : TypeInfo
{
    char[] toString() { return "double"; }
  404dfc:	55                   	push   %rbp
  404dfd:	48 89 e5             	mov    %rsp,%rbp
  404e00:	53                   	push   %rbx
  404e01:	48 83 ec 08          	sub    $0x8,%rsp
  404e05:	48 89 fb             	mov    %rdi,%rbx
  404e08:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404e0c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  404e10:	e8 67 45 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  404e15:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  404e1c:	48 c7 43 08 40 0c 41 	movq   $0x410c40,0x8(%rbx)
  404e23:	00 
  404e24:	48 89 d8             	mov    %rbx,%rax
  404e27:	48 83 c4 08          	add    $0x8,%rsp
  404e2b:	5b                   	pop    %rbx
  404e2c:	c9                   	leaveq 
  404e2d:	c3                   	retq   

0000000000404e2e <_D3std8typeinfo9ti_double10TypeInfo_d7getHashMFPvZm>:

    hash_t getHash(void *p)
  404e2e:	55                   	push   %rbp
  404e2f:	48 89 e5             	mov    %rsp,%rbp
  404e32:	48 83 ec 10          	sub    $0x10,%rsp
  404e36:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404e3a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404e3e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404e42:	e8 35 45 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cast(uint *)p)[0] + (cast(uint *)p)[1];
  404e47:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  404e4b:	b8 00 00 00 00       	mov    $0x0,%eax
  404e50:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  404e54:	8b 08                	mov    (%rax),%ecx
  404e56:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  404e5a:	b8 04 00 00 00       	mov    $0x4,%eax
  404e5f:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  404e63:	8b 00                	mov    (%rax),%eax
  404e65:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  404e68:	89 c0                	mov    %eax,%eax
    }
  404e6a:	c9                   	leaveq 
  404e6b:	c3                   	retq   

0000000000404e6c <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi>:

    static int _equals(double f1, double f2)
  404e6c:	55                   	push   %rbp
  404e6d:	48 89 e5             	mov    %rsp,%rbp
  404e70:	48 83 ec 30          	sub    $0x30,%rsp
  404e74:	f2 0f 11 45 f8       	movsd  %xmm0,-0x8(%rbp)
  404e79:	f2 0f 11 4d f0       	movsd  %xmm1,-0x10(%rbp)
    {
	return f1 == f2 ||
  404e7e:	66 0f 12 45 f8       	movlpd -0x8(%rbp),%xmm0
  404e83:	66 0f 2e 45 f0       	ucomisd -0x10(%rbp),%xmm0
  404e88:	7a 02                	jp     404e8c <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi+0x20>
  404e8a:	74 1e                	je     404eaa <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi+0x3e>
  404e8c:	dd 45 f8             	fldl   -0x8(%rbp)
  404e8f:	db 3c 24             	fstpt  (%rsp)
  404e92:	e8 5d 8b 00 00       	callq  40d9f4 <_D6kernel4core6system5isnanFeZi>
  404e97:	85 c0                	test   %eax,%eax
  404e99:	74 15                	je     404eb0 <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi+0x44>
  404e9b:	dd 45 f0             	fldl   -0x10(%rbp)
  404e9e:	db 3c 24             	fstpt  (%rsp)
  404ea1:	e8 4e 8b 00 00       	callq  40d9f4 <_D6kernel4core6system5isnanFeZi>
  404ea6:	85 c0                	test   %eax,%eax
  404ea8:	74 06                	je     404eb0 <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi+0x44>
  404eaa:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  404eae:	eb 04                	jmp    404eb4 <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi+0x48>
  404eb0:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  404eb4:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
		(isnan(f1) && isnan(f2));
    }
  404eb8:	c9                   	leaveq 
  404eb9:	c3                   	retq   

0000000000404eba <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi>:

    static int _compare(double d1, double d2)
  404eba:	55                   	push   %rbp
  404ebb:	48 89 e5             	mov    %rsp,%rbp
  404ebe:	48 83 ec 30          	sub    $0x30,%rsp
  404ec2:	f2 0f 11 45 f8       	movsd  %xmm0,-0x8(%rbp)
  404ec7:	f2 0f 11 4d f0       	movsd  %xmm1,-0x10(%rbp)
    {
	if (d1 !<>= d2)		// if either are NaN
  404ecc:	66 0f 12 45 f8       	movlpd -0x8(%rbp),%xmm0
  404ed1:	66 0f 2e 45 f0       	ucomisd -0x10(%rbp),%xmm0
  404ed6:	0f 9a c0             	setp   %al
  404ed9:	84 c0                	test   %al,%al
  404edb:	74 39                	je     404f16 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x5c>
	{
	    if (isnan(d1))
  404edd:	dd 45 f8             	fldl   -0x8(%rbp)
  404ee0:	db 3c 24             	fstpt  (%rsp)
  404ee3:	e8 0c 8b 00 00       	callq  40d9f4 <_D6kernel4core6system5isnanFeZi>
  404ee8:	85 c0                	test   %eax,%eax
  404eea:	74 21                	je     404f0d <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x53>
	    {	if (isnan(d2))
  404eec:	dd 45 f0             	fldl   -0x10(%rbp)
  404eef:	db 3c 24             	fstpt  (%rsp)
  404ef2:	e8 fd 8a 00 00       	callq  40d9f4 <_D6kernel4core6system5isnanFeZi>
  404ef7:	85 c0                	test   %eax,%eax
  404ef9:	74 09                	je     404f04 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x4a>
		    return 0;
  404efb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  404f02:	eb 59                	jmp    404f5d <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0xa3>
		return -1;
  404f04:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  404f0b:	eb 50                	jmp    404f5d <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0xa3>
	    }
	    return 1;
  404f0d:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  404f14:	eb 47                	jmp    404f5d <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0xa3>
	}
	return (d1 == d2) ? 0 : ((d1 < d2) ? -1 : 1);
  404f16:	66 0f 12 45 f8       	movlpd -0x8(%rbp),%xmm0
  404f1b:	66 0f 2e 45 f0       	ucomisd -0x10(%rbp),%xmm0
  404f20:	7a 02                	jp     404f24 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x6a>
  404f22:	74 02                	je     404f26 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x6c>
  404f24:	eb 09                	jmp    404f2f <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x75>
  404f26:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  404f2d:	eb 28                	jmp    404f57 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x9d>
  404f2f:	66 0f 12 4d f8       	movlpd -0x8(%rbp),%xmm1
  404f34:	66 0f 12 45 f0       	movlpd -0x10(%rbp),%xmm0
  404f39:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  404f3d:	77 02                	ja     404f41 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x87>
  404f3f:	eb 09                	jmp    404f4a <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x90>
  404f41:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rbp)
  404f48:	eb 07                	jmp    404f51 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x97>
  404f4a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  404f51:	8b 45 ec             	mov    -0x14(%rbp),%eax
  404f54:	89 45 e8             	mov    %eax,-0x18(%rbp)
  404f57:	8b 45 e8             	mov    -0x18(%rbp),%eax
  404f5a:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  404f5d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    }
  404f60:	c9                   	leaveq 
  404f61:	c3                   	retq   

0000000000404f62 <_D3std8typeinfo9ti_double10TypeInfo_d6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  404f62:	55                   	push   %rbp
  404f63:	48 89 e5             	mov    %rsp,%rbp
  404f66:	48 83 ec 20          	sub    $0x20,%rsp
  404f6a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404f6e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404f72:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404f76:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404f7a:	e8 fd 43 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(double *)p1, *cast(double *)p2);
  404f7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404f83:	48 8b 10             	mov    (%rax),%rdx
  404f86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404f8a:	48 8b 00             	mov    (%rax),%rax
  404f8d:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  404f91:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  404f96:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  404f9a:	66 0f 12 45 e0       	movlpd -0x20(%rbp),%xmm0
  404f9f:	e8 c8 fe ff ff       	callq  404e6c <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi>
    }
  404fa4:	c9                   	leaveq 
  404fa5:	c3                   	retq   

0000000000404fa6 <_D3std8typeinfo9ti_double10TypeInfo_d7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  404fa6:	55                   	push   %rbp
  404fa7:	48 89 e5             	mov    %rsp,%rbp
  404faa:	48 83 ec 20          	sub    $0x20,%rsp
  404fae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404fb2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404fb6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404fba:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404fbe:	e8 b9 43 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(double *)p1, *cast(double *)p2);
  404fc3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404fc7:	48 8b 10             	mov    (%rax),%rdx
  404fca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404fce:	48 8b 00             	mov    (%rax),%rax
  404fd1:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  404fd5:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  404fda:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  404fde:	66 0f 12 45 e0       	movlpd -0x20(%rbp),%xmm0
  404fe3:	e8 d2 fe ff ff       	callq  404eba <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi>
    }
  404fe8:	c9                   	leaveq 
  404fe9:	c3                   	retq   

0000000000404fea <_D3std8typeinfo9ti_double10TypeInfo_d5tsizeMFZm>:

    size_t tsize()
  404fea:	55                   	push   %rbp
  404feb:	48 89 e5             	mov    %rsp,%rbp
  404fee:	48 83 ec 10          	sub    $0x10,%rsp
  404ff2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404ff6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  404ffa:	e8 7d 43 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return double.sizeof;
  404fff:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  405004:	c9                   	leaveq 
  405005:	c3                   	retq   

0000000000405006 <_D3std8typeinfo9ti_double10TypeInfo_d4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  405006:	55                   	push   %rbp
  405007:	48 89 e5             	mov    %rsp,%rbp
  40500a:	48 83 ec 30          	sub    $0x30,%rsp
  40500e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405012:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405016:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40501a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40501e:	e8 59 43 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	double t;
  405023:	48 b8 00 00 00 00 00 	mov    $0x7ff8000000000000,%rax
  40502a:	00 f8 7f 
  40502d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	t = *cast(double *)p1;
  405031:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405035:	48 8b 00             	mov    (%rax),%rax
  405038:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(double *)p1 = *cast(double *)p2;
  40503c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405040:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405044:	48 8b 00             	mov    (%rax),%rax
  405047:	48 89 02             	mov    %rax,(%rdx)
	*cast(double *)p2 = t;
  40504a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40504e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405052:	48 89 02             	mov    %rax,(%rdx)
    }
  405055:	c9                   	leaveq 
  405056:	c3                   	retq   

0000000000405057 <_D3std8typeinfo9ti_double10TypeInfo_d4initMFZAv>:

    void[] init()
  405057:	55                   	push   %rbp
  405058:	48 89 e5             	mov    %rsp,%rbp
  40505b:	53                   	push   %rbx
  40505c:	48 83 ec 28          	sub    $0x28,%rsp
  405060:	48 89 fb             	mov    %rdi,%rbx
  405063:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  405067:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  40506b:	e8 0c 43 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {	static double r;

	return (cast(double *)&r)[0 .. 1];
  405070:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  405077:	00 
  405078:	48 c7 45 e8 00 b2 41 	movq   $0x41b200,-0x18(%rbp)
  40507f:	00 
  405080:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  405084:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405088:	49 89 c0             	mov    %rax,%r8
  40508b:	ba 08 00 00 00       	mov    $0x8,%edx
  405090:	be 01 00 00 00       	mov    $0x1,%esi
  405095:	48 89 df             	mov    %rbx,%rdi
  405098:	e8 82 85 00 00       	callq  40d61f <_d_arraycast>
    }
  40509d:	48 89 d8             	mov    %rbx,%rax
  4050a0:	48 83 c4 28          	add    $0x28,%rsp
  4050a4:	5b                   	pop    %rbx
  4050a5:	c9                   	leaveq 
  4050a6:	c3                   	retq   
  4050a7:	90                   	nop    

00000000004050a8 <_D3std8typeinfo8ti_float10TypeInfo_f8toStringMFZAa>:
import kernel.core.system;
//private import std.math;

class TypeInfo_f : TypeInfo
{
    char[] toString() { return "float"; }
  4050a8:	55                   	push   %rbp
  4050a9:	48 89 e5             	mov    %rsp,%rbp
  4050ac:	53                   	push   %rbx
  4050ad:	48 83 ec 08          	sub    $0x8,%rsp
  4050b1:	48 89 fb             	mov    %rdi,%rbx
  4050b4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4050b8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4050bc:	e8 bb 42 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  4050c1:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  4050c8:	48 c7 43 08 00 0d 41 	movq   $0x410d00,0x8(%rbx)
  4050cf:	00 
  4050d0:	48 89 d8             	mov    %rbx,%rax
  4050d3:	48 83 c4 08          	add    $0x8,%rsp
  4050d7:	5b                   	pop    %rbx
  4050d8:	c9                   	leaveq 
  4050d9:	c3                   	retq   

00000000004050da <_D3std8typeinfo8ti_float10TypeInfo_f7getHashMFPvZm>:

    hash_t getHash(void *p)
  4050da:	55                   	push   %rbp
  4050db:	48 89 e5             	mov    %rsp,%rbp
  4050de:	48 83 ec 10          	sub    $0x10,%rsp
  4050e2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4050e6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4050ea:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4050ee:	e8 89 42 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p;
  4050f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4050f7:	8b 00                	mov    (%rax),%eax
  4050f9:	89 c0                	mov    %eax,%eax
    }
  4050fb:	c9                   	leaveq 
  4050fc:	c3                   	retq   

00000000004050fd <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi>:

    static int _equals(float f1, float f2)
  4050fd:	55                   	push   %rbp
  4050fe:	48 89 e5             	mov    %rsp,%rbp
  405101:	48 83 ec 20          	sub    $0x20,%rsp
  405105:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  40510a:	f3 0f 11 4d f8       	movss  %xmm1,-0x8(%rbp)
    {
	return f1 == f2 ||
  40510f:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  405114:	0f 2e 45 f8          	ucomiss -0x8(%rbp),%xmm0
  405118:	7a 02                	jp     40511c <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi+0x1f>
  40511a:	74 1e                	je     40513a <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi+0x3d>
  40511c:	d9 45 fc             	flds   -0x4(%rbp)
  40511f:	db 3c 24             	fstpt  (%rsp)
  405122:	e8 cd 88 00 00       	callq  40d9f4 <_D6kernel4core6system5isnanFeZi>
  405127:	85 c0                	test   %eax,%eax
  405129:	74 15                	je     405140 <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi+0x43>
  40512b:	d9 45 f8             	flds   -0x8(%rbp)
  40512e:	db 3c 24             	fstpt  (%rsp)
  405131:	e8 be 88 00 00       	callq  40d9f4 <_D6kernel4core6system5isnanFeZi>
  405136:	85 c0                	test   %eax,%eax
  405138:	74 06                	je     405140 <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi+0x43>
  40513a:	c6 45 f7 01          	movb   $0x1,-0x9(%rbp)
  40513e:	eb 04                	jmp    405144 <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi+0x47>
  405140:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
  405144:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
		(isnan(f1) && isnan(f2));
    }
  405148:	c9                   	leaveq 
  405149:	c3                   	retq   

000000000040514a <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi>:

    static int _compare(float d1, float d2)
  40514a:	55                   	push   %rbp
  40514b:	48 89 e5             	mov    %rsp,%rbp
  40514e:	48 83 ec 30          	sub    $0x30,%rsp
  405152:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  405157:	f3 0f 11 4d f8       	movss  %xmm1,-0x8(%rbp)
    {
	if (d1 !<>= d2)		// if either are NaN
  40515c:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  405161:	0f 2e 45 f8          	ucomiss -0x8(%rbp),%xmm0
  405165:	0f 9a c0             	setp   %al
  405168:	84 c0                	test   %al,%al
  40516a:	74 39                	je     4051a5 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x5b>
	{
	    if (isnan(d1))
  40516c:	d9 45 fc             	flds   -0x4(%rbp)
  40516f:	db 3c 24             	fstpt  (%rsp)
  405172:	e8 7d 88 00 00       	callq  40d9f4 <_D6kernel4core6system5isnanFeZi>
  405177:	85 c0                	test   %eax,%eax
  405179:	74 21                	je     40519c <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x52>
	    {	if (isnan(d2))
  40517b:	d9 45 f8             	flds   -0x8(%rbp)
  40517e:	db 3c 24             	fstpt  (%rsp)
  405181:	e8 6e 88 00 00       	callq  40d9f4 <_D6kernel4core6system5isnanFeZi>
  405186:	85 c0                	test   %eax,%eax
  405188:	74 09                	je     405193 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x49>
		    return 0;
  40518a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  405191:	eb 57                	jmp    4051ea <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0xa0>
		return -1;
  405193:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rbp)
  40519a:	eb 4e                	jmp    4051ea <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0xa0>
	    }
	    return 1;
  40519c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  4051a3:	eb 45                	jmp    4051ea <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0xa0>
	}
	return (d1 == d2) ? 0 : ((d1 < d2) ? -1 : 1);
  4051a5:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  4051aa:	0f 2e 45 f8          	ucomiss -0x8(%rbp),%xmm0
  4051ae:	7a 02                	jp     4051b2 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x68>
  4051b0:	74 02                	je     4051b4 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x6a>
  4051b2:	eb 09                	jmp    4051bd <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x73>
  4051b4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  4051bb:	eb 27                	jmp    4051e4 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x9a>
  4051bd:	f3 0f 10 4d fc       	movss  -0x4(%rbp),%xmm1
  4051c2:	f3 0f 10 45 f8       	movss  -0x8(%rbp),%xmm0
  4051c7:	0f 2e c1             	ucomiss %xmm1,%xmm0
  4051ca:	77 02                	ja     4051ce <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x84>
  4051cc:	eb 09                	jmp    4051d7 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x8d>
  4051ce:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%rbp)
  4051d5:	eb 07                	jmp    4051de <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x94>
  4051d7:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  4051de:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4051e1:	89 45 f0             	mov    %eax,-0x10(%rbp)
  4051e4:	8b 45 f0             	mov    -0x10(%rbp),%eax
  4051e7:	89 45 ec             	mov    %eax,-0x14(%rbp)
  4051ea:	8b 45 ec             	mov    -0x14(%rbp),%eax
    }
  4051ed:	c9                   	leaveq 
  4051ee:	c3                   	retq   

00000000004051ef <_D3std8typeinfo8ti_float10TypeInfo_f6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4051ef:	55                   	push   %rbp
  4051f0:	48 89 e5             	mov    %rsp,%rbp
  4051f3:	48 83 ec 20          	sub    $0x20,%rsp
  4051f7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4051fb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4051ff:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405203:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405207:	e8 70 41 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(float *)p1, *cast(float *)p2);
  40520c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405210:	8b 10                	mov    (%rax),%edx
  405212:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405216:	8b 00                	mov    (%rax),%eax
  405218:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  40521b:	f3 0f 10 4d e4       	movss  -0x1c(%rbp),%xmm1
  405220:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  405223:	f3 0f 10 45 e4       	movss  -0x1c(%rbp),%xmm0
  405228:	e8 d0 fe ff ff       	callq  4050fd <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi>
    }
  40522d:	c9                   	leaveq 
  40522e:	c3                   	retq   

000000000040522f <_D3std8typeinfo8ti_float10TypeInfo_f7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  40522f:	55                   	push   %rbp
  405230:	48 89 e5             	mov    %rsp,%rbp
  405233:	48 83 ec 20          	sub    $0x20,%rsp
  405237:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40523b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40523f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405243:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405247:	e8 30 41 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(float *)p1, *cast(float *)p2);
  40524c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405250:	8b 10                	mov    (%rax),%edx
  405252:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405256:	8b 00                	mov    (%rax),%eax
  405258:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  40525b:	f3 0f 10 4d e4       	movss  -0x1c(%rbp),%xmm1
  405260:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  405263:	f3 0f 10 45 e4       	movss  -0x1c(%rbp),%xmm0
  405268:	e8 dd fe ff ff       	callq  40514a <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi>
    }
  40526d:	c9                   	leaveq 
  40526e:	c3                   	retq   

000000000040526f <_D3std8typeinfo8ti_float10TypeInfo_f5tsizeMFZm>:

    size_t tsize()
  40526f:	55                   	push   %rbp
  405270:	48 89 e5             	mov    %rsp,%rbp
  405273:	48 83 ec 10          	sub    $0x10,%rsp
  405277:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40527b:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40527f:	e8 f8 40 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return float.sizeof;
  405284:	b8 04 00 00 00       	mov    $0x4,%eax
    }
  405289:	c9                   	leaveq 
  40528a:	c3                   	retq   

000000000040528b <_D3std8typeinfo8ti_float10TypeInfo_f4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  40528b:	55                   	push   %rbp
  40528c:	48 89 e5             	mov    %rsp,%rbp
  40528f:	48 83 ec 30          	sub    $0x30,%rsp
  405293:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405297:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40529b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40529f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4052a3:	e8 d4 40 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	float t;
  4052a8:	b8 00 00 c0 7f       	mov    $0x7fc00000,%eax
  4052ad:	89 45 fc             	mov    %eax,-0x4(%rbp)

	t = *cast(float *)p1;
  4052b0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4052b4:	8b 00                	mov    (%rax),%eax
  4052b6:	89 45 fc             	mov    %eax,-0x4(%rbp)
	*cast(float *)p1 = *cast(float *)p2;
  4052b9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4052bd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4052c1:	8b 00                	mov    (%rax),%eax
  4052c3:	89 02                	mov    %eax,(%rdx)
	*cast(float *)p2 = t;
  4052c5:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4052c9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4052cc:	89 02                	mov    %eax,(%rdx)
    }
  4052ce:	c9                   	leaveq 
  4052cf:	c3                   	retq   

00000000004052d0 <_D3std8typeinfo8ti_float10TypeInfo_f4initMFZAv>:

    void[] init()
  4052d0:	55                   	push   %rbp
  4052d1:	48 89 e5             	mov    %rsp,%rbp
  4052d4:	53                   	push   %rbx
  4052d5:	48 83 ec 28          	sub    $0x28,%rsp
  4052d9:	48 89 fb             	mov    %rdi,%rbx
  4052dc:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  4052e0:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4052e4:	e8 93 40 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {	static float r;

	return (cast(float *)&r)[0 .. 1];
  4052e9:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  4052f0:	00 
  4052f1:	48 c7 45 e8 c0 b2 41 	movq   $0x41b2c0,-0x18(%rbp)
  4052f8:	00 
  4052f9:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4052fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405301:	49 89 c0             	mov    %rax,%r8
  405304:	ba 04 00 00 00       	mov    $0x4,%edx
  405309:	be 01 00 00 00       	mov    $0x1,%esi
  40530e:	48 89 df             	mov    %rbx,%rdi
  405311:	e8 09 83 00 00       	callq  40d61f <_d_arraycast>
    }
  405316:	48 89 d8             	mov    %rbx,%rax
  405319:	48 83 c4 28          	add    $0x28,%rsp
  40531d:	5b                   	pop    %rbx
  40531e:	c9                   	leaveq 
  40531f:	c3                   	retq   

0000000000405320 <_D3std8typeinfo10ti_idouble10TypeInfo_p8toStringMFZAa>:

private import std.typeinfo.ti_double;

class TypeInfo_p : TypeInfo_d
{
    char[] toString() { return "idouble"; }
  405320:	55                   	push   %rbp
  405321:	48 89 e5             	mov    %rsp,%rbp
  405324:	53                   	push   %rbx
  405325:	48 83 ec 08          	sub    $0x8,%rsp
  405329:	48 89 fb             	mov    %rdi,%rbx
  40532c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405330:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405334:	e8 43 40 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  405339:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  405340:	48 c7 43 08 c0 0d 41 	movq   $0x410dc0,0x8(%rbx)
  405347:	00 
  405348:	48 89 d8             	mov    %rbx,%rax
  40534b:	48 83 c4 08          	add    $0x8,%rsp
  40534f:	5b                   	pop    %rbx
  405350:	c9                   	leaveq 
  405351:	c3                   	retq   
  405352:	90                   	nop    
  405353:	90                   	nop    

0000000000405354 <_D3std8typeinfo9ti_ifloat10TypeInfo_o8toStringMFZAa>:

private import std.typeinfo.ti_float;

class TypeInfo_o : TypeInfo_f
{
    char[] toString() { return "ifloat"; }
  405354:	55                   	push   %rbp
  405355:	48 89 e5             	mov    %rsp,%rbp
  405358:	53                   	push   %rbx
  405359:	48 83 ec 08          	sub    $0x8,%rsp
  40535d:	48 89 fb             	mov    %rdi,%rbx
  405360:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405364:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405368:	e8 0f 40 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  40536d:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  405374:	48 c7 43 08 80 0e 41 	movq   $0x410e80,0x8(%rbx)
  40537b:	00 
  40537c:	48 89 d8             	mov    %rbx,%rax
  40537f:	48 83 c4 08          	add    $0x8,%rsp
  405383:	5b                   	pop    %rbx
  405384:	c9                   	leaveq 
  405385:	c3                   	retq   
  405386:	90                   	nop    
  405387:	90                   	nop    

0000000000405388 <_D3std8typeinfo6ti_int10TypeInfo_i8toStringMFZAa>:

module std.typeinfo.ti_int;

class TypeInfo_i : TypeInfo
{
    char[] toString() { return "int"; }
  405388:	55                   	push   %rbp
  405389:	48 89 e5             	mov    %rsp,%rbp
  40538c:	53                   	push   %rbx
  40538d:	48 83 ec 08          	sub    $0x8,%rsp
  405391:	48 89 fb             	mov    %rdi,%rbx
  405394:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405398:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40539c:	e8 db 3f 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  4053a1:	48 c7 03 03 00 00 00 	movq   $0x3,(%rbx)
  4053a8:	48 c7 43 08 40 0f 41 	movq   $0x410f40,0x8(%rbx)
  4053af:	00 
  4053b0:	48 89 d8             	mov    %rbx,%rax
  4053b3:	48 83 c4 08          	add    $0x8,%rsp
  4053b7:	5b                   	pop    %rbx
  4053b8:	c9                   	leaveq 
  4053b9:	c3                   	retq   

00000000004053ba <_D3std8typeinfo6ti_int10TypeInfo_i7getHashMFPvZm>:

    hash_t getHash(void *p)
  4053ba:	55                   	push   %rbp
  4053bb:	48 89 e5             	mov    %rsp,%rbp
  4053be:	48 83 ec 10          	sub    $0x10,%rsp
  4053c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4053c6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4053ca:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4053ce:	e8 a9 3f 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p;
  4053d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4053d7:	8b 00                	mov    (%rax),%eax
  4053d9:	89 c0                	mov    %eax,%eax
    }
  4053db:	c9                   	leaveq 
  4053dc:	c3                   	retq   

00000000004053dd <_D3std8typeinfo6ti_int10TypeInfo_i6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4053dd:	55                   	push   %rbp
  4053de:	48 89 e5             	mov    %rsp,%rbp
  4053e1:	48 83 ec 20          	sub    $0x20,%rsp
  4053e5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4053e9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4053ed:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4053f1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4053f5:	e8 82 3f 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p1 == *cast(uint *)p2;
  4053fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4053fe:	8b 10                	mov    (%rax),%edx
  405400:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405404:	8b 00                	mov    (%rax),%eax
  405406:	39 c2                	cmp    %eax,%edx
  405408:	0f 94 c0             	sete   %al
  40540b:	0f b6 c0             	movzbl %al,%eax
    }
  40540e:	c9                   	leaveq 
  40540f:	c3                   	retq   

0000000000405410 <_D3std8typeinfo6ti_int10TypeInfo_i7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  405410:	55                   	push   %rbp
  405411:	48 89 e5             	mov    %rsp,%rbp
  405414:	48 83 ec 20          	sub    $0x20,%rsp
  405418:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40541c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405420:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405424:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405428:	e8 4f 3f 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	if (*cast(int*) p1 < *cast(int*) p2)
  40542d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405431:	8b 10                	mov    (%rax),%edx
  405433:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405437:	8b 00                	mov    (%rax),%eax
  405439:	39 c2                	cmp    %eax,%edx
  40543b:	7d 09                	jge    405446 <_D3std8typeinfo6ti_int10TypeInfo_i7compareMFPvPvZi+0x36>
	    return -1;
  40543d:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  405444:	eb 20                	jmp    405466 <_D3std8typeinfo6ti_int10TypeInfo_i7compareMFPvPvZi+0x56>
	else if (*cast(int*) p1 > *cast(int*) p2)
  405446:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40544a:	8b 10                	mov    (%rax),%edx
  40544c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405450:	8b 00                	mov    (%rax),%eax
  405452:	39 c2                	cmp    %eax,%edx
  405454:	7e 09                	jle    40545f <_D3std8typeinfo6ti_int10TypeInfo_i7compareMFPvPvZi+0x4f>
	    return 1;
  405456:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  40545d:	eb 07                	jmp    405466 <_D3std8typeinfo6ti_int10TypeInfo_i7compareMFPvPvZi+0x56>
	return 0;
  40545f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  405466:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    }
  405469:	c9                   	leaveq 
  40546a:	c3                   	retq   

000000000040546b <_D3std8typeinfo6ti_int10TypeInfo_i5tsizeMFZm>:

    size_t tsize()
  40546b:	55                   	push   %rbp
  40546c:	48 89 e5             	mov    %rsp,%rbp
  40546f:	48 83 ec 10          	sub    $0x10,%rsp
  405473:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405477:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40547b:	e8 fc 3e 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return int.sizeof;
  405480:	b8 04 00 00 00       	mov    $0x4,%eax
    }
  405485:	c9                   	leaveq 
  405486:	c3                   	retq   

0000000000405487 <_D3std8typeinfo6ti_int10TypeInfo_i4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  405487:	55                   	push   %rbp
  405488:	48 89 e5             	mov    %rsp,%rbp
  40548b:	48 83 ec 30          	sub    $0x30,%rsp
  40548f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405493:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405497:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40549b:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40549f:	e8 d8 3e 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	int t;
  4054a4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	t = *cast(int *)p1;
  4054ab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4054af:	8b 00                	mov    (%rax),%eax
  4054b1:	89 45 fc             	mov    %eax,-0x4(%rbp)
	*cast(int *)p1 = *cast(int *)p2;
  4054b4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4054b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4054bc:	8b 00                	mov    (%rax),%eax
  4054be:	89 02                	mov    %eax,(%rdx)
	*cast(int *)p2 = t;
  4054c0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4054c4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4054c7:	89 02                	mov    %eax,(%rdx)
    }
  4054c9:	c9                   	leaveq 
  4054ca:	c3                   	retq   
  4054cb:	90                   	nop    

00000000004054cc <_D3std8typeinfo8ti_ireal10TypeInfo_j8toStringMFZAa>:

private import std.typeinfo.ti_real;

class TypeInfo_j : TypeInfo_e
{
    char[] toString() { return "ireal"; }
  4054cc:	55                   	push   %rbp
  4054cd:	48 89 e5             	mov    %rsp,%rbp
  4054d0:	53                   	push   %rbx
  4054d1:	48 83 ec 08          	sub    $0x8,%rsp
  4054d5:	48 89 fb             	mov    %rdi,%rbx
  4054d8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4054dc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4054e0:	e8 97 3e 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  4054e5:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  4054ec:	48 c7 43 08 00 10 41 	movq   $0x411000,0x8(%rbx)
  4054f3:	00 
  4054f4:	48 89 d8             	mov    %rbx,%rax
  4054f7:	48 83 c4 08          	add    $0x8,%rsp
  4054fb:	5b                   	pop    %rbx
  4054fc:	c9                   	leaveq 
  4054fd:	c3                   	retq   
  4054fe:	90                   	nop    
  4054ff:	90                   	nop    

0000000000405500 <_D3std8typeinfo7ti_long10TypeInfo_l8toStringMFZAa>:

module std.typeinfo.ti_long;

class TypeInfo_l : TypeInfo
{
    char[] toString() { return "long"; }
  405500:	55                   	push   %rbp
  405501:	48 89 e5             	mov    %rsp,%rbp
  405504:	53                   	push   %rbx
  405505:	48 83 ec 08          	sub    $0x8,%rsp
  405509:	48 89 fb             	mov    %rdi,%rbx
  40550c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405510:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405514:	e8 63 3e 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  405519:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  405520:	48 c7 43 08 c0 10 41 	movq   $0x4110c0,0x8(%rbx)
  405527:	00 
  405528:	48 89 d8             	mov    %rbx,%rax
  40552b:	48 83 c4 08          	add    $0x8,%rsp
  40552f:	5b                   	pop    %rbx
  405530:	c9                   	leaveq 
  405531:	c3                   	retq   

0000000000405532 <_D3std8typeinfo7ti_long10TypeInfo_l7getHashMFPvZm>:

    hash_t getHash(void *p)
  405532:	55                   	push   %rbp
  405533:	48 89 e5             	mov    %rsp,%rbp
  405536:	48 83 ec 10          	sub    $0x10,%rsp
  40553a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40553e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405542:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405546:	e8 31 3e 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p + (cast(uint *)p)[1];
  40554b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40554f:	8b 08                	mov    (%rax),%ecx
  405551:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  405555:	b8 04 00 00 00       	mov    $0x4,%eax
  40555a:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40555e:	8b 00                	mov    (%rax),%eax
  405560:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  405563:	89 c0                	mov    %eax,%eax
    }
  405565:	c9                   	leaveq 
  405566:	c3                   	retq   

0000000000405567 <_D3std8typeinfo7ti_long10TypeInfo_l6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405567:	55                   	push   %rbp
  405568:	48 89 e5             	mov    %rsp,%rbp
  40556b:	48 83 ec 20          	sub    $0x20,%rsp
  40556f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405573:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405577:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40557b:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40557f:	e8 f8 3d 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(long *)p1 == *cast(long *)p2;
  405584:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405588:	48 8b 10             	mov    (%rax),%rdx
  40558b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40558f:	48 8b 00             	mov    (%rax),%rax
  405592:	48 39 c2             	cmp    %rax,%rdx
  405595:	0f 94 c0             	sete   %al
  405598:	0f b6 c0             	movzbl %al,%eax
    }
  40559b:	c9                   	leaveq 
  40559c:	c3                   	retq   

000000000040559d <_D3std8typeinfo7ti_long10TypeInfo_l7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  40559d:	55                   	push   %rbp
  40559e:	48 89 e5             	mov    %rsp,%rbp
  4055a1:	48 83 ec 20          	sub    $0x20,%rsp
  4055a5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4055a9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4055ad:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4055b1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4055b5:	e8 c2 3d 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	if (*cast(long *)p1 < *cast(long *)p2)
  4055ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4055be:	48 8b 10             	mov    (%rax),%rdx
  4055c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4055c5:	48 8b 00             	mov    (%rax),%rax
  4055c8:	48 39 c2             	cmp    %rax,%rdx
  4055cb:	7d 09                	jge    4055d6 <_D3std8typeinfo7ti_long10TypeInfo_l7compareMFPvPvZi+0x39>
	    return -1;
  4055cd:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  4055d4:	eb 23                	jmp    4055f9 <_D3std8typeinfo7ti_long10TypeInfo_l7compareMFPvPvZi+0x5c>
	else if (*cast(long *)p1 > *cast(long *)p2)
  4055d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4055da:	48 8b 10             	mov    (%rax),%rdx
  4055dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4055e1:	48 8b 00             	mov    (%rax),%rax
  4055e4:	48 39 c2             	cmp    %rax,%rdx
  4055e7:	7e 09                	jle    4055f2 <_D3std8typeinfo7ti_long10TypeInfo_l7compareMFPvPvZi+0x55>
	    return 1;
  4055e9:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  4055f0:	eb 07                	jmp    4055f9 <_D3std8typeinfo7ti_long10TypeInfo_l7compareMFPvPvZi+0x5c>
	return 0;
  4055f2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  4055f9:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    }
  4055fc:	c9                   	leaveq 
  4055fd:	c3                   	retq   

00000000004055fe <_D3std8typeinfo7ti_long10TypeInfo_l5tsizeMFZm>:

    size_t tsize()
  4055fe:	55                   	push   %rbp
  4055ff:	48 89 e5             	mov    %rsp,%rbp
  405602:	48 83 ec 10          	sub    $0x10,%rsp
  405606:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40560a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40560e:	e8 69 3d 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return long.sizeof;
  405613:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  405618:	c9                   	leaveq 
  405619:	c3                   	retq   

000000000040561a <_D3std8typeinfo7ti_long10TypeInfo_l4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  40561a:	55                   	push   %rbp
  40561b:	48 89 e5             	mov    %rsp,%rbp
  40561e:	48 83 ec 30          	sub    $0x30,%rsp
  405622:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405626:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40562a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40562e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405632:	e8 45 3d 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	long t;
  405637:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40563e:	00 

	t = *cast(long *)p1;
  40563f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405643:	48 8b 00             	mov    (%rax),%rax
  405646:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(long *)p1 = *cast(long *)p2;
  40564a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40564e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405652:	48 8b 00             	mov    (%rax),%rax
  405655:	48 89 02             	mov    %rax,(%rdx)
	*cast(long *)p2 = t;
  405658:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40565c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405660:	48 89 02             	mov    %rax,(%rdx)
    }
  405663:	c9                   	leaveq 
  405664:	c3                   	retq   
  405665:	90                   	nop    
  405666:	90                   	nop    
  405667:	90                   	nop    

0000000000405668 <_D3std8typeinfo6ti_ptr10TypeInfo_P7getHashMFPvZm>:

module std.typeinfo.ti_ptr;

class TypeInfo_P : TypeInfo
{
    hash_t getHash(void *p)
  405668:	55                   	push   %rbp
  405669:	48 89 e5             	mov    %rsp,%rbp
  40566c:	48 83 ec 10          	sub    $0x10,%rsp
  405670:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405674:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405678:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40567c:	e8 fb 3c 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return cast(uint)*cast(void* *)p;
  405681:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405685:	48 8b 00             	mov    (%rax),%rax
  405688:	89 c0                	mov    %eax,%eax
    }
  40568a:	c9                   	leaveq 
  40568b:	c3                   	retq   

000000000040568c <_D3std8typeinfo6ti_ptr10TypeInfo_P6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  40568c:	55                   	push   %rbp
  40568d:	48 89 e5             	mov    %rsp,%rbp
  405690:	48 83 ec 20          	sub    $0x20,%rsp
  405694:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405698:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40569c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4056a0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4056a4:	e8 d3 3c 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(void* *)p1 == *cast(void* *)p2;
  4056a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4056ad:	48 8b 10             	mov    (%rax),%rdx
  4056b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4056b4:	48 8b 00             	mov    (%rax),%rax
  4056b7:	48 39 c2             	cmp    %rax,%rdx
  4056ba:	0f 94 c0             	sete   %al
  4056bd:	0f b6 c0             	movzbl %al,%eax
    }
  4056c0:	c9                   	leaveq 
  4056c1:	c3                   	retq   

00000000004056c2 <_D3std8typeinfo6ti_ptr10TypeInfo_P7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4056c2:	55                   	push   %rbp
  4056c3:	48 89 e5             	mov    %rsp,%rbp
  4056c6:	48 83 ec 30          	sub    $0x30,%rsp
  4056ca:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4056ce:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4056d2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4056d6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4056da:	e8 9d 3c 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	auto c = *cast(void* *)p1 - *cast(void* *)p2;
  4056df:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4056e3:	48 8b 10             	mov    (%rax),%rdx
  4056e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4056ea:	48 8b 00             	mov    (%rax),%rax
  4056ed:	48 89 d1             	mov    %rdx,%rcx
  4056f0:	48 29 c1             	sub    %rax,%rcx
  4056f3:	48 89 c8             	mov    %rcx,%rax
  4056f6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (c < 0)
  4056fa:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4056ff:	79 09                	jns    40570a <_D3std8typeinfo6ti_ptr10TypeInfo_P7compareMFPvPvZi+0x48>
	    return -1;
  405701:	c7 45 d4 ff ff ff ff 	movl   $0xffffffff,-0x2c(%rbp)
  405708:	eb 17                	jmp    405721 <_D3std8typeinfo6ti_ptr10TypeInfo_P7compareMFPvPvZi+0x5f>
	else if (c > 0)
  40570a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40570f:	7e 09                	jle    40571a <_D3std8typeinfo6ti_ptr10TypeInfo_P7compareMFPvPvZi+0x58>
	    return 1;
  405711:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
  405718:	eb 07                	jmp    405721 <_D3std8typeinfo6ti_ptr10TypeInfo_P7compareMFPvPvZi+0x5f>
	return 0;
  40571a:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  405721:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    }
  405724:	c9                   	leaveq 
  405725:	c3                   	retq   

0000000000405726 <_D3std8typeinfo6ti_ptr10TypeInfo_P5tsizeMFZm>:

    size_t tsize()
  405726:	55                   	push   %rbp
  405727:	48 89 e5             	mov    %rsp,%rbp
  40572a:	48 83 ec 10          	sub    $0x10,%rsp
  40572e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405732:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405736:	e8 41 3c 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (void*).sizeof;
  40573b:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  405740:	c9                   	leaveq 
  405741:	c3                   	retq   

0000000000405742 <_D3std8typeinfo6ti_ptr10TypeInfo_P4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  405742:	55                   	push   %rbp
  405743:	48 89 e5             	mov    %rsp,%rbp
  405746:	48 83 ec 30          	sub    $0x30,%rsp
  40574a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40574e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405752:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405756:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40575a:	e8 1d 3c 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	void* t;
  40575f:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  405766:	00 

	t = *cast(void* *)p1;
  405767:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40576b:	48 8b 00             	mov    (%rax),%rax
  40576e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(void* *)p1 = *cast(void* *)p2;
  405772:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405776:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40577a:	48 8b 00             	mov    (%rax),%rax
  40577d:	48 89 02             	mov    %rax,(%rdx)
	*cast(void* *)p2 = t;
  405780:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405784:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405788:	48 89 02             	mov    %rax,(%rdx)
    }
  40578b:	c9                   	leaveq 
  40578c:	c3                   	retq   

000000000040578d <_D3std8typeinfo6ti_ptr10TypeInfo_P5flagsMFZk>:

    uint flags()
  40578d:	55                   	push   %rbp
  40578e:	48 89 e5             	mov    %rsp,%rbp
  405791:	48 83 ec 10          	sub    $0x10,%rsp
  405795:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405799:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40579d:	e8 da 3b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  4057a2:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  4057a7:	c9                   	leaveq 
  4057a8:	c3                   	retq   
  4057a9:	90                   	nop    
  4057aa:	90                   	nop    
  4057ab:	90                   	nop    

00000000004057ac <_D3std8typeinfo7ti_real10TypeInfo_e8toStringMFZAa>:
import kernel.core.system;
//private import std.math;

class TypeInfo_e : TypeInfo
{
    char[] toString() { return "real"; }
  4057ac:	55                   	push   %rbp
  4057ad:	48 89 e5             	mov    %rsp,%rbp
  4057b0:	53                   	push   %rbx
  4057b1:	48 83 ec 08          	sub    $0x8,%rsp
  4057b5:	48 89 fb             	mov    %rdi,%rbx
  4057b8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4057bc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4057c0:	e8 b7 3b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  4057c5:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  4057cc:	48 c7 43 08 20 12 41 	movq   $0x411220,0x8(%rbx)
  4057d3:	00 
  4057d4:	48 89 d8             	mov    %rbx,%rax
  4057d7:	48 83 c4 08          	add    $0x8,%rsp
  4057db:	5b                   	pop    %rbx
  4057dc:	c9                   	leaveq 
  4057dd:	c3                   	retq   

00000000004057de <_D3std8typeinfo7ti_real10TypeInfo_e7getHashMFPvZm>:

    hash_t getHash(void *p)
  4057de:	55                   	push   %rbp
  4057df:	48 89 e5             	mov    %rsp,%rbp
  4057e2:	48 83 ec 10          	sub    $0x10,%rsp
  4057e6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4057ea:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4057ee:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4057f2:	e8 85 3b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cast(uint *)p)[0] + (cast(uint *)p)[1] + (cast(ushort *)p)[4];
  4057f7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4057fb:	b8 00 00 00 00       	mov    $0x0,%eax
  405800:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  405804:	8b 08                	mov    (%rax),%ecx
  405806:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40580a:	b8 04 00 00 00       	mov    $0x4,%eax
  40580f:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  405813:	8b 00                	mov    (%rax),%eax
  405815:	01 c1                	add    %eax,%ecx
  405817:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40581b:	b8 08 00 00 00       	mov    $0x8,%eax
  405820:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  405824:	0f b7 00             	movzwl (%rax),%eax
  405827:	0f b7 c0             	movzwl %ax,%eax
  40582a:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  40582d:	89 c0                	mov    %eax,%eax
    }
  40582f:	c9                   	leaveq 
  405830:	c3                   	retq   

0000000000405831 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi>:

    static int _equals(real f1, real f2)
  405831:	55                   	push   %rbp
  405832:	48 89 e5             	mov    %rsp,%rbp
  405835:	48 83 ec 20          	sub    $0x20,%rsp
    {
	return f1 == f2 ||
  405839:	db 6d 10             	fldt   0x10(%rbp)
  40583c:	db 6d 20             	fldt   0x20(%rbp)
  40583f:	d9 c9                	fxch   %st(1)
  405841:	df e9                	fucomip %st(1),%st
  405843:	df c0                	ffreep %st(0)
  405845:	7a 02                	jp     405849 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi+0x18>
  405847:	74 30                	je     405879 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi+0x48>
  405849:	48 8b 45 10          	mov    0x10(%rbp),%rax
  40584d:	8b 55 18             	mov    0x18(%rbp),%edx
  405850:	48 89 04 24          	mov    %rax,(%rsp)
  405854:	89 54 24 08          	mov    %edx,0x8(%rsp)
  405858:	e8 97 81 00 00       	callq  40d9f4 <_D6kernel4core6system5isnanFeZi>
  40585d:	85 c0                	test   %eax,%eax
  40585f:	74 1e                	je     40587f <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi+0x4e>
  405861:	48 8b 45 20          	mov    0x20(%rbp),%rax
  405865:	8b 55 28             	mov    0x28(%rbp),%edx
  405868:	48 89 04 24          	mov    %rax,(%rsp)
  40586c:	89 54 24 08          	mov    %edx,0x8(%rsp)
  405870:	e8 7f 81 00 00       	callq  40d9f4 <_D6kernel4core6system5isnanFeZi>
  405875:	85 c0                	test   %eax,%eax
  405877:	74 06                	je     40587f <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi+0x4e>
  405879:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
  40587d:	eb 04                	jmp    405883 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi+0x52>
  40587f:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
  405883:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
		(isnan(f1) && isnan(f2));
    }
  405887:	c9                   	leaveq 
  405888:	c3                   	retq   

0000000000405889 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi>:

    static int _compare(real d1, real d2)
  405889:	55                   	push   %rbp
  40588a:	48 89 e5             	mov    %rsp,%rbp
  40588d:	48 83 ec 20          	sub    $0x20,%rsp
    {
	if (d1 !<>= d2)		// if either are NaN
  405891:	db 6d 10             	fldt   0x10(%rbp)
  405894:	db 6d 20             	fldt   0x20(%rbp)
  405897:	df e9                	fucomip %st(1),%st
  405899:	df c0                	ffreep %st(0)
  40589b:	0f 9a c0             	setp   %al
  40589e:	84 c0                	test   %al,%al
  4058a0:	74 4b                	je     4058ed <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x64>
	{
	    if (isnan(d1))
  4058a2:	48 8b 45 10          	mov    0x10(%rbp),%rax
  4058a6:	8b 55 18             	mov    0x18(%rbp),%edx
  4058a9:	48 89 04 24          	mov    %rax,(%rsp)
  4058ad:	89 54 24 08          	mov    %edx,0x8(%rsp)
  4058b1:	e8 3e 81 00 00       	callq  40d9f4 <_D6kernel4core6system5isnanFeZi>
  4058b6:	85 c0                	test   %eax,%eax
  4058b8:	74 2a                	je     4058e4 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x5b>
	    {	if (isnan(d2))
  4058ba:	48 8b 45 20          	mov    0x20(%rbp),%rax
  4058be:	8b 55 28             	mov    0x28(%rbp),%edx
  4058c1:	48 89 04 24          	mov    %rax,(%rsp)
  4058c5:	89 54 24 08          	mov    %edx,0x8(%rsp)
  4058c9:	e8 26 81 00 00       	callq  40d9f4 <_D6kernel4core6system5isnanFeZi>
  4058ce:	85 c0                	test   %eax,%eax
  4058d0:	74 09                	je     4058db <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x52>
		    return 0;
  4058d2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  4058d9:	eb 57                	jmp    405932 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0xa9>
		return -1;
  4058db:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%rbp)
  4058e2:	eb 4e                	jmp    405932 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0xa9>
	    }
	    return 1;
  4058e4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  4058eb:	eb 45                	jmp    405932 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0xa9>
	}
	return (d1 == d2) ? 0 : ((d1 < d2) ? -1 : 1);
  4058ed:	db 6d 10             	fldt   0x10(%rbp)
  4058f0:	db 6d 20             	fldt   0x20(%rbp)
  4058f3:	d9 c9                	fxch   %st(1)
  4058f5:	df e9                	fucomip %st(1),%st
  4058f7:	df c0                	ffreep %st(0)
  4058f9:	7a 02                	jp     4058fd <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x74>
  4058fb:	74 02                	je     4058ff <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x76>
  4058fd:	eb 09                	jmp    405908 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x7f>
  4058ff:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  405906:	eb 24                	jmp    40592c <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0xa3>
  405908:	db 6d 10             	fldt   0x10(%rbp)
  40590b:	db 6d 20             	fldt   0x20(%rbp)
  40590e:	df e9                	fucomip %st(1),%st
  405910:	df c0                	ffreep %st(0)
  405912:	77 02                	ja     405916 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x8d>
  405914:	eb 09                	jmp    40591f <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x96>
  405916:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  40591d:	eb 07                	jmp    405926 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x9d>
  40591f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  405926:	8b 45 fc             	mov    -0x4(%rbp),%eax
  405929:	89 45 f8             	mov    %eax,-0x8(%rbp)
  40592c:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40592f:	89 45 f4             	mov    %eax,-0xc(%rbp)
  405932:	8b 45 f4             	mov    -0xc(%rbp),%eax
    }
  405935:	c9                   	leaveq 
  405936:	c3                   	retq   

0000000000405937 <_D3std8typeinfo7ti_real10TypeInfo_e6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405937:	55                   	push   %rbp
  405938:	48 89 e5             	mov    %rsp,%rbp
  40593b:	53                   	push   %rbx
  40593c:	48 83 ec 48          	sub    $0x48,%rsp
  405940:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405944:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405948:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40594c:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405950:	e8 27 3a 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(real *)p1, *cast(real *)p2);
  405955:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405959:	48 8b 08             	mov    (%rax),%rcx
  40595c:	8b 58 08             	mov    0x8(%rax),%ebx
  40595f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405963:	8b 50 08             	mov    0x8(%rax),%edx
  405966:	48 8b 00             	mov    (%rax),%rax
  405969:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  40596e:	89 5c 24 18          	mov    %ebx,0x18(%rsp)
  405972:	48 89 04 24          	mov    %rax,(%rsp)
  405976:	89 54 24 08          	mov    %edx,0x8(%rsp)
  40597a:	e8 b2 fe ff ff       	callq  405831 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi>
    }
  40597f:	48 83 c4 48          	add    $0x48,%rsp
  405983:	5b                   	pop    %rbx
  405984:	c9                   	leaveq 
  405985:	c3                   	retq   

0000000000405986 <_D3std8typeinfo7ti_real10TypeInfo_e7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  405986:	55                   	push   %rbp
  405987:	48 89 e5             	mov    %rsp,%rbp
  40598a:	53                   	push   %rbx
  40598b:	48 83 ec 48          	sub    $0x48,%rsp
  40598f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405993:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405997:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40599b:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40599f:	e8 d8 39 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(real *)p1, *cast(real *)p2);
  4059a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4059a8:	48 8b 08             	mov    (%rax),%rcx
  4059ab:	8b 58 08             	mov    0x8(%rax),%ebx
  4059ae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4059b2:	8b 50 08             	mov    0x8(%rax),%edx
  4059b5:	48 8b 00             	mov    (%rax),%rax
  4059b8:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  4059bd:	89 5c 24 18          	mov    %ebx,0x18(%rsp)
  4059c1:	48 89 04 24          	mov    %rax,(%rsp)
  4059c5:	89 54 24 08          	mov    %edx,0x8(%rsp)
  4059c9:	e8 bb fe ff ff       	callq  405889 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi>
    }
  4059ce:	48 83 c4 48          	add    $0x48,%rsp
  4059d2:	5b                   	pop    %rbx
  4059d3:	c9                   	leaveq 
  4059d4:	c3                   	retq   

00000000004059d5 <_D3std8typeinfo7ti_real10TypeInfo_e5tsizeMFZm>:

    size_t tsize()
  4059d5:	55                   	push   %rbp
  4059d6:	48 89 e5             	mov    %rsp,%rbp
  4059d9:	48 83 ec 10          	sub    $0x10,%rsp
  4059dd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4059e1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4059e5:	e8 92 39 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return real.sizeof;
  4059ea:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  4059ef:	c9                   	leaveq 
  4059f0:	c3                   	retq   

00000000004059f1 <_D3std8typeinfo7ti_real10TypeInfo_e4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  4059f1:	55                   	push   %rbp
  4059f2:	48 89 e5             	mov    %rsp,%rbp
  4059f5:	48 83 ec 30          	sub    $0x30,%rsp
  4059f9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4059fd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405a01:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405a05:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405a09:	e8 6e 39 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	real t;
  405a0e:	48 b8 00 00 00 00 00 	mov    $0xc000000000000000,%rax
  405a15:	00 00 c0 
  405a18:	ba ff 7f 00 00       	mov    $0x7fff,%edx
  405a1d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  405a21:	89 55 f8             	mov    %edx,-0x8(%rbp)

	t = *cast(real *)p1;
  405a24:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405a28:	8b 50 08             	mov    0x8(%rax),%edx
  405a2b:	48 8b 00             	mov    (%rax),%rax
  405a2e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  405a32:	89 55 f8             	mov    %edx,-0x8(%rbp)
	*cast(real *)p1 = *cast(real *)p2;
  405a35:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  405a39:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405a3d:	8b 50 08             	mov    0x8(%rax),%edx
  405a40:	48 8b 00             	mov    (%rax),%rax
  405a43:	48 89 01             	mov    %rax,(%rcx)
  405a46:	89 51 08             	mov    %edx,0x8(%rcx)
	*cast(real *)p2 = t;
  405a49:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  405a4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405a51:	8b 55 f8             	mov    -0x8(%rbp),%edx
  405a54:	48 89 01             	mov    %rax,(%rcx)
  405a57:	89 51 08             	mov    %edx,0x8(%rcx)
    }
  405a5a:	c9                   	leaveq 
  405a5b:	c3                   	retq   

0000000000405a5c <_D3std8typeinfo7ti_real10TypeInfo_e4initMFZAv>:

    void[] init()
  405a5c:	55                   	push   %rbp
  405a5d:	48 89 e5             	mov    %rsp,%rbp
  405a60:	53                   	push   %rbx
  405a61:	48 83 ec 28          	sub    $0x28,%rsp
  405a65:	48 89 fb             	mov    %rdi,%rbx
  405a68:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  405a6c:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  405a70:	e8 07 39 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {	static real r;

	return (cast(real *)&r)[0 .. 1];
  405a75:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  405a7c:	00 
  405a7d:	48 c7 45 e8 40 b7 41 	movq   $0x41b740,-0x18(%rbp)
  405a84:	00 
  405a85:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  405a89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405a8d:	49 89 c0             	mov    %rax,%r8
  405a90:	ba 10 00 00 00       	mov    $0x10,%edx
  405a95:	be 01 00 00 00       	mov    $0x1,%esi
  405a9a:	48 89 df             	mov    %rbx,%rdi
  405a9d:	e8 7d 7b 00 00       	callq  40d61f <_d_arraycast>
    }
  405aa2:	48 89 d8             	mov    %rbx,%rax
  405aa5:	48 83 c4 28          	add    $0x28,%rsp
  405aa9:	5b                   	pop    %rbx
  405aaa:	c9                   	leaveq 
  405aab:	c3                   	retq   

0000000000405aac <_D3std8typeinfo8ti_short10TypeInfo_s8toStringMFZAa>:

module std.typeinfo.ti_short;

class TypeInfo_s : TypeInfo
{
    char[] toString() { return "short"; }
  405aac:	55                   	push   %rbp
  405aad:	48 89 e5             	mov    %rsp,%rbp
  405ab0:	53                   	push   %rbx
  405ab1:	48 83 ec 08          	sub    $0x8,%rsp
  405ab5:	48 89 fb             	mov    %rdi,%rbx
  405ab8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405abc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405ac0:	e8 b7 38 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  405ac5:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  405acc:	48 c7 43 08 e0 12 41 	movq   $0x4112e0,0x8(%rbx)
  405ad3:	00 
  405ad4:	48 89 d8             	mov    %rbx,%rax
  405ad7:	48 83 c4 08          	add    $0x8,%rsp
  405adb:	5b                   	pop    %rbx
  405adc:	c9                   	leaveq 
  405add:	c3                   	retq   

0000000000405ade <_D3std8typeinfo8ti_short10TypeInfo_s7getHashMFPvZm>:

    hash_t getHash(void *p)
  405ade:	55                   	push   %rbp
  405adf:	48 89 e5             	mov    %rsp,%rbp
  405ae2:	48 83 ec 10          	sub    $0x10,%rsp
  405ae6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405aea:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405aee:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405af2:	e8 85 38 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(short *)p;
  405af7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405afb:	0f b7 00             	movzwl (%rax),%eax
  405afe:	48 0f bf c0          	movswq %ax,%rax
    }
  405b02:	c9                   	leaveq 
  405b03:	c3                   	retq   

0000000000405b04 <_D3std8typeinfo8ti_short10TypeInfo_s6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405b04:	55                   	push   %rbp
  405b05:	48 89 e5             	mov    %rsp,%rbp
  405b08:	48 83 ec 20          	sub    $0x20,%rsp
  405b0c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405b10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405b14:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405b18:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405b1c:	e8 5b 38 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(short *)p1 == *cast(short *)p2;
  405b21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405b25:	0f b7 10             	movzwl (%rax),%edx
  405b28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405b2c:	0f b7 00             	movzwl (%rax),%eax
  405b2f:	66 39 c2             	cmp    %ax,%dx
  405b32:	0f 94 c0             	sete   %al
  405b35:	0f b6 c0             	movzbl %al,%eax
    }
  405b38:	c9                   	leaveq 
  405b39:	c3                   	retq   

0000000000405b3a <_D3std8typeinfo8ti_short10TypeInfo_s7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  405b3a:	55                   	push   %rbp
  405b3b:	48 89 e5             	mov    %rsp,%rbp
  405b3e:	48 83 ec 20          	sub    $0x20,%rsp
  405b42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405b46:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405b4a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405b4e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405b52:	e8 25 38 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(short *)p1 - *cast(short *)p2;
  405b57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405b5b:	0f b7 00             	movzwl (%rax),%eax
  405b5e:	0f bf d0             	movswl %ax,%edx
  405b61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405b65:	0f b7 00             	movzwl (%rax),%eax
  405b68:	98                   	cwtl   
  405b69:	89 d1                	mov    %edx,%ecx
  405b6b:	29 c1                	sub    %eax,%ecx
  405b6d:	89 c8                	mov    %ecx,%eax
    }
  405b6f:	c9                   	leaveq 
  405b70:	c3                   	retq   

0000000000405b71 <_D3std8typeinfo8ti_short10TypeInfo_s5tsizeMFZm>:

    size_t tsize()
  405b71:	55                   	push   %rbp
  405b72:	48 89 e5             	mov    %rsp,%rbp
  405b75:	48 83 ec 10          	sub    $0x10,%rsp
  405b79:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405b7d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405b81:	e8 f6 37 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return short.sizeof;
  405b86:	b8 02 00 00 00       	mov    $0x2,%eax
    }
  405b8b:	c9                   	leaveq 
  405b8c:	c3                   	retq   

0000000000405b8d <_D3std8typeinfo8ti_short10TypeInfo_s4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  405b8d:	55                   	push   %rbp
  405b8e:	48 89 e5             	mov    %rsp,%rbp
  405b91:	48 83 ec 30          	sub    $0x30,%rsp
  405b95:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405b99:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405b9d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405ba1:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405ba5:	e8 d2 37 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	short t;
  405baa:	66 c7 45 fe 00 00    	movw   $0x0,-0x2(%rbp)

	t = *cast(short *)p1;
  405bb0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405bb4:	0f b7 00             	movzwl (%rax),%eax
  405bb7:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	*cast(short *)p1 = *cast(short *)p2;
  405bbb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405bbf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405bc3:	0f b7 00             	movzwl (%rax),%eax
  405bc6:	66 89 02             	mov    %ax,(%rdx)
	*cast(short *)p2 = t;
  405bc9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405bcd:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  405bd1:	66 89 02             	mov    %ax,(%rdx)
    }
  405bd4:	c9                   	leaveq 
  405bd5:	c3                   	retq   
  405bd6:	90                   	nop    
  405bd7:	90                   	nop    

0000000000405bd8 <_D3std8typeinfo8ti_ubyte10TypeInfo_h8toStringMFZAa>:

module std.typeinfo.ti_ubyte;

class TypeInfo_h : TypeInfo
{
    char[] toString() { return "ubyte"; }
  405bd8:	55                   	push   %rbp
  405bd9:	48 89 e5             	mov    %rsp,%rbp
  405bdc:	53                   	push   %rbx
  405bdd:	48 83 ec 08          	sub    $0x8,%rsp
  405be1:	48 89 fb             	mov    %rdi,%rbx
  405be4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405be8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405bec:	e8 8b 37 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  405bf1:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  405bf8:	48 c7 43 08 a0 13 41 	movq   $0x4113a0,0x8(%rbx)
  405bff:	00 
  405c00:	48 89 d8             	mov    %rbx,%rax
  405c03:	48 83 c4 08          	add    $0x8,%rsp
  405c07:	5b                   	pop    %rbx
  405c08:	c9                   	leaveq 
  405c09:	c3                   	retq   

0000000000405c0a <_D3std8typeinfo8ti_ubyte10TypeInfo_h7getHashMFPvZm>:

    hash_t getHash(void *p)
  405c0a:	55                   	push   %rbp
  405c0b:	48 89 e5             	mov    %rsp,%rbp
  405c0e:	48 83 ec 10          	sub    $0x10,%rsp
  405c12:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405c16:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405c1a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405c1e:	e8 59 37 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ubyte *)p;
  405c23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405c27:	0f b6 00             	movzbl (%rax),%eax
  405c2a:	0f b6 c0             	movzbl %al,%eax
    }
  405c2d:	c9                   	leaveq 
  405c2e:	c3                   	retq   

0000000000405c2f <_D3std8typeinfo8ti_ubyte10TypeInfo_h6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405c2f:	55                   	push   %rbp
  405c30:	48 89 e5             	mov    %rsp,%rbp
  405c33:	48 83 ec 20          	sub    $0x20,%rsp
  405c37:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405c3b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405c3f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405c43:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405c47:	e8 30 37 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ubyte *)p1 == *cast(ubyte *)p2;
  405c4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405c50:	0f b6 10             	movzbl (%rax),%edx
  405c53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405c57:	0f b6 00             	movzbl (%rax),%eax
  405c5a:	38 c2                	cmp    %al,%dl
  405c5c:	0f 94 c0             	sete   %al
  405c5f:	0f b6 c0             	movzbl %al,%eax
    }
  405c62:	c9                   	leaveq 
  405c63:	c3                   	retq   

0000000000405c64 <_D3std8typeinfo8ti_ubyte10TypeInfo_h7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  405c64:	55                   	push   %rbp
  405c65:	48 89 e5             	mov    %rsp,%rbp
  405c68:	48 83 ec 20          	sub    $0x20,%rsp
  405c6c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405c70:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405c74:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405c78:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405c7c:	e8 fb 36 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ubyte *)p1 - *cast(ubyte *)p2;
  405c81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405c85:	0f b6 00             	movzbl (%rax),%eax
  405c88:	0f b6 d0             	movzbl %al,%edx
  405c8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405c8f:	0f b6 00             	movzbl (%rax),%eax
  405c92:	0f b6 c0             	movzbl %al,%eax
  405c95:	89 d1                	mov    %edx,%ecx
  405c97:	29 c1                	sub    %eax,%ecx
  405c99:	89 c8                	mov    %ecx,%eax
    }
  405c9b:	c9                   	leaveq 
  405c9c:	c3                   	retq   

0000000000405c9d <_D3std8typeinfo8ti_ubyte10TypeInfo_h5tsizeMFZm>:

    size_t tsize()
  405c9d:	55                   	push   %rbp
  405c9e:	48 89 e5             	mov    %rsp,%rbp
  405ca1:	48 83 ec 10          	sub    $0x10,%rsp
  405ca5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405ca9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405cad:	e8 ca 36 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return ubyte.sizeof;
  405cb2:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  405cb7:	c9                   	leaveq 
  405cb8:	c3                   	retq   

0000000000405cb9 <_D3std8typeinfo8ti_ubyte10TypeInfo_h4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  405cb9:	55                   	push   %rbp
  405cba:	48 89 e5             	mov    %rsp,%rbp
  405cbd:	48 83 ec 30          	sub    $0x30,%rsp
  405cc1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405cc5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405cc9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405ccd:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405cd1:	e8 a6 36 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ubyte t;
  405cd6:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)

	t = *cast(ubyte *)p1;
  405cda:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405cde:	0f b6 00             	movzbl (%rax),%eax
  405ce1:	88 45 ff             	mov    %al,-0x1(%rbp)
	*cast(ubyte *)p1 = *cast(ubyte *)p2;
  405ce4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405ce8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405cec:	0f b6 00             	movzbl (%rax),%eax
  405cef:	88 02                	mov    %al,(%rdx)
	*cast(ubyte *)p2 = t;
  405cf1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405cf5:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  405cf9:	88 02                	mov    %al,(%rdx)
    }
  405cfb:	c9                   	leaveq 
  405cfc:	c3                   	retq   

0000000000405cfd <_D3std8typeinfo8ti_ubyte10TypeInfo_b8toStringMFZAa>:
}

class TypeInfo_b : TypeInfo_h
{
    char[] toString() { return "bool"; }
  405cfd:	55                   	push   %rbp
  405cfe:	48 89 e5             	mov    %rsp,%rbp
  405d01:	53                   	push   %rbx
  405d02:	48 83 ec 08          	sub    $0x8,%rsp
  405d06:	48 89 fb             	mov    %rdi,%rbx
  405d09:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405d0d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405d11:	e8 66 36 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  405d16:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  405d1d:	48 c7 43 08 50 14 41 	movq   $0x411450,0x8(%rbx)
  405d24:	00 
  405d25:	48 89 d8             	mov    %rbx,%rax
  405d28:	48 83 c4 08          	add    $0x8,%rsp
  405d2c:	5b                   	pop    %rbx
  405d2d:	c9                   	leaveq 
  405d2e:	c3                   	retq   
  405d2f:	90                   	nop    

0000000000405d30 <_D3std8typeinfo7ti_uint10TypeInfo_k8toStringMFZAa>:

module std.typeinfo.ti_uint;

class TypeInfo_k : TypeInfo
{
    char[] toString() { return "uint"; }
  405d30:	55                   	push   %rbp
  405d31:	48 89 e5             	mov    %rsp,%rbp
  405d34:	53                   	push   %rbx
  405d35:	48 83 ec 08          	sub    $0x8,%rsp
  405d39:	48 89 fb             	mov    %rdi,%rbx
  405d3c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405d40:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405d44:	e8 33 36 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  405d49:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  405d50:	48 c7 43 08 00 15 41 	movq   $0x411500,0x8(%rbx)
  405d57:	00 
  405d58:	48 89 d8             	mov    %rbx,%rax
  405d5b:	48 83 c4 08          	add    $0x8,%rsp
  405d5f:	5b                   	pop    %rbx
  405d60:	c9                   	leaveq 
  405d61:	c3                   	retq   

0000000000405d62 <_D3std8typeinfo7ti_uint10TypeInfo_k7getHashMFPvZm>:

    hash_t getHash(void *p)
  405d62:	55                   	push   %rbp
  405d63:	48 89 e5             	mov    %rsp,%rbp
  405d66:	48 83 ec 10          	sub    $0x10,%rsp
  405d6a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405d6e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405d72:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405d76:	e8 01 36 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p;
  405d7b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405d7f:	8b 00                	mov    (%rax),%eax
  405d81:	89 c0                	mov    %eax,%eax
    }
  405d83:	c9                   	leaveq 
  405d84:	c3                   	retq   

0000000000405d85 <_D3std8typeinfo7ti_uint10TypeInfo_k6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405d85:	55                   	push   %rbp
  405d86:	48 89 e5             	mov    %rsp,%rbp
  405d89:	48 83 ec 20          	sub    $0x20,%rsp
  405d8d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405d91:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405d95:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405d99:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405d9d:	e8 da 35 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p1 == *cast(uint *)p2;
  405da2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405da6:	8b 10                	mov    (%rax),%edx
  405da8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405dac:	8b 00                	mov    (%rax),%eax
  405dae:	39 c2                	cmp    %eax,%edx
  405db0:	0f 94 c0             	sete   %al
  405db3:	0f b6 c0             	movzbl %al,%eax
    }
  405db6:	c9                   	leaveq 
  405db7:	c3                   	retq   

0000000000405db8 <_D3std8typeinfo7ti_uint10TypeInfo_k7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  405db8:	55                   	push   %rbp
  405db9:	48 89 e5             	mov    %rsp,%rbp
  405dbc:	48 83 ec 20          	sub    $0x20,%rsp
  405dc0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405dc4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405dc8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405dcc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405dd0:	e8 a7 35 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	if (*cast(uint*) p1 < *cast(uint*) p2)
  405dd5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405dd9:	8b 10                	mov    (%rax),%edx
  405ddb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405ddf:	8b 00                	mov    (%rax),%eax
  405de1:	39 c2                	cmp    %eax,%edx
  405de3:	73 09                	jae    405dee <_D3std8typeinfo7ti_uint10TypeInfo_k7compareMFPvPvZi+0x36>
	    return -1;
  405de5:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  405dec:	eb 20                	jmp    405e0e <_D3std8typeinfo7ti_uint10TypeInfo_k7compareMFPvPvZi+0x56>
	else if (*cast(uint*) p1 > *cast(uint*) p2)
  405dee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405df2:	8b 10                	mov    (%rax),%edx
  405df4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405df8:	8b 00                	mov    (%rax),%eax
  405dfa:	39 c2                	cmp    %eax,%edx
  405dfc:	76 09                	jbe    405e07 <_D3std8typeinfo7ti_uint10TypeInfo_k7compareMFPvPvZi+0x4f>
	    return 1;
  405dfe:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  405e05:	eb 07                	jmp    405e0e <_D3std8typeinfo7ti_uint10TypeInfo_k7compareMFPvPvZi+0x56>
	return 0;
  405e07:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  405e0e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    }
  405e11:	c9                   	leaveq 
  405e12:	c3                   	retq   

0000000000405e13 <_D3std8typeinfo7ti_uint10TypeInfo_k5tsizeMFZm>:

    size_t tsize()
  405e13:	55                   	push   %rbp
  405e14:	48 89 e5             	mov    %rsp,%rbp
  405e17:	48 83 ec 10          	sub    $0x10,%rsp
  405e1b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405e1f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405e23:	e8 54 35 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return uint.sizeof;
  405e28:	b8 04 00 00 00       	mov    $0x4,%eax
    }
  405e2d:	c9                   	leaveq 
  405e2e:	c3                   	retq   

0000000000405e2f <_D3std8typeinfo7ti_uint10TypeInfo_k4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  405e2f:	55                   	push   %rbp
  405e30:	48 89 e5             	mov    %rsp,%rbp
  405e33:	48 83 ec 30          	sub    $0x30,%rsp
  405e37:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405e3b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405e3f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405e43:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405e47:	e8 30 35 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	int t;
  405e4c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	t = *cast(uint *)p1;
  405e53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405e57:	8b 00                	mov    (%rax),%eax
  405e59:	89 45 fc             	mov    %eax,-0x4(%rbp)
	*cast(uint *)p1 = *cast(uint *)p2;
  405e5c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405e60:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405e64:	8b 00                	mov    (%rax),%eax
  405e66:	89 02                	mov    %eax,(%rdx)
	*cast(uint *)p2 = t;
  405e68:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405e6c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  405e6f:	89 02                	mov    %eax,(%rdx)
    }
  405e71:	c9                   	leaveq 
  405e72:	c3                   	retq   
  405e73:	90                   	nop    

0000000000405e74 <_D3std8typeinfo8ti_ulong10TypeInfo_m8toStringMFZAa>:

module std.typeinfo.ti_ulong;

class TypeInfo_m : TypeInfo
{
    char[] toString() { return "ulong"; }
  405e74:	55                   	push   %rbp
  405e75:	48 89 e5             	mov    %rsp,%rbp
  405e78:	53                   	push   %rbx
  405e79:	48 83 ec 08          	sub    $0x8,%rsp
  405e7d:	48 89 fb             	mov    %rdi,%rbx
  405e80:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405e84:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405e88:	e8 ef 34 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  405e8d:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  405e94:	48 c7 43 08 c0 15 41 	movq   $0x4115c0,0x8(%rbx)
  405e9b:	00 
  405e9c:	48 89 d8             	mov    %rbx,%rax
  405e9f:	48 83 c4 08          	add    $0x8,%rsp
  405ea3:	5b                   	pop    %rbx
  405ea4:	c9                   	leaveq 
  405ea5:	c3                   	retq   

0000000000405ea6 <_D3std8typeinfo8ti_ulong10TypeInfo_m7getHashMFPvZm>:

    hash_t getHash(void *p)
  405ea6:	55                   	push   %rbp
  405ea7:	48 89 e5             	mov    %rsp,%rbp
  405eaa:	48 83 ec 10          	sub    $0x10,%rsp
  405eae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405eb2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405eb6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405eba:	e8 bd 34 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p + (cast(uint *)p)[1];
  405ebf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405ec3:	8b 08                	mov    (%rax),%ecx
  405ec5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  405ec9:	b8 04 00 00 00       	mov    $0x4,%eax
  405ece:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  405ed2:	8b 00                	mov    (%rax),%eax
  405ed4:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  405ed7:	89 c0                	mov    %eax,%eax
    }
  405ed9:	c9                   	leaveq 
  405eda:	c3                   	retq   

0000000000405edb <_D3std8typeinfo8ti_ulong10TypeInfo_m6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  405edb:	55                   	push   %rbp
  405edc:	48 89 e5             	mov    %rsp,%rbp
  405edf:	48 83 ec 20          	sub    $0x20,%rsp
  405ee3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405ee7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405eeb:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405eef:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405ef3:	e8 84 34 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ulong *)p1 == *cast(ulong *)p2;
  405ef8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405efc:	48 8b 10             	mov    (%rax),%rdx
  405eff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405f03:	48 8b 00             	mov    (%rax),%rax
  405f06:	48 39 c2             	cmp    %rax,%rdx
  405f09:	0f 94 c0             	sete   %al
  405f0c:	0f b6 c0             	movzbl %al,%eax
    }
  405f0f:	c9                   	leaveq 
  405f10:	c3                   	retq   

0000000000405f11 <_D3std8typeinfo8ti_ulong10TypeInfo_m7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  405f11:	55                   	push   %rbp
  405f12:	48 89 e5             	mov    %rsp,%rbp
  405f15:	48 83 ec 20          	sub    $0x20,%rsp
  405f19:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405f1d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405f21:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405f25:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405f29:	e8 4e 34 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	if (*cast(ulong *)p1 < *cast(ulong *)p2)
  405f2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405f32:	48 8b 10             	mov    (%rax),%rdx
  405f35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405f39:	48 8b 00             	mov    (%rax),%rax
  405f3c:	48 39 c2             	cmp    %rax,%rdx
  405f3f:	73 09                	jae    405f4a <_D3std8typeinfo8ti_ulong10TypeInfo_m7compareMFPvPvZi+0x39>
	    return -1;
  405f41:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  405f48:	eb 23                	jmp    405f6d <_D3std8typeinfo8ti_ulong10TypeInfo_m7compareMFPvPvZi+0x5c>
	else if (*cast(ulong *)p1 > *cast(ulong *)p2)
  405f4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405f4e:	48 8b 10             	mov    (%rax),%rdx
  405f51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405f55:	48 8b 00             	mov    (%rax),%rax
  405f58:	48 39 c2             	cmp    %rax,%rdx
  405f5b:	76 09                	jbe    405f66 <_D3std8typeinfo8ti_ulong10TypeInfo_m7compareMFPvPvZi+0x55>
	    return 1;
  405f5d:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  405f64:	eb 07                	jmp    405f6d <_D3std8typeinfo8ti_ulong10TypeInfo_m7compareMFPvPvZi+0x5c>
	return 0;
  405f66:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  405f6d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    }
  405f70:	c9                   	leaveq 
  405f71:	c3                   	retq   

0000000000405f72 <_D3std8typeinfo8ti_ulong10TypeInfo_m5tsizeMFZm>:

    size_t tsize()
  405f72:	55                   	push   %rbp
  405f73:	48 89 e5             	mov    %rsp,%rbp
  405f76:	48 83 ec 10          	sub    $0x10,%rsp
  405f7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405f7e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  405f82:	e8 f5 33 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return ulong.sizeof;
  405f87:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  405f8c:	c9                   	leaveq 
  405f8d:	c3                   	retq   

0000000000405f8e <_D3std8typeinfo8ti_ulong10TypeInfo_m4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  405f8e:	55                   	push   %rbp
  405f8f:	48 89 e5             	mov    %rsp,%rbp
  405f92:	48 83 ec 30          	sub    $0x30,%rsp
  405f96:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405f9a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  405f9e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  405fa2:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  405fa6:	e8 d1 33 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ulong t;
  405fab:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  405fb2:	00 

	t = *cast(ulong *)p1;
  405fb3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405fb7:	48 8b 00             	mov    (%rax),%rax
  405fba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(ulong *)p1 = *cast(ulong *)p2;
  405fbe:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405fc2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405fc6:	48 8b 00             	mov    (%rax),%rax
  405fc9:	48 89 02             	mov    %rax,(%rdx)
	*cast(ulong *)p2 = t;
  405fcc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405fd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405fd4:	48 89 02             	mov    %rax,(%rdx)
    }
  405fd7:	c9                   	leaveq 
  405fd8:	c3                   	retq   
  405fd9:	90                   	nop    
  405fda:	90                   	nop    
  405fdb:	90                   	nop    

0000000000405fdc <_D3std8typeinfo9ti_ushort10TypeInfo_t8toStringMFZAa>:

module std.typeinfo.ti_ushort;

class TypeInfo_t : TypeInfo
{
    char[] toString() { return "ushort"; }
  405fdc:	55                   	push   %rbp
  405fdd:	48 89 e5             	mov    %rsp,%rbp
  405fe0:	53                   	push   %rbx
  405fe1:	48 83 ec 08          	sub    $0x8,%rsp
  405fe5:	48 89 fb             	mov    %rdi,%rbx
  405fe8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405fec:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  405ff0:	e8 87 33 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  405ff5:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  405ffc:	48 c7 43 08 80 16 41 	movq   $0x411680,0x8(%rbx)
  406003:	00 
  406004:	48 89 d8             	mov    %rbx,%rax
  406007:	48 83 c4 08          	add    $0x8,%rsp
  40600b:	5b                   	pop    %rbx
  40600c:	c9                   	leaveq 
  40600d:	c3                   	retq   

000000000040600e <_D3std8typeinfo9ti_ushort10TypeInfo_t7getHashMFPvZm>:

    hash_t getHash(void *p)
  40600e:	55                   	push   %rbp
  40600f:	48 89 e5             	mov    %rsp,%rbp
  406012:	48 83 ec 10          	sub    $0x10,%rsp
  406016:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40601a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40601e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406022:	e8 55 33 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ushort *)p;
  406027:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40602b:	0f b7 00             	movzwl (%rax),%eax
  40602e:	0f b7 c0             	movzwl %ax,%eax
    }
  406031:	c9                   	leaveq 
  406032:	c3                   	retq   

0000000000406033 <_D3std8typeinfo9ti_ushort10TypeInfo_t6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  406033:	55                   	push   %rbp
  406034:	48 89 e5             	mov    %rsp,%rbp
  406037:	48 83 ec 20          	sub    $0x20,%rsp
  40603b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40603f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406043:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  406047:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40604b:	e8 2c 33 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ushort *)p1 == *cast(ushort *)p2;
  406050:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406054:	0f b7 10             	movzwl (%rax),%edx
  406057:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40605b:	0f b7 00             	movzwl (%rax),%eax
  40605e:	66 39 c2             	cmp    %ax,%dx
  406061:	0f 94 c0             	sete   %al
  406064:	0f b6 c0             	movzbl %al,%eax
    }
  406067:	c9                   	leaveq 
  406068:	c3                   	retq   

0000000000406069 <_D3std8typeinfo9ti_ushort10TypeInfo_t7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  406069:	55                   	push   %rbp
  40606a:	48 89 e5             	mov    %rsp,%rbp
  40606d:	48 83 ec 20          	sub    $0x20,%rsp
  406071:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406075:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406079:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40607d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406081:	e8 f6 32 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ushort *)p1 - *cast(ushort *)p2;
  406086:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40608a:	0f b7 00             	movzwl (%rax),%eax
  40608d:	0f b7 d0             	movzwl %ax,%edx
  406090:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406094:	0f b7 00             	movzwl (%rax),%eax
  406097:	0f b7 c0             	movzwl %ax,%eax
  40609a:	89 d1                	mov    %edx,%ecx
  40609c:	29 c1                	sub    %eax,%ecx
  40609e:	89 c8                	mov    %ecx,%eax
    }
  4060a0:	c9                   	leaveq 
  4060a1:	c3                   	retq   

00000000004060a2 <_D3std8typeinfo9ti_ushort10TypeInfo_t5tsizeMFZm>:

    size_t tsize()
  4060a2:	55                   	push   %rbp
  4060a3:	48 89 e5             	mov    %rsp,%rbp
  4060a6:	48 83 ec 10          	sub    $0x10,%rsp
  4060aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4060ae:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4060b2:	e8 c5 32 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return ushort.sizeof;
  4060b7:	b8 02 00 00 00       	mov    $0x2,%eax
    }
  4060bc:	c9                   	leaveq 
  4060bd:	c3                   	retq   

00000000004060be <_D3std8typeinfo9ti_ushort10TypeInfo_t4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  4060be:	55                   	push   %rbp
  4060bf:	48 89 e5             	mov    %rsp,%rbp
  4060c2:	48 83 ec 30          	sub    $0x30,%rsp
  4060c6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4060ca:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4060ce:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4060d2:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4060d6:	e8 a1 32 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ushort t;
  4060db:	66 c7 45 fe 00 00    	movw   $0x0,-0x2(%rbp)

	t = *cast(ushort *)p1;
  4060e1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4060e5:	0f b7 00             	movzwl (%rax),%eax
  4060e8:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	*cast(ushort *)p1 = *cast(ushort *)p2;
  4060ec:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4060f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4060f4:	0f b7 00             	movzwl (%rax),%eax
  4060f7:	66 89 02             	mov    %ax,(%rdx)
	*cast(ushort *)p2 = t;
  4060fa:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4060fe:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  406102:	66 89 02             	mov    %ax,(%rdx)
    }
  406105:	c9                   	leaveq 
  406106:	c3                   	retq   
  406107:	90                   	nop    

0000000000406108 <_D3std8typeinfo7ti_void10TypeInfo_v8toStringMFZAa>:

module std.typeinfo.ti_void;

class TypeInfo_v : TypeInfo
{
    char[] toString() { return "void"; }
  406108:	55                   	push   %rbp
  406109:	48 89 e5             	mov    %rsp,%rbp
  40610c:	53                   	push   %rbx
  40610d:	48 83 ec 08          	sub    $0x8,%rsp
  406111:	48 89 fb             	mov    %rdi,%rbx
  406114:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406118:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40611c:	e8 5b 32 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  406121:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  406128:	48 c7 43 08 40 17 41 	movq   $0x411740,0x8(%rbx)
  40612f:	00 
  406130:	48 89 d8             	mov    %rbx,%rax
  406133:	48 83 c4 08          	add    $0x8,%rsp
  406137:	5b                   	pop    %rbx
  406138:	c9                   	leaveq 
  406139:	c3                   	retq   

000000000040613a <_D3std8typeinfo7ti_void10TypeInfo_v7getHashMFPvZm>:

    hash_t getHash(void *p)
  40613a:	55                   	push   %rbp
  40613b:	48 89 e5             	mov    %rsp,%rbp
  40613e:	48 83 ec 20          	sub    $0x20,%rsp
  406142:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406146:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40614a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40614e:	e8 29 32 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	assert(0);
  406153:	48 c7 45 f0 16 00 00 	movq   $0x16,-0x10(%rbp)
  40615a:	00 
  40615b:	48 c7 45 f8 45 17 41 	movq   $0x411745,-0x8(%rbp)
  406162:	00 
  406163:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  406167:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40616b:	ba 0c 00 00 00       	mov    $0xc,%edx
  406170:	e8 5d 4c 00 00       	callq  40add2 <_d_assert>
    }
  406175:	c9                   	leaveq 
  406176:	c3                   	retq   

0000000000406177 <_D3std8typeinfo7ti_void10TypeInfo_v6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  406177:	55                   	push   %rbp
  406178:	48 89 e5             	mov    %rsp,%rbp
  40617b:	48 83 ec 20          	sub    $0x20,%rsp
  40617f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406183:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406187:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40618b:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40618f:	e8 e8 31 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(byte *)p1 == *cast(byte *)p2;
  406194:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406198:	0f b6 10             	movzbl (%rax),%edx
  40619b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40619f:	0f b6 00             	movzbl (%rax),%eax
  4061a2:	38 c2                	cmp    %al,%dl
  4061a4:	0f 94 c0             	sete   %al
  4061a7:	0f b6 c0             	movzbl %al,%eax
    }
  4061aa:	c9                   	leaveq 
  4061ab:	c3                   	retq   

00000000004061ac <_D3std8typeinfo7ti_void10TypeInfo_v7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4061ac:	55                   	push   %rbp
  4061ad:	48 89 e5             	mov    %rsp,%rbp
  4061b0:	48 83 ec 20          	sub    $0x20,%rsp
  4061b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4061b8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4061bc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4061c0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4061c4:	e8 b3 31 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(byte *)p1 - *cast(byte *)p2;
  4061c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4061cd:	0f b6 00             	movzbl (%rax),%eax
  4061d0:	0f be d0             	movsbl %al,%edx
  4061d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4061d7:	0f b6 00             	movzbl (%rax),%eax
  4061da:	0f be c0             	movsbl %al,%eax
  4061dd:	89 d1                	mov    %edx,%ecx
  4061df:	29 c1                	sub    %eax,%ecx
  4061e1:	89 c8                	mov    %ecx,%eax
    }
  4061e3:	c9                   	leaveq 
  4061e4:	c3                   	retq   

00000000004061e5 <_D3std8typeinfo7ti_void10TypeInfo_v5tsizeMFZm>:

    size_t tsize()
  4061e5:	55                   	push   %rbp
  4061e6:	48 89 e5             	mov    %rsp,%rbp
  4061e9:	48 83 ec 10          	sub    $0x10,%rsp
  4061ed:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4061f1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4061f5:	e8 82 31 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return void.sizeof;
  4061fa:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  4061ff:	c9                   	leaveq 
  406200:	c3                   	retq   

0000000000406201 <_D3std8typeinfo7ti_void10TypeInfo_v4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  406201:	55                   	push   %rbp
  406202:	48 89 e5             	mov    %rsp,%rbp
  406205:	48 83 ec 30          	sub    $0x30,%rsp
  406209:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40620d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  406211:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  406215:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  406219:	e8 5e 31 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	byte t;
  40621e:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)

	t = *cast(byte *)p1;
  406222:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406226:	0f b6 00             	movzbl (%rax),%eax
  406229:	88 45 ff             	mov    %al,-0x1(%rbp)
	*cast(byte *)p1 = *cast(byte *)p2;
  40622c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  406230:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406234:	0f b6 00             	movzbl (%rax),%eax
  406237:	88 02                	mov    %al,(%rdx)
	*cast(byte *)p2 = t;
  406239:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40623d:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  406241:	88 02                	mov    %al,(%rdx)
    }
  406243:	c9                   	leaveq 
  406244:	c3                   	retq   

0000000000406245 <_D3std8typeinfo7ti_void10TypeInfo_v5flagsMFZk>:

    uint flags()
  406245:	55                   	push   %rbp
  406246:	48 89 e5             	mov    %rsp,%rbp
  406249:	48 83 ec 10          	sub    $0x10,%rsp
  40624d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406251:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406255:	e8 22 31 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  40625a:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  40625f:	c9                   	leaveq 
  406260:	c3                   	retq   
  406261:	90                   	nop    
  406262:	90                   	nop    
  406263:	90                   	nop    

0000000000406264 <_D3std8typeinfo8ti_wchar10TypeInfo_u8toStringMFZAa>:
module std.typeinfo.ti_wchar;


class TypeInfo_u : TypeInfo
{
    char[] toString() { return "wchar"; }
  406264:	55                   	push   %rbp
  406265:	48 89 e5             	mov    %rsp,%rbp
  406268:	53                   	push   %rbx
  406269:	48 83 ec 08          	sub    $0x8,%rsp
  40626d:	48 89 fb             	mov    %rdi,%rbx
  406270:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406274:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  406278:	e8 ff 30 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  40627d:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  406284:	48 c7 43 08 00 18 41 	movq   $0x411800,0x8(%rbx)
  40628b:	00 
  40628c:	48 89 d8             	mov    %rbx,%rax
  40628f:	48 83 c4 08          	add    $0x8,%rsp
  406293:	5b                   	pop    %rbx
  406294:	c9                   	leaveq 
  406295:	c3                   	retq   

0000000000406296 <_D3std8typeinfo8ti_wchar10TypeInfo_u7getHashMFPvZm>:

    hash_t getHash(void *p)
  406296:	55                   	push   %rbp
  406297:	48 89 e5             	mov    %rsp,%rbp
  40629a:	48 83 ec 10          	sub    $0x10,%rsp
  40629e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4062a2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4062a6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4062aa:	e8 cd 30 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(wchar *)p;
  4062af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4062b3:	0f b7 00             	movzwl (%rax),%eax
  4062b6:	0f b7 c0             	movzwl %ax,%eax
    }
  4062b9:	c9                   	leaveq 
  4062ba:	c3                   	retq   

00000000004062bb <_D3std8typeinfo8ti_wchar10TypeInfo_u6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  4062bb:	55                   	push   %rbp
  4062bc:	48 89 e5             	mov    %rsp,%rbp
  4062bf:	48 83 ec 20          	sub    $0x20,%rsp
  4062c3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4062c7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4062cb:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4062cf:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4062d3:	e8 a4 30 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(wchar *)p1 == *cast(wchar *)p2;
  4062d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4062dc:	0f b7 10             	movzwl (%rax),%edx
  4062df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4062e3:	0f b7 00             	movzwl (%rax),%eax
  4062e6:	66 39 c2             	cmp    %ax,%dx
  4062e9:	0f 94 c0             	sete   %al
  4062ec:	0f b6 c0             	movzbl %al,%eax
    }
  4062ef:	c9                   	leaveq 
  4062f0:	c3                   	retq   

00000000004062f1 <_D3std8typeinfo8ti_wchar10TypeInfo_u7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  4062f1:	55                   	push   %rbp
  4062f2:	48 89 e5             	mov    %rsp,%rbp
  4062f5:	48 83 ec 20          	sub    $0x20,%rsp
  4062f9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4062fd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406301:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  406305:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406309:	e8 6e 30 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(wchar *)p1 - *cast(wchar *)p2;
  40630e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406312:	0f b7 00             	movzwl (%rax),%eax
  406315:	0f b7 d0             	movzwl %ax,%edx
  406318:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40631c:	0f b7 00             	movzwl (%rax),%eax
  40631f:	0f b7 c0             	movzwl %ax,%eax
  406322:	89 d1                	mov    %edx,%ecx
  406324:	29 c1                	sub    %eax,%ecx
  406326:	89 c8                	mov    %ecx,%eax
    }
  406328:	c9                   	leaveq 
  406329:	c3                   	retq   

000000000040632a <_D3std8typeinfo8ti_wchar10TypeInfo_u5tsizeMFZm>:

    size_t tsize()
  40632a:	55                   	push   %rbp
  40632b:	48 89 e5             	mov    %rsp,%rbp
  40632e:	48 83 ec 10          	sub    $0x10,%rsp
  406332:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406336:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40633a:	e8 3d 30 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return wchar.sizeof;
  40633f:	b8 02 00 00 00       	mov    $0x2,%eax
    }
  406344:	c9                   	leaveq 
  406345:	c3                   	retq   

0000000000406346 <_D3std8typeinfo8ti_wchar10TypeInfo_u4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  406346:	55                   	push   %rbp
  406347:	48 89 e5             	mov    %rsp,%rbp
  40634a:	48 83 ec 30          	sub    $0x30,%rsp
  40634e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406352:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  406356:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40635a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40635e:	e8 19 30 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {
	wchar t;
  406363:	66 c7 45 fe ff ff    	movw   $0xffff,-0x2(%rbp)

	t = *cast(wchar *)p1;
  406369:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40636d:	0f b7 00             	movzwl (%rax),%eax
  406370:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	*cast(wchar *)p1 = *cast(wchar *)p2;
  406374:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  406378:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40637c:	0f b7 00             	movzwl (%rax),%eax
  40637f:	66 89 02             	mov    %ax,(%rdx)
	*cast(wchar *)p2 = t;
  406382:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  406386:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  40638a:	66 89 02             	mov    %ax,(%rdx)
    }
  40638d:	c9                   	leaveq 
  40638e:	c3                   	retq   

000000000040638f <_D3std8typeinfo8ti_wchar10TypeInfo_u4initMFZAv>:

    void[] init()
  40638f:	55                   	push   %rbp
  406390:	48 89 e5             	mov    %rsp,%rbp
  406393:	53                   	push   %rbx
  406394:	48 83 ec 28          	sub    $0x28,%rsp
  406398:	48 89 fb             	mov    %rdi,%rbx
  40639b:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40639f:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4063a3:	e8 d4 2f 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
    {	static wchar c;

	return (cast(wchar *)&c)[0 .. 1];
  4063a8:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  4063af:	00 
  4063b0:	48 c7 45 e8 60 bc 41 	movq   $0x41bc60,-0x18(%rbp)
  4063b7:	00 
  4063b8:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4063bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4063c0:	49 89 c0             	mov    %rax,%r8
  4063c3:	ba 02 00 00 00       	mov    $0x2,%edx
  4063c8:	be 01 00 00 00       	mov    $0x1,%esi
  4063cd:	48 89 df             	mov    %rbx,%rdi
  4063d0:	e8 4a 72 00 00       	callq  40d61f <_d_arraycast>
    }
  4063d5:	48 89 d8             	mov    %rbx,%rax
  4063d8:	48 83 c4 28          	add    $0x28,%rsp
  4063dc:	5b                   	pop    %rbx
  4063dd:	c9                   	leaveq 
  4063de:	c3                   	retq   
  4063df:	90                   	nop    

00000000004063e0 <_D6object6Object8toStringMFZAa>:
class Object
{
	/**
	 * Convert Object to a human readable string.
	 */
	char[] toString()
  4063e0:	55                   	push   %rbp
  4063e1:	48 89 e5             	mov    %rsp,%rbp
  4063e4:	53                   	push   %rbx
  4063e5:	48 83 ec 08          	sub    $0x8,%rsp
  4063e9:	48 89 fb             	mov    %rdi,%rbx
  4063ec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4063f0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4063f4:	e8 83 2f 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return this.classinfo.name;
  4063f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4063fd:	48 8b 00             	mov    (%rax),%rax
  406400:	48 8b 10             	mov    (%rax),%rdx
  406403:	48 8b 42 20          	mov    0x20(%rdx),%rax
  406407:	48 89 03             	mov    %rax,(%rbx)
  40640a:	48 8b 42 28          	mov    0x28(%rdx),%rax
  40640e:	48 89 43 08          	mov    %rax,0x8(%rbx)
	}
  406412:	48 89 d8             	mov    %rbx,%rax
  406415:	48 83 c4 08          	add    $0x8,%rsp
  406419:	5b                   	pop    %rbx
  40641a:	c9                   	leaveq 
  40641b:	c3                   	retq   

000000000040641c <_D6object6Object6toHashMFZm>:

	/**
	 * Compute hash function for Object.
	 */
	hash_t toHash()
  40641c:	55                   	push   %rbp
  40641d:	48 89 e5             	mov    %rsp,%rbp
  406420:	48 83 ec 10          	sub    $0x10,%rsp
  406424:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406428:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40642c:	e8 4b 2f 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		// BUG: this prevents a compacting GC from working, needs to be fixed
		return cast(uint)cast(void *)this;
  406431:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406435:	89 c0                	mov    %eax,%eax
	}
  406437:	c9                   	leaveq 
  406438:	c3                   	retq   

0000000000406439 <_D6object6Object5opCmpMFC6ObjectZi>:
	 *	$(TR $(TD this &lt; obj) $(TD &lt; 0))
	 *	$(TR $(TD this == obj) $(TD 0))
	 *	$(TR $(TD this &gt; obj) $(TD &gt; 0))
	 *	)
	 */
	int opCmp(Object o)
  406439:	55                   	push   %rbp
  40643a:	48 89 e5             	mov    %rsp,%rbp
  40643d:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  406444:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  406448:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  40644c:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
  406450:	e8 27 2f 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		// BUG: this prevents a compacting GC from working, needs to be fixed
		//return cast(int)cast(void *)this - cast(int)cast(void *)o;

		throw new Error("need opCmp for class " ~ this.classinfo.name);
  406455:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  406459:	48 8b 00             	mov    (%rax),%rax
  40645c:	48 8b 10             	mov    (%rax),%rdx
  40645f:	48 8b 42 20          	mov    0x20(%rdx),%rax
  406463:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  406467:	48 8b 42 28          	mov    0x28(%rdx),%rax
  40646b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  40646f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  406473:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  406477:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40647b:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  40647f:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  406483:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  406487:	48 8b 00             	mov    (%rax),%rax
  40648a:	48 8b 10             	mov    (%rax),%rdx
  40648d:	48 8b 42 20          	mov    0x20(%rdx),%rax
  406491:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  406495:	48 8b 42 28          	mov    0x28(%rdx),%rax
  406499:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40649d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4064a1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  4064a5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4064a9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  4064ad:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4064b1:	48 c7 45 d0 15 00 00 	movq   $0x15,-0x30(%rbp)
  4064b8:	00 
  4064b9:	48 c7 45 d8 d0 18 41 	movq   $0x4118d0,-0x28(%rbp)
  4064c0:	00 
  4064c1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4064c5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4064c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4064cd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4064d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4064d5:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4064d9:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
  4064dd:	48 89 34 24          	mov    %rsi,(%rsp)
  4064e1:	49 89 d1             	mov    %rdx,%r9
  4064e4:	49 89 c0             	mov    %rax,%r8
  4064e7:	ba 02 00 00 00       	mov    $0x2,%edx
  4064ec:	48 c7 c6 00 ff 40 00 	mov    $0x40ff00,%rsi
  4064f3:	b8 00 00 00 00       	mov    $0x0,%eax
  4064f8:	e8 2e 42 00 00       	callq  40a72b <_d_arraycatnT>
  4064fd:	48 c7 c7 20 c7 41 00 	mov    $0x41c720,%rdi
  406504:	e8 2c 3d 00 00       	callq  40a235 <_d_newclass>
  406509:	48 89 c7             	mov    %rax,%rdi
  40650c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  406510:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  406514:	e8 e4 2d 00 00       	callq  4092fd <_D6object5Error5_ctorMFAaZC6object5Error>
  406519:	48 89 c7             	mov    %rax,%rdi
  40651c:	e8 cd 4b 00 00       	callq  40b0ee <_d_throw>
	}
  406521:	c9                   	leaveq 
  406522:	c3                   	retq   

0000000000406523 <_D6object6Object8opEqualsMFC6ObjectZi>:

	/**
	 * Returns !=0 if this object does have the same contents as obj.
	 */
	int opEquals(Object o)
  406523:	55                   	push   %rbp
  406524:	48 89 e5             	mov    %rsp,%rbp
  406527:	48 83 ec 10          	sub    $0x10,%rsp
  40652b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40652f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406533:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406537:	e8 40 2e 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return cast(int)(this is o);
  40653c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406540:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  406544:	0f 94 c0             	sete   %al
  406547:	0f b6 c0             	movzbl %al,%eax
	}
  40654a:	c9                   	leaveq 
  40654b:	c3                   	retq   

000000000040654c <_D6object9ClassInfo6createMFZC6Object>:
	}*/

	/********************
	 * Create instance of Object represented by 'this'.
	 */
	Object create()
  40654c:	55                   	push   %rbp
  40654d:	48 89 e5             	mov    %rsp,%rbp
  406550:	48 83 ec 20          	sub    $0x20,%rsp
  406554:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406558:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40655c:	e8 1b 2e 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		if (flags & 8 && !defaultConstructor)
  406561:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406565:	8b 40 68             	mov    0x68(%rax),%eax
  406568:	83 e0 08             	and    $0x8,%eax
  40656b:	85 c0                	test   %eax,%eax
  40656d:	74 22                	je     406591 <_D6object9ClassInfo6createMFZC6Object+0x45>
  40656f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406573:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  40657a:	48 85 c0             	test   %rax,%rax
  40657d:	0f 95 c0             	setne  %al
  406580:	83 f0 01             	xor    $0x1,%eax
  406583:	84 c0                	test   %al,%al
  406585:	74 0a                	je     406591 <_D6object9ClassInfo6createMFZC6Object+0x45>
			return null;
  406587:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40658e:	00 
  40658f:	eb 44                	jmp    4065d5 <_D6object9ClassInfo6createMFZC6Object+0x89>
		Object o = _d_newclass(this);
  406591:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  406595:	e8 9b 3c 00 00       	callq  40a235 <_d_newclass>
  40659a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (flags & 8 && defaultConstructor)
  40659e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4065a2:	8b 40 68             	mov    0x68(%rax),%eax
  4065a5:	83 e0 08             	and    $0x8,%eax
  4065a8:	85 c0                	test   %eax,%eax
  4065aa:	74 21                	je     4065cd <_D6object9ClassInfo6createMFZC6Object+0x81>
  4065ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4065b0:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  4065b7:	48 85 c0             	test   %rax,%rax
  4065ba:	74 11                	je     4065cd <_D6object9ClassInfo6createMFZC6Object+0x81>
		{
			defaultConstructor(o);
  4065bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4065c0:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  4065c7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4065cb:	ff d0                	callq  *%rax
		}
		return o;
  4065cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4065d1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4065d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
	}
  4065d9:	c9                   	leaveq 
  4065da:	c3                   	retq   

00000000004065db <_D6object8TypeInfo6toHashMFZm>:
 * Can be retrieved for any type using a
 * <a href="../expression.html#typeidexpression">TypeidExpression</a>.
 */
class TypeInfo
{
	hash_t toHash()
  4065db:	55                   	push   %rbp
  4065dc:	48 89 e5             	mov    %rsp,%rbp
  4065df:	48 83 ec 40          	sub    $0x40,%rsp
  4065e3:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  4065e7:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4065eb:	e8 8c 2d 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{	hash_t hash;
  4065f0:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4065f7:	00 

		foreach (char c; this.toString())
  4065f8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4065fc:	48 8b 00             	mov    (%rax),%rax
  4065ff:	48 83 c0 08          	add    $0x8,%rax
  406603:	48 8b 00             	mov    (%rax),%rax
  406606:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40660a:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
  40660e:	ff d0                	callq  *%rax
  406610:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406614:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  406618:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40661c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  406620:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406624:	48 03 45 c0          	add    -0x40(%rbp),%rax
  406628:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40662c:	0f 95 c0             	setne  %al
  40662f:	83 f0 01             	xor    $0x1,%eax
  406632:	84 c0                	test   %al,%al
  406634:	75 2b                	jne    406661 <_D6object8TypeInfo6toHashMFZm+0x86>
  406636:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40663a:	0f b6 00             	movzbl (%rax),%eax
  40663d:	88 45 ff             	mov    %al,-0x1(%rbp)
			hash = hash * 9 + c;
  406640:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406644:	48 89 d0             	mov    %rdx,%rax
  406647:	48 c1 e0 03          	shl    $0x3,%rax
  40664b:	48 8d 14 10          	lea    (%rax,%rdx,1),%rdx
  40664f:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  406653:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  406657:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40665b:	48 ff 45 f0          	incq   -0x10(%rbp)
  40665f:	eb bf                	jmp    406620 <_D6object8TypeInfo6toHashMFZm+0x45>
		return hash;
  406661:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  406665:	c9                   	leaveq 
  406666:	c3                   	retq   

0000000000406667 <_D6object8TypeInfo5opCmpMFC6ObjectZi>:

	int opCmp(Object o)
  406667:	55                   	push   %rbp
  406668:	48 89 e5             	mov    %rsp,%rbp
  40666b:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  406672:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  406676:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  40667a:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  40667e:	e8 f9 2c 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		if (this is o)
  406683:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  406687:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
  40668b:	75 0f                	jne    40669c <_D6object8TypeInfo5opCmpMFC6ObjectZi+0x35>
			return 0;
  40668d:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%rbp)
  406694:	00 00 00 
  406697:	e9 d6 00 00 00       	jmpq   406772 <_D6object8TypeInfo5opCmpMFC6ObjectZi+0x10b>
		TypeInfo ti = cast(TypeInfo)o;
  40669c:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  4066a0:	48 c7 c6 60 be 41 00 	mov    $0x41be60,%rsi
  4066a7:	e8 13 2f 00 00       	callq  4095bf <_d_dynamic_cast>
  4066ac:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (ti is null)
  4066b0:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4066b5:	75 0f                	jne    4066c6 <_D6object8TypeInfo5opCmpMFC6ObjectZi+0x5f>
			return 1;
  4066b7:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%rbp)
  4066be:	00 00 00 
  4066c1:	e9 ac 00 00 00       	jmpq   406772 <_D6object8TypeInfo5opCmpMFC6ObjectZi+0x10b>
			
		char[] t = this.toString();
  4066c6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4066ca:	48 8b 00             	mov    (%rax),%rax
  4066cd:	48 83 c0 08          	add    $0x8,%rax
  4066d1:	48 8b 00             	mov    (%rax),%rax
  4066d4:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  4066d8:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  4066dc:	ff d0                	callq  *%rax
  4066de:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4066e2:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4066e6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4066ea:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		char[] other = this.toString();
  4066ee:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4066f2:	48 8b 00             	mov    (%rax),%rax
  4066f5:	48 83 c0 08          	add    $0x8,%rax
  4066f9:	48 8b 00             	mov    (%rax),%rax
  4066fc:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  406700:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  406704:	ff d0                	callq  *%rax
  406706:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40670a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40670e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  406712:	48 89 45 c8          	mov    %rax,-0x38(%rbp)

		typeid(typeof(this.toString())).compare(&t, &other);
  406716:	48 8b 05 e3 97 00 00 	mov    0x97e3(%rip),%rax        # 40ff00 <_D11TypeInfo_Aa6__initZ>
  40671d:	48 83 c0 38          	add    $0x38,%rax
  406721:	48 8b 00             	mov    (%rax),%rax
  406724:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  406728:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
  40672c:	48 c7 c7 00 ff 40 00 	mov    $0x40ff00,%rdi
  406733:	ff d0                	callq  *%rax
  406735:	48 c7 45 d0 08 00 00 	movq   $0x8,-0x30(%rbp)
  40673c:	00 
  40673d:	48 c7 45 d8 80 1a 41 	movq   $0x411a80,-0x28(%rbp)
  406744:	00 
  406745:	48 c7 45 e0 19 00 00 	movq   $0x19,-0x20(%rbp)
  40674c:	00 
  40674d:	48 c7 45 e8 89 1a 41 	movq   $0x411a89,-0x18(%rbp)
  406754:	00 
  406755:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  406759:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  40675d:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  406761:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  406765:	41 b8 60 01 00 00    	mov    $0x160,%r8d
  40676b:	e8 8d 46 00 00       	callq  40adfd <_d_assert_msg>
	}
  406770:	eb 0c                	jmp    40677e <_D6object8TypeInfo5opCmpMFC6ObjectZi+0x117>
  406772:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  406778:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  40677e:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
  406784:	c9                   	leaveq 
  406785:	c3                   	retq   

0000000000406786 <_D6object8TypeInfo8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  406786:	55                   	push   %rbp
  406787:	48 89 e5             	mov    %rsp,%rbp
  40678a:	53                   	push   %rbx
  40678b:	48 83 ec 68          	sub    $0x68,%rsp
  40678f:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  406793:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  406797:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  40679b:	e8 dc 2b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		/* TypeInfo instances are singletons, but duplicates can exist
		 * across DLL's. Therefore, comparing for a name match is
		 * sufficient.
		 */
		if (this is o)
  4067a0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4067a4:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  4067a8:	75 0c                	jne    4067b6 <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0x30>
			return 1;
  4067aa:	c7 45 a8 01 00 00 00 	movl   $0x1,-0x58(%rbp)
  4067b1:	e9 af 00 00 00       	jmpq   406865 <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0xdf>
		TypeInfo ti = cast(TypeInfo)o;
  4067b6:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  4067ba:	48 c7 c6 60 be 41 00 	mov    $0x41be60,%rsi
  4067c1:	e8 f9 2d 00 00       	callq  4095bf <_d_dynamic_cast>
  4067c6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		return cast(int)(ti && this.toString() == ti.toString());
  4067ca:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  4067cf:	0f 84 85 00 00 00    	je     40685a <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0xd4>
  4067d5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4067d9:	48 8b 00             	mov    (%rax),%rax
  4067dc:	48 83 c0 08          	add    $0x8,%rax
  4067e0:	48 8b 00             	mov    (%rax),%rax
  4067e3:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  4067e7:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
  4067eb:	ff d0                	callq  *%rax
  4067ed:	48 8b 5d c0          	mov    -0x40(%rbp),%rbx
  4067f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4067f5:	48 8b 00             	mov    (%rax),%rax
  4067f8:	48 83 c0 08          	add    $0x8,%rax
  4067fc:	48 8b 00             	mov    (%rax),%rax
  4067ff:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  406803:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
  406807:	ff d0                	callq  *%rax
  406809:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40680d:	48 39 c3             	cmp    %rax,%rbx
  406810:	75 48                	jne    40685a <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0xd4>
  406812:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  406816:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40681a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40681e:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  406822:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  406826:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  40682a:	fc                   	cld    
  40682b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40682f:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
  406833:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  406837:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40683b:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  40683f:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  406841:	0f 97 c2             	seta   %dl
  406844:	0f 92 c0             	setb   %al
  406847:	89 d1                	mov    %edx,%ecx
  406849:	28 c1                	sub    %al,%cl
  40684b:	89 c8                	mov    %ecx,%eax
  40684d:	0f be c0             	movsbl %al,%eax
  406850:	85 c0                	test   %eax,%eax
  406852:	75 06                	jne    40685a <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0xd4>
  406854:	c6 45 af 01          	movb   $0x1,-0x51(%rbp)
  406858:	eb 04                	jmp    40685e <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0xd8>
  40685a:	c6 45 af 00          	movb   $0x0,-0x51(%rbp)
  40685e:	0f b6 75 af          	movzbl -0x51(%rbp),%esi
  406862:	89 75 a8             	mov    %esi,-0x58(%rbp)
  406865:	8b 45 a8             	mov    -0x58(%rbp),%eax
	}
  406868:	48 83 c4 68          	add    $0x68,%rsp
  40686c:	5b                   	pop    %rbx
  40686d:	c9                   	leaveq 
  40686e:	c3                   	retq   

000000000040686f <_D6object8TypeInfo7getHashMFPvZm>:

	/// Returns a hash of the instance of a type.
	hash_t getHash(void *p) { return cast(uint)p; }
  40686f:	55                   	push   %rbp
  406870:	48 89 e5             	mov    %rsp,%rbp
  406873:	48 83 ec 10          	sub    $0x10,%rsp
  406877:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40687b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40687f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406883:	e8 f4 2a 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  406888:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40688c:	89 c0                	mov    %eax,%eax
  40688e:	c9                   	leaveq 
  40688f:	c3                   	retq   

0000000000406890 <_D6object8TypeInfo6equalsMFPvPvZi>:

	/// Compares two instances for equality.
	int equals(void *p1, void *p2) { return cast(int)(p1 == p2); }
  406890:	55                   	push   %rbp
  406891:	48 89 e5             	mov    %rsp,%rbp
  406894:	48 83 ec 20          	sub    $0x20,%rsp
  406898:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40689c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4068a0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4068a4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4068a8:	e8 cf 2a 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  4068ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4068b1:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4068b5:	0f 94 c0             	sete   %al
  4068b8:	0f b6 c0             	movzbl %al,%eax
  4068bb:	c9                   	leaveq 
  4068bc:	c3                   	retq   

00000000004068bd <_D6object8TypeInfo7compareMFPvPvZi>:

	/// Compares two instances for &lt;, ==, or &gt;.
	int compare(void *p1, void *p2) { return 0; }
  4068bd:	55                   	push   %rbp
  4068be:	48 89 e5             	mov    %rsp,%rbp
  4068c1:	48 83 ec 20          	sub    $0x20,%rsp
  4068c5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4068c9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4068cd:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4068d1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4068d5:	e8 a2 2a 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  4068da:	b8 00 00 00 00       	mov    $0x0,%eax
  4068df:	c9                   	leaveq 
  4068e0:	c3                   	retq   

00000000004068e1 <_D6object8TypeInfo5tsizeMFZm>:

	/// Returns size of the type.
	size_t tsize() { return 0; }
  4068e1:	55                   	push   %rbp
  4068e2:	48 89 e5             	mov    %rsp,%rbp
  4068e5:	48 83 ec 10          	sub    $0x10,%rsp
  4068e9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4068ed:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4068f1:	e8 86 2a 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  4068f6:	b8 00 00 00 00       	mov    $0x0,%eax
  4068fb:	c9                   	leaveq 
  4068fc:	c3                   	retq   

00000000004068fd <_D6object8TypeInfo4swapMFPvPvZv>:

	/// Swaps two instances of the type.
	void swap(void *p1, void *p2)
  4068fd:	55                   	push   %rbp
  4068fe:	48 89 e5             	mov    %rsp,%rbp
  406901:	48 83 ec 40          	sub    $0x40,%rsp
  406905:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  406909:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40690d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  406911:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  406915:	e8 62 2a 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		size_t n = tsize();
  40691a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40691e:	48 8b 00             	mov    (%rax),%rax
  406921:	48 83 c0 40          	add    $0x40,%rax
  406925:	48 8b 00             	mov    (%rax),%rax
  406928:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  40692c:	ff d0                	callq  *%rax
  40692e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		for (size_t i = 0; i < n; i++)
  406932:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  406939:	00 
  40693a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40693e:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  406942:	0f 92 c0             	setb   %al
  406945:	83 f0 01             	xor    $0x1,%eax
  406948:	84 c0                	test   %al,%al
  40694a:	75 4a                	jne    406996 <_D6object8TypeInfo4swapMFPvPvZv+0x99>
		{	byte t;
  40694c:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)

			t = (cast(byte *)p1)[i];
  406950:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  406954:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406958:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40695c:	0f b6 00             	movzbl (%rax),%eax
  40695f:	88 45 ff             	mov    %al,-0x1(%rbp)
			(cast(byte *)p1)[i] = (cast(byte *)p2)[i];
  406962:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  406966:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40696a:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40696e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  406972:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406976:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40697a:	0f b6 00             	movzbl (%rax),%eax
  40697d:	88 01                	mov    %al,(%rcx)
			(cast(byte *)p2)[i] = t;
  40697f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  406983:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406987:	48 01 c2             	add    %rax,%rdx
  40698a:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40698e:	88 02                	mov    %al,(%rdx)
  406990:	48 ff 45 f0          	incq   -0x10(%rbp)
  406994:	eb a4                	jmp    40693a <_D6object8TypeInfo4swapMFPvPvZv+0x3d>
		}
	}
  406996:	c9                   	leaveq 
  406997:	c3                   	retq   

0000000000406998 <_D6object8TypeInfo4nextMFZC8TypeInfo>:

	/// Get TypeInfo for 'next' type, as defined by what kind of type this is,
	/// null if none.
	TypeInfo next() { return null; }
  406998:	55                   	push   %rbp
  406999:	48 89 e5             	mov    %rsp,%rbp
  40699c:	48 83 ec 10          	sub    $0x10,%rsp
  4069a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4069a4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4069a8:	e8 cf 29 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  4069ad:	b8 00 00 00 00       	mov    $0x0,%eax
  4069b2:	c9                   	leaveq 
  4069b3:	c3                   	retq   

00000000004069b4 <_D6object8TypeInfo4initMFZAv>:

	/// Return default initializer, null if default initialize to 0
	void[] init() { return null; }
  4069b4:	55                   	push   %rbp
  4069b5:	48 89 e5             	mov    %rsp,%rbp
  4069b8:	53                   	push   %rbx
  4069b9:	48 83 ec 08          	sub    $0x8,%rsp
  4069bd:	48 89 fb             	mov    %rdi,%rbx
  4069c0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4069c4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4069c8:	e8 af 29 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  4069cd:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  4069d4:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  4069db:	00 
  4069dc:	48 89 d8             	mov    %rbx,%rax
  4069df:	48 83 c4 08          	add    $0x8,%rsp
  4069e3:	5b                   	pop    %rbx
  4069e4:	c9                   	leaveq 
  4069e5:	c3                   	retq   

00000000004069e6 <_D6object8TypeInfo5flagsMFZk>:

	/// Get flags for type: 1 means GC should scan for pointers
	uint flags() { return 0; }
  4069e6:	55                   	push   %rbp
  4069e7:	48 89 e5             	mov    %rsp,%rbp
  4069ea:	48 83 ec 10          	sub    $0x10,%rsp
  4069ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4069f2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4069f6:	e8 81 29 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  4069fb:	b8 00 00 00 00       	mov    $0x0,%eax
  406a00:	c9                   	leaveq 
  406a01:	c3                   	retq   

0000000000406a02 <_D6object8TypeInfo5offTiMFZAS6object14OffsetTypeInfo>:

	/// Get type information on the contents of the type; null if not available
	OffsetTypeInfo[] offTi() { return null; }
  406a02:	55                   	push   %rbp
  406a03:	48 89 e5             	mov    %rsp,%rbp
  406a06:	53                   	push   %rbx
  406a07:	48 83 ec 08          	sub    $0x8,%rsp
  406a0b:	48 89 fb             	mov    %rdi,%rbx
  406a0e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406a12:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  406a16:	e8 61 29 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  406a1b:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  406a22:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  406a29:	00 
  406a2a:	48 89 d8             	mov    %rbx,%rax
  406a2d:	48 83 c4 08          	add    $0x8,%rsp
  406a31:	5b                   	pop    %rbx
  406a32:	c9                   	leaveq 
  406a33:	c3                   	retq   

0000000000406a34 <_D6object16TypeInfo_Typedef8toStringMFZAa>:
}

class TypeInfo_Typedef : TypeInfo
{
	char[] toString() { return name; }
  406a34:	55                   	push   %rbp
  406a35:	48 89 e5             	mov    %rsp,%rbp
  406a38:	53                   	push   %rbx
  406a39:	48 83 ec 08          	sub    $0x8,%rsp
  406a3d:	48 89 fb             	mov    %rdi,%rbx
  406a40:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406a44:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  406a48:	e8 2f 29 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  406a4d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  406a51:	48 8b 42 18          	mov    0x18(%rdx),%rax
  406a55:	48 89 03             	mov    %rax,(%rbx)
  406a58:	48 8b 42 20          	mov    0x20(%rdx),%rax
  406a5c:	48 89 43 08          	mov    %rax,0x8(%rbx)
  406a60:	48 89 d8             	mov    %rbx,%rax
  406a63:	48 83 c4 08          	add    $0x8,%rsp
  406a67:	5b                   	pop    %rbx
  406a68:	c9                   	leaveq 
  406a69:	c3                   	retq   

0000000000406a6a <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  406a6a:	55                   	push   %rbp
  406a6b:	48 89 e5             	mov    %rsp,%rbp
  406a6e:	48 83 ec 40          	sub    $0x40,%rsp
  406a72:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406a76:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  406a7a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  406a7e:	e8 f9 28 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Typedef c;
  406a83:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  406a8a:	00 

		return cast(int)
  406a8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406a8f:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  406a93:	0f 84 ad 00 00 00    	je     406b46 <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xdc>
  406a99:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  406a9d:	48 c7 c6 00 bf 41 00 	mov    $0x41bf00,%rsi
  406aa4:	e8 16 2b 00 00       	callq  4095bf <_d_dynamic_cast>
  406aa9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  406aad:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  406ab2:	0f 84 94 00 00 00    	je     406b4c <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xe2>
  406ab8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406abc:	48 8b 50 18          	mov    0x18(%rax),%rdx
  406ac0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406ac4:	48 8b 40 18          	mov    0x18(%rax),%rax
  406ac8:	48 39 c2             	cmp    %rax,%rdx
  406acb:	75 7f                	jne    406b4c <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xe2>
  406acd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406ad1:	48 8b 48 18          	mov    0x18(%rax),%rcx
  406ad5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406ad9:	48 8b 50 20          	mov    0x20(%rax),%rdx
  406add:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406ae1:	48 8b 40 20          	mov    0x20(%rax),%rax
  406ae5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  406ae9:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  406aed:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  406af1:	fc                   	cld    
  406af2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  406af6:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  406afa:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  406afe:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  406b02:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  406b06:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  406b08:	0f 97 c2             	seta   %dl
  406b0b:	0f 92 c0             	setb   %al
  406b0e:	89 d1                	mov    %edx,%ecx
  406b10:	28 c1                	sub    %al,%cl
  406b12:	89 c8                	mov    %ecx,%eax
  406b14:	0f be c0             	movsbl %al,%eax
  406b17:	85 c0                	test   %eax,%eax
  406b19:	75 31                	jne    406b4c <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xe2>
  406b1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406b1f:	48 8b 40 10          	mov    0x10(%rax),%rax
  406b23:	48 8b 00             	mov    (%rax),%rax
  406b26:	48 83 c0 20          	add    $0x20,%rax
  406b2a:	48 8b 10             	mov    (%rax),%rdx
  406b2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406b31:	48 8b 40 10          	mov    0x10(%rax),%rax
  406b35:	48 89 c6             	mov    %rax,%rsi
  406b38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406b3c:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406b40:	ff d2                	callq  *%rdx
  406b42:	85 c0                	test   %eax,%eax
  406b44:	74 06                	je     406b4c <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xe2>
  406b46:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  406b4a:	eb 04                	jmp    406b50 <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xe6>
  406b4c:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  406b50:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				(this is o ||
				((c = cast(TypeInfo_Typedef)o) !is null &&
				 this.name == c.name &&
				 this.base == c.base));
	}
  406b54:	c9                   	leaveq 
  406b55:	c3                   	retq   

0000000000406b56 <_D6object16TypeInfo_Typedef7getHashMFPvZm>:

	hash_t getHash(void *p) { return base.getHash(p); }
  406b56:	55                   	push   %rbp
  406b57:	48 89 e5             	mov    %rsp,%rbp
  406b5a:	48 83 ec 10          	sub    $0x10,%rsp
  406b5e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406b62:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406b66:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406b6a:	e8 0d 28 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  406b6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406b73:	48 8b 40 10          	mov    0x10(%rax),%rax
  406b77:	48 8b 00             	mov    (%rax),%rax
  406b7a:	48 83 c0 28          	add    $0x28,%rax
  406b7e:	48 8b 10             	mov    (%rax),%rdx
  406b81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406b85:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406b89:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  406b8d:	ff d2                	callq  *%rdx
  406b8f:	c9                   	leaveq 
  406b90:	c3                   	retq   

0000000000406b91 <_D6object16TypeInfo_Typedef6equalsMFPvPvZi>:
	int equals(void *p1, void *p2) { return base.equals(p1, p2); }
  406b91:	55                   	push   %rbp
  406b92:	48 89 e5             	mov    %rsp,%rbp
  406b95:	48 83 ec 20          	sub    $0x20,%rsp
  406b99:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406b9d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406ba1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  406ba5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406ba9:	e8 ce 27 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  406bae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406bb2:	48 8b 40 10          	mov    0x10(%rax),%rax
  406bb6:	48 8b 00             	mov    (%rax),%rax
  406bb9:	48 83 c0 30          	add    $0x30,%rax
  406bbd:	48 8b 08             	mov    (%rax),%rcx
  406bc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406bc4:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406bc8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406bcc:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  406bd0:	ff d1                	callq  *%rcx
  406bd2:	c9                   	leaveq 
  406bd3:	c3                   	retq   

0000000000406bd4 <_D6object16TypeInfo_Typedef7compareMFPvPvZi>:
	int compare(void *p1, void *p2) { return base.compare(p1, p2); }
  406bd4:	55                   	push   %rbp
  406bd5:	48 89 e5             	mov    %rsp,%rbp
  406bd8:	48 83 ec 20          	sub    $0x20,%rsp
  406bdc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406be0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406be4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  406be8:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406bec:	e8 8b 27 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  406bf1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406bf5:	48 8b 40 10          	mov    0x10(%rax),%rax
  406bf9:	48 8b 00             	mov    (%rax),%rax
  406bfc:	48 83 c0 38          	add    $0x38,%rax
  406c00:	48 8b 08             	mov    (%rax),%rcx
  406c03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406c07:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406c0b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406c0f:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  406c13:	ff d1                	callq  *%rcx
  406c15:	c9                   	leaveq 
  406c16:	c3                   	retq   

0000000000406c17 <_D6object16TypeInfo_Typedef5tsizeMFZm>:
	size_t tsize() { return base.tsize(); }
  406c17:	55                   	push   %rbp
  406c18:	48 89 e5             	mov    %rsp,%rbp
  406c1b:	48 83 ec 10          	sub    $0x10,%rsp
  406c1f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406c23:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406c27:	e8 50 27 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  406c2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406c30:	48 8b 40 10          	mov    0x10(%rax),%rax
  406c34:	48 8b 00             	mov    (%rax),%rax
  406c37:	48 83 c0 40          	add    $0x40,%rax
  406c3b:	48 8b 10             	mov    (%rax),%rdx
  406c3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406c42:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406c46:	ff d2                	callq  *%rdx
  406c48:	c9                   	leaveq 
  406c49:	c3                   	retq   

0000000000406c4a <_D6object16TypeInfo_Typedef4swapMFPvPvZv>:
	void swap(void *p1, void *p2) { return base.swap(p1, p2); }
  406c4a:	55                   	push   %rbp
  406c4b:	48 89 e5             	mov    %rsp,%rbp
  406c4e:	48 83 ec 20          	sub    $0x20,%rsp
  406c52:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406c56:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406c5a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  406c5e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406c62:	e8 15 27 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  406c67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406c6b:	48 8b 40 10          	mov    0x10(%rax),%rax
  406c6f:	48 8b 00             	mov    (%rax),%rax
  406c72:	48 83 c0 48          	add    $0x48,%rax
  406c76:	48 8b 08             	mov    (%rax),%rcx
  406c79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406c7d:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406c81:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406c85:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  406c89:	ff d1                	callq  *%rcx
  406c8b:	c9                   	leaveq 
  406c8c:	c3                   	retq   

0000000000406c8d <_D6object16TypeInfo_Typedef4nextMFZC8TypeInfo>:

	TypeInfo next() { return base.next(); }
  406c8d:	55                   	push   %rbp
  406c8e:	48 89 e5             	mov    %rsp,%rbp
  406c91:	48 83 ec 10          	sub    $0x10,%rsp
  406c95:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406c99:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406c9d:	e8 da 26 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  406ca2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406ca6:	48 8b 40 10          	mov    0x10(%rax),%rax
  406caa:	48 8b 00             	mov    (%rax),%rax
  406cad:	48 83 c0 50          	add    $0x50,%rax
  406cb1:	48 8b 10             	mov    (%rax),%rdx
  406cb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406cb8:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406cbc:	ff d2                	callq  *%rdx
  406cbe:	c9                   	leaveq 
  406cbf:	c3                   	retq   

0000000000406cc0 <_D6object16TypeInfo_Typedef5flagsMFZk>:
	uint flags() { return base.flags(); }
  406cc0:	55                   	push   %rbp
  406cc1:	48 89 e5             	mov    %rsp,%rbp
  406cc4:	48 83 ec 10          	sub    $0x10,%rsp
  406cc8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406ccc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406cd0:	e8 a7 26 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  406cd5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406cd9:	48 8b 40 10          	mov    0x10(%rax),%rax
  406cdd:	48 8b 00             	mov    (%rax),%rax
  406ce0:	48 83 c0 60          	add    $0x60,%rax
  406ce4:	48 8b 10             	mov    (%rax),%rdx
  406ce7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406ceb:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406cef:	ff d2                	callq  *%rdx
  406cf1:	c9                   	leaveq 
  406cf2:	c3                   	retq   

0000000000406cf3 <_D6object16TypeInfo_Typedef4initMFZAv>:
	void[] init() { return m_init.length ? m_init : base.init(); }
  406cf3:	55                   	push   %rbp
  406cf4:	48 89 e5             	mov    %rsp,%rbp
  406cf7:	48 83 ec 10          	sub    $0x10,%rsp
  406cfb:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  406cff:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
  406d03:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406d07:	e8 70 26 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  406d0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406d10:	48 8b 40 28          	mov    0x28(%rax),%rax
  406d14:	48 85 c0             	test   %rax,%rax
  406d17:	74 1d                	je     406d36 <_D6object16TypeInfo_Typedef4initMFZAv+0x43>
  406d19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406d1d:	48 8b 50 28          	mov    0x28(%rax),%rdx
  406d21:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  406d25:	48 89 11             	mov    %rdx,(%rcx)
  406d28:	48 8b 40 30          	mov    0x30(%rax),%rax
  406d2c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  406d30:	48 89 42 08          	mov    %rax,0x8(%rdx)
  406d34:	eb 20                	jmp    406d56 <_D6object16TypeInfo_Typedef4initMFZAv+0x63>
  406d36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406d3a:	48 8b 40 10          	mov    0x10(%rax),%rax
  406d3e:	48 8b 00             	mov    (%rax),%rax
  406d41:	48 83 c0 58          	add    $0x58,%rax
  406d45:	48 8b 10             	mov    (%rax),%rdx
  406d48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406d4c:	48 8b 70 10          	mov    0x10(%rax),%rsi
  406d50:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  406d54:	ff d2                	callq  *%rdx
  406d56:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406d5a:	c9                   	leaveq 
  406d5b:	c3                   	retq   

0000000000406d5c <_D6object16TypeInfo_Pointer8toStringMFZAa>:
{
}

class TypeInfo_Pointer : TypeInfo
{
	char[] toString() { return m_next.toString() ~ "*"; }
  406d5c:	55                   	push   %rbp
  406d5d:	48 89 e5             	mov    %rsp,%rbp
  406d60:	41 55                	push   %r13
  406d62:	41 54                	push   %r12
  406d64:	53                   	push   %rbx
  406d65:	48 83 ec 78          	sub    $0x78,%rsp
  406d69:	48 89 fb             	mov    %rdi,%rbx
  406d6c:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
  406d70:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  406d74:	e8 03 26 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  406d79:	48 c7 45 a0 01 00 00 	movq   $0x1,-0x60(%rbp)
  406d80:	00 
  406d81:	48 c7 45 a8 10 1d 41 	movq   $0x411d10,-0x58(%rbp)
  406d88:	00 
  406d89:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  406d8d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  406d91:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  406d95:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  406d99:	4c 8b 65 b8          	mov    -0x48(%rbp),%r12
  406d9d:	4c 8b 6d b0          	mov    -0x50(%rbp),%r13
  406da1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  406da5:	48 8b 40 10          	mov    0x10(%rax),%rax
  406da9:	48 8b 00             	mov    (%rax),%rax
  406dac:	48 83 c0 08          	add    $0x8,%rax
  406db0:	48 8b 10             	mov    (%rax),%rdx
  406db3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  406db7:	48 8b 70 10          	mov    0x10(%rax),%rsi
  406dbb:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  406dbf:	ff d2                	callq  *%rdx
  406dc1:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  406dc5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  406dc9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  406dcd:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  406dd1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  406dd5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  406dd9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406ddd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  406de1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406de5:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  406de9:	4c 89 24 24          	mov    %r12,(%rsp)
  406ded:	4d 89 e9             	mov    %r13,%r9
  406df0:	49 89 c0             	mov    %rax,%r8
  406df3:	ba 02 00 00 00       	mov    $0x2,%edx
  406df8:	48 c7 c6 00 ff 40 00 	mov    $0x40ff00,%rsi
  406dff:	48 89 df             	mov    %rbx,%rdi
  406e02:	b8 00 00 00 00       	mov    $0x0,%eax
  406e07:	e8 1f 39 00 00       	callq  40a72b <_d_arraycatnT>
  406e0c:	48 89 d8             	mov    %rbx,%rax
  406e0f:	48 83 c4 78          	add    $0x78,%rsp
  406e13:	5b                   	pop    %rbx
  406e14:	41 5c                	pop    %r12
  406e16:	41 5d                	pop    %r13
  406e18:	c9                   	leaveq 
  406e19:	c3                   	retq   

0000000000406e1a <_D6object16TypeInfo_Pointer8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  406e1a:	55                   	push   %rbp
  406e1b:	48 89 e5             	mov    %rsp,%rbp
  406e1e:	48 83 ec 30          	sub    $0x30,%rsp
  406e22:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406e26:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  406e2a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  406e2e:	e8 49 25 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Pointer c;
  406e33:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  406e3a:	00 

		return this is o ||
  406e3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406e3f:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  406e43:	74 46                	je     406e8b <_D6object16TypeInfo_Pointer8opEqualsMFC6ObjectZi+0x71>
  406e45:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  406e49:	48 c7 c6 40 c0 41 00 	mov    $0x41c040,%rsi
  406e50:	e8 6a 27 00 00       	callq  4095bf <_d_dynamic_cast>
  406e55:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  406e59:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  406e5e:	74 31                	je     406e91 <_D6object16TypeInfo_Pointer8opEqualsMFC6ObjectZi+0x77>
  406e60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406e64:	48 8b 40 10          	mov    0x10(%rax),%rax
  406e68:	48 8b 00             	mov    (%rax),%rax
  406e6b:	48 83 c0 20          	add    $0x20,%rax
  406e6f:	48 8b 10             	mov    (%rax),%rdx
  406e72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406e76:	48 8b 40 10          	mov    0x10(%rax),%rax
  406e7a:	48 89 c6             	mov    %rax,%rsi
  406e7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406e81:	48 8b 78 10          	mov    0x10(%rax),%rdi
  406e85:	ff d2                	callq  *%rdx
  406e87:	85 c0                	test   %eax,%eax
  406e89:	74 06                	je     406e91 <_D6object16TypeInfo_Pointer8opEqualsMFC6ObjectZi+0x77>
  406e8b:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  406e8f:	eb 04                	jmp    406e95 <_D6object16TypeInfo_Pointer8opEqualsMFC6ObjectZi+0x7b>
  406e91:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  406e95:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_Pointer)o) !is null &&
				 this.m_next == c.m_next);
	}
  406e99:	c9                   	leaveq 
  406e9a:	c3                   	retq   

0000000000406e9b <_D6object16TypeInfo_Pointer7getHashMFPvZm>:

	hash_t getHash(void *p)
  406e9b:	55                   	push   %rbp
  406e9c:	48 89 e5             	mov    %rsp,%rbp
  406e9f:	48 83 ec 10          	sub    $0x10,%rsp
  406ea3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406ea7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406eab:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406eaf:	e8 c8 24 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return cast(uint)*cast(void* *)p;
  406eb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406eb8:	48 8b 00             	mov    (%rax),%rax
  406ebb:	89 c0                	mov    %eax,%eax
	}
  406ebd:	c9                   	leaveq 
  406ebe:	c3                   	retq   

0000000000406ebf <_D6object16TypeInfo_Pointer6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  406ebf:	55                   	push   %rbp
  406ec0:	48 89 e5             	mov    %rsp,%rbp
  406ec3:	48 83 ec 20          	sub    $0x20,%rsp
  406ec7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406ecb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406ecf:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  406ed3:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406ed7:	e8 a0 24 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return cast(int)(*cast(void* *)p1 == *cast(void* *)p2);
  406edc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406ee0:	48 8b 10             	mov    (%rax),%rdx
  406ee3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406ee7:	48 8b 00             	mov    (%rax),%rax
  406eea:	48 39 c2             	cmp    %rax,%rdx
  406eed:	0f 94 c0             	sete   %al
  406ef0:	0f b6 c0             	movzbl %al,%eax
	}
  406ef3:	c9                   	leaveq 
  406ef4:	c3                   	retq   

0000000000406ef5 <_D6object16TypeInfo_Pointer7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  406ef5:	55                   	push   %rbp
  406ef6:	48 89 e5             	mov    %rsp,%rbp
  406ef9:	48 83 ec 20          	sub    $0x20,%rsp
  406efd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406f01:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406f05:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  406f09:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406f0d:	e8 6a 24 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		if (*cast(void* *)p1 < *cast(void* *)p2)
  406f12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406f16:	48 8b 10             	mov    (%rax),%rdx
  406f19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406f1d:	48 8b 00             	mov    (%rax),%rax
  406f20:	48 39 c2             	cmp    %rax,%rdx
  406f23:	73 09                	jae    406f2e <_D6object16TypeInfo_Pointer7compareMFPvPvZi+0x39>
			return -1;
  406f25:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  406f2c:	eb 23                	jmp    406f51 <_D6object16TypeInfo_Pointer7compareMFPvPvZi+0x5c>
		else if (*cast(void* *)p1 > *cast(void* *)p2)
  406f2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406f32:	48 8b 10             	mov    (%rax),%rdx
  406f35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406f39:	48 8b 00             	mov    (%rax),%rax
  406f3c:	48 39 c2             	cmp    %rax,%rdx
  406f3f:	76 09                	jbe    406f4a <_D6object16TypeInfo_Pointer7compareMFPvPvZi+0x55>
			return 1;
  406f41:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  406f48:	eb 07                	jmp    406f51 <_D6object16TypeInfo_Pointer7compareMFPvPvZi+0x5c>
		else
			return 0;
  406f4a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  406f51:	8b 45 e4             	mov    -0x1c(%rbp),%eax
	}
  406f54:	c9                   	leaveq 
  406f55:	c3                   	retq   

0000000000406f56 <_D6object16TypeInfo_Pointer5tsizeMFZm>:

	size_t tsize()
  406f56:	55                   	push   %rbp
  406f57:	48 89 e5             	mov    %rsp,%rbp
  406f5a:	48 83 ec 10          	sub    $0x10,%rsp
  406f5e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406f62:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406f66:	e8 11 24 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return (void*).sizeof;
  406f6b:	b8 08 00 00 00       	mov    $0x8,%eax
	}
  406f70:	c9                   	leaveq 
  406f71:	c3                   	retq   

0000000000406f72 <_D6object16TypeInfo_Pointer4swapMFPvPvZv>:

	void swap(void *p1, void *p2)
  406f72:	55                   	push   %rbp
  406f73:	48 89 e5             	mov    %rsp,%rbp
  406f76:	48 83 ec 30          	sub    $0x30,%rsp
  406f7a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406f7e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  406f82:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  406f86:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  406f8a:	e8 ed 23 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{	void* tmp;
  406f8f:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  406f96:	00 
		tmp = *cast(void**)p1;
  406f97:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406f9b:	48 8b 00             	mov    (%rax),%rax
  406f9e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		*cast(void**)p1 = *cast(void**)p2;
  406fa2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  406fa6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406faa:	48 8b 00             	mov    (%rax),%rax
  406fad:	48 89 02             	mov    %rax,(%rdx)
		*cast(void**)p2 = tmp;
  406fb0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  406fb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406fb8:	48 89 02             	mov    %rax,(%rdx)
	}
  406fbb:	c9                   	leaveq 
  406fbc:	c3                   	retq   

0000000000406fbd <_D6object16TypeInfo_Pointer4nextMFZC8TypeInfo>:

	TypeInfo next() { return m_next; }
  406fbd:	55                   	push   %rbp
  406fbe:	48 89 e5             	mov    %rsp,%rbp
  406fc1:	48 83 ec 10          	sub    $0x10,%rsp
  406fc5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406fc9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406fcd:	e8 aa 23 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  406fd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406fd6:	48 8b 40 10          	mov    0x10(%rax),%rax
  406fda:	c9                   	leaveq 
  406fdb:	c3                   	retq   

0000000000406fdc <_D6object16TypeInfo_Pointer5flagsMFZk>:
	uint flags() { return 1; }
  406fdc:	55                   	push   %rbp
  406fdd:	48 89 e5             	mov    %rsp,%rbp
  406fe0:	48 83 ec 10          	sub    $0x10,%rsp
  406fe4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406fe8:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  406fec:	e8 8b 23 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  406ff1:	b8 01 00 00 00       	mov    $0x1,%eax
  406ff6:	c9                   	leaveq 
  406ff7:	c3                   	retq   

0000000000406ff8 <_D6object14TypeInfo_Array8toStringMFZAa>:
	TypeInfo m_next;
}

class TypeInfo_Array : TypeInfo
{
	char[] toString() { return value.toString() ~ "[]"; }
  406ff8:	55                   	push   %rbp
  406ff9:	48 89 e5             	mov    %rsp,%rbp
  406ffc:	41 55                	push   %r13
  406ffe:	41 54                	push   %r12
  407000:	53                   	push   %rbx
  407001:	48 83 ec 78          	sub    $0x78,%rsp
  407005:	48 89 fb             	mov    %rdi,%rbx
  407008:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
  40700c:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  407010:	e8 67 23 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  407015:	48 c7 45 a0 02 00 00 	movq   $0x2,-0x60(%rbp)
  40701c:	00 
  40701d:	48 c7 45 a8 d0 1d 41 	movq   $0x411dd0,-0x58(%rbp)
  407024:	00 
  407025:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  407029:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40702d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  407031:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  407035:	4c 8b 65 b8          	mov    -0x48(%rbp),%r12
  407039:	4c 8b 6d b0          	mov    -0x50(%rbp),%r13
  40703d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  407041:	48 8b 40 10          	mov    0x10(%rax),%rax
  407045:	48 8b 00             	mov    (%rax),%rax
  407048:	48 83 c0 08          	add    $0x8,%rax
  40704c:	48 8b 10             	mov    (%rax),%rdx
  40704f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  407053:	48 8b 70 10          	mov    0x10(%rax),%rsi
  407057:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  40705b:	ff d2                	callq  *%rdx
  40705d:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  407061:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  407065:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  407069:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40706d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  407071:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  407075:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407079:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40707d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407081:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  407085:	4c 89 24 24          	mov    %r12,(%rsp)
  407089:	4d 89 e9             	mov    %r13,%r9
  40708c:	49 89 c0             	mov    %rax,%r8
  40708f:	ba 02 00 00 00       	mov    $0x2,%edx
  407094:	48 c7 c6 00 ff 40 00 	mov    $0x40ff00,%rsi
  40709b:	48 89 df             	mov    %rbx,%rdi
  40709e:	b8 00 00 00 00       	mov    $0x0,%eax
  4070a3:	e8 83 36 00 00       	callq  40a72b <_d_arraycatnT>
  4070a8:	48 89 d8             	mov    %rbx,%rax
  4070ab:	48 83 c4 78          	add    $0x78,%rsp
  4070af:	5b                   	pop    %rbx
  4070b0:	41 5c                	pop    %r12
  4070b2:	41 5d                	pop    %r13
  4070b4:	c9                   	leaveq 
  4070b5:	c3                   	retq   

00000000004070b6 <_D6object14TypeInfo_Array8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  4070b6:	55                   	push   %rbp
  4070b7:	48 89 e5             	mov    %rsp,%rbp
  4070ba:	48 83 ec 30          	sub    $0x30,%rsp
  4070be:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4070c2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4070c6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4070ca:	e8 ad 22 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Array c;
  4070cf:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4070d6:	00 

		return cast(int)
  4070d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4070db:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  4070df:	74 46                	je     407127 <_D6object14TypeInfo_Array8opEqualsMFC6ObjectZi+0x71>
  4070e1:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  4070e5:	48 c7 c6 e0 c0 41 00 	mov    $0x41c0e0,%rsi
  4070ec:	e8 ce 24 00 00       	callq  4095bf <_d_dynamic_cast>
  4070f1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4070f5:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4070fa:	74 31                	je     40712d <_D6object14TypeInfo_Array8opEqualsMFC6ObjectZi+0x77>
  4070fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407100:	48 8b 40 10          	mov    0x10(%rax),%rax
  407104:	48 8b 00             	mov    (%rax),%rax
  407107:	48 83 c0 20          	add    $0x20,%rax
  40710b:	48 8b 10             	mov    (%rax),%rdx
  40710e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407112:	48 8b 40 10          	mov    0x10(%rax),%rax
  407116:	48 89 c6             	mov    %rax,%rsi
  407119:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40711d:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407121:	ff d2                	callq  *%rdx
  407123:	85 c0                	test   %eax,%eax
  407125:	74 06                	je     40712d <_D6object14TypeInfo_Array8opEqualsMFC6ObjectZi+0x77>
  407127:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  40712b:	eb 04                	jmp    407131 <_D6object14TypeInfo_Array8opEqualsMFC6ObjectZi+0x7b>
  40712d:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  407131:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
			   (this is o ||
				((c = cast(TypeInfo_Array)o) !is null &&
				 this.value == c.value));
	}
  407135:	c9                   	leaveq 
  407136:	c3                   	retq   

0000000000407137 <_D6object14TypeInfo_Array7getHashMFPvZm>:

	hash_t getHash(void *p)
  407137:	55                   	push   %rbp
  407138:	48 89 e5             	mov    %rsp,%rbp
  40713b:	48 83 ec 40          	sub    $0x40,%rsp
  40713f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  407143:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  407147:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  40714b:	e8 2c 22 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{	size_t sz = value.tsize();
  407150:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407154:	48 8b 40 10          	mov    0x10(%rax),%rax
  407158:	48 8b 00             	mov    (%rax),%rax
  40715b:	48 83 c0 40          	add    $0x40,%rax
  40715f:	48 8b 10             	mov    (%rax),%rdx
  407162:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407166:	48 8b 78 10          	mov    0x10(%rax),%rdi
  40716a:	ff d2                	callq  *%rdx
  40716c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		hash_t hash = 0;
  407170:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  407177:	00 
		void[] a = *cast(void[]*)p;
  407178:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40717c:	48 8b 02             	mov    (%rdx),%rax
  40717f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  407183:	48 8b 42 08          	mov    0x8(%rdx),%rax
  407187:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		for (size_t i = 0; i < a.length; i++)
  40718b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  407192:	00 
  407193:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407197:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  40719b:	0f 92 c0             	setb   %al
  40719e:	83 f0 01             	xor    $0x1,%eax
  4071a1:	84 c0                	test   %al,%al
  4071a3:	75 37                	jne    4071dc <_D6object14TypeInfo_Array7getHashMFPvZm+0xa5>
			hash += value.getHash(a.ptr + i * sz);
  4071a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4071a9:	48 8b 40 10          	mov    0x10(%rax),%rax
  4071ad:	48 8b 00             	mov    (%rax),%rax
  4071b0:	48 83 c0 28          	add    $0x28,%rax
  4071b4:	48 8b 08             	mov    (%rax),%rcx
  4071b7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4071bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4071bf:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  4071c4:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  4071c8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4071cc:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4071d0:	ff d1                	callq  *%rcx
  4071d2:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  4071d6:	48 ff 45 f8          	incq   -0x8(%rbp)
  4071da:	eb b7                	jmp    407193 <_D6object14TypeInfo_Array7getHashMFPvZm+0x5c>
		return hash;
  4071dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  4071e0:	c9                   	leaveq 
  4071e1:	c3                   	retq   

00000000004071e2 <_D6object14TypeInfo_Array6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  4071e2:	55                   	push   %rbp
  4071e3:	48 89 e5             	mov    %rsp,%rbp
  4071e6:	48 83 ec 50          	sub    $0x50,%rsp
  4071ea:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  4071ee:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  4071f2:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  4071f6:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4071fa:	e8 7d 21 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		void[] a1 = *cast(void[]*)p1;
  4071ff:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  407203:	48 8b 02             	mov    (%rdx),%rax
  407206:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40720a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40720e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		void[] a2 = *cast(void[]*)p2;
  407212:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  407216:	48 8b 02             	mov    (%rdx),%rax
  407219:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40721d:	48 8b 42 08          	mov    0x8(%rdx),%rax
  407221:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		if (a1.length != a2.length)
  407225:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  407229:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40722d:	48 39 c2             	cmp    %rax,%rdx
  407230:	74 0c                	je     40723e <_D6object14TypeInfo_Array6equalsMFPvPvZi+0x5c>
			return 0;
  407232:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  407239:	e9 9e 00 00 00       	jmpq   4072dc <_D6object14TypeInfo_Array6equalsMFPvPvZi+0xfa>
		size_t sz = value.tsize();
  40723e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407242:	48 8b 40 10          	mov    0x10(%rax),%rax
  407246:	48 8b 00             	mov    (%rax),%rax
  407249:	48 83 c0 40          	add    $0x40,%rax
  40724d:	48 8b 10             	mov    (%rax),%rdx
  407250:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407254:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407258:	ff d2                	callq  *%rdx
  40725a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		for (size_t i = 0; i < a1.length; i++)
  40725e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  407265:	00 
  407266:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40726a:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  40726e:	0f 92 c0             	setb   %al
  407271:	83 f0 01             	xor    $0x1,%eax
  407274:	84 c0                	test   %al,%al
  407276:	75 5d                	jne    4072d5 <_D6object14TypeInfo_Array6equalsMFPvPvZi+0xf3>
		{
			if (!value.equals(a1.ptr + i * sz, a2.ptr + i * sz))
  407278:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40727c:	48 8b 40 10          	mov    0x10(%rax),%rax
  407280:	48 8b 00             	mov    (%rax),%rax
  407283:	48 83 c0 30          	add    $0x30,%rax
  407287:	4c 8b 00             	mov    (%rax),%r8
  40728a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40728e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407292:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  407297:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40729b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40729f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4072a3:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  4072a8:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  4072ac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4072b0:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4072b4:	48 89 ca             	mov    %rcx,%rdx
  4072b7:	41 ff d0             	callq  *%r8
  4072ba:	85 c0                	test   %eax,%eax
  4072bc:	0f 95 c0             	setne  %al
  4072bf:	83 f0 01             	xor    $0x1,%eax
  4072c2:	84 c0                	test   %al,%al
  4072c4:	74 09                	je     4072cf <_D6object14TypeInfo_Array6equalsMFPvPvZi+0xed>
				return 0;
  4072c6:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  4072cd:	eb 0d                	jmp    4072dc <_D6object14TypeInfo_Array6equalsMFPvPvZi+0xfa>
		if (a1.length != a2.length)
			return 0;
		size_t sz = value.tsize();
		for (size_t i = 0; i < a1.length; i++)
		{
			if (!value.equals(a1.ptr + i * sz, a2.ptr + i * sz))
  4072cf:	48 ff 45 f8          	incq   -0x8(%rbp)
  4072d3:	eb 91                	jmp    407266 <_D6object14TypeInfo_Array6equalsMFPvPvZi+0x84>
				return 0;
		}
		return 1;
  4072d5:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%rbp)
  4072dc:	8b 45 b4             	mov    -0x4c(%rbp),%eax
	}
  4072df:	c9                   	leaveq 
  4072e0:	c3                   	retq   

00000000004072e1 <_D6object14TypeInfo_Array7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  4072e1:	55                   	push   %rbp
  4072e2:	48 89 e5             	mov    %rsp,%rbp
  4072e5:	48 83 ec 60          	sub    $0x60,%rsp
  4072e9:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  4072ed:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  4072f1:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  4072f5:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  4072f9:	e8 7e 20 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		void[] a1 = *cast(void[]*)p1;
  4072fe:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  407302:	48 8b 02             	mov    (%rdx),%rax
  407305:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  407309:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40730d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		void[] a2 = *cast(void[]*)p2;
  407311:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  407315:	48 8b 02             	mov    (%rdx),%rax
  407318:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40731c:	48 8b 42 08          	mov    0x8(%rdx),%rax
  407320:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		size_t sz = value.tsize();
  407324:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407328:	48 8b 40 10          	mov    0x10(%rax),%rax
  40732c:	48 8b 00             	mov    (%rax),%rax
  40732f:	48 83 c0 40          	add    $0x40,%rax
  407333:	48 8b 10             	mov    (%rax),%rdx
  407336:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40733a:	48 8b 78 10          	mov    0x10(%rax),%rdi
  40733e:	ff d2                	callq  *%rdx
  407340:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		size_t len = a1.length;
  407344:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  407348:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

		if (a2.length < len)
  40734c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407350:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  407354:	73 08                	jae    40735e <_D6object14TypeInfo_Array7compareMFPvPvZi+0x7d>
			len = a2.length;
  407356:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40735a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		for (size_t u = 0; u < len; u++)
  40735e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  407365:	00 
  407366:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40736a:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40736e:	0f 92 c0             	setb   %al
  407371:	83 f0 01             	xor    $0x1,%eax
  407374:	84 c0                	test   %al,%al
  407376:	75 59                	jne    4073d1 <_D6object14TypeInfo_Array7compareMFPvPvZi+0xf0>
		{
			int result = value.compare(a1.ptr + u * sz, a2.ptr + u * sz);
  407378:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40737c:	48 8b 40 10          	mov    0x10(%rax),%rax
  407380:	48 8b 00             	mov    (%rax),%rax
  407383:	48 83 c0 38          	add    $0x38,%rax
  407387:	4c 8b 00             	mov    (%rax),%r8
  40738a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40738e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407392:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  407397:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40739b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40739f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4073a3:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  4073a8:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  4073ac:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4073b0:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4073b4:	48 89 ca             	mov    %rcx,%rdx
  4073b7:	41 ff d0             	callq  *%r8
  4073ba:	89 45 fc             	mov    %eax,-0x4(%rbp)
			if (result)
  4073bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  4073c1:	74 08                	je     4073cb <_D6object14TypeInfo_Array7compareMFPvPvZi+0xea>
				return result;
  4073c3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4073c6:	89 45 a4             	mov    %eax,-0x5c(%rbp)
  4073c9:	eb 17                	jmp    4073e2 <_D6object14TypeInfo_Array7compareMFPvPvZi+0x101>
		if (a2.length < len)
			len = a2.length;
		for (size_t u = 0; u < len; u++)
		{
			int result = value.compare(a1.ptr + u * sz, a2.ptr + u * sz);
			if (result)
  4073cb:	48 ff 45 f0          	incq   -0x10(%rbp)
  4073cf:	eb 95                	jmp    407366 <_D6object14TypeInfo_Array7compareMFPvPvZi+0x85>
				return result;
		}
		return cast(int)a1.length - cast(int)a2.length;
  4073d1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4073d5:	89 c2                	mov    %eax,%edx
  4073d7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4073db:	89 d1                	mov    %edx,%ecx
  4073dd:	29 c1                	sub    %eax,%ecx
  4073df:	89 4d a4             	mov    %ecx,-0x5c(%rbp)
  4073e2:	8b 45 a4             	mov    -0x5c(%rbp),%eax
	}
  4073e5:	c9                   	leaveq 
  4073e6:	c3                   	retq   

00000000004073e7 <_D6object14TypeInfo_Array5tsizeMFZm>:

	size_t tsize()
  4073e7:	55                   	push   %rbp
  4073e8:	48 89 e5             	mov    %rsp,%rbp
  4073eb:	48 83 ec 10          	sub    $0x10,%rsp
  4073ef:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4073f3:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4073f7:	e8 80 1f 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return (void[]).sizeof;
  4073fc:	b8 10 00 00 00       	mov    $0x10,%eax
	}
  407401:	c9                   	leaveq 
  407402:	c3                   	retq   

0000000000407403 <_D6object14TypeInfo_Array4swapMFPvPvZv>:

	void swap(void *p1, void *p2)
  407403:	55                   	push   %rbp
  407404:	48 89 e5             	mov    %rsp,%rbp
  407407:	48 83 ec 30          	sub    $0x30,%rsp
  40740b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40740f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  407413:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  407417:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40741b:	e8 5c 1f 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{	void[] tmp;
  407420:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  407427:	00 
  407428:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40742f:	00 
		tmp = *cast(void[]*)p1;
  407430:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  407434:	48 8b 02             	mov    (%rdx),%rax
  407437:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40743b:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40743f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		*cast(void[]*)p1 = *cast(void[]*)p2;
  407443:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  407447:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40744b:	48 8b 02             	mov    (%rdx),%rax
  40744e:	48 89 01             	mov    %rax,(%rcx)
  407451:	48 8b 42 08          	mov    0x8(%rdx),%rax
  407455:	48 89 41 08          	mov    %rax,0x8(%rcx)
		*cast(void[]*)p2 = tmp;
  407459:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40745d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407461:	48 89 02             	mov    %rax,(%rdx)
  407464:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407468:	48 89 42 08          	mov    %rax,0x8(%rdx)
	}
  40746c:	c9                   	leaveq 
  40746d:	c3                   	retq   

000000000040746e <_D6object14TypeInfo_Array4nextMFZC8TypeInfo>:

	TypeInfo value;

	TypeInfo next()
  40746e:	55                   	push   %rbp
  40746f:	48 89 e5             	mov    %rsp,%rbp
  407472:	48 83 ec 10          	sub    $0x10,%rsp
  407476:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40747a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40747e:	e8 f9 1e 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return value;
  407483:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407487:	48 8b 40 10          	mov    0x10(%rax),%rax
	}
  40748b:	c9                   	leaveq 
  40748c:	c3                   	retq   

000000000040748d <_D6object14TypeInfo_Array5flagsMFZk>:

	uint flags() { return 1; }
  40748d:	55                   	push   %rbp
  40748e:	48 89 e5             	mov    %rsp,%rbp
  407491:	48 83 ec 10          	sub    $0x10,%rsp
  407495:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407499:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40749d:	e8 da 1e 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  4074a2:	b8 01 00 00 00       	mov    $0x1,%eax
  4074a7:	c9                   	leaveq 
  4074a8:	c3                   	retq   

00000000004074a9 <_D6object20TypeInfo_StaticArray8toStringMFZAa>:
}

class TypeInfo_StaticArray : TypeInfo
{
	char[] toString()
  4074a9:	55                   	push   %rbp
  4074aa:	48 89 e5             	mov    %rsp,%rbp
  4074ad:	41 57                	push   %r15
  4074af:	41 56                	push   %r14
  4074b1:	41 55                	push   %r13
  4074b3:	41 54                	push   %r12
  4074b5:	53                   	push   %rbx
  4074b6:	48 81 ec 88 01 00 00 	sub    $0x188,%rsp
  4074bd:	48 89 bd 60 fe ff ff 	mov    %rdi,-0x1a0(%rbp)
  4074c4:	48 89 b5 b8 fe ff ff 	mov    %rsi,-0x148(%rbp)
  4074cb:	48 8b bd b8 fe ff ff 	mov    -0x148(%rbp),%rdi
  4074d2:	e8 a5 1e 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		char[20] buf;
  4074d7:	48 c7 85 e0 fe ff ff 	movq   $0x14,-0x120(%rbp)
  4074de:	14 00 00 00 
  4074e2:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
  4074e9:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  4074f0:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  4074f7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  4074fb:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  407502:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  407506:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  40750b:	0f 95 c0             	setne  %al
  40750e:	83 f0 01             	xor    $0x1,%eax
  407511:	84 c0                	test   %al,%al
  407513:	75 11                	jne    407526 <_D6object20TypeInfo_StaticArray8toStringMFZAa+0x7d>
  407515:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  407519:	c6 00 ff             	movb   $0xff,(%rax)
  40751c:	48 ff 45 c0          	incq   -0x40(%rbp)
  407520:	48 ff 4d c8          	decq   -0x38(%rbp)
  407524:	eb e0                	jmp    407506 <_D6object20TypeInfo_StaticArray8toStringMFZAa+0x5d>
		return value.toString() ~ "[" ~ itoa(buf, 'd', len) ~ "]";
  407526:	48 c7 85 f0 fe ff ff 	movq   $0x1,-0x110(%rbp)
  40752d:	01 00 00 00 
  407531:	48 c7 85 f8 fe ff ff 	movq   $0x411e90,-0x108(%rbp)
  407538:	90 1e 41 00 
  40753c:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  407543:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  40754a:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  407551:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  407558:	48 8b 9d 08 ff ff ff 	mov    -0xf8(%rbp),%rbx
  40755f:	4c 8b a5 00 ff ff ff 	mov    -0x100(%rbp),%r12
  407566:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  40756d:	48 8b 40 18          	mov    0x18(%rax),%rax
  407571:	48 89 c1             	mov    %rax,%rcx
  407574:	48 c7 85 10 ff ff ff 	movq   $0x14,-0xf0(%rbp)
  40757b:	14 00 00 00 
  40757f:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
  407586:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  40758d:	48 8d bd a0 fe ff ff 	lea    -0x160(%rbp),%rdi
  407594:	48 8b b5 10 ff ff ff 	mov    -0xf0(%rbp),%rsi
  40759b:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  4075a2:	49 89 c8             	mov    %rcx,%r8
  4075a5:	b9 64 00 00 00       	mov    $0x64,%ecx
  4075aa:	e8 ea 67 00 00       	callq  40dd99 <_D6kernel4core4util4itoaFAaalZAa>
  4075af:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
  4075b6:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  4075bd:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  4075c4:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  4075cb:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  4075d2:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  4075d9:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  4075e0:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  4075e7:	4c 8b ad 38 ff ff ff 	mov    -0xc8(%rbp),%r13
  4075ee:	4c 8b b5 30 ff ff ff 	mov    -0xd0(%rbp),%r14
  4075f5:	48 c7 85 40 ff ff ff 	movq   $0x1,-0xc0(%rbp)
  4075fc:	01 00 00 00 
  407600:	48 c7 85 48 ff ff ff 	movq   $0x411e92,-0xb8(%rbp)
  407607:	92 1e 41 00 
  40760b:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  407612:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  407619:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  407620:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  407627:	4c 8b bd 58 ff ff ff 	mov    -0xa8(%rbp),%r15
  40762e:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  407635:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
  40763c:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  407643:	48 8b 40 10          	mov    0x10(%rax),%rax
  407647:	48 8b 00             	mov    (%rax),%rax
  40764a:	48 83 c0 08          	add    $0x8,%rax
  40764e:	48 8b 10             	mov    (%rax),%rdx
  407651:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  407658:	48 8b 70 10          	mov    0x10(%rax),%rsi
  40765c:	48 8d bd 90 fe ff ff 	lea    -0x170(%rbp),%rdi
  407663:	ff d2                	callq  *%rdx
  407665:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  40766c:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  407673:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
  40767a:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  407681:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  407688:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  40768f:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  407696:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  40769d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4076a4:	48 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%rcx
  4076ab:	48 8d bd 80 fe ff ff 	lea    -0x180(%rbp),%rdi
  4076b2:	4c 89 3c 24          	mov    %r15,(%rsp)
  4076b6:	4c 8b 8d 68 fe ff ff 	mov    -0x198(%rbp),%r9
  4076bd:	49 89 c0             	mov    %rax,%r8
  4076c0:	ba 02 00 00 00       	mov    $0x2,%edx
  4076c5:	48 c7 c6 00 ff 40 00 	mov    $0x40ff00,%rsi
  4076cc:	b8 00 00 00 00       	mov    $0x0,%eax
  4076d1:	e8 55 30 00 00       	callq  40a72b <_d_arraycatnT>
  4076d6:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
  4076dd:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  4076e1:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
  4076e8:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  4076ec:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  4076f0:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  4076f4:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4076f8:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  4076fc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  407700:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  407704:	48 8d bd 70 fe ff ff 	lea    -0x190(%rbp),%rdi
  40770b:	4c 89 2c 24          	mov    %r13,(%rsp)
  40770f:	4d 89 f1             	mov    %r14,%r9
  407712:	49 89 c0             	mov    %rax,%r8
  407715:	ba 02 00 00 00       	mov    $0x2,%edx
  40771a:	48 c7 c6 00 ff 40 00 	mov    $0x40ff00,%rsi
  407721:	b8 00 00 00 00       	mov    $0x0,%eax
  407726:	e8 00 30 00 00       	callq  40a72b <_d_arraycatnT>
  40772b:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
  407732:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  407736:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
  40773d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  407741:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  407745:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  407749:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40774d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  407751:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407755:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  407759:	48 89 1c 24          	mov    %rbx,(%rsp)
  40775d:	4d 89 e1             	mov    %r12,%r9
  407760:	49 89 c0             	mov    %rax,%r8
  407763:	ba 02 00 00 00       	mov    $0x2,%edx
  407768:	48 c7 c6 00 ff 40 00 	mov    $0x40ff00,%rsi
  40776f:	48 8b bd 60 fe ff ff 	mov    -0x1a0(%rbp),%rdi
  407776:	b8 00 00 00 00       	mov    $0x0,%eax
  40777b:	e8 ab 2f 00 00       	callq  40a72b <_d_arraycatnT>
	}
  407780:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  407787:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
  40778e:	5b                   	pop    %rbx
  40778f:	41 5c                	pop    %r12
  407791:	41 5d                	pop    %r13
  407793:	41 5e                	pop    %r14
  407795:	41 5f                	pop    %r15
  407797:	c9                   	leaveq 
  407798:	c3                   	retq   

0000000000407799 <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  407799:	55                   	push   %rbp
  40779a:	48 89 e5             	mov    %rsp,%rbp
  40779d:	48 83 ec 30          	sub    $0x30,%rsp
  4077a1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4077a5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4077a9:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4077ad:	e8 ca 1b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_StaticArray c;
  4077b2:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4077b9:	00 

		return cast(int)
  4077ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4077be:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  4077c2:	74 5b                	je     40781f <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi+0x86>
  4077c4:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  4077c8:	48 c7 c6 80 c1 41 00 	mov    $0x41c180,%rsi
  4077cf:	e8 eb 1d 00 00       	callq  4095bf <_d_dynamic_cast>
  4077d4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4077d8:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4077dd:	74 46                	je     407825 <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi+0x8c>
  4077df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4077e3:	48 8b 50 18          	mov    0x18(%rax),%rdx
  4077e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4077eb:	48 8b 40 18          	mov    0x18(%rax),%rax
  4077ef:	48 39 c2             	cmp    %rax,%rdx
  4077f2:	75 31                	jne    407825 <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi+0x8c>
  4077f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4077f8:	48 8b 40 10          	mov    0x10(%rax),%rax
  4077fc:	48 8b 00             	mov    (%rax),%rax
  4077ff:	48 83 c0 20          	add    $0x20,%rax
  407803:	48 8b 10             	mov    (%rax),%rdx
  407806:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40780a:	48 8b 40 10          	mov    0x10(%rax),%rax
  40780e:	48 89 c6             	mov    %rax,%rsi
  407811:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407815:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407819:	ff d2                	callq  *%rdx
  40781b:	85 c0                	test   %eax,%eax
  40781d:	74 06                	je     407825 <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi+0x8c>
  40781f:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  407823:	eb 04                	jmp    407829 <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi+0x90>
  407825:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  407829:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
			   (this is o ||
				((c = cast(TypeInfo_StaticArray)o) !is null &&
				 this.len == c.len &&
				 this.value == c.value));
	}
  40782d:	c9                   	leaveq 
  40782e:	c3                   	retq   

000000000040782f <_D6object20TypeInfo_StaticArray7getHashMFPvZm>:

	hash_t getHash(void *p)
  40782f:	55                   	push   %rbp
  407830:	48 89 e5             	mov    %rsp,%rbp
  407833:	48 83 ec 30          	sub    $0x30,%rsp
  407837:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40783b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40783f:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  407843:	e8 34 1b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{	size_t sz = value.tsize();
  407848:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40784c:	48 8b 40 10          	mov    0x10(%rax),%rax
  407850:	48 8b 00             	mov    (%rax),%rax
  407853:	48 83 c0 40          	add    $0x40,%rax
  407857:	48 8b 10             	mov    (%rax),%rdx
  40785a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40785e:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407862:	ff d2                	callq  *%rdx
  407864:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		hash_t hash = 0;
  407868:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40786f:	00 
		for (size_t i = 0; i < len; i++)
  407870:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  407877:	00 
  407878:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40787c:	48 8b 40 18          	mov    0x18(%rax),%rax
  407880:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  407884:	0f 92 c0             	setb   %al
  407887:	83 f0 01             	xor    $0x1,%eax
  40788a:	84 c0                	test   %al,%al
  40788c:	75 36                	jne    4078c4 <_D6object20TypeInfo_StaticArray7getHashMFPvZm+0x95>
			hash += value.getHash(p + i * sz);
  40788e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407892:	48 8b 40 10          	mov    0x10(%rax),%rax
  407896:	48 8b 00             	mov    (%rax),%rax
  407899:	48 83 c0 28          	add    $0x28,%rax
  40789d:	48 8b 10             	mov    (%rax),%rdx
  4078a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4078a4:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  4078a9:	48 89 c6             	mov    %rax,%rsi
  4078ac:	48 03 75 d0          	add    -0x30(%rbp),%rsi
  4078b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4078b4:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4078b8:	ff d2                	callq  *%rdx
  4078ba:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  4078be:	48 ff 45 f8          	incq   -0x8(%rbp)
  4078c2:	eb b4                	jmp    407878 <_D6object20TypeInfo_StaticArray7getHashMFPvZm+0x49>
		return hash;
  4078c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  4078c8:	c9                   	leaveq 
  4078c9:	c3                   	retq   

00000000004078ca <_D6object20TypeInfo_StaticArray6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  4078ca:	55                   	push   %rbp
  4078cb:	48 89 e5             	mov    %rsp,%rbp
  4078ce:	48 83 ec 30          	sub    $0x30,%rsp
  4078d2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4078d6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4078da:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4078de:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4078e2:	e8 95 1a 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		size_t sz = value.tsize();
  4078e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4078eb:	48 8b 40 10          	mov    0x10(%rax),%rax
  4078ef:	48 8b 00             	mov    (%rax),%rax
  4078f2:	48 83 c0 40          	add    $0x40,%rax
  4078f6:	48 8b 10             	mov    (%rax),%rdx
  4078f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4078fd:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407901:	ff d2                	callq  *%rdx
  407903:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		for (size_t u = 0; u < len; u++)
  407907:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40790e:	00 
  40790f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407913:	48 8b 40 18          	mov    0x18(%rax),%rax
  407917:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  40791b:	0f 92 c0             	setb   %al
  40791e:	83 f0 01             	xor    $0x1,%eax
  407921:	84 c0                	test   %al,%al
  407923:	75 57                	jne    40797c <_D6object20TypeInfo_StaticArray6equalsMFPvPvZi+0xb2>
		{
			if (!value.equals(p1 + u * sz, p2 + u * sz))
  407925:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407929:	48 8b 40 10          	mov    0x10(%rax),%rax
  40792d:	48 8b 00             	mov    (%rax),%rax
  407930:	48 83 c0 30          	add    $0x30,%rax
  407934:	48 8b 08             	mov    (%rax),%rcx
  407937:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40793b:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  407940:	48 89 c2             	mov    %rax,%rdx
  407943:	48 03 55 d8          	add    -0x28(%rbp),%rdx
  407947:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40794b:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  407950:	48 89 c6             	mov    %rax,%rsi
  407953:	48 03 75 e0          	add    -0x20(%rbp),%rsi
  407957:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40795b:	48 8b 78 10          	mov    0x10(%rax),%rdi
  40795f:	ff d1                	callq  *%rcx
  407961:	85 c0                	test   %eax,%eax
  407963:	0f 95 c0             	setne  %al
  407966:	83 f0 01             	xor    $0x1,%eax
  407969:	84 c0                	test   %al,%al
  40796b:	74 09                	je     407976 <_D6object20TypeInfo_StaticArray6equalsMFPvPvZi+0xac>
				return 0;
  40796d:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  407974:	eb 0d                	jmp    407983 <_D6object20TypeInfo_StaticArray6equalsMFPvPvZi+0xb9>
	{
		size_t sz = value.tsize();

		for (size_t u = 0; u < len; u++)
		{
			if (!value.equals(p1 + u * sz, p2 + u * sz))
  407976:	48 ff 45 f8          	incq   -0x8(%rbp)
  40797a:	eb 93                	jmp    40790f <_D6object20TypeInfo_StaticArray6equalsMFPvPvZi+0x45>
				return 0;
		}
		return 1;
  40797c:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
  407983:	8b 45 d4             	mov    -0x2c(%rbp),%eax
	}
  407986:	c9                   	leaveq 
  407987:	c3                   	retq   

0000000000407988 <_D6object20TypeInfo_StaticArray7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  407988:	55                   	push   %rbp
  407989:	48 89 e5             	mov    %rsp,%rbp
  40798c:	48 83 ec 40          	sub    $0x40,%rsp
  407990:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  407994:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  407998:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40799c:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4079a0:	e8 d7 19 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		size_t sz = value.tsize();
  4079a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4079a9:	48 8b 40 10          	mov    0x10(%rax),%rax
  4079ad:	48 8b 00             	mov    (%rax),%rax
  4079b0:	48 83 c0 40          	add    $0x40,%rax
  4079b4:	48 8b 10             	mov    (%rax),%rdx
  4079b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4079bb:	48 8b 78 10          	mov    0x10(%rax),%rdi
  4079bf:	ff d2                	callq  *%rdx
  4079c1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		for (size_t u = 0; u < len; u++)
  4079c5:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4079cc:	00 
  4079cd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4079d1:	48 8b 40 18          	mov    0x18(%rax),%rax
  4079d5:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4079d9:	0f 92 c0             	setb   %al
  4079dc:	83 f0 01             	xor    $0x1,%eax
  4079df:	84 c0                	test   %al,%al
  4079e1:	75 53                	jne    407a36 <_D6object20TypeInfo_StaticArray7compareMFPvPvZi+0xae>
		{
			int result = value.compare(p1 + u * sz, p2 + u * sz);
  4079e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4079e7:	48 8b 40 10          	mov    0x10(%rax),%rax
  4079eb:	48 8b 00             	mov    (%rax),%rax
  4079ee:	48 83 c0 38          	add    $0x38,%rax
  4079f2:	48 8b 08             	mov    (%rax),%rcx
  4079f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4079f9:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  4079fe:	48 89 c2             	mov    %rax,%rdx
  407a01:	48 03 55 c8          	add    -0x38(%rbp),%rdx
  407a05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407a09:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  407a0e:	48 89 c6             	mov    %rax,%rsi
  407a11:	48 03 75 d0          	add    -0x30(%rbp),%rsi
  407a15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407a19:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407a1d:	ff d1                	callq  *%rcx
  407a1f:	89 45 fc             	mov    %eax,-0x4(%rbp)
			if (result)
  407a22:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  407a26:	74 08                	je     407a30 <_D6object20TypeInfo_StaticArray7compareMFPvPvZi+0xa8>
				return result;
  407a28:	8b 45 fc             	mov    -0x4(%rbp),%eax
  407a2b:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  407a2e:	eb 0d                	jmp    407a3d <_D6object20TypeInfo_StaticArray7compareMFPvPvZi+0xb5>
		size_t sz = value.tsize();

		for (size_t u = 0; u < len; u++)
		{
			int result = value.compare(p1 + u * sz, p2 + u * sz);
			if (result)
  407a30:	48 ff 45 f0          	incq   -0x10(%rbp)
  407a34:	eb 97                	jmp    4079cd <_D6object20TypeInfo_StaticArray7compareMFPvPvZi+0x45>
				return result;
		}
		return 0;
  407a36:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  407a3d:	8b 45 c4             	mov    -0x3c(%rbp),%eax
	}
  407a40:	c9                   	leaveq 
  407a41:	c3                   	retq   

0000000000407a42 <_D6object20TypeInfo_StaticArray5tsizeMFZm>:

	size_t tsize()
  407a42:	55                   	push   %rbp
  407a43:	48 89 e5             	mov    %rsp,%rbp
  407a46:	53                   	push   %rbx
  407a47:	48 83 ec 08          	sub    $0x8,%rsp
  407a4b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  407a4f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  407a53:	e8 24 19 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return len * value.tsize();
  407a58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407a5c:	48 8b 58 18          	mov    0x18(%rax),%rbx
  407a60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407a64:	48 8b 40 10          	mov    0x10(%rax),%rax
  407a68:	48 8b 00             	mov    (%rax),%rax
  407a6b:	48 83 c0 40          	add    $0x40,%rax
  407a6f:	48 8b 10             	mov    (%rax),%rdx
  407a72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407a76:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407a7a:	ff d2                	callq  *%rdx
  407a7c:	48 0f af c3          	imul   %rbx,%rax
	}
  407a80:	48 83 c4 08          	add    $0x8,%rsp
  407a84:	5b                   	pop    %rbx
  407a85:	c9                   	leaveq 
  407a86:	c3                   	retq   

0000000000407a87 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv>:

	void swap(void *p1, void *p2)
  407a87:	55                   	push   %rbp
  407a88:	48 89 e5             	mov    %rsp,%rbp
  407a8b:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp
  407a92:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  407a99:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
  407aa0:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  407aa7:	48 8b bd 28 ff ff ff 	mov    -0xd8(%rbp),%rdi
  407aae:	e8 c9 18 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{	void* tmp;
  407ab3:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  407aba:	00 
		size_t sz = value.tsize();
  407abb:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  407ac2:	48 8b 40 10          	mov    0x10(%rax),%rax
  407ac6:	48 8b 00             	mov    (%rax),%rax
  407ac9:	48 83 c0 40          	add    $0x40,%rax
  407acd:	48 8b 10             	mov    (%rax),%rdx
  407ad0:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  407ad7:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407adb:	ff d2                	callq  *%rdx
  407add:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		ubyte[16] buffer;
  407ae1:	48 c7 85 50 ff ff ff 	movq   $0x10,-0xb0(%rbp)
  407ae8:	10 00 00 00 
  407aec:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  407af3:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  407afa:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  407b01:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  407b05:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  407b0c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  407b10:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  407b15:	0f 95 c0             	setne  %al
  407b18:	83 f0 01             	xor    $0x1,%eax
  407b1b:	84 c0                	test   %al,%al
  407b1d:	75 11                	jne    407b30 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0xa9>
  407b1f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407b23:	c6 00 00             	movb   $0x0,(%rax)
  407b26:	48 ff 45 e0          	incq   -0x20(%rbp)
  407b2a:	48 ff 4d e8          	decq   -0x18(%rbp)
  407b2e:	eb e0                	jmp    407b10 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0x89>
		void* pbuffer;
  407b30:	48 c7 85 48 ff ff ff 	movq   $0x0,-0xb8(%rbp)
  407b37:	00 00 00 00 

		if (sz < buffer.sizeof)
  407b3b:	48 83 7d d0 10       	cmpq   $0x10,-0x30(%rbp)
  407b40:	73 0d                	jae    407b4f <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0xc8>
			tmp = buffer.ptr;
  407b42:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  407b49:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  407b4d:	eb 30                	jmp    407b7f <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0xf8>
		else
			tmp = pbuffer = (new void[sz]).ptr;
  407b4f:	48 8d bd 60 ff ff ff 	lea    -0xa0(%rbp),%rdi
  407b56:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  407b5a:	48 c7 c6 c0 fd 40 00 	mov    $0x40fdc0,%rsi
  407b61:	e8 aa 27 00 00       	callq  40a310 <_d_newarrayT>
  407b66:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  407b6d:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  407b74:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  407b7b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

		for (size_t u = 0; u < len; u += sz)
  407b7f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  407b86:	00 
  407b87:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  407b8e:	48 8b 40 18          	mov    0x18(%rax),%rax
  407b92:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  407b96:	0f 92 c0             	setb   %al
  407b99:	83 f0 01             	xor    $0x1,%eax
  407b9c:	84 c0                	test   %al,%al
  407b9e:	0f 85 35 01 00 00    	jne    407cd9 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0x252>
		{	size_t o = u * sz;
  407ba4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407ba8:	48 0f af 45 d0       	imul   -0x30(%rbp),%rax
  407bad:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			tmp[0 .. sz] = (p1 + o)[0 .. sz];
  407bb1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407bb5:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  407bbc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407bc0:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  407bc7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407bcb:	48 89 c2             	mov    %rax,%rdx
  407bce:	48 03 95 20 ff ff ff 	add    -0xe0(%rbp),%rdx
  407bd5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407bd9:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  407bdd:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  407be1:	48 8d bd 00 ff ff ff 	lea    -0x100(%rbp),%rdi
  407be8:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  407bef:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  407bf6:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
  407bfa:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  407bfe:	49 89 c0             	mov    %rax,%r8
  407c01:	49 89 d1             	mov    %rdx,%r9
  407c04:	48 89 ca             	mov    %rcx,%rdx
  407c07:	48 89 f1             	mov    %rsi,%rcx
  407c0a:	be 01 00 00 00       	mov    $0x1,%esi
  407c0f:	e8 c4 5a 00 00       	callq  40d6d8 <_d_arraycopy>
			(p1 + o)[0 .. sz] = (p2 + o)[0 .. sz];
  407c14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407c18:	48 89 c2             	mov    %rax,%rdx
  407c1b:	48 03 95 20 ff ff ff 	add    -0xe0(%rbp),%rdx
  407c22:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407c26:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  407c2a:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  407c2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407c32:	48 89 c2             	mov    %rax,%rdx
  407c35:	48 03 95 18 ff ff ff 	add    -0xe8(%rbp),%rdx
  407c3c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407c40:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  407c44:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  407c48:	48 8d bd f0 fe ff ff 	lea    -0x110(%rbp),%rdi
  407c4f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  407c53:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  407c57:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  407c5b:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  407c5f:	49 89 c0             	mov    %rax,%r8
  407c62:	49 89 d1             	mov    %rdx,%r9
  407c65:	48 89 ca             	mov    %rcx,%rdx
  407c68:	48 89 f1             	mov    %rsi,%rcx
  407c6b:	be 01 00 00 00       	mov    $0x1,%esi
  407c70:	e8 63 5a 00 00       	callq  40d6d8 <_d_arraycopy>
			(p2 + o)[0 .. sz] = tmp[0 .. sz];
  407c75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407c79:	48 89 c2             	mov    %rax,%rdx
  407c7c:	48 03 95 18 ff ff ff 	add    -0xe8(%rbp),%rdx
  407c83:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407c87:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  407c8b:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  407c8f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407c93:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  407c97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407c9b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  407c9f:	48 8d bd e0 fe ff ff 	lea    -0x120(%rbp),%rdi
  407ca6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  407caa:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  407cae:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  407cb2:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  407cb6:	49 89 c0             	mov    %rax,%r8
  407cb9:	49 89 d1             	mov    %rdx,%r9
  407cbc:	48 89 ca             	mov    %rcx,%rdx
  407cbf:	48 89 f1             	mov    %rsi,%rcx
  407cc2:	be 01 00 00 00       	mov    $0x1,%esi
  407cc7:	e8 0c 5a 00 00       	callq  40d6d8 <_d_arraycopy>
  407ccc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407cd0:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  407cd4:	e9 ae fe ff ff       	jmpq   407b87 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0x100>
		}
		if (pbuffer)
  407cd9:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  407ce0:	48 85 c0             	test   %rax,%rax
  407ce3:	74 0c                	je     407cf1 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0x26a>
			delete pbuffer;
  407ce5:	48 8d bd 48 ff ff ff 	lea    -0xb8(%rbp),%rdi
  407cec:	e8 a2 27 00 00       	callq  40a493 <_d_delmemory>
	}
  407cf1:	c9                   	leaveq 
  407cf2:	c3                   	retq   

0000000000407cf3 <_D6object20TypeInfo_StaticArray4initMFZAv>:

	void[] init() { return value.init(); }
  407cf3:	55                   	push   %rbp
  407cf4:	48 89 e5             	mov    %rsp,%rbp
  407cf7:	53                   	push   %rbx
  407cf8:	48 83 ec 08          	sub    $0x8,%rsp
  407cfc:	48 89 fb             	mov    %rdi,%rbx
  407cff:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  407d03:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  407d07:	e8 70 16 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  407d0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407d10:	48 8b 40 10          	mov    0x10(%rax),%rax
  407d14:	48 8b 00             	mov    (%rax),%rax
  407d17:	48 83 c0 58          	add    $0x58,%rax
  407d1b:	48 8b 10             	mov    (%rax),%rdx
  407d1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407d22:	48 8b 70 10          	mov    0x10(%rax),%rsi
  407d26:	48 89 df             	mov    %rbx,%rdi
  407d29:	ff d2                	callq  *%rdx
  407d2b:	48 89 d8             	mov    %rbx,%rax
  407d2e:	48 83 c4 08          	add    $0x8,%rsp
  407d32:	5b                   	pop    %rbx
  407d33:	c9                   	leaveq 
  407d34:	c3                   	retq   

0000000000407d35 <_D6object20TypeInfo_StaticArray4nextMFZC8TypeInfo>:
	TypeInfo next() { return value; }
  407d35:	55                   	push   %rbp
  407d36:	48 89 e5             	mov    %rsp,%rbp
  407d39:	48 83 ec 10          	sub    $0x10,%rsp
  407d3d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407d41:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  407d45:	e8 32 16 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  407d4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407d4e:	48 8b 40 10          	mov    0x10(%rax),%rax
  407d52:	c9                   	leaveq 
  407d53:	c3                   	retq   

0000000000407d54 <_D6object20TypeInfo_StaticArray5flagsMFZk>:
	uint flags() { return value.flags(); }
  407d54:	55                   	push   %rbp
  407d55:	48 89 e5             	mov    %rsp,%rbp
  407d58:	48 83 ec 10          	sub    $0x10,%rsp
  407d5c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407d60:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  407d64:	e8 13 16 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  407d69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407d6d:	48 8b 40 10          	mov    0x10(%rax),%rax
  407d71:	48 8b 00             	mov    (%rax),%rax
  407d74:	48 83 c0 60          	add    $0x60,%rax
  407d78:	48 8b 10             	mov    (%rax),%rdx
  407d7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407d7f:	48 8b 78 10          	mov    0x10(%rax),%rdi
  407d83:	ff d2                	callq  *%rdx
  407d85:	c9                   	leaveq 
  407d86:	c3                   	retq   

0000000000407d87 <_D6object25TypeInfo_AssociativeArray8toStringMFZAa>:
	size_t len;
}

class TypeInfo_AssociativeArray : TypeInfo
{
	char[] toString()
  407d87:	55                   	push   %rbp
  407d88:	48 89 e5             	mov    %rsp,%rbp
  407d8b:	41 57                	push   %r15
  407d8d:	41 56                	push   %r14
  407d8f:	41 55                	push   %r13
  407d91:	41 54                	push   %r12
  407d93:	53                   	push   %rbx
  407d94:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
  407d9b:	48 89 fb             	mov    %rdi,%rbx
  407d9e:	48 89 b5 08 ff ff ff 	mov    %rsi,-0xf8(%rbp)
  407da5:	48 8b bd 08 ff ff ff 	mov    -0xf8(%rbp),%rdi
  407dac:	e8 cb 15 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return value.toString() ~ "[" ~ key.toString() ~ "]";
  407db1:	48 c7 85 10 ff ff ff 	movq   $0x1,-0xf0(%rbp)
  407db8:	01 00 00 00 
  407dbc:	48 c7 85 18 ff ff ff 	movq   $0x411e90,-0xe8(%rbp)
  407dc3:	90 1e 41 00 
  407dc7:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  407dce:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  407dd5:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  407ddc:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  407de3:	4c 8b a5 28 ff ff ff 	mov    -0xd8(%rbp),%r12
  407dea:	4c 8b ad 20 ff ff ff 	mov    -0xe0(%rbp),%r13
  407df1:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  407df8:	48 8b 40 18          	mov    0x18(%rax),%rax
  407dfc:	48 8b 00             	mov    (%rax),%rax
  407dff:	48 83 c0 08          	add    $0x8,%rax
  407e03:	48 8b 10             	mov    (%rax),%rdx
  407e06:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  407e0d:	48 8b 70 18          	mov    0x18(%rax),%rsi
  407e11:	48 8d bd f0 fe ff ff 	lea    -0x110(%rbp),%rdi
  407e18:	ff d2                	callq  *%rdx
  407e1a:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  407e21:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  407e28:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  407e2f:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  407e36:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  407e3d:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  407e44:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  407e4b:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  407e52:	4c 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%r14
  407e59:	4c 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%r15
  407e60:	48 c7 85 50 ff ff ff 	movq   $0x1,-0xb0(%rbp)
  407e67:	01 00 00 00 
  407e6b:	48 c7 85 58 ff ff ff 	movq   $0x411e92,-0xa8(%rbp)
  407e72:	92 1e 41 00 
  407e76:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  407e7d:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  407e84:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  407e8b:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  407e92:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  407e99:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
  407ea0:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  407ea7:	48 89 95 b8 fe ff ff 	mov    %rdx,-0x148(%rbp)
  407eae:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  407eb5:	48 8b 40 10          	mov    0x10(%rax),%rax
  407eb9:	48 8b 00             	mov    (%rax),%rax
  407ebc:	48 83 c0 08          	add    $0x8,%rax
  407ec0:	48 8b 10             	mov    (%rax),%rdx
  407ec3:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  407eca:	48 8b 70 10          	mov    0x10(%rax),%rsi
  407ece:	48 8d bd e0 fe ff ff 	lea    -0x120(%rbp),%rdi
  407ed5:	ff d2                	callq  *%rdx
  407ed7:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  407ede:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  407ee5:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  407eec:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  407ef3:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  407efa:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  407efe:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  407f05:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  407f09:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  407f0d:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
  407f11:	48 8d bd d0 fe ff ff 	lea    -0x130(%rbp),%rdi
  407f18:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
  407f1f:	48 89 14 24          	mov    %rdx,(%rsp)
  407f23:	4c 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%r9
  407f2a:	49 89 c0             	mov    %rax,%r8
  407f2d:	ba 02 00 00 00       	mov    $0x2,%edx
  407f32:	48 c7 c6 00 ff 40 00 	mov    $0x40ff00,%rsi
  407f39:	b8 00 00 00 00       	mov    $0x0,%eax
  407f3e:	e8 e8 27 00 00       	callq  40a72b <_d_arraycatnT>
  407f43:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  407f4a:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  407f4e:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  407f55:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  407f59:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  407f5d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  407f61:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  407f65:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  407f69:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  407f6d:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  407f71:	48 8d bd c0 fe ff ff 	lea    -0x140(%rbp),%rdi
  407f78:	4c 89 34 24          	mov    %r14,(%rsp)
  407f7c:	4d 89 f9             	mov    %r15,%r9
  407f7f:	49 89 c0             	mov    %rax,%r8
  407f82:	ba 02 00 00 00       	mov    $0x2,%edx
  407f87:	48 c7 c6 00 ff 40 00 	mov    $0x40ff00,%rsi
  407f8e:	b8 00 00 00 00       	mov    $0x0,%eax
  407f93:	e8 93 27 00 00       	callq  40a72b <_d_arraycatnT>
  407f98:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
  407f9f:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  407fa3:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  407faa:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  407fae:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  407fb2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  407fb6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407fba:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  407fbe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407fc2:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  407fc6:	4c 89 24 24          	mov    %r12,(%rsp)
  407fca:	4d 89 e9             	mov    %r13,%r9
  407fcd:	49 89 c0             	mov    %rax,%r8
  407fd0:	ba 02 00 00 00       	mov    $0x2,%edx
  407fd5:	48 c7 c6 00 ff 40 00 	mov    $0x40ff00,%rsi
  407fdc:	48 89 df             	mov    %rbx,%rdi
  407fdf:	b8 00 00 00 00       	mov    $0x0,%eax
  407fe4:	e8 42 27 00 00       	callq  40a72b <_d_arraycatnT>
	}
  407fe9:	48 89 d8             	mov    %rbx,%rax
  407fec:	48 81 c4 38 01 00 00 	add    $0x138,%rsp
  407ff3:	5b                   	pop    %rbx
  407ff4:	41 5c                	pop    %r12
  407ff6:	41 5d                	pop    %r13
  407ff8:	41 5e                	pop    %r14
  407ffa:	41 5f                	pop    %r15
  407ffc:	c9                   	leaveq 
  407ffd:	c3                   	retq   

0000000000407ffe <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  407ffe:	55                   	push   %rbp
  407fff:	48 89 e5             	mov    %rsp,%rbp
  408002:	48 83 ec 30          	sub    $0x30,%rsp
  408006:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40800a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40800e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408012:	e8 65 13 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_AssociativeArray c;
  408017:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40801e:	00 

		return this is o ||
  40801f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408023:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  408027:	74 71                	je     40809a <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi+0x9c>
  408029:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40802d:	48 c7 c6 20 c2 41 00 	mov    $0x41c220,%rsi
  408034:	e8 86 15 00 00       	callq  4095bf <_d_dynamic_cast>
  408039:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40803d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  408042:	74 5c                	je     4080a0 <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi+0xa2>
  408044:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408048:	48 8b 40 18          	mov    0x18(%rax),%rax
  40804c:	48 8b 00             	mov    (%rax),%rax
  40804f:	48 83 c0 20          	add    $0x20,%rax
  408053:	48 8b 10             	mov    (%rax),%rdx
  408056:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40805a:	48 8b 40 18          	mov    0x18(%rax),%rax
  40805e:	48 89 c6             	mov    %rax,%rsi
  408061:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408065:	48 8b 78 18          	mov    0x18(%rax),%rdi
  408069:	ff d2                	callq  *%rdx
  40806b:	85 c0                	test   %eax,%eax
  40806d:	74 31                	je     4080a0 <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi+0xa2>
  40806f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408073:	48 8b 40 10          	mov    0x10(%rax),%rax
  408077:	48 8b 00             	mov    (%rax),%rax
  40807a:	48 83 c0 20          	add    $0x20,%rax
  40807e:	48 8b 10             	mov    (%rax),%rdx
  408081:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408085:	48 8b 40 10          	mov    0x10(%rax),%rax
  408089:	48 89 c6             	mov    %rax,%rsi
  40808c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408090:	48 8b 78 10          	mov    0x10(%rax),%rdi
  408094:	ff d2                	callq  *%rdx
  408096:	85 c0                	test   %eax,%eax
  408098:	74 06                	je     4080a0 <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi+0xa2>
  40809a:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  40809e:	eb 04                	jmp    4080a4 <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi+0xa6>
  4080a0:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  4080a4:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_AssociativeArray)o) !is null &&
				 this.key == c.key &&
				 this.value == c.value);
	}
  4080a8:	c9                   	leaveq 
  4080a9:	c3                   	retq   

00000000004080aa <_D6object25TypeInfo_AssociativeArray5tsizeMFZm>:

	// BUG: need to add the rest of the functions

	size_t tsize()
  4080aa:	55                   	push   %rbp
  4080ab:	48 89 e5             	mov    %rsp,%rbp
  4080ae:	48 83 ec 10          	sub    $0x10,%rsp
  4080b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4080b6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4080ba:	e8 bd 12 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return (char[int]).sizeof;
  4080bf:	b8 08 00 00 00       	mov    $0x8,%eax
	}
  4080c4:	c9                   	leaveq 
  4080c5:	c3                   	retq   

00000000004080c6 <_D6object25TypeInfo_AssociativeArray4nextMFZC8TypeInfo>:

	TypeInfo next() { return value; }
  4080c6:	55                   	push   %rbp
  4080c7:	48 89 e5             	mov    %rsp,%rbp
  4080ca:	48 83 ec 10          	sub    $0x10,%rsp
  4080ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4080d2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4080d6:	e8 a1 12 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  4080db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4080df:	48 8b 40 10          	mov    0x10(%rax),%rax
  4080e3:	c9                   	leaveq 
  4080e4:	c3                   	retq   

00000000004080e5 <_D6object25TypeInfo_AssociativeArray5flagsMFZk>:
	uint flags() { return 1; }
  4080e5:	55                   	push   %rbp
  4080e6:	48 89 e5             	mov    %rsp,%rbp
  4080e9:	48 83 ec 10          	sub    $0x10,%rsp
  4080ed:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4080f1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4080f5:	e8 82 12 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  4080fa:	b8 01 00 00 00       	mov    $0x1,%eax
  4080ff:	c9                   	leaveq 
  408100:	c3                   	retq   

0000000000408101 <_D6object17TypeInfo_Function8toStringMFZAa>:
	TypeInfo key;
}

class TypeInfo_Function : TypeInfo
{
	char[] toString()
  408101:	55                   	push   %rbp
  408102:	48 89 e5             	mov    %rsp,%rbp
  408105:	41 55                	push   %r13
  408107:	41 54                	push   %r12
  408109:	53                   	push   %rbx
  40810a:	48 83 ec 78          	sub    $0x78,%rsp
  40810e:	48 89 fb             	mov    %rdi,%rbx
  408111:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
  408115:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  408119:	e8 5e 12 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return next.toString() ~ "()";
  40811e:	48 c7 45 a0 02 00 00 	movq   $0x2,-0x60(%rbp)
  408125:	00 
  408126:	48 c7 45 a8 10 20 41 	movq   $0x412010,-0x58(%rbp)
  40812d:	00 
  40812e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  408132:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  408136:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40813a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40813e:	4c 8b 65 b8          	mov    -0x48(%rbp),%r12
  408142:	4c 8b 6d b0          	mov    -0x50(%rbp),%r13
  408146:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40814a:	48 8b 40 10          	mov    0x10(%rax),%rax
  40814e:	48 8b 00             	mov    (%rax),%rax
  408151:	48 83 c0 08          	add    $0x8,%rax
  408155:	48 8b 10             	mov    (%rax),%rdx
  408158:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40815c:	48 8b 70 10          	mov    0x10(%rax),%rsi
  408160:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  408164:	ff d2                	callq  *%rdx
  408166:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40816a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40816e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  408172:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  408176:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40817a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40817e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408182:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  408186:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40818a:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  40818e:	4c 89 24 24          	mov    %r12,(%rsp)
  408192:	4d 89 e9             	mov    %r13,%r9
  408195:	49 89 c0             	mov    %rax,%r8
  408198:	ba 02 00 00 00       	mov    $0x2,%edx
  40819d:	48 c7 c6 00 ff 40 00 	mov    $0x40ff00,%rsi
  4081a4:	48 89 df             	mov    %rbx,%rdi
  4081a7:	b8 00 00 00 00       	mov    $0x0,%eax
  4081ac:	e8 7a 25 00 00       	callq  40a72b <_d_arraycatnT>
	}
  4081b1:	48 89 d8             	mov    %rbx,%rax
  4081b4:	48 83 c4 78          	add    $0x78,%rsp
  4081b8:	5b                   	pop    %rbx
  4081b9:	41 5c                	pop    %r12
  4081bb:	41 5d                	pop    %r13
  4081bd:	c9                   	leaveq 
  4081be:	c3                   	retq   

00000000004081bf <_D6object17TypeInfo_Function8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  4081bf:	55                   	push   %rbp
  4081c0:	48 89 e5             	mov    %rsp,%rbp
  4081c3:	48 83 ec 30          	sub    $0x30,%rsp
  4081c7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4081cb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4081cf:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4081d3:	e8 a4 11 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Function c;
  4081d8:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4081df:	00 

		return this is o ||
  4081e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4081e4:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  4081e8:	74 46                	je     408230 <_D6object17TypeInfo_Function8opEqualsMFC6ObjectZi+0x71>
  4081ea:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  4081ee:	48 c7 c6 c0 c2 41 00 	mov    $0x41c2c0,%rsi
  4081f5:	e8 c5 13 00 00       	callq  4095bf <_d_dynamic_cast>
  4081fa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4081fe:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  408203:	74 31                	je     408236 <_D6object17TypeInfo_Function8opEqualsMFC6ObjectZi+0x77>
  408205:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408209:	48 8b 40 10          	mov    0x10(%rax),%rax
  40820d:	48 8b 00             	mov    (%rax),%rax
  408210:	48 83 c0 20          	add    $0x20,%rax
  408214:	48 8b 10             	mov    (%rax),%rdx
  408217:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40821b:	48 8b 40 10          	mov    0x10(%rax),%rax
  40821f:	48 89 c6             	mov    %rax,%rsi
  408222:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408226:	48 8b 78 10          	mov    0x10(%rax),%rdi
  40822a:	ff d2                	callq  *%rdx
  40822c:	85 c0                	test   %eax,%eax
  40822e:	74 06                	je     408236 <_D6object17TypeInfo_Function8opEqualsMFC6ObjectZi+0x77>
  408230:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  408234:	eb 04                	jmp    40823a <_D6object17TypeInfo_Function8opEqualsMFC6ObjectZi+0x7b>
  408236:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  40823a:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_Function)o) !is null &&
				 this.next == c.next);
	}
  40823e:	c9                   	leaveq 
  40823f:	c3                   	retq   

0000000000408240 <_D6object17TypeInfo_Function5tsizeMFZm>:

	// BUG: need to add the rest of the functions

	size_t tsize()
  408240:	55                   	push   %rbp
  408241:	48 89 e5             	mov    %rsp,%rbp
  408244:	48 83 ec 10          	sub    $0x10,%rsp
  408248:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40824c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  408250:	e8 27 11 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return 0;		// no size for functions
  408255:	b8 00 00 00 00       	mov    $0x0,%eax
	}
  40825a:	c9                   	leaveq 
  40825b:	c3                   	retq   

000000000040825c <_D6object17TypeInfo_Delegate8toStringMFZAa>:
	TypeInfo next;
}

class TypeInfo_Delegate : TypeInfo
{
	char[] toString()
  40825c:	55                   	push   %rbp
  40825d:	48 89 e5             	mov    %rsp,%rbp
  408260:	41 55                	push   %r13
  408262:	41 54                	push   %r12
  408264:	53                   	push   %rbx
  408265:	48 83 ec 78          	sub    $0x78,%rsp
  408269:	48 89 fb             	mov    %rdi,%rbx
  40826c:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
  408270:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  408274:	e8 03 11 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return next.toString() ~ " delegate()";
  408279:	48 c7 45 a0 0b 00 00 	movq   $0xb,-0x60(%rbp)
  408280:	00 
  408281:	48 c7 45 a8 d0 20 41 	movq   $0x4120d0,-0x58(%rbp)
  408288:	00 
  408289:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40828d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  408291:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  408295:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  408299:	4c 8b 65 b8          	mov    -0x48(%rbp),%r12
  40829d:	4c 8b 6d b0          	mov    -0x50(%rbp),%r13
  4082a1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4082a5:	48 8b 40 10          	mov    0x10(%rax),%rax
  4082a9:	48 8b 00             	mov    (%rax),%rax
  4082ac:	48 83 c0 08          	add    $0x8,%rax
  4082b0:	48 8b 10             	mov    (%rax),%rdx
  4082b3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4082b7:	48 8b 70 10          	mov    0x10(%rax),%rsi
  4082bb:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  4082bf:	ff d2                	callq  *%rdx
  4082c1:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  4082c5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  4082c9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4082cd:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  4082d1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4082d5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4082d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4082dd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4082e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4082e5:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  4082e9:	4c 89 24 24          	mov    %r12,(%rsp)
  4082ed:	4d 89 e9             	mov    %r13,%r9
  4082f0:	49 89 c0             	mov    %rax,%r8
  4082f3:	ba 02 00 00 00       	mov    $0x2,%edx
  4082f8:	48 c7 c6 00 ff 40 00 	mov    $0x40ff00,%rsi
  4082ff:	48 89 df             	mov    %rbx,%rdi
  408302:	b8 00 00 00 00       	mov    $0x0,%eax
  408307:	e8 1f 24 00 00       	callq  40a72b <_d_arraycatnT>
	}
  40830c:	48 89 d8             	mov    %rbx,%rax
  40830f:	48 83 c4 78          	add    $0x78,%rsp
  408313:	5b                   	pop    %rbx
  408314:	41 5c                	pop    %r12
  408316:	41 5d                	pop    %r13
  408318:	c9                   	leaveq 
  408319:	c3                   	retq   

000000000040831a <_D6object17TypeInfo_Delegate8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  40831a:	55                   	push   %rbp
  40831b:	48 89 e5             	mov    %rsp,%rbp
  40831e:	48 83 ec 30          	sub    $0x30,%rsp
  408322:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408326:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40832a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40832e:	e8 49 10 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Delegate c;
  408333:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40833a:	00 

		return this is o ||
  40833b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40833f:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  408343:	74 46                	je     40838b <_D6object17TypeInfo_Delegate8opEqualsMFC6ObjectZi+0x71>
  408345:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  408349:	48 c7 c6 60 c3 41 00 	mov    $0x41c360,%rsi
  408350:	e8 6a 12 00 00       	callq  4095bf <_d_dynamic_cast>
  408355:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  408359:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40835e:	74 31                	je     408391 <_D6object17TypeInfo_Delegate8opEqualsMFC6ObjectZi+0x77>
  408360:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408364:	48 8b 40 10          	mov    0x10(%rax),%rax
  408368:	48 8b 00             	mov    (%rax),%rax
  40836b:	48 83 c0 20          	add    $0x20,%rax
  40836f:	48 8b 10             	mov    (%rax),%rdx
  408372:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408376:	48 8b 40 10          	mov    0x10(%rax),%rax
  40837a:	48 89 c6             	mov    %rax,%rsi
  40837d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408381:	48 8b 78 10          	mov    0x10(%rax),%rdi
  408385:	ff d2                	callq  *%rdx
  408387:	85 c0                	test   %eax,%eax
  408389:	74 06                	je     408391 <_D6object17TypeInfo_Delegate8opEqualsMFC6ObjectZi+0x77>
  40838b:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  40838f:	eb 04                	jmp    408395 <_D6object17TypeInfo_Delegate8opEqualsMFC6ObjectZi+0x7b>
  408391:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  408395:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_Delegate)o) !is null &&
				 this.next == c.next);
	}
  408399:	c9                   	leaveq 
  40839a:	c3                   	retq   

000000000040839b <_D6object17TypeInfo_Delegate5tsizeMFZm>:

	// BUG: need to add the rest of the functions

	size_t tsize()
  40839b:	55                   	push   %rbp
  40839c:	48 89 e5             	mov    %rsp,%rbp
  40839f:	48 83 ec 10          	sub    $0x10,%rsp
  4083a3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4083a7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4083ab:	e8 cc 0f 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{	alias int delegate() dg;
		return dg.sizeof;
  4083b0:	b8 10 00 00 00       	mov    $0x10,%eax
	}
  4083b5:	c9                   	leaveq 
  4083b6:	c3                   	retq   

00000000004083b7 <_D6object17TypeInfo_Delegate5flagsMFZk>:

	uint flags() { return 1; }
  4083b7:	55                   	push   %rbp
  4083b8:	48 89 e5             	mov    %rsp,%rbp
  4083bb:	48 83 ec 10          	sub    $0x10,%rsp
  4083bf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4083c3:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4083c7:	e8 b0 0f 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  4083cc:	b8 01 00 00 00       	mov    $0x1,%eax
  4083d1:	c9                   	leaveq 
  4083d2:	c3                   	retq   

00000000004083d3 <_D6object14TypeInfo_Class8toStringMFZAa>:
	TypeInfo next;
}

class TypeInfo_Class : TypeInfo
{
	char[] toString() { return info.name; }
  4083d3:	55                   	push   %rbp
  4083d4:	48 89 e5             	mov    %rsp,%rbp
  4083d7:	53                   	push   %rbx
  4083d8:	48 83 ec 08          	sub    $0x8,%rsp
  4083dc:	48 89 fb             	mov    %rdi,%rbx
  4083df:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4083e3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4083e7:	e8 90 0f 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  4083ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4083f0:	48 8b 50 10          	mov    0x10(%rax),%rdx
  4083f4:	48 8b 42 20          	mov    0x20(%rdx),%rax
  4083f8:	48 89 03             	mov    %rax,(%rbx)
  4083fb:	48 8b 42 28          	mov    0x28(%rdx),%rax
  4083ff:	48 89 43 08          	mov    %rax,0x8(%rbx)
  408403:	48 89 d8             	mov    %rbx,%rax
  408406:	48 83 c4 08          	add    $0x8,%rsp
  40840a:	5b                   	pop    %rbx
  40840b:	c9                   	leaveq 
  40840c:	c3                   	retq   

000000000040840d <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  40840d:	55                   	push   %rbp
  40840e:	48 89 e5             	mov    %rsp,%rbp
  408411:	48 83 ec 40          	sub    $0x40,%rsp
  408415:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408419:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40841d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408421:	e8 56 0f 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Class c;
  408426:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40842d:	00 

		return this is o ||
  40842e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408432:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  408436:	0f 84 9a 00 00 00    	je     4084d6 <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi+0xc9>
  40843c:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  408440:	48 c7 c6 00 c4 41 00 	mov    $0x41c400,%rsi
  408447:	e8 73 11 00 00       	callq  4095bf <_d_dynamic_cast>
  40844c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  408450:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  408455:	0f 84 81 00 00 00    	je     4084dc <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi+0xcf>
  40845b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40845f:	48 8b 40 10          	mov    0x10(%rax),%rax
  408463:	48 8b 50 20          	mov    0x20(%rax),%rdx
  408467:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40846b:	48 8b 00             	mov    (%rax),%rax
  40846e:	48 8b 00             	mov    (%rax),%rax
  408471:	48 8b 40 20          	mov    0x20(%rax),%rax
  408475:	48 39 c2             	cmp    %rax,%rdx
  408478:	75 62                	jne    4084dc <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi+0xcf>
  40847a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40847e:	48 8b 40 10          	mov    0x10(%rax),%rax
  408482:	48 8b 48 20          	mov    0x20(%rax),%rcx
  408486:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40848a:	48 8b 00             	mov    (%rax),%rax
  40848d:	48 8b 00             	mov    (%rax),%rax
  408490:	48 8b 50 28          	mov    0x28(%rax),%rdx
  408494:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408498:	48 8b 40 10          	mov    0x10(%rax),%rax
  40849c:	48 8b 40 28          	mov    0x28(%rax),%rax
  4084a0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4084a4:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4084a8:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  4084ac:	fc                   	cld    
  4084ad:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4084b1:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  4084b5:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  4084b9:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4084bd:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  4084c1:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  4084c3:	0f 97 c2             	seta   %dl
  4084c6:	0f 92 c0             	setb   %al
  4084c9:	89 d1                	mov    %edx,%ecx
  4084cb:	28 c1                	sub    %al,%cl
  4084cd:	89 c8                	mov    %ecx,%eax
  4084cf:	0f be c0             	movsbl %al,%eax
  4084d2:	85 c0                	test   %eax,%eax
  4084d4:	75 06                	jne    4084dc <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi+0xcf>
  4084d6:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  4084da:	eb 04                	jmp    4084e0 <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi+0xd3>
  4084dc:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  4084e0:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_Class)o) !is null &&
				 this.info.name == c.classinfo.name);
	}
  4084e4:	c9                   	leaveq 
  4084e5:	c3                   	retq   

00000000004084e6 <_D6object14TypeInfo_Class7getHashMFPvZm>:

	hash_t getHash(void *p)
  4084e6:	55                   	push   %rbp
  4084e7:	48 89 e5             	mov    %rsp,%rbp
  4084ea:	48 83 ec 20          	sub    $0x20,%rsp
  4084ee:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4084f2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4084f6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4084fa:	e8 7d 0e 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Object o = *cast(Object*)p;
  4084ff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408503:	48 8b 00             	mov    (%rax),%rax
  408506:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		assert(o);
  40850a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40850e:	e8 69 0e 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
		return o.toHash();
  408513:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408517:	48 8b 00             	mov    (%rax),%rax
  40851a:	48 83 c0 10          	add    $0x10,%rax
  40851e:	48 8b 00             	mov    (%rax),%rax
  408521:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  408525:	ff d0                	callq  *%rax
	}
  408527:	c9                   	leaveq 
  408528:	c3                   	retq   

0000000000408529 <_D6object14TypeInfo_Class6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  408529:	55                   	push   %rbp
  40852a:	48 89 e5             	mov    %rsp,%rbp
  40852d:	48 83 ec 30          	sub    $0x30,%rsp
  408531:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408535:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408539:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40853d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408541:	e8 36 0e 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Object o1 = *cast(Object*)p1;
  408546:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40854a:	48 8b 00             	mov    (%rax),%rax
  40854d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = *cast(Object*)p2;
  408551:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408555:	48 8b 00             	mov    (%rax),%rax
  408558:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		return (o1 is o2) || (o1 && o1.opEquals(o2));
  40855c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408560:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  408564:	74 23                	je     408589 <_D6object14TypeInfo_Class6equalsMFPvPvZi+0x60>
  408566:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40856b:	74 22                	je     40858f <_D6object14TypeInfo_Class6equalsMFPvPvZi+0x66>
  40856d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408571:	48 8b 00             	mov    (%rax),%rax
  408574:	48 83 c0 20          	add    $0x20,%rax
  408578:	48 8b 00             	mov    (%rax),%rax
  40857b:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  40857f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  408583:	ff d0                	callq  *%rax
  408585:	85 c0                	test   %eax,%eax
  408587:	74 06                	je     40858f <_D6object14TypeInfo_Class6equalsMFPvPvZi+0x66>
  408589:	c6 45 d7 01          	movb   $0x1,-0x29(%rbp)
  40858d:	eb 04                	jmp    408593 <_D6object14TypeInfo_Class6equalsMFPvPvZi+0x6a>
  40858f:	c6 45 d7 00          	movb   $0x0,-0x29(%rbp)
  408593:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
	}
  408597:	c9                   	leaveq 
  408598:	c3                   	retq   

0000000000408599 <_D6object14TypeInfo_Class7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  408599:	55                   	push   %rbp
  40859a:	48 89 e5             	mov    %rsp,%rbp
  40859d:	48 83 ec 40          	sub    $0x40,%rsp
  4085a1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4085a5:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4085a9:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4085ad:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4085b1:	e8 c6 0d 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Object o1 = *cast(Object*)p1;
  4085b6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4085ba:	48 8b 00             	mov    (%rax),%rax
  4085bd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = *cast(Object*)p2;
  4085c1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4085c5:	48 8b 00             	mov    (%rax),%rax
  4085c8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		int c = 0;
  4085cc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)

		// Regard null references as always being "less than"
		if (o1 !is o2)
  4085d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4085d7:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  4085db:	74 43                	je     408620 <_D6object14TypeInfo_Class7compareMFPvPvZi+0x87>
		{
			if (o1)
  4085dd:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4085e2:	74 35                	je     408619 <_D6object14TypeInfo_Class7compareMFPvPvZi+0x80>
			{	if (!o2)
  4085e4:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  4085e9:	0f 95 c0             	setne  %al
  4085ec:	83 f0 01             	xor    $0x1,%eax
  4085ef:	84 c0                	test   %al,%al
  4085f1:	74 09                	je     4085fc <_D6object14TypeInfo_Class7compareMFPvPvZi+0x63>
					c = 1;
  4085f3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  4085fa:	eb 24                	jmp    408620 <_D6object14TypeInfo_Class7compareMFPvPvZi+0x87>
				else
					c = o1.opCmp(o2);
  4085fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408600:	48 8b 00             	mov    (%rax),%rax
  408603:	48 83 c0 18          	add    $0x18,%rax
  408607:	48 8b 00             	mov    (%rax),%rax
  40860a:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  40860e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  408612:	ff d0                	callq  *%rax
  408614:	89 45 ec             	mov    %eax,-0x14(%rbp)
  408617:	eb 07                	jmp    408620 <_D6object14TypeInfo_Class7compareMFPvPvZi+0x87>
			}
			else
				c = -1;
  408619:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rbp)
		}
		return c;
  408620:	8b 45 ec             	mov    -0x14(%rbp),%eax
	}
  408623:	c9                   	leaveq 
  408624:	c3                   	retq   

0000000000408625 <_D6object14TypeInfo_Class5tsizeMFZm>:

	size_t tsize()
  408625:	55                   	push   %rbp
  408626:	48 89 e5             	mov    %rsp,%rbp
  408629:	48 83 ec 10          	sub    $0x10,%rsp
  40862d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408631:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  408635:	e8 42 0d 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return Object.sizeof;
  40863a:	b8 08 00 00 00       	mov    $0x8,%eax
	}
  40863f:	c9                   	leaveq 
  408640:	c3                   	retq   

0000000000408641 <_D6object14TypeInfo_Class5flagsMFZk>:

	uint flags() { return 1; }
  408641:	55                   	push   %rbp
  408642:	48 89 e5             	mov    %rsp,%rbp
  408645:	48 83 ec 10          	sub    $0x10,%rsp
  408649:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40864d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  408651:	e8 26 0d 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  408656:	b8 01 00 00 00       	mov    $0x1,%eax
  40865b:	c9                   	leaveq 
  40865c:	c3                   	retq   

000000000040865d <_D6object14TypeInfo_Class5offTiMFZAS6object14OffsetTypeInfo>:

	OffsetTypeInfo[] offTi()
  40865d:	55                   	push   %rbp
  40865e:	48 89 e5             	mov    %rsp,%rbp
  408661:	48 83 ec 10          	sub    $0x10,%rsp
  408665:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  408669:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
  40866d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  408671:	e8 06 0d 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return (info.flags & 4) ? info.offTi : null;
  408676:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40867a:	48 8b 40 10          	mov    0x10(%rax),%rax
  40867e:	8b 40 68             	mov    0x68(%rax),%eax
  408681:	83 e0 04             	and    $0x4,%eax
  408684:	85 c0                	test   %eax,%eax
  408686:	74 24                	je     4086ac <_D6object14TypeInfo_Class5offTiMFZAS6object14OffsetTypeInfo+0x4f>
  408688:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40868c:	48 8b 50 10          	mov    0x10(%rax),%rdx
  408690:	48 8b 42 78          	mov    0x78(%rdx),%rax
  408694:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  408698:	48 89 01             	mov    %rax,(%rcx)
  40869b:	48 8b 82 80 00 00 00 	mov    0x80(%rdx),%rax
  4086a2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4086a6:	48 89 42 08          	mov    %rax,0x8(%rdx)
  4086aa:	eb 17                	jmp    4086c3 <_D6object14TypeInfo_Class5offTiMFZAS6object14OffsetTypeInfo+0x66>
  4086ac:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4086b0:	48 c7 01 00 00 00 00 	movq   $0x0,(%rcx)
  4086b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4086bb:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  4086c2:	00 
	}
  4086c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4086c7:	c9                   	leaveq 
  4086c8:	c3                   	retq   

00000000004086c9 <_D6object18TypeInfo_Interface8toStringMFZAa>:
	ClassInfo info;
}

class TypeInfo_Interface : TypeInfo
{
	char[] toString() { return info.name; }
  4086c9:	55                   	push   %rbp
  4086ca:	48 89 e5             	mov    %rsp,%rbp
  4086cd:	53                   	push   %rbx
  4086ce:	48 83 ec 08          	sub    $0x8,%rsp
  4086d2:	48 89 fb             	mov    %rdi,%rbx
  4086d5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4086d9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4086dd:	e8 9a 0c 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  4086e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4086e6:	48 8b 50 10          	mov    0x10(%rax),%rdx
  4086ea:	48 8b 42 20          	mov    0x20(%rdx),%rax
  4086ee:	48 89 03             	mov    %rax,(%rbx)
  4086f1:	48 8b 42 28          	mov    0x28(%rdx),%rax
  4086f5:	48 89 43 08          	mov    %rax,0x8(%rbx)
  4086f9:	48 89 d8             	mov    %rbx,%rax
  4086fc:	48 83 c4 08          	add    $0x8,%rsp
  408700:	5b                   	pop    %rbx
  408701:	c9                   	leaveq 
  408702:	c3                   	retq   

0000000000408703 <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  408703:	55                   	push   %rbp
  408704:	48 89 e5             	mov    %rsp,%rbp
  408707:	48 83 ec 40          	sub    $0x40,%rsp
  40870b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40870f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408713:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408717:	e8 60 0c 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Interface c;
  40871c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  408723:	00 

		return this is o ||
  408724:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408728:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40872c:	0f 84 9a 00 00 00    	je     4087cc <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi+0xc9>
  408732:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  408736:	48 c7 c6 a0 c4 41 00 	mov    $0x41c4a0,%rsi
  40873d:	e8 7d 0e 00 00       	callq  4095bf <_d_dynamic_cast>
  408742:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  408746:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40874b:	0f 84 81 00 00 00    	je     4087d2 <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi+0xcf>
  408751:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408755:	48 8b 40 10          	mov    0x10(%rax),%rax
  408759:	48 8b 50 20          	mov    0x20(%rax),%rdx
  40875d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408761:	48 8b 00             	mov    (%rax),%rax
  408764:	48 8b 00             	mov    (%rax),%rax
  408767:	48 8b 40 20          	mov    0x20(%rax),%rax
  40876b:	48 39 c2             	cmp    %rax,%rdx
  40876e:	75 62                	jne    4087d2 <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi+0xcf>
  408770:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408774:	48 8b 40 10          	mov    0x10(%rax),%rax
  408778:	48 8b 48 20          	mov    0x20(%rax),%rcx
  40877c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408780:	48 8b 00             	mov    (%rax),%rax
  408783:	48 8b 00             	mov    (%rax),%rax
  408786:	48 8b 50 28          	mov    0x28(%rax),%rdx
  40878a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40878e:	48 8b 40 10          	mov    0x10(%rax),%rax
  408792:	48 8b 40 28          	mov    0x28(%rax),%rax
  408796:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40879a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40879e:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  4087a2:	fc                   	cld    
  4087a3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4087a7:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  4087ab:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  4087af:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  4087b3:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  4087b7:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  4087b9:	0f 97 c2             	seta   %dl
  4087bc:	0f 92 c0             	setb   %al
  4087bf:	89 d1                	mov    %edx,%ecx
  4087c1:	28 c1                	sub    %al,%cl
  4087c3:	89 c8                	mov    %ecx,%eax
  4087c5:	0f be c0             	movsbl %al,%eax
  4087c8:	85 c0                	test   %eax,%eax
  4087ca:	75 06                	jne    4087d2 <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi+0xcf>
  4087cc:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  4087d0:	eb 04                	jmp    4087d6 <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi+0xd3>
  4087d2:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  4087d6:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_Interface)o) !is null &&
				 this.info.name == c.classinfo.name);
	}
  4087da:	c9                   	leaveq 
  4087db:	c3                   	retq   

00000000004087dc <_D6object18TypeInfo_Interface7getHashMFPvZm>:

	hash_t getHash(void *p)
  4087dc:	55                   	push   %rbp
  4087dd:	48 89 e5             	mov    %rsp,%rbp
  4087e0:	48 83 ec 20          	sub    $0x20,%rsp
  4087e4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4087e8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4087ec:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4087f0:	e8 87 0b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Interface* pi = **cast(Interface ***)*cast(void**)p;
  4087f5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4087f9:	48 8b 00             	mov    (%rax),%rax
  4087fc:	48 8b 00             	mov    (%rax),%rax
  4087ff:	48 8b 00             	mov    (%rax),%rax
  408802:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o = cast(Object)(*cast(void**)p - pi.offset);
  408806:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40880a:	48 8b 10             	mov    (%rax),%rdx
  40880d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408811:	48 83 c0 18          	add    $0x18,%rax
  408815:	8b 00                	mov    (%rax),%eax
  408817:	48 98                	cltq   
  408819:	48 89 d1             	mov    %rdx,%rcx
  40881c:	48 29 c1             	sub    %rax,%rcx
  40881f:	48 89 c8             	mov    %rcx,%rax
  408822:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		assert(o);
  408826:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40882a:	e8 4d 0b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
		return o.toHash();
  40882f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408833:	48 8b 00             	mov    (%rax),%rax
  408836:	48 83 c0 10          	add    $0x10,%rax
  40883a:	48 8b 00             	mov    (%rax),%rax
  40883d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408841:	ff d0                	callq  *%rax
	}
  408843:	c9                   	leaveq 
  408844:	c3                   	retq   

0000000000408845 <_D6object18TypeInfo_Interface6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  408845:	55                   	push   %rbp
  408846:	48 89 e5             	mov    %rsp,%rbp
  408849:	48 83 ec 40          	sub    $0x40,%rsp
  40884d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408851:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408855:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  408859:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  40885d:	e8 1a 0b 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Interface* pi = **cast(Interface ***)*cast(void**)p1;
  408862:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408866:	48 8b 00             	mov    (%rax),%rax
  408869:	48 8b 00             	mov    (%rax),%rax
  40886c:	48 8b 00             	mov    (%rax),%rax
  40886f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o1 = cast(Object)(*cast(void**)p1 - pi.offset);
  408873:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408877:	48 8b 10             	mov    (%rax),%rdx
  40887a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40887e:	48 83 c0 18          	add    $0x18,%rax
  408882:	8b 00                	mov    (%rax),%eax
  408884:	48 98                	cltq   
  408886:	48 89 d1             	mov    %rdx,%rcx
  408889:	48 29 c1             	sub    %rax,%rcx
  40888c:	48 89 c8             	mov    %rcx,%rax
  40888f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		pi = **cast(Interface ***)*cast(void**)p2;
  408893:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408897:	48 8b 00             	mov    (%rax),%rax
  40889a:	48 8b 00             	mov    (%rax),%rax
  40889d:	48 8b 00             	mov    (%rax),%rax
  4088a0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = cast(Object)(*cast(void**)p2 - pi.offset);
  4088a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4088a8:	48 8b 10             	mov    (%rax),%rdx
  4088ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4088af:	48 83 c0 18          	add    $0x18,%rax
  4088b3:	8b 00                	mov    (%rax),%eax
  4088b5:	48 98                	cltq   
  4088b7:	48 89 d1             	mov    %rdx,%rcx
  4088ba:	48 29 c1             	sub    %rax,%rcx
  4088bd:	48 89 c8             	mov    %rcx,%rax
  4088c0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		return o1 == o2 || (o1 && o1.opCmp(o2) == 0);
  4088c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4088c8:	48 8b 00             	mov    (%rax),%rax
  4088cb:	48 83 c0 20          	add    $0x20,%rax
  4088cf:	48 8b 00             	mov    (%rax),%rax
  4088d2:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4088d6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4088da:	ff d0                	callq  *%rax
  4088dc:	85 c0                	test   %eax,%eax
  4088de:	75 23                	jne    408903 <_D6object18TypeInfo_Interface6equalsMFPvPvZi+0xbe>
  4088e0:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  4088e5:	74 22                	je     408909 <_D6object18TypeInfo_Interface6equalsMFPvPvZi+0xc4>
  4088e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4088eb:	48 8b 00             	mov    (%rax),%rax
  4088ee:	48 83 c0 18          	add    $0x18,%rax
  4088f2:	48 8b 00             	mov    (%rax),%rax
  4088f5:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4088f9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4088fd:	ff d0                	callq  *%rax
  4088ff:	85 c0                	test   %eax,%eax
  408901:	75 06                	jne    408909 <_D6object18TypeInfo_Interface6equalsMFPvPvZi+0xc4>
  408903:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
  408907:	eb 04                	jmp    40890d <_D6object18TypeInfo_Interface6equalsMFPvPvZi+0xc8>
  408909:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  40890d:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
	}
  408911:	c9                   	leaveq 
  408912:	c3                   	retq   

0000000000408913 <_D6object18TypeInfo_Interface7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  408913:	55                   	push   %rbp
  408914:	48 89 e5             	mov    %rsp,%rbp
  408917:	48 83 ec 40          	sub    $0x40,%rsp
  40891b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40891f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408923:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  408927:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  40892b:	e8 4c 0a 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Interface* pi = **cast(Interface ***)*cast(void**)p1;
  408930:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408934:	48 8b 00             	mov    (%rax),%rax
  408937:	48 8b 00             	mov    (%rax),%rax
  40893a:	48 8b 00             	mov    (%rax),%rax
  40893d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o1 = cast(Object)(*cast(void**)p1 - pi.offset);
  408941:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408945:	48 8b 10             	mov    (%rax),%rdx
  408948:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40894c:	48 83 c0 18          	add    $0x18,%rax
  408950:	8b 00                	mov    (%rax),%eax
  408952:	48 98                	cltq   
  408954:	48 89 d1             	mov    %rdx,%rcx
  408957:	48 29 c1             	sub    %rax,%rcx
  40895a:	48 89 c8             	mov    %rcx,%rax
  40895d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		pi = **cast(Interface ***)*cast(void**)p2;
  408961:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408965:	48 8b 00             	mov    (%rax),%rax
  408968:	48 8b 00             	mov    (%rax),%rax
  40896b:	48 8b 00             	mov    (%rax),%rax
  40896e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = cast(Object)(*cast(void**)p2 - pi.offset);
  408972:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408976:	48 8b 10             	mov    (%rax),%rdx
  408979:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40897d:	48 83 c0 18          	add    $0x18,%rax
  408981:	8b 00                	mov    (%rax),%eax
  408983:	48 98                	cltq   
  408985:	48 89 d1             	mov    %rdx,%rcx
  408988:	48 29 c1             	sub    %rax,%rcx
  40898b:	48 89 c8             	mov    %rcx,%rax
  40898e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		int c = 0;
  408992:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)

		// Regard null references as always being "less than"
		if (o1 != o2)
  408999:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40899d:	48 8b 00             	mov    (%rax),%rax
  4089a0:	48 83 c0 20          	add    $0x20,%rax
  4089a4:	48 8b 00             	mov    (%rax),%rax
  4089a7:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4089ab:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4089af:	ff d0                	callq  *%rax
  4089b1:	85 c0                	test   %eax,%eax
  4089b3:	0f 95 c0             	setne  %al
  4089b6:	83 f0 01             	xor    $0x1,%eax
  4089b9:	84 c0                	test   %al,%al
  4089bb:	74 43                	je     408a00 <_D6object18TypeInfo_Interface7compareMFPvPvZi+0xed>
		{
			if (o1)
  4089bd:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  4089c2:	74 35                	je     4089f9 <_D6object18TypeInfo_Interface7compareMFPvPvZi+0xe6>
			{	if (!o2)
  4089c4:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  4089c9:	0f 95 c0             	setne  %al
  4089cc:	83 f0 01             	xor    $0x1,%eax
  4089cf:	84 c0                	test   %al,%al
  4089d1:	74 09                	je     4089dc <_D6object18TypeInfo_Interface7compareMFPvPvZi+0xc9>
					c = 1;
  4089d3:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  4089da:	eb 24                	jmp    408a00 <_D6object18TypeInfo_Interface7compareMFPvPvZi+0xed>
				else
					c = o1.opCmp(o2);
  4089dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4089e0:	48 8b 00             	mov    (%rax),%rax
  4089e3:	48 83 c0 18          	add    $0x18,%rax
  4089e7:	48 8b 00             	mov    (%rax),%rax
  4089ea:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4089ee:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4089f2:	ff d0                	callq  *%rax
  4089f4:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  4089f7:	eb 07                	jmp    408a00 <_D6object18TypeInfo_Interface7compareMFPvPvZi+0xed>
			}
			else
				c = -1;
  4089f9:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
		}
		return c;
  408a00:	8b 45 e4             	mov    -0x1c(%rbp),%eax
	}
  408a03:	c9                   	leaveq 
  408a04:	c3                   	retq   

0000000000408a05 <_D6object18TypeInfo_Interface5tsizeMFZm>:

	size_t tsize()
  408a05:	55                   	push   %rbp
  408a06:	48 89 e5             	mov    %rsp,%rbp
  408a09:	48 83 ec 10          	sub    $0x10,%rsp
  408a0d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408a11:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  408a15:	e8 62 09 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return Object.sizeof;
  408a1a:	b8 08 00 00 00       	mov    $0x8,%eax
	}
  408a1f:	c9                   	leaveq 
  408a20:	c3                   	retq   

0000000000408a21 <_D6object18TypeInfo_Interface5flagsMFZk>:

	uint flags() { return 1; }
  408a21:	55                   	push   %rbp
  408a22:	48 89 e5             	mov    %rsp,%rbp
  408a25:	48 83 ec 10          	sub    $0x10,%rsp
  408a29:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408a2d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  408a31:	e8 46 09 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  408a36:	b8 01 00 00 00       	mov    $0x1,%eax
  408a3b:	c9                   	leaveq 
  408a3c:	c3                   	retq   

0000000000408a3d <_D6object15TypeInfo_Struct8toStringMFZAa>:
	ClassInfo info;
}

class TypeInfo_Struct : TypeInfo
{
	char[] toString() { return name; }
  408a3d:	55                   	push   %rbp
  408a3e:	48 89 e5             	mov    %rsp,%rbp
  408a41:	53                   	push   %rbx
  408a42:	48 83 ec 08          	sub    $0x8,%rsp
  408a46:	48 89 fb             	mov    %rdi,%rbx
  408a49:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408a4d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408a51:	e8 26 09 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  408a56:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  408a5a:	48 8b 42 10          	mov    0x10(%rdx),%rax
  408a5e:	48 89 03             	mov    %rax,(%rbx)
  408a61:	48 8b 42 18          	mov    0x18(%rdx),%rax
  408a65:	48 89 43 08          	mov    %rax,0x8(%rbx)
  408a69:	48 89 d8             	mov    %rbx,%rax
  408a6c:	48 83 c4 08          	add    $0x8,%rsp
  408a70:	5b                   	pop    %rbx
  408a71:	c9                   	leaveq 
  408a72:	c3                   	retq   

0000000000408a73 <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  408a73:	55                   	push   %rbp
  408a74:	48 89 e5             	mov    %rsp,%rbp
  408a77:	53                   	push   %rbx
  408a78:	48 83 ec 68          	sub    $0x68,%rsp
  408a7c:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  408a80:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  408a84:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  408a88:	e8 ef 08 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Struct s;
  408a8d:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  408a94:	00 

		return this is o ||
  408a95:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408a99:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  408a9d:	0f 84 c3 00 00 00    	je     408b66 <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xf3>
  408aa3:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  408aa7:	48 c7 c6 40 c5 41 00 	mov    $0x41c540,%rsi
  408aae:	e8 0c 0b 00 00       	callq  4095bf <_d_dynamic_cast>
  408ab3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  408ab7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  408abc:	0f 84 aa 00 00 00    	je     408b6c <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xf9>
  408ac2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408ac6:	48 8b 50 10          	mov    0x10(%rax),%rdx
  408aca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408ace:	48 8b 40 10          	mov    0x10(%rax),%rax
  408ad2:	48 39 c2             	cmp    %rax,%rdx
  408ad5:	0f 85 91 00 00 00    	jne    408b6c <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xf9>
  408adb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408adf:	48 8b 48 10          	mov    0x10(%rax),%rcx
  408ae3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408ae7:	48 8b 50 18          	mov    0x18(%rax),%rdx
  408aeb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408aef:	48 8b 40 18          	mov    0x18(%rax),%rax
  408af3:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  408af7:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  408afb:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  408aff:	fc                   	cld    
  408b00:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  408b04:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
  408b08:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  408b0c:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  408b10:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  408b14:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  408b16:	0f 97 c2             	seta   %dl
  408b19:	0f 92 c0             	setb   %al
  408b1c:	89 d1                	mov    %edx,%ecx
  408b1e:	28 c1                	sub    %al,%cl
  408b20:	89 c8                	mov    %ecx,%eax
  408b22:	0f be c0             	movsbl %al,%eax
  408b25:	85 c0                	test   %eax,%eax
  408b27:	75 43                	jne    408b6c <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xf9>
  408b29:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408b2d:	48 8b 00             	mov    (%rax),%rax
  408b30:	48 83 c0 58          	add    $0x58,%rax
  408b34:	48 8b 00             	mov    (%rax),%rax
  408b37:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
  408b3b:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  408b3f:	ff d0                	callq  *%rax
  408b41:	48 8b 5d c0          	mov    -0x40(%rbp),%rbx
  408b45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408b49:	48 8b 00             	mov    (%rax),%rax
  408b4c:	48 83 c0 58          	add    $0x58,%rax
  408b50:	48 8b 00             	mov    (%rax),%rax
  408b53:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
  408b57:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  408b5b:	ff d0                	callq  *%rax
  408b5d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408b61:	48 39 c3             	cmp    %rax,%rbx
  408b64:	75 06                	jne    408b6c <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xf9>
  408b66:	c6 45 af 01          	movb   $0x1,-0x51(%rbp)
  408b6a:	eb 04                	jmp    408b70 <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xfd>
  408b6c:	c6 45 af 00          	movb   $0x0,-0x51(%rbp)
  408b70:	0f b6 45 af          	movzbl -0x51(%rbp),%eax
				((s = cast(TypeInfo_Struct)o) !is null &&
				 this.name == s.name &&
				 this.init.length == s.init.length);
	}
  408b74:	48 83 c4 68          	add    $0x68,%rsp
  408b78:	5b                   	pop    %rbx
  408b79:	c9                   	leaveq 
  408b7a:	c3                   	retq   

0000000000408b7b <_D6object15TypeInfo_Struct7getHashMFPvZm>:

	hash_t getHash(void *p)
  408b7b:	55                   	push   %rbp
  408b7c:	48 89 e5             	mov    %rsp,%rbp
  408b7f:	48 83 ec 40          	sub    $0x40,%rsp
  408b83:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  408b87:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  408b8b:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  408b8f:	e8 e8 07 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{	hash_t h;
  408b94:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  408b9b:	00 

		assert(p);
  408b9c:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  408ba1:	75 22                	jne    408bc5 <_D6object15TypeInfo_Struct7getHashMFPvZm+0x4a>
  408ba3:	48 c7 45 d0 08 00 00 	movq   $0x8,-0x30(%rbp)
  408baa:	00 
  408bab:	48 c7 45 d8 80 1a 41 	movq   $0x411a80,-0x28(%rbp)
  408bb2:	00 
  408bb3:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  408bb7:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  408bbb:	ba 6a 03 00 00       	mov    $0x36a,%edx
  408bc0:	e8 0d 22 00 00       	callq  40add2 <_d_assert>
		if (xtoHash)
  408bc5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408bc9:	48 8b 40 30          	mov    0x30(%rax),%rax
  408bcd:	48 85 c0             	test   %rax,%rax
  408bd0:	74 14                	je     408be6 <_D6object15TypeInfo_Struct7getHashMFPvZm+0x6b>
		{	//printf("getHash() using xtoHash\n");
			h = (*xtoHash)(p);
  408bd2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408bd6:	48 8b 40 30          	mov    0x30(%rax),%rax
  408bda:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  408bde:	ff d0                	callq  *%rax
  408be0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  408be4:	eb 5d                	jmp    408c43 <_D6object15TypeInfo_Struct7getHashMFPvZm+0xc8>
		{
			//printf("getHash() using default hash\n");
			// A sorry hash algorithm.
			// Should use the one for strings.
			// BUG: relies on the GC not moving objects
			for (size_t i = 0; i < init.length; i++)
  408be6:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  408bed:	00 
  408bee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408bf2:	48 8b 00             	mov    (%rax),%rax
  408bf5:	48 83 c0 58          	add    $0x58,%rax
  408bf9:	48 8b 00             	mov    (%rax),%rax
  408bfc:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  408c00:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  408c04:	ff d0                	callq  *%rax
  408c06:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408c0a:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  408c0e:	0f 92 c0             	setb   %al
  408c11:	83 f0 01             	xor    $0x1,%eax
  408c14:	84 c0                	test   %al,%al
  408c16:	75 2b                	jne    408c43 <_D6object15TypeInfo_Struct7getHashMFPvZm+0xc8>
			{	h = h * 9 + *cast(ubyte*)p;
  408c18:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  408c1c:	48 89 d0             	mov    %rdx,%rax
  408c1f:	48 c1 e0 03          	shl    $0x3,%rax
  408c23:	48 8d 14 10          	lea    (%rax,%rdx,1),%rdx
  408c27:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  408c2b:	0f b6 00             	movzbl (%rax),%eax
  408c2e:	0f b6 c0             	movzbl %al,%eax
  408c31:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  408c35:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
				p++;
  408c39:	48 ff 45 c0          	incq   -0x40(%rbp)
  408c3d:	48 ff 45 f8          	incq   -0x8(%rbp)
  408c41:	eb ab                	jmp    408bee <_D6object15TypeInfo_Struct7getHashMFPvZm+0x73>
			}
		}
		return h;
  408c43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
	}
  408c47:	c9                   	leaveq 
  408c48:	c3                   	retq   

0000000000408c49 <_D6object15TypeInfo_Struct6equalsMFPvPvZi>:

	int equals(void *p2, void *p1)
  408c49:	55                   	push   %rbp
  408c4a:	48 89 e5             	mov    %rsp,%rbp
  408c4d:	48 83 ec 40          	sub    $0x40,%rsp
  408c51:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408c55:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408c59:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  408c5d:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  408c61:	e8 16 07 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{	int c;
  408c66:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

		if (p1 == p2)
  408c6d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408c71:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  408c75:	75 0c                	jne    408c83 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0x3a>
			c = 1;
  408c77:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  408c7e:	e9 80 00 00 00       	jmpq   408d03 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0xba>
		else if (!p1 || !p2)
  408c83:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  408c88:	0f 95 c0             	setne  %al
  408c8b:	83 f0 01             	xor    $0x1,%eax
  408c8e:	84 c0                	test   %al,%al
  408c90:	75 0f                	jne    408ca1 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0x58>
  408c92:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  408c97:	0f 95 c0             	setne  %al
  408c9a:	83 f0 01             	xor    $0x1,%eax
  408c9d:	84 c0                	test   %al,%al
  408c9f:	74 09                	je     408caa <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0x61>
			c = 0;
  408ca1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	int equals(void *p2, void *p1)
	{	int c;

		if (p1 == p2)
			c = 1;
		else if (!p1 || !p2)
  408ca8:	eb 59                	jmp    408d03 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0xba>
			c = 0;
		else if (xopEquals)
  408caa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408cae:	48 8b 40 38          	mov    0x38(%rax),%rax
  408cb2:	48 85 c0             	test   %rax,%rax
  408cb5:	74 17                	je     408cce <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0x85>
			c = (*xopEquals)(p1, p2);
  408cb7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408cbb:	48 8b 40 38          	mov    0x38(%rax),%rax
  408cbf:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  408cc3:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  408cc7:	ff d0                	callq  *%rax
  408cc9:	89 45 fc             	mov    %eax,-0x4(%rbp)
  408ccc:	eb 35                	jmp    408d03 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0xba>
		else
			// BUG: relies on the GC not moving objects
			c = (memcmp(cast(ubyte*)p1, cast(ubyte*)p2, init.length) == 0);
  408cce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408cd2:	48 8b 00             	mov    (%rax),%rax
  408cd5:	48 83 c0 58          	add    $0x58,%rax
  408cd9:	48 8b 00             	mov    (%rax),%rax
  408cdc:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  408ce0:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  408ce4:	ff d0                	callq  *%rax
  408ce6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  408cea:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  408cee:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  408cf2:	e8 bd 4b 00 00       	callq  40d8b4 <_D6kernel4core6system6memcmpFPvPvmZl>
  408cf7:	48 85 c0             	test   %rax,%rax
  408cfa:	0f 94 c0             	sete   %al
  408cfd:	0f b6 c0             	movzbl %al,%eax
  408d00:	89 45 fc             	mov    %eax,-0x4(%rbp)
		return c;
  408d03:	8b 45 fc             	mov    -0x4(%rbp),%eax
	}
  408d06:	c9                   	leaveq 
  408d07:	c3                   	retq   

0000000000408d08 <_D6object15TypeInfo_Struct7compareMFPvPvZi>:

	int compare(void *p2, void *p1)
  408d08:	55                   	push   %rbp
  408d09:	48 89 e5             	mov    %rsp,%rbp
  408d0c:	48 83 ec 40          	sub    $0x40,%rsp
  408d10:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408d14:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408d18:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  408d1c:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  408d20:	e8 57 06 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		int c = 0;
  408d25:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

		// Regard null references as always being "less than"
		if (p1 != p2)
  408d2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408d30:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  408d34:	74 78                	je     408dae <_D6object15TypeInfo_Struct7compareMFPvPvZi+0xa6>
		{
			if (p1)
  408d36:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  408d3b:	74 6a                	je     408da7 <_D6object15TypeInfo_Struct7compareMFPvPvZi+0x9f>
			{	if (!p2)
  408d3d:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  408d42:	0f 95 c0             	setne  %al
  408d45:	83 f0 01             	xor    $0x1,%eax
  408d48:	84 c0                	test   %al,%al
  408d4a:	74 09                	je     408d55 <_D6object15TypeInfo_Struct7compareMFPvPvZi+0x4d>
					c = 1;
  408d4c:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  408d53:	eb 59                	jmp    408dae <_D6object15TypeInfo_Struct7compareMFPvPvZi+0xa6>
				else if (xopCmp)
  408d55:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408d59:	48 8b 40 40          	mov    0x40(%rax),%rax
  408d5d:	48 85 c0             	test   %rax,%rax
  408d60:	74 17                	je     408d79 <_D6object15TypeInfo_Struct7compareMFPvPvZi+0x71>
					c = (*xopCmp)(p1, p2);
  408d62:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408d66:	48 8b 40 40          	mov    0x40(%rax),%rax
  408d6a:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  408d6e:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  408d72:	ff d0                	callq  *%rax
  408d74:	89 45 fc             	mov    %eax,-0x4(%rbp)
  408d77:	eb 35                	jmp    408dae <_D6object15TypeInfo_Struct7compareMFPvPvZi+0xa6>
				else
					// BUG: relies on the GC not moving objects
					c = memcmp(cast(ubyte*)p1, cast(ubyte*)p2, init.length);
  408d79:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408d7d:	48 8b 00             	mov    (%rax),%rax
  408d80:	48 83 c0 58          	add    $0x58,%rax
  408d84:	48 8b 00             	mov    (%rax),%rax
  408d87:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  408d8b:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  408d8f:	ff d0                	callq  *%rax
  408d91:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  408d95:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  408d99:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  408d9d:	e8 12 4b 00 00       	callq  40d8b4 <_D6kernel4core6system6memcmpFPvPvmZl>
  408da2:	89 45 fc             	mov    %eax,-0x4(%rbp)
  408da5:	eb 07                	jmp    408dae <_D6object15TypeInfo_Struct7compareMFPvPvZi+0xa6>
			}
			else
				c = -1;
  408da7:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
		}
		return c;
  408dae:	8b 45 fc             	mov    -0x4(%rbp),%eax
	}
  408db1:	c9                   	leaveq 
  408db2:	c3                   	retq   

0000000000408db3 <_D6object15TypeInfo_Struct5tsizeMFZm>:

	size_t tsize()
  408db3:	55                   	push   %rbp
  408db4:	48 89 e5             	mov    %rsp,%rbp
  408db7:	48 83 ec 20          	sub    $0x20,%rsp
  408dbb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408dbf:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  408dc3:	e8 b4 05 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return init.length;
  408dc8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408dcc:	48 8b 00             	mov    (%rax),%rax
  408dcf:	48 83 c0 58          	add    $0x58,%rax
  408dd3:	48 8b 00             	mov    (%rax),%rax
  408dd6:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
  408dda:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  408dde:	ff d0                	callq  *%rax
  408de0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
	}
  408de4:	c9                   	leaveq 
  408de5:	c3                   	retq   

0000000000408de6 <_D6object15TypeInfo_Struct4initMFZAv>:

	void[] init() { return m_init; }
  408de6:	55                   	push   %rbp
  408de7:	48 89 e5             	mov    %rsp,%rbp
  408dea:	53                   	push   %rbx
  408deb:	48 83 ec 08          	sub    $0x8,%rsp
  408def:	48 89 fb             	mov    %rdi,%rbx
  408df2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408df6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  408dfa:	e8 7d 05 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  408dff:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  408e03:	48 8b 42 20          	mov    0x20(%rdx),%rax
  408e07:	48 89 03             	mov    %rax,(%rbx)
  408e0a:	48 8b 42 28          	mov    0x28(%rdx),%rax
  408e0e:	48 89 43 08          	mov    %rax,0x8(%rbx)
  408e12:	48 89 d8             	mov    %rbx,%rax
  408e15:	48 83 c4 08          	add    $0x8,%rsp
  408e19:	5b                   	pop    %rbx
  408e1a:	c9                   	leaveq 
  408e1b:	c3                   	retq   

0000000000408e1c <_D6object15TypeInfo_Struct5flagsMFZk>:

	uint flags() { return m_flags; }
  408e1c:	55                   	push   %rbp
  408e1d:	48 89 e5             	mov    %rsp,%rbp
  408e20:	48 83 ec 10          	sub    $0x10,%rsp
  408e24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408e28:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  408e2c:	e8 4b 05 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  408e31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408e35:	8b 40 50             	mov    0x50(%rax),%eax
  408e38:	c9                   	leaveq 
  408e39:	c3                   	retq   

0000000000408e3a <_D6object14TypeInfo_Tuple8toStringMFZAa>:

class TypeInfo_Tuple : TypeInfo
{
	TypeInfo[] elements;

	char[] toString()
  408e3a:	55                   	push   %rbp
  408e3b:	48 89 e5             	mov    %rsp,%rbp
  408e3e:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  408e45:	48 89 bd 30 ff ff ff 	mov    %rdi,-0xd0(%rbp)
  408e4c:	48 89 b5 78 ff ff ff 	mov    %rsi,-0x88(%rbp)
  408e53:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
  408e5a:	e8 1d 05 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		char[] s;
  408e5f:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  408e66:	00 
  408e67:	48 c7 45 88 00 00 00 	movq   $0x0,-0x78(%rbp)
  408e6e:	00 
		s = "(";
  408e6f:	48 c7 45 80 01 00 00 	movq   $0x1,-0x80(%rbp)
  408e76:	00 
  408e77:	48 c7 45 88 d0 23 41 	movq   $0x4123d0,-0x78(%rbp)
  408e7e:	00 
		foreach (i, element; elements)
  408e7f:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  408e86:	00 
  408e87:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  408e8e:	48 8b 40 18          	mov    0x18(%rax),%rax
  408e92:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  408e99:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  408ea0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  408ea4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  408eab:	48 8b 40 10          	mov    0x10(%rax),%rax
  408eaf:	48 c1 e0 03          	shl    $0x3,%rax
  408eb3:	48 03 85 38 ff ff ff 	add    -0xc8(%rbp),%rax
  408eba:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  408ebe:	0f 95 c0             	setne  %al
  408ec1:	83 f0 01             	xor    $0x1,%eax
  408ec4:	84 c0                	test   %al,%al
  408ec6:	0f 85 9f 00 00 00    	jne    408f6b <_D6object14TypeInfo_Tuple8toStringMFZAa+0x131>
  408ecc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408ed0:	48 8b 00             	mov    (%rax),%rax
  408ed3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		{
			if (i)
  408ed7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  408edc:	74 1c                	je     408efa <_D6object14TypeInfo_Tuple8toStringMFZAa+0xc0>
				s ~= ',';
  408ede:	c6 45 ff 2c          	movb   $0x2c,-0x1(%rbp)
  408ee2:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  408ee6:	48 8d 4d ff          	lea    -0x1(%rbp),%rcx
  408eea:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  408eee:	48 c7 c6 00 ff 40 00 	mov    $0x40ff00,%rsi
  408ef5:	e8 75 17 00 00       	callq  40a66f <_d_arrayappendcTp>
			s ~= element.toString();
  408efa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408efe:	48 8b 00             	mov    (%rax),%rax
  408f01:	48 83 c0 08          	add    $0x8,%rax
  408f05:	48 8b 00             	mov    (%rax),%rax
  408f08:	48 8d bd 60 ff ff ff 	lea    -0xa0(%rbp),%rdi
  408f0f:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  408f13:	ff d0                	callq  *%rax
  408f15:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  408f1c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  408f20:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  408f27:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  408f2b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  408f2f:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  408f33:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  408f37:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  408f3b:	48 8d bd 50 ff ff ff 	lea    -0xb0(%rbp),%rdi
  408f42:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  408f46:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408f4a:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  408f4e:	49 89 c0             	mov    %rax,%r8
  408f51:	48 c7 c6 00 ff 40 00 	mov    $0x40ff00,%rsi
  408f58:	e8 b7 16 00 00       	callq  40a614 <_d_arrayappendT>
  408f5d:	48 83 45 e0 08       	addq   $0x8,-0x20(%rbp)
  408f62:	48 ff 45 e8          	incq   -0x18(%rbp)
  408f66:	e9 39 ff ff ff       	jmpq   408ea4 <_D6object14TypeInfo_Tuple8toStringMFZAa+0x6a>
		}
		s ~= ")";
  408f6b:	48 c7 45 c0 01 00 00 	movq   $0x1,-0x40(%rbp)
  408f72:	00 
  408f73:	48 c7 45 c8 d2 23 41 	movq   $0x4123d2,-0x38(%rbp)
  408f7a:	00 
  408f7b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  408f7f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  408f83:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408f87:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  408f8b:	48 8d bd 40 ff ff ff 	lea    -0xc0(%rbp),%rdi
  408f92:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  408f96:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408f9a:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  408f9e:	49 89 c0             	mov    %rax,%r8
  408fa1:	48 c7 c6 00 ff 40 00 	mov    $0x40ff00,%rsi
  408fa8:	e8 67 16 00 00       	callq  40a614 <_d_arrayappendT>
		return s;
  408fad:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  408fb1:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  408fb8:	48 89 02             	mov    %rax,(%rdx)
  408fbb:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  408fbf:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  408fc6:	48 89 42 08          	mov    %rax,0x8(%rdx)
	}
  408fca:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  408fd1:	c9                   	leaveq 
  408fd2:	c3                   	retq   

0000000000408fd3 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  408fd3:	55                   	push   %rbp
  408fd4:	48 89 e5             	mov    %rsp,%rbp
  408fd7:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  408fdb:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  408fdf:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  408fe3:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  408fe7:	e8 90 03 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		if (this is o)
  408fec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408ff0:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  408ff4:	75 0c                	jne    409002 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x2f>
			return 1;
  408ff6:	c7 45 8c 01 00 00 00 	movl   $0x1,-0x74(%rbp)
  408ffd:	e9 52 01 00 00       	jmpq   409154 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x181>

		auto t = cast(TypeInfo_Tuple)o;
  409002:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  409006:	48 c7 c6 e0 c5 41 00 	mov    $0x41c5e0,%rsi
  40900d:	e8 ad 05 00 00       	callq  4095bf <_d_dynamic_cast>
  409012:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		if (t && elements.length == t.elements.length)
  409016:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  40901b:	0f 84 2c 01 00 00    	je     40914d <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x17a>
  409021:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409025:	48 8b 50 10          	mov    0x10(%rax),%rdx
  409029:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40902d:	48 8b 40 10          	mov    0x10(%rax),%rax
  409031:	48 39 c2             	cmp    %rax,%rdx
  409034:	0f 85 13 01 00 00    	jne    40914d <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x17a>
		{
			for (size_t i = 0; i < elements.length; i++)
  40903a:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  409041:	00 
  409042:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409046:	48 8b 40 10          	mov    0x10(%rax),%rax
  40904a:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  40904e:	0f 92 c0             	setb   %al
  409051:	83 f0 01             	xor    $0x1,%eax
  409054:	84 c0                	test   %al,%al
  409056:	0f 85 e8 00 00 00    	jne    409144 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x171>
			{
				if (elements[i] != t.elements[i])
  40905c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409060:	48 8b 40 18          	mov    0x18(%rax),%rax
  409064:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  409068:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40906c:	48 8b 40 10          	mov    0x10(%rax),%rax
  409070:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  409074:	73 0a                	jae    409080 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0xad>
  409076:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40907a:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  40907e:	eb 22                	jmp    4090a2 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0xcf>
  409080:	48 c7 45 d0 08 00 00 	movq   $0x8,-0x30(%rbp)
  409087:	00 
  409088:	48 c7 45 d8 80 1a 41 	movq   $0x411a80,-0x28(%rbp)
  40908f:	00 
  409090:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  409094:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  409098:	ba d2 03 00 00       	mov    $0x3d2,%edx
  40909d:	e8 a3 1d 00 00       	callq  40ae45 <_d_array_bounds>
  4090a2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4090a6:	48 c1 e0 03          	shl    $0x3,%rax
  4090aa:	48 03 45 90          	add    -0x70(%rbp),%rax
  4090ae:	48 8b 00             	mov    (%rax),%rax
  4090b1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  4090b5:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4090b9:	48 8b 02             	mov    (%rdx),%rax
  4090bc:	48 83 c0 20          	add    $0x20,%rax
  4090c0:	48 8b 00             	mov    (%rax),%rax
  4090c3:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  4090c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4090cb:	48 8b 40 18          	mov    0x18(%rax),%rax
  4090cf:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4090d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4090d7:	48 8b 40 10          	mov    0x10(%rax),%rax
  4090db:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  4090df:	73 0a                	jae    4090eb <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x118>
  4090e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4090e5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  4090e9:	eb 22                	jmp    40910d <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x13a>
  4090eb:	48 c7 45 e0 08 00 00 	movq   $0x8,-0x20(%rbp)
  4090f2:	00 
  4090f3:	48 c7 45 e8 80 1a 41 	movq   $0x411a80,-0x18(%rbp)
  4090fa:	00 
  4090fb:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  4090ff:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  409103:	ba d2 03 00 00       	mov    $0x3d2,%edx
  409108:	e8 38 1d 00 00       	callq  40ae45 <_d_array_bounds>
  40910d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  409111:	48 c1 e0 03          	shl    $0x3,%rax
  409115:	48 03 45 b0          	add    -0x50(%rbp),%rax
  409119:	48 8b 00             	mov    (%rax),%rax
  40911c:	48 89 c6             	mov    %rax,%rsi
  40911f:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  409123:	ff 55 a8             	callq  *-0x58(%rbp)
  409126:	85 c0                	test   %eax,%eax
  409128:	0f 95 c0             	setne  %al
  40912b:	83 f0 01             	xor    $0x1,%eax
  40912e:	84 c0                	test   %al,%al
  409130:	74 09                	je     40913b <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x168>
					return 0;
  409132:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)
  409139:	eb 19                	jmp    409154 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x181>
		auto t = cast(TypeInfo_Tuple)o;
		if (t && elements.length == t.elements.length)
		{
			for (size_t i = 0; i < elements.length; i++)
			{
				if (elements[i] != t.elements[i])
  40913b:	48 ff 45 f8          	incq   -0x8(%rbp)
  40913f:	e9 fe fe ff ff       	jmpq   409042 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x6f>
					return 0;
			}
			return 1;
  409144:	c7 45 8c 01 00 00 00 	movl   $0x1,-0x74(%rbp)
  40914b:	eb 07                	jmp    409154 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x181>
		}
		return 0;
  40914d:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)
  409154:	8b 45 8c             	mov    -0x74(%rbp),%eax
	}
  409157:	c9                   	leaveq 
  409158:	c3                   	retq   

0000000000409159 <_D6object14TypeInfo_Tuple7getHashMFPvZm>:

	hash_t getHash(void *p)
  409159:	55                   	push   %rbp
  40915a:	48 89 e5             	mov    %rsp,%rbp
  40915d:	48 83 ec 20          	sub    $0x20,%rsp
  409161:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  409165:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  409169:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40916d:	e8 0a 02 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		assert(0);
  409172:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
  409179:	00 
  40917a:	48 c7 45 f8 80 1a 41 	movq   $0x411a80,-0x8(%rbp)
  409181:	00 
  409182:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  409186:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40918a:	ba dc 03 00 00       	mov    $0x3dc,%edx
  40918f:	e8 3e 1c 00 00       	callq  40add2 <_d_assert>
	}
  409194:	c9                   	leaveq 
  409195:	c3                   	retq   

0000000000409196 <_D6object14TypeInfo_Tuple6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  409196:	55                   	push   %rbp
  409197:	48 89 e5             	mov    %rsp,%rbp
  40919a:	48 83 ec 30          	sub    $0x30,%rsp
  40919e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4091a2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4091a6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4091aa:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4091ae:	e8 c9 01 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		assert(0);
  4091b3:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
  4091ba:	00 
  4091bb:	48 c7 45 f8 80 1a 41 	movq   $0x411a80,-0x8(%rbp)
  4091c2:	00 
  4091c3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4091c7:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  4091cb:	ba e1 03 00 00       	mov    $0x3e1,%edx
  4091d0:	e8 fd 1b 00 00       	callq  40add2 <_d_assert>
	}
  4091d5:	c9                   	leaveq 
  4091d6:	c3                   	retq   

00000000004091d7 <_D6object14TypeInfo_Tuple7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  4091d7:	55                   	push   %rbp
  4091d8:	48 89 e5             	mov    %rsp,%rbp
  4091db:	48 83 ec 30          	sub    $0x30,%rsp
  4091df:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4091e3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4091e7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4091eb:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4091ef:	e8 88 01 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		assert(0);
  4091f4:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
  4091fb:	00 
  4091fc:	48 c7 45 f8 80 1a 41 	movq   $0x411a80,-0x8(%rbp)
  409203:	00 
  409204:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  409208:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40920c:	ba e6 03 00 00       	mov    $0x3e6,%edx
  409211:	e8 bc 1b 00 00       	callq  40add2 <_d_assert>
	}
  409216:	c9                   	leaveq 
  409217:	c3                   	retq   

0000000000409218 <_D6object14TypeInfo_Tuple5tsizeMFZm>:

	size_t tsize()
  409218:	55                   	push   %rbp
  409219:	48 89 e5             	mov    %rsp,%rbp
  40921c:	48 83 ec 20          	sub    $0x20,%rsp
  409220:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  409224:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  409228:	e8 4f 01 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		assert(0);
  40922d:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
  409234:	00 
  409235:	48 c7 45 f8 80 1a 41 	movq   $0x411a80,-0x8(%rbp)
  40923c:	00 
  40923d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  409241:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  409245:	ba eb 03 00 00       	mov    $0x3eb,%edx
  40924a:	e8 83 1b 00 00       	callq  40add2 <_d_assert>
	}
  40924f:	c9                   	leaveq 
  409250:	c3                   	retq   

0000000000409251 <_D6object14TypeInfo_Tuple4swapMFPvPvZv>:

	void swap(void *p1, void *p2)
  409251:	55                   	push   %rbp
  409252:	48 89 e5             	mov    %rsp,%rbp
  409255:	48 83 ec 30          	sub    $0x30,%rsp
  409259:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40925d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  409261:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  409265:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  409269:	e8 0e 01 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
	{
		assert(0);
  40926e:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
  409275:	00 
  409276:	48 c7 45 f8 80 1a 41 	movq   $0x411a80,-0x8(%rbp)
  40927d:	00 
  40927e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  409282:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  409286:	ba f0 03 00 00       	mov    $0x3f0,%edx
  40928b:	e8 42 1b 00 00       	callq  40add2 <_d_assert>
	}
  409290:	c9                   	leaveq 
  409291:	c3                   	retq   

0000000000409292 <_D6object9Exception5_ctorMFAaZC9Exception>:
	char[] msg;

	/**
	 * Constructor; msg is a descriptive message for the exception.
	 */
	this(char[] msg)
  409292:	55                   	push   %rbp
  409293:	48 89 e5             	mov    %rsp,%rbp
  409296:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40929a:	48 89 f0             	mov    %rsi,%rax
  40929d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4092a1:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  4092a5:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4092ac:	00 
	{
		this.msg = msg;
  4092ad:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4092b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4092b5:	48 89 42 10          	mov    %rax,0x10(%rdx)
  4092b9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4092bd:	48 89 42 18          	mov    %rax,0x18(%rdx)
  4092c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  4092c5:	c9                   	leaveq 
  4092c6:	c3                   	retq   

00000000004092c7 <_D6object9Exception8toStringMFZAa>:

	char[] toString() { return msg; }
  4092c7:	55                   	push   %rbp
  4092c8:	48 89 e5             	mov    %rsp,%rbp
  4092cb:	53                   	push   %rbx
  4092cc:	48 83 ec 08          	sub    $0x8,%rsp
  4092d0:	48 89 fb             	mov    %rdi,%rbx
  4092d3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4092d7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4092db:	e8 9c 00 00 00       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>
  4092e0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4092e4:	48 8b 42 10          	mov    0x10(%rdx),%rax
  4092e8:	48 89 03             	mov    %rax,(%rbx)
  4092eb:	48 8b 42 18          	mov    0x18(%rdx),%rax
  4092ef:	48 89 43 08          	mov    %rax,0x8(%rbx)
  4092f3:	48 89 d8             	mov    %rbx,%rax
  4092f6:	48 83 c4 08          	add    $0x8,%rsp
  4092fa:	5b                   	pop    %rbx
  4092fb:	c9                   	leaveq 
  4092fc:	c3                   	retq   

00000000004092fd <_D6object5Error5_ctorMFAaZC6object5Error>:
	Error next;

	/**
	 * Constructor; msg is a descriptive message for the exception.
	 */
	this(char[] msg)
  4092fd:	55                   	push   %rbp
  4092fe:	48 89 e5             	mov    %rsp,%rbp
  409301:	48 83 ec 28          	sub    $0x28,%rsp
  409305:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  409309:	48 89 f0             	mov    %rsi,%rax
  40930c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  409310:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  409314:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40931b:	00 
	{
		super(msg);
  40931c:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  409320:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  409324:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  409328:	e8 65 ff ff ff       	callq  409292 <_D6object9Exception5_ctorMFAaZC9Exception>
  40932d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  409331:	c9                   	leaveq 
  409332:	c3                   	retq   

0000000000409333 <_D6object5Error5_ctorMFAaC6object5ErrorZC6object5Error>:

	this(char[] msg, Error next)
  409333:	55                   	push   %rbp
  409334:	48 89 e5             	mov    %rsp,%rbp
  409337:	48 83 ec 30          	sub    $0x30,%rsp
  40933b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40933f:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  409343:	48 89 f0             	mov    %rsi,%rax
  409346:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40934a:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  40934e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  409355:	00 
	{
		super(msg);
  409356:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40935a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40935e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  409362:	e8 2b ff ff ff       	callq  409292 <_D6object9Exception5_ctorMFAaZC9Exception>
		this.next = next;
  409367:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40936b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40936f:	48 89 42 20          	mov    %rax,0x20(%rdx)
  409373:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  409377:	c9                   	leaveq 
  409378:	c3                   	retq   
  409379:	90                   	nop    
  40937a:	90                   	nop    
  40937b:	90                   	nop    

000000000040937c <_D9invariant12_d_invariantFC6ObjectZv>:
 * Placed into the Public Domain
 * written by Walter Bright
 * www.digitalmars.com
 */

void _d_invariant(Object o)
  40937c:	55                   	push   %rbp
  40937d:	48 89 e5             	mov    %rsp,%rbp
  409380:	48 83 ec 30          	sub    $0x30,%rsp
  409384:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
{
	ClassInfo c;
  409388:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40938f:	00 

	//printf("__d_invariant(%p)\n", o);

	// BUG: needs to be filename/line of caller, not library routine
	assert(o !is null); // just do null check, not invariant check
  409390:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  409395:	75 22                	jne    4093b9 <_D9invariant12_d_invariantFC6ObjectZv+0x3d>
  409397:	48 c7 45 e0 17 00 00 	movq   $0x17,-0x20(%rbp)
  40939e:	00 
  40939f:	48 c7 45 e8 88 25 41 	movq   $0x412588,-0x18(%rbp)
  4093a6:	00 
  4093a7:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  4093ab:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4093af:	ba 0f 00 00 00       	mov    $0xf,%edx
  4093b4:	e8 19 1a 00 00       	callq  40add2 <_d_assert>

	c = o.classinfo;
  4093b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4093bd:	48 8b 00             	mov    (%rax),%rax
  4093c0:	48 8b 00             	mov    (%rax),%rax
  4093c3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	
	do
	{
		if(c.classInvariant)
  4093c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4093cb:	48 8b 40 60          	mov    0x60(%rax),%rax
  4093cf:	48 85 c0             	test   %rax,%rax
  4093d2:	74 0e                	je     4093e2 <_D9invariant12_d_invariantFC6ObjectZv+0x66>
		{
			(*c.classInvariant)(o);
  4093d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4093d8:	48 8b 40 60          	mov    0x60(%rax),%rax
  4093dc:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4093e0:	ff d0                	callq  *%rax
		}

		c = c.base;
  4093e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4093e6:	48 8b 40 50          	mov    0x50(%rax),%rax
  4093ea:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4093ee:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4093f3:	0f 95 c0             	setne  %al
  4093f6:	83 f0 01             	xor    $0x1,%eax
  4093f9:	84 c0                	test   %al,%al
  4093fb:	75 02                	jne    4093ff <_D9invariant12_d_invariantFC6ObjectZv+0x83>
  4093fd:	eb c8                	jmp    4093c7 <_D9invariant12_d_invariantFC6ObjectZv+0x4b>
	} while(c)
}
  4093ff:	c9                   	leaveq 
  409400:	c3                   	retq   
  409401:	90                   	nop    
  409402:	90                   	nop    
  409403:	90                   	nop    

0000000000409404 <abort>:
/**************************************************
 Random stubs (they'll go somewhere eventually)
**************************************************/

//mixin(Stub!("void abort()"));
void abort() {
  409404:	55                   	push   %rbp
  409405:	48 89 e5             	mov    %rsp,%rbp
  exit(0);
  409408:	bf 00 00 00 00       	mov    $0x0,%edi
  40940d:	e8 ca 46 00 00       	callq  40dadc <_D4user7syscall4exitFlZv>
}
  409412:	c9                   	leaveq 
  409413:	c3                   	retq   

0000000000409414 <rt_isHalting>:
  409414:	55                   	push   %rbp
  409415:	48 89 e5             	mov    %rsp,%rbp
  409418:	48 83 ec 20          	sub    $0x20,%rsp
 Random stubs (they'll go somewhere eventually)
**************************************************/

//mixin(Stub!("void abort()"));
void abort() {
  exit(0);
  40941c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  409423:	00 
  409424:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40942b:	00 
  40942c:	48 c7 45 f0 34 00 00 	movq   $0x34,-0x10(%rbp)
  409433:	00 
  409434:	48 c7 45 f8 88 26 41 	movq   $0x412688,-0x8(%rbp)
  40943b:	00 
  40943c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  409440:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  409444:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  409448:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40944c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  409452:	e8 a6 19 00 00       	callq  40adfd <_d_assert_msg>
  409457:	c9                   	leaveq 
  409458:	c3                   	retq   

0000000000409459 <runModuleUnitTests>:
  409459:	55                   	push   %rbp
  40945a:	48 89 e5             	mov    %rsp,%rbp
  40945d:	48 83 ec 20          	sub    $0x20,%rsp
  409461:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  409468:	00 
  409469:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  409470:	00 
  409471:	48 c7 45 f0 3a 00 00 	movq   $0x3a,-0x10(%rbp)
  409478:	00 
  409479:	48 c7 45 f8 c0 26 41 	movq   $0x4126c0,-0x8(%rbp)
  409480:	00 
  409481:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  409485:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  409489:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40948d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  409491:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  409497:	e8 61 19 00 00       	callq  40adfd <_d_assert_msg>
  40949c:	c9                   	leaveq 
  40949d:	c3                   	retq   

000000000040949e <_d_monitordelete>:
  40949e:	55                   	push   %rbp
  40949f:	48 89 e5             	mov    %rsp,%rbp
  4094a2:	48 83 ec 30          	sub    $0x30,%rsp
  4094a6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4094aa:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  4094ae:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  4094b5:	00 
  4094b6:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  4094bd:	00 
  4094be:	48 c7 45 f0 51 00 00 	movq   $0x51,-0x10(%rbp)
  4094c5:	00 
  4094c6:	48 c7 45 f8 00 27 41 	movq   $0x412700,-0x8(%rbp)
  4094cd:	00 
  4094ce:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4094d2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4094d6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4094da:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  4094de:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  4094e4:	e8 14 19 00 00       	callq  40adfd <_d_assert_msg>
  4094e9:	c9                   	leaveq 
  4094ea:	c3                   	retq   

00000000004094eb <_d_toObject>:
 *		If it is an interface, return the Object implementing the interface.
 *		If it is null, return null.
 *		Else, undefined crash
 */

Object _d_toObject(void* p)
  4094eb:	55                   	push   %rbp
  4094ec:	48 89 e5             	mov    %rsp,%rbp
  4094ef:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
{	Object o;
  4094f3:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4094fa:	00 

	if (p)
  4094fb:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  409500:	74 4f                	je     409551 <_d_toObject+0x66>
	{
		o = cast(Object)p;
  409502:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409506:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		ClassInfo oc = o.classinfo;
  40950a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40950e:	48 8b 00             	mov    (%rax),%rax
  409511:	48 8b 00             	mov    (%rax),%rax
  409514:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Interface *pi = **cast(Interface ***)p;
  409518:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40951c:	48 8b 00             	mov    (%rax),%rax
  40951f:	48 8b 00             	mov    (%rax),%rax
  409522:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		/* Interface.offset lines up with ClassInfo.name.ptr,
		 * so we rely on pointers never being less than 64K,
		 * and Objects never being greater.
		 */
		if (pi.offset < 0x10000)
  409526:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40952a:	48 83 c0 18          	add    $0x18,%rax
  40952e:	8b 00                	mov    (%rax),%eax
  409530:	3d 00 00 01 00       	cmp    $0x10000,%eax
  409535:	7d 1a                	jge    409551 <_d_toObject+0x66>
		{
			//printf("\tpi.offset = %d\n", pi.offset);
			o = cast(Object)(p - pi.offset);
  409537:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40953b:	48 83 c0 18          	add    $0x18,%rax
  40953f:	8b 00                	mov    (%rax),%eax
  409541:	48 98                	cltq   
  409543:	48 89 c2             	mov    %rax,%rdx
  409546:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40954a:	48 29 d0             	sub    %rdx,%rax
  40954d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		}
	}
	return o;
  409551:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
  409555:	c9                   	leaveq 
  409556:	c3                   	retq   

0000000000409557 <_d_interface_cast>:
/*************************************
 * Attempts to cast Object o to class c.
 * Returns o if successful, null if not.
 */

Object _d_interface_cast(void* p, ClassInfo c)
  409557:	55                   	push   %rbp
  409558:	48 89 e5             	mov    %rsp,%rbp
  40955b:	48 83 ec 30          	sub    $0x30,%rsp
  40955f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  409563:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
{	Object o;
  409567:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40956e:	00 

	//printf("_d_interface_cast(p = %p, c = '%.*s')\n", p, c.name);
	if (p)
  40956f:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  409574:	74 3b                	je     4095b1 <_d_interface_cast+0x5a>
	{
		Interface *pi = **cast(Interface ***)p;
  409576:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40957a:	48 8b 00             	mov    (%rax),%rax
  40957d:	48 8b 00             	mov    (%rax),%rax
  409580:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

		//printf("\tpi.offset = %d\n", pi.offset);
		o = cast(Object)(p - pi.offset);
  409584:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409588:	48 83 c0 18          	add    $0x18,%rax
  40958c:	8b 00                	mov    (%rax),%eax
  40958e:	48 98                	cltq   
  409590:	48 89 c2             	mov    %rax,%rdx
  409593:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409597:	48 29 d0             	sub    %rdx,%rax
  40959a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		return _d_dynamic_cast(o, c);
  40959e:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  4095a2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  4095a6:	e8 14 00 00 00       	callq  4095bf <_d_dynamic_cast>
  4095ab:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4095af:	eb 08                	jmp    4095b9 <_d_interface_cast+0x62>
	}
	return o;
  4095b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4095b5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4095b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
  4095bd:	c9                   	leaveq 
  4095be:	c3                   	retq   

00000000004095bf <_d_dynamic_cast>:

Object _d_dynamic_cast(Object o, ClassInfo c)
  4095bf:	55                   	push   %rbp
  4095c0:	48 89 e5             	mov    %rsp,%rbp
  4095c3:	48 83 ec 20          	sub    $0x20,%rsp
  4095c7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4095cb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
{	ClassInfo oc;
  4095cf:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4095d6:	00 
	size_t offset = 0;
  4095d7:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4095de:	00 

	//printf("_d_dynamic_cast(o = %p, c = '%.*s')\n", o, c.name);

	if (o)
  4095df:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  4095e4:	74 39                	je     40961f <_d_dynamic_cast+0x60>
	{
		oc = o.classinfo;
  4095e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4095ea:	48 8b 00             	mov    (%rax),%rax
  4095ed:	48 8b 00             	mov    (%rax),%rax
  4095f0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (_d_isbaseof2(oc, c, offset))
  4095f4:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  4095f8:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  4095fc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  409600:	e8 20 00 00 00       	callq  409625 <_d_isbaseof2>
  409605:	85 c0                	test   %eax,%eax
  409607:	74 0e                	je     409617 <_d_dynamic_cast+0x58>
		{
			//printf("\toffset = %d\n", offset);
			o = cast(Object)(cast(void*)o + offset);
  409609:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40960d:	48 03 45 e8          	add    -0x18(%rbp),%rax
  409611:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  409615:	eb 08                	jmp    40961f <_d_dynamic_cast+0x60>
		}
		else
			o = null;
  409617:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40961e:	00 
	}
	//printf("\tresult = %p\n", o);
	return o;
  40961f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
  409623:	c9                   	leaveq 
  409624:	c3                   	retq   

0000000000409625 <_d_isbaseof2>:

int _d_isbaseof2(ClassInfo oc, ClassInfo c, inout size_t offset)
  409625:	55                   	push   %rbp
  409626:	48 89 e5             	mov    %rsp,%rbp
  409629:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  409630:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  409634:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  409638:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
{	int i;
  40963c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)

	if (oc is c)
  409643:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409647:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  40964b:	75 0f                	jne    40965c <_d_isbaseof2+0x37>
		return 1;
  40964d:	c7 85 44 ff ff ff 01 	movl   $0x1,-0xbc(%rbp)
  409654:	00 00 00 
  409657:	e9 a3 02 00 00       	jmpq   4098ff <_d_isbaseof2+0x2da>
	do
	{
		if (oc.base is c)
  40965c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409660:	48 8b 40 50          	mov    0x50(%rax),%rax
  409664:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  409668:	75 0f                	jne    409679 <_d_isbaseof2+0x54>
			return 1;
  40966a:	c7 85 44 ff ff ff 01 	movl   $0x1,-0xbc(%rbp)
  409671:	00 00 00 
  409674:	e9 86 02 00 00       	jmpq   4098ff <_d_isbaseof2+0x2da>
		for (i = 0; i < oc.interfaces.length; i++)
  409679:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  409680:	8b 45 ec             	mov    -0x14(%rbp),%eax
  409683:	48 63 d0             	movslq %eax,%rdx
  409686:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40968a:	48 8b 40 40          	mov    0x40(%rax),%rax
  40968e:	48 39 c2             	cmp    %rax,%rdx
  409691:	0f 92 c0             	setb   %al
  409694:	83 f0 01             	xor    $0x1,%eax
  409697:	84 c0                	test   %al,%al
  409699:	0f 85 09 01 00 00    	jne    4097a8 <_d_isbaseof2+0x183>
		{
			ClassInfo ic;
  40969f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4096a6:	00 

			ic = oc.interfaces[i].classinfo;
  4096a7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4096ab:	48 8b 40 48          	mov    0x48(%rax),%rax
  4096af:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  4096b6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4096b9:	48 63 d0             	movslq %eax,%rdx
  4096bc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4096c0:	48 8b 40 40          	mov    0x40(%rax),%rax
  4096c4:	48 39 c2             	cmp    %rax,%rdx
  4096c7:	73 0e                	jae    4096d7 <_d_isbaseof2+0xb2>
  4096c9:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4096cc:	48 98                	cltq   
  4096ce:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  4096d5:	eb 22                	jmp    4096f9 <_d_isbaseof2+0xd4>
  4096d7:	48 c7 45 a0 0b 00 00 	movq   $0xb,-0x60(%rbp)
  4096de:	00 
  4096df:	48 c7 45 a8 52 27 41 	movq   $0x412752,-0x58(%rbp)
  4096e6:	00 
  4096e7:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  4096eb:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  4096ef:	ba 9e 00 00 00       	mov    $0x9e,%edx
  4096f4:	e8 4c 17 00 00       	callq  40ae45 <_d_array_bounds>
  4096f9:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  409700:	48 c1 e0 05          	shl    $0x5,%rax
  409704:	48 03 85 48 ff ff ff 	add    -0xb8(%rbp),%rax
  40970b:	48 8b 00             	mov    (%rax),%rax
  40970e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
			if (ic is c)
  409712:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  409716:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  40971a:	0f 85 80 00 00 00    	jne    4097a0 <_d_isbaseof2+0x17b>
			{	offset = oc.interfaces[i].offset;
  409720:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409724:	48 8b 40 48          	mov    0x48(%rax),%rax
  409728:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  40972f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  409732:	48 63 d0             	movslq %eax,%rdx
  409735:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409739:	48 8b 40 40          	mov    0x40(%rax),%rax
  40973d:	48 39 c2             	cmp    %rax,%rdx
  409740:	73 0e                	jae    409750 <_d_isbaseof2+0x12b>
  409742:	8b 45 ec             	mov    -0x14(%rbp),%eax
  409745:	48 98                	cltq   
  409747:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40974e:	eb 22                	jmp    409772 <_d_isbaseof2+0x14d>
  409750:	48 c7 45 b0 0b 00 00 	movq   $0xb,-0x50(%rbp)
  409757:	00 
  409758:	48 c7 45 b8 52 27 41 	movq   $0x412752,-0x48(%rbp)
  40975f:	00 
  409760:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  409764:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  409768:	ba a0 00 00 00       	mov    $0xa0,%edx
  40976d:	e8 d3 16 00 00       	callq  40ae45 <_d_array_bounds>
  409772:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  409779:	48 c1 e0 05          	shl    $0x5,%rax
  40977d:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  409784:	8b 40 18             	mov    0x18(%rax),%eax
  409787:	48 63 d0             	movslq %eax,%rdx
  40978a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40978e:	48 89 10             	mov    %rdx,(%rax)
				return 1;
  409791:	c7 85 44 ff ff ff 01 	movl   $0x1,-0xbc(%rbp)
  409798:	00 00 00 
  40979b:	e9 5f 01 00 00       	jmpq   4098ff <_d_isbaseof2+0x2da>
		for (i = 0; i < oc.interfaces.length; i++)
		{
			ClassInfo ic;

			ic = oc.interfaces[i].classinfo;
			if (ic is c)
  4097a0:	ff 45 ec             	incl   -0x14(%rbp)
  4097a3:	e9 d8 fe ff ff       	jmpq   409680 <_d_isbaseof2+0x5b>
			{	offset = oc.interfaces[i].offset;
				return 1;
			}
		}
		for (i = 0; i < oc.interfaces.length; i++)
  4097a8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  4097af:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4097b2:	48 63 d0             	movslq %eax,%rdx
  4097b5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4097b9:	48 8b 40 40          	mov    0x40(%rax),%rax
  4097bd:	48 39 c2             	cmp    %rax,%rdx
  4097c0:	0f 92 c0             	setb   %al
  4097c3:	83 f0 01             	xor    $0x1,%eax
  4097c6:	84 c0                	test   %al,%al
  4097c8:	0f 85 07 01 00 00    	jne    4098d5 <_d_isbaseof2+0x2b0>
		{
			ClassInfo ic;
  4097ce:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4097d5:	00 

			ic = oc.interfaces[i].classinfo;
  4097d6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4097da:	48 8b 40 48          	mov    0x48(%rax),%rax
  4097de:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  4097e5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4097e8:	48 63 d0             	movslq %eax,%rdx
  4097eb:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4097ef:	48 8b 40 40          	mov    0x40(%rax),%rax
  4097f3:	48 39 c2             	cmp    %rax,%rdx
  4097f6:	73 0e                	jae    409806 <_d_isbaseof2+0x1e1>
  4097f8:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4097fb:	48 98                	cltq   
  4097fd:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  409804:	eb 22                	jmp    409828 <_d_isbaseof2+0x203>
  409806:	48 c7 45 c0 0b 00 00 	movq   $0xb,-0x40(%rbp)
  40980d:	00 
  40980e:	48 c7 45 c8 52 27 41 	movq   $0x412752,-0x38(%rbp)
  409815:	00 
  409816:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40981a:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40981e:	ba a8 00 00 00       	mov    $0xa8,%edx
  409823:	e8 1d 16 00 00       	callq  40ae45 <_d_array_bounds>
  409828:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40982f:	48 c1 e0 05          	shl    $0x5,%rax
  409833:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  40983a:	48 8b 00             	mov    (%rax),%rax
  40983d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			if (_d_isbaseof2(ic, c, offset))
  409841:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  409845:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
  409849:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40984d:	e8 d3 fd ff ff       	callq  409625 <_d_isbaseof2>
  409852:	85 c0                	test   %eax,%eax
  409854:	74 77                	je     4098cd <_d_isbaseof2+0x2a8>
			{	offset = oc.interfaces[i].offset;
  409856:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40985a:	48 8b 40 48          	mov    0x48(%rax),%rax
  40985e:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  409865:	8b 45 ec             	mov    -0x14(%rbp),%eax
  409868:	48 63 d0             	movslq %eax,%rdx
  40986b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40986f:	48 8b 40 40          	mov    0x40(%rax),%rax
  409873:	48 39 c2             	cmp    %rax,%rdx
  409876:	73 0b                	jae    409883 <_d_isbaseof2+0x25e>
  409878:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40987b:	48 98                	cltq   
  40987d:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  409881:	eb 22                	jmp    4098a5 <_d_isbaseof2+0x280>
  409883:	48 c7 45 d0 0b 00 00 	movq   $0xb,-0x30(%rbp)
  40988a:	00 
  40988b:	48 c7 45 d8 52 27 41 	movq   $0x412752,-0x28(%rbp)
  409892:	00 
  409893:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  409897:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40989b:	ba aa 00 00 00       	mov    $0xaa,%edx
  4098a0:	e8 a0 15 00 00       	callq  40ae45 <_d_array_bounds>
  4098a5:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  4098a9:	48 c1 e0 05          	shl    $0x5,%rax
  4098ad:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  4098b4:	8b 40 18             	mov    0x18(%rax),%eax
  4098b7:	48 63 d0             	movslq %eax,%rdx
  4098ba:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4098be:	48 89 10             	mov    %rdx,(%rax)
				return 1;
  4098c1:	c7 85 44 ff ff ff 01 	movl   $0x1,-0xbc(%rbp)
  4098c8:	00 00 00 
  4098cb:	eb 32                	jmp    4098ff <_d_isbaseof2+0x2da>
		for (i = 0; i < oc.interfaces.length; i++)
		{
			ClassInfo ic;

			ic = oc.interfaces[i].classinfo;
			if (_d_isbaseof2(ic, c, offset))
  4098cd:	ff 45 ec             	incl   -0x14(%rbp)
  4098d0:	e9 da fe ff ff       	jmpq   4097af <_d_isbaseof2+0x18a>
			{	offset = oc.interfaces[i].offset;
				return 1;
			}
		}
		oc = oc.base;
  4098d5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4098d9:	48 8b 40 50          	mov    0x50(%rax),%rax
  4098dd:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  4098e1:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
  4098e6:	0f 95 c0             	setne  %al
  4098e9:	83 f0 01             	xor    $0x1,%eax
  4098ec:	84 c0                	test   %al,%al
  4098ee:	75 05                	jne    4098f5 <_d_isbaseof2+0x2d0>
  4098f0:	e9 67 fd ff ff       	jmpq   40965c <_d_isbaseof2+0x37>
	} while (oc);
	return 0;
  4098f5:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%rbp)
  4098fc:	00 00 00 
  4098ff:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
}
  409905:	c9                   	leaveq 
  409906:	c3                   	retq   

0000000000409907 <_d_isbaseof>:

int _d_isbaseof(ClassInfo oc, ClassInfo c)
  409907:	55                   	push   %rbp
  409908:	48 89 e5             	mov    %rsp,%rbp
  40990b:	48 83 ec 50          	sub    $0x50,%rsp
  40990f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  409913:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
{	int i;
  409917:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	if (oc is c)
  40991e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409922:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  409926:	75 0c                	jne    409934 <_d_isbaseof+0x2d>
		return 1;
  409928:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%rbp)
  40992f:	e9 fa 00 00 00       	jmpq   409a2e <_d_isbaseof+0x127>
	do
	{
		if (oc.base is c)
  409934:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409938:	48 8b 40 50          	mov    0x50(%rax),%rax
  40993c:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  409940:	75 0c                	jne    40994e <_d_isbaseof+0x47>
			return 1;
  409942:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%rbp)
  409949:	e9 e0 00 00 00       	jmpq   409a2e <_d_isbaseof+0x127>
		for (i = 0; i < oc.interfaces.length; i++)
  40994e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  409955:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409958:	48 63 d0             	movslq %eax,%rdx
  40995b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40995f:	48 8b 40 40          	mov    0x40(%rax),%rax
  409963:	48 39 c2             	cmp    %rax,%rdx
  409966:	0f 92 c0             	setb   %al
  409969:	83 f0 01             	xor    $0x1,%eax
  40996c:	84 c0                	test   %al,%al
  40996e:	0f 85 93 00 00 00    	jne    409a07 <_d_isbaseof+0x100>
		{
			ClassInfo ic;
  409974:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40997b:	00 

			ic = oc.interfaces[i].classinfo;
  40997c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409980:	48 8b 40 48          	mov    0x48(%rax),%rax
  409984:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  409988:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40998b:	48 63 d0             	movslq %eax,%rdx
  40998e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409992:	48 8b 40 40          	mov    0x40(%rax),%rax
  409996:	48 39 c2             	cmp    %rax,%rdx
  409999:	73 0b                	jae    4099a6 <_d_isbaseof+0x9f>
  40999b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40999e:	48 98                	cltq   
  4099a0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  4099a4:	eb 22                	jmp    4099c8 <_d_isbaseof+0xc1>
  4099a6:	48 c7 45 e0 0b 00 00 	movq   $0xb,-0x20(%rbp)
  4099ad:	00 
  4099ae:	48 c7 45 e8 52 27 41 	movq   $0x412752,-0x18(%rbp)
  4099b5:	00 
  4099b6:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  4099ba:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4099be:	ba c0 00 00 00       	mov    $0xc0,%edx
  4099c3:	e8 7d 14 00 00       	callq  40ae45 <_d_array_bounds>
  4099c8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4099cc:	48 c1 e0 05          	shl    $0x5,%rax
  4099d0:	48 03 45 c0          	add    -0x40(%rbp),%rax
  4099d4:	48 8b 00             	mov    (%rax),%rax
  4099d7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			if (ic is c || _d_isbaseof(ic, c))
  4099db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4099df:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  4099e3:	74 11                	je     4099f6 <_d_isbaseof+0xef>
  4099e5:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  4099e9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  4099ed:	e8 15 ff ff ff       	callq  409907 <_d_isbaseof>
  4099f2:	85 c0                	test   %eax,%eax
  4099f4:	74 09                	je     4099ff <_d_isbaseof+0xf8>
				return 1;
  4099f6:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%rbp)
  4099fd:	eb 2f                	jmp    409a2e <_d_isbaseof+0x127>
		for (i = 0; i < oc.interfaces.length; i++)
		{
			ClassInfo ic;

			ic = oc.interfaces[i].classinfo;
			if (ic is c || _d_isbaseof(ic, c))
  4099ff:	ff 45 f4             	incl   -0xc(%rbp)
  409a02:	e9 4e ff ff ff       	jmpq   409955 <_d_isbaseof+0x4e>
				return 1;
		}
		oc = oc.base;
  409a07:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409a0b:	48 8b 40 50          	mov    0x50(%rax),%rax
  409a0f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  409a13:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  409a18:	0f 95 c0             	setne  %al
  409a1b:	83 f0 01             	xor    $0x1,%eax
  409a1e:	84 c0                	test   %al,%al
  409a20:	75 05                	jne    409a27 <_d_isbaseof+0x120>
  409a22:	e9 0d ff ff ff       	jmpq   409934 <_d_isbaseof+0x2d>
	} while (oc);
	return 0;
  409a27:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%rbp)
  409a2e:	8b 45 bc             	mov    -0x44(%rbp),%eax
}
  409a31:	c9                   	leaveq 
  409a32:	c3                   	retq   

0000000000409a33 <_d_interface_vtbl>:

/*********************************
 * Find the vtbl[] associated with Interface ic.
 */

void *_d_interface_vtbl(ClassInfo ic, Object o)
  409a33:	55                   	push   %rbp
  409a34:	48 89 e5             	mov    %rsp,%rbp
  409a37:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  409a3e:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  409a42:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
{	int i;
  409a46:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	ClassInfo oc;
  409a4d:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  409a54:	00 

	//printf("__d_interface_vtbl(o = %p, ic = %p)\n", o, ic);

	assert(o);
  409a55:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  409a59:	e8 1e f9 ff ff       	callq  40937c <_D9invariant12_d_invariantFC6ObjectZv>

	oc = o.classinfo;
  409a5e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  409a62:	48 8b 00             	mov    (%rax),%rax
  409a65:	48 8b 00             	mov    (%rax),%rax
  409a68:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (i = 0; i < oc.interfaces.length; i++)
  409a6c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  409a73:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409a76:	48 63 d0             	movslq %eax,%rdx
  409a79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409a7d:	48 8b 40 40          	mov    0x40(%rax),%rax
  409a81:	48 39 c2             	cmp    %rax,%rdx
  409a84:	0f 92 c0             	setb   %al
  409a87:	83 f0 01             	xor    $0x1,%eax
  409a8a:	84 c0                	test   %al,%al
  409a8c:	0f 85 de 00 00 00    	jne    409b70 <_d_interface_vtbl+0x13d>
	{
		ClassInfo oic;
  409a92:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  409a99:	00 

		oic = oc.interfaces[i].classinfo;
  409a9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409a9e:	48 8b 40 48          	mov    0x48(%rax),%rax
  409aa2:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  409aa6:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409aa9:	48 63 d0             	movslq %eax,%rdx
  409aac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409ab0:	48 8b 40 40          	mov    0x40(%rax),%rax
  409ab4:	48 39 c2             	cmp    %rax,%rdx
  409ab7:	73 0b                	jae    409ac4 <_d_interface_vtbl+0x91>
  409ab9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409abc:	48 98                	cltq   
  409abe:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  409ac2:	eb 22                	jmp    409ae6 <_d_interface_vtbl+0xb3>
  409ac4:	48 c7 45 b0 0b 00 00 	movq   $0xb,-0x50(%rbp)
  409acb:	00 
  409acc:	48 c7 45 b8 52 27 41 	movq   $0x412752,-0x48(%rbp)
  409ad3:	00 
  409ad4:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  409ad8:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  409adc:	ba da 00 00 00       	mov    $0xda,%edx
  409ae1:	e8 5f 13 00 00       	callq  40ae45 <_d_array_bounds>
  409ae6:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  409aea:	48 c1 e0 05          	shl    $0x5,%rax
  409aee:	48 03 45 80          	add    -0x80(%rbp),%rax
  409af2:	48 8b 00             	mov    (%rax),%rax
  409af5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (oic is ic)
  409af9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409afd:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  409b01:	75 65                	jne    409b68 <_d_interface_vtbl+0x135>
		{
			return cast(void *)oc.interfaces[i].vtbl;
  409b03:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409b07:	48 8b 40 48          	mov    0x48(%rax),%rax
  409b0b:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  409b0f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409b12:	48 63 d0             	movslq %eax,%rdx
  409b15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409b19:	48 8b 40 40          	mov    0x40(%rax),%rax
  409b1d:	48 39 c2             	cmp    %rax,%rdx
  409b20:	73 0b                	jae    409b2d <_d_interface_vtbl+0xfa>
  409b22:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409b25:	48 98                	cltq   
  409b27:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  409b2b:	eb 22                	jmp    409b4f <_d_interface_vtbl+0x11c>
  409b2d:	48 c7 45 c0 0b 00 00 	movq   $0xb,-0x40(%rbp)
  409b34:	00 
  409b35:	48 c7 45 c8 52 27 41 	movq   $0x412752,-0x38(%rbp)
  409b3c:	00 
  409b3d:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  409b41:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  409b45:	ba dd 00 00 00       	mov    $0xdd,%edx
  409b4a:	e8 f6 12 00 00       	callq  40ae45 <_d_array_bounds>
  409b4f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409b53:	48 c1 e0 05          	shl    $0x5,%rax
  409b57:	48 03 45 90          	add    -0x70(%rbp),%rax
  409b5b:	48 8b 40 10          	mov    0x10(%rax),%rax
  409b5f:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  409b66:	eb 2c                	jmp    409b94 <_d_interface_vtbl+0x161>
	for (i = 0; i < oc.interfaces.length; i++)
	{
		ClassInfo oic;

		oic = oc.interfaces[i].classinfo;
		if (oic is ic)
  409b68:	ff 45 f4             	incl   -0xc(%rbp)
  409b6b:	e9 03 ff ff ff       	jmpq   409a73 <_d_interface_vtbl+0x40>
		{
			return cast(void *)oc.interfaces[i].vtbl;
		}
	}
	assert(0);
  409b70:	48 c7 45 d0 0b 00 00 	movq   $0xb,-0x30(%rbp)
  409b77:	00 
  409b78:	48 c7 45 d8 52 27 41 	movq   $0x412752,-0x28(%rbp)
  409b7f:	00 
  409b80:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  409b84:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  409b88:	ba e0 00 00 00       	mov    $0xe0,%edx
  409b8d:	e8 40 12 00 00       	callq  40add2 <_d_assert>
}
  409b92:	eb 07                	jmp    409b9b <_d_interface_vtbl+0x168>
  409b94:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  409b9b:	c9                   	leaveq 
  409b9c:	c3                   	retq   

0000000000409b9d <_d_obj_eq>:

int _d_obj_eq(Object o1, Object o2)
  409b9d:	55                   	push   %rbp
  409b9e:	48 89 e5             	mov    %rsp,%rbp
  409ba1:	48 83 ec 20          	sub    $0x20,%rsp
  409ba5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409ba9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
{
    return o1 is o2 || (o1 && o1.opEquals(o2));
  409bad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409bb1:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  409bb5:	74 23                	je     409bda <_d_obj_eq+0x3d>
  409bb7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  409bbc:	74 22                	je     409be0 <_d_obj_eq+0x43>
  409bbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409bc2:	48 8b 00             	mov    (%rax),%rax
  409bc5:	48 83 c0 20          	add    $0x20,%rax
  409bc9:	48 8b 00             	mov    (%rax),%rax
  409bcc:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  409bd0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  409bd4:	ff d0                	callq  *%rax
  409bd6:	85 c0                	test   %eax,%eax
  409bd8:	74 06                	je     409be0 <_d_obj_eq+0x43>
  409bda:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  409bde:	eb 04                	jmp    409be4 <_d_obj_eq+0x47>
  409be0:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  409be4:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
}
  409be8:	c9                   	leaveq 
  409be9:	c3                   	retq   

0000000000409bea <_d_obj_cmp>:

int _d_obj_cmp(Object o1, Object o2)
  409bea:	55                   	push   %rbp
  409beb:	48 89 e5             	mov    %rsp,%rbp
  409bee:	48 83 ec 10          	sub    $0x10,%rsp
  409bf2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409bf6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
{
    return o1.opCmp(o2);
  409bfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409bfe:	48 8b 00             	mov    (%rax),%rax
  409c01:	48 83 c0 18          	add    $0x18,%rax
  409c05:	48 8b 00             	mov    (%rax),%rax
  409c08:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  409c0c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  409c10:	ff d0                	callq  *%rax
}
  409c12:	c9                   	leaveq 
  409c13:	c3                   	retq   

0000000000409c14 <_d_switch_string>:

int _d_switch_string(char[][] table, char[] ca)
  409c14:	55                   	push   %rbp
  409c15:	48 89 e5             	mov    %rsp,%rbp
  409c18:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp
  409c1f:	49 89 d0             	mov    %rdx,%r8
  409c22:	48 89 f8             	mov    %rdi,%rax
  409c25:	48 89 f2             	mov    %rsi,%rdx
  409c28:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  409c2f:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  409c36:	4c 89 c0             	mov    %r8,%rax
  409c39:	48 89 ca             	mov    %rcx,%rdx
  409c3c:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  409c43:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
{
	int low;
  409c4a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	int high;
  409c51:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	int mid;
  409c58:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
	int c;
  409c5f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	char[] pca;
  409c66:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  409c6d:	00 
  409c6e:	48 c7 45 88 00 00 00 	movq   $0x0,-0x78(%rbp)
  409c75:	00 

	low = 0;
  409c76:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	high = table.length;
  409c7d:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  409c84:	89 45 f4             	mov    %eax,-0xc(%rbp)

	if (high &&
  409c87:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  409c8b:	0f 84 f4 02 00 00    	je     409f85 <_d_switch_string+0x371>
  409c91:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  409c98:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  409c9f:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  409ca6:	48 89 95 f0 fe ff ff 	mov    %rdx,-0x110(%rbp)
  409cad:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  409cb4:	48 83 f8 00          	cmp    $0x0,%rax
  409cb8:	76 0d                	jbe    409cc7 <_d_switch_string+0xb3>
  409cba:	48 c7 85 f8 fe ff ff 	movq   $0x0,-0x108(%rbp)
  409cc1:	00 00 00 00 
  409cc5:	eb 22                	jmp    409ce9 <_d_switch_string+0xd5>
  409cc7:	48 c7 45 90 0b 00 00 	movq   $0xb,-0x70(%rbp)
  409cce:	00 
  409ccf:	48 c7 45 98 52 27 41 	movq   $0x412752,-0x68(%rbp)
  409cd6:	00 
  409cd7:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  409cdb:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  409cdf:	ba f9 00 00 00       	mov    $0xf9,%edx
  409ce4:	e8 5c 11 00 00       	callq  40ae45 <_d_array_bounds>
  409ce9:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  409cf0:	48 c1 e0 04          	shl    $0x4,%rax
  409cf4:	48 03 85 f0 fe ff ff 	add    -0x110(%rbp),%rax
  409cfb:	48 8b 00             	mov    (%rax),%rax
  409cfe:	48 39 85 e8 fe ff ff 	cmp    %rax,-0x118(%rbp)
  409d05:	0f 82 7a 02 00 00    	jb     409f85 <_d_switch_string+0x371>
  409d0b:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  409d12:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  409d19:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  409d20:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  409d27:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409d2a:	ff c8                	dec    %eax
  409d2c:	48 98                	cltq   
  409d2e:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  409d35:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  409d3c:	48 39 85 18 ff ff ff 	cmp    %rax,-0xe8(%rbp)
  409d43:	73 10                	jae    409d55 <_d_switch_string+0x141>
  409d45:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  409d4c:	48 89 95 10 ff ff ff 	mov    %rdx,-0xf0(%rbp)
  409d53:	eb 22                	jmp    409d77 <_d_switch_string+0x163>
  409d55:	48 c7 45 a0 0b 00 00 	movq   $0xb,-0x60(%rbp)
  409d5c:	00 
  409d5d:	48 c7 45 a8 52 27 41 	movq   $0x412752,-0x58(%rbp)
  409d64:	00 
  409d65:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  409d69:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  409d6d:	ba fa 00 00 00       	mov    $0xfa,%edx
  409d72:	e8 ce 10 00 00       	callq  40ae45 <_d_array_bounds>
  409d77:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  409d7e:	48 c1 e0 04          	shl    $0x4,%rax
  409d82:	48 03 85 08 ff ff ff 	add    -0xf8(%rbp),%rax
  409d89:	48 8b 00             	mov    (%rax),%rax
  409d8c:	48 39 85 00 ff ff ff 	cmp    %rax,-0x100(%rbp)
  409d93:	0f 87 ec 01 00 00    	ja     409f85 <_d_switch_string+0x371>
		ca.length >= table[0].length &&
		ca.length <= table[high - 1].length)
	{
		// Looking for 0 length string, which would only be at the beginning
		if (ca.length == 0)
  409d99:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  409da0:	48 85 c0             	test   %rax,%rax
  409da3:	75 0f                	jne    409db4 <_d_switch_string+0x1a0>
			return 0;
  409da5:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%rbp)
  409dac:	00 00 00 
  409daf:	e9 db 01 00 00       	jmpq   409f8f <_d_switch_string+0x37b>

		char c1 = ca[0];
  409db4:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
  409dbb:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
  409dc2:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  409dc9:	48 83 f8 00          	cmp    $0x0,%rax
  409dcd:	76 0d                	jbe    409ddc <_d_switch_string+0x1c8>
  409dcf:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  409dd6:	00 00 00 00 
  409dda:	eb 22                	jmp    409dfe <_d_switch_string+0x1ea>
  409ddc:	48 c7 45 b0 0b 00 00 	movq   $0xb,-0x50(%rbp)
  409de3:	00 
  409de4:	48 c7 45 b8 52 27 41 	movq   $0x412752,-0x48(%rbp)
  409deb:	00 
  409dec:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  409df0:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  409df4:	ba 00 01 00 00       	mov    $0x100,%edx
  409df9:	e8 47 10 00 00       	callq  40ae45 <_d_array_bounds>
  409dfe:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  409e05:	48 03 85 28 ff ff ff 	add    -0xd8(%rbp),%rax
  409e0c:	0f b6 00             	movzbl (%rax),%eax
  409e0f:	88 45 ff             	mov    %al,-0x1(%rbp)
  409e12:	eb 00                	jmp    409e14 <_d_switch_string+0x200>

		// Do binary search
		while (low < high)
  409e14:	8b 45 f8             	mov    -0x8(%rbp),%eax
  409e17:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  409e1a:	0f 9c c0             	setl   %al
  409e1d:	83 f0 01             	xor    $0x1,%eax
  409e20:	84 c0                	test   %al,%al
  409e22:	0f 85 5d 01 00 00    	jne    409f85 <_d_switch_string+0x371>
		{
			mid = (low + high) >> 1;
  409e28:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409e2b:	03 45 f8             	add    -0x8(%rbp),%eax
  409e2e:	d1 f8                	sar    %eax
  409e30:	89 45 f0             	mov    %eax,-0x10(%rbp)
			pca = table[mid];
  409e33:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  409e3a:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  409e41:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409e44:	48 63 d0             	movslq %eax,%rdx
  409e47:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  409e4e:	48 39 c2             	cmp    %rax,%rdx
  409e51:	73 0e                	jae    409e61 <_d_switch_string+0x24d>
  409e53:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409e56:	48 98                	cltq   
  409e58:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  409e5f:	eb 22                	jmp    409e83 <_d_switch_string+0x26f>
  409e61:	48 c7 45 c0 0b 00 00 	movq   $0xb,-0x40(%rbp)
  409e68:	00 
  409e69:	48 c7 45 c8 52 27 41 	movq   $0x412752,-0x38(%rbp)
  409e70:	00 
  409e71:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  409e75:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  409e79:	ba 06 01 00 00       	mov    $0x106,%edx
  409e7e:	e8 c2 0f 00 00       	callq  40ae45 <_d_array_bounds>
  409e83:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  409e8a:	48 c1 e0 04          	shl    $0x4,%rax
  409e8e:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  409e95:	48 01 c2             	add    %rax,%rdx
  409e98:	48 8b 02             	mov    (%rdx),%rax
  409e9b:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  409e9f:	48 8b 42 08          	mov    0x8(%rdx),%rax
  409ea3:	48 89 45 88          	mov    %rax,-0x78(%rbp)
			c = ca.length - pca.length;
  409ea7:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  409eae:	89 c2                	mov    %eax,%edx
  409eb0:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  409eb4:	89 d1                	mov    %edx,%ecx
  409eb6:	29 c1                	sub    %eax,%ecx
  409eb8:	89 c8                	mov    %ecx,%eax
  409eba:	89 45 ec             	mov    %eax,-0x14(%rbp)
			if (c == 0)
  409ebd:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  409ec1:	0f 85 a0 00 00 00    	jne    409f67 <_d_switch_string+0x353>
			{
				c = cast(ubyte)c1 - cast(ubyte)pca[0];
  409ec7:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  409ecb:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  409ed1:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  409ed5:	48 89 95 50 ff ff ff 	mov    %rdx,-0xb0(%rbp)
  409edc:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  409ee0:	48 83 f8 00          	cmp    $0x0,%rax
  409ee4:	76 0d                	jbe    409ef3 <_d_switch_string+0x2df>
  409ee6:	48 c7 85 58 ff ff ff 	movq   $0x0,-0xa8(%rbp)
  409eed:	00 00 00 00 
  409ef1:	eb 22                	jmp    409f15 <_d_switch_string+0x301>
  409ef3:	48 c7 45 d0 0b 00 00 	movq   $0xb,-0x30(%rbp)
  409efa:	00 
  409efb:	48 c7 45 d8 52 27 41 	movq   $0x412752,-0x28(%rbp)
  409f02:	00 
  409f03:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  409f07:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  409f0b:	ba 0a 01 00 00       	mov    $0x10a,%edx
  409f10:	e8 30 0f 00 00       	callq  40ae45 <_d_array_bounds>
  409f15:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  409f1c:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  409f23:	0f b6 00             	movzbl (%rax),%eax
  409f26:	0f b6 c0             	movzbl %al,%eax
  409f29:	8b 8d 4c ff ff ff    	mov    -0xb4(%rbp),%ecx
  409f2f:	29 c1                	sub    %eax,%ecx
  409f31:	89 c8                	mov    %ecx,%eax
  409f33:	89 45 ec             	mov    %eax,-0x14(%rbp)
				if (c == 0)
  409f36:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  409f3a:	75 2b                	jne    409f67 <_d_switch_string+0x353>
				{
					c = memcmp(ca.ptr, pca.ptr, ca.length);
  409f3c:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  409f43:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  409f47:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
  409f4e:	e8 61 39 00 00       	callq  40d8b4 <_D6kernel4core6system6memcmpFPvPvmZl>
  409f53:	89 45 ec             	mov    %eax,-0x14(%rbp)
					if (c == 0)
  409f56:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  409f5a:	75 0b                	jne    409f67 <_d_switch_string+0x353>
					{
						return mid;
  409f5c:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409f5f:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%rbp)
  409f65:	eb 28                	jmp    409f8f <_d_switch_string+0x37b>
					}
				}
			}
			if (c < 0)
  409f67:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  409f6b:	79 0b                	jns    409f78 <_d_switch_string+0x364>
			{
				high = mid;
  409f6d:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409f70:	89 45 f4             	mov    %eax,-0xc(%rbp)
  409f73:	e9 9c fe ff ff       	jmpq   409e14 <_d_switch_string+0x200>
			}
			else
			{
				low = mid + 1;
  409f78:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409f7b:	ff c0                	inc    %eax
  409f7d:	89 45 f8             	mov    %eax,-0x8(%rbp)
					{
						return mid;
					}
				}
			}
			if (c < 0)
  409f80:	e9 8f fe ff ff       	jmpq   409e14 <_d_switch_string+0x200>
				low = mid + 1;
			}
		}
	}

	return -1;				// not found
  409f85:	c7 85 24 ff ff ff ff 	movl   $0xffffffff,-0xdc(%rbp)
  409f8c:	ff ff ff 
  409f8f:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
}
  409f95:	c9                   	leaveq 
  409f96:	c3                   	retq   

0000000000409f97 <_d_switch_ustring>:

int _d_switch_ustring(wchar[][] table, wchar[] ca)
  409f97:	55                   	push   %rbp
  409f98:	48 89 e5             	mov    %rsp,%rbp
  409f9b:	48 83 ec 70          	sub    $0x70,%rsp
  409f9f:	49 89 d0             	mov    %rdx,%r8
  409fa2:	48 89 f8             	mov    %rdi,%rax
  409fa5:	48 89 f2             	mov    %rsi,%rdx
  409fa8:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  409fac:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  409fb0:	4c 89 c0             	mov    %r8,%rax
  409fb3:	48 89 ca             	mov    %rcx,%rdx
  409fb6:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  409fba:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
{
	int low;
  409fbe:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	int high;
  409fc5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	int mid;
  409fcc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	int c;
  409fd3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
	wchar[] pca;
  409fda:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  409fe1:	00 
  409fe2:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  409fe9:	00 

	low = 0;
  409fea:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	high = table.length;
  409ff1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  409ff5:	89 45 f8             	mov    %eax,-0x8(%rbp)
  409ff8:	eb 00                	jmp    409ffa <_d_switch_ustring+0x63>

	// Do binary search
	while (low < high)
  409ffa:	8b 45 fc             	mov    -0x4(%rbp),%eax
  409ffd:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  40a000:	0f 9c c0             	setl   %al
  40a003:	83 f0 01             	xor    $0x1,%eax
  40a006:	84 c0                	test   %al,%al
  40a008:	0f 85 ca 00 00 00    	jne    40a0d8 <_d_switch_ustring+0x141>
	{
		mid = (low + high) >> 1;
  40a00e:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40a011:	03 45 fc             	add    -0x4(%rbp),%eax
  40a014:	d1 f8                	sar    %eax
  40a016:	89 45 f4             	mov    %eax,-0xc(%rbp)
		pca = table[mid];
  40a019:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40a01d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  40a021:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40a024:	48 63 d0             	movslq %eax,%rdx
  40a027:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40a02b:	48 39 c2             	cmp    %rax,%rdx
  40a02e:	73 0b                	jae    40a03b <_d_switch_ustring+0xa4>
  40a030:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40a033:	48 98                	cltq   
  40a035:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40a039:	eb 22                	jmp    40a05d <_d_switch_ustring+0xc6>
  40a03b:	48 c7 45 e0 0b 00 00 	movq   $0xb,-0x20(%rbp)
  40a042:	00 
  40a043:	48 c7 45 e8 52 27 41 	movq   $0x412752,-0x18(%rbp)
  40a04a:	00 
  40a04b:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40a04f:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40a053:	ba 31 01 00 00       	mov    $0x131,%edx
  40a058:	e8 e8 0d 00 00       	callq  40ae45 <_d_array_bounds>
  40a05d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40a061:	48 c1 e0 04          	shl    $0x4,%rax
  40a065:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40a069:	48 01 c2             	add    %rax,%rdx
  40a06c:	48 8b 02             	mov    (%rdx),%rax
  40a06f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40a073:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40a077:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		c = ca.length - pca.length;
  40a07b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40a07f:	89 c2                	mov    %eax,%edx
  40a081:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40a085:	89 d1                	mov    %edx,%ecx
  40a087:	29 c1                	sub    %eax,%ecx
  40a089:	89 c8                	mov    %ecx,%eax
  40a08b:	89 45 f0             	mov    %eax,-0x10(%rbp)
		if (c == 0)
  40a08e:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  40a092:	75 26                	jne    40a0ba <_d_switch_ustring+0x123>
		{
			c = memcmp(ca.ptr, pca.ptr, ca.length * wchar.sizeof);
  40a094:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40a098:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  40a09c:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40a0a0:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  40a0a4:	e8 0b 38 00 00       	callq  40d8b4 <_D6kernel4core6system6memcmpFPvPvmZl>
  40a0a9:	89 45 f0             	mov    %eax,-0x10(%rbp)
			if (c == 0)
  40a0ac:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  40a0b0:	75 08                	jne    40a0ba <_d_switch_ustring+0x123>
			{
				return mid;
  40a0b2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40a0b5:	89 45 ac             	mov    %eax,-0x54(%rbp)
  40a0b8:	eb 25                	jmp    40a0df <_d_switch_ustring+0x148>
			}
		}
		if (c < 0)
  40a0ba:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  40a0be:	79 0b                	jns    40a0cb <_d_switch_ustring+0x134>
		{
			high = mid;
  40a0c0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40a0c3:	89 45 f8             	mov    %eax,-0x8(%rbp)
  40a0c6:	e9 2f ff ff ff       	jmpq   409ffa <_d_switch_ustring+0x63>
		}
		else
		{
			low = mid + 1;
  40a0cb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40a0ce:	ff c0                	inc    %eax
  40a0d0:	89 45 fc             	mov    %eax,-0x4(%rbp)
			if (c == 0)
			{
				return mid;
			}
		}
		if (c < 0)
  40a0d3:	e9 22 ff ff ff       	jmpq   409ffa <_d_switch_ustring+0x63>
		{
			low = mid + 1;
		}
	}

	return -1;				// not found
  40a0d8:	c7 45 ac ff ff ff ff 	movl   $0xffffffff,-0x54(%rbp)
  40a0df:	8b 45 ac             	mov    -0x54(%rbp),%eax
}
  40a0e2:	c9                   	leaveq 
  40a0e3:	c3                   	retq   

000000000040a0e4 <_d_switch_dstring>:

int _d_switch_dstring(dchar[][] table, dchar[] ca)
  40a0e4:	55                   	push   %rbp
  40a0e5:	48 89 e5             	mov    %rsp,%rbp
  40a0e8:	48 83 ec 70          	sub    $0x70,%rsp
  40a0ec:	49 89 d0             	mov    %rdx,%r8
  40a0ef:	48 89 f8             	mov    %rdi,%rax
  40a0f2:	48 89 f2             	mov    %rsi,%rdx
  40a0f5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40a0f9:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40a0fd:	4c 89 c0             	mov    %r8,%rax
  40a100:	48 89 ca             	mov    %rcx,%rdx
  40a103:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40a107:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
{
	int low;
  40a10b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	int high;
  40a112:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	int mid;
  40a119:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	int c;
  40a120:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
	dchar[] pca;
  40a127:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  40a12e:	00 
  40a12f:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40a136:	00 

	low = 0;
  40a137:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	high = table.length;
  40a13e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40a142:	89 45 f8             	mov    %eax,-0x8(%rbp)
  40a145:	eb 00                	jmp    40a147 <_d_switch_dstring+0x63>

	// Do binary search
	while (low < high)
  40a147:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40a14a:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  40a14d:	0f 9c c0             	setl   %al
  40a150:	83 f0 01             	xor    $0x1,%eax
  40a153:	84 c0                	test   %al,%al
  40a155:	0f 85 ce 00 00 00    	jne    40a229 <_d_switch_dstring+0x145>
	{
		mid = (low + high) >> 1;
  40a15b:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40a15e:	03 45 fc             	add    -0x4(%rbp),%eax
  40a161:	d1 f8                	sar    %eax
  40a163:	89 45 f4             	mov    %eax,-0xc(%rbp)
		pca = table[mid];
  40a166:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40a16a:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  40a16e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40a171:	48 63 d0             	movslq %eax,%rdx
  40a174:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40a178:	48 39 c2             	cmp    %rax,%rdx
  40a17b:	73 0b                	jae    40a188 <_d_switch_dstring+0xa4>
  40a17d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40a180:	48 98                	cltq   
  40a182:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40a186:	eb 22                	jmp    40a1aa <_d_switch_dstring+0xc6>
  40a188:	48 c7 45 e0 0b 00 00 	movq   $0xb,-0x20(%rbp)
  40a18f:	00 
  40a190:	48 c7 45 e8 52 27 41 	movq   $0x412752,-0x18(%rbp)
  40a197:	00 
  40a198:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40a19c:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40a1a0:	ba 57 01 00 00       	mov    $0x157,%edx
  40a1a5:	e8 9b 0c 00 00       	callq  40ae45 <_d_array_bounds>
  40a1aa:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40a1ae:	48 c1 e0 04          	shl    $0x4,%rax
  40a1b2:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40a1b6:	48 01 c2             	add    %rax,%rdx
  40a1b9:	48 8b 02             	mov    (%rdx),%rax
  40a1bc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40a1c0:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40a1c4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		c = ca.length - pca.length;
  40a1c8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40a1cc:	89 c2                	mov    %eax,%edx
  40a1ce:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40a1d2:	89 d1                	mov    %edx,%ecx
  40a1d4:	29 c1                	sub    %eax,%ecx
  40a1d6:	89 c8                	mov    %ecx,%eax
  40a1d8:	89 45 f0             	mov    %eax,-0x10(%rbp)
		if (c == 0)
  40a1db:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  40a1df:	75 2a                	jne    40a20b <_d_switch_dstring+0x127>
		{
			c = memcmp(ca.ptr, pca.ptr, ca.length * dchar.sizeof);
  40a1e1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40a1e5:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  40a1ec:	00 
  40a1ed:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40a1f1:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  40a1f5:	e8 ba 36 00 00       	callq  40d8b4 <_D6kernel4core6system6memcmpFPvPvmZl>
  40a1fa:	89 45 f0             	mov    %eax,-0x10(%rbp)
			if (c == 0)
  40a1fd:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  40a201:	75 08                	jne    40a20b <_d_switch_dstring+0x127>
			{
				return mid;
  40a203:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40a206:	89 45 ac             	mov    %eax,-0x54(%rbp)
  40a209:	eb 25                	jmp    40a230 <_d_switch_dstring+0x14c>
			}
		}
		if (c < 0)
  40a20b:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  40a20f:	79 0b                	jns    40a21c <_d_switch_dstring+0x138>
		{
			high = mid;
  40a211:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40a214:	89 45 f8             	mov    %eax,-0x8(%rbp)
  40a217:	e9 2b ff ff ff       	jmpq   40a147 <_d_switch_dstring+0x63>
		}
		else
		{
			low = mid + 1;
  40a21c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40a21f:	ff c0                	inc    %eax
  40a221:	89 45 fc             	mov    %eax,-0x4(%rbp)
			if (c == 0)
			{
				return mid;
			}
		}
		if (c < 0)
  40a224:	e9 1e ff ff ff       	jmpq   40a147 <_d_switch_dstring+0x63>
		{
			low = mid + 1;
		}
	}

	return -1;				// not found
  40a229:	c7 45 ac ff ff ff ff 	movl   $0xffffffff,-0x54(%rbp)
  40a230:	8b 45 ac             	mov    -0x54(%rbp),%eax
}
  40a233:	c9                   	leaveq 
  40a234:	c3                   	retq   

000000000040a235 <_d_newclass>:
  40a235:	55                   	push   %rbp
  40a236:	48 89 e5             	mov    %rsp,%rbp
  40a239:	48 83 ec 30          	sub    $0x30,%rsp
  40a23d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
		{
			low = mid + 1;
		}
	}

	return -1;				// not found
  40a241:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a248:	00 
  40a249:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40a250:	00 
  40a251:	48 c7 45 f0 41 00 00 	movq   $0x41,-0x10(%rbp)
  40a258:	00 
  40a259:	48 c7 45 f8 60 27 41 	movq   $0x412760,-0x8(%rbp)
  40a260:	00 
  40a261:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a265:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a269:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a26d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a271:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a277:	e8 81 0b 00 00       	callq  40adfd <_d_assert_msg>
  40a27c:	c9                   	leaveq 
  40a27d:	c3                   	retq   

000000000040a27e <_d_delinterface>:
  40a27e:	55                   	push   %rbp
  40a27f:	48 89 e5             	mov    %rsp,%rbp
  40a282:	48 83 ec 30          	sub    $0x30,%rsp
  40a286:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a28a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a291:	00 
  40a292:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40a299:	00 
  40a29a:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40a2a1:	00 
  40a2a2:	48 c7 45 f8 a8 27 41 	movq   $0x4127a8,-0x8(%rbp)
  40a2a9:	00 
  40a2aa:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a2ae:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a2b2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a2b6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a2ba:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a2c0:	e8 38 0b 00 00       	callq  40adfd <_d_assert_msg>
  40a2c5:	c9                   	leaveq 
  40a2c6:	c3                   	retq   

000000000040a2c7 <_d_delclass>:
  40a2c7:	55                   	push   %rbp
  40a2c8:	48 89 e5             	mov    %rsp,%rbp
  40a2cb:	48 83 ec 30          	sub    $0x30,%rsp
  40a2cf:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a2d3:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a2da:	00 
  40a2db:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40a2e2:	00 
  40a2e3:	48 c7 45 f0 3c 00 00 	movq   $0x3c,-0x10(%rbp)
  40a2ea:	00 
  40a2eb:	48 c7 45 f8 e8 27 41 	movq   $0x4127e8,-0x8(%rbp)
  40a2f2:	00 
  40a2f3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a2f7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a2fb:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a2ff:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a303:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a309:	e8 ef 0a 00 00       	callq  40adfd <_d_assert_msg>
  40a30e:	c9                   	leaveq 
  40a30f:	c3                   	retq   

000000000040a310 <_d_newarrayT>:
  40a310:	55                   	push   %rbp
  40a311:	48 89 e5             	mov    %rsp,%rbp
  40a314:	48 83 ec 30          	sub    $0x30,%rsp
  40a318:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a31c:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a320:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a327:	00 
  40a328:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40a32f:	00 
  40a330:	48 c7 45 f0 4f 00 00 	movq   $0x4f,-0x10(%rbp)
  40a337:	00 
  40a338:	48 c7 45 f8 28 28 41 	movq   $0x412828,-0x8(%rbp)
  40a33f:	00 
  40a340:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a344:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a348:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a34c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a350:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a356:	e8 a2 0a 00 00       	callq  40adfd <_d_assert_msg>
  40a35b:	c9                   	leaveq 
  40a35c:	c3                   	retq   

000000000040a35d <_d_newarrayiT>:
  40a35d:	55                   	push   %rbp
  40a35e:	48 89 e5             	mov    %rsp,%rbp
  40a361:	48 83 ec 30          	sub    $0x30,%rsp
  40a365:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a369:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a36d:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a374:	00 
  40a375:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40a37c:	00 
  40a37d:	48 c7 45 f0 50 00 00 	movq   $0x50,-0x10(%rbp)
  40a384:	00 
  40a385:	48 c7 45 f8 78 28 41 	movq   $0x412878,-0x8(%rbp)
  40a38c:	00 
  40a38d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a391:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a395:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a399:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a39d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a3a3:	e8 55 0a 00 00       	callq  40adfd <_d_assert_msg>
  40a3a8:	c9                   	leaveq 
  40a3a9:	c3                   	retq   

000000000040a3aa <_d_newarraymTp>:
  40a3aa:	55                   	push   %rbp
  40a3ab:	48 89 e5             	mov    %rsp,%rbp
  40a3ae:	48 83 ec 40          	sub    $0x40,%rsp
  40a3b2:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a3b6:	89 55 d4             	mov    %edx,-0x2c(%rbp)
  40a3b9:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  40a3bd:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a3c4:	00 
  40a3c5:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40a3cc:	00 
  40a3cd:	48 c7 45 f0 5c 00 00 	movq   $0x5c,-0x10(%rbp)
  40a3d4:	00 
  40a3d5:	48 c7 45 f8 d0 28 41 	movq   $0x4128d0,-0x8(%rbp)
  40a3dc:	00 
  40a3dd:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a3e1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a3e5:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a3e9:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a3ed:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a3f3:	e8 05 0a 00 00       	callq  40adfd <_d_assert_msg>
  40a3f8:	c9                   	leaveq 
  40a3f9:	c3                   	retq   

000000000040a3fa <_d_newarraymiTp>:
  40a3fa:	55                   	push   %rbp
  40a3fb:	48 89 e5             	mov    %rsp,%rbp
  40a3fe:	48 83 ec 40          	sub    $0x40,%rsp
  40a402:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a406:	89 55 d4             	mov    %edx,-0x2c(%rbp)
  40a409:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  40a40d:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a414:	00 
  40a415:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40a41c:	00 
  40a41d:	48 c7 45 f0 5d 00 00 	movq   $0x5d,-0x10(%rbp)
  40a424:	00 
  40a425:	48 c7 45 f8 30 29 41 	movq   $0x412930,-0x8(%rbp)
  40a42c:	00 
  40a42d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a431:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a435:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a439:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a43d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a443:	e8 b5 09 00 00       	callq  40adfd <_d_assert_msg>
  40a448:	c9                   	leaveq 
  40a449:	c3                   	retq   

000000000040a44a <_d_delarray>:
  40a44a:	55                   	push   %rbp
  40a44b:	48 89 e5             	mov    %rsp,%rbp
  40a44e:	48 83 ec 30          	sub    $0x30,%rsp
  40a452:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a456:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a45d:	00 
  40a45e:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40a465:	00 
  40a466:	48 c7 45 f0 3b 00 00 	movq   $0x3b,-0x10(%rbp)
  40a46d:	00 
  40a46e:	48 c7 45 f8 90 29 41 	movq   $0x412990,-0x8(%rbp)
  40a475:	00 
  40a476:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a47a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a47e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a482:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a486:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a48c:	e8 6c 09 00 00       	callq  40adfd <_d_assert_msg>
  40a491:	c9                   	leaveq 
  40a492:	c3                   	retq   

000000000040a493 <_d_delmemory>:
  40a493:	55                   	push   %rbp
  40a494:	48 89 e5             	mov    %rsp,%rbp
  40a497:	48 83 ec 30          	sub    $0x30,%rsp
  40a49b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a49f:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a4a6:	00 
  40a4a7:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40a4ae:	00 
  40a4af:	48 c7 45 f0 3c 00 00 	movq   $0x3c,-0x10(%rbp)
  40a4b6:	00 
  40a4b7:	48 c7 45 f8 d0 29 41 	movq   $0x4129d0,-0x8(%rbp)
  40a4be:	00 
  40a4bf:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a4c3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a4c7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a4cb:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a4cf:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a4d5:	e8 23 09 00 00       	callq  40adfd <_d_assert_msg>
  40a4da:	c9                   	leaveq 
  40a4db:	c3                   	retq   

000000000040a4dc <_d_callfinalizer>:
  40a4dc:	55                   	push   %rbp
  40a4dd:	48 89 e5             	mov    %rsp,%rbp
  40a4e0:	48 83 ec 30          	sub    $0x30,%rsp
  40a4e4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a4e8:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a4ef:	00 
  40a4f0:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40a4f7:	00 
  40a4f8:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40a4ff:	00 
  40a500:	48 c7 45 f8 10 2a 41 	movq   $0x412a10,-0x8(%rbp)
  40a507:	00 
  40a508:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a50c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a510:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a514:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a518:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a51e:	e8 da 08 00 00       	callq  40adfd <_d_assert_msg>
  40a523:	c9                   	leaveq 
  40a524:	c3                   	retq   

000000000040a525 <rt_finalize>:
  40a525:	55                   	push   %rbp
  40a526:	48 89 e5             	mov    %rsp,%rbp
  40a529:	48 83 ec 30          	sub    $0x30,%rsp
  40a52d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a531:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  40a535:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a53c:	00 
  40a53d:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40a544:	00 
  40a545:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40a54c:	00 
  40a54d:	48 c7 45 f8 50 2a 41 	movq   $0x412a50,-0x8(%rbp)
  40a554:	00 
  40a555:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a559:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a55d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a561:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a565:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a56b:	e8 8d 08 00 00       	callq  40adfd <_d_assert_msg>
  40a570:	c9                   	leaveq 
  40a571:	c3                   	retq   

000000000040a572 <_d_arraysetlengthT>:
  40a572:	55                   	push   %rbp
  40a573:	48 89 e5             	mov    %rsp,%rbp
  40a576:	48 83 ec 40          	sub    $0x40,%rsp
  40a57a:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a57e:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a582:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  40a586:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a58d:	00 
  40a58e:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40a595:	00 
  40a596:	48 c7 45 f0 63 00 00 	movq   $0x63,-0x10(%rbp)
  40a59d:	00 
  40a59e:	48 c7 45 f8 a0 2a 41 	movq   $0x412aa0,-0x8(%rbp)
  40a5a5:	00 
  40a5a6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a5aa:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a5ae:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a5b2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a5b6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a5bc:	e8 3c 08 00 00       	callq  40adfd <_d_assert_msg>
  40a5c1:	c9                   	leaveq 
  40a5c2:	c3                   	retq   

000000000040a5c3 <_d_arraysetlengthiT>:
  40a5c3:	55                   	push   %rbp
  40a5c4:	48 89 e5             	mov    %rsp,%rbp
  40a5c7:	48 83 ec 40          	sub    $0x40,%rsp
  40a5cb:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a5cf:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a5d3:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  40a5d7:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a5de:	00 
  40a5df:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40a5e6:	00 
  40a5e7:	48 c7 45 f0 64 00 00 	movq   $0x64,-0x10(%rbp)
  40a5ee:	00 
  40a5ef:	48 c7 45 f8 08 2b 41 	movq   $0x412b08,-0x8(%rbp)
  40a5f6:	00 
  40a5f7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a5fb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a5ff:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a603:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a607:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a60d:	e8 eb 07 00 00       	callq  40adfd <_d_assert_msg>
  40a612:	c9                   	leaveq 
  40a613:	c3                   	retq   

000000000040a614 <_d_arrayappendT>:
  40a614:	55                   	push   %rbp
  40a615:	48 89 e5             	mov    %rsp,%rbp
  40a618:	48 83 ec 40          	sub    $0x40,%rsp
  40a61c:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a620:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a624:	4c 89 c0             	mov    %r8,%rax
  40a627:	48 89 ca             	mov    %rcx,%rdx
  40a62a:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  40a62e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40a632:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a639:	00 
  40a63a:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40a641:	00 
  40a642:	48 c7 45 f0 58 00 00 	movq   $0x58,-0x10(%rbp)
  40a649:	00 
  40a64a:	48 c7 45 f8 70 2b 41 	movq   $0x412b70,-0x8(%rbp)
  40a651:	00 
  40a652:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a656:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a65a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a65e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a662:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a668:	e8 90 07 00 00       	callq  40adfd <_d_assert_msg>
  40a66d:	c9                   	leaveq 
  40a66e:	c3                   	retq   

000000000040a66f <_d_arrayappendcTp>:
  40a66f:	55                   	push   %rbp
  40a670:	48 89 e5             	mov    %rsp,%rbp
  40a673:	48 83 ec 40          	sub    $0x40,%rsp
  40a677:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a67b:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a67f:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  40a683:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a68a:	00 
  40a68b:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40a692:	00 
  40a693:	48 c7 45 f0 62 00 00 	movq   $0x62,-0x10(%rbp)
  40a69a:	00 
  40a69b:	48 c7 45 f8 d0 2b 41 	movq   $0x412bd0,-0x8(%rbp)
  40a6a2:	00 
  40a6a3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a6a7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a6ab:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a6af:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a6b3:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a6b9:	e8 3f 07 00 00       	callq  40adfd <_d_assert_msg>
  40a6be:	c9                   	leaveq 
  40a6bf:	c3                   	retq   

000000000040a6c0 <_d_arraycatT>:
  40a6c0:	55                   	push   %rbp
  40a6c1:	48 89 e5             	mov    %rsp,%rbp
  40a6c4:	48 83 ec 50          	sub    $0x50,%rsp
  40a6c8:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a6cc:	4c 89 c6             	mov    %r8,%rsi
  40a6cf:	4c 89 cf             	mov    %r9,%rdi
  40a6d2:	48 89 d0             	mov    %rdx,%rax
  40a6d5:	48 89 ca             	mov    %rcx,%rdx
  40a6d8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40a6dc:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a6e0:	48 89 f0             	mov    %rsi,%rax
  40a6e3:	48 89 fa             	mov    %rdi,%rdx
  40a6e6:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40a6ea:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  40a6ee:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a6f5:	00 
  40a6f6:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40a6fd:	00 
  40a6fe:	48 c7 45 f0 55 00 00 	movq   $0x55,-0x10(%rbp)
  40a705:	00 
  40a706:	48 c7 45 f8 38 2c 41 	movq   $0x412c38,-0x8(%rbp)
  40a70d:	00 
  40a70e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a712:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a716:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a71a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a71e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a724:	e8 d4 06 00 00       	callq  40adfd <_d_assert_msg>
  40a729:	c9                   	leaveq 
  40a72a:	c3                   	retq   

000000000040a72b <_d_arraycatnT>:
  40a72b:	55                   	push   %rbp
  40a72c:	48 89 e5             	mov    %rsp,%rbp
  40a72f:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  40a736:	48 89 b5 28 ff ff ff 	mov    %rsi,-0xd8(%rbp)
  40a73d:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  40a744:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  40a74b:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  40a752:	0f b6 c0             	movzbl %al,%eax
  40a755:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  40a75c:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
  40a763:	48 8d 04 8d 00 00 00 	lea    0x0(,%rcx,4),%rax
  40a76a:	00 
  40a76b:	48 c7 85 18 ff ff ff 	movq   $0x40a7aa,-0xe8(%rbp)
  40a772:	aa a7 40 00 
  40a776:	48 29 85 18 ff ff ff 	sub    %rax,-0xe8(%rbp)
  40a77d:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  40a781:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
  40a788:	ff e1                	jmpq   *%rcx
  40a78a:	0f 29 78 f1          	movaps %xmm7,-0xf(%rax)
  40a78e:	0f 29 70 e1          	movaps %xmm6,-0x1f(%rax)
  40a792:	0f 29 68 d1          	movaps %xmm5,-0x2f(%rax)
  40a796:	0f 29 60 c1          	movaps %xmm4,-0x3f(%rax)
  40a79a:	0f 29 58 b1          	movaps %xmm3,-0x4f(%rax)
  40a79e:	0f 29 50 a1          	movaps %xmm2,-0x5f(%rax)
  40a7a2:	0f 29 48 91          	movaps %xmm1,-0x6f(%rax)
  40a7a6:	0f 29 40 81          	movaps %xmm0,-0x7f(%rax)
  40a7aa:	89 95 24 ff ff ff    	mov    %edx,-0xdc(%rbp)
  40a7b0:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  40a7b7:	00 00 00 00 
  40a7bb:	48 c7 85 38 ff ff ff 	movq   $0x412682,-0xc8(%rbp)
  40a7c2:	82 26 41 00 
  40a7c6:	48 c7 85 40 ff ff ff 	movq   $0x4f,-0xc0(%rbp)
  40a7cd:	4f 00 00 00 
  40a7d1:	48 c7 85 48 ff ff ff 	movq   $0x412c90,-0xb8(%rbp)
  40a7d8:	90 2c 41 00 
  40a7dc:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  40a7e3:	48 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%rcx
  40a7ea:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
  40a7f1:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
  40a7f8:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a7fe:	e8 fa 05 00 00       	callq  40adfd <_d_assert_msg>
  40a803:	c9                   	leaveq 
  40a804:	c3                   	retq   

000000000040a805 <_adDupT>:
  40a805:	55                   	push   %rbp
  40a806:	48 89 e5             	mov    %rsp,%rbp
  40a809:	48 83 ec 40          	sub    $0x40,%rsp
  40a80d:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40a811:	48 89 d0             	mov    %rdx,%rax
  40a814:	48 89 ca             	mov    %rcx,%rdx
  40a817:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40a81b:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40a81f:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a826:	00 
  40a827:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40a82e:	00 
  40a82f:	48 c7 45 f0 44 00 00 	movq   $0x44,-0x10(%rbp)
  40a836:	00 
  40a837:	48 c7 45 f8 e0 2c 41 	movq   $0x412ce0,-0x8(%rbp)
  40a83e:	00 
  40a83f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a843:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a847:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a84b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a84f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a855:	e8 a3 05 00 00       	callq  40adfd <_d_assert_msg>
  40a85a:	c9                   	leaveq 
  40a85b:	c3                   	retq   

000000000040a85c <gc_init>:
  40a85c:	55                   	push   %rbp
  40a85d:	48 89 e5             	mov    %rsp,%rbp
  40a860:	48 83 ec 20          	sub    $0x20,%rsp
  40a864:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a86b:	00 
  40a86c:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40a873:	00 
  40a874:	48 c7 45 f0 2f 00 00 	movq   $0x2f,-0x10(%rbp)
  40a87b:	00 
  40a87c:	48 c7 45 f8 28 2d 41 	movq   $0x412d28,-0x8(%rbp)
  40a883:	00 
  40a884:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a888:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a88c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a890:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a894:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a89a:	e8 5e 05 00 00       	callq  40adfd <_d_assert_msg>
  40a89f:	c9                   	leaveq 
  40a8a0:	c3                   	retq   

000000000040a8a1 <gc_term>:
  40a8a1:	55                   	push   %rbp
  40a8a2:	48 89 e5             	mov    %rsp,%rbp
  40a8a5:	48 83 ec 20          	sub    $0x20,%rsp
  40a8a9:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a8b0:	00 
  40a8b1:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40a8b8:	00 
  40a8b9:	48 c7 45 f0 2f 00 00 	movq   $0x2f,-0x10(%rbp)
  40a8c0:	00 
  40a8c1:	48 c7 45 f8 58 2d 41 	movq   $0x412d58,-0x8(%rbp)
  40a8c8:	00 
  40a8c9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a8cd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a8d1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a8d5:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a8d9:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a8df:	e8 19 05 00 00       	callq  40adfd <_d_assert_msg>
  40a8e4:	c9                   	leaveq 
  40a8e5:	c3                   	retq   

000000000040a8e6 <gc_enable>:
  40a8e6:	55                   	push   %rbp
  40a8e7:	48 89 e5             	mov    %rsp,%rbp
  40a8ea:	48 83 ec 20          	sub    $0x20,%rsp
  40a8ee:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a8f5:	00 
  40a8f6:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40a8fd:	00 
  40a8fe:	48 c7 45 f0 31 00 00 	movq   $0x31,-0x10(%rbp)
  40a905:	00 
  40a906:	48 c7 45 f8 88 2d 41 	movq   $0x412d88,-0x8(%rbp)
  40a90d:	00 
  40a90e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a912:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a916:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a91a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a91e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a924:	e8 d4 04 00 00       	callq  40adfd <_d_assert_msg>
  40a929:	c9                   	leaveq 
  40a92a:	c3                   	retq   

000000000040a92b <gc_disable>:
  40a92b:	55                   	push   %rbp
  40a92c:	48 89 e5             	mov    %rsp,%rbp
  40a92f:	48 83 ec 20          	sub    $0x20,%rsp
  40a933:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a93a:	00 
  40a93b:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40a942:	00 
  40a943:	48 c7 45 f0 32 00 00 	movq   $0x32,-0x10(%rbp)
  40a94a:	00 
  40a94b:	48 c7 45 f8 c0 2d 41 	movq   $0x412dc0,-0x8(%rbp)
  40a952:	00 
  40a953:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a957:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a95b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a95f:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a963:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a969:	e8 8f 04 00 00       	callq  40adfd <_d_assert_msg>
  40a96e:	c9                   	leaveq 
  40a96f:	c3                   	retq   

000000000040a970 <gc_collect>:
  40a970:	55                   	push   %rbp
  40a971:	48 89 e5             	mov    %rsp,%rbp
  40a974:	48 83 ec 20          	sub    $0x20,%rsp
  40a978:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a97f:	00 
  40a980:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40a987:	00 
  40a988:	48 c7 45 f0 32 00 00 	movq   $0x32,-0x10(%rbp)
  40a98f:	00 
  40a990:	48 c7 45 f8 f8 2d 41 	movq   $0x412df8,-0x8(%rbp)
  40a997:	00 
  40a998:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a99c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a9a0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a9a4:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a9a8:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a9ae:	e8 4a 04 00 00       	callq  40adfd <_d_assert_msg>
  40a9b3:	c9                   	leaveq 
  40a9b4:	c3                   	retq   

000000000040a9b5 <gc_getAttr>:
  40a9b5:	55                   	push   %rbp
  40a9b6:	48 89 e5             	mov    %rsp,%rbp
  40a9b9:	48 83 ec 30          	sub    $0x30,%rsp
  40a9bd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a9c1:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40a9c8:	00 
  40a9c9:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40a9d0:	00 
  40a9d1:	48 c7 45 f0 3b 00 00 	movq   $0x3b,-0x10(%rbp)
  40a9d8:	00 
  40a9d9:	48 c7 45 f8 30 2e 41 	movq   $0x412e30,-0x8(%rbp)
  40a9e0:	00 
  40a9e1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a9e5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a9e9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40a9ed:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a9f1:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40a9f7:	e8 01 04 00 00       	callq  40adfd <_d_assert_msg>
  40a9fc:	c9                   	leaveq 
  40a9fd:	c3                   	retq   

000000000040a9fe <gc_setAttr>:
  40a9fe:	55                   	push   %rbp
  40a9ff:	48 89 e5             	mov    %rsp,%rbp
  40aa02:	48 83 ec 30          	sub    $0x30,%rsp
  40aa06:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40aa0a:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  40aa0d:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40aa14:	00 
  40aa15:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40aa1c:	00 
  40aa1d:	48 c7 45 f0 43 00 00 	movq   $0x43,-0x10(%rbp)
  40aa24:	00 
  40aa25:	48 c7 45 f8 70 2e 41 	movq   $0x412e70,-0x8(%rbp)
  40aa2c:	00 
  40aa2d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40aa31:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40aa35:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40aa39:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40aa3d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40aa43:	e8 b5 03 00 00       	callq  40adfd <_d_assert_msg>
  40aa48:	c9                   	leaveq 
  40aa49:	c3                   	retq   

000000000040aa4a <gc_clrAttr>:
  40aa4a:	55                   	push   %rbp
  40aa4b:	48 89 e5             	mov    %rsp,%rbp
  40aa4e:	48 83 ec 30          	sub    $0x30,%rsp
  40aa52:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40aa56:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  40aa59:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40aa60:	00 
  40aa61:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40aa68:	00 
  40aa69:	48 c7 45 f0 43 00 00 	movq   $0x43,-0x10(%rbp)
  40aa70:	00 
  40aa71:	48 c7 45 f8 b8 2e 41 	movq   $0x412eb8,-0x8(%rbp)
  40aa78:	00 
  40aa79:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40aa7d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40aa81:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40aa85:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40aa89:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40aa8f:	e8 69 03 00 00       	callq  40adfd <_d_assert_msg>
  40aa94:	c9                   	leaveq 
  40aa95:	c3                   	retq   

000000000040aa96 <gc_malloc>:
  40aa96:	55                   	push   %rbp
  40aa97:	48 89 e5             	mov    %rsp,%rbp
  40aa9a:	48 83 ec 30          	sub    $0x30,%rsp
  40aa9e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40aaa2:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  40aaa5:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40aaac:	00 
  40aaad:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40aab4:	00 
  40aab5:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40aabc:	00 
  40aabd:	48 c7 45 f8 00 2f 41 	movq   $0x412f00,-0x8(%rbp)
  40aac4:	00 
  40aac5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40aac9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40aacd:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40aad1:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40aad5:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40aadb:	e8 1d 03 00 00       	callq  40adfd <_d_assert_msg>
  40aae0:	c9                   	leaveq 
  40aae1:	c3                   	retq   

000000000040aae2 <gc_calloc>:
  40aae2:	55                   	push   %rbp
  40aae3:	48 89 e5             	mov    %rsp,%rbp
  40aae6:	48 83 ec 30          	sub    $0x30,%rsp
  40aaea:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40aaee:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  40aaf1:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40aaf8:	00 
  40aaf9:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40ab00:	00 
  40ab01:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40ab08:	00 
  40ab09:	48 c7 45 f8 50 2f 41 	movq   $0x412f50,-0x8(%rbp)
  40ab10:	00 
  40ab11:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ab15:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ab19:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ab1d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ab21:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ab27:	e8 d1 02 00 00       	callq  40adfd <_d_assert_msg>
  40ab2c:	c9                   	leaveq 
  40ab2d:	c3                   	retq   

000000000040ab2e <gc_realloc>:
  40ab2e:	55                   	push   %rbp
  40ab2f:	48 89 e5             	mov    %rsp,%rbp
  40ab32:	48 83 ec 40          	sub    $0x40,%rsp
  40ab36:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40ab3a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40ab3e:	89 55 cc             	mov    %edx,-0x34(%rbp)
  40ab41:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ab48:	00 
  40ab49:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40ab50:	00 
  40ab51:	48 c7 45 f0 54 00 00 	movq   $0x54,-0x10(%rbp)
  40ab58:	00 
  40ab59:	48 c7 45 f8 a0 2f 41 	movq   $0x412fa0,-0x8(%rbp)
  40ab60:	00 
  40ab61:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ab65:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ab69:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ab6d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ab71:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ab77:	e8 81 02 00 00       	callq  40adfd <_d_assert_msg>
  40ab7c:	c9                   	leaveq 
  40ab7d:	c3                   	retq   

000000000040ab7e <gc_extend>:
  40ab7e:	55                   	push   %rbp
  40ab7f:	48 89 e5             	mov    %rsp,%rbp
  40ab82:	48 83 ec 40          	sub    $0x40,%rsp
  40ab86:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40ab8a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40ab8e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40ab92:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ab99:	00 
  40ab9a:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40aba1:	00 
  40aba2:	48 c7 45 f0 52 00 00 	movq   $0x52,-0x10(%rbp)
  40aba9:	00 
  40abaa:	48 c7 45 f8 f8 2f 41 	movq   $0x412ff8,-0x8(%rbp)
  40abb1:	00 
  40abb2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40abb6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40abba:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40abbe:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40abc2:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40abc8:	e8 30 02 00 00       	callq  40adfd <_d_assert_msg>
  40abcd:	c9                   	leaveq 
  40abce:	c3                   	retq   

000000000040abcf <gc_free>:
  40abcf:	55                   	push   %rbp
  40abd0:	48 89 e5             	mov    %rsp,%rbp
  40abd3:	48 83 ec 30          	sub    $0x30,%rsp
  40abd7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40abdb:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40abe2:	00 
  40abe3:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40abea:	00 
  40abeb:	48 c7 45 f0 38 00 00 	movq   $0x38,-0x10(%rbp)
  40abf2:	00 
  40abf3:	48 c7 45 f8 50 30 41 	movq   $0x413050,-0x8(%rbp)
  40abfa:	00 
  40abfb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40abff:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ac03:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ac07:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ac0b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ac11:	e8 e7 01 00 00       	callq  40adfd <_d_assert_msg>
  40ac16:	c9                   	leaveq 
  40ac17:	c3                   	retq   

000000000040ac18 <gc_sizeOf>:
  40ac18:	55                   	push   %rbp
  40ac19:	48 89 e5             	mov    %rsp,%rbp
  40ac1c:	48 83 ec 30          	sub    $0x30,%rsp
  40ac20:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40ac24:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ac2b:	00 
  40ac2c:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40ac33:	00 
  40ac34:	48 c7 45 f0 3c 00 00 	movq   $0x3c,-0x10(%rbp)
  40ac3b:	00 
  40ac3c:	48 c7 45 f8 90 30 41 	movq   $0x413090,-0x8(%rbp)
  40ac43:	00 
  40ac44:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ac48:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ac4c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ac50:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ac54:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ac5a:	e8 9e 01 00 00       	callq  40adfd <_d_assert_msg>
  40ac5f:	c9                   	leaveq 
  40ac60:	c3                   	retq   

000000000040ac61 <gc_addRoot>:
  40ac61:	55                   	push   %rbp
  40ac62:	48 89 e5             	mov    %rsp,%rbp
  40ac65:	48 83 ec 30          	sub    $0x30,%rsp
  40ac69:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40ac6d:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ac74:	00 
  40ac75:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40ac7c:	00 
  40ac7d:	48 c7 45 f0 3b 00 00 	movq   $0x3b,-0x10(%rbp)
  40ac84:	00 
  40ac85:	48 c7 45 f8 d0 30 41 	movq   $0x4130d0,-0x8(%rbp)
  40ac8c:	00 
  40ac8d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ac91:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ac95:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ac99:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ac9d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40aca3:	e8 55 01 00 00       	callq  40adfd <_d_assert_msg>
  40aca8:	c9                   	leaveq 
  40aca9:	c3                   	retq   

000000000040acaa <gc_addRange>:
  40acaa:	55                   	push   %rbp
  40acab:	48 89 e5             	mov    %rsp,%rbp
  40acae:	48 83 ec 30          	sub    $0x30,%rsp
  40acb2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40acb6:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40acba:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40acc1:	00 
  40acc2:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40acc9:	00 
  40acca:	48 c7 45 f0 47 00 00 	movq   $0x47,-0x10(%rbp)
  40acd1:	00 
  40acd2:	48 c7 45 f8 10 31 41 	movq   $0x413110,-0x8(%rbp)
  40acd9:	00 
  40acda:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40acde:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ace2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ace6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40acea:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40acf0:	e8 08 01 00 00       	callq  40adfd <_d_assert_msg>
  40acf5:	c9                   	leaveq 
  40acf6:	c3                   	retq   

000000000040acf7 <gc_removeRoot>:
  40acf7:	55                   	push   %rbp
  40acf8:	48 89 e5             	mov    %rsp,%rbp
  40acfb:	48 83 ec 30          	sub    $0x30,%rsp
  40acff:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40ad03:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ad0a:	00 
  40ad0b:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40ad12:	00 
  40ad13:	48 c7 45 f0 3e 00 00 	movq   $0x3e,-0x10(%rbp)
  40ad1a:	00 
  40ad1b:	48 c7 45 f8 58 31 41 	movq   $0x413158,-0x8(%rbp)
  40ad22:	00 
  40ad23:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ad27:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ad2b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ad2f:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ad33:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ad39:	e8 bf 00 00 00       	callq  40adfd <_d_assert_msg>
  40ad3e:	c9                   	leaveq 
  40ad3f:	c3                   	retq   

000000000040ad40 <gc_removeRange>:
  40ad40:	55                   	push   %rbp
  40ad41:	48 89 e5             	mov    %rsp,%rbp
  40ad44:	48 83 ec 30          	sub    $0x30,%rsp
  40ad48:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40ad4c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ad53:	00 
  40ad54:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40ad5b:	00 
  40ad5c:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40ad63:	00 
  40ad64:	48 c7 45 f8 98 31 41 	movq   $0x413198,-0x8(%rbp)
  40ad6b:	00 
  40ad6c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ad70:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ad74:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ad78:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ad7c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ad82:	e8 76 00 00 00       	callq  40adfd <_d_assert_msg>
  40ad87:	c9                   	leaveq 
  40ad88:	c3                   	retq   

000000000040ad89 <onCollectResource>:
  40ad89:	55                   	push   %rbp
  40ad8a:	48 89 e5             	mov    %rsp,%rbp
  40ad8d:	48 83 ec 30          	sub    $0x30,%rsp
  40ad91:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40ad95:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ad9c:	00 
  40ad9d:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40ada4:	00 
  40ada5:	48 c7 45 f0 45 00 00 	movq   $0x45,-0x10(%rbp)
  40adac:	00 
  40adad:	48 c7 45 f8 d8 31 41 	movq   $0x4131d8,-0x8(%rbp)
  40adb4:	00 
  40adb5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40adb9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40adbd:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40adc1:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40adc5:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40adcb:	e8 2d 00 00 00       	callq  40adfd <_d_assert_msg>
  40add0:	c9                   	leaveq 
  40add1:	c3                   	retq   

000000000040add2 <_d_assert>:

/**************************************************
 Exception stubs
**************************************************/

void _d_assert( char[] file, uint line )
  40add2:	55                   	push   %rbp
  40add3:	48 89 e5             	mov    %rsp,%rbp
  40add6:	48 83 ec 20          	sub    $0x20,%rsp
  40adda:	89 55 ec             	mov    %edx,-0x14(%rbp)
  40addd:	48 89 f8             	mov    %rdi,%rax
  40ade0:	48 89 f2             	mov    %rsi,%rdx
  40ade3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40ade7:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
{
    onAssertError( file, line );
  40adeb:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40adee:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40adf2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40adf6:	e8 a0 00 00 00       	callq  40ae9b <onAssertError>
}
  40adfb:	c9                   	leaveq 
  40adfc:	c3                   	retq   

000000000040adfd <_d_assert_msg>:

void _d_assert_msg( char[] msg, char[] file, uint line )
  40adfd:	55                   	push   %rbp
  40adfe:	48 89 e5             	mov    %rsp,%rbp
  40ae01:	48 83 ec 30          	sub    $0x30,%rsp
  40ae05:	49 89 d1             	mov    %rdx,%r9
  40ae08:	44 89 45 dc          	mov    %r8d,-0x24(%rbp)
  40ae0c:	48 89 f8             	mov    %rdi,%rax
  40ae0f:	48 89 f2             	mov    %rsi,%rdx
  40ae12:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40ae16:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  40ae1a:	4c 89 c8             	mov    %r9,%rax
  40ae1d:	48 89 ca             	mov    %rcx,%rdx
  40ae20:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40ae24:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
{
    onAssertErrorMsg( file, line, msg );
  40ae28:	8b 55 dc             	mov    -0x24(%rbp),%edx
  40ae2b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40ae2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ae33:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40ae37:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40ae3b:	49 89 c0             	mov    %rax,%r8
  40ae3e:	e8 a1 00 00 00       	callq  40aee4 <onAssertErrorMsg>
}
  40ae43:	c9                   	leaveq 
  40ae44:	c3                   	retq   

000000000040ae45 <_d_array_bounds>:

void _d_array_bounds( char[] file, uint line )
  40ae45:	55                   	push   %rbp
  40ae46:	48 89 e5             	mov    %rsp,%rbp
  40ae49:	48 83 ec 20          	sub    $0x20,%rsp
  40ae4d:	89 55 ec             	mov    %edx,-0x14(%rbp)
  40ae50:	48 89 f8             	mov    %rdi,%rax
  40ae53:	48 89 f2             	mov    %rsi,%rdx
  40ae56:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40ae5a:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
{
    onArrayBoundsError( file, line );
  40ae5e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40ae61:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ae65:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ae69:	e8 cd 00 00 00       	callq  40af3b <onArrayBoundsError>
}
  40ae6e:	c9                   	leaveq 
  40ae6f:	c3                   	retq   

000000000040ae70 <_d_switch_error>:

void _d_switch_error( char[] file, uint line )
  40ae70:	55                   	push   %rbp
  40ae71:	48 89 e5             	mov    %rsp,%rbp
  40ae74:	48 83 ec 20          	sub    $0x20,%rsp
  40ae78:	89 55 ec             	mov    %edx,-0x14(%rbp)
  40ae7b:	48 89 f8             	mov    %rdi,%rax
  40ae7e:	48 89 f2             	mov    %rsi,%rdx
  40ae81:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40ae85:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
{
    onSwitchError( file, line );
  40ae89:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40ae8c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ae90:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ae94:	e8 de 00 00 00       	callq  40af77 <onSwitchError>
}
  40ae99:	c9                   	leaveq 
  40ae9a:	c3                   	retq   

000000000040ae9b <onAssertError>:

private void onAssertError(char[] file, size_t line)
  40ae9b:	55                   	push   %rbp
  40ae9c:	48 89 e5             	mov    %rsp,%rbp
  40ae9f:	48 83 ec 30          	sub    $0x30,%rsp
  40aea3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40aea7:	48 89 f8             	mov    %rdi,%rax
  40aeaa:	48 89 f2             	mov    %rsi,%rdx
  40aead:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40aeb1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
{
	error("assert failed:"); error(file);
  40aeb5:	48 c7 45 f0 0e 00 00 	movq   $0xe,-0x10(%rbp)
  40aebc:	00 
  40aebd:	48 c7 45 f8 1e 32 41 	movq   $0x41321e,-0x8(%rbp)
  40aec4:	00 
  40aec5:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40aec9:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40aecd:	e8 9e 2c 00 00       	callq  40db70 <_D4user7syscall5errorFAaZv>
  40aed2:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40aed6:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40aeda:	e8 91 2c 00 00       	callq  40db70 <_D4user7syscall5errorFAaZv>
	//kprintfln!("Error in {}, line {}: assertion failed.")(file, line);
	asm { l: hlt; jmp l; }
  40aedf:	f4                   	hlt    
  40aee0:	eb fd                	jmp    40aedf <onAssertError+0x44>
}
  40aee2:	c9                   	leaveq 
  40aee3:	c3                   	retq   

000000000040aee4 <onAssertErrorMsg>:

private void onAssertErrorMsg(char[] file, size_t line, char[] msg)
  40aee4:	55                   	push   %rbp
  40aee5:	48 89 e5             	mov    %rsp,%rbp
  40aee8:	48 83 ec 40          	sub    $0x40,%rsp
  40aeec:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40aef0:	48 89 f8             	mov    %rdi,%rax
  40aef3:	48 89 f2             	mov    %rsi,%rdx
  40aef6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40aefa:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40aefe:	48 89 c8             	mov    %rcx,%rax
  40af01:	4c 89 c2             	mov    %r8,%rdx
  40af04:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40af08:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
{
	//kprintfln!("Error in {}, line {}: assertion failed: \"{}\"")(file, line, msg);

	error("assert failed:"); error(file);
  40af0c:	48 c7 45 f0 0e 00 00 	movq   $0xe,-0x10(%rbp)
  40af13:	00 
  40af14:	48 c7 45 f8 1e 32 41 	movq   $0x41321e,-0x8(%rbp)
  40af1b:	00 
  40af1c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40af20:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40af24:	e8 47 2c 00 00       	callq  40db70 <_D4user7syscall5errorFAaZv>
  40af29:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40af2d:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40af31:	e8 3a 2c 00 00       	callq  40db70 <_D4user7syscall5errorFAaZv>
	asm { l: hlt; jmp l; }
  40af36:	f4                   	hlt    
  40af37:	eb fd                	jmp    40af36 <onAssertErrorMsg+0x52>
}
  40af39:	c9                   	leaveq 
  40af3a:	c3                   	retq   

000000000040af3b <onArrayBoundsError>:

private void onArrayBoundsError(char[] file, size_t line)
  40af3b:	55                   	push   %rbp
  40af3c:	48 89 e5             	mov    %rsp,%rbp
  40af3f:	48 83 ec 30          	sub    $0x30,%rsp
  40af43:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40af47:	48 89 f8             	mov    %rdi,%rax
  40af4a:	48 89 f2             	mov    %rsi,%rdx
  40af4d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40af51:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
{
	//kprintfln!("Error in {}, line {}: array index out of bounds.")(file, line);
	error("array index out of bounds:");
  40af55:	48 c7 45 f0 1a 00 00 	movq   $0x1a,-0x10(%rbp)
  40af5c:	00 
  40af5d:	48 c7 45 f8 2d 32 41 	movq   $0x41322d,-0x8(%rbp)
  40af64:	00 
  40af65:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40af69:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40af6d:	e8 fe 2b 00 00       	callq  40db70 <_D4user7syscall5errorFAaZv>
	asm { l: hlt; jmp l; }
  40af72:	f4                   	hlt    
  40af73:	eb fd                	jmp    40af72 <onArrayBoundsError+0x37>
}
  40af75:	c9                   	leaveq 
  40af76:	c3                   	retq   

000000000040af77 <onSwitchError>:

private void onSwitchError(char[] file, size_t line)
  40af77:	55                   	push   %rbp
  40af78:	48 89 e5             	mov    %rsp,%rbp
  40af7b:	48 83 ec 30          	sub    $0x30,%rsp
  40af7f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40af83:	48 89 f8             	mov    %rdi,%rax
  40af86:	48 89 f2             	mov    %rsi,%rdx
  40af89:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40af8d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
{
	//kprintfln!("Error in {}, line {}: switch has no case or default to handle the switched-upon value.")(file, line);
	error("switch error:"); error(file);
  40af91:	48 c7 45 f0 0d 00 00 	movq   $0xd,-0x10(%rbp)
  40af98:	00 
  40af99:	48 c7 45 f8 48 32 41 	movq   $0x413248,-0x8(%rbp)
  40afa0:	00 
  40afa1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40afa5:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40afa9:	e8 c2 2b 00 00       	callq  40db70 <_D4user7syscall5errorFAaZv>
  40afae:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40afb2:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40afb6:	e8 b5 2b 00 00       	callq  40db70 <_D4user7syscall5errorFAaZv>
  asm { l: hlt; jmp l; }
  40afbb:	f4                   	hlt    
  40afbc:	eb fd                	jmp    40afbb <onSwitchError+0x44>
}
  40afbe:	c9                   	leaveq 
  40afbf:	c3                   	retq   

000000000040afc0 <onFinalizeError>:
  40afc0:	55                   	push   %rbp
  40afc1:	48 89 e5             	mov    %rsp,%rbp
  40afc4:	48 83 ec 30          	sub    $0x30,%rsp
  40afc8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40afcc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)

private void onSwitchError(char[] file, size_t line)
{
	//kprintfln!("Error in {}, line {}: switch has no case or default to handle the switched-upon value.")(file, line);
	error("switch error:"); error(file);
  asm { l: hlt; jmp l; }
  40afd0:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40afd7:	00 
  40afd8:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40afdf:	00 
  40afe0:	48 c7 45 f0 55 00 00 	movq   $0x55,-0x10(%rbp)
  40afe7:	00 
  40afe8:	48 c7 45 f8 58 32 41 	movq   $0x413258,-0x8(%rbp)
  40afef:	00 
  40aff0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40aff4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40aff8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40affc:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b000:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b006:	e8 f2 fd ff ff       	callq  40adfd <_d_assert_msg>
  40b00b:	c9                   	leaveq 
  40b00c:	c3                   	retq   

000000000040b00d <onOutOfMemoryError>:
  40b00d:	55                   	push   %rbp
  40b00e:	48 89 e5             	mov    %rsp,%rbp
  40b011:	48 83 ec 20          	sub    $0x20,%rsp
  40b015:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b01c:	00 
  40b01d:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b024:	00 
  40b025:	48 c7 45 f0 3a 00 00 	movq   $0x3a,-0x10(%rbp)
  40b02c:	00 
  40b02d:	48 c7 45 f8 b0 32 41 	movq   $0x4132b0,-0x8(%rbp)
  40b034:	00 
  40b035:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b039:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b03d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b041:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b045:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b04b:	e8 ad fd ff ff       	callq  40adfd <_d_assert_msg>
  40b050:	c9                   	leaveq 
  40b051:	c3                   	retq   

000000000040b052 <onUnicodeError>:
  40b052:	55                   	push   %rbp
  40b053:	48 89 e5             	mov    %rsp,%rbp
  40b056:	48 83 ec 40          	sub    $0x40,%rsp
  40b05a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b05e:	48 89 f8             	mov    %rdi,%rax
  40b061:	48 89 f2             	mov    %rsi,%rdx
  40b064:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b068:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40b06c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b073:	00 
  40b074:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b07b:	00 
  40b07c:	48 c7 45 f0 4e 00 00 	movq   $0x4e,-0x10(%rbp)
  40b083:	00 
  40b084:	48 c7 45 f8 f0 32 41 	movq   $0x4132f0,-0x8(%rbp)
  40b08b:	00 
  40b08c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b090:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b094:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b098:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b09c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b0a2:	e8 56 fd ff ff       	callq  40adfd <_d_assert_msg>
  40b0a7:	c9                   	leaveq 
  40b0a8:	c3                   	retq   

000000000040b0a9 <_gdc_cleanupException>:
  40b0a9:	55                   	push   %rbp
  40b0aa:	48 89 e5             	mov    %rsp,%rbp
  40b0ad:	48 83 ec 20          	sub    $0x20,%rsp
  40b0b1:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b0b8:	00 
  40b0b9:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b0c0:	00 
  40b0c1:	48 c7 45 f0 3d 00 00 	movq   $0x3d,-0x10(%rbp)
  40b0c8:	00 
  40b0c9:	48 c7 45 f8 40 33 41 	movq   $0x413340,-0x8(%rbp)
  40b0d0:	00 
  40b0d1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b0d5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b0d9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b0dd:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b0e1:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b0e7:	e8 11 fd ff ff       	callq  40adfd <_d_assert_msg>
  40b0ec:	c9                   	leaveq 
  40b0ed:	c3                   	retq   

000000000040b0ee <_d_throw>:
  40b0ee:	55                   	push   %rbp
  40b0ef:	48 89 e5             	mov    %rsp,%rbp
  40b0f2:	48 83 ec 30          	sub    $0x30,%rsp
  40b0f6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b0fa:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b101:	00 
  40b102:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b109:	00 
  40b10a:	48 c7 45 f0 3a 00 00 	movq   $0x3a,-0x10(%rbp)
  40b111:	00 
  40b112:	48 c7 45 f8 80 33 41 	movq   $0x413380,-0x8(%rbp)
  40b119:	00 
  40b11a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b11e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b122:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b126:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b12a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b130:	e8 c8 fc ff ff       	callq  40adfd <_d_assert_msg>
  40b135:	c9                   	leaveq 
  40b136:	c3                   	retq   

000000000040b137 <__gdc_personality_v0>:
  40b137:	55                   	push   %rbp
  40b138:	48 89 e5             	mov    %rsp,%rbp
  40b13b:	48 83 ec 20          	sub    $0x20,%rsp
  40b13f:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b146:	00 
  40b147:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b14e:	00 
  40b14f:	48 c7 45 f0 3b 00 00 	movq   $0x3b,-0x10(%rbp)
  40b156:	00 
  40b157:	48 c7 45 f8 c0 33 41 	movq   $0x4133c0,-0x8(%rbp)
  40b15e:	00 
  40b15f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b163:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b167:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b16b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b16f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b175:	e8 83 fc ff ff       	callq  40adfd <_d_assert_msg>
  40b17a:	c9                   	leaveq 
  40b17b:	c3                   	retq   

000000000040b17c <_Unwind_RaiseException>:
  40b17c:	55                   	push   %rbp
  40b17d:	48 89 e5             	mov    %rsp,%rbp
  40b180:	48 83 ec 20          	sub    $0x20,%rsp
  40b184:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b18b:	00 
  40b18c:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b193:	00 
  40b194:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40b19b:	00 
  40b19c:	48 c7 45 f8 00 34 41 	movq   $0x413400,-0x8(%rbp)
  40b1a3:	00 
  40b1a4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b1a8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b1ac:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b1b0:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b1b4:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b1ba:	e8 3e fc ff ff       	callq  40adfd <_d_assert_msg>
  40b1bf:	c9                   	leaveq 
  40b1c0:	c3                   	retq   

000000000040b1c1 <_Unwind_ForcedUnwind>:
  40b1c1:	55                   	push   %rbp
  40b1c2:	48 89 e5             	mov    %rsp,%rbp
  40b1c5:	48 83 ec 20          	sub    $0x20,%rsp
  40b1c9:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b1d0:	00 
  40b1d1:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b1d8:	00 
  40b1d9:	48 c7 45 f0 3d 00 00 	movq   $0x3d,-0x10(%rbp)
  40b1e0:	00 
  40b1e1:	48 c7 45 f8 40 34 41 	movq   $0x413440,-0x8(%rbp)
  40b1e8:	00 
  40b1e9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b1ed:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b1f1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b1f5:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b1f9:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b1ff:	e8 f9 fb ff ff       	callq  40adfd <_d_assert_msg>
  40b204:	c9                   	leaveq 
  40b205:	c3                   	retq   

000000000040b206 <_Unwind_DeleteException>:
  40b206:	55                   	push   %rbp
  40b207:	48 89 e5             	mov    %rsp,%rbp
  40b20a:	48 83 ec 20          	sub    $0x20,%rsp
  40b20e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b215:	00 
  40b216:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b21d:	00 
  40b21e:	48 c7 45 f0 40 00 00 	movq   $0x40,-0x10(%rbp)
  40b225:	00 
  40b226:	48 c7 45 f8 80 34 41 	movq   $0x413480,-0x8(%rbp)
  40b22d:	00 
  40b22e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b232:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b236:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b23a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b23e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b244:	e8 b4 fb ff ff       	callq  40adfd <_d_assert_msg>
  40b249:	c9                   	leaveq 
  40b24a:	c3                   	retq   

000000000040b24b <_Unwind_Resume>:
  40b24b:	55                   	push   %rbp
  40b24c:	48 89 e5             	mov    %rsp,%rbp
  40b24f:	48 83 ec 20          	sub    $0x20,%rsp
  40b253:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b25a:	00 
  40b25b:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b262:	00 
  40b263:	48 c7 45 f0 36 00 00 	movq   $0x36,-0x10(%rbp)
  40b26a:	00 
  40b26b:	48 c7 45 f8 c8 34 41 	movq   $0x4134c8,-0x8(%rbp)
  40b272:	00 
  40b273:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b277:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b27b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b27f:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b283:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b289:	e8 6f fb ff ff       	callq  40adfd <_d_assert_msg>
  40b28e:	c9                   	leaveq 
  40b28f:	c3                   	retq   

000000000040b290 <_Unwind_Resume_or_Rethrow>:
  40b290:	55                   	push   %rbp
  40b291:	48 89 e5             	mov    %rsp,%rbp
  40b294:	48 83 ec 20          	sub    $0x20,%rsp
  40b298:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b29f:	00 
  40b2a0:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b2a7:	00 
  40b2a8:	48 c7 45 f0 42 00 00 	movq   $0x42,-0x10(%rbp)
  40b2af:	00 
  40b2b0:	48 c7 45 f8 00 35 41 	movq   $0x413500,-0x8(%rbp)
  40b2b7:	00 
  40b2b8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b2bc:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b2c0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b2c4:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b2c8:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b2ce:	e8 2a fb ff ff       	callq  40adfd <_d_assert_msg>
  40b2d3:	c9                   	leaveq 
  40b2d4:	c3                   	retq   

000000000040b2d5 <_Unwind_Backtrace>:
  40b2d5:	55                   	push   %rbp
  40b2d6:	48 89 e5             	mov    %rsp,%rbp
  40b2d9:	48 83 ec 20          	sub    $0x20,%rsp
  40b2dd:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b2e4:	00 
  40b2e5:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b2ec:	00 
  40b2ed:	48 c7 45 f0 3a 00 00 	movq   $0x3a,-0x10(%rbp)
  40b2f4:	00 
  40b2f5:	48 c7 45 f8 48 35 41 	movq   $0x413548,-0x8(%rbp)
  40b2fc:	00 
  40b2fd:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b301:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b305:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b309:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b30d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b313:	e8 e5 fa ff ff       	callq  40adfd <_d_assert_msg>
  40b318:	c9                   	leaveq 
  40b319:	c3                   	retq   

000000000040b31a <_Unwind_GetGR>:
  40b31a:	55                   	push   %rbp
  40b31b:	48 89 e5             	mov    %rsp,%rbp
  40b31e:	48 83 ec 20          	sub    $0x20,%rsp
  40b322:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b329:	00 
  40b32a:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b331:	00 
  40b332:	48 c7 45 f0 36 00 00 	movq   $0x36,-0x10(%rbp)
  40b339:	00 
  40b33a:	48 c7 45 f8 88 35 41 	movq   $0x413588,-0x8(%rbp)
  40b341:	00 
  40b342:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b346:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b34a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b34e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b352:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b358:	e8 a0 fa ff ff       	callq  40adfd <_d_assert_msg>
  40b35d:	c9                   	leaveq 
  40b35e:	c3                   	retq   

000000000040b35f <_Unwind_SetGR>:
  40b35f:	55                   	push   %rbp
  40b360:	48 89 e5             	mov    %rsp,%rbp
  40b363:	48 83 ec 20          	sub    $0x20,%rsp
  40b367:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b36e:	00 
  40b36f:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b376:	00 
  40b377:	48 c7 45 f0 36 00 00 	movq   $0x36,-0x10(%rbp)
  40b37e:	00 
  40b37f:	48 c7 45 f8 c0 35 41 	movq   $0x4135c0,-0x8(%rbp)
  40b386:	00 
  40b387:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b38b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b38f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b393:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b397:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b39d:	e8 5b fa ff ff       	callq  40adfd <_d_assert_msg>
  40b3a2:	c9                   	leaveq 
  40b3a3:	c3                   	retq   

000000000040b3a4 <_Unwind_GetIP>:
  40b3a4:	55                   	push   %rbp
  40b3a5:	48 89 e5             	mov    %rsp,%rbp
  40b3a8:	48 83 ec 20          	sub    $0x20,%rsp
  40b3ac:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b3b3:	00 
  40b3b4:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b3bb:	00 
  40b3bc:	48 c7 45 f0 36 00 00 	movq   $0x36,-0x10(%rbp)
  40b3c3:	00 
  40b3c4:	48 c7 45 f8 f8 35 41 	movq   $0x4135f8,-0x8(%rbp)
  40b3cb:	00 
  40b3cc:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b3d0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b3d4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b3d8:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b3dc:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b3e2:	e8 16 fa ff ff       	callq  40adfd <_d_assert_msg>
  40b3e7:	c9                   	leaveq 
  40b3e8:	c3                   	retq   

000000000040b3e9 <_Unwind_SetIP>:
  40b3e9:	55                   	push   %rbp
  40b3ea:	48 89 e5             	mov    %rsp,%rbp
  40b3ed:	48 83 ec 20          	sub    $0x20,%rsp
  40b3f1:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b3f8:	00 
  40b3f9:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b400:	00 
  40b401:	48 c7 45 f0 36 00 00 	movq   $0x36,-0x10(%rbp)
  40b408:	00 
  40b409:	48 c7 45 f8 30 36 41 	movq   $0x413630,-0x8(%rbp)
  40b410:	00 
  40b411:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b415:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b419:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b41d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b421:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b427:	e8 d1 f9 ff ff       	callq  40adfd <_d_assert_msg>
  40b42c:	c9                   	leaveq 
  40b42d:	c3                   	retq   

000000000040b42e <_Unwind_GetCFA>:
  40b42e:	55                   	push   %rbp
  40b42f:	48 89 e5             	mov    %rsp,%rbp
  40b432:	48 83 ec 20          	sub    $0x20,%rsp
  40b436:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b43d:	00 
  40b43e:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b445:	00 
  40b446:	48 c7 45 f0 37 00 00 	movq   $0x37,-0x10(%rbp)
  40b44d:	00 
  40b44e:	48 c7 45 f8 68 36 41 	movq   $0x413668,-0x8(%rbp)
  40b455:	00 
  40b456:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b45a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b45e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b462:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b466:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b46c:	e8 8c f9 ff ff       	callq  40adfd <_d_assert_msg>
  40b471:	c9                   	leaveq 
  40b472:	c3                   	retq   

000000000040b473 <_Unwind_GetLanguageSpecificData>:
  40b473:	55                   	push   %rbp
  40b474:	48 89 e5             	mov    %rsp,%rbp
  40b477:	48 83 ec 20          	sub    $0x20,%rsp
  40b47b:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b482:	00 
  40b483:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b48a:	00 
  40b48b:	48 c7 45 f0 49 00 00 	movq   $0x49,-0x10(%rbp)
  40b492:	00 
  40b493:	48 c7 45 f8 a0 36 41 	movq   $0x4136a0,-0x8(%rbp)
  40b49a:	00 
  40b49b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b49f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b4a3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b4a7:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b4ab:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b4b1:	e8 47 f9 ff ff       	callq  40adfd <_d_assert_msg>
  40b4b6:	c9                   	leaveq 
  40b4b7:	c3                   	retq   

000000000040b4b8 <_Unwind_GetRegionStart>:
  40b4b8:	55                   	push   %rbp
  40b4b9:	48 89 e5             	mov    %rsp,%rbp
  40b4bc:	48 83 ec 20          	sub    $0x20,%rsp
  40b4c0:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b4c7:	00 
  40b4c8:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b4cf:	00 
  40b4d0:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40b4d7:	00 
  40b4d8:	48 c7 45 f8 f0 36 41 	movq   $0x4136f0,-0x8(%rbp)
  40b4df:	00 
  40b4e0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b4e4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b4e8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b4ec:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b4f0:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b4f6:	e8 02 f9 ff ff       	callq  40adfd <_d_assert_msg>
  40b4fb:	c9                   	leaveq 
  40b4fc:	c3                   	retq   

000000000040b4fd <_Unwind_SjLj_RaiseException>:
  40b4fd:	55                   	push   %rbp
  40b4fe:	48 89 e5             	mov    %rsp,%rbp
  40b501:	48 83 ec 20          	sub    $0x20,%rsp
  40b505:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b50c:	00 
  40b50d:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b514:	00 
  40b515:	48 c7 45 f0 43 00 00 	movq   $0x43,-0x10(%rbp)
  40b51c:	00 
  40b51d:	48 c7 45 f8 30 37 41 	movq   $0x413730,-0x8(%rbp)
  40b524:	00 
  40b525:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b529:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b52d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b531:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b535:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b53b:	e8 bd f8 ff ff       	callq  40adfd <_d_assert_msg>
  40b540:	c9                   	leaveq 
  40b541:	c3                   	retq   

000000000040b542 <_Unwind_SjLj_ForcedUnwind>:
  40b542:	55                   	push   %rbp
  40b543:	48 89 e5             	mov    %rsp,%rbp
  40b546:	48 83 ec 20          	sub    $0x20,%rsp
  40b54a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b551:	00 
  40b552:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b559:	00 
  40b55a:	48 c7 45 f0 41 00 00 	movq   $0x41,-0x10(%rbp)
  40b561:	00 
  40b562:	48 c7 45 f8 78 37 41 	movq   $0x413778,-0x8(%rbp)
  40b569:	00 
  40b56a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b56e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b572:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b576:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b57a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b580:	e8 78 f8 ff ff       	callq  40adfd <_d_assert_msg>
  40b585:	c9                   	leaveq 
  40b586:	c3                   	retq   

000000000040b587 <_Unwind_SjLj_Resume>:
  40b587:	55                   	push   %rbp
  40b588:	48 89 e5             	mov    %rsp,%rbp
  40b58b:	48 83 ec 20          	sub    $0x20,%rsp
  40b58f:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b596:	00 
  40b597:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b59e:	00 
  40b59f:	48 c7 45 f0 3c 00 00 	movq   $0x3c,-0x10(%rbp)
  40b5a6:	00 
  40b5a7:	48 c7 45 f8 c0 37 41 	movq   $0x4137c0,-0x8(%rbp)
  40b5ae:	00 
  40b5af:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b5b3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b5b7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b5bb:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b5bf:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b5c5:	e8 33 f8 ff ff       	callq  40adfd <_d_assert_msg>
  40b5ca:	c9                   	leaveq 
  40b5cb:	c3                   	retq   

000000000040b5cc <_Unwind_GetDataRelBase>:
  40b5cc:	55                   	push   %rbp
  40b5cd:	48 89 e5             	mov    %rsp,%rbp
  40b5d0:	48 83 ec 20          	sub    $0x20,%rsp
  40b5d4:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b5db:	00 
  40b5dc:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b5e3:	00 
  40b5e4:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40b5eb:	00 
  40b5ec:	48 c7 45 f8 00 38 41 	movq   $0x413800,-0x8(%rbp)
  40b5f3:	00 
  40b5f4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b5f8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b5fc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b600:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b604:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b60a:	e8 ee f7 ff ff       	callq  40adfd <_d_assert_msg>
  40b60f:	c9                   	leaveq 
  40b610:	c3                   	retq   

000000000040b611 <_Unwind_GetTextRelBase>:
  40b611:	55                   	push   %rbp
  40b612:	48 89 e5             	mov    %rsp,%rbp
  40b615:	48 83 ec 20          	sub    $0x20,%rsp
  40b619:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b620:	00 
  40b621:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b628:	00 
  40b629:	48 c7 45 f0 3f 00 00 	movq   $0x3f,-0x10(%rbp)
  40b630:	00 
  40b631:	48 c7 45 f8 40 38 41 	movq   $0x413840,-0x8(%rbp)
  40b638:	00 
  40b639:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b63d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b641:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b645:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b649:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b64f:	e8 a9 f7 ff ff       	callq  40adfd <_d_assert_msg>
  40b654:	c9                   	leaveq 
  40b655:	c3                   	retq   

000000000040b656 <size_of_encoded_value>:
  40b656:	55                   	push   %rbp
  40b657:	48 89 e5             	mov    %rsp,%rbp
  40b65a:	48 83 ec 30          	sub    $0x30,%rsp
  40b65e:	40 88 7d df          	mov    %dil,-0x21(%rbp)
  40b662:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b669:	00 
  40b66a:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b671:	00 
  40b672:	48 c7 45 f0 4c 00 00 	movq   $0x4c,-0x10(%rbp)
  40b679:	00 
  40b67a:	48 c7 45 f8 80 38 41 	movq   $0x413880,-0x8(%rbp)
  40b681:	00 
  40b682:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b686:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b68a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b68e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b692:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b698:	e8 60 f7 ff ff       	callq  40adfd <_d_assert_msg>
  40b69d:	c9                   	leaveq 
  40b69e:	c3                   	retq   

000000000040b69f <base_of_encoded_value>:
  40b69f:	55                   	push   %rbp
  40b6a0:	48 89 e5             	mov    %rsp,%rbp
  40b6a3:	48 83 ec 20          	sub    $0x20,%rsp
  40b6a7:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b6ae:	00 
  40b6af:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b6b6:	00 
  40b6b7:	48 c7 45 f0 3e 00 00 	movq   $0x3e,-0x10(%rbp)
  40b6be:	00 
  40b6bf:	48 c7 45 f8 d0 38 41 	movq   $0x4138d0,-0x8(%rbp)
  40b6c6:	00 
  40b6c7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b6cb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b6cf:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b6d3:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b6d7:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b6dd:	e8 1b f7 ff ff       	callq  40adfd <_d_assert_msg>
  40b6e2:	c9                   	leaveq 
  40b6e3:	c3                   	retq   

000000000040b6e4 <read_uleb128>:
  40b6e4:	55                   	push   %rbp
  40b6e5:	48 89 e5             	mov    %rsp,%rbp
  40b6e8:	48 83 ec 20          	sub    $0x20,%rsp
  40b6ec:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b6f3:	00 
  40b6f4:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b6fb:	00 
  40b6fc:	48 c7 45 f0 34 00 00 	movq   $0x34,-0x10(%rbp)
  40b703:	00 
  40b704:	48 c7 45 f8 10 39 41 	movq   $0x413910,-0x8(%rbp)
  40b70b:	00 
  40b70c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b710:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b714:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b718:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b71c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b722:	e8 d6 f6 ff ff       	callq  40adfd <_d_assert_msg>
  40b727:	c9                   	leaveq 
  40b728:	c3                   	retq   

000000000040b729 <read_sleb128>:
  40b729:	55                   	push   %rbp
  40b72a:	48 89 e5             	mov    %rsp,%rbp
  40b72d:	48 83 ec 20          	sub    $0x20,%rsp
  40b731:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b738:	00 
  40b739:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b740:	00 
  40b741:	48 c7 45 f0 34 00 00 	movq   $0x34,-0x10(%rbp)
  40b748:	00 
  40b749:	48 c7 45 f8 48 39 41 	movq   $0x413948,-0x8(%rbp)
  40b750:	00 
  40b751:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b755:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b759:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b75d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b761:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b767:	e8 91 f6 ff ff       	callq  40adfd <_d_assert_msg>
  40b76c:	c9                   	leaveq 
  40b76d:	c3                   	retq   

000000000040b76e <read_encoded_value_with_base>:
  40b76e:	55                   	push   %rbp
  40b76f:	48 89 e5             	mov    %rsp,%rbp
  40b772:	48 83 ec 20          	sub    $0x20,%rsp
  40b776:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b77d:	00 
  40b77e:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b785:	00 
  40b786:	48 c7 45 f0 44 00 00 	movq   $0x44,-0x10(%rbp)
  40b78d:	00 
  40b78e:	48 c7 45 f8 80 39 41 	movq   $0x413980,-0x8(%rbp)
  40b795:	00 
  40b796:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b79a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b79e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b7a2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b7a6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b7ac:	e8 4c f6 ff ff       	callq  40adfd <_d_assert_msg>
  40b7b1:	c9                   	leaveq 
  40b7b2:	c3                   	retq   

000000000040b7b3 <read_encoded_value>:
  40b7b3:	55                   	push   %rbp
  40b7b4:	48 89 e5             	mov    %rsp,%rbp
  40b7b7:	48 83 ec 20          	sub    $0x20,%rsp
  40b7bb:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b7c2:	00 
  40b7c3:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b7ca:	00 
  40b7cb:	48 c7 45 f0 3a 00 00 	movq   $0x3a,-0x10(%rbp)
  40b7d2:	00 
  40b7d3:	48 c7 45 f8 c8 39 41 	movq   $0x4139c8,-0x8(%rbp)
  40b7da:	00 
  40b7db:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b7df:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b7e3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b7e7:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b7eb:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b7f1:	e8 07 f6 ff ff       	callq  40adfd <_d_assert_msg>
  40b7f6:	c9                   	leaveq 
  40b7f7:	c3                   	retq   

000000000040b7f8 <_aaLen>:
  40b7f8:	55                   	push   %rbp
  40b7f9:	48 89 e5             	mov    %rsp,%rbp
  40b7fc:	48 83 ec 30          	sub    $0x30,%rsp
  40b800:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b804:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b80b:	00 
  40b80c:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b813:	00 
  40b814:	48 c7 45 f0 35 00 00 	movq   $0x35,-0x10(%rbp)
  40b81b:	00 
  40b81c:	48 c7 45 f8 08 3a 41 	movq   $0x413a08,-0x8(%rbp)
  40b823:	00 
  40b824:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b828:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b82c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b830:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b834:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b83a:	e8 be f5 ff ff       	callq  40adfd <_d_assert_msg>
  40b83f:	c9                   	leaveq 
  40b840:	c3                   	retq   

000000000040b841 <_aaGetp>:
  40b841:	55                   	push   %rbp
  40b842:	48 89 e5             	mov    %rsp,%rbp
  40b845:	48 83 ec 40          	sub    $0x40,%rsp
  40b849:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b84d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b851:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b855:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  40b859:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b860:	00 
  40b861:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b868:	00 
  40b869:	48 c7 45 f0 64 00 00 	movq   $0x64,-0x10(%rbp)
  40b870:	00 
  40b871:	48 c7 45 f8 40 3a 41 	movq   $0x413a40,-0x8(%rbp)
  40b878:	00 
  40b879:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b87d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b881:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b885:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b889:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b88f:	e8 69 f5 ff ff       	callq  40adfd <_d_assert_msg>
  40b894:	c9                   	leaveq 
  40b895:	c3                   	retq   

000000000040b896 <_aaGetRvaluep>:
  40b896:	55                   	push   %rbp
  40b897:	48 89 e5             	mov    %rsp,%rbp
  40b89a:	48 83 ec 40          	sub    $0x40,%rsp
  40b89e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b8a2:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b8a6:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b8aa:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  40b8ae:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b8b5:	00 
  40b8b6:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b8bd:	00 
  40b8be:	48 c7 45 f0 69 00 00 	movq   $0x69,-0x10(%rbp)
  40b8c5:	00 
  40b8c6:	48 c7 45 f8 a8 3a 41 	movq   $0x413aa8,-0x8(%rbp)
  40b8cd:	00 
  40b8ce:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b8d2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b8d6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b8da:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b8de:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b8e4:	e8 14 f5 ff ff       	callq  40adfd <_d_assert_msg>
  40b8e9:	c9                   	leaveq 
  40b8ea:	c3                   	retq   

000000000040b8eb <_aaInp>:
  40b8eb:	55                   	push   %rbp
  40b8ec:	48 89 e5             	mov    %rsp,%rbp
  40b8ef:	48 83 ec 40          	sub    $0x40,%rsp
  40b8f3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b8f7:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b8fb:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b8ff:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b906:	00 
  40b907:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b90e:	00 
  40b90f:	48 c7 45 f0 50 00 00 	movq   $0x50,-0x10(%rbp)
  40b916:	00 
  40b917:	48 c7 45 f8 18 3b 41 	movq   $0x413b18,-0x8(%rbp)
  40b91e:	00 
  40b91f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b923:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b927:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b92b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b92f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b935:	e8 c3 f4 ff ff       	callq  40adfd <_d_assert_msg>
  40b93a:	c9                   	leaveq 
  40b93b:	c3                   	retq   

000000000040b93c <_aaDelp>:
  40b93c:	55                   	push   %rbp
  40b93d:	48 89 e5             	mov    %rsp,%rbp
  40b940:	48 83 ec 40          	sub    $0x40,%rsp
  40b944:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b948:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b94c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b950:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b957:	00 
  40b958:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b95f:	00 
  40b960:	48 c7 45 f0 50 00 00 	movq   $0x50,-0x10(%rbp)
  40b967:	00 
  40b968:	48 c7 45 f8 70 3b 41 	movq   $0x413b70,-0x8(%rbp)
  40b96f:	00 
  40b970:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b974:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b978:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b97c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b980:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b986:	e8 72 f4 ff ff       	callq  40adfd <_d_assert_msg>
  40b98b:	c9                   	leaveq 
  40b98c:	c3                   	retq   

000000000040b98d <_aaValues>:
  40b98d:	55                   	push   %rbp
  40b98e:	48 89 e5             	mov    %rsp,%rbp
  40b991:	48 83 ec 40          	sub    $0x40,%rsp
  40b995:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40b999:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40b99d:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  40b9a1:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b9a8:	00 
  40b9a9:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b9b0:	00 
  40b9b1:	48 c7 45 f0 59 00 00 	movq   $0x59,-0x10(%rbp)
  40b9b8:	00 
  40b9b9:	48 c7 45 f8 c8 3b 41 	movq   $0x413bc8,-0x8(%rbp)
  40b9c0:	00 
  40b9c1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b9c5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b9c9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40b9cd:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40b9d1:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40b9d7:	e8 21 f4 ff ff       	callq  40adfd <_d_assert_msg>
  40b9dc:	c9                   	leaveq 
  40b9dd:	c3                   	retq   

000000000040b9de <_aaRehash>:
  40b9de:	55                   	push   %rbp
  40b9df:	48 89 e5             	mov    %rsp,%rbp
  40b9e2:	48 83 ec 30          	sub    $0x30,%rsp
  40b9e6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b9ea:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b9ee:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b9f5:	00 
  40b9f6:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40b9fd:	00 
  40b9fe:	48 c7 45 f0 46 00 00 	movq   $0x46,-0x10(%rbp)
  40ba05:	00 
  40ba06:	48 c7 45 f8 28 3c 41 	movq   $0x413c28,-0x8(%rbp)
  40ba0d:	00 
  40ba0e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ba12:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ba16:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ba1a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ba1e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ba24:	e8 d4 f3 ff ff       	callq  40adfd <_d_assert_msg>
  40ba29:	c9                   	leaveq 
  40ba2a:	c3                   	retq   

000000000040ba2b <_aaKeys>:
  40ba2b:	55                   	push   %rbp
  40ba2c:	48 89 e5             	mov    %rsp,%rbp
  40ba2f:	48 83 ec 30          	sub    $0x30,%rsp
  40ba33:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40ba37:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40ba3b:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ba42:	00 
  40ba43:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40ba4a:	00 
  40ba4b:	48 c7 45 f0 45 00 00 	movq   $0x45,-0x10(%rbp)
  40ba52:	00 
  40ba53:	48 c7 45 f8 70 3c 41 	movq   $0x413c70,-0x8(%rbp)
  40ba5a:	00 
  40ba5b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ba5f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ba63:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40ba67:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40ba6b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40ba71:	e8 87 f3 ff ff       	callq  40adfd <_d_assert_msg>
  40ba76:	c9                   	leaveq 
  40ba77:	c3                   	retq   

000000000040ba78 <_aaApply>:
  40ba78:	55                   	push   %rbp
  40ba79:	48 89 e5             	mov    %rsp,%rbp
  40ba7c:	48 83 ec 40          	sub    $0x40,%rsp
  40ba80:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40ba84:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40ba88:	48 89 d0             	mov    %rdx,%rax
  40ba8b:	48 89 ca             	mov    %rcx,%rdx
  40ba8e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40ba92:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40ba96:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ba9d:	00 
  40ba9e:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40baa5:	00 
  40baa6:	48 c7 45 f0 50 00 00 	movq   $0x50,-0x10(%rbp)
  40baad:	00 
  40baae:	48 c7 45 f8 b8 3c 41 	movq   $0x413cb8,-0x8(%rbp)
  40bab5:	00 
  40bab6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40baba:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40babe:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bac2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bac6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bacc:	e8 2c f3 ff ff       	callq  40adfd <_d_assert_msg>
  40bad1:	c9                   	leaveq 
  40bad2:	c3                   	retq   

000000000040bad3 <_aaApply2>:
  40bad3:	55                   	push   %rbp
  40bad4:	48 89 e5             	mov    %rsp,%rbp
  40bad7:	48 83 ec 40          	sub    $0x40,%rsp
  40badb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40badf:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40bae3:	48 89 d0             	mov    %rdx,%rax
  40bae6:	48 89 ca             	mov    %rcx,%rdx
  40bae9:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40baed:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40baf1:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40baf8:	00 
  40baf9:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40bb00:	00 
  40bb01:	48 c7 45 f0 52 00 00 	movq   $0x52,-0x10(%rbp)
  40bb08:	00 
  40bb09:	48 c7 45 f8 10 3d 41 	movq   $0x413d10,-0x8(%rbp)
  40bb10:	00 
  40bb11:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bb15:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bb19:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bb1d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bb21:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bb27:	e8 d1 f2 ff ff       	callq  40adfd <_d_assert_msg>
  40bb2c:	c9                   	leaveq 
  40bb2d:	c3                   	retq   

000000000040bb2e <_d_assocarrayliteralTp>:
  40bb2e:	55                   	push   %rbp
  40bb2f:	48 89 e5             	mov    %rsp,%rbp
  40bb32:	48 83 ec 40          	sub    $0x40,%rsp
  40bb36:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40bb3a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40bb3e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bb42:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  40bb46:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bb4d:	00 
  40bb4e:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40bb55:	00 
  40bb56:	48 c7 45 f0 82 00 00 	movq   $0x82,-0x10(%rbp)
  40bb5d:	00 
  40bb5e:	48 c7 45 f8 68 3d 41 	movq   $0x413d68,-0x8(%rbp)
  40bb65:	00 
  40bb66:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bb6a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bb6e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bb72:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bb76:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bb7c:	e8 7c f2 ff ff       	callq  40adfd <_d_assert_msg>
  40bb81:	c9                   	leaveq 
  40bb82:	c3                   	retq   

000000000040bb83 <_aApplycw1>:
  40bb83:	55                   	push   %rbp
  40bb84:	48 89 e5             	mov    %rsp,%rbp
  40bb87:	48 83 ec 40          	sub    $0x40,%rsp
  40bb8b:	49 89 d0             	mov    %rdx,%r8
  40bb8e:	48 89 f8             	mov    %rdi,%rax
  40bb91:	48 89 f2             	mov    %rsi,%rdx
  40bb94:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bb98:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bb9c:	4c 89 c0             	mov    %r8,%rax
  40bb9f:	48 89 ca             	mov    %rcx,%rdx
  40bba2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bba6:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bbaa:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bbb1:	00 
  40bbb2:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40bbb9:	00 
  40bbba:	48 c7 45 f0 49 00 00 	movq   $0x49,-0x10(%rbp)
  40bbc1:	00 
  40bbc2:	48 c7 45 f8 f0 3d 41 	movq   $0x413df0,-0x8(%rbp)
  40bbc9:	00 
  40bbca:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bbce:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bbd2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bbd6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bbda:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bbe0:	e8 18 f2 ff ff       	callq  40adfd <_d_assert_msg>
  40bbe5:	c9                   	leaveq 
  40bbe6:	c3                   	retq   

000000000040bbe7 <_aApplycd1>:
  40bbe7:	55                   	push   %rbp
  40bbe8:	48 89 e5             	mov    %rsp,%rbp
  40bbeb:	48 83 ec 40          	sub    $0x40,%rsp
  40bbef:	49 89 d0             	mov    %rdx,%r8
  40bbf2:	48 89 f8             	mov    %rdi,%rax
  40bbf5:	48 89 f2             	mov    %rsi,%rdx
  40bbf8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bbfc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bc00:	4c 89 c0             	mov    %r8,%rax
  40bc03:	48 89 ca             	mov    %rcx,%rdx
  40bc06:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bc0a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bc0e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bc15:	00 
  40bc16:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40bc1d:	00 
  40bc1e:	48 c7 45 f0 49 00 00 	movq   $0x49,-0x10(%rbp)
  40bc25:	00 
  40bc26:	48 c7 45 f8 40 3e 41 	movq   $0x413e40,-0x8(%rbp)
  40bc2d:	00 
  40bc2e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bc32:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bc36:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bc3a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bc3e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bc44:	e8 b4 f1 ff ff       	callq  40adfd <_d_assert_msg>
  40bc49:	c9                   	leaveq 
  40bc4a:	c3                   	retq   

000000000040bc4b <_aApplywc1>:
  40bc4b:	55                   	push   %rbp
  40bc4c:	48 89 e5             	mov    %rsp,%rbp
  40bc4f:	48 83 ec 40          	sub    $0x40,%rsp
  40bc53:	49 89 d0             	mov    %rdx,%r8
  40bc56:	48 89 f8             	mov    %rdi,%rax
  40bc59:	48 89 f2             	mov    %rsi,%rdx
  40bc5c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bc60:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bc64:	4c 89 c0             	mov    %r8,%rax
  40bc67:	48 89 ca             	mov    %rcx,%rdx
  40bc6a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bc6e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bc72:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bc79:	00 
  40bc7a:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40bc81:	00 
  40bc82:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40bc89:	00 
  40bc8a:	48 c7 45 f8 90 3e 41 	movq   $0x413e90,-0x8(%rbp)
  40bc91:	00 
  40bc92:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bc96:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bc9a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bc9e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bca2:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bca8:	e8 50 f1 ff ff       	callq  40adfd <_d_assert_msg>
  40bcad:	c9                   	leaveq 
  40bcae:	c3                   	retq   

000000000040bcaf <_aApplywd1>:
  40bcaf:	55                   	push   %rbp
  40bcb0:	48 89 e5             	mov    %rsp,%rbp
  40bcb3:	48 83 ec 40          	sub    $0x40,%rsp
  40bcb7:	49 89 d0             	mov    %rdx,%r8
  40bcba:	48 89 f8             	mov    %rdi,%rax
  40bcbd:	48 89 f2             	mov    %rsi,%rdx
  40bcc0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bcc4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bcc8:	4c 89 c0             	mov    %r8,%rax
  40bccb:	48 89 ca             	mov    %rcx,%rdx
  40bcce:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bcd2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bcd6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bcdd:	00 
  40bcde:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40bce5:	00 
  40bce6:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40bced:	00 
  40bcee:	48 c7 45 f8 e0 3e 41 	movq   $0x413ee0,-0x8(%rbp)
  40bcf5:	00 
  40bcf6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bcfa:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bcfe:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bd02:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bd06:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bd0c:	e8 ec f0 ff ff       	callq  40adfd <_d_assert_msg>
  40bd11:	c9                   	leaveq 
  40bd12:	c3                   	retq   

000000000040bd13 <_aApplydc1>:
  40bd13:	55                   	push   %rbp
  40bd14:	48 89 e5             	mov    %rsp,%rbp
  40bd17:	48 83 ec 40          	sub    $0x40,%rsp
  40bd1b:	49 89 d0             	mov    %rdx,%r8
  40bd1e:	48 89 f8             	mov    %rdi,%rax
  40bd21:	48 89 f2             	mov    %rsi,%rdx
  40bd24:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bd28:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bd2c:	4c 89 c0             	mov    %r8,%rax
  40bd2f:	48 89 ca             	mov    %rcx,%rdx
  40bd32:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bd36:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bd3a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bd41:	00 
  40bd42:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40bd49:	00 
  40bd4a:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40bd51:	00 
  40bd52:	48 c7 45 f8 30 3f 41 	movq   $0x413f30,-0x8(%rbp)
  40bd59:	00 
  40bd5a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bd5e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bd62:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bd66:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bd6a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bd70:	e8 88 f0 ff ff       	callq  40adfd <_d_assert_msg>
  40bd75:	c9                   	leaveq 
  40bd76:	c3                   	retq   

000000000040bd77 <_aApplydw1>:
  40bd77:	55                   	push   %rbp
  40bd78:	48 89 e5             	mov    %rsp,%rbp
  40bd7b:	48 83 ec 40          	sub    $0x40,%rsp
  40bd7f:	49 89 d0             	mov    %rdx,%r8
  40bd82:	48 89 f8             	mov    %rdi,%rax
  40bd85:	48 89 f2             	mov    %rsi,%rdx
  40bd88:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bd8c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bd90:	4c 89 c0             	mov    %r8,%rax
  40bd93:	48 89 ca             	mov    %rcx,%rdx
  40bd96:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bd9a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bd9e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bda5:	00 
  40bda6:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40bdad:	00 
  40bdae:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40bdb5:	00 
  40bdb6:	48 c7 45 f8 80 3f 41 	movq   $0x413f80,-0x8(%rbp)
  40bdbd:	00 
  40bdbe:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bdc2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bdc6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bdca:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bdce:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bdd4:	e8 24 f0 ff ff       	callq  40adfd <_d_assert_msg>
  40bdd9:	c9                   	leaveq 
  40bdda:	c3                   	retq   

000000000040bddb <_aApplycw2>:
  40bddb:	55                   	push   %rbp
  40bddc:	48 89 e5             	mov    %rsp,%rbp
  40bddf:	48 83 ec 40          	sub    $0x40,%rsp
  40bde3:	49 89 d0             	mov    %rdx,%r8
  40bde6:	48 89 f8             	mov    %rdi,%rax
  40bde9:	48 89 f2             	mov    %rsi,%rdx
  40bdec:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bdf0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bdf4:	4c 89 c0             	mov    %r8,%rax
  40bdf7:	48 89 ca             	mov    %rcx,%rdx
  40bdfa:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bdfe:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40be02:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40be09:	00 
  40be0a:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40be11:	00 
  40be12:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40be19:	00 
  40be1a:	48 c7 45 f8 d0 3f 41 	movq   $0x413fd0,-0x8(%rbp)
  40be21:	00 
  40be22:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40be26:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40be2a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40be2e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40be32:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40be38:	e8 c0 ef ff ff       	callq  40adfd <_d_assert_msg>
  40be3d:	c9                   	leaveq 
  40be3e:	c3                   	retq   

000000000040be3f <_aApplycd2>:
  40be3f:	55                   	push   %rbp
  40be40:	48 89 e5             	mov    %rsp,%rbp
  40be43:	48 83 ec 40          	sub    $0x40,%rsp
  40be47:	49 89 d0             	mov    %rdx,%r8
  40be4a:	48 89 f8             	mov    %rdi,%rax
  40be4d:	48 89 f2             	mov    %rsi,%rdx
  40be50:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40be54:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40be58:	4c 89 c0             	mov    %r8,%rax
  40be5b:	48 89 ca             	mov    %rcx,%rdx
  40be5e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40be62:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40be66:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40be6d:	00 
  40be6e:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40be75:	00 
  40be76:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40be7d:	00 
  40be7e:	48 c7 45 f8 20 40 41 	movq   $0x414020,-0x8(%rbp)
  40be85:	00 
  40be86:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40be8a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40be8e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40be92:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40be96:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40be9c:	e8 5c ef ff ff       	callq  40adfd <_d_assert_msg>
  40bea1:	c9                   	leaveq 
  40bea2:	c3                   	retq   

000000000040bea3 <_aApplywc2>:
  40bea3:	55                   	push   %rbp
  40bea4:	48 89 e5             	mov    %rsp,%rbp
  40bea7:	48 83 ec 40          	sub    $0x40,%rsp
  40beab:	49 89 d0             	mov    %rdx,%r8
  40beae:	48 89 f8             	mov    %rdi,%rax
  40beb1:	48 89 f2             	mov    %rsi,%rdx
  40beb4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40beb8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bebc:	4c 89 c0             	mov    %r8,%rax
  40bebf:	48 89 ca             	mov    %rcx,%rdx
  40bec2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bec6:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40beca:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bed1:	00 
  40bed2:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40bed9:	00 
  40beda:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40bee1:	00 
  40bee2:	48 c7 45 f8 70 40 41 	movq   $0x414070,-0x8(%rbp)
  40bee9:	00 
  40beea:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40beee:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bef2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bef6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40befa:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bf00:	e8 f8 ee ff ff       	callq  40adfd <_d_assert_msg>
  40bf05:	c9                   	leaveq 
  40bf06:	c3                   	retq   

000000000040bf07 <_aApplywd2>:
  40bf07:	55                   	push   %rbp
  40bf08:	48 89 e5             	mov    %rsp,%rbp
  40bf0b:	48 83 ec 40          	sub    $0x40,%rsp
  40bf0f:	49 89 d0             	mov    %rdx,%r8
  40bf12:	48 89 f8             	mov    %rdi,%rax
  40bf15:	48 89 f2             	mov    %rsi,%rdx
  40bf18:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bf1c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bf20:	4c 89 c0             	mov    %r8,%rax
  40bf23:	48 89 ca             	mov    %rcx,%rdx
  40bf26:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bf2a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bf2e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bf35:	00 
  40bf36:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40bf3d:	00 
  40bf3e:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40bf45:	00 
  40bf46:	48 c7 45 f8 c0 40 41 	movq   $0x4140c0,-0x8(%rbp)
  40bf4d:	00 
  40bf4e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bf52:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bf56:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bf5a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bf5e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bf64:	e8 94 ee ff ff       	callq  40adfd <_d_assert_msg>
  40bf69:	c9                   	leaveq 
  40bf6a:	c3                   	retq   

000000000040bf6b <_aApplydc2>:
  40bf6b:	55                   	push   %rbp
  40bf6c:	48 89 e5             	mov    %rsp,%rbp
  40bf6f:	48 83 ec 40          	sub    $0x40,%rsp
  40bf73:	49 89 d0             	mov    %rdx,%r8
  40bf76:	48 89 f8             	mov    %rdi,%rax
  40bf79:	48 89 f2             	mov    %rsi,%rdx
  40bf7c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bf80:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bf84:	4c 89 c0             	mov    %r8,%rax
  40bf87:	48 89 ca             	mov    %rcx,%rdx
  40bf8a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bf8e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bf92:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bf99:	00 
  40bf9a:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40bfa1:	00 
  40bfa2:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40bfa9:	00 
  40bfaa:	48 c7 45 f8 10 41 41 	movq   $0x414110,-0x8(%rbp)
  40bfb1:	00 
  40bfb2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bfb6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40bfba:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40bfbe:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40bfc2:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40bfc8:	e8 30 ee ff ff       	callq  40adfd <_d_assert_msg>
  40bfcd:	c9                   	leaveq 
  40bfce:	c3                   	retq   

000000000040bfcf <_aApplydw2>:
  40bfcf:	55                   	push   %rbp
  40bfd0:	48 89 e5             	mov    %rsp,%rbp
  40bfd3:	48 83 ec 40          	sub    $0x40,%rsp
  40bfd7:	49 89 d0             	mov    %rdx,%r8
  40bfda:	48 89 f8             	mov    %rdi,%rax
  40bfdd:	48 89 f2             	mov    %rsi,%rdx
  40bfe0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bfe4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bfe8:	4c 89 c0             	mov    %r8,%rax
  40bfeb:	48 89 ca             	mov    %rcx,%rdx
  40bfee:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bff2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bff6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40bffd:	00 
  40bffe:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40c005:	00 
  40c006:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40c00d:	00 
  40c00e:	48 c7 45 f8 60 41 41 	movq   $0x414160,-0x8(%rbp)
  40c015:	00 
  40c016:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c01a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c01e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c022:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c026:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c02c:	e8 cc ed ff ff       	callq  40adfd <_d_assert_msg>
  40c031:	c9                   	leaveq 
  40c032:	c3                   	retq   

000000000040c033 <_aApplyRcw1>:
  40c033:	55                   	push   %rbp
  40c034:	48 89 e5             	mov    %rsp,%rbp
  40c037:	48 83 ec 40          	sub    $0x40,%rsp
  40c03b:	49 89 d0             	mov    %rdx,%r8
  40c03e:	48 89 f8             	mov    %rdi,%rax
  40c041:	48 89 f2             	mov    %rsi,%rdx
  40c044:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c048:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c04c:	4c 89 c0             	mov    %r8,%rax
  40c04f:	48 89 ca             	mov    %rcx,%rdx
  40c052:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c056:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40c05a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c061:	00 
  40c062:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40c069:	00 
  40c06a:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40c071:	00 
  40c072:	48 c7 45 f8 b0 41 41 	movq   $0x4141b0,-0x8(%rbp)
  40c079:	00 
  40c07a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c07e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c082:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c086:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c08a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c090:	e8 68 ed ff ff       	callq  40adfd <_d_assert_msg>
  40c095:	c9                   	leaveq 
  40c096:	c3                   	retq   

000000000040c097 <_aApplyRcd1>:
  40c097:	55                   	push   %rbp
  40c098:	48 89 e5             	mov    %rsp,%rbp
  40c09b:	48 83 ec 40          	sub    $0x40,%rsp
  40c09f:	49 89 d0             	mov    %rdx,%r8
  40c0a2:	48 89 f8             	mov    %rdi,%rax
  40c0a5:	48 89 f2             	mov    %rsi,%rdx
  40c0a8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c0ac:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c0b0:	4c 89 c0             	mov    %r8,%rax
  40c0b3:	48 89 ca             	mov    %rcx,%rdx
  40c0b6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c0ba:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40c0be:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c0c5:	00 
  40c0c6:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40c0cd:	00 
  40c0ce:	48 c7 45 f0 4a 00 00 	movq   $0x4a,-0x10(%rbp)
  40c0d5:	00 
  40c0d6:	48 c7 45 f8 00 42 41 	movq   $0x414200,-0x8(%rbp)
  40c0dd:	00 
  40c0de:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c0e2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c0e6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c0ea:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c0ee:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c0f4:	e8 04 ed ff ff       	callq  40adfd <_d_assert_msg>
  40c0f9:	c9                   	leaveq 
  40c0fa:	c3                   	retq   

000000000040c0fb <_aApplyRwc1>:
  40c0fb:	55                   	push   %rbp
  40c0fc:	48 89 e5             	mov    %rsp,%rbp
  40c0ff:	48 83 ec 40          	sub    $0x40,%rsp
  40c103:	49 89 d0             	mov    %rdx,%r8
  40c106:	48 89 f8             	mov    %rdi,%rax
  40c109:	48 89 f2             	mov    %rsi,%rdx
  40c10c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c110:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c114:	4c 89 c0             	mov    %r8,%rax
  40c117:	48 89 ca             	mov    %rcx,%rdx
  40c11a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c11e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40c122:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c129:	00 
  40c12a:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40c131:	00 
  40c132:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40c139:	00 
  40c13a:	48 c7 45 f8 50 42 41 	movq   $0x414250,-0x8(%rbp)
  40c141:	00 
  40c142:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c146:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c14a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c14e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c152:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c158:	e8 a0 ec ff ff       	callq  40adfd <_d_assert_msg>
  40c15d:	c9                   	leaveq 
  40c15e:	c3                   	retq   

000000000040c15f <_aApplyRwd1>:
  40c15f:	55                   	push   %rbp
  40c160:	48 89 e5             	mov    %rsp,%rbp
  40c163:	48 83 ec 40          	sub    $0x40,%rsp
  40c167:	49 89 d0             	mov    %rdx,%r8
  40c16a:	48 89 f8             	mov    %rdi,%rax
  40c16d:	48 89 f2             	mov    %rsi,%rdx
  40c170:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c174:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c178:	4c 89 c0             	mov    %r8,%rax
  40c17b:	48 89 ca             	mov    %rcx,%rdx
  40c17e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c182:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40c186:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c18d:	00 
  40c18e:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40c195:	00 
  40c196:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40c19d:	00 
  40c19e:	48 c7 45 f8 a0 42 41 	movq   $0x4142a0,-0x8(%rbp)
  40c1a5:	00 
  40c1a6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c1aa:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c1ae:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c1b2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c1b6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c1bc:	e8 3c ec ff ff       	callq  40adfd <_d_assert_msg>
  40c1c1:	c9                   	leaveq 
  40c1c2:	c3                   	retq   

000000000040c1c3 <_aApplyRdc1>:
  40c1c3:	55                   	push   %rbp
  40c1c4:	48 89 e5             	mov    %rsp,%rbp
  40c1c7:	48 83 ec 40          	sub    $0x40,%rsp
  40c1cb:	49 89 d0             	mov    %rdx,%r8
  40c1ce:	48 89 f8             	mov    %rdi,%rax
  40c1d1:	48 89 f2             	mov    %rsi,%rdx
  40c1d4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c1d8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c1dc:	4c 89 c0             	mov    %r8,%rax
  40c1df:	48 89 ca             	mov    %rcx,%rdx
  40c1e2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c1e6:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40c1ea:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c1f1:	00 
  40c1f2:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40c1f9:	00 
  40c1fa:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40c201:	00 
  40c202:	48 c7 45 f8 f0 42 41 	movq   $0x4142f0,-0x8(%rbp)
  40c209:	00 
  40c20a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c20e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c212:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c216:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c21a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c220:	e8 d8 eb ff ff       	callq  40adfd <_d_assert_msg>
  40c225:	c9                   	leaveq 
  40c226:	c3                   	retq   

000000000040c227 <_aApplyRdw1>:
  40c227:	55                   	push   %rbp
  40c228:	48 89 e5             	mov    %rsp,%rbp
  40c22b:	48 83 ec 40          	sub    $0x40,%rsp
  40c22f:	49 89 d0             	mov    %rdx,%r8
  40c232:	48 89 f8             	mov    %rdi,%rax
  40c235:	48 89 f2             	mov    %rsi,%rdx
  40c238:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c23c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c240:	4c 89 c0             	mov    %r8,%rax
  40c243:	48 89 ca             	mov    %rcx,%rdx
  40c246:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c24a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40c24e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c255:	00 
  40c256:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40c25d:	00 
  40c25e:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40c265:	00 
  40c266:	48 c7 45 f8 40 43 41 	movq   $0x414340,-0x8(%rbp)
  40c26d:	00 
  40c26e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c272:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c276:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c27a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c27e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c284:	e8 74 eb ff ff       	callq  40adfd <_d_assert_msg>
  40c289:	c9                   	leaveq 
  40c28a:	c3                   	retq   

000000000040c28b <_aApplyRcw2>:
  40c28b:	55                   	push   %rbp
  40c28c:	48 89 e5             	mov    %rsp,%rbp
  40c28f:	48 83 ec 40          	sub    $0x40,%rsp
  40c293:	49 89 d0             	mov    %rdx,%r8
  40c296:	48 89 f8             	mov    %rdi,%rax
  40c299:	48 89 f2             	mov    %rsi,%rdx
  40c29c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c2a0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c2a4:	4c 89 c0             	mov    %r8,%rax
  40c2a7:	48 89 ca             	mov    %rcx,%rdx
  40c2aa:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c2ae:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40c2b2:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c2b9:	00 
  40c2ba:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40c2c1:	00 
  40c2c2:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40c2c9:	00 
  40c2ca:	48 c7 45 f8 90 43 41 	movq   $0x414390,-0x8(%rbp)
  40c2d1:	00 
  40c2d2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c2d6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c2da:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c2de:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c2e2:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c2e8:	e8 10 eb ff ff       	callq  40adfd <_d_assert_msg>
  40c2ed:	c9                   	leaveq 
  40c2ee:	c3                   	retq   

000000000040c2ef <_aApplyRcd2>:
  40c2ef:	55                   	push   %rbp
  40c2f0:	48 89 e5             	mov    %rsp,%rbp
  40c2f3:	48 83 ec 40          	sub    $0x40,%rsp
  40c2f7:	49 89 d0             	mov    %rdx,%r8
  40c2fa:	48 89 f8             	mov    %rdi,%rax
  40c2fd:	48 89 f2             	mov    %rsi,%rdx
  40c300:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c304:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c308:	4c 89 c0             	mov    %r8,%rax
  40c30b:	48 89 ca             	mov    %rcx,%rdx
  40c30e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c312:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40c316:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c31d:	00 
  40c31e:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40c325:	00 
  40c326:	48 c7 45 f0 4b 00 00 	movq   $0x4b,-0x10(%rbp)
  40c32d:	00 
  40c32e:	48 c7 45 f8 e0 43 41 	movq   $0x4143e0,-0x8(%rbp)
  40c335:	00 
  40c336:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c33a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c33e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c342:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c346:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c34c:	e8 ac ea ff ff       	callq  40adfd <_d_assert_msg>
  40c351:	c9                   	leaveq 
  40c352:	c3                   	retq   

000000000040c353 <_aApplyRwc2>:
  40c353:	55                   	push   %rbp
  40c354:	48 89 e5             	mov    %rsp,%rbp
  40c357:	48 83 ec 40          	sub    $0x40,%rsp
  40c35b:	49 89 d0             	mov    %rdx,%r8
  40c35e:	48 89 f8             	mov    %rdi,%rax
  40c361:	48 89 f2             	mov    %rsi,%rdx
  40c364:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c368:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c36c:	4c 89 c0             	mov    %r8,%rax
  40c36f:	48 89 ca             	mov    %rcx,%rdx
  40c372:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c376:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40c37a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c381:	00 
  40c382:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40c389:	00 
  40c38a:	48 c7 45 f0 4c 00 00 	movq   $0x4c,-0x10(%rbp)
  40c391:	00 
  40c392:	48 c7 45 f8 30 44 41 	movq   $0x414430,-0x8(%rbp)
  40c399:	00 
  40c39a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c39e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c3a2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c3a6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c3aa:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c3b0:	e8 48 ea ff ff       	callq  40adfd <_d_assert_msg>
  40c3b5:	c9                   	leaveq 
  40c3b6:	c3                   	retq   

000000000040c3b7 <_aApplyRwd2>:
  40c3b7:	55                   	push   %rbp
  40c3b8:	48 89 e5             	mov    %rsp,%rbp
  40c3bb:	48 83 ec 40          	sub    $0x40,%rsp
  40c3bf:	49 89 d0             	mov    %rdx,%r8
  40c3c2:	48 89 f8             	mov    %rdi,%rax
  40c3c5:	48 89 f2             	mov    %rsi,%rdx
  40c3c8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c3cc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c3d0:	4c 89 c0             	mov    %r8,%rax
  40c3d3:	48 89 ca             	mov    %rcx,%rdx
  40c3d6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c3da:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40c3de:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c3e5:	00 
  40c3e6:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40c3ed:	00 
  40c3ee:	48 c7 45 f0 4c 00 00 	movq   $0x4c,-0x10(%rbp)
  40c3f5:	00 
  40c3f6:	48 c7 45 f8 80 44 41 	movq   $0x414480,-0x8(%rbp)
  40c3fd:	00 
  40c3fe:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c402:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c406:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c40a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c40e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c414:	e8 e4 e9 ff ff       	callq  40adfd <_d_assert_msg>
  40c419:	c9                   	leaveq 
  40c41a:	c3                   	retq   

000000000040c41b <_aApplyRdc2>:
  40c41b:	55                   	push   %rbp
  40c41c:	48 89 e5             	mov    %rsp,%rbp
  40c41f:	48 83 ec 40          	sub    $0x40,%rsp
  40c423:	49 89 d0             	mov    %rdx,%r8
  40c426:	48 89 f8             	mov    %rdi,%rax
  40c429:	48 89 f2             	mov    %rsi,%rdx
  40c42c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c430:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c434:	4c 89 c0             	mov    %r8,%rax
  40c437:	48 89 ca             	mov    %rcx,%rdx
  40c43a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c43e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40c442:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c449:	00 
  40c44a:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40c451:	00 
  40c452:	48 c7 45 f0 4c 00 00 	movq   $0x4c,-0x10(%rbp)
  40c459:	00 
  40c45a:	48 c7 45 f8 d0 44 41 	movq   $0x4144d0,-0x8(%rbp)
  40c461:	00 
  40c462:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c466:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c46a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c46e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c472:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c478:	e8 80 e9 ff ff       	callq  40adfd <_d_assert_msg>
  40c47d:	c9                   	leaveq 
  40c47e:	c3                   	retq   

000000000040c47f <_aApplyRdw2>:
  40c47f:	55                   	push   %rbp
  40c480:	48 89 e5             	mov    %rsp,%rbp
  40c483:	48 83 ec 40          	sub    $0x40,%rsp
  40c487:	49 89 d0             	mov    %rdx,%r8
  40c48a:	48 89 f8             	mov    %rdi,%rax
  40c48d:	48 89 f2             	mov    %rsi,%rdx
  40c490:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c494:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c498:	4c 89 c0             	mov    %r8,%rax
  40c49b:	48 89 ca             	mov    %rcx,%rdx
  40c49e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c4a2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40c4a6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c4ad:	00 
  40c4ae:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40c4b5:	00 
  40c4b6:	48 c7 45 f0 4c 00 00 	movq   $0x4c,-0x10(%rbp)
  40c4bd:	00 
  40c4be:	48 c7 45 f8 20 45 41 	movq   $0x414520,-0x8(%rbp)
  40c4c5:	00 
  40c4c6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c4ca:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c4ce:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c4d2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c4d6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c4dc:	e8 1c e9 ff ff       	callq  40adfd <_d_assert_msg>
  40c4e1:	c9                   	leaveq 
  40c4e2:	c3                   	retq   

000000000040c4e3 <_adSortChar>:
  40c4e3:	55                   	push   %rbp
  40c4e4:	48 89 e5             	mov    %rsp,%rbp
  40c4e7:	48 83 ec 30          	sub    $0x30,%rsp
  40c4eb:	48 89 f0             	mov    %rsi,%rax
  40c4ee:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c4f2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c4f6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c4fd:	00 
  40c4fe:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40c505:	00 
  40c506:	48 c7 45 f0 3d 00 00 	movq   $0x3d,-0x10(%rbp)
  40c50d:	00 
  40c50e:	48 c7 45 f8 70 45 41 	movq   $0x414570,-0x8(%rbp)
  40c515:	00 
  40c516:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c51a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c51e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c522:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c526:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c52c:	e8 cc e8 ff ff       	callq  40adfd <_d_assert_msg>
  40c531:	c9                   	leaveq 
  40c532:	c3                   	retq   

000000000040c533 <_adSortWchar>:
  40c533:	55                   	push   %rbp
  40c534:	48 89 e5             	mov    %rsp,%rbp
  40c537:	48 83 ec 30          	sub    $0x30,%rsp
  40c53b:	48 89 f0             	mov    %rsi,%rax
  40c53e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c542:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c546:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c54d:	00 
  40c54e:	48 c7 45 e8 82 26 41 	movq   $0x412682,-0x18(%rbp)
  40c555:	00 
  40c556:	48 c7 45 f0 40 00 00 	movq   $0x40,-0x10(%rbp)
  40c55d:	00 
  40c55e:	48 c7 45 f8 b0 45 41 	movq   $0x4145b0,-0x8(%rbp)
  40c565:	00 
  40c566:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c56a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40c56e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40c572:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40c576:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40c57c:	e8 7c e8 ff ff       	callq  40adfd <_d_assert_msg>
  40c581:	c9                   	leaveq 
  40c582:	c3                   	retq   

000000000040c583 <_adReverseChar>:
	2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	4,4,4,4,4,4,4,4,5,5,5,5,6,6,0xFF,0xFF,
];

Array _adReverseChar(char[] a)
  40c583:	55                   	push   %rbp
  40c584:	48 89 e5             	mov    %rsp,%rbp
  40c587:	53                   	push   %rbx
  40c588:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  40c58f:	48 89 bd e8 fe ff ff 	mov    %rdi,-0x118(%rbp)
  40c596:	48 89 f0             	mov    %rsi,%rax
  40c599:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  40c5a0:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
{
	if(a.length > 1)
  40c5a7:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40c5ae:	48 83 f8 01          	cmp    $0x1,%rax
  40c5b2:	0f 86 5a 03 00 00    	jbe    40c912 <_adReverseChar+0x38f>
	{
		char[6] tmp;
  40c5b8:	48 c7 85 50 ff ff ff 	movq   $0x6,-0xb0(%rbp)
  40c5bf:	06 00 00 00 
  40c5c3:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  40c5ca:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  40c5d1:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  40c5d8:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c5dc:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  40c5e3:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40c5e7:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  40c5ec:	0f 95 c0             	setne  %al
  40c5ef:	83 f0 01             	xor    $0x1,%eax
  40c5f2:	84 c0                	test   %al,%al
  40c5f4:	75 11                	jne    40c607 <_adReverseChar+0x84>
  40c5f6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c5fa:	c6 00 ff             	movb   $0xff,(%rax)
  40c5fd:	48 ff 45 b8          	incq   -0x48(%rbp)
  40c601:	48 ff 4d c0          	decq   -0x40(%rbp)
  40c605:	eb e0                	jmp    40c5e7 <_adReverseChar+0x64>
		char[6] tmplo;
  40c607:	48 c7 85 60 ff ff ff 	movq   $0x6,-0xa0(%rbp)
  40c60e:	06 00 00 00 
  40c612:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40c619:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  40c620:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40c627:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c62b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  40c632:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40c636:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  40c63b:	0f 95 c0             	setne  %al
  40c63e:	83 f0 01             	xor    $0x1,%eax
  40c641:	84 c0                	test   %al,%al
  40c643:	75 11                	jne    40c656 <_adReverseChar+0xd3>
  40c645:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c649:	c6 00 ff             	movb   $0xff,(%rax)
  40c64c:	48 ff 45 c8          	incq   -0x38(%rbp)
  40c650:	48 ff 4d d0          	decq   -0x30(%rbp)
  40c654:	eb e0                	jmp    40c636 <_adReverseChar+0xb3>
		char* lo = a.ptr;
  40c656:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40c65d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		char* hi = &a[length - 1];
  40c661:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40c668:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40c66c:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40c673:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  40c67a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40c67e:	48 ff ca             	dec    %rdx
  40c681:	48 89 95 00 ff ff ff 	mov    %rdx,-0x100(%rbp)
  40c688:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40c68f:	48 39 85 00 ff ff ff 	cmp    %rax,-0x100(%rbp)
  40c696:	73 10                	jae    40c6a8 <_adReverseChar+0x125>
  40c698:	48 8b 8d 00 ff ff ff 	mov    -0x100(%rbp),%rcx
  40c69f:	48 89 8d f8 fe ff ff 	mov    %rcx,-0x108(%rbp)
  40c6a6:	eb 2e                	jmp    40c6d6 <_adReverseChar+0x153>
  40c6a8:	48 c7 85 70 ff ff ff 	movq   $0xb,-0x90(%rbp)
  40c6af:	0b 00 00 00 
  40c6b3:	48 c7 85 78 ff ff ff 	movq   $0x412752,-0x88(%rbp)
  40c6ba:	52 27 41 00 
  40c6be:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
  40c6c5:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
  40c6cc:	ba 41 02 00 00       	mov    $0x241,%edx
  40c6d1:	e8 6f e7 ff ff       	callq  40ae45 <_d_array_bounds>
  40c6d6:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  40c6dd:	48 03 85 f0 fe ff ff 	add    -0x110(%rbp),%rax
  40c6e4:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  40c6e8:	eb 00                	jmp    40c6ea <_adReverseChar+0x167>

		while (lo < hi)
  40c6ea:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40c6ee:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  40c6f2:	0f 92 c0             	setb   %al
  40c6f5:	83 f0 01             	xor    $0x1,%eax
  40c6f8:	84 c0                	test   %al,%al
  40c6fa:	0f 85 12 02 00 00    	jne    40c912 <_adReverseChar+0x38f>
		{	auto clo = *lo;
  40c700:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40c704:	0f b6 00             	movzbl (%rax),%eax
  40c707:	88 45 ef             	mov    %al,-0x11(%rbp)
			auto chi = *hi;
  40c70a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40c70e:	0f b6 00             	movzbl (%rax),%eax
  40c711:	88 45 ee             	mov    %al,-0x12(%rbp)

			if (clo <= 0x7F && chi <= 0x7F)
  40c714:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  40c718:	83 f8 7f             	cmp    $0x7f,%eax
  40c71b:	7f 27                	jg     40c744 <_adReverseChar+0x1c1>
  40c71d:	0f b6 45 ee          	movzbl -0x12(%rbp),%eax
  40c721:	83 f8 7f             	cmp    $0x7f,%eax
  40c724:	7f 1e                	jg     40c744 <_adReverseChar+0x1c1>
			{
				*lo = chi;
  40c726:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40c72a:	0f b6 45 ee          	movzbl -0x12(%rbp),%eax
  40c72e:	88 02                	mov    %al,(%rdx)
				*hi = clo;
  40c730:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40c734:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  40c738:	88 02                	mov    %al,(%rdx)
				lo++;
  40c73a:	48 ff 45 b0          	incq   -0x50(%rbp)
				hi--;
  40c73e:	48 ff 4d a8          	decq   -0x58(%rbp)
				continue;
  40c742:	eb a6                	jmp    40c6ea <_adReverseChar+0x167>
			}

			uint stridelo = UTF8stride[clo];
  40c744:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  40c748:	48 3d 00 01 00 00    	cmp    $0x100,%rax
  40c74e:	73 0d                	jae    40c75d <_adReverseChar+0x1da>
  40c750:	0f b6 5d ef          	movzbl -0x11(%rbp),%ebx
  40c754:	48 89 9d 08 ff ff ff 	mov    %rbx,-0xf8(%rbp)
  40c75b:	eb 22                	jmp    40c77f <_adReverseChar+0x1fc>
  40c75d:	48 c7 45 80 0b 00 00 	movq   $0xb,-0x80(%rbp)
  40c764:	00 
  40c765:	48 c7 45 88 52 27 41 	movq   $0x412752,-0x78(%rbp)
  40c76c:	00 
  40c76d:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  40c771:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  40c775:	ba 50 02 00 00       	mov    $0x250,%edx
  40c77a:	e8 c6 e6 ff ff       	callq  40ae45 <_d_array_bounds>
  40c77f:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40c786:	48 05 00 c9 41 00    	add    $0x41c900,%rax
  40c78c:	0f b6 00             	movzbl (%rax),%eax
  40c78f:	0f b6 c0             	movzbl %al,%eax
  40c792:	89 45 e8             	mov    %eax,-0x18(%rbp)

			uint stridehi = 1;
  40c795:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  40c79c:	eb 00                	jmp    40c79e <_adReverseChar+0x21b>
			while ((chi & 0xC0) == 0x80)
  40c79e:	0f b6 45 ee          	movzbl -0x12(%rbp),%eax
  40c7a2:	25 c0 00 00 00       	and    $0xc0,%eax
  40c7a7:	3d 80 00 00 00       	cmp    $0x80,%eax
  40c7ac:	0f 94 c0             	sete   %al
  40c7af:	83 f0 01             	xor    $0x1,%eax
  40c7b2:	84 c0                	test   %al,%al
  40c7b4:	75 3f                	jne    40c7f5 <_adReverseChar+0x272>
			{
				chi = *--hi;
  40c7b6:	48 ff 4d a8          	decq   -0x58(%rbp)
  40c7ba:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40c7be:	0f b6 00             	movzbl (%rax),%eax
  40c7c1:	88 45 ee             	mov    %al,-0x12(%rbp)
				stridehi++;
  40c7c4:	ff 45 e4             	incl   -0x1c(%rbp)
				assert(hi >= lo);
  40c7c7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40c7cb:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  40c7cf:	73 cd                	jae    40c79e <_adReverseChar+0x21b>
  40c7d1:	48 c7 45 90 0b 00 00 	movq   $0xb,-0x70(%rbp)
  40c7d8:	00 
  40c7d9:	48 c7 45 98 52 27 41 	movq   $0x412752,-0x68(%rbp)
  40c7e0:	00 
  40c7e1:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  40c7e5:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  40c7e9:	ba 57 02 00 00       	mov    $0x257,%edx
  40c7ee:	e8 df e5 ff ff       	callq  40add2 <_d_assert>
  40c7f3:	eb a9                	jmp    40c79e <_adReverseChar+0x21b>
			}
			if (lo == hi)
  40c7f5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40c7f9:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  40c7fd:	0f 84 0f 01 00 00    	je     40c912 <_adReverseChar+0x38f>
				break;

			if (stridelo == stridehi)
  40c803:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40c806:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  40c809:	75 46                	jne    40c851 <_adReverseChar+0x2ce>
			{

				memcpy(tmp.ptr, lo, stridelo);
  40c80b:	8b 55 e8             	mov    -0x18(%rbp),%edx
  40c80e:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40c812:	48 8d bd 20 ff ff ff 	lea    -0xe0(%rbp),%rdi
  40c819:	e8 d2 0f 00 00       	callq  40d7f0 <memcpy>
				memcpy(lo, hi, stridelo);
  40c81e:	8b 55 e8             	mov    -0x18(%rbp),%edx
  40c821:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40c825:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  40c829:	e8 c2 0f 00 00       	callq  40d7f0 <memcpy>
				memcpy(hi, tmp.ptr, stridelo);
  40c82e:	8b 55 e8             	mov    -0x18(%rbp),%edx
  40c831:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
  40c838:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  40c83c:	e8 af 0f 00 00       	callq  40d7f0 <memcpy>
				lo += stridelo;
  40c841:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40c844:	48 01 45 b0          	add    %rax,-0x50(%rbp)
				hi--;
  40c848:	48 ff 4d a8          	decq   -0x58(%rbp)
				continue;
  40c84c:	e9 99 fe ff ff       	jmpq   40c6ea <_adReverseChar+0x167>
			}

			/* Shift the whole array. This is woefully inefficient
			 */
			memcpy(tmp.ptr, hi, stridehi);
  40c851:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  40c854:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40c858:	48 8d bd 20 ff ff ff 	lea    -0xe0(%rbp),%rdi
  40c85f:	e8 8c 0f 00 00       	callq  40d7f0 <memcpy>
			memcpy(tmplo.ptr, lo, stridelo);
  40c864:	8b 55 e8             	mov    -0x18(%rbp),%edx
  40c867:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40c86b:	48 8d bd 30 ff ff ff 	lea    -0xd0(%rbp),%rdi
  40c872:	e8 79 0f 00 00       	callq  40d7f0 <memcpy>
			memmove(lo + stridehi, lo + stridelo , (hi - lo) - stridelo);
  40c877:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40c87b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40c87f:	48 29 d0             	sub    %rdx,%rax
  40c882:	48 89 c2             	mov    %rax,%rdx
  40c885:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40c888:	48 89 d1             	mov    %rdx,%rcx
  40c88b:	48 29 c1             	sub    %rax,%rcx
  40c88e:	48 89 c8             	mov    %rcx,%rax
  40c891:	48 89 c2             	mov    %rax,%rdx
  40c894:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40c897:	48 89 c6             	mov    %rax,%rsi
  40c89a:	48 03 75 b0          	add    -0x50(%rbp),%rsi
  40c89e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  40c8a1:	48 89 c7             	mov    %rax,%rdi
  40c8a4:	48 03 7d b0          	add    -0x50(%rbp),%rdi
  40c8a8:	e8 a5 0f 00 00       	callq  40d852 <memmove>
			memcpy(lo, tmp.ptr, stridehi);
  40c8ad:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  40c8b0:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
  40c8b7:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  40c8bb:	e8 30 0f 00 00       	callq  40d7f0 <memcpy>
			memcpy(hi + cast(int) stridehi - cast(int) stridelo, tmplo.ptr, stridelo);
  40c8c0:	8b 4d e8             	mov    -0x18(%rbp),%ecx
  40c8c3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  40c8c6:	48 98                	cltq   
  40c8c8:	48 89 c2             	mov    %rax,%rdx
  40c8cb:	48 03 55 a8          	add    -0x58(%rbp),%rdx
  40c8cf:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40c8d2:	48 98                	cltq   
  40c8d4:	48 89 d7             	mov    %rdx,%rdi
  40c8d7:	48 29 c7             	sub    %rax,%rdi
  40c8da:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
  40c8e1:	48 89 ca             	mov    %rcx,%rdx
  40c8e4:	e8 07 0f 00 00       	callq  40d7f0 <memcpy>

			lo += stridehi;
  40c8e9:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  40c8ec:	48 01 45 b0          	add    %rax,-0x50(%rbp)
			hi = hi - 1 + (cast(int) stridehi - cast(int) stridelo);
  40c8f0:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  40c8f4:	48 ff c9             	dec    %rcx
  40c8f7:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  40c8fa:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40c8fd:	89 d3                	mov    %edx,%ebx
  40c8ff:	29 c3                	sub    %eax,%ebx
  40c901:	89 d8                	mov    %ebx,%eax
  40c903:	48 98                	cltq   
  40c905:	48 8d 04 01          	lea    (%rcx,%rax,1),%rax
  40c909:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  40c90d:	e9 d8 fd ff ff       	jmpq   40c6ea <_adReverseChar+0x167>
		}
	}

	Array aaa = *cast(Array*)(&a);
  40c912:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  40c919:	48 8b 02             	mov    (%rdx),%rax
  40c91c:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40c923:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40c927:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
	return aaa;
  40c92e:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40c935:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  40c93c:	48 89 02             	mov    %rax,(%rdx)
  40c93f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40c946:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
  40c94d:	48 89 41 08          	mov    %rax,0x8(%rcx)
}
  40c951:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  40c958:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  40c95f:	5b                   	pop    %rbx
  40c960:	c9                   	leaveq 
  40c961:	c3                   	retq   

000000000040c962 <_adReverseWchar>:

Array _adReverseWchar(wchar[] a)
  40c962:	55                   	push   %rbp
  40c963:	48 89 e5             	mov    %rsp,%rbp
  40c966:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  40c96d:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  40c974:	48 89 f0             	mov    %rsi,%rax
  40c977:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40c97e:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
{
	if (a.length > 1)
  40c985:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40c98c:	48 83 f8 01          	cmp    $0x1,%rax
  40c990:	0f 86 3f 03 00 00    	jbe    40ccd5 <_adReverseWchar+0x373>
	{
		wchar[2] tmp;
  40c996:	48 c7 85 70 ff ff ff 	movq   $0x2,-0x90(%rbp)
  40c99d:	02 00 00 00 
  40c9a1:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40c9a8:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  40c9af:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40c9b6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40c9ba:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40c9c1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40c9c5:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  40c9ca:	0f 95 c0             	setne  %al
  40c9cd:	83 f0 01             	xor    $0x1,%eax
  40c9d0:	84 c0                	test   %al,%al
  40c9d2:	75 14                	jne    40c9e8 <_adReverseWchar+0x86>
  40c9d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c9d8:	66 c7 00 ff ff       	movw   $0xffff,(%rax)
  40c9dd:	48 83 45 d8 02       	addq   $0x2,-0x28(%rbp)
  40c9e2:	48 ff 4d e0          	decq   -0x20(%rbp)
  40c9e6:	eb dd                	jmp    40c9c5 <_adReverseWchar+0x63>
		wchar* lo = a.ptr;
  40c9e8:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40c9ef:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		wchar* hi = &a[length - 1];
  40c9f3:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40c9fa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40c9fe:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40ca05:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  40ca0c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ca10:	48 ff ca             	dec    %rdx
  40ca13:	48 89 95 30 ff ff ff 	mov    %rdx,-0xd0(%rbp)
  40ca1a:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40ca21:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
  40ca28:	73 10                	jae    40ca3a <_adReverseWchar+0xd8>
  40ca2a:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
  40ca31:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
  40ca38:	eb 22                	jmp    40ca5c <_adReverseWchar+0xfa>
  40ca3a:	48 c7 45 80 0b 00 00 	movq   $0xb,-0x80(%rbp)
  40ca41:	00 
  40ca42:	48 c7 45 88 52 27 41 	movq   $0x412752,-0x78(%rbp)
  40ca49:	00 
  40ca4a:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  40ca4e:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  40ca52:	ba 7e 02 00 00       	mov    $0x27e,%edx
  40ca57:	e8 e9 e3 ff ff       	callq  40ae45 <_d_array_bounds>
  40ca5c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40ca63:	48 01 c0             	add    %rax,%rax
  40ca66:	48 03 85 20 ff ff ff 	add    -0xe0(%rbp),%rax
  40ca6d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40ca71:	eb 00                	jmp    40ca73 <_adReverseWchar+0x111>

		while (lo < hi)
  40ca73:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40ca77:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  40ca7b:	0f 92 c0             	setb   %al
  40ca7e:	83 f0 01             	xor    $0x1,%eax
  40ca81:	84 c0                	test   %al,%al
  40ca83:	0f 85 4c 02 00 00    	jne    40ccd5 <_adReverseWchar+0x373>
		{	auto clo = *lo;
  40ca89:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40ca8d:	0f b7 00             	movzwl (%rax),%eax
  40ca90:	66 89 45 fa          	mov    %ax,-0x6(%rbp)
			auto chi = *hi;
  40ca94:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40ca98:	0f b7 00             	movzwl (%rax),%eax
  40ca9b:	66 89 45 f8          	mov    %ax,-0x8(%rbp)

			if ((clo < 0xD800 || clo > 0xDFFF) &&
  40ca9f:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  40caa3:	3d 00 d8 00 00       	cmp    $0xd800,%eax
  40caa8:	7c 0b                	jl     40cab5 <_adReverseWchar+0x153>
  40caaa:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  40caae:	3d ff df 00 00       	cmp    $0xdfff,%eax
  40cab3:	7e 37                	jle    40caec <_adReverseWchar+0x18a>
  40cab5:	0f b7 45 f8          	movzwl -0x8(%rbp),%eax
  40cab9:	3d 00 d8 00 00       	cmp    $0xd800,%eax
  40cabe:	7c 0b                	jl     40cacb <_adReverseWchar+0x169>
  40cac0:	0f b7 45 f8          	movzwl -0x8(%rbp),%eax
  40cac4:	3d ff df 00 00       	cmp    $0xdfff,%eax
  40cac9:	7e 21                	jle    40caec <_adReverseWchar+0x18a>
				(chi < 0xD800 || chi > 0xDFFF))
			{
				*lo = chi;
  40cacb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cacf:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40cad2:	66 89 02             	mov    %ax,(%rdx)
				*hi = clo;
  40cad5:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40cad9:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  40cadd:	66 89 02             	mov    %ax,(%rdx)
				lo++;
  40cae0:	48 83 45 d0 02       	addq   $0x2,-0x30(%rbp)
				hi--;
  40cae5:	48 83 6d c8 02       	subq   $0x2,-0x38(%rbp)
				continue;
  40caea:	eb 87                	jmp    40ca73 <_adReverseWchar+0x111>
			}

			int stridelo = 1 + (clo >= 0xD800 && clo <= 0xDBFF);
  40caec:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  40caf0:	3d 00 d8 00 00       	cmp    $0xd800,%eax
  40caf5:	7c 14                	jl     40cb0b <_adReverseWchar+0x1a9>
  40caf7:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  40cafb:	3d ff db 00 00       	cmp    $0xdbff,%eax
  40cb00:	7f 09                	jg     40cb0b <_adReverseWchar+0x1a9>
  40cb02:	c6 85 3f ff ff ff 01 	movb   $0x1,-0xc1(%rbp)
  40cb09:	eb 07                	jmp    40cb12 <_adReverseWchar+0x1b0>
  40cb0b:	c6 85 3f ff ff ff 00 	movb   $0x0,-0xc1(%rbp)
  40cb12:	0f b6 85 3f ff ff ff 	movzbl -0xc1(%rbp),%eax
  40cb19:	ff c0                	inc    %eax
  40cb1b:	89 45 f4             	mov    %eax,-0xc(%rbp)

			int stridehi = 1;
  40cb1e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%rbp)
			if (chi >= 0xDC00 && chi <= 0xDFFF)
  40cb25:	0f b7 45 f8          	movzwl -0x8(%rbp),%eax
  40cb29:	3d 00 dc 00 00       	cmp    $0xdc00,%eax
  40cb2e:	7c 4a                	jl     40cb7a <_adReverseWchar+0x218>
  40cb30:	0f b7 45 f8          	movzwl -0x8(%rbp),%eax
  40cb34:	3d ff df 00 00       	cmp    $0xdfff,%eax
  40cb39:	7f 3f                	jg     40cb7a <_adReverseWchar+0x218>
			{
				chi = *--hi;
  40cb3b:	48 83 6d c8 02       	subq   $0x2,-0x38(%rbp)
  40cb40:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cb44:	0f b7 00             	movzwl (%rax),%eax
  40cb47:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
				stridehi++;
  40cb4b:	ff 45 f0             	incl   -0x10(%rbp)
				assert(hi >= lo);
  40cb4e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cb52:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  40cb56:	73 22                	jae    40cb7a <_adReverseWchar+0x218>
  40cb58:	48 c7 45 90 0b 00 00 	movq   $0xb,-0x70(%rbp)
  40cb5f:	00 
  40cb60:	48 c7 45 98 52 27 41 	movq   $0x412752,-0x68(%rbp)
  40cb67:	00 
  40cb68:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  40cb6c:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  40cb70:	ba 95 02 00 00       	mov    $0x295,%edx
  40cb75:	e8 58 e2 ff ff       	callq  40add2 <_d_assert>
			}
			if (lo == hi)
  40cb7a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40cb7e:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  40cb82:	0f 84 4d 01 00 00    	je     40ccd5 <_adReverseWchar+0x373>
				break;

			if (stridelo == stridehi)
  40cb88:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40cb8b:	3b 45 f0             	cmp    -0x10(%rbp),%eax
  40cb8e:	75 63                	jne    40cbf3 <_adReverseWchar+0x291>
			{	int stmp;
  40cb90:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

				assert(stridelo == 2);
  40cb97:	83 7d f4 02          	cmpl   $0x2,-0xc(%rbp)
  40cb9b:	74 22                	je     40cbbf <_adReverseWchar+0x25d>
  40cb9d:	48 c7 45 a0 0b 00 00 	movq   $0xb,-0x60(%rbp)
  40cba4:	00 
  40cba5:	48 c7 45 a8 52 27 41 	movq   $0x412752,-0x58(%rbp)
  40cbac:	00 
  40cbad:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  40cbb1:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40cbb5:	ba 9d 02 00 00       	mov    $0x29d,%edx
  40cbba:	e8 13 e2 ff ff       	callq  40add2 <_d_assert>
				assert(stmp.sizeof == 2 * (*lo).sizeof);
				stmp = *cast(int*)lo;
  40cbbf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40cbc3:	8b 00                	mov    (%rax),%eax
  40cbc5:	89 45 fc             	mov    %eax,-0x4(%rbp)
				*cast(int*)lo = *cast(int*)hi;
  40cbc8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cbcc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cbd0:	8b 00                	mov    (%rax),%eax
  40cbd2:	89 02                	mov    %eax,(%rdx)
				*cast(int*)hi = stmp;
  40cbd4:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40cbd8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40cbdb:	89 02                	mov    %eax,(%rdx)
				lo += stridelo;
  40cbdd:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40cbe0:	48 98                	cltq   
  40cbe2:	48 01 c0             	add    %rax,%rax
  40cbe5:	48 01 45 d0          	add    %rax,-0x30(%rbp)
				hi--;
  40cbe9:	48 83 6d c8 02       	subq   $0x2,-0x38(%rbp)
				continue;
  40cbee:	e9 80 fe ff ff       	jmpq   40ca73 <_adReverseWchar+0x111>
			}

			/* Shift the whole array. This is woefully inefficient
			 */
			memcpy(tmp.ptr, hi, stridehi * wchar.sizeof);
  40cbf3:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40cbf6:	48 98                	cltq   
  40cbf8:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  40cbfc:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40cc00:	48 8d bd 50 ff ff ff 	lea    -0xb0(%rbp),%rdi
  40cc07:	e8 e4 0b 00 00       	callq  40d7f0 <memcpy>
			memcpy(hi + cast(int) stridehi - cast(int) stridelo, lo, stridelo * wchar.sizeof);
  40cc0c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40cc0f:	48 98                	cltq   
  40cc11:	48 8d 0c 00          	lea    (%rax,%rax,1),%rcx
  40cc15:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40cc18:	48 98                	cltq   
  40cc1a:	48 01 c0             	add    %rax,%rax
  40cc1d:	48 89 c2             	mov    %rax,%rdx
  40cc20:	48 03 55 c8          	add    -0x38(%rbp),%rdx
  40cc24:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40cc27:	48 98                	cltq   
  40cc29:	48 01 c0             	add    %rax,%rax
  40cc2c:	48 89 d7             	mov    %rdx,%rdi
  40cc2f:	48 29 c7             	sub    %rax,%rdi
  40cc32:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40cc36:	48 89 ca             	mov    %rcx,%rdx
  40cc39:	e8 b2 0b 00 00       	callq  40d7f0 <memcpy>
			memmove(lo + stridehi, lo + stridelo , (hi - (lo + stridelo)) * wchar.sizeof);
  40cc3e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40cc41:	48 98                	cltq   
  40cc43:	48 01 c0             	add    %rax,%rax
  40cc46:	48 89 c2             	mov    %rax,%rdx
  40cc49:	48 03 55 d0          	add    -0x30(%rbp),%rdx
  40cc4d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cc51:	48 89 c1             	mov    %rax,%rcx
  40cc54:	48 29 d1             	sub    %rdx,%rcx
  40cc57:	48 89 ca             	mov    %rcx,%rdx
  40cc5a:	48 89 d0             	mov    %rdx,%rax
  40cc5d:	48 c1 e8 3f          	shr    $0x3f,%rax
  40cc61:	48 01 d0             	add    %rdx,%rax
  40cc64:	48 d1 f8             	sar    %rax
  40cc67:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  40cc6b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40cc6e:	48 98                	cltq   
  40cc70:	48 01 c0             	add    %rax,%rax
  40cc73:	48 89 c6             	mov    %rax,%rsi
  40cc76:	48 03 75 d0          	add    -0x30(%rbp),%rsi
  40cc7a:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40cc7d:	48 98                	cltq   
  40cc7f:	48 01 c0             	add    %rax,%rax
  40cc82:	48 89 c7             	mov    %rax,%rdi
  40cc85:	48 03 7d d0          	add    -0x30(%rbp),%rdi
  40cc89:	e8 c4 0b 00 00       	callq  40d852 <memmove>
			memcpy(lo, tmp.ptr, stridehi * wchar.sizeof);
  40cc8e:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40cc91:	48 98                	cltq   
  40cc93:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  40cc97:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  40cc9e:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40cca2:	e8 49 0b 00 00       	callq  40d7f0 <memcpy>

			lo += stridehi;
  40cca7:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40ccaa:	48 98                	cltq   
  40ccac:	48 01 c0             	add    %rax,%rax
  40ccaf:	48 01 45 d0          	add    %rax,-0x30(%rbp)
			hi = hi - 1 + (cast(int) stridehi - cast(int) stridelo);
  40ccb3:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  40ccb7:	48 83 e9 02          	sub    $0x2,%rcx
  40ccbb:	8b 55 f4             	mov    -0xc(%rbp),%edx
  40ccbe:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40ccc1:	29 d0                	sub    %edx,%eax
  40ccc3:	48 98                	cltq   
  40ccc5:	48 01 c0             	add    %rax,%rax
  40ccc8:	48 8d 04 01          	lea    (%rcx,%rax,1),%rax
  40cccc:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40ccd0:	e9 9e fd ff ff       	jmpq   40ca73 <_adReverseWchar+0x111>
		}
	}

	Array aaa = *cast(Array*)(&a);
  40ccd5:	48 8d 95 40 ff ff ff 	lea    -0xc0(%rbp),%rdx
  40ccdc:	48 8b 02             	mov    (%rdx),%rax
  40ccdf:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40cce6:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40ccea:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
	return aaa;
  40ccf1:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40ccf8:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  40ccff:	48 89 02             	mov    %rax,(%rdx)
  40cd02:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  40cd09:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
  40cd10:	48 89 41 08          	mov    %rax,0x8(%rcx)
}
  40cd14:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40cd1b:	c9                   	leaveq 
  40cd1c:	c3                   	retq   

000000000040cd1d <_adCmpChar>:

int _adCmpChar(Array a1, Array a2)
  40cd1d:	55                   	push   %rbp
  40cd1e:	48 89 e5             	mov    %rsp,%rbp
  40cd21:	48 83 ec 30          	sub    $0x30,%rsp
  40cd25:	49 89 d0             	mov    %rdx,%r8
  40cd28:	48 89 f8             	mov    %rdi,%rax
  40cd2b:	48 89 f2             	mov    %rsi,%rdx
  40cd2e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40cd32:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40cd36:	4c 89 c0             	mov    %r8,%rax
  40cd39:	48 89 ca             	mov    %rcx,%rdx
  40cd3c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40cd40:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
			ret 					;
		}
	}
	else
	{
		int len;
  40cd44:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
		int c;
  40cd4b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)

		len = a1.length;
  40cd52:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40cd56:	89 45 fc             	mov    %eax,-0x4(%rbp)
		if (a2.length < len)
  40cd59:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cd5d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40cd60:	48 98                	cltq   
  40cd62:	48 39 c2             	cmp    %rax,%rdx
  40cd65:	73 07                	jae    40cd6e <_adCmpChar+0x51>
			len = a2.length;
  40cd67:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40cd6b:	89 45 fc             	mov    %eax,-0x4(%rbp)
		c = memcmp(cast(char *)a1.data, cast(char *)a2.data, len);
  40cd6e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40cd71:	48 63 d0             	movslq %eax,%rdx
  40cd74:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40cd78:	48 89 c6             	mov    %rax,%rsi
  40cd7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cd7f:	48 89 c7             	mov    %rax,%rdi
  40cd82:	e8 2d 0b 00 00       	callq  40d8b4 <_D6kernel4core6system6memcmpFPvPvmZl>
  40cd87:	89 45 f8             	mov    %eax,-0x8(%rbp)
		if (!c)
  40cd8a:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  40cd8e:	0f 95 c0             	setne  %al
  40cd91:	83 f0 01             	xor    $0x1,%eax
  40cd94:	84 c0                	test   %al,%al
  40cd96:	74 13                	je     40cdab <_adCmpChar+0x8e>
			c = cast(int)a1.length - cast(int)a2.length;
  40cd98:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40cd9c:	89 c2                	mov    %eax,%edx
  40cd9e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40cda2:	89 d1                	mov    %edx,%ecx
  40cda4:	29 c1                	sub    %eax,%ecx
  40cda6:	89 c8                	mov    %ecx,%eax
  40cda8:	89 45 f8             	mov    %eax,-0x8(%rbp)
		return c;
  40cdab:	8b 45 f8             	mov    -0x8(%rbp),%eax
	}
}
  40cdae:	c9                   	leaveq 
  40cdaf:	c3                   	retq   

000000000040cdb0 <_adReverse>:

Array _adReverse(Array a, size_t szelem)
  40cdb0:	55                   	push   %rbp
  40cdb1:	48 89 e5             	mov    %rsp,%rbp
  40cdb4:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  40cdb8:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  40cdbc:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
  40cdc0:	48 89 f0             	mov    %rsi,%rax
  40cdc3:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40cdc7:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
{
	if (a.length >= 2)
  40cdcb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40cdcf:	48 83 f8 02          	cmp    $0x2,%rax
  40cdd3:	0f 82 05 01 00 00    	jb     40cede <_adReverse+0x12e>
	{
		byte*	 tmp;
  40cdd9:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40cde0:	00 
		byte[16] buffer;
  40cde1:	48 c7 45 c0 10 00 00 	movq   $0x10,-0x40(%rbp)
  40cde8:	00 
  40cde9:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40cded:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40cdf1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40cdf5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40cdf9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cdfd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40ce01:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40ce06:	0f 95 c0             	setne  %al
  40ce09:	83 f0 01             	xor    $0x1,%eax
  40ce0c:	84 c0                	test   %al,%al
  40ce0e:	75 11                	jne    40ce21 <_adReverse+0x71>
  40ce10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40ce14:	c6 00 00             	movb   $0x0,(%rax)
  40ce17:	48 ff 45 f0          	incq   -0x10(%rbp)
  40ce1b:	48 ff 4d f8          	decq   -0x8(%rbp)
  40ce1f:	eb e0                	jmp    40ce01 <_adReverse+0x51>

		void* lo = a.data;
  40ce21:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40ce25:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		void* hi = a.data + (a.length - 1) * szelem;
  40ce29:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40ce2d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40ce31:	48 ff c8             	dec    %rax
  40ce34:	48 0f af 45 98       	imul   -0x68(%rbp),%rax
  40ce39:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40ce3d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

		tmp = buffer.ptr;
  40ce41:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40ce45:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		if (szelem > 16)
  40ce49:	48 83 7d 98 10       	cmpq   $0x10,-0x68(%rbp)
  40ce4e:	76 37                	jbe    40ce87 <_adReverse+0xd7>
			tmp = cast(byte*)alloca(szelem);
  40ce50:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40ce54:	48 83 c0 0f          	add    $0xf,%rax
  40ce58:	48 83 c0 0f          	add    $0xf,%rax
  40ce5c:	48 c1 e8 04          	shr    $0x4,%rax
  40ce60:	48 c1 e0 04          	shl    $0x4,%rax
  40ce64:	48 29 c4             	sub    %rax,%rsp
  40ce67:	48 89 65 90          	mov    %rsp,-0x70(%rbp)
  40ce6b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40ce6f:	48 83 c0 0f          	add    $0xf,%rax
  40ce73:	48 c1 e8 04          	shr    $0x4,%rax
  40ce77:	48 c1 e0 04          	shl    $0x4,%rax
  40ce7b:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  40ce7f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40ce83:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		for (; lo < hi; lo += szelem, hi -= szelem)
  40ce87:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ce8b:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  40ce8f:	0f 92 c0             	setb   %al
  40ce92:	83 f0 01             	xor    $0x1,%eax
  40ce95:	84 c0                	test   %al,%al
  40ce97:	75 45                	jne    40cede <_adReverse+0x12e>
		{
			memcpy(tmp, lo,  szelem);
  40ce99:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40ce9d:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40cea1:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40cea5:	e8 46 09 00 00       	callq  40d7f0 <memcpy>
			memcpy(lo,	hi,  szelem);
  40ceaa:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40ceae:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40ceb2:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40ceb6:	e8 35 09 00 00       	callq  40d7f0 <memcpy>
			memcpy(hi,	tmp, szelem);
  40cebb:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40cebf:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40cec3:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  40cec7:	e8 24 09 00 00       	callq  40d7f0 <memcpy>
  40cecc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40ced0:	48 01 45 e0          	add    %rax,-0x20(%rbp)
  40ced4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40ced8:	48 29 45 d8          	sub    %rax,-0x28(%rbp)
  40cedc:	eb a9                	jmp    40ce87 <_adReverse+0xd7>
		}
	}
	return a;
  40cede:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40cee2:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40cee6:	48 89 02             	mov    %rax,(%rdx)
  40cee9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40ceed:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40cef1:	48 89 42 08          	mov    %rax,0x8(%rdx)
}
  40cef5:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40cef9:	c9                   	leaveq 
  40cefa:	c3                   	retq   

000000000040cefb <_adEq>:

int _adEq(Array a1, Array a2, TypeInfo ti)
  40cefb:	55                   	push   %rbp
  40cefc:	48 89 e5             	mov    %rsp,%rbp
  40ceff:	48 83 ec 50          	sub    $0x50,%rsp
  40cf03:	49 89 d1             	mov    %rdx,%r9
  40cf06:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  40cf0a:	48 89 f8             	mov    %rdi,%rax
  40cf0d:	48 89 f2             	mov    %rsi,%rdx
  40cf10:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40cf14:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40cf18:	4c 89 c8             	mov    %r9,%rax
  40cf1b:	48 89 ca             	mov    %rcx,%rdx
  40cf1e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40cf22:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
{
	if(a1.length != a2.length)
  40cf26:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cf2a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40cf2e:	48 39 c2             	cmp    %rax,%rdx
  40cf31:	74 0c                	je     40cf3f <_adEq+0x44>
		return 0;				// not equal
  40cf33:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  40cf3a:	e9 be 00 00 00       	jmpq   40cffd <_adEq+0x102>

	auto sz = ti.tsize();
  40cf3f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cf43:	48 8b 00             	mov    (%rax),%rax
  40cf46:	48 83 c0 40          	add    $0x40,%rax
  40cf4a:	48 8b 00             	mov    (%rax),%rax
  40cf4d:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  40cf51:	ff d0                	callq  *%rax
  40cf53:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	auto p1 = a1.data;
  40cf57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40cf5b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	auto p2 = a2.data;
  40cf5f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cf63:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	if(sz == 1)
  40cf67:	48 83 7d f0 01       	cmpq   $0x1,-0x10(%rbp)
  40cf6c:	75 1f                	jne    40cf8d <_adEq+0x92>
		// We should really have a ti.isPOD() check for this
		return (memcmp(p1, p2, a1.length) == 0);
  40cf6e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cf72:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40cf76:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  40cf7a:	e8 35 09 00 00       	callq  40d8b4 <_D6kernel4core6system6memcmpFPvPvmZl>
  40cf7f:	48 85 c0             	test   %rax,%rax
  40cf82:	0f 94 c0             	sete   %al
  40cf85:	0f b6 c0             	movzbl %al,%eax
  40cf88:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  40cf8b:	eb 70                	jmp    40cffd <_adEq+0x102>

	for(size_t i = 0; i < a1.length; i++)
  40cf8d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40cf94:	00 
  40cf95:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40cf99:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  40cf9d:	0f 92 c0             	setb   %al
  40cfa0:	83 f0 01             	xor    $0x1,%eax
  40cfa3:	84 c0                	test   %al,%al
  40cfa5:	75 4f                	jne    40cff6 <_adEq+0xfb>
	{
		if(!ti.equals(p1 + i * sz, p2 + i * sz))
  40cfa7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cfab:	48 8b 00             	mov    (%rax),%rax
  40cfae:	48 83 c0 30          	add    $0x30,%rax
  40cfb2:	48 8b 08             	mov    (%rax),%rcx
  40cfb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cfb9:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  40cfbe:	48 89 c2             	mov    %rax,%rdx
  40cfc1:	48 03 55 e0          	add    -0x20(%rbp),%rdx
  40cfc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cfc9:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  40cfce:	48 89 c6             	mov    %rax,%rsi
  40cfd1:	48 03 75 e8          	add    -0x18(%rbp),%rsi
  40cfd5:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  40cfd9:	ff d1                	callq  *%rcx
  40cfdb:	85 c0                	test   %eax,%eax
  40cfdd:	0f 95 c0             	setne  %al
  40cfe0:	83 f0 01             	xor    $0x1,%eax
  40cfe3:	84 c0                	test   %al,%al
  40cfe5:	74 09                	je     40cff0 <_adEq+0xf5>
			return 0;			// not equal
  40cfe7:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  40cfee:	eb 0d                	jmp    40cffd <_adEq+0x102>
		// We should really have a ti.isPOD() check for this
		return (memcmp(p1, p2, a1.length) == 0);

	for(size_t i = 0; i < a1.length; i++)
	{
		if(!ti.equals(p1 + i * sz, p2 + i * sz))
  40cff0:	48 ff 45 f8          	incq   -0x8(%rbp)
  40cff4:	eb 9f                	jmp    40cf95 <_adEq+0x9a>
			return 0;			// not equal
	}

	return 1;					// equal
  40cff6:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%rbp)
  40cffd:	8b 45 b4             	mov    -0x4c(%rbp),%eax
}
  40d000:	c9                   	leaveq 
  40d001:	c3                   	retq   

000000000040d002 <_adCmp>:

int _adCmp(Array a1, Array a2, TypeInfo ti)
  40d002:	55                   	push   %rbp
  40d003:	48 89 e5             	mov    %rsp,%rbp
  40d006:	48 83 ec 70          	sub    $0x70,%rsp
  40d00a:	49 89 d1             	mov    %rdx,%r9
  40d00d:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
  40d011:	48 89 f8             	mov    %rdi,%rax
  40d014:	48 89 f2             	mov    %rsi,%rdx
  40d017:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40d01b:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  40d01f:	4c 89 c8             	mov    %r9,%rax
  40d022:	48 89 ca             	mov    %rcx,%rdx
  40d025:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40d029:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
{
	//printf("adCmp()\n");
	auto len = a1.length;
  40d02d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40d031:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (a2.length < len)
  40d035:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40d039:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40d03d:	73 08                	jae    40d047 <_adCmp+0x45>
		len = a2.length;
  40d03f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40d043:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	auto sz = ti.tsize();
  40d047:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40d04b:	48 8b 00             	mov    (%rax),%rax
  40d04e:	48 83 c0 40          	add    $0x40,%rax
  40d052:	48 8b 00             	mov    (%rax),%rax
  40d055:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40d059:	ff d0                	callq  *%rax
  40d05b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	void *p1 = a1.data;
  40d05f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d063:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	void *p2 = a2.data;
  40d067:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40d06b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)

	if (sz == 1)
  40d06f:	48 83 7d d8 01       	cmpq   $0x1,-0x28(%rbp)
  40d074:	75 28                	jne    40d09e <_adCmp+0x9c>
	{	// We should really have a ti.isPOD() check for this
		auto c = memcmp(p1, p2, len);
  40d076:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40d07a:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40d07e:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40d082:	e8 2d 08 00 00       	callq  40d8b4 <_D6kernel4core6system6memcmpFPvPvmZl>
  40d087:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		if (c)
  40d08b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  40d090:	74 71                	je     40d103 <_adCmp+0x101>
			return c;
  40d092:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d096:	89 45 90             	mov    %eax,-0x70(%rbp)
  40d099:	e9 9e 00 00 00       	jmpq   40d13c <_adCmp+0x13a>
	}
	else
	{
		for (size_t i = 0; i < len; i++)
  40d09e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40d0a5:	00 
  40d0a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d0aa:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40d0ae:	0f 92 c0             	setb   %al
  40d0b1:	83 f0 01             	xor    $0x1,%eax
  40d0b4:	84 c0                	test   %al,%al
  40d0b6:	75 4b                	jne    40d103 <_adCmp+0x101>
		{
			auto c = ti.compare(p1 + i * sz, p2 + i * sz);
  40d0b8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40d0bc:	48 8b 00             	mov    (%rax),%rax
  40d0bf:	48 83 c0 38          	add    $0x38,%rax
  40d0c3:	48 8b 08             	mov    (%rax),%rcx
  40d0c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d0ca:	48 0f af 45 d8       	imul   -0x28(%rbp),%rax
  40d0cf:	48 89 c2             	mov    %rax,%rdx
  40d0d2:	48 03 55 c8          	add    -0x38(%rbp),%rdx
  40d0d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d0da:	48 0f af 45 d8       	imul   -0x28(%rbp),%rax
  40d0df:	48 89 c6             	mov    %rax,%rsi
  40d0e2:	48 03 75 d0          	add    -0x30(%rbp),%rsi
  40d0e6:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40d0ea:	ff d1                	callq  *%rcx
  40d0ec:	89 45 fc             	mov    %eax,-0x4(%rbp)
			if (c)
  40d0ef:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40d0f3:	74 08                	je     40d0fd <_adCmp+0xfb>
				return c;
  40d0f5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40d0f8:	89 45 90             	mov    %eax,-0x70(%rbp)
  40d0fb:	eb 3f                	jmp    40d13c <_adCmp+0x13a>
	else
	{
		for (size_t i = 0; i < len; i++)
		{
			auto c = ti.compare(p1 + i * sz, p2 + i * sz);
			if (c)
  40d0fd:	48 ff 45 f0          	incq   -0x10(%rbp)
  40d101:	eb a3                	jmp    40d0a6 <_adCmp+0xa4>
				return c;
		}
	}
	if (a1.length == a2.length)
  40d103:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40d107:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40d10b:	48 39 c2             	cmp    %rax,%rdx
  40d10e:	75 09                	jne    40d119 <_adCmp+0x117>
		return 0;
  40d110:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%rbp)
  40d117:	eb 23                	jmp    40d13c <_adCmp+0x13a>
	return (a1.length > a2.length) ? 1 : -1;
  40d119:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40d11d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40d121:	48 39 c2             	cmp    %rax,%rdx
  40d124:	76 09                	jbe    40d12f <_adCmp+0x12d>
  40d126:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%rbp)
  40d12d:	eb 07                	jmp    40d136 <_adCmp+0x134>
  40d12f:	c7 45 94 ff ff ff ff 	movl   $0xffffffff,-0x6c(%rbp)
  40d136:	8b 45 94             	mov    -0x6c(%rbp),%eax
  40d139:	89 45 90             	mov    %eax,-0x70(%rbp)
  40d13c:	8b 45 90             	mov    -0x70(%rbp),%eax
}
  40d13f:	c9                   	leaveq 
  40d140:	c3                   	retq   

000000000040d141 <_adSort>:

Array _adSort(Array a, TypeInfo ti)
  40d141:	55                   	push   %rbp
  40d142:	48 89 e5             	mov    %rsp,%rbp
  40d145:	48 81 ec a0 04 00 00 	sub    $0x4a0,%rsp
  40d14c:	48 89 bd 60 fb ff ff 	mov    %rdi,-0x4a0(%rbp)
  40d153:	48 89 8d 68 fb ff ff 	mov    %rcx,-0x498(%rbp)
  40d15a:	48 89 f0             	mov    %rsi,%rax
  40d15d:	48 89 85 70 fb ff ff 	mov    %rax,-0x490(%rbp)
  40d164:	48 89 95 78 fb ff ff 	mov    %rdx,-0x488(%rbp)
	struct StackEntry {
		byte *l;
		byte *r;
	}

	size_t elem_size = ti.tsize();
  40d16b:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d172:	48 8b 00             	mov    (%rax),%rax
  40d175:	48 83 c0 40          	add    $0x40,%rax
  40d179:	48 8b 00             	mov    (%rax),%rax
  40d17c:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d183:	ff d0                	callq  *%rax
  40d185:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	size_t qsort_limit = elem_size * Qsort_Threshold;
  40d189:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d18d:	48 89 d0             	mov    %rdx,%rax
  40d190:	48 c1 e0 03          	shl    $0x3,%rax
  40d194:	48 29 d0             	sub    %rdx,%rax
  40d197:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	static assert(ubyte.sizeof == 1);
	static assert(ubyte.max == 255);

	StackEntry[size_t.sizeof * 8] stack; // log2( size_t.max )
  40d19b:	48 c7 45 80 40 00 00 	movq   $0x40,-0x80(%rbp)
  40d1a2:	00 
  40d1a3:	48 8d 85 80 fb ff ff 	lea    -0x480(%rbp),%rax
  40d1aa:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  40d1ae:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40d1b2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d1b6:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40d1ba:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40d1be:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40d1c3:	0f 95 c0             	setne  %al
  40d1c6:	83 f0 01             	xor    $0x1,%eax
  40d1c9:	84 c0                	test   %al,%al
  40d1cb:	75 24                	jne    40d1f1 <_adSort+0xb0>
  40d1cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d1d1:	48 8b 15 28 74 00 00 	mov    0x7428(%rip),%rdx        # 414600 <_D_adSort10StackEntry6__initZ>
  40d1d8:	48 89 10             	mov    %rdx,(%rax)
  40d1db:	48 8b 15 26 74 00 00 	mov    0x7426(%rip),%rdx        # 414608 <_D_adSort10StackEntry6__initZ+0x8>
  40d1e2:	48 89 50 08          	mov    %rdx,0x8(%rax)
  40d1e6:	48 83 45 f0 10       	addq   $0x10,-0x10(%rbp)
  40d1eb:	48 ff 4d f8          	decq   -0x8(%rbp)
  40d1ef:	eb cd                	jmp    40d1be <_adSort+0x7d>
	StackEntry * sp = stack.ptr;
  40d1f1:	48 8d 85 80 fb ff ff 	lea    -0x480(%rbp),%rax
  40d1f8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	byte* lbound = cast(byte *) a.data;
  40d1fc:	48 8b 85 78 fb ff ff 	mov    -0x488(%rbp),%rax
  40d203:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	byte* rbound = cast(byte *) a.data + a.length * elem_size;
  40d207:	48 8b 95 78 fb ff ff 	mov    -0x488(%rbp),%rdx
  40d20e:	48 8b 85 70 fb ff ff 	mov    -0x490(%rbp),%rax
  40d215:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  40d21a:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40d21e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40d222:	eb 00                	jmp    40d224 <_adSort+0xe3>
	byte* li = void;
	byte* ri = void;

	while (1)
  40d224:	b8 00 00 00 00       	mov    $0x0,%eax
  40d229:	84 c0                	test   %al,%al
  40d22b:	0f 85 a8 03 00 00    	jne    40d5d9 <_adSort+0x498>
	{
		if (rbound - lbound > qsort_limit)
  40d231:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d235:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d239:	48 29 d0             	sub    %rdx,%rax
  40d23c:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40d240:	0f 86 8c 02 00 00    	jbe    40d4d2 <_adSort+0x391>
		{
			ti.swap(lbound,
  40d246:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d24d:	48 8b 00             	mov    (%rax),%rax
  40d250:	48 83 c0 48          	add    $0x48,%rax
  40d254:	4c 8b 00             	mov    (%rax),%r8
  40d257:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d25b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d25f:	48 29 d0             	sub    %rdx,%rax
  40d262:	48 89 c1             	mov    %rax,%rcx
  40d265:	48 d1 e9             	shr    %rcx
  40d268:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d26c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d270:	48 29 d0             	sub    %rdx,%rax
  40d273:	48 d1 e8             	shr    %rax
  40d276:	ba 00 00 00 00       	mov    $0x0,%edx
  40d27b:	48 f7 75 e8          	divq   -0x18(%rbp)
  40d27f:	48 89 d0             	mov    %rdx,%rax
  40d282:	48 89 ca             	mov    %rcx,%rdx
  40d285:	48 29 c2             	sub    %rax,%rdx
  40d288:	48 89 d0             	mov    %rdx,%rax
  40d28b:	48 89 c2             	mov    %rax,%rdx
  40d28e:	48 03 55 d0          	add    -0x30(%rbp),%rdx
  40d292:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40d296:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d29d:	41 ff d0             	callq  *%r8
				lbound + (
						  ((rbound - lbound) >>> 1) -
						  (((rbound - lbound) >>> 1) % elem_size)
						  ));

			li = lbound + elem_size;
  40d2a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d2a4:	48 03 45 d0          	add    -0x30(%rbp),%rax
  40d2a8:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
			ri = rbound - elem_size;
  40d2ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d2b0:	48 89 c2             	mov    %rax,%rdx
  40d2b3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d2b7:	48 29 d0             	sub    %rdx,%rax
  40d2ba:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

			if (ti.compare(li, ri) > 0)
  40d2be:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d2c5:	48 8b 00             	mov    (%rax),%rax
  40d2c8:	48 83 c0 38          	add    $0x38,%rax
  40d2cc:	48 8b 00             	mov    (%rax),%rax
  40d2cf:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d2d3:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40d2d7:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d2de:	ff d0                	callq  *%rax
  40d2e0:	85 c0                	test   %eax,%eax
  40d2e2:	7e 22                	jle    40d306 <_adSort+0x1c5>
				ti.swap(li, ri);
  40d2e4:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d2eb:	48 8b 00             	mov    (%rax),%rax
  40d2ee:	48 83 c0 48          	add    $0x48,%rax
  40d2f2:	48 8b 00             	mov    (%rax),%rax
  40d2f5:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d2f9:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40d2fd:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d304:	ff d0                	callq  *%rax
			if (ti.compare(lbound, ri) > 0)
  40d306:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d30d:	48 8b 00             	mov    (%rax),%rax
  40d310:	48 83 c0 38          	add    $0x38,%rax
  40d314:	48 8b 00             	mov    (%rax),%rax
  40d317:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d31b:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40d31f:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d326:	ff d0                	callq  *%rax
  40d328:	85 c0                	test   %eax,%eax
  40d32a:	7e 22                	jle    40d34e <_adSort+0x20d>
				ti.swap(lbound, ri);
  40d32c:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d333:	48 8b 00             	mov    (%rax),%rax
  40d336:	48 83 c0 48          	add    $0x48,%rax
  40d33a:	48 8b 00             	mov    (%rax),%rax
  40d33d:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d341:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40d345:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d34c:	ff d0                	callq  *%rax
			if (ti.compare(li, lbound) > 0)
  40d34e:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d355:	48 8b 00             	mov    (%rax),%rax
  40d358:	48 83 c0 38          	add    $0x38,%rax
  40d35c:	48 8b 00             	mov    (%rax),%rax
  40d35f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d363:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40d367:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d36e:	ff d0                	callq  *%rax
  40d370:	85 c0                	test   %eax,%eax
  40d372:	7e 22                	jle    40d396 <_adSort+0x255>
				ti.swap(li, lbound);
  40d374:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d37b:	48 8b 00             	mov    (%rax),%rax
  40d37e:	48 83 c0 48          	add    $0x48,%rax
  40d382:	48 8b 00             	mov    (%rax),%rax
  40d385:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d389:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40d38d:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d394:	ff d0                	callq  *%rax

			while (1)
  40d396:	b8 00 00 00 00       	mov    $0x0,%eax
  40d39b:	84 c0                	test   %al,%al
  40d39d:	0f 85 9f 00 00 00    	jne    40d442 <_adSort+0x301>
			{
				do
					li += elem_size;
  40d3a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d3a7:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  40d3ab:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d3b2:	48 8b 00             	mov    (%rax),%rax
  40d3b5:	48 83 c0 38          	add    $0x38,%rax
  40d3b9:	48 8b 00             	mov    (%rax),%rax
  40d3bc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d3c0:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40d3c4:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d3cb:	ff d0                	callq  *%rax
  40d3cd:	c1 e8 1f             	shr    $0x1f,%eax
  40d3d0:	83 f0 01             	xor    $0x1,%eax
  40d3d3:	84 c0                	test   %al,%al
  40d3d5:	75 02                	jne    40d3d9 <_adSort+0x298>
  40d3d7:	eb ca                	jmp    40d3a3 <_adSort+0x262>
				while (ti.compare(li, lbound) < 0);
				do
					ri -= elem_size;
  40d3d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d3dd:	48 29 45 b8          	sub    %rax,-0x48(%rbp)
  40d3e1:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d3e8:	48 8b 00             	mov    (%rax),%rax
  40d3eb:	48 83 c0 38          	add    $0x38,%rax
  40d3ef:	48 8b 00             	mov    (%rax),%rax
  40d3f2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d3f6:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40d3fa:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d401:	ff d0                	callq  *%rax
  40d403:	85 c0                	test   %eax,%eax
  40d405:	0f 9f c0             	setg   %al
  40d408:	83 f0 01             	xor    $0x1,%eax
  40d40b:	84 c0                	test   %al,%al
  40d40d:	75 02                	jne    40d411 <_adSort+0x2d0>
  40d40f:	eb c8                	jmp    40d3d9 <_adSort+0x298>
				while (ti.compare(ri, lbound) > 0);
				if (li > ri)
  40d411:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d415:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  40d419:	77 27                	ja     40d442 <_adSort+0x301>
					break;
				ti.swap(li, ri);
  40d41b:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d422:	48 8b 00             	mov    (%rax),%rax
  40d425:	48 83 c0 48          	add    $0x48,%rax
  40d429:	48 8b 00             	mov    (%rax),%rax
  40d42c:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d430:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40d434:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d43b:	ff d0                	callq  *%rax
  40d43d:	e9 54 ff ff ff       	jmpq   40d396 <_adSort+0x255>
			}
			ti.swap(lbound, ri);
  40d442:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d449:	48 8b 00             	mov    (%rax),%rax
  40d44c:	48 83 c0 48          	add    $0x48,%rax
  40d450:	48 8b 00             	mov    (%rax),%rax
  40d453:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d457:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40d45b:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d462:	ff d0                	callq  *%rax
			if (ri - lbound > rbound - li)
  40d464:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d468:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d46c:	48 29 d0             	sub    %rdx,%rax
  40d46f:	48 89 c1             	mov    %rax,%rcx
  40d472:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40d476:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d47a:	48 29 d0             	sub    %rdx,%rax
  40d47d:	48 39 c1             	cmp    %rax,%rcx
  40d480:	7e 24                	jle    40d4a6 <_adSort+0x365>
			{
				sp.l = lbound;
  40d482:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40d486:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d48a:	48 89 02             	mov    %rax,(%rdx)
				sp.r = ri;
  40d48d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40d491:	48 83 c2 08          	add    $0x8,%rdx
  40d495:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d499:	48 89 02             	mov    %rax,(%rdx)
				lbound = li;
  40d49c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d4a0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40d4a4:	eb 22                	jmp    40d4c8 <_adSort+0x387>
			}
			else
			{
				sp.l = li;
  40d4a6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40d4aa:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d4ae:	48 89 02             	mov    %rax,(%rdx)
				sp.r = rbound;
  40d4b1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40d4b5:	48 83 c2 08          	add    $0x8,%rdx
  40d4b9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d4bd:	48 89 02             	mov    %rax,(%rdx)
				rbound = ri;
  40d4c0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d4c4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			}
			++sp;
  40d4c8:	48 83 45 d8 10       	addq   $0x10,-0x28(%rbp)
  40d4cd:	e9 52 fd ff ff       	jmpq   40d224 <_adSort+0xe3>
		} else {
			// Use insertion sort
			for (ri = lbound, li = lbound + elem_size;
  40d4d2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d4d6:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40d4da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d4de:	48 03 45 d0          	add    -0x30(%rbp),%rax
  40d4e2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40d4e6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d4ea:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  40d4ee:	0f 92 c0             	setb   %al
  40d4f1:	83 f0 01             	xor    $0x1,%eax
  40d4f4:	84 c0                	test   %al,%al
  40d4f6:	0f 85 87 00 00 00    	jne    40d583 <_adSort+0x442>
				 li < rbound;
				 ri = li, li += elem_size)
			{
				for ( ; ti.compare(ri, ri + elem_size) > 0;
  40d4fc:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d503:	48 8b 00             	mov    (%rax),%rax
  40d506:	48 83 c0 38          	add    $0x38,%rax
  40d50a:	48 8b 08             	mov    (%rax),%rcx
  40d50d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d511:	48 89 c2             	mov    %rax,%rdx
  40d514:	48 03 55 b8          	add    -0x48(%rbp),%rdx
  40d518:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40d51c:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d523:	ff d1                	callq  *%rcx
  40d525:	85 c0                	test   %eax,%eax
  40d527:	0f 9f c0             	setg   %al
  40d52a:	83 f0 01             	xor    $0x1,%eax
  40d52d:	84 c0                	test   %al,%al
  40d52f:	75 3d                	jne    40d56e <_adSort+0x42d>
					  ri -= elem_size)
				{
					ti.swap(ri, ri + elem_size);
  40d531:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  40d538:	48 8b 00             	mov    (%rax),%rax
  40d53b:	48 83 c0 48          	add    $0x48,%rax
  40d53f:	48 8b 08             	mov    (%rax),%rcx
  40d542:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d546:	48 89 c2             	mov    %rax,%rdx
  40d549:	48 03 55 b8          	add    -0x48(%rbp),%rdx
  40d54d:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40d551:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  40d558:	ff d1                	callq  *%rcx
					if (ri == lbound)
  40d55a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d55e:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  40d562:	74 0a                	je     40d56e <_adSort+0x42d>
  40d564:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d568:	48 29 45 b8          	sub    %rax,-0x48(%rbp)
  40d56c:	eb 8e                	jmp    40d4fc <_adSort+0x3bb>
  40d56e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d572:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40d576:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d57a:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  40d57e:	e9 63 ff ff ff       	jmpq   40d4e6 <_adSort+0x3a5>
						break;
				}
			}
			if (sp != stack.ptr)
  40d583:	48 8d 85 80 fb ff ff 	lea    -0x480(%rbp),%rax
  40d58a:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  40d58e:	74 24                	je     40d5b4 <_adSort+0x473>
			{
				--sp;
  40d590:	48 83 6d d8 10       	subq   $0x10,-0x28(%rbp)
				lbound = sp.l;
  40d595:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d599:	48 8b 00             	mov    (%rax),%rax
  40d59c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
				rbound = sp.r;
  40d5a0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d5a4:	48 83 c0 08          	add    $0x8,%rax
  40d5a8:	48 8b 00             	mov    (%rax),%rax
  40d5ab:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40d5af:	e9 70 fc ff ff       	jmpq   40d224 <_adSort+0xe3>
			}
			else
				return a;
  40d5b4:	48 8b 85 70 fb ff ff 	mov    -0x490(%rbp),%rax
  40d5bb:	48 8b 95 60 fb ff ff 	mov    -0x4a0(%rbp),%rdx
  40d5c2:	48 89 02             	mov    %rax,(%rdx)
  40d5c5:	48 8b 85 78 fb ff ff 	mov    -0x488(%rbp),%rax
  40d5cc:	48 8b 95 60 fb ff ff 	mov    -0x4a0(%rbp),%rdx
  40d5d3:	48 89 42 08          	mov    %rax,0x8(%rdx)
  40d5d7:	eb 3d                	jmp    40d616 <_adSort+0x4d5>
	byte* li = void;
	byte* ri = void;

	while (1)
	{
		if (rbound - lbound > qsort_limit)
  40d5d9:	48 c7 45 90 0b 00 00 	movq   $0xb,-0x70(%rbp)
  40d5e0:	00 
  40d5e1:	48 c7 45 98 52 27 41 	movq   $0x412752,-0x68(%rbp)
  40d5e8:	00 
  40d5e9:	48 c7 45 a0 19 00 00 	movq   $0x19,-0x60(%rbp)
  40d5f0:	00 
  40d5f1:	48 c7 45 a8 10 46 41 	movq   $0x414610,-0x58(%rbp)
  40d5f8:	00 
  40d5f9:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40d5fd:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
  40d601:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  40d605:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40d609:	41 b8 db 03 00 00    	mov    $0x3db,%r8d
  40d60f:	e8 e9 d7 ff ff       	callq  40adfd <_d_assert_msg>
			}
			else
				return a;
		}
	}
}
  40d614:	eb 07                	jmp    40d61d <_adSort+0x4dc>
  40d616:	48 8b 85 60 fb ff ff 	mov    -0x4a0(%rbp),%rax
  40d61d:	c9                   	leaveq 
  40d61e:	c3                   	retq   

000000000040d61f <_d_arraycast>:

void[] _d_arraycast(size_t tsize, size_t fsize, void[] a)
  40d61f:	55                   	push   %rbp
  40d620:	48 89 e5             	mov    %rsp,%rbp
  40d623:	48 83 ec 50          	sub    $0x50,%rsp
  40d627:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40d62b:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40d62f:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40d633:	4c 89 c0             	mov    %r8,%rax
  40d636:	48 89 ca             	mov    %rcx,%rdx
  40d639:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  40d63d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
{
	auto length = a.length;
  40d641:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d645:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto nbytes = length * fsize;
  40d649:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d64d:	48 0f af 45 d0       	imul   -0x30(%rbp),%rax
  40d652:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	if(nbytes % tsize != 0)
  40d656:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d65a:	ba 00 00 00 00       	mov    $0x0,%edx
  40d65f:	48 f7 75 d8          	divq   -0x28(%rbp)
  40d663:	48 89 d0             	mov    %rdx,%rax
  40d666:	48 85 c0             	test   %rax,%rax
  40d669:	74 34                	je     40d69f <_d_arraycast+0x80>
		throw new Exception("array cast misalignment");
  40d66b:	48 c7 45 e0 17 00 00 	movq   $0x17,-0x20(%rbp)
  40d672:	00 
  40d673:	48 c7 45 e8 2a 46 41 	movq   $0x41462a,-0x18(%rbp)
  40d67a:	00 
  40d67b:	48 c7 c7 80 c6 41 00 	mov    $0x41c680,%rdi
  40d682:	e8 ae cb ff ff       	callq  40a235 <_d_newclass>
  40d687:	48 89 c7             	mov    %rax,%rdi
  40d68a:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40d68e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d692:	e8 fb bb ff ff       	callq  409292 <_D6object9Exception5_ctorMFAaZC9Exception>
  40d697:	48 89 c7             	mov    %rax,%rdi
  40d69a:	e8 4f da ff ff       	callq  40b0ee <_d_throw>

	length = nbytes / tsize;
  40d69f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d6a3:	ba 00 00 00 00       	mov    $0x0,%edx
  40d6a8:	48 f7 75 d8          	divq   -0x28(%rbp)
  40d6ac:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(size_t *)&a = length; // jam new length
  40d6b0:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  40d6b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d6b8:	48 89 02             	mov    %rax,(%rdx)
	return a;
  40d6bb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d6bf:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d6c3:	48 89 02             	mov    %rax,(%rdx)
  40d6c6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d6ca:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d6ce:	48 89 42 08          	mov    %rax,0x8(%rdx)
}
  40d6d2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d6d6:	c9                   	leaveq 
  40d6d7:	c3                   	retq   

000000000040d6d8 <_d_arraycopy>:

byte[] _d_arraycopy(size_t size, byte[] from, byte[] to)
  40d6d8:	55                   	push   %rbp
  40d6d9:	48 89 e5             	mov    %rsp,%rbp
  40d6dc:	48 83 ec 50          	sub    $0x50,%rsp
  40d6e0:	48 89 7d b0          	mov    %rdi,-0x50(%rbp)
  40d6e4:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40d6e8:	4c 89 c6             	mov    %r8,%rsi
  40d6eb:	4c 89 cf             	mov    %r9,%rdi
  40d6ee:	48 89 d0             	mov    %rdx,%rax
  40d6f1:	48 89 ca             	mov    %rcx,%rdx
  40d6f4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40d6f8:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40d6fc:	48 89 f0             	mov    %rsi,%rax
  40d6ff:	48 89 fa             	mov    %rdi,%rdx
  40d702:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40d706:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
{
	if(to.length != from.length)
  40d70a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d70e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d712:	48 39 c2             	cmp    %rax,%rdx
  40d715:	74 39                	je     40d750 <_d_arraycopy+0x78>
		throw new Exception("lengths don't match for array copy");
  40d717:	48 c7 45 e0 22 00 00 	movq   $0x22,-0x20(%rbp)
  40d71e:	00 
  40d71f:	48 c7 45 e8 48 46 41 	movq   $0x414648,-0x18(%rbp)
  40d726:	00 
  40d727:	48 c7 c7 80 c6 41 00 	mov    $0x41c680,%rdi
  40d72e:	e8 02 cb ff ff       	callq  40a235 <_d_newclass>
  40d733:	48 89 c7             	mov    %rax,%rdi
  40d736:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40d73a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d73e:	e8 4f bb ff ff       	callq  409292 <_D6object9Exception5_ctorMFAaZC9Exception>
  40d743:	48 89 c7             	mov    %rax,%rdi
  40d746:	e8 a3 d9 ff ff       	callq  40b0ee <_d_throw>
  40d74b:	e9 81 00 00 00       	jmpq   40d7d1 <_d_arraycopy+0xf9>
	else if(cast(byte *)to + to.length * size <= cast(byte *)from || cast(byte *)from + from.length * size <= cast(byte *)to)
  40d750:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40d754:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d758:	48 0f af 45 d8       	imul   -0x28(%rbp),%rax
  40d75d:	48 01 c2             	add    %rax,%rdx
  40d760:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d764:	48 39 c2             	cmp    %rax,%rdx
  40d767:	76 19                	jbe    40d782 <_d_arraycopy+0xaa>
  40d769:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d76d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d771:	48 0f af 45 d8       	imul   -0x28(%rbp),%rax
  40d776:	48 01 c2             	add    %rax,%rdx
  40d779:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d77d:	48 39 c2             	cmp    %rax,%rdx
  40d780:	77 1b                	ja     40d79d <_d_arraycopy+0xc5>
		memcpy(cast(byte *)to, cast(byte *)from, to.length * size);
  40d782:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d786:	48 89 c2             	mov    %rax,%rdx
  40d789:	48 0f af 55 d8       	imul   -0x28(%rbp),%rdx
  40d78e:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40d792:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40d796:	e8 55 00 00 00       	callq  40d7f0 <memcpy>

byte[] _d_arraycopy(size_t size, byte[] from, byte[] to)
{
	if(to.length != from.length)
		throw new Exception("lengths don't match for array copy");
	else if(cast(byte *)to + to.length * size <= cast(byte *)from || cast(byte *)from + from.length * size <= cast(byte *)to)
  40d79b:	eb 34                	jmp    40d7d1 <_d_arraycopy+0xf9>
		memcpy(cast(byte *)to, cast(byte *)from, to.length * size);
	else
		throw new Exception("overlapping array copy");
  40d79d:	48 c7 45 f0 16 00 00 	movq   $0x16,-0x10(%rbp)
  40d7a4:	00 
  40d7a5:	48 c7 45 f8 6b 46 41 	movq   $0x41466b,-0x8(%rbp)
  40d7ac:	00 
  40d7ad:	48 c7 c7 80 c6 41 00 	mov    $0x41c680,%rdi
  40d7b4:	e8 7c ca ff ff       	callq  40a235 <_d_newclass>
  40d7b9:	48 89 c7             	mov    %rax,%rdi
  40d7bc:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  40d7c0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40d7c4:	e8 c9 ba ff ff       	callq  409292 <_D6object9Exception5_ctorMFAaZC9Exception>
  40d7c9:	48 89 c7             	mov    %rax,%rdi
  40d7cc:	e8 1d d9 ff ff       	callq  40b0ee <_d_throw>

	return to;
  40d7d1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d7d5:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40d7d9:	48 89 02             	mov    %rax,(%rdx)
  40d7dc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d7e0:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40d7e4:	48 89 42 08          	mov    %rax,0x8(%rdx)
}
  40d7e8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40d7ec:	c9                   	leaveq 
  40d7ed:	c3                   	retq   
  40d7ee:	90                   	nop    
  40d7ef:	90                   	nop    

000000000040d7f0 <memcpy>:
		dest = A pointer to the piece of memory serving as the copy destination.
		src = A pointer to the piece of memory serving as the copy source.
		count = The number of bytes to copy form src to dest.
	Returns: A void pointer to the start of the destination data (dest).
*/
extern(C) void* memcpy(void* dest, void* src, size_t count)
  40d7f0:	55                   	push   %rbp
  40d7f1:	48 89 e5             	mov    %rsp,%rbp
  40d7f4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d7f8:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40d7fc:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
{
	ubyte* d = cast(ubyte*)dest;
  40d800:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d804:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	ubyte* s = cast(ubyte*)src;
  40d808:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d80c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	for(size_t i = count; count; count--, d++, s++)
  40d810:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d814:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d818:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  40d81d:	0f 95 c0             	setne  %al
  40d820:	83 f0 01             	xor    $0x1,%eax
  40d823:	84 c0                	test   %al,%al
  40d825:	75 25                	jne    40d84c <memcpy+0x5c>
		*d = *s;
  40d827:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d82b:	0f b6 10             	movzbl (%rax),%edx
  40d82e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d832:	88 10                	mov    %dl,(%rax)
  40d834:	48 ff 4d c8          	decq   -0x38(%rbp)
  40d838:	b8 01 00 00 00       	mov    $0x1,%eax
  40d83d:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  40d841:	b8 01 00 00 00       	mov    $0x1,%eax
  40d846:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  40d84a:	eb cc                	jmp    40d818 <memcpy+0x28>

	return dest;
  40d84c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
  40d850:	c9                   	leaveq 
  40d851:	c3                   	retq   

000000000040d852 <memmove>:

/**
Memcpy and memmove only really have differences at the user level, where they have slightly
different semantics.  Here, they're pretty much the same.
*/
extern(C) void* memmove(void* dest, void* src, size_t count)
  40d852:	55                   	push   %rbp
  40d853:	48 89 e5             	mov    %rsp,%rbp
  40d856:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d85a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40d85e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
{
	ubyte* d = cast(ubyte*)dest;
  40d862:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d866:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	ubyte* s = cast(ubyte*)src;
  40d86a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d86e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	for(size_t i = count; count; count--, d++, s++)
  40d872:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d876:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d87a:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  40d87f:	0f 95 c0             	setne  %al
  40d882:	83 f0 01             	xor    $0x1,%eax
  40d885:	84 c0                	test   %al,%al
  40d887:	75 25                	jne    40d8ae <memmove+0x5c>
	  *d = *s;
  40d889:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d88d:	0f b6 10             	movzbl (%rax),%edx
  40d890:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d894:	88 10                	mov    %dl,(%rax)
  40d896:	48 ff 4d c8          	decq   -0x38(%rbp)
  40d89a:	b8 01 00 00 00       	mov    $0x1,%eax
  40d89f:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  40d8a3:	b8 01 00 00 00       	mov    $0x1,%eax
  40d8a8:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  40d8ac:	eb cc                	jmp    40d87a <memmove+0x28>

	return dest;
  40d8ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
  40d8b2:	c9                   	leaveq 
  40d8b3:	c3                   	retq   

000000000040d8b4 <_D6kernel4core6system6memcmpFPvPvmZl>:
	n = The number of bytes to compare.

Returns:
	 0 if they are equal, < 0 if a is less than b, and > 0 if a is greater than b.
*/
long memcmp(void* a, void* b, size_t n)
  40d8b4:	55                   	push   %rbp
  40d8b5:	48 89 e5             	mov    %rsp,%rbp
  40d8b8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d8bc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40d8c0:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
{
	ubyte* str_a = cast(ubyte*)a;
  40d8c4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d8c8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	ubyte* str_b = cast(ubyte*)b;
  40d8cc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d8d0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	for(size_t i = 0; i < n; i++)
  40d8d4:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40d8db:	00 
  40d8dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d8e0:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  40d8e4:	0f 92 c0             	setb   %al
  40d8e7:	83 f0 01             	xor    $0x1,%eax
  40d8ea:	84 c0                	test   %al,%al
  40d8ec:	75 48                	jne    40d936 <_D6kernel4core6system6memcmpFPvPvmZl+0x82>
	{
		if(*str_a != *str_b)
  40d8ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d8f2:	0f b6 00             	movzbl (%rax),%eax
  40d8f5:	0f b6 d0             	movzbl %al,%edx
  40d8f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d8fc:	0f b6 00             	movzbl (%rax),%eax
  40d8ff:	0f b6 c0             	movzbl %al,%eax
  40d902:	39 c2                	cmp    %eax,%edx
  40d904:	74 22                	je     40d928 <_D6kernel4core6system6memcmpFPvPvmZl+0x74>
			return *str_a - *str_b;
  40d906:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d90a:	0f b6 00             	movzbl (%rax),%eax
  40d90d:	0f b6 d0             	movzbl %al,%edx
  40d910:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d914:	0f b6 00             	movzbl (%rax),%eax
  40d917:	0f b6 c0             	movzbl %al,%eax
  40d91a:	89 d1                	mov    %edx,%ecx
  40d91c:	29 c1                	sub    %eax,%ecx
  40d91e:	89 c8                	mov    %ecx,%eax
  40d920:	48 98                	cltq   
  40d922:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40d926:	eb 16                	jmp    40d93e <_D6kernel4core6system6memcmpFPvPvmZl+0x8a>

		str_a++;
  40d928:	48 ff 45 f0          	incq   -0x10(%rbp)
		str_b++;
  40d92c:	48 ff 45 e8          	incq   -0x18(%rbp)
  40d930:	48 ff 45 f8          	incq   -0x8(%rbp)
  40d934:	eb a6                	jmp    40d8dc <_D6kernel4core6system6memcmpFPvPvmZl+0x28>
	}
	
	return 0;
  40d936:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  40d93d:	00 
  40d93e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
}
  40d942:	c9                   	leaveq 
  40d943:	c3                   	retq   

000000000040d944 <_D6kernel4core6system6memsetFPvhkZv>:
	Params:
		addr = The address of the piece of memory you wish to write.
		val = The value you wish to write to memory.
		numBytes = The number of bytes you would like to write to memory.
*/
void memset(void *addr, ubyte val, uint numBytes){
  40d944:	55                   	push   %rbp
  40d945:	48 89 e5             	mov    %rsp,%rbp
  40d948:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40d94c:	40 88 75 e7          	mov    %sil,-0x19(%rbp)
  40d950:	89 55 e0             	mov    %edx,-0x20(%rbp)
     ubyte *data = cast(ubyte*) addr;
  40d953:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d957:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

     for(int i = 0; i < numBytes; i++){
  40d95b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40d962:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40d965:	3b 45 e0             	cmp    -0x20(%rbp),%eax
  40d968:	0f 92 c0             	setb   %al
  40d96b:	83 f0 01             	xor    $0x1,%eax
  40d96e:	84 c0                	test   %al,%al
  40d970:	75 17                	jne    40d989 <_D6kernel4core6system6memsetFPvhkZv+0x45>
          data[i] = val;
  40d972:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40d975:	48 98                	cltq   
  40d977:	48 89 c2             	mov    %rax,%rdx
  40d97a:	48 03 55 f0          	add    -0x10(%rbp),%rdx
  40d97e:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  40d982:	88 02                	mov    %al,(%rdx)
  40d984:	ff 45 fc             	incl   -0x4(%rbp)
  40d987:	eb d9                	jmp    40d962 <_D6kernel4core6system6memsetFPvhkZv+0x1e>
     }
}
  40d989:	c9                   	leaveq 
  40d98a:	c3                   	retq   

000000000040d98b <_D6kernel4core6system6strlenFPaZm>:
This function determines the size of a passed-in string.
	Params: 
		s = A pointer to the beginning of a character array, declaring a string.
	Returns: The size of the string in size_t format.
*/
size_t strlen(char* s)
  40d98b:	55                   	push   %rbp
  40d98c:	48 89 e5             	mov    %rsp,%rbp
  40d98f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
{
	size_t i = 0;
  40d993:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40d99a:	00 
	for( ; *s != 0; i++, s++){}
  40d99b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d99f:	0f b6 00             	movzbl (%rax),%eax
  40d9a2:	0f b6 c0             	movzbl %al,%eax
  40d9a5:	85 c0                	test   %eax,%eax
  40d9a7:	0f 95 c0             	setne  %al
  40d9aa:	83 f0 01             	xor    $0x1,%eax
  40d9ad:	84 c0                	test   %al,%al
  40d9af:	75 0f                	jne    40d9c0 <_D6kernel4core6system6strlenFPaZm+0x35>
  40d9b1:	48 ff 45 f8          	incq   -0x8(%rbp)
  40d9b5:	b8 01 00 00 00       	mov    $0x1,%eax
  40d9ba:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  40d9be:	eb db                	jmp    40d99b <_D6kernel4core6system6strlenFPaZm+0x10>
	return i;
  40d9c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  40d9c4:	c9                   	leaveq 
  40d9c5:	c3                   	retq   

000000000040d9c6 <_D6kernel4core6system8toStringFPaZAa>:
This function takes in a character pointer and returns a character array, or a string.
	Params:
		s = A pointer to the character(s) you wish to translate to a string.
	Returns: A character array (string) containing the information.
*/
char[] toString(char* s)
  40d9c6:	55                   	push   %rbp
  40d9c7:	48 89 e5             	mov    %rsp,%rbp
  40d9ca:	53                   	push   %rbx
  40d9cb:	48 83 ec 08          	sub    $0x8,%rsp
  40d9cf:	48 89 fb             	mov    %rdi,%rbx
  40d9d2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
{
	return s[0 .. strlen(s)];
  40d9d6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40d9da:	e8 ac ff ff ff       	callq  40d98b <_D6kernel4core6system6strlenFPaZm>
  40d9df:	48 89 03             	mov    %rax,(%rbx)
  40d9e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d9e6:	48 89 43 08          	mov    %rax,0x8(%rbx)
}
  40d9ea:	48 89 d8             	mov    %rbx,%rax
  40d9ed:	48 83 c4 08          	add    $0x8,%rsp
  40d9f1:	5b                   	pop    %rbx
  40d9f2:	c9                   	leaveq 
  40d9f3:	c3                   	retq   

000000000040d9f4 <_D6kernel4core6system5isnanFeZi>:
	Params:
		e = The value / piece of information you would like to check for number status.
	Returns: 
		0 if it isn't a NaN, non-zero if it is.
*/
int isnan(real e)
  40d9f4:	55                   	push   %rbp
  40d9f5:	48 89 e5             	mov    %rsp,%rbp
{
    ushort* pe = cast(ushort *)&e;
  40d9f8:	48 8d 45 10          	lea    0x10(%rbp),%rax
  40d9fc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    ulong*  ps = cast(ulong *)&e;
  40da00:	48 8d 45 10          	lea    0x10(%rbp),%rax
  40da04:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    return (pe[4] & 0x7FFF) == 0x7FFF &&
  40da08:	b8 08 00 00 00       	mov    $0x8,%eax
  40da0d:	48 03 45 f8          	add    -0x8(%rbp),%rax
  40da11:	0f b7 00             	movzwl (%rax),%eax
  40da14:	0f b7 c0             	movzwl %ax,%eax
  40da17:	25 ff 7f 00 00       	and    $0x7fff,%eax
  40da1c:	3d ff 7f 00 00       	cmp    $0x7fff,%eax
  40da21:	75 1f                	jne    40da42 <_D6kernel4core6system5isnanFeZi+0x4e>
  40da23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40da27:	48 8b 10             	mov    (%rax),%rdx
  40da2a:	48 b8 ff ff ff ff ff 	mov    $0x7fffffffffffffff,%rax
  40da31:	ff ff 7f 
  40da34:	48 21 d0             	and    %rdx,%rax
  40da37:	48 85 c0             	test   %rax,%rax
  40da3a:	74 06                	je     40da42 <_D6kernel4core6system5isnanFeZi+0x4e>
  40da3c:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  40da40:	eb 04                	jmp    40da46 <_D6kernel4core6system5isnanFeZi+0x52>
  40da42:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  40da46:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
	    *ps & 0x7FFFFFFFFFFFFFFF;
}
  40da4a:	c9                   	leaveq 
  40da4b:	c3                   	retq   

000000000040da4c <_D4user7syscall3addFllZl>:
  40da4c:	55                   	push   %rbp
  40da4d:	48 89 e5             	mov    %rsp,%rbp
  40da50:	48 83 ec 50          	sub    $0x50,%rsp
  40da54:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40da58:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  40da5c:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  40da63:	00 
  40da64:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  40da6b:	00 
  40da6c:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40da73:	00 
  40da74:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40da78:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40da7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40da80:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40da84:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40da88:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40da8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40da90:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40da94:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  40da98:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
  40da9c:	bf 00 00 00 00       	mov    $0x0,%edi
  40daa1:	e8 fa 05 00 00       	callq  40e0a0 <nativeSyscall>
  40daa6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40daaa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40daae:	c9                   	leaveq 
  40daaf:	c3                   	retq   

000000000040dab0 <_D4user7syscall9allocPageFZPv>:
  40dab0:	55                   	push   %rbp
  40dab1:	48 89 e5             	mov    %rsp,%rbp
  40dab4:	48 83 ec 20          	sub    $0x20,%rsp
  40dab8:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40dabf:	00 
  40dac0:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  40dac4:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  40dac8:	bf 01 00 00 00       	mov    $0x1,%edi
  40dacd:	e8 ce 05 00 00       	callq  40e0a0 <nativeSyscall>
  40dad2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40dad6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40dada:	c9                   	leaveq 
  40dadb:	c3                   	retq   

000000000040dadc <_D4user7syscall4exitFlZv>:
  40dadc:	55                   	push   %rbp
  40dadd:	48 89 e5             	mov    %rsp,%rbp
  40dae0:	48 83 ec 40          	sub    $0x40,%rsp
  40dae4:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40dae8:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40daef:	00 
  40daf0:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40daf7:	00 
  40daf8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dafc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40db00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40db04:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40db08:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  40db0c:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  40db10:	bf 02 00 00 00       	mov    $0x2,%edi
  40db15:	e8 86 05 00 00       	callq  40e0a0 <nativeSyscall>
  40db1a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40db1e:	c9                   	leaveq 
  40db1f:	c3                   	retq   

000000000040db20 <_D4user7syscall8freePageFZv>:
  40db20:	55                   	push   %rbp
  40db21:	48 89 e5             	mov    %rsp,%rbp
  40db24:	48 83 ec 20          	sub    $0x20,%rsp
  40db28:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40db2f:	00 
  40db30:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  40db34:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  40db38:	bf 03 00 00 00       	mov    $0x3,%edi
  40db3d:	e8 5e 05 00 00       	callq  40e0a0 <nativeSyscall>
  40db42:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40db46:	c9                   	leaveq 
  40db47:	c3                   	retq   

000000000040db48 <_D4user7syscall5yieldFZv>:
  40db48:	55                   	push   %rbp
  40db49:	48 89 e5             	mov    %rsp,%rbp
  40db4c:	48 83 ec 20          	sub    $0x20,%rsp
  40db50:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40db57:	00 
  40db58:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  40db5c:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  40db60:	bf 04 00 00 00       	mov    $0x4,%edi
  40db65:	e8 36 05 00 00       	callq  40e0a0 <nativeSyscall>
  40db6a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40db6e:	c9                   	leaveq 
  40db6f:	c3                   	retq   

000000000040db70 <_D4user7syscall5errorFAaZv>:
  40db70:	55                   	push   %rbp
  40db71:	48 89 e5             	mov    %rsp,%rbp
  40db74:	48 83 ec 50          	sub    $0x50,%rsp
  40db78:	48 89 f8             	mov    %rdi,%rax
  40db7b:	48 89 f2             	mov    %rsi,%rdx
  40db7e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40db82:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  40db86:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40db8d:	00 
  40db8e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40db95:	00 
  40db96:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40db9d:	00 
  40db9e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40dba2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40dba6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40dbaa:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40dbae:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40dbb2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40dbb6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dbba:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40dbbe:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  40dbc2:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  40dbc6:	bf 05 00 00 00       	mov    $0x5,%edi
  40dbcb:	e8 d0 04 00 00       	callq  40e0a0 <nativeSyscall>
  40dbd0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40dbd4:	c9                   	leaveq 
  40dbd5:	c3                   	retq   

000000000040dbd6 <_D4user7syscall10depositKeyFsZv>:
  40dbd6:	55                   	push   %rbp
  40dbd7:	48 89 e5             	mov    %rsp,%rbp
  40dbda:	48 83 ec 40          	sub    $0x40,%rsp
  40dbde:	66 89 7d ce          	mov    %di,-0x32(%rbp)
  40dbe2:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40dbe9:	00 
  40dbea:	66 c7 45 e0 00 00    	movw   $0x0,-0x20(%rbp)
  40dbf0:	0f b7 45 ce          	movzwl -0x32(%rbp),%eax
  40dbf4:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
  40dbf8:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  40dbfc:	66 89 45 e0          	mov    %ax,-0x20(%rbp)
  40dc00:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  40dc04:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  40dc08:	bf 06 00 00 00       	mov    $0x6,%edi
  40dc0d:	e8 8e 04 00 00       	callq  40e0a0 <nativeSyscall>
  40dc12:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40dc16:	c9                   	leaveq 
  40dc17:	c3                   	retq   

000000000040dc18 <_D4user7syscall12initKeyboardFZS4user7syscall12KeyboardInfo>:
  40dc18:	55                   	push   %rbp
  40dc19:	48 89 e5             	mov    %rsp,%rbp
  40dc1c:	53                   	push   %rbx
  40dc1d:	48 83 ec 38          	sub    $0x38,%rsp
  40dc21:	48 89 fb             	mov    %rdi,%rbx
  40dc24:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  40dc2b:	00 
  40dc2c:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  40dc33:	00 
  40dc34:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  40dc3b:	00 
  40dc3c:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40dc43:	00 
  40dc44:	48 8d 55 e7          	lea    -0x19(%rbp),%rdx
  40dc48:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  40dc4c:	bf 07 00 00 00       	mov    $0x7,%edi
  40dc51:	e8 4a 04 00 00       	callq  40e0a0 <nativeSyscall>
  40dc56:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40dc5a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40dc5e:	48 89 03             	mov    %rax,(%rbx)
  40dc61:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dc65:	48 89 43 08          	mov    %rax,0x8(%rbx)
  40dc69:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40dc6d:	48 89 43 10          	mov    %rax,0x10(%rbx)
  40dc71:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40dc75:	48 89 43 18          	mov    %rax,0x18(%rbx)
  40dc79:	48 89 d8             	mov    %rbx,%rax
  40dc7c:	48 83 c4 38          	add    $0x38,%rsp
  40dc80:	5b                   	pop    %rbx
  40dc81:	c9                   	leaveq 
  40dc82:	c3                   	retq   

000000000040dc83 <_D4user7syscall11initConsoleFZS4user7syscall11ConsoleInfo>:
  40dc83:	55                   	push   %rbp
  40dc84:	48 89 e5             	mov    %rsp,%rbp
  40dc87:	53                   	push   %rbx
  40dc88:	48 83 ec 38          	sub    $0x38,%rsp
  40dc8c:	48 89 fb             	mov    %rdi,%rbx
  40dc8f:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  40dc96:	00 
  40dc97:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  40dc9e:	00 
  40dc9f:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  40dca6:	00 
  40dca7:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40dcae:	00 
  40dcaf:	48 8d 55 e7          	lea    -0x19(%rbp),%rdx
  40dcb3:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  40dcb7:	bf 08 00 00 00       	mov    $0x8,%edi
  40dcbc:	e8 df 03 00 00       	callq  40e0a0 <nativeSyscall>
  40dcc1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40dcc5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40dcc9:	48 89 03             	mov    %rax,(%rbx)
  40dccc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dcd0:	48 89 43 08          	mov    %rax,0x8(%rbx)
  40dcd4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40dcd8:	48 89 43 10          	mov    %rax,0x10(%rbx)
  40dcdc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40dce0:	48 89 43 18          	mov    %rax,0x18(%rbx)
  40dce4:	48 89 d8             	mov    %rbx,%rax
  40dce7:	48 83 c4 38          	add    $0x38,%rsp
  40dceb:	5b                   	pop    %rbx
  40dcec:	c9                   	leaveq 
  40dced:	c3                   	retq   

000000000040dcee <_D4user7syscall15makeEnvironmentFiZv>:
  40dcee:	55                   	push   %rbp
  40dcef:	48 89 e5             	mov    %rsp,%rbp
  40dcf2:	48 83 ec 40          	sub    $0x40,%rsp
  40dcf6:	89 7d cc             	mov    %edi,-0x34(%rbp)
  40dcf9:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40dd00:	00 
  40dd01:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  40dd08:	8b 45 cc             	mov    -0x34(%rbp),%eax
  40dd0b:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40dd0e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40dd11:	89 45 e0             	mov    %eax,-0x20(%rbp)
  40dd14:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  40dd18:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  40dd1c:	bf 09 00 00 00       	mov    $0x9,%edi
  40dd21:	e8 7a 03 00 00       	callq  40e0a0 <nativeSyscall>
  40dd26:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40dd2a:	c9                   	leaveq 
  40dd2b:	c3                   	retq   

000000000040dd2c <_D4user7syscall4forkFZi>:
  40dd2c:	55                   	push   %rbp
  40dd2d:	48 89 e5             	mov    %rsp,%rbp
  40dd30:	48 83 ec 10          	sub    $0x10,%rsp
  40dd34:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  40dd3b:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  40dd3f:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  40dd43:	bf 0a 00 00 00       	mov    $0xa,%edi
  40dd48:	e8 53 03 00 00       	callq  40e0a0 <nativeSyscall>
  40dd4d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40dd51:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40dd54:	c9                   	leaveq 
  40dd55:	c3                   	retq   

000000000040dd56 <_D4user7syscall4execFZi>:
  40dd56:	55                   	push   %rbp
  40dd57:	48 89 e5             	mov    %rsp,%rbp
  40dd5a:	48 83 ec 10          	sub    $0x10,%rsp
  40dd5e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  40dd65:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  40dd69:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  40dd6d:	bf 0b 00 00 00       	mov    $0xb,%edi
  40dd72:	e8 29 03 00 00       	callq  40e0a0 <nativeSyscall>
  40dd77:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40dd7b:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40dd7e:	c9                   	leaveq 
  40dd7f:	c3                   	retq   

000000000040dd80 <_D6kernel4core4util10CHECK_FLAGFkkZk>:
	Params:
		flags = The flags from the multiboot header the kernel wishes to check.
		bit = The number of the bit the kernel would like to check for data.
	Returns: Whether the bit "bit" in "flags" has a value (1 if it is set, 0 if it is not)
*/
uint CHECK_FLAG(uint flags, uint bit)
  40dd80:	55                   	push   %rbp
  40dd81:	48 89 e5             	mov    %rsp,%rbp
  40dd84:	89 7d fc             	mov    %edi,-0x4(%rbp)
  40dd87:	89 75 f8             	mov    %esi,-0x8(%rbp)
{
	return ((flags) & (1 << (bit)));
  40dd8a:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  40dd8d:	b8 01 00 00 00       	mov    $0x1,%eax
  40dd92:	d3 e0                	shl    %cl,%eax
  40dd94:	23 45 fc             	and    -0x4(%rbp),%eax
}
  40dd97:	c9                   	leaveq 
  40dd98:	c3                   	retq   

000000000040dd99 <_D6kernel4core4util4itoaFAaalZAa>:
		base = The base of the integer value. If "d," it will be assumed to be decimal. If "x," the integer
			will be hexadecimal.
		d = The integer to translate.
	Returns: The translated string in a character array.
*/
char[] itoa(char[] buf, char base, long d)
  40dd99:	55                   	push   %rbp
  40dd9a:	48 89 e5             	mov    %rsp,%rbp
  40dd9d:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  40dda4:	48 89 bd f0 fe ff ff 	mov    %rdi,-0x110(%rbp)
  40ddab:	88 8d 6f ff ff ff    	mov    %cl,-0x91(%rbp)
  40ddb1:	4c 89 85 60 ff ff ff 	mov    %r8,-0xa0(%rbp)
  40ddb8:	48 89 f0             	mov    %rsi,%rax
  40ddbb:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  40ddc2:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
{
	size_t p = buf.length - 1;
  40ddc9:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40ddd0:	48 ff c8             	dec    %rax
  40ddd3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	size_t startIdx = 0;
  40ddd7:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40ddde:	00 
	ulong ud = d;
  40dddf:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40dde6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	bool negative = false;
  40ddea:	c6 45 d7 00          	movb   $0x0,-0x29(%rbp)

	int divisor = 10;
  40ddee:	c7 45 d0 0a 00 00 00 	movl   $0xa,-0x30(%rbp)

	// If %d is specified and D is minus, put `-' in the head.
	if(base == 'd' && d < 0)
  40ddf5:	0f b6 85 6f ff ff ff 	movzbl -0x91(%rbp),%eax
  40ddfc:	83 f8 64             	cmp    $0x64,%eax
  40ddff:	75 1e                	jne    40de1f <_D6kernel4core4util4itoaFAaalZAa+0x86>
  40de01:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  40de08:	00 
  40de09:	79 14                	jns    40de1f <_D6kernel4core4util4itoaFAaalZAa+0x86>
	{
		negative = true;
  40de0b:	c6 45 d7 01          	movb   $0x1,-0x29(%rbp)
		ud = -d;
  40de0f:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40de16:	48 f7 d8             	neg    %rax
  40de19:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	bool negative = false;

	int divisor = 10;

	// If %d is specified and D is minus, put `-' in the head.
	if(base == 'd' && d < 0)
  40de1d:	eb 13                	jmp    40de32 <_D6kernel4core4util4itoaFAaalZAa+0x99>
	{
		negative = true;
		ud = -d;
	}
	else if(base == 'x')
  40de1f:	0f b6 85 6f ff ff ff 	movzbl -0x91(%rbp),%eax
  40de26:	83 f8 78             	cmp    $0x78,%eax
  40de29:	75 07                	jne    40de32 <_D6kernel4core4util4itoaFAaalZAa+0x99>
		divisor = 16;
  40de2b:	c7 45 d0 10 00 00 00 	movl   $0x10,-0x30(%rbp)

	// Divide UD by DIVISOR until UD == 0.
	do
	{
		int remainder = ud % divisor;
  40de32:	8b 45 d0             	mov    -0x30(%rbp),%eax
  40de35:	48 63 d0             	movslq %eax,%rdx
  40de38:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40de3c:	48 89 d1             	mov    %rdx,%rcx
  40de3f:	ba 00 00 00 00       	mov    $0x0,%edx
  40de44:	48 f7 f1             	div    %rcx
  40de47:	48 89 d0             	mov    %rdx,%rax
  40de4a:	89 45 f4             	mov    %eax,-0xc(%rbp)
		buf[p--] = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
  40de4d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40de54:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
  40de5b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40de5f:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  40de66:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40de6d:	48 39 85 08 ff ff ff 	cmp    %rax,-0xf8(%rbp)
  40de74:	0f 92 c0             	setb   %al
  40de77:	48 ff 4d e8          	decq   -0x18(%rbp)
  40de7b:	84 c0                	test   %al,%al
  40de7d:	74 10                	je     40de8f <_D6kernel4core4util4itoaFAaalZAa+0xf6>
  40de7f:	48 8b 8d 08 ff ff ff 	mov    -0xf8(%rbp),%rcx
  40de86:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  40de8d:	eb 22                	jmp    40deb1 <_D6kernel4core4util4itoaFAaalZAa+0x118>
  40de8f:	48 c7 45 80 12 00 00 	movq   $0x12,-0x80(%rbp)
  40de96:	00 
  40de97:	48 c7 45 88 6a 47 41 	movq   $0x41476a,-0x78(%rbp)
  40de9e:	00 
  40de9f:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  40dea3:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  40dea7:	ba 77 01 00 00       	mov    $0x177,%edx
  40deac:	e8 94 cf ff ff       	callq  40ae45 <_d_array_bounds>
  40deb1:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40deb8:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  40debf:	48 01 c2             	add    %rax,%rdx
  40dec2:	48 89 95 10 ff ff ff 	mov    %rdx,-0xf0(%rbp)
  40dec9:	83 7d f4 0a          	cmpl   $0xa,-0xc(%rbp)
  40decd:	7d 0e                	jge    40dedd <_D6kernel4core4util4itoaFAaalZAa+0x144>
  40decf:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40ded2:	83 c0 30             	add    $0x30,%eax
  40ded5:	88 85 1f ff ff ff    	mov    %al,-0xe1(%rbp)
  40dedb:	eb 0c                	jmp    40dee9 <_D6kernel4core4util4itoaFAaalZAa+0x150>
  40dedd:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40dee0:	83 c0 57             	add    $0x57,%eax
  40dee3:	88 85 1f ff ff ff    	mov    %al,-0xe1(%rbp)
  40dee9:	0f b6 8d 1f ff ff ff 	movzbl -0xe1(%rbp),%ecx
  40def0:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40def7:	88 08                	mov    %cl,(%rax)
  40def9:	8b 45 d0             	mov    -0x30(%rbp),%eax
  40defc:	48 63 d0             	movslq %eax,%rdx
  40deff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40df03:	48 89 d1             	mov    %rdx,%rcx
  40df06:	ba 00 00 00 00       	mov    $0x0,%edx
  40df0b:	48 f7 f1             	div    %rcx
  40df0e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40df12:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  40df17:	0f 95 c0             	setne  %al
  40df1a:	83 f0 01             	xor    $0x1,%eax
  40df1d:	84 c0                	test   %al,%al
  40df1f:	75 05                	jne    40df26 <_D6kernel4core4util4itoaFAaalZAa+0x18d>
  40df21:	e9 0c ff ff ff       	jmpq   40de32 <_D6kernel4core4util4itoaFAaalZAa+0x99>
	}
	while (ud /= divisor)

	if(negative)
  40df26:	80 7d d7 00          	cmpb   $0x0,-0x29(%rbp)
  40df2a:	74 75                	je     40dfa1 <_D6kernel4core4util4itoaFAaalZAa+0x208>
		buf[p--] = '-';
  40df2c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40df33:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  40df3a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40df3e:	48 89 95 30 ff ff ff 	mov    %rdx,-0xd0(%rbp)
  40df45:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40df4c:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
  40df53:	0f 92 c0             	setb   %al
  40df56:	48 ff 4d e8          	decq   -0x18(%rbp)
  40df5a:	84 c0                	test   %al,%al
  40df5c:	74 10                	je     40df6e <_D6kernel4core4util4itoaFAaalZAa+0x1d5>
  40df5e:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
  40df65:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
  40df6c:	eb 22                	jmp    40df90 <_D6kernel4core4util4itoaFAaalZAa+0x1f7>
  40df6e:	48 c7 45 90 12 00 00 	movq   $0x12,-0x70(%rbp)
  40df75:	00 
  40df76:	48 c7 45 98 6a 47 41 	movq   $0x41476a,-0x68(%rbp)
  40df7d:	00 
  40df7e:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  40df82:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  40df86:	ba 7c 01 00 00       	mov    $0x17c,%edx
  40df8b:	e8 b5 ce ff ff       	callq  40ae45 <_d_array_bounds>
  40df90:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40df97:	48 03 85 20 ff ff ff 	add    -0xe0(%rbp),%rax
  40df9e:	c6 00 2d             	movb   $0x2d,(%rax)

	return buf[p + 1 .. $];
  40dfa1:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40dfa8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40dfac:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40dfb3:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  40dfb7:	77 0d                	ja     40dfc6 <_D6kernel4core4util4itoaFAaalZAa+0x22d>
  40dfb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40dfbd:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  40dfc4:	eb 22                	jmp    40dfe8 <_D6kernel4core4util4itoaFAaalZAa+0x24f>
  40dfc6:	48 c7 45 b0 12 00 00 	movq   $0x12,-0x50(%rbp)
  40dfcd:	00 
  40dfce:	48 c7 45 b8 6a 47 41 	movq   $0x41476a,-0x48(%rbp)
  40dfd5:	00 
  40dfd6:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  40dfda:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40dfde:	ba 7e 01 00 00       	mov    $0x17e,%edx
  40dfe3:	e8 5d ce ff ff       	callq  40ae45 <_d_array_bounds>
  40dfe8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40dfec:	48 ff c2             	inc    %rdx
  40dfef:	48 89 95 40 ff ff ff 	mov    %rdx,-0xc0(%rbp)
  40dff6:	48 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%rcx
  40dffd:	48 2b 8d 40 ff ff ff 	sub    -0xc0(%rbp),%rcx
  40e004:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
  40e00b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40e012:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  40e019:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40e020:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
  40e027:	77 10                	ja     40e039 <_D6kernel4core4util4itoaFAaalZAa+0x2a0>
  40e029:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
  40e030:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  40e037:	eb 22                	jmp    40e05b <_D6kernel4core4util4itoaFAaalZAa+0x2c2>
  40e039:	48 c7 45 c0 12 00 00 	movq   $0x12,-0x40(%rbp)
  40e040:	00 
  40e041:	48 c7 45 c8 6a 47 41 	movq   $0x41476a,-0x38(%rbp)
  40e048:	00 
  40e049:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40e04d:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40e051:	ba 7e 01 00 00       	mov    $0x17e,%edx
  40e056:	e8 ea cd ff ff       	callq  40ae45 <_d_array_bounds>
  40e05b:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  40e062:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  40e069:	48 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%rcx
  40e070:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
  40e074:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  40e078:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40e07c:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  40e083:	48 89 02             	mov    %rax,(%rdx)
  40e086:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40e08a:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  40e091:	48 89 41 08          	mov    %rax,0x8(%rcx)
}
  40e095:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  40e09c:	c9                   	leaveq 
  40e09d:	c3                   	retq   
  40e09e:	90                   	nop    
  40e09f:	90                   	nop    

000000000040e0a0 <nativeSyscall>:
module kernel.arch.x86_64.usersyscall; // implements the native syscall function

import kernel.arch.x86_64.vmem;
import kernel.core.util;

extern(C) long nativeSyscall(ulong ID, void* ret, void* params)
  40e0a0:	48 89 7c 24 f8       	mov    %rdi,-0x8(%rsp)
  40e0a5:	48 89 74 24 f0       	mov    %rsi,-0x10(%rsp)
  40e0aa:	48 89 54 24 e8       	mov    %rdx,-0x18(%rsp)
	// I assume such in the syscall handler
	asm
	{
		naked;
		"pushq %%rcx";
		"pushq %%r11";
  40e0af:	51                   	push   %rcx
		"pushq %%rax";
  40e0b0:	41 53                	push   %r11
		"syscall";
  40e0b2:	50                   	push   %rax
		"popq %%rax";
  40e0b3:	0f 05                	syscall 
		"popq %%r11";
  40e0b5:	58                   	pop    %rax
		"popq %%rcx";
  40e0b6:	41 5b                	pop    %r11

		"retq";
  40e0b8:	59                   	pop    %rcx
	}
  40e0b9:	c3                   	retq   
  40e0ba:	90                   	nop    
  40e0bb:	90                   	nop    

000000000040e0bc <_D6malloc6mallocFmZPv>:
chunk *used_list = null;  //the list of allocated chunks
chunk *free_list = null;  //the list of freed chunks

//if you don't know what malloc does
//then you shouldn't be in my source code
void *malloc(size_t size) {
  40e0bc:	55                   	push   %rbp
  40e0bd:	48 89 e5             	mov    %rsp,%rbp
  40e0c0:	48 83 ec 60          	sub    $0x60,%rsp
  40e0c4:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  chunk *c = free_list;
  40e0c8:	48 8b 05 d9 f6 00 00 	mov    0xf6d9(%rip),%rax        # 41d7a8 <_D6malloc9free_listPS6malloc5chunk>
  40e0cf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

  //first we see if there's some free-d memory we can re-use
  while(c !is null) {
  40e0d3:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40e0d8:	0f 95 c0             	setne  %al
  40e0db:	83 f0 01             	xor    $0x1,%eax
  40e0de:	84 c0                	test   %al,%al
  40e0e0:	75 43                	jne    40e125 <_D6malloc6mallocFmZPv+0x69>
    print("in while");
  40e0e2:	48 c7 45 b0 08 00 00 	movq   $0x8,-0x50(%rbp)
  40e0e9:	00 
  40e0ea:	48 c7 45 b8 98 47 41 	movq   $0x414798,-0x48(%rbp)
  40e0f1:	00 
  40e0f2:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40e0f6:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40e0fa:	48 c7 c7 a0 9d 41 00 	mov    $0x419da0,%rdi
  40e101:	b8 00 00 00 00       	mov    $0x0,%eax
  40e106:	e8 61 01 00 00       	callq  40e26c <_D4user7basicio5printFYv>
    if(size < c.size) { //if the size we want is less than the size of the chunk
  40e10b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e10f:	48 8b 00             	mov    (%rax),%rax
  40e112:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
  40e116:	73 bb                	jae    40e0d3 <_D6malloc6mallocFmZPv+0x17>

      return cast(void *)1337;
  40e118:	48 c7 45 a0 39 05 00 	movq   $0x539,-0x60(%rbp)
  40e11f:	00 
  40e120:	e9 c3 00 00 00       	jmpq   40e1e8 <_D6malloc6mallocFmZPv+0x12c>
    }
  }
  //since c is null, we need to get a new page
  //void *h = allocPage(); //not till we have it
  //set the used list to start at the beginning of the page
  used_list = cast(chunk *)allocate(size + chunk.sizeof);
  40e125:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  40e129:	48 83 c7 18          	add    $0x18,%rdi
  40e12d:	e8 bc 00 00 00       	callq  40e1ee <_D6malloc8allocateFmZPv>
  40e132:	48 89 05 67 f6 00 00 	mov    %rax,0xf667(%rip)        # 41d7a0 <_D6malloc9used_listPS6malloc5chunk>
  if(!used_list) { print("failure"); return null; }
  40e139:	48 8b 05 60 f6 00 00 	mov    0xf660(%rip),%rax        # 41d7a0 <_D6malloc9used_listPS6malloc5chunk>
  40e140:	48 85 c0             	test   %rax,%rax
  40e143:	0f 95 c0             	setne  %al
  40e146:	83 f0 01             	xor    $0x1,%eax
  40e149:	84 c0                	test   %al,%al
  40e14b:	74 33                	je     40e180 <_D6malloc6mallocFmZPv+0xc4>
  40e14d:	48 c7 45 c0 07 00 00 	movq   $0x7,-0x40(%rbp)
  40e154:	00 
  40e155:	48 c7 45 c8 a1 47 41 	movq   $0x4147a1,-0x38(%rbp)
  40e15c:	00 
  40e15d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40e161:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  40e165:	48 c7 c7 a0 9d 41 00 	mov    $0x419da0,%rdi
  40e16c:	b8 00 00 00 00       	mov    $0x0,%eax
  40e171:	e8 f6 00 00 00       	callq  40e26c <_D4user7basicio5printFYv>
  40e176:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  40e17d:	00 
  40e17e:	eb 68                	jmp    40e1e8 <_D6malloc6mallocFmZPv+0x12c>
  //set up the struct
  print("%d", 15);
  40e180:	48 c7 45 d0 02 00 00 	movq   $0x2,-0x30(%rbp)
  40e187:	00 
  40e188:	48 c7 45 d8 a9 47 41 	movq   $0x4147a9,-0x28(%rbp)
  40e18f:	00 
  40e190:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40e194:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40e198:	b9 0f 00 00 00       	mov    $0xf,%ecx
  40e19d:	48 c7 c7 20 d5 41 00 	mov    $0x41d520,%rdi
  40e1a4:	b8 00 00 00 00       	mov    $0x0,%eax
  40e1a9:	e8 be 00 00 00       	callq  40e26c <_D4user7basicio5printFYv>
  //used_list.size = size;
  //used_list.next = null;
  //used_list.prev = null;
  print("done with malloc");
  40e1ae:	48 c7 45 e0 10 00 00 	movq   $0x10,-0x20(%rbp)
  40e1b5:	00 
  40e1b6:	48 c7 45 e8 ac 47 41 	movq   $0x4147ac,-0x18(%rbp)
  40e1bd:	00 
  40e1be:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40e1c2:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40e1c6:	48 c7 c7 a0 9d 41 00 	mov    $0x419da0,%rdi
  40e1cd:	b8 00 00 00 00       	mov    $0x0,%eax
  40e1d2:	e8 95 00 00 00       	callq  40e26c <_D4user7basicio5printFYv>
  return cast(void *)(used_list + chunk.sizeof);
  40e1d7:	48 8b 05 c2 f5 00 00 	mov    0xf5c2(%rip),%rax        # 41d7a0 <_D6malloc9used_listPS6malloc5chunk>
  40e1de:	48 05 40 02 00 00    	add    $0x240,%rax
  40e1e4:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40e1e8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
}
  40e1ec:	c9                   	leaveq 
  40e1ed:	c3                   	retq   

000000000040e1ee <_D6malloc8allocateFmZPv>:

ubyte[9000] buffer; //fake pages 'nat
int buff_pos = 0;

void *allocate(size_t size) {
  40e1ee:	55                   	push   %rbp
  40e1ef:	48 89 e5             	mov    %rsp,%rbp
  40e1f2:	48 83 ec 20          	sub    $0x20,%rsp
  40e1f6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  print("in allocate");
  40e1fa:	48 c7 45 f0 0b 00 00 	movq   $0xb,-0x10(%rbp)
  40e201:	00 
  40e202:	48 c7 45 f8 bd 47 41 	movq   $0x4147bd,-0x8(%rbp)
  40e209:	00 
  40e20a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40e20e:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  40e212:	48 c7 c7 a0 9d 41 00 	mov    $0x419da0,%rdi
  40e219:	b8 00 00 00 00       	mov    $0x0,%eax
  40e21e:	e8 49 00 00 00       	callq  40e26c <_D4user7basicio5printFYv>
  return cast(void*)(buffer.ptr + buff_pos);
  40e223:	8b 05 bf 18 01 00    	mov    0x118bf(%rip),%eax        # 41fae8 <_D6malloc8buff_posi>
  40e229:	48 98                	cltq   
  40e22b:	48 05 c0 d7 41 00    	add    $0x41d7c0,%rax
}
  40e231:	c9                   	leaveq 
  40e232:	c3                   	retq   

000000000040e233 <_D6malloc4freeFPvZv>:

//see malloc's comment
void free(void *) {
  40e233:	55                   	push   %rbp
  40e234:	48 89 e5             	mov    %rsp,%rbp
  40e237:	48 83 ec 20          	sub    $0x20,%rsp
  40e23b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  print("in free");
  40e23f:	48 c7 45 f0 07 00 00 	movq   $0x7,-0x10(%rbp)
  40e246:	00 
  40e247:	48 c7 45 f8 c9 47 41 	movq   $0x4147c9,-0x8(%rbp)
  40e24e:	00 
  40e24f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40e253:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  40e257:	48 c7 c7 a0 9d 41 00 	mov    $0x419da0,%rdi
  40e25e:	b8 00 00 00 00       	mov    $0x0,%eax
  40e263:	e8 04 00 00 00       	callq  40e26c <_D4user7basicio5printFYv>
}
  40e268:	c9                   	leaveq 
  40e269:	c3                   	retq   
  40e26a:	90                   	nop    
  40e26b:	90                   	nop    

000000000040e26c <_D4user7basicio5printFYv>:
import user.syscall;
import std.stdarg;

import libos.console;

void print(...) {
  40e26c:	55                   	push   %rbp
  40e26d:	48 89 e5             	mov    %rsp,%rbp
  40e270:	48 81 ec 50 02 00 00 	sub    $0x250,%rsp
  40e277:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  40e27e:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  40e285:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  40e28c:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  40e293:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  40e29a:	0f b6 c0             	movzbl %al,%eax
  40e29d:	48 89 85 b8 fd ff ff 	mov    %rax,-0x248(%rbp)
  40e2a4:	48 8b 95 b8 fd ff ff 	mov    -0x248(%rbp),%rdx
  40e2ab:	48 8d 04 95 00 00 00 	lea    0x0(,%rdx,4),%rax
  40e2b2:	00 
  40e2b3:	48 c7 85 b8 fd ff ff 	movq   $0x40e2f2,-0x248(%rbp)
  40e2ba:	f2 e2 40 00 
  40e2be:	48 29 85 b8 fd ff ff 	sub    %rax,-0x248(%rbp)
  40e2c5:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  40e2c9:	48 8b 95 b8 fd ff ff 	mov    -0x248(%rbp),%rdx
  40e2d0:	ff e2                	jmpq   *%rdx
  40e2d2:	0f 29 78 f1          	movaps %xmm7,-0xf(%rax)
  40e2d6:	0f 29 70 e1          	movaps %xmm6,-0x1f(%rax)
  40e2da:	0f 29 68 d1          	movaps %xmm5,-0x2f(%rax)
  40e2de:	0f 29 60 c1          	movaps %xmm4,-0x3f(%rax)
  40e2e2:	0f 29 58 b1          	movaps %xmm3,-0x4f(%rax)
  40e2e6:	0f 29 50 a1          	movaps %xmm2,-0x5f(%rax)
  40e2ea:	0f 29 48 91          	movaps %xmm1,-0x6f(%rax)
  40e2ee:	0f 29 40 81          	movaps %xmm0,-0x7f(%rax)
  40e2f2:	48 89 bd f8 fd ff ff 	mov    %rdi,-0x208(%rbp)

	char[20] buff;

	foreach(arg; _arguments)
	{
		if (arg == typeid(char[]))
  40e2f9:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
  40e300:	c7 00 08 00 00 00    	movl   $0x8,(%rax)
  40e306:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
  40e30d:	c7 40 04 30 00 00 00 	movl   $0x30,0x4(%rax)
  40e314:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
  40e31b:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  40e31f:	48 89 50 08          	mov    %rdx,0x8(%rax)
  40e323:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
  40e32a:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
  40e331:	48 89 50 10          	mov    %rdx,0x10(%rax)
import user.syscall;
import std.stdarg;

import libos.console;

void print(...) {
  40e335:	48 8b 95 f8 fd ff ff 	mov    -0x208(%rbp),%rdx
  40e33c:	48 8b 42 10          	mov    0x10(%rdx),%rax
  40e340:	48 89 85 00 fe ff ff 	mov    %rax,-0x200(%rbp)
  40e347:	48 8b 42 18          	mov    0x18(%rdx),%rax
  40e34b:	48 89 85 08 fe ff ff 	mov    %rax,-0x1f8(%rbp)
	if (_arguments.length == 0)
  40e352:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax
  40e359:	48 85 c0             	test   %rax,%rax
  40e35c:	75 05                	jne    40e363 <_D4user7basicio5printFYv+0xf7>
  40e35e:	e9 e9 05 00 00       	jmpq   40e94c <_D4user7basicio5printFYv+0x6e0>
	{
		return;
	}

	char[20] buff;
  40e363:	48 c7 85 50 fe ff ff 	movq   $0x14,-0x1b0(%rbp)
  40e36a:	14 00 00 00 
  40e36e:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40e375:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
  40e37c:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  40e383:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  40e38a:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  40e391:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  40e398:	48 83 bd 10 ff ff ff 	cmpq   $0x0,-0xf0(%rbp)
  40e39f:	00 
  40e3a0:	0f 95 c0             	setne  %al
  40e3a3:	83 f0 01             	xor    $0x1,%eax
  40e3a6:	84 c0                	test   %al,%al
  40e3a8:	75 1a                	jne    40e3c4 <_D4user7basicio5printFYv+0x158>
  40e3aa:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40e3b1:	c6 00 ff             	movb   $0xff,(%rax)
  40e3b4:	48 ff 85 08 ff ff ff 	incq   -0xf8(%rbp)
  40e3bb:	48 ff 8d 10 ff ff ff 	decq   -0xf0(%rbp)
  40e3c2:	eb d4                	jmp    40e398 <_D4user7basicio5printFYv+0x12c>

	foreach(arg; _arguments)
  40e3c4:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
  40e3cb:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
  40e3d2:	48 8b 95 c0 fd ff ff 	mov    -0x240(%rbp),%rdx
  40e3d9:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  40e3e0:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax
  40e3e7:	48 c1 e0 03          	shl    $0x3,%rax
  40e3eb:	48 03 85 c0 fd ff ff 	add    -0x240(%rbp),%rax
  40e3f2:	48 39 85 18 ff ff ff 	cmp    %rax,-0xe8(%rbp)
  40e3f9:	0f 95 c0             	setne  %al
  40e3fc:	83 f0 01             	xor    $0x1,%eax
  40e3ff:	84 c0                	test   %al,%al
  40e401:	0f 85 22 05 00 00    	jne    40e929 <_D4user7basicio5printFYv+0x6bd>
  40e407:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40e40e:	48 8b 00             	mov    (%rax),%rax
  40e411:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
	{
		if (arg == typeid(char[]))
  40e418:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40e41f:	48 8b 00             	mov    (%rax),%rax
  40e422:	48 83 c0 20          	add    $0x20,%rax
  40e426:	48 8b 00             	mov    (%rax),%rax
  40e429:	48 c7 c6 00 ff 40 00 	mov    $0x40ff00,%rsi
  40e430:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
  40e437:	ff d0                	callq  *%rax
  40e439:	85 c0                	test   %eax,%eax
  40e43b:	0f 84 0e 01 00 00    	je     40e54f <_D4user7basicio5printFYv+0x2e3>
		{
			Console.printString(va_arg!(char[])(_argptr));
  40e441:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e447:	83 f8 30             	cmp    $0x30,%eax
  40e44a:	73 2a                	jae    40e476 <_D4user7basicio5printFYv+0x20a>
  40e44c:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  40e453:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e459:	89 c0                	mov    %eax,%eax
  40e45b:	48 01 c2             	add    %rax,%rdx
  40e45e:	48 89 95 c8 fd ff ff 	mov    %rdx,-0x238(%rbp)
  40e465:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e46b:	83 c0 08             	add    $0x8,%eax
  40e46e:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%rbp)
  40e474:	eb 19                	jmp    40e48f <_D4user7basicio5printFYv+0x223>
  40e476:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  40e47d:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
  40e484:	48 83 c0 08          	add    $0x8,%rax
  40e488:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  40e48f:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
  40e496:	48 8b 00             	mov    (%rax),%rax
  40e499:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  40e4a0:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e4a6:	83 f8 30             	cmp    $0x30,%eax
  40e4a9:	73 2a                	jae    40e4d5 <_D4user7basicio5printFYv+0x269>
  40e4ab:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  40e4b2:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e4b8:	89 c0                	mov    %eax,%eax
  40e4ba:	48 01 c2             	add    %rax,%rdx
  40e4bd:	48 89 95 d0 fd ff ff 	mov    %rdx,-0x230(%rbp)
  40e4c4:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e4ca:	83 c0 08             	add    $0x8,%eax
  40e4cd:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%rbp)
  40e4d3:	eb 19                	jmp    40e4ee <_D4user7basicio5printFYv+0x282>
  40e4d5:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  40e4dc:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
  40e4e3:	48 83 c0 08          	add    $0x8,%rax
  40e4e7:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  40e4ee:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
  40e4f5:	48 8b 00             	mov    (%rax),%rax
  40e4f8:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  40e4ff:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40e506:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
  40e50d:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  40e514:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
  40e51b:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
  40e522:	48 89 85 60 fe ff ff 	mov    %rax,-0x1a0(%rbp)
  40e529:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
  40e530:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
  40e537:	48 8b bd 60 fe ff ff 	mov    -0x1a0(%rbp),%rdi
  40e53e:	48 8b b5 68 fe ff ff 	mov    -0x198(%rbp),%rsi
  40e545:	e8 b7 0b 00 00       	callq  40f101 <_D5libos7console7Console11printStringFAaZv>
  40e54a:	e9 cd 03 00 00       	jmpq   40e91c <_D4user7basicio5printFYv+0x6b0>
		}
		else if (arg == typeid(long))
  40e54f:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40e556:	48 8b 00             	mov    (%rax),%rax
  40e559:	48 83 c0 20          	add    $0x20,%rax
  40e55d:	48 8b 00             	mov    (%rax),%rax
  40e560:	48 c7 c6 d0 10 41 00 	mov    $0x4110d0,%rsi
  40e567:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
  40e56e:	ff d0                	callq  *%rax
  40e570:	85 c0                	test   %eax,%eax
  40e572:	0f 84 c4 00 00 00    	je     40e63c <_D4user7basicio5printFYv+0x3d0>
		{
			long val;
  40e578:	48 c7 85 38 ff ff ff 	movq   $0x0,-0xc8(%rbp)
  40e57f:	00 00 00 00 
			val = va_arg!(long)(_argptr);
  40e583:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e589:	83 f8 30             	cmp    $0x30,%eax
  40e58c:	73 2a                	jae    40e5b8 <_D4user7basicio5printFYv+0x34c>
  40e58e:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  40e595:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e59b:	89 c0                	mov    %eax,%eax
  40e59d:	48 01 c2             	add    %rax,%rdx
  40e5a0:	48 89 95 d8 fd ff ff 	mov    %rdx,-0x228(%rbp)
  40e5a7:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e5ad:	83 c0 08             	add    $0x8,%eax
  40e5b0:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%rbp)
  40e5b6:	eb 19                	jmp    40e5d1 <_D4user7basicio5printFYv+0x365>
  40e5b8:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  40e5bf:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
  40e5c6:	48 83 c0 08          	add    $0x8,%rax
  40e5ca:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  40e5d1:	48 8b 85 d8 fd ff ff 	mov    -0x228(%rbp),%rax
  40e5d8:	48 8b 00             	mov    (%rax),%rax
  40e5db:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)

			Console.printString(itoa(buff, 'd', val));
  40e5e2:	48 c7 85 80 fe ff ff 	movq   $0x14,-0x180(%rbp)
  40e5e9:	14 00 00 00 
  40e5ed:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40e5f4:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
  40e5fb:	48 8d bd 90 fe ff ff 	lea    -0x170(%rbp),%rdi
  40e602:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  40e609:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  40e610:	48 8b 95 88 fe ff ff 	mov    -0x178(%rbp),%rdx
  40e617:	49 89 c0             	mov    %rax,%r8
  40e61a:	b9 64 00 00 00       	mov    $0x64,%ecx
  40e61f:	e8 2a 03 00 00       	callq  40e94e <_D4user7basicio4itoaFAaalZAa>
  40e624:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  40e62b:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  40e632:	e8 ca 0a 00 00       	callq  40f101 <_D5libos7console7Console11printStringFAaZv>
  40e637:	e9 e0 02 00 00       	jmpq   40e91c <_D4user7basicio5printFYv+0x6b0>
		}
		else if (arg == typeid(ulong))
  40e63c:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40e643:	48 8b 00             	mov    (%rax),%rax
  40e646:	48 83 c0 20          	add    $0x20,%rax
  40e64a:	48 8b 00             	mov    (%rax),%rax
  40e64d:	48 c7 c6 d0 15 41 00 	mov    $0x4115d0,%rsi
  40e654:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
  40e65b:	ff d0                	callq  *%rax
  40e65d:	85 c0                	test   %eax,%eax
  40e65f:	0f 84 c4 00 00 00    	je     40e729 <_D4user7basicio5printFYv+0x4bd>
		{
			ulong val;
  40e665:	48 c7 85 40 ff ff ff 	movq   $0x0,-0xc0(%rbp)
  40e66c:	00 00 00 00 
			val = va_arg!(ulong)(_argptr);
  40e670:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e676:	83 f8 30             	cmp    $0x30,%eax
  40e679:	73 2a                	jae    40e6a5 <_D4user7basicio5printFYv+0x439>
  40e67b:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  40e682:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e688:	89 c0                	mov    %eax,%eax
  40e68a:	48 01 c2             	add    %rax,%rdx
  40e68d:	48 89 95 e0 fd ff ff 	mov    %rdx,-0x220(%rbp)
  40e694:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e69a:	83 c0 08             	add    $0x8,%eax
  40e69d:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%rbp)
  40e6a3:	eb 19                	jmp    40e6be <_D4user7basicio5printFYv+0x452>
  40e6a5:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  40e6ac:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  40e6b3:	48 83 c0 08          	add    $0x8,%rax
  40e6b7:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  40e6be:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
  40e6c5:	48 8b 00             	mov    (%rax),%rax
  40e6c8:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)

			Console.printString(itoa(buff, 'u', val));
  40e6cf:	48 8b 8d 40 ff ff ff 	mov    -0xc0(%rbp),%rcx
  40e6d6:	48 c7 85 a0 fe ff ff 	movq   $0x14,-0x160(%rbp)
  40e6dd:	14 00 00 00 
  40e6e1:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40e6e8:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
  40e6ef:	48 8d bd b0 fe ff ff 	lea    -0x150(%rbp),%rdi
  40e6f6:	48 8b b5 a0 fe ff ff 	mov    -0x160(%rbp),%rsi
  40e6fd:	48 8b 95 a8 fe ff ff 	mov    -0x158(%rbp),%rdx
  40e704:	49 89 c8             	mov    %rcx,%r8
  40e707:	b9 75 00 00 00       	mov    $0x75,%ecx
  40e70c:	e8 3d 02 00 00       	callq  40e94e <_D4user7basicio4itoaFAaalZAa>
  40e711:	48 8b bd b0 fe ff ff 	mov    -0x150(%rbp),%rdi
  40e718:	48 8b b5 b8 fe ff ff 	mov    -0x148(%rbp),%rsi
  40e71f:	e8 dd 09 00 00       	callq  40f101 <_D5libos7console7Console11printStringFAaZv>
  40e724:	e9 f3 01 00 00       	jmpq   40e91c <_D4user7basicio5printFYv+0x6b0>
		}
		else if (arg == typeid(int))
  40e729:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40e730:	48 8b 00             	mov    (%rax),%rax
  40e733:	48 83 c0 20          	add    $0x20,%rax
  40e737:	48 8b 00             	mov    (%rax),%rax
  40e73a:	48 c7 c6 50 0f 41 00 	mov    $0x410f50,%rsi
  40e741:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
  40e748:	ff d0                	callq  *%rax
  40e74a:	85 c0                	test   %eax,%eax
  40e74c:	0f 84 c3 00 00 00    	je     40e815 <_D4user7basicio5printFYv+0x5a9>
		{
			int val;
  40e752:	c7 85 48 ff ff ff 00 	movl   $0x0,-0xb8(%rbp)
  40e759:	00 00 00 
			val = va_arg!(int)(_argptr);
  40e75c:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e762:	83 f8 30             	cmp    $0x30,%eax
  40e765:	73 2a                	jae    40e791 <_D4user7basicio5printFYv+0x525>
  40e767:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  40e76e:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e774:	89 c0                	mov    %eax,%eax
  40e776:	48 01 c2             	add    %rax,%rdx
  40e779:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
  40e780:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e786:	83 c0 08             	add    $0x8,%eax
  40e789:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%rbp)
  40e78f:	eb 19                	jmp    40e7aa <_D4user7basicio5printFYv+0x53e>
  40e791:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  40e798:	48 89 85 e8 fd ff ff 	mov    %rax,-0x218(%rbp)
  40e79f:	48 83 c0 08          	add    $0x8,%rax
  40e7a3:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  40e7aa:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
  40e7b1:	8b 00                	mov    (%rax),%eax
  40e7b3:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)

			Console.printString(itoa(buff, 'd', val));
  40e7b9:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
  40e7bf:	48 63 c8             	movslq %eax,%rcx
  40e7c2:	48 c7 85 c0 fe ff ff 	movq   $0x14,-0x140(%rbp)
  40e7c9:	14 00 00 00 
  40e7cd:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40e7d4:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
  40e7db:	48 8d bd d0 fe ff ff 	lea    -0x130(%rbp),%rdi
  40e7e2:	48 8b b5 c0 fe ff ff 	mov    -0x140(%rbp),%rsi
  40e7e9:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
  40e7f0:	49 89 c8             	mov    %rcx,%r8
  40e7f3:	b9 64 00 00 00       	mov    $0x64,%ecx
  40e7f8:	e8 51 01 00 00       	callq  40e94e <_D4user7basicio4itoaFAaalZAa>
  40e7fd:	48 8b bd d0 fe ff ff 	mov    -0x130(%rbp),%rdi
  40e804:	48 8b b5 d8 fe ff ff 	mov    -0x128(%rbp),%rsi
  40e80b:	e8 f1 08 00 00       	callq  40f101 <_D5libos7console7Console11printStringFAaZv>
  40e810:	e9 07 01 00 00       	jmpq   40e91c <_D4user7basicio5printFYv+0x6b0>
		}
		else if (arg == typeid(uint))
  40e815:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40e81c:	48 8b 00             	mov    (%rax),%rax
  40e81f:	48 83 c0 20          	add    $0x20,%rax
  40e823:	48 8b 00             	mov    (%rax),%rax
  40e826:	48 c7 c6 10 15 41 00 	mov    $0x411510,%rsi
  40e82d:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
  40e834:	ff d0                	callq  *%rax
  40e836:	85 c0                	test   %eax,%eax
  40e838:	0f 84 bd 00 00 00    	je     40e8fb <_D4user7basicio5printFYv+0x68f>
		{
			uint val;
  40e83e:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  40e845:	00 00 00 
			val = va_arg!(int)(_argptr);
  40e848:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e84e:	83 f8 30             	cmp    $0x30,%eax
  40e851:	73 2a                	jae    40e87d <_D4user7basicio5printFYv+0x611>
  40e853:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  40e85a:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e860:	89 c0                	mov    %eax,%eax
  40e862:	48 01 c2             	add    %rax,%rdx
  40e865:	48 89 95 f0 fd ff ff 	mov    %rdx,-0x210(%rbp)
  40e86c:	8b 85 30 fe ff ff    	mov    -0x1d0(%rbp),%eax
  40e872:	83 c0 08             	add    $0x8,%eax
  40e875:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%rbp)
  40e87b:	eb 19                	jmp    40e896 <_D4user7basicio5printFYv+0x62a>
  40e87d:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  40e884:	48 89 85 f0 fd ff ff 	mov    %rax,-0x210(%rbp)
  40e88b:	48 83 c0 08          	add    $0x8,%rax
  40e88f:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  40e896:	48 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%rax
  40e89d:	8b 00                	mov    (%rax),%eax
  40e89f:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)

			Console.printString(itoa(buff, 'u', val));
  40e8a5:	8b 8d 4c ff ff ff    	mov    -0xb4(%rbp),%ecx
  40e8ab:	48 c7 85 e0 fe ff ff 	movq   $0x14,-0x120(%rbp)
  40e8b2:	14 00 00 00 
  40e8b6:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40e8bd:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  40e8c4:	48 8d bd f0 fe ff ff 	lea    -0x110(%rbp),%rdi
  40e8cb:	48 8b b5 e0 fe ff ff 	mov    -0x120(%rbp),%rsi
  40e8d2:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  40e8d9:	49 89 c8             	mov    %rcx,%r8
  40e8dc:	b9 75 00 00 00       	mov    $0x75,%ecx
  40e8e1:	e8 68 00 00 00       	callq  40e94e <_D4user7basicio4itoaFAaalZAa>
  40e8e6:	48 8b bd f0 fe ff ff 	mov    -0x110(%rbp),%rdi
  40e8ed:	48 8b b5 f8 fe ff ff 	mov    -0x108(%rbp),%rsi
  40e8f4:	e8 08 08 00 00       	callq  40f101 <_D5libos7console7Console11printStringFAaZv>
  40e8f9:	eb 21                	jmp    40e91c <_D4user7basicio5printFYv+0x6b0>
		}
		else if (arg == typeid(void*))
  40e8fb:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40e902:	48 8b 00             	mov    (%rax),%rax
  40e905:	48 83 c0 20          	add    $0x20,%rax
  40e909:	48 8b 00             	mov    (%rax),%rax
  40e90c:	48 c7 c6 40 d5 41 00 	mov    $0x41d540,%rsi
  40e913:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
  40e91a:	ff d0                	callq  *%rax

	char[20] buff;

	foreach(arg; _arguments)
	{
		if (arg == typeid(char[]))
  40e91c:	48 83 85 18 ff ff ff 	addq   $0x8,-0xe8(%rbp)
  40e923:	08 
  40e924:	e9 b7 fa ff ff       	jmpq   40e3e0 <_D4user7basicio5printFYv+0x174>
  40e929:	eb 21                	jmp    40e94c <_D4user7basicio5printFYv+0x6e0>
  40e92b:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
  40e932:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
  40e939:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
  40e940:	48 8b bd b0 fd ff ff 	mov    -0x250(%rbp),%rdi
  40e947:	e8 ff c8 ff ff       	callq  40b24b <_Unwind_Resume>
		}
		else if (arg == typeid(void*))
		{
		}
	}
}
  40e94c:	c9                   	leaveq 
  40e94d:	c3                   	retq   

000000000040e94e <_D4user7basicio4itoaFAaalZAa>:
char[] itoa(char[] buf, char base, long d)
  40e94e:	55                   	push   %rbp
  40e94f:	48 89 e5             	mov    %rsp,%rbp
  40e952:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  40e959:	48 89 bd f0 fe ff ff 	mov    %rdi,-0x110(%rbp)
  40e960:	88 8d 6f ff ff ff    	mov    %cl,-0x91(%rbp)
  40e966:	4c 89 85 60 ff ff ff 	mov    %r8,-0xa0(%rbp)
  40e96d:	48 89 f0             	mov    %rsi,%rax
  40e970:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  40e977:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
{
  size_t p = buf.length - 1;
  40e97e:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40e985:	48 ff c8             	dec    %rax
  40e988:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  size_t startIdx = 0;
  40e98c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40e993:	00 
  ulong ud = d;
  40e994:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40e99b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  bool negative = false;
  40e99f:	c6 45 d7 00          	movb   $0x0,-0x29(%rbp)

  int divisor = 10;
  40e9a3:	c7 45 d0 0a 00 00 00 	movl   $0xa,-0x30(%rbp)

  // If %d is specified and D is minus, put `-' in the head.
  if(base == 'd' && d < 0)
  40e9aa:	0f b6 85 6f ff ff ff 	movzbl -0x91(%rbp),%eax
  40e9b1:	83 f8 64             	cmp    $0x64,%eax
  40e9b4:	75 1e                	jne    40e9d4 <_D4user7basicio4itoaFAaalZAa+0x86>
  40e9b6:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  40e9bd:	00 
  40e9be:	79 14                	jns    40e9d4 <_D4user7basicio4itoaFAaalZAa+0x86>
  {
    negative = true;
  40e9c0:	c6 45 d7 01          	movb   $0x1,-0x29(%rbp)
    ud = -d;
  40e9c4:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40e9cb:	48 f7 d8             	neg    %rax
  40e9ce:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  bool negative = false;

  int divisor = 10;

  // If %d is specified and D is minus, put `-' in the head.
  if(base == 'd' && d < 0)
  40e9d2:	eb 13                	jmp    40e9e7 <_D4user7basicio4itoaFAaalZAa+0x99>
  {
    negative = true;
    ud = -d;
  }
  else if(base == 'x')
  40e9d4:	0f b6 85 6f ff ff ff 	movzbl -0x91(%rbp),%eax
  40e9db:	83 f8 78             	cmp    $0x78,%eax
  40e9de:	75 07                	jne    40e9e7 <_D4user7basicio4itoaFAaalZAa+0x99>
    divisor = 16;
  40e9e0:	c7 45 d0 10 00 00 00 	movl   $0x10,-0x30(%rbp)

  // Divide UD by DIVISOR until UD == 0.
  do
  {
    int remainder = ud % divisor;
  40e9e7:	8b 45 d0             	mov    -0x30(%rbp),%eax
  40e9ea:	48 63 d0             	movslq %eax,%rdx
  40e9ed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40e9f1:	48 89 d1             	mov    %rdx,%rcx
  40e9f4:	ba 00 00 00 00       	mov    $0x0,%edx
  40e9f9:	48 f7 f1             	div    %rcx
  40e9fc:	48 89 d0             	mov    %rdx,%rax
  40e9ff:	89 45 f4             	mov    %eax,-0xc(%rbp)
    buf[p--] = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
  40ea02:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40ea09:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
  40ea10:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ea14:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  40ea1b:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40ea22:	48 39 85 08 ff ff ff 	cmp    %rax,-0xf8(%rbp)
  40ea29:	0f 92 c0             	setb   %al
  40ea2c:	48 ff 4d e8          	decq   -0x18(%rbp)
  40ea30:	84 c0                	test   %al,%al
  40ea32:	74 10                	je     40ea44 <_D4user7basicio4itoaFAaalZAa+0xf6>
  40ea34:	48 8b 8d 08 ff ff ff 	mov    -0xf8(%rbp),%rcx
  40ea3b:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  40ea42:	eb 22                	jmp    40ea66 <_D4user7basicio4itoaFAaalZAa+0x118>
  40ea44:	48 c7 45 80 0e 00 00 	movq   $0xe,-0x80(%rbp)
  40ea4b:	00 
  40ea4c:	48 c7 45 88 d1 47 41 	movq   $0x4147d1,-0x78(%rbp)
  40ea53:	00 
  40ea54:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  40ea58:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  40ea5c:	ba 54 00 00 00       	mov    $0x54,%edx
  40ea61:	e8 df c3 ff ff       	callq  40ae45 <_d_array_bounds>
  40ea66:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40ea6d:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  40ea74:	48 01 c2             	add    %rax,%rdx
  40ea77:	48 89 95 10 ff ff ff 	mov    %rdx,-0xf0(%rbp)
  40ea7e:	83 7d f4 0a          	cmpl   $0xa,-0xc(%rbp)
  40ea82:	7d 0e                	jge    40ea92 <_D4user7basicio4itoaFAaalZAa+0x144>
  40ea84:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40ea87:	83 c0 30             	add    $0x30,%eax
  40ea8a:	88 85 1f ff ff ff    	mov    %al,-0xe1(%rbp)
  40ea90:	eb 0c                	jmp    40ea9e <_D4user7basicio4itoaFAaalZAa+0x150>
  40ea92:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40ea95:	83 c0 57             	add    $0x57,%eax
  40ea98:	88 85 1f ff ff ff    	mov    %al,-0xe1(%rbp)
  40ea9e:	0f b6 8d 1f ff ff ff 	movzbl -0xe1(%rbp),%ecx
  40eaa5:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40eaac:	88 08                	mov    %cl,(%rax)
  40eaae:	8b 45 d0             	mov    -0x30(%rbp),%eax
  40eab1:	48 63 d0             	movslq %eax,%rdx
  40eab4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40eab8:	48 89 d1             	mov    %rdx,%rcx
  40eabb:	ba 00 00 00 00       	mov    $0x0,%edx
  40eac0:	48 f7 f1             	div    %rcx
  40eac3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40eac7:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  40eacc:	0f 95 c0             	setne  %al
  40eacf:	83 f0 01             	xor    $0x1,%eax
  40ead2:	84 c0                	test   %al,%al
  40ead4:	75 05                	jne    40eadb <_D4user7basicio4itoaFAaalZAa+0x18d>
  40ead6:	e9 0c ff ff ff       	jmpq   40e9e7 <_D4user7basicio4itoaFAaalZAa+0x99>
  }
  while (ud /= divisor)

    if(negative)
  40eadb:	80 7d d7 00          	cmpb   $0x0,-0x29(%rbp)
  40eadf:	74 75                	je     40eb56 <_D4user7basicio4itoaFAaalZAa+0x208>
      buf[p--] = '-';
  40eae1:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40eae8:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  40eaef:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40eaf3:	48 89 95 30 ff ff ff 	mov    %rdx,-0xd0(%rbp)
  40eafa:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40eb01:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
  40eb08:	0f 92 c0             	setb   %al
  40eb0b:	48 ff 4d e8          	decq   -0x18(%rbp)
  40eb0f:	84 c0                	test   %al,%al
  40eb11:	74 10                	je     40eb23 <_D4user7basicio4itoaFAaalZAa+0x1d5>
  40eb13:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
  40eb1a:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
  40eb21:	eb 22                	jmp    40eb45 <_D4user7basicio4itoaFAaalZAa+0x1f7>
  40eb23:	48 c7 45 90 0e 00 00 	movq   $0xe,-0x70(%rbp)
  40eb2a:	00 
  40eb2b:	48 c7 45 98 d1 47 41 	movq   $0x4147d1,-0x68(%rbp)
  40eb32:	00 
  40eb33:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  40eb37:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  40eb3b:	ba 59 00 00 00       	mov    $0x59,%edx
  40eb40:	e8 00 c3 ff ff       	callq  40ae45 <_d_array_bounds>
  40eb45:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40eb4c:	48 03 85 20 ff ff ff 	add    -0xe0(%rbp),%rax
  40eb53:	c6 00 2d             	movb   $0x2d,(%rax)

  return buf[p + 1 .. $];
  40eb56:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40eb5d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40eb61:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40eb68:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  40eb6c:	77 0d                	ja     40eb7b <_D4user7basicio4itoaFAaalZAa+0x22d>
  40eb6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40eb72:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  40eb79:	eb 22                	jmp    40eb9d <_D4user7basicio4itoaFAaalZAa+0x24f>
  40eb7b:	48 c7 45 b0 0e 00 00 	movq   $0xe,-0x50(%rbp)
  40eb82:	00 
  40eb83:	48 c7 45 b8 d1 47 41 	movq   $0x4147d1,-0x48(%rbp)
  40eb8a:	00 
  40eb8b:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  40eb8f:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40eb93:	ba 5b 00 00 00       	mov    $0x5b,%edx
  40eb98:	e8 a8 c2 ff ff       	callq  40ae45 <_d_array_bounds>
  40eb9d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40eba1:	48 ff c2             	inc    %rdx
  40eba4:	48 89 95 40 ff ff ff 	mov    %rdx,-0xc0(%rbp)
  40ebab:	48 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%rcx
  40ebb2:	48 2b 8d 40 ff ff ff 	sub    -0xc0(%rbp),%rcx
  40ebb9:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
  40ebc0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40ebc7:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  40ebce:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40ebd5:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
  40ebdc:	77 10                	ja     40ebee <_D4user7basicio4itoaFAaalZAa+0x2a0>
  40ebde:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
  40ebe5:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  40ebec:	eb 22                	jmp    40ec10 <_D4user7basicio4itoaFAaalZAa+0x2c2>
  40ebee:	48 c7 45 c0 0e 00 00 	movq   $0xe,-0x40(%rbp)
  40ebf5:	00 
  40ebf6:	48 c7 45 c8 d1 47 41 	movq   $0x4147d1,-0x38(%rbp)
  40ebfd:	00 
  40ebfe:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40ec02:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40ec06:	ba 5b 00 00 00       	mov    $0x5b,%edx
  40ec0b:	e8 35 c2 ff ff       	callq  40ae45 <_d_array_bounds>
  40ec10:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  40ec17:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  40ec1e:	48 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%rcx
  40ec25:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
  40ec29:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  40ec2d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40ec31:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  40ec38:	48 89 02             	mov    %rax,(%rdx)
  40ec3b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40ec3f:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  40ec46:	48 89 41 08          	mov    %rax,0x8(%rcx)
}
  40ec4a:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  40ec51:	c9                   	leaveq 
  40ec52:	c3                   	retq   

000000000040ec53 <_D3std6stdarg14__T6va_argTAaZ6va_argFG1S3gcc8builtins13__va_list_tagZAa>:
    alias void* va_list;
}

template va_arg(T)
{
    T va_arg(inout va_list _argptr)
  40ec53:	55                   	push   %rbp
  40ec54:	48 89 e5             	mov    %rsp,%rbp
  40ec57:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
	/*
	T arg = *cast(T*)_argptr;
	_argptr = _argptr + ((T.sizeof + int.sizeof - 1) & ~(int.sizeof - 1));
	return arg;
	*/
	T t; return t;
  40ec5b:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40ec62:	00 
  40ec63:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40ec6a:	00 
  40ec6b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40ec6f:	48 89 07             	mov    %rax,(%rdi)
  40ec72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ec76:	48 89 47 08          	mov    %rax,0x8(%rdi)
    }
  40ec7a:	48 89 f8             	mov    %rdi,%rax
  40ec7d:	c9                   	leaveq 
  40ec7e:	c3                   	retq   

000000000040ec7f <_D3std6stdarg13__T6va_argTlZ6va_argFG1S3gcc8builtins13__va_list_tagZl>:
    alias void* va_list;
}

template va_arg(T)
{
    T va_arg(inout va_list _argptr)
  40ec7f:	55                   	push   %rbp
  40ec80:	48 89 e5             	mov    %rsp,%rbp
  40ec83:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	/*
	T arg = *cast(T*)_argptr;
	_argptr = _argptr + ((T.sizeof + int.sizeof - 1) & ~(int.sizeof - 1));
	return arg;
	*/
	T t; return t;
  40ec87:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40ec8e:	00 
  40ec8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  40ec93:	c9                   	leaveq 
  40ec94:	c3                   	retq   

000000000040ec95 <_D3std6stdarg13__T6va_argTmZ6va_argFG1S3gcc8builtins13__va_list_tagZm>:
    alias void* va_list;
}

template va_arg(T)
{
    T va_arg(inout va_list _argptr)
  40ec95:	55                   	push   %rbp
  40ec96:	48 89 e5             	mov    %rsp,%rbp
  40ec99:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	/*
	T arg = *cast(T*)_argptr;
	_argptr = _argptr + ((T.sizeof + int.sizeof - 1) & ~(int.sizeof - 1));
	return arg;
	*/
	T t; return t;
  40ec9d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40eca4:	00 
  40eca5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  40eca9:	c9                   	leaveq 
  40ecaa:	c3                   	retq   

000000000040ecab <_D3std6stdarg13__T6va_argTiZ6va_argFG1S3gcc8builtins13__va_list_tagZi>:
    alias void* va_list;
}

template va_arg(T)
{
    T va_arg(inout va_list _argptr)
  40ecab:	55                   	push   %rbp
  40ecac:	48 89 e5             	mov    %rsp,%rbp
  40ecaf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	/*
	T arg = *cast(T*)_argptr;
	_argptr = _argptr + ((T.sizeof + int.sizeof - 1) & ~(int.sizeof - 1));
	return arg;
	*/
	T t; return t;
  40ecb3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40ecba:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
  40ecbd:	c9                   	leaveq 
  40ecbe:	c3                   	retq   
  40ecbf:	90                   	nop    

000000000040ecc0 <_D5libos8keyboard8Keyboard4initFZv>:
struct Keyboard
{

static:

	void init()
  40ecc0:	55                   	push   %rbp
  40ecc1:	48 89 e5             	mov    %rsp,%rbp
  40ecc4:	48 83 ec 20          	sub    $0x20,%rsp
	{
		kInfo = Syscall.initKeyboard();
  40ecc8:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  40eccc:	e8 47 ef ff ff       	callq  40dc18 <_D4user7syscall12initKeyboardFZS4user7syscall12KeyboardInfo>
  40ecd1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ecd5:	48 89 05 24 0e 01 00 	mov    %rax,0x10e24(%rip)        # 41fb00 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo>
  40ecdc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ece0:	48 89 05 21 0e 01 00 	mov    %rax,0x10e21(%rip)        # 41fb08 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x8>
  40ece7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40eceb:	48 89 05 1e 0e 01 00 	mov    %rax,0x10e1e(%rip)        # 41fb10 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x10>
  40ecf2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ecf6:	48 89 05 1b 0e 01 00 	mov    %rax,0x10e1b(%rip)        # 41fb18 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x18>
	}
  40ecfd:	c9                   	leaveq 
  40ecfe:	c3                   	retq   

000000000040ecff <_D5libos8keyboard8Keyboard7grabKeyFZs>:

	short grabKey()
  40ecff:	55                   	push   %rbp
  40ed00:	48 89 e5             	mov    %rsp,%rbp
  40ed03:	48 83 ec 30          	sub    $0x30,%rsp
	{
		short ret = bufferGrabKey();
  40ed07:	e8 5d 02 00 00       	callq  40ef69 <_D5libos8keyboard8Keyboard13bufferGrabKeyFZs>
  40ed0c:	66 89 45 fe          	mov    %ax,-0x2(%rbp)

		short key = ret;
  40ed10:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  40ed14:	66 89 45 fc          	mov    %ax,-0x4(%rbp)

		bool up;
  40ed18:	c6 45 fb 00          	movb   $0x0,-0x5(%rbp)

		if (ret < 0)
  40ed1c:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40ed20:	85 c0                	test   %eax,%eax
  40ed22:	79 08                	jns    40ed2c <_D5libos8keyboard8Keyboard7grabKeyFZs+0x2d>
		{
			up = true;
  40ed24:	c6 45 fb 01          	movb   $0x1,-0x5(%rbp)
			ret = -ret;
  40ed28:	66 f7 5d fe          	negw   -0x2(%rbp)
		}

		if (ret >= Key.max)
  40ed2c:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40ed30:	83 f8 78             	cmp    $0x78,%eax
  40ed33:	7c 0b                	jl     40ed40 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x41>
		{
			return Key.Null;
  40ed35:	66 c7 45 d6 00 00    	movw   $0x0,-0x2a(%rbp)
  40ed3b:	e9 f9 00 00 00       	jmpq   40ee39 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x13a>
		}

		keyState[ret] = !up;
  40ed40:	48 0f bf 45 fe       	movswq -0x2(%rbp),%rax
  40ed45:	48 83 f8 78          	cmp    $0x78,%rax
  40ed49:	73 0b                	jae    40ed56 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x57>
  40ed4b:	48 0f bf 45 fe       	movswq -0x2(%rbp),%rax
  40ed50:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40ed54:	eb 22                	jmp    40ed78 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x79>
  40ed56:	48 c7 45 e0 10 00 00 	movq   $0x10,-0x20(%rbp)
  40ed5d:	00 
  40ed5e:	48 c7 45 e8 e1 47 41 	movq   $0x4147e1,-0x18(%rbp)
  40ed65:	00 
  40ed66:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40ed6a:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40ed6e:	ba 23 00 00 00       	mov    $0x23,%edx
  40ed73:	e8 cd c0 ff ff       	callq  40ae45 <_d_array_bounds>
  40ed78:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ed7c:	48 8d 90 40 fb 41 00 	lea    0x41fb40(%rax),%rdx
  40ed83:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  40ed87:	83 f0 01             	xor    $0x1,%eax
  40ed8a:	88 02                	mov    %al,(%rdx)

		if (ret == Key.LeftShift || ret == Key.RightShift)
  40ed8c:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40ed90:	83 f8 2d             	cmp    $0x2d,%eax
  40ed93:	74 09                	je     40ed9e <_D5libos8keyboard8Keyboard7grabKeyFZs+0x9f>
  40ed95:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40ed99:	83 f8 30             	cmp    $0x30,%eax
  40ed9c:	75 26                	jne    40edc4 <_D5libos8keyboard8Keyboard7grabKeyFZs+0xc5>
		{
			shiftState = keyState[Key.LeftShift] | keyState[Key.RightShift];
  40ed9e:	b8 2d 00 00 00       	mov    $0x2d,%eax
  40eda3:	48 05 40 fb 41 00    	add    $0x41fb40,%rax
  40eda9:	0f b6 10             	movzbl (%rax),%edx
  40edac:	b8 30 00 00 00       	mov    $0x30,%eax
  40edb1:	48 05 40 fb 41 00    	add    $0x41fb40,%rax
  40edb7:	0f b6 00             	movzbl (%rax),%eax
  40edba:	09 d0                	or     %edx,%eax
  40edbc:	88 05 5e 0d 01 00    	mov    %al,0x10d5e(%rip)        # 41fb20 <_D5libos8keyboard8Keyboard10shiftStateb>
			return Key.Null;
		}

		keyState[ret] = !up;

		if (ret == Key.LeftShift || ret == Key.RightShift)
  40edc2:	eb 6e                	jmp    40ee32 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x133>
		{
			shiftState = keyState[Key.LeftShift] | keyState[Key.RightShift];
		}
		else if (ret == Key.LeftControl || ret == Key.RightControl)
  40edc4:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40edc8:	83 f8 2e             	cmp    $0x2e,%eax
  40edcb:	74 09                	je     40edd6 <_D5libos8keyboard8Keyboard7grabKeyFZs+0xd7>
  40edcd:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40edd1:	83 f8 57             	cmp    $0x57,%eax
  40edd4:	75 26                	jne    40edfc <_D5libos8keyboard8Keyboard7grabKeyFZs+0xfd>
		{
			ctrlState = keyState[Key.LeftControl] | keyState[Key.RightControl];
  40edd6:	b8 2e 00 00 00       	mov    $0x2e,%eax
  40eddb:	48 05 40 fb 41 00    	add    $0x41fb40,%rax
  40ede1:	0f b6 10             	movzbl (%rax),%edx
  40ede4:	b8 57 00 00 00       	mov    $0x57,%eax
  40ede9:	48 05 40 fb 41 00    	add    $0x41fb40,%rax
  40edef:	0f b6 00             	movzbl (%rax),%eax
  40edf2:	09 d0                	or     %edx,%eax
  40edf4:	88 05 28 0d 01 00    	mov    %al,0x10d28(%rip)        # 41fb22 <_D5libos8keyboard8Keyboard9ctrlStateb>

		if (ret == Key.LeftShift || ret == Key.RightShift)
		{
			shiftState = keyState[Key.LeftShift] | keyState[Key.RightShift];
		}
		else if (ret == Key.LeftControl || ret == Key.RightControl)
  40edfa:	eb 36                	jmp    40ee32 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x133>
		{
			ctrlState = keyState[Key.LeftControl] | keyState[Key.RightControl];
		}
		else if (ret == Key.LeftAlt || ret == Key.RightAlt)
  40edfc:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40ee00:	83 f8 2f             	cmp    $0x2f,%eax
  40ee03:	74 09                	je     40ee0e <_D5libos8keyboard8Keyboard7grabKeyFZs+0x10f>
  40ee05:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
  40ee09:	83 f8 59             	cmp    $0x59,%eax
  40ee0c:	75 24                	jne    40ee32 <_D5libos8keyboard8Keyboard7grabKeyFZs+0x133>
		{
			altState = keyState[Key.LeftAlt] | keyState[Key.RightAlt];
  40ee0e:	b8 2f 00 00 00       	mov    $0x2f,%eax
  40ee13:	48 05 40 fb 41 00    	add    $0x41fb40,%rax
  40ee19:	0f b6 10             	movzbl (%rax),%edx
  40ee1c:	b8 59 00 00 00       	mov    $0x59,%eax
  40ee21:	48 05 40 fb 41 00    	add    $0x41fb40,%rax
  40ee27:	0f b6 00             	movzbl (%rax),%eax
  40ee2a:	09 d0                	or     %edx,%eax
  40ee2c:	88 05 ef 0c 01 00    	mov    %al,0x10cef(%rip)        # 41fb21 <_D5libos8keyboard8Keyboard8altStateb>
		}

		return key;
  40ee32:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40ee35:	66 89 45 d6          	mov    %ax,-0x2a(%rbp)
  40ee39:	0f b7 45 d6          	movzwl -0x2a(%rbp),%eax
	}
  40ee3d:	c9                   	leaveq 
  40ee3e:	c3                   	retq   

000000000040ee3f <_D5libos8keyboard8Keyboard13translateCodeFsZa>:

	char translateCode(short code)
  40ee3f:	55                   	push   %rbp
  40ee40:	48 89 e5             	mov    %rsp,%rbp
  40ee43:	48 83 ec 50          	sub    $0x50,%rsp
  40ee47:	66 89 7d ce          	mov    %di,-0x32(%rbp)
	{
		if (code <= 0) { return '\0'; }
  40ee4b:	0f bf 45 ce          	movswl -0x32(%rbp),%eax
  40ee4f:	85 c0                	test   %eax,%eax
  40ee51:	7f 09                	jg     40ee5c <_D5libos8keyboard8Keyboard13translateCodeFsZa+0x1d>
  40ee53:	c6 45 b7 00          	movb   $0x0,-0x49(%rbp)
  40ee57:	e9 b9 00 00 00       	jmpq   40ef15 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0xd6>

		// these translations only work on positive values
		// therefore, all up states must be ignored

		char ret;
  40ee5c:	c6 45 ff ff          	movb   $0xff,-0x1(%rbp)
		if (shiftState)
  40ee60:	0f b6 05 b9 0c 01 00 	movzbl 0x10cb9(%rip),%eax        # 41fb20 <_D5libos8keyboard8Keyboard10shiftStateb>
  40ee67:	84 c0                	test   %al,%al
  40ee69:	74 4a                	je     40eeb5 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0x76>
		{
			ret = translateShift[code];
  40ee6b:	48 0f bf 45 ce       	movswq -0x32(%rbp),%rax
  40ee70:	48 83 f8 78          	cmp    $0x78,%rax
  40ee74:	73 0b                	jae    40ee81 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0x42>
  40ee76:	48 0f bf 45 ce       	movswq -0x32(%rbp),%rax
  40ee7b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40ee7f:	eb 22                	jmp    40eea3 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0x64>
  40ee81:	48 c7 45 d0 10 00 00 	movq   $0x10,-0x30(%rbp)
  40ee88:	00 
  40ee89:	48 c7 45 d8 e1 47 41 	movq   $0x4147e1,-0x28(%rbp)
  40ee90:	00 
  40ee91:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  40ee95:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40ee99:	ba 3f 00 00 00       	mov    $0x3f,%edx
  40ee9e:	e8 a2 bf ff ff       	callq  40ae45 <_d_array_bounds>
  40eea3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40eea7:	48 05 e0 d5 41 00    	add    $0x41d5e0,%rax
  40eead:	0f b6 00             	movzbl (%rax),%eax
  40eeb0:	88 45 ff             	mov    %al,-0x1(%rbp)
  40eeb3:	eb 48                	jmp    40eefd <_D5libos8keyboard8Keyboard13translateCodeFsZa+0xbe>
		}
		else
		{
			ret = translate[code];
  40eeb5:	48 0f bf 45 ce       	movswq -0x32(%rbp),%rax
  40eeba:	48 83 f8 78          	cmp    $0x78,%rax
  40eebe:	73 0b                	jae    40eecb <_D5libos8keyboard8Keyboard13translateCodeFsZa+0x8c>
  40eec0:	48 0f bf 45 ce       	movswq -0x32(%rbp),%rax
  40eec5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40eec9:	eb 22                	jmp    40eeed <_D5libos8keyboard8Keyboard13translateCodeFsZa+0xae>
  40eecb:	48 c7 45 e0 10 00 00 	movq   $0x10,-0x20(%rbp)
  40eed2:	00 
  40eed3:	48 c7 45 e8 e1 47 41 	movq   $0x4147e1,-0x18(%rbp)
  40eeda:	00 
  40eedb:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40eedf:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40eee3:	ba 43 00 00 00       	mov    $0x43,%edx
  40eee8:	e8 58 bf ff ff       	callq  40ae45 <_d_array_bounds>
  40eeed:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40eef1:	48 05 60 d5 41 00    	add    $0x41d560,%rax
  40eef7:	0f b6 00             	movzbl (%rax),%eax
  40eefa:	88 45 ff             	mov    %al,-0x1(%rbp)
		}

		if (ret != '\xFF')
  40eefd:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40ef01:	3d ff 00 00 00       	cmp    $0xff,%eax
  40ef06:	74 09                	je     40ef11 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0xd2>
		{
			return ret;
  40ef08:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40ef0c:	88 45 b7             	mov    %al,-0x49(%rbp)
  40ef0f:	eb 04                	jmp    40ef15 <_D5libos8keyboard8Keyboard13translateCodeFsZa+0xd6>
		}

		return '\0';
  40ef11:	c6 45 b7 00          	movb   $0x0,-0x49(%rbp)
  40ef15:	0f b6 45 b7          	movzbl -0x49(%rbp),%eax
	}
  40ef19:	c9                   	leaveq 
  40ef1a:	c3                   	retq   

000000000040ef1b <_D5libos8keyboard8Keyboard8grabCharFZa>:

	// block until a printable character is detected
	char grabChar()
  40ef1b:	55                   	push   %rbp
  40ef1c:	48 89 e5             	mov    %rsp,%rbp
  40ef1f:	48 83 ec 20          	sub    $0x20,%rsp
	{
		short key;
  40ef23:	66 c7 45 fe 00 00    	movw   $0x0,-0x2(%rbp)
		char ret;
  40ef29:	c6 45 fd ff          	movb   $0xff,-0x3(%rbp)

		for(;;)
  40ef2d:	b8 00 00 00 00       	mov    $0x0,%eax
  40ef32:	84 c0                	test   %al,%al
  40ef34:	75 29                	jne    40ef5f <_D5libos8keyboard8Keyboard8grabCharFZa+0x44>
		{
			key = grabKey();
  40ef36:	e8 c4 fd ff ff       	callq  40ecff <_D5libos8keyboard8Keyboard7grabKeyFZs>
  40ef3b:	66 89 45 fe          	mov    %ax,-0x2(%rbp)

			ret = translateCode(key);
  40ef3f:	0f bf 7d fe          	movswl -0x2(%rbp),%edi
  40ef43:	e8 f7 fe ff ff       	callq  40ee3f <_D5libos8keyboard8Keyboard13translateCodeFsZa>
  40ef48:	88 45 fd             	mov    %al,-0x3(%rbp)

			if (ret != '\xFF')
  40ef4b:	0f b6 45 fd          	movzbl -0x3(%rbp),%eax
  40ef4f:	3d ff 00 00 00       	cmp    $0xff,%eax
  40ef54:	74 d7                	je     40ef2d <_D5libos8keyboard8Keyboard8grabCharFZa+0x12>
			{
				return ret;
  40ef56:	0f b6 45 fd          	movzbl -0x3(%rbp),%eax
  40ef5a:	88 45 ef             	mov    %al,-0x11(%rbp)
  40ef5d:	eb 04                	jmp    40ef63 <_D5libos8keyboard8Keyboard8grabCharFZa+0x48>
			}
		}

		return 0;
  40ef5f:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  40ef63:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
	}
  40ef67:	c9                   	leaveq 
  40ef68:	c3                   	retq   

000000000040ef69 <_D5libos8keyboard8Keyboard13bufferGrabKeyFZs>:
		Key.Minus: '_', Key.Equals: '+', Key.Quote: '~', Key.Apostrophe: '"',

		Key.Return: '\n', Key.Space: ' ',
	];

	short bufferGrabKey()
  40ef69:	55                   	push   %rbp
  40ef6a:	48 89 e5             	mov    %rsp,%rbp
	{
		if ((*kInfo.writePointer) != (*kInfo.readPointer) &&
  40ef6d:	48 8b 05 9c 0b 01 00 	mov    0x10b9c(%rip),%rax        # 41fb10 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x10>
  40ef74:	8b 10                	mov    (%rax),%edx
  40ef76:	48 8b 05 9b 0b 01 00 	mov    0x10b9b(%rip),%rax        # 41fb18 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x18>
  40ef7d:	8b 00                	mov    (%rax),%eax
  40ef7f:	39 c2                	cmp    %eax,%edx
  40ef81:	74 3d                	je     40efc0 <_D5libos8keyboard8Keyboard13bufferGrabKeyFZs+0x57>
  40ef83:	48 8b 05 8e 0b 01 00 	mov    0x10b8e(%rip),%rax        # 41fb18 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x18>
  40ef8a:	8b 00                	mov    (%rax),%eax
  40ef8c:	89 c2                	mov    %eax,%edx
  40ef8e:	8b 05 74 0b 01 00    	mov    0x10b74(%rip),%eax        # 41fb08 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x8>
  40ef94:	39 c2                	cmp    %eax,%edx
  40ef96:	73 28                	jae    40efc0 <_D5libos8keyboard8Keyboard13bufferGrabKeyFZs+0x57>
			((*kInfo.readPointer) < (kInfo.bufferLength)))
		{
			return kInfo.buffer[(*kInfo.readPointer)++];
  40ef98:	48 8b 0d 61 0b 01 00 	mov    0x10b61(%rip),%rcx        # 41fb00 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo>
  40ef9f:	48 8b 35 72 0b 01 00 	mov    0x10b72(%rip),%rsi        # 41fb18 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x18>
  40efa6:	8b 16                	mov    (%rsi),%edx
  40efa8:	48 63 c2             	movslq %edx,%rax
  40efab:	48 01 c0             	add    %rax,%rax
  40efae:	48 8d 04 01          	lea    (%rcx,%rax,1),%rax
  40efb2:	0f b7 00             	movzwl (%rax),%eax
  40efb5:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
  40efb9:	8d 42 01             	lea    0x1(%rdx),%eax
  40efbc:	89 06                	mov    %eax,(%rsi)
  40efbe:	eb 1f                	jmp    40efdf <_D5libos8keyboard8Keyboard13bufferGrabKeyFZs+0x76>
		}
		else
		{
			return kInfo.buffer[kInfo.bufferLength - 1];
  40efc0:	48 8b 15 39 0b 01 00 	mov    0x10b39(%rip),%rdx        # 41fb00 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo>
  40efc7:	8b 05 3b 0b 01 00    	mov    0x10b3b(%rip),%eax        # 41fb08 <_D5libos8keyboard8Keyboard5kInfoS4user7syscall12KeyboardInfo+0x8>
  40efcd:	ff c8                	dec    %eax
  40efcf:	89 c0                	mov    %eax,%eax
  40efd1:	48 01 c0             	add    %rax,%rax
  40efd4:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40efd8:	0f b7 00             	movzwl (%rax),%eax
  40efdb:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
  40efdf:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
		}

		return 0;
	}
  40efe3:	c9                   	leaveq 
  40efe4:	c3                   	retq   
  40efe5:	90                   	nop    
  40efe6:	90                   	nop    
  40efe7:	90                   	nop    

000000000040efe8 <_D5libos7console7Console4initFZv>:

struct Console {

static:

	void init()
  40efe8:	55                   	push   %rbp
  40efe9:	48 89 e5             	mov    %rsp,%rbp
  40efec:	48 83 ec 20          	sub    $0x20,%rsp
	{
		cInfo = initConsole();
  40eff0:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  40eff4:	e8 8a ec ff ff       	callq  40dc83 <_D4user7syscall11initConsoleFZS4user7syscall11ConsoleInfo>
  40eff9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40effd:	48 89 05 bc 0b 01 00 	mov    %rax,0x10bbc(%rip)        # 41fbc0 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40f004:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f008:	48 89 05 b9 0b 01 00 	mov    %rax,0x10bb9(%rip)        # 41fbc8 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40f00f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40f013:	48 89 05 b6 0b 01 00 	mov    %rax,0x10bb6(%rip)        # 41fbd0 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x10>
  40f01a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40f01e:	48 89 05 b3 0b 01 00 	mov    %rax,0x10bb3(%rip)        # 41fbd8 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
	}
  40f025:	c9                   	leaveq 
  40f026:	c3                   	retq   

000000000040f027 <_D5libos7console7Console11setPositionFiiZv>:

	void setPosition(int x, int y)
  40f027:	55                   	push   %rbp
  40f028:	48 89 e5             	mov    %rsp,%rbp
  40f02b:	89 7d fc             	mov    %edi,-0x4(%rbp)
  40f02e:	89 75 f8             	mov    %esi,-0x8(%rbp)
	{
		if ((x < 0 || x >= cInfo.xMax) &&
  40f031:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40f035:	78 0b                	js     40f042 <_D5libos7console7Console11setPositionFiiZv+0x1b>
  40f037:	8b 05 83 0b 01 00    	mov    0x10b83(%rip),%eax        # 41fbc0 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40f03d:	39 45 fc             	cmp    %eax,-0x4(%rbp)
  40f040:	7c 13                	jl     40f055 <_D5libos7console7Console11setPositionFiiZv+0x2e>
  40f042:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  40f046:	78 1f                	js     40f067 <_D5libos7console7Console11setPositionFiiZv+0x40>
  40f048:	8b 05 76 0b 01 00    	mov    0x10b76(%rip),%eax        # 41fbc4 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x4>
  40f04e:	39 45 f8             	cmp    %eax,-0x8(%rbp)
  40f051:	7c 02                	jl     40f055 <_D5libos7console7Console11setPositionFiiZv+0x2e>
			(y < 0 || y >= cInfo.yMax))
		{
			return;
  40f053:	eb 12                	jmp    40f067 <_D5libos7console7Console11setPositionFiiZv+0x40>
		}

		// XXX: LOCK!!!
		cInfo.xPos = x;
  40f055:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40f058:	89 05 6a 0b 01 00    	mov    %eax,0x10b6a(%rip)        # 41fbc8 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
		cInfo.yPos = y;
  40f05e:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40f061:	89 05 65 0b 01 00    	mov    %eax,0x10b65(%rip)        # 41fbcc <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
	}
  40f067:	c9                   	leaveq 
  40f068:	c3                   	retq   

000000000040f069 <_D5libos7console7Console11getPositionFJiJiZv>:

	void getPosition(out int x, out int y)
  40f069:	55                   	push   %rbp
  40f06a:	48 89 e5             	mov    %rsp,%rbp
  40f06d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40f071:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40f075:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40f079:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  40f07f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40f083:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
	{
		x = cInfo.xPos;
  40f089:	8b 15 39 0b 01 00    	mov    0x10b39(%rip),%edx        # 41fbc8 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40f08f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40f093:	89 10                	mov    %edx,(%rax)
		y = cInfo.yPos;
  40f095:	8b 15 31 0b 01 00    	mov    0x10b31(%rip),%edx        # 41fbcc <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40f09b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40f09f:	89 10                	mov    %edx,(%rax)
	}
  40f0a1:	c9                   	leaveq 
  40f0a2:	c3                   	retq   

000000000040f0a3 <_D5libos7console7Console5clearFZv>:

	void clear()
  40f0a3:	55                   	push   %rbp
  40f0a4:	48 89 e5             	mov    %rsp,%rbp
	{
		// LOCK
		for (int i = 0; i < cInfo.xMax * cInfo.yMax * 2; i++)
  40f0a7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40f0ae:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  40f0b1:	8b 15 09 0b 01 00    	mov    0x10b09(%rip),%edx        # 41fbc0 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40f0b7:	8b 05 07 0b 01 00    	mov    0x10b07(%rip),%eax        # 41fbc4 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x4>
  40f0bd:	0f af c2             	imul   %edx,%eax
  40f0c0:	01 c0                	add    %eax,%eax
  40f0c2:	39 c1                	cmp    %eax,%ecx
  40f0c4:	0f 9c c0             	setl   %al
  40f0c7:	83 f0 01             	xor    $0x1,%eax
  40f0ca:	84 c0                	test   %al,%al
  40f0cc:	75 31                	jne    40f0ff <_D5libos7console7Console5clearFZv+0x5c>
		{
			volatile *(cInfo.buffer + i) = 0;
  40f0ce:	48 8b 15 03 0b 01 00 	mov    0x10b03(%rip),%rdx        # 41fbd8 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40f0d5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40f0d8:	48 98                	cltq   
  40f0da:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40f0de:	c6 00 00             	movb   $0x0,(%rax)

			cInfo.xPos = 0;
  40f0e1:	c7 05 dd 0a 01 00 00 	movl   $0x0,0x10add(%rip)        # 41fbc8 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40f0e8:	00 00 00 
			cInfo.yPos = 0;
  40f0eb:	c7 05 d7 0a 01 00 00 	movl   $0x0,0x10ad7(%rip)        # 41fbcc <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40f0f2:	00 00 00 
  40f0f5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40f0f8:	ff c0                	inc    %eax
  40f0fa:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40f0fd:	eb af                	jmp    40f0ae <_D5libos7console7Console5clearFZv+0xb>
		}
	}
  40f0ff:	c9                   	leaveq 
  40f100:	c3                   	retq   

000000000040f101 <_D5libos7console7Console11printStringFAaZv>:

	void printString(char[] str)
  40f101:	55                   	push   %rbp
  40f102:	48 89 e5             	mov    %rsp,%rbp
  40f105:	48 83 ec 10          	sub    $0x10,%rsp
  40f109:	48 89 f8             	mov    %rdi,%rax
  40f10c:	48 89 f2             	mov    %rsi,%rdx
  40f10f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40f113:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
	{
		// LOCK
		putString(str);
  40f117:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40f11b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40f11f:	e8 2b 02 00 00       	callq  40f34f <_D5libos7console7Console9putStringFAaZv>
	}
  40f124:	c9                   	leaveq 
  40f125:	c3                   	retq   

000000000040f126 <_D5libos7console7Console9printCharFaZv>:

	void printChar(char c)
  40f126:	55                   	push   %rbp
  40f127:	48 89 e5             	mov    %rsp,%rbp
  40f12a:	48 83 ec 10          	sub    $0x10,%rsp
  40f12e:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
	{
		// LOCK
		putChar(c);
  40f132:	0f b6 7d ff          	movzbl -0x1(%rbp),%edi
  40f136:	e8 6b 02 00 00       	callq  40f3a6 <_D5libos7console7Console7putCharFaZv>
	}
  40f13b:	c9                   	leaveq 
  40f13c:	c3                   	retq   

000000000040f13d <_D5libos7console7Console11resetColorsFZv>:

	void resetColors()
  40f13d:	55                   	push   %rbp
  40f13e:	48 89 e5             	mov    %rsp,%rbp
	{
		curColor = Color.LightGray;
  40f141:	c6 05 84 e5 00 00 07 	movb   $0x7,0xe584(%rip)        # 41d6cc <_D5libos7console7Console8curColorh>
	}
  40f148:	c9                   	leaveq 
  40f149:	c3                   	retq   

000000000040f14a <_D5libos7console7Console12setForeColorFE5libos7console5ColorZv>:

	void setForeColor(Color newColor)
  40f14a:	55                   	push   %rbp
  40f14b:	48 89 e5             	mov    %rsp,%rbp
  40f14e:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
	{
		curColor &= newColor | 0xF0;
  40f152:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  40f156:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
  40f15b:	09 c2                	or     %eax,%edx
  40f15d:	0f b6 05 68 e5 00 00 	movzbl 0xe568(%rip),%eax        # 41d6cc <_D5libos7console7Console8curColorh>
  40f164:	21 d0                	and    %edx,%eax
  40f166:	88 05 60 e5 00 00    	mov    %al,0xe560(%rip)        # 41d6cc <_D5libos7console7Console8curColorh>
	}
  40f16c:	c9                   	leaveq 
  40f16d:	c3                   	retq   

000000000040f16e <_D5libos7console7Console12setBackColorFE5libos7console5ColorZv>:

	void setBackColor(Color newColor)
  40f16e:	55                   	push   %rbp
  40f16f:	48 89 e5             	mov    %rsp,%rbp
  40f172:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
	{
		curColor &= (newColor << 4) | 0x0F;
  40f176:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40f17a:	c1 e0 04             	shl    $0x4,%eax
  40f17d:	89 c2                	mov    %eax,%edx
  40f17f:	83 ca 0f             	or     $0xf,%edx
  40f182:	0f b6 05 43 e5 00 00 	movzbl 0xe543(%rip),%eax        # 41d6cc <_D5libos7console7Console8curColorh>
  40f189:	21 d0                	and    %edx,%eax
  40f18b:	88 05 3b e5 00 00    	mov    %al,0xe53b(%rip)        # 41d6cc <_D5libos7console7Console8curColorh>
	}
  40f191:	c9                   	leaveq 
  40f192:	c3                   	retq   

000000000040f193 <_D5libos7console7Console9setColorsFE5libos7console5ColorE5libos7console5ColorZv>:

	void setColors(Color foreColor, Color backColor)
  40f193:	55                   	push   %rbp
  40f194:	48 89 e5             	mov    %rsp,%rbp
  40f197:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
  40f19b:	40 88 75 fe          	mov    %sil,-0x2(%rbp)
	{
		curColor = (foreColor & 0x0F) | (backColor << 4);
  40f19f:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40f1a3:	89 c2                	mov    %eax,%edx
  40f1a5:	83 e2 0f             	and    $0xf,%edx
  40f1a8:	0f b6 45 fe          	movzbl -0x2(%rbp),%eax
  40f1ac:	c1 e0 04             	shl    $0x4,%eax
  40f1af:	09 d0                	or     %edx,%eax
  40f1b1:	88 05 15 e5 00 00    	mov    %al,0xe515(%rip)        # 41d6cc <_D5libos7console7Console8curColorh>
	}
  40f1b7:	c9                   	leaveq 
  40f1b8:	c3                   	retq   

000000000040f1b9 <_D5libos7console7Console6scrollFiZv>:

	void scroll(int amt)
  40f1b9:	55                   	push   %rbp
  40f1ba:	48 89 e5             	mov    %rsp,%rbp
  40f1bd:	48 83 ec 28          	sub    $0x28,%rsp
  40f1c1:	89 7d dc             	mov    %edi,-0x24(%rbp)
	{
		// do nothing for invalid line count
		if (amt <= 0) { return; }
  40f1c4:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  40f1c8:	0f 8e 7f 01 00 00    	jle    40f34d <_D5libos7console7Console6scrollFiZv+0x194>

		// just clear if it wants to scroll everything
		if (amt >= cInfo.yMax) { clear(); return; }
  40f1ce:	8b 05 f0 09 01 00    	mov    0x109f0(%rip),%eax        # 41fbc4 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x4>
  40f1d4:	39 45 dc             	cmp    %eax,-0x24(%rbp)
  40f1d7:	7c 0a                	jl     40f1e3 <_D5libos7console7Console6scrollFiZv+0x2a>
  40f1d9:	e8 c5 fe ff ff       	callq  40f0a3 <_D5libos7console7Console5clearFZv>
  40f1de:	e9 6a 01 00 00       	jmpq   40f34d <_D5libos7console7Console6scrollFiZv+0x194>

		// go through and copy the proper amount to increase
		// the lines on the screen
		int cury = 0;
  40f1e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
		int offset1 = 0 * cInfo.xMax;
  40f1ea:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
		int offset2 = amt * cInfo.xMax;
  40f1f1:	8b 05 c9 09 01 00    	mov    0x109c9(%rip),%eax        # 41fbc0 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40f1f7:	8b 55 dc             	mov    -0x24(%rbp),%edx
  40f1fa:	0f af c2             	imul   %edx,%eax
  40f1fd:	89 45 ec             	mov    %eax,-0x14(%rbp)

		for(; cury <= cInfo.yMax - amt; cury++)
  40f200:	8b 05 be 09 01 00    	mov    0x109be(%rip),%eax        # 41fbc4 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x4>
  40f206:	2b 45 dc             	sub    -0x24(%rbp),%eax
  40f209:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  40f20c:	0f 9e c0             	setle  %al
  40f20f:	83 f0 01             	xor    $0x1,%eax
  40f212:	84 c0                	test   %al,%al
  40f214:	0f 85 9d 00 00 00    	jne    40f2b7 <_D5libos7console7Console6scrollFiZv+0xfe>
		{
			for (int curx = 0; curx < cInfo.xMax; curx++)
  40f21a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  40f221:	8b 05 99 09 01 00    	mov    0x10999(%rip),%eax        # 41fbc0 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40f227:	39 45 f8             	cmp    %eax,-0x8(%rbp)
  40f22a:	0f 9c c0             	setl   %al
  40f22d:	83 f0 01             	xor    $0x1,%eax
  40f230:	84 c0                	test   %al,%al
  40f232:	75 72                	jne    40f2a6 <_D5libos7console7Console6scrollFiZv+0xed>
			{
				*(cInfo.buffer + (curx + offset1) * 2) =
  40f234:	48 8b 15 9d 09 01 00 	mov    0x1099d(%rip),%rdx        # 41fbd8 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40f23b:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40f23e:	03 45 f8             	add    -0x8(%rbp),%eax
  40f241:	01 c0                	add    %eax,%eax
  40f243:	48 98                	cltq   
  40f245:	48 01 c2             	add    %rax,%rdx
  40f248:	48 8b 0d 89 09 01 00 	mov    0x10989(%rip),%rcx        # 41fbd8 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40f24f:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40f252:	03 45 f8             	add    -0x8(%rbp),%eax
  40f255:	03 45 ec             	add    -0x14(%rbp),%eax
  40f258:	01 c0                	add    %eax,%eax
  40f25a:	48 98                	cltq   
  40f25c:	48 8d 04 01          	lea    (%rcx,%rax,1),%rax
  40f260:	0f b6 00             	movzbl (%rax),%eax
  40f263:	88 02                	mov    %al,(%rdx)
					*(cInfo.buffer + (curx + offset1 + offset2) * 2);
				*(cInfo.buffer + (curx + offset1) * 2 + 1) =
  40f265:	48 8b 15 6c 09 01 00 	mov    0x1096c(%rip),%rdx        # 41fbd8 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40f26c:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40f26f:	03 45 f8             	add    -0x8(%rbp),%eax
  40f272:	01 c0                	add    %eax,%eax
  40f274:	48 98                	cltq   
  40f276:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40f27a:	48 8d 48 01          	lea    0x1(%rax),%rcx
  40f27e:	48 8b 15 53 09 01 00 	mov    0x10953(%rip),%rdx        # 41fbd8 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40f285:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40f288:	03 45 f8             	add    -0x8(%rbp),%eax
  40f28b:	03 45 ec             	add    -0x14(%rbp),%eax
  40f28e:	01 c0                	add    %eax,%eax
  40f290:	48 98                	cltq   
  40f292:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40f296:	48 ff c0             	inc    %rax
  40f299:	0f b6 00             	movzbl (%rax),%eax
  40f29c:	88 01                	mov    %al,(%rcx)
  40f29e:	ff 45 f8             	incl   -0x8(%rbp)
  40f2a1:	e9 7b ff ff ff       	jmpq   40f221 <_D5libos7console7Console6scrollFiZv+0x68>
					*(cInfo.buffer + (curx + offset1 + offset2) * 2 + 1);
			}

			offset1 += cInfo.xMax;
  40f2a6:	8b 05 14 09 01 00    	mov    0x10914(%rip),%eax        # 41fbc0 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40f2ac:	01 45 f0             	add    %eax,-0x10(%rbp)
  40f2af:	ff 45 f4             	incl   -0xc(%rbp)
  40f2b2:	e9 49 ff ff ff       	jmpq   40f200 <_D5libos7console7Console6scrollFiZv+0x47>
		}

		for(; cury <= cInfo.yMax; cury++)
  40f2b7:	8b 05 07 09 01 00    	mov    0x10907(%rip),%eax        # 41fbc4 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x4>
  40f2bd:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  40f2c0:	0f 9e c0             	setle  %al
  40f2c3:	83 f0 01             	xor    $0x1,%eax
  40f2c6:	84 c0                	test   %al,%al
  40f2c8:	75 60                	jne    40f32a <_D5libos7console7Console6scrollFiZv+0x171>
		{
			for (int curx = 0; curx < cInfo.xMax; curx++)
  40f2ca:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40f2d1:	8b 05 e9 08 01 00    	mov    0x108e9(%rip),%eax        # 41fbc0 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40f2d7:	39 45 fc             	cmp    %eax,-0x4(%rbp)
  40f2da:	0f 9c c0             	setl   %al
  40f2dd:	83 f0 01             	xor    $0x1,%eax
  40f2e0:	84 c0                	test   %al,%al
  40f2e2:	75 38                	jne    40f31c <_D5libos7console7Console6scrollFiZv+0x163>
			{
				*(cInfo.buffer + (curx + offset1) * 2) = 0x00;
  40f2e4:	48 8b 15 ed 08 01 00 	mov    0x108ed(%rip),%rdx        # 41fbd8 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40f2eb:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40f2ee:	03 45 fc             	add    -0x4(%rbp),%eax
  40f2f1:	01 c0                	add    %eax,%eax
  40f2f3:	48 98                	cltq   
  40f2f5:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40f2f9:	c6 00 00             	movb   $0x0,(%rax)
				*(cInfo.buffer + (curx + offset1) * 2 + 1) = 0x00;
  40f2fc:	48 8b 15 d5 08 01 00 	mov    0x108d5(%rip),%rdx        # 41fbd8 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40f303:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40f306:	03 45 fc             	add    -0x4(%rbp),%eax
  40f309:	01 c0                	add    %eax,%eax
  40f30b:	48 98                	cltq   
  40f30d:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  40f311:	48 ff c0             	inc    %rax
  40f314:	c6 00 00             	movb   $0x0,(%rax)
  40f317:	ff 45 fc             	incl   -0x4(%rbp)
  40f31a:	eb b5                	jmp    40f2d1 <_D5libos7console7Console6scrollFiZv+0x118>
			}

			offset1 += cInfo.xMax;
  40f31c:	8b 05 9e 08 01 00    	mov    0x1089e(%rip),%eax        # 41fbc0 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40f322:	01 45 f0             	add    %eax,-0x10(%rbp)
  40f325:	ff 45 f4             	incl   -0xc(%rbp)
  40f328:	eb 8d                	jmp    40f2b7 <_D5libos7console7Console6scrollFiZv+0xfe>
		}

		cInfo.yPos -= amt;
  40f32a:	8b 05 9c 08 01 00    	mov    0x1089c(%rip),%eax        # 41fbcc <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40f330:	2b 45 dc             	sub    -0x24(%rbp),%eax
  40f333:	89 05 93 08 01 00    	mov    %eax,0x10893(%rip)        # 41fbcc <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>

		if (cInfo.yPos < 0)
  40f339:	8b 05 8d 08 01 00    	mov    0x1088d(%rip),%eax        # 41fbcc <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40f33f:	85 c0                	test   %eax,%eax
  40f341:	79 0a                	jns    40f34d <_D5libos7console7Console6scrollFiZv+0x194>
		{
			cInfo.yPos = 0;
  40f343:	c7 05 7f 08 01 00 00 	movl   $0x0,0x1087f(%rip)        # 41fbcc <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40f34a:	00 00 00 
		}
	}
  40f34d:	c9                   	leaveq 
  40f34e:	c3                   	retq   

000000000040f34f <_D5libos7console7Console9putStringFAaZv>:

	ubyte curColor = Color.LightGray;


	// non-locked functions
	void putString(char[] str)
  40f34f:	55                   	push   %rbp
  40f350:	48 89 e5             	mov    %rsp,%rbp
  40f353:	48 83 ec 30          	sub    $0x30,%rsp
  40f357:	48 89 f8             	mov    %rdi,%rax
  40f35a:	48 89 f2             	mov    %rsi,%rdx
  40f35d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40f361:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{
		foreach(chr; str)
  40f365:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f369:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40f36d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40f371:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40f375:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f379:	48 03 45 d8          	add    -0x28(%rbp),%rax
  40f37d:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40f381:	0f 95 c0             	setne  %al
  40f384:	83 f0 01             	xor    $0x1,%eax
  40f387:	84 c0                	test   %al,%al
  40f389:	75 19                	jne    40f3a4 <_D5libos7console7Console9putStringFAaZv+0x55>
  40f38b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40f38f:	0f b6 00             	movzbl (%rax),%eax
  40f392:	88 45 ff             	mov    %al,-0x1(%rbp)
		{
			printChar(chr);
  40f395:	0f b6 7d ff          	movzbl -0x1(%rbp),%edi
  40f399:	e8 88 fd ff ff       	callq  40f126 <_D5libos7console7Console9printCharFaZv>
  40f39e:	48 ff 45 f0          	incq   -0x10(%rbp)
  40f3a2:	eb d1                	jmp    40f375 <_D5libos7console7Console9putStringFAaZv+0x26>
		}
	}
  40f3a4:	c9                   	leaveq 
  40f3a5:	c3                   	retq   

000000000040f3a6 <_D5libos7console7Console7putCharFaZv>:

	void putChar(char c)
  40f3a6:	55                   	push   %rbp
  40f3a7:	48 89 e5             	mov    %rsp,%rbp
  40f3aa:	48 83 ec 08          	sub    $0x8,%rsp
  40f3ae:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
	{
		if (c == '\n' || c == '\r')
  40f3b2:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40f3b6:	0f b6 c0             	movzbl %al,%eax
  40f3b9:	83 f8 0a             	cmp    $0xa,%eax
  40f3bc:	74 0c                	je     40f3ca <_D5libos7console7Console7putCharFaZv+0x24>
  40f3be:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40f3c2:	0f b6 c0             	movzbl %al,%eax
  40f3c5:	83 f8 0d             	cmp    $0xd,%eax
  40f3c8:	75 11                	jne    40f3db <_D5libos7console7Console7putCharFaZv+0x35>
		{
			// this will force a new line
			cInfo.xPos = cInfo.xMax;
  40f3ca:	8b 05 f0 07 01 00    	mov    0x107f0(%rip),%eax        # 41fbc0 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40f3d0:	89 05 f2 07 01 00    	mov    %eax,0x107f2(%rip)        # 41fbc8 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
		}
	}

	void putChar(char c)
	{
		if (c == '\n' || c == '\r')
  40f3d6:	e9 93 00 00 00       	jmpq   40f46e <_D5libos7console7Console7putCharFaZv+0xc8>
		{
			// this will force a new line
			cInfo.xPos = cInfo.xMax;
		}
		else if (c == '\t')
  40f3db:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40f3df:	0f b6 c0             	movzbl %al,%eax
  40f3e2:	83 f8 09             	cmp    $0x9,%eax
  40f3e5:	75 11                	jne    40f3f8 <_D5libos7console7Console7putCharFaZv+0x52>
		{
			// increment by the tab length
			cInfo.xPos += Tabstop;
  40f3e7:	8b 05 db 07 01 00    	mov    0x107db(%rip),%eax        # 41fbc8 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40f3ed:	83 c0 04             	add    $0x4,%eax
  40f3f0:	89 05 d2 07 01 00    	mov    %eax,0x107d2(%rip)        # 41fbc8 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40f3f6:	eb 76                	jmp    40f46e <_D5libos7console7Console7putCharFaZv+0xc8>
		}
		else
		{
			volatile *(cInfo.buffer + (cInfo.xPos + (cInfo.yPos * cInfo.xMax)) * 2) = c & 0xFF;
  40f3f8:	48 8b 35 d9 07 01 00 	mov    0x107d9(%rip),%rsi        # 41fbd8 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40f3ff:	8b 0d c3 07 01 00    	mov    0x107c3(%rip),%ecx        # 41fbc8 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40f405:	8b 15 c1 07 01 00    	mov    0x107c1(%rip),%edx        # 41fbcc <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40f40b:	8b 05 af 07 01 00    	mov    0x107af(%rip),%eax        # 41fbc0 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40f411:	0f af c2             	imul   %edx,%eax
  40f414:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  40f417:	01 c0                	add    %eax,%eax
  40f419:	48 98                	cltq   
  40f41b:	48 8d 0c 06          	lea    (%rsi,%rax,1),%rcx
  40f41f:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  40f423:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  40f428:	21 d0                	and    %edx,%eax
  40f42a:	88 01                	mov    %al,(%rcx)
			volatile *(cInfo.buffer + (cInfo.xPos + (cInfo.yPos * cInfo.xMax)) * 2 + 1) = curColor;
  40f42c:	48 8b 35 a5 07 01 00 	mov    0x107a5(%rip),%rsi        # 41fbd8 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x18>
  40f433:	8b 0d 8f 07 01 00    	mov    0x1078f(%rip),%ecx        # 41fbc8 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40f439:	8b 15 8d 07 01 00    	mov    0x1078d(%rip),%edx        # 41fbcc <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40f43f:	8b 05 7b 07 01 00    	mov    0x1077b(%rip),%eax        # 41fbc0 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40f445:	0f af c2             	imul   %edx,%eax
  40f448:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  40f44b:	01 c0                	add    %eax,%eax
  40f44d:	48 98                	cltq   
  40f44f:	48 8d 04 06          	lea    (%rsi,%rax,1),%rax
  40f453:	48 8d 50 01          	lea    0x1(%rax),%rdx
  40f457:	0f b6 05 6e e2 00 00 	movzbl 0xe26e(%rip),%eax        # 41d6cc <_D5libos7console7Console8curColorh>
  40f45e:	88 02                	mov    %al,(%rdx)

			cInfo.xPos++;
  40f460:	8b 05 62 07 01 00    	mov    0x10762(%rip),%eax        # 41fbc8 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40f466:	ff c0                	inc    %eax
  40f468:	89 05 5a 07 01 00    	mov    %eax,0x1075a(%rip)        # 41fbc8 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
		}

		if (cInfo.xPos >= cInfo.xMax)
  40f46e:	8b 15 54 07 01 00    	mov    0x10754(%rip),%edx        # 41fbc8 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40f474:	8b 05 46 07 01 00    	mov    0x10746(%rip),%eax        # 41fbc0 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo>
  40f47a:	39 c2                	cmp    %eax,%edx
  40f47c:	7c 32                	jl     40f4b0 <_D5libos7console7Console7putCharFaZv+0x10a>
		{
			cInfo.xPos = 0;
  40f47e:	c7 05 40 07 01 00 00 	movl   $0x0,0x10740(%rip)        # 41fbc8 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x8>
  40f485:	00 00 00 
			cInfo.yPos ++;
  40f488:	8b 05 3e 07 01 00    	mov    0x1073e(%rip),%eax        # 41fbcc <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40f48e:	ff c0                	inc    %eax
  40f490:	89 05 36 07 01 00    	mov    %eax,0x10736(%rip)        # 41fbcc <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>

			if (cInfo.yPos >= cInfo.yMax)
  40f496:	8b 15 30 07 01 00    	mov    0x10730(%rip),%edx        # 41fbcc <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0xc>
  40f49c:	8b 05 22 07 01 00    	mov    0x10722(%rip),%eax        # 41fbc4 <_D5libos7console7Console5cInfoS4user7syscall11ConsoleInfo+0x4>
  40f4a2:	39 c2                	cmp    %eax,%edx
  40f4a4:	7c 0a                	jl     40f4b0 <_D5libos7console7Console7putCharFaZv+0x10a>
			{
				scroll(1);
  40f4a6:	bf 01 00 00 00       	mov    $0x1,%edi
  40f4ab:	e8 09 fd ff ff       	callq  40f1b9 <_D5libos7console7Console6scrollFiZv>
			}
		}
	}
  40f4b0:	c9                   	leaveq 
  40f4b1:	c3                   	retq   
